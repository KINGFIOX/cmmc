internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @param32_rec(i32 %a1, i32 %a2, i32 %a3, i32 %a4, i32 %a5, i32 %a6, i32 %a7, i32 %a8, i32 %a9, i32 %a10, i32 %a11, i32 %a12, i32 %a13, i32 %a14, i32 %a15, i32 %a16, i32 %a17, i32 %a18, i32 %a19, i32 %a20, i32 %a21, i32 %a22, i32 %a23, i32 %a24, i32 %a25, i32 %a26, i32 %a27, i32 %a28, i32 %a29, i32 %a30, i32 %a31, i32 %a32) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry:
    i1 %0 = scmp eq i32 %a1, i32 0;
    cbr i1 %0(prob = 0.5), ^b, ^if.else;
^if.else:
    i32 %1 = add i32 %a1, i32 -1;
    i32 %2 = add i32 %a2, i32 %a3;
    i32 %3 = srem i32 %2, i32 998244353;
    i32 %4 = call (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32) -> i32 @param32_rec(i32 %1, i32 %3, i32 %a4, i32 %a5, i32 %a6, i32 %a7, i32 %a8, i32 %a9, i32 %a10, i32 %a11, i32 %a12, i32 %a13, i32 %a14, i32 %a15, i32 %a16, i32 %a17, i32 %a18, i32 %a19, i32 %a20, i32 %a21, i32 %a22, i32 %a23, i32 %a24, i32 %a25, i32 %a26, i32 %a27, i32 %a28, i32 %a29, i32 %a30, i32 %a31, i32 %a32, i32 0);
    ubr ^b;
^b:
    i32 %5 = phi [^entry, i32 %a2] [^if.else, i32 %4];
    ret i32 %5;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [16 * i32]* %arr = alloc [16 * i32];
    [32 * [2 * i32]]* %arr1 = alloc [32 * [2 * i32]];
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i32 %2 = call () -> i32 @getint();
    i32 %3 = call () -> i32 @getint();
    i32 %4 = call () -> i32 @getint();
    i32 %5 = call () -> i32 @getint();
    i32 %6 = call () -> i32 @getint();
    i32 %7 = call () -> i32 @getint();
    i32 %8 = call () -> i32 @getint();
    i32 %9 = call () -> i32 @getint();
    i32 %10 = call () -> i32 @getint();
    i32 %11 = call () -> i32 @getint();
    i32 %12 = call () -> i32 @getint();
    i32 %13 = call () -> i32 @getint();
    i32 %14 = call () -> i32 @getint();
    i32 %15 = call () -> i32 @getint();
    i32* %16 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 0][i64 0];
    i32* %17 = getelementptr &([16 * i32]* %arr)[i64 0][i64 0];
    store i32* %17 with i32 %0;
    i32* %18 = getelementptr &([16 * i32]* %arr)[i64 0][i64 1];
    store i32* %18 with i32 %1;
    i32* %19 = getelementptr &([16 * i32]* %arr)[i64 0][i64 2];
    store i32* %19 with i32 %2;
    i32* %20 = getelementptr &([16 * i32]* %arr)[i64 0][i64 3];
    store i32* %20 with i32 %3;
    i32* %21 = getelementptr &([16 * i32]* %arr)[i64 0][i64 4];
    store i32* %21 with i32 %4;
    i32* %22 = getelementptr &([16 * i32]* %arr)[i64 0][i64 5];
    store i32* %22 with i32 %5;
    i32* %23 = getelementptr &([16 * i32]* %arr)[i64 0][i64 6];
    store i32* %23 with i32 %6;
    i32* %24 = getelementptr &([16 * i32]* %arr)[i64 0][i64 7];
    store i32* %24 with i32 %7;
    i32* %25 = getelementptr &([16 * i32]* %arr)[i64 0][i64 8];
    store i32* %25 with i32 %8;
    i32* %26 = getelementptr &([16 * i32]* %arr)[i64 0][i64 9];
    store i32* %26 with i32 %9;
    i32* %27 = getelementptr &([16 * i32]* %arr)[i64 0][i64 10];
    store i32* %27 with i32 %10;
    i32* %28 = getelementptr &([16 * i32]* %arr)[i64 0][i64 11];
    store i32* %28 with i32 %11;
    i32* %29 = getelementptr &([16 * i32]* %arr)[i64 0][i64 12];
    store i32* %29 with i32 %12;
    i32* %30 = getelementptr &([16 * i32]* %arr)[i64 0][i64 13];
    store i32* %30 with i32 %13;
    i32* %31 = getelementptr &([16 * i32]* %arr)[i64 0][i64 14];
    store i32* %31 with i32 %14;
    i32* %32 = getelementptr &([16 * i32]* %arr)[i64 0][i64 15];
    store i32* %32 with i32 %15;
    ubr ^while.body;
^while.body:
    i32 %33 = phi [^entry, i32 0] [^b, i32 %47];
    i32 %34 = phi [^entry, i32 16] [^b, i32 %45];
    i32 %35 = add i32 %33, i32 1;
    i1 %36 = scmp lt i32 %35, i32 %34;
    cbr i1 %36(prob = 0.97), ^while.body1, ^b;
^while.body1:
    i32 %37 = phi [^while.body, i32 %35] [^b1, i32 %53];
    i32 %38 = phi [^while.body, i32 %34] [^b1, i32 %51];
    i32 %39 = phi [^while.body, i32 %33] [^b1, i32 %52];
    i32* %40 = getelementptr &(i32* %17)[i32 %39];
    i32 %41 = load i32* %40;
    i32* %42 = getelementptr &(i32* %17)[i32 %37];
    i32 %43 = load i32* %42;
    i1 %44 = scmp lt i32 %41, i32 %43;
    cbr i1 %44(prob = 0.5), ^if.then, ^b1;
^b:
    i32 %45 = phi [^while.body, i32 %34] [^b1, i32 %51];
    i32 %46 = phi [^while.body, i32 %33] [^b1, i32 %52];
    i32 %47 = add i32 %46, i32 1;
    i32 %48 = add i32 %45, i32 -1;
    i1 %49 = scmp lt i32 %47, i32 %48;
    cbr i1 %49(prob = 0.97), ^while.body, ^entry1;
^if.then:
    i32 %50 = load i32* %40;
    store i32* %40 with i32 %43;
    store i32* %42 with i32 %50;
    ubr ^b1;
^b1:
    i32 %51 = phi [^while.body1, i32 %38] [^if.then, i32 16];
    i32 %52 = phi [^while.body1, i32 %39] [^if.then, i32 %33];
    i32 %53 = add i32 %37, i32 1;
    i1 %54 = scmp lt i32 %53, i32 %51;
    cbr i1 %54(prob = 0.97), ^while.body1, ^b;
^entry1:
    i32 %55 = load i32* %17;
    i32 %56 = load i32* %18;
    i32 %57 = load i32* %19;
    i32 %58 = load i32* %20;
    i32 %59 = load i32* %21;
    i32 %60 = load i32* %22;
    i32 %61 = load i32* %23;
    i32 %62 = load i32* %24;
    i32 %63 = load i32* %25;
    i32 %64 = load i32* %26;
    i32 %65 = load i32* %27;
    i32 %66 = load i32* %28;
    i32 %67 = load i32* %29;
    i32 %68 = load i32* %30;
    i32 %69 = load i32* %31;
    i32 %70 = load i32* %32;
    i32 %71 = call (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32) -> i32 @param32_rec(i32 %55, i32 %56, i32 %57, i32 %58, i32 %59, i32 %60, i32 %61, i32 %62, i32 %63, i32 %64, i32 %65, i32 %66, i32 %67, i32 %68, i32 %69, i32 %70, i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11, i32 %12, i32 %13, i32 %14, i32 %15);
    store i32* %16 with i32 %71;
    i32* %72 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 0][i64 1];
    store i32* %72 with i32 8848;
    i32* %73 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 1][i64 0];
    store i32* %73 with i32 0;
    i32* %74 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 1][i64 1];
    store i32* %74 with i32 0;
    i32* %75 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 2][i64 0];
    store i32* %75 with i32 0;
    i32* %76 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 2][i64 1];
    store i32* %76 with i32 0;
    i32* %77 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 3][i64 0];
    store i32* %77 with i32 0;
    i32* %78 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 3][i64 1];
    store i32* %78 with i32 0;
    i32* %79 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 4][i64 0];
    store i32* %79 with i32 0;
    i32* %80 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 4][i64 1];
    store i32* %80 with i32 0;
    i32* %81 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 5][i64 0];
    store i32* %81 with i32 0;
    i32* %82 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 5][i64 1];
    store i32* %82 with i32 0;
    i32* %83 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 6][i64 0];
    store i32* %83 with i32 0;
    i32* %84 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 6][i64 1];
    store i32* %84 with i32 0;
    i32* %85 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 7][i64 0];
    store i32* %85 with i32 0;
    i32* %86 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 7][i64 1];
    store i32* %86 with i32 0;
    i32* %87 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 8][i64 0];
    store i32* %87 with i32 0;
    i32* %88 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 8][i64 1];
    store i32* %88 with i32 0;
    i32* %89 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 9][i64 0];
    store i32* %89 with i32 0;
    i32* %90 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 9][i64 1];
    store i32* %90 with i32 0;
    i32* %91 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 10][i64 0];
    store i32* %91 with i32 0;
    i32* %92 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 10][i64 1];
    store i32* %92 with i32 0;
    i32* %93 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 11][i64 0];
    store i32* %93 with i32 0;
    i32* %94 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 11][i64 1];
    store i32* %94 with i32 0;
    i32* %95 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 12][i64 0];
    store i32* %95 with i32 0;
    i32* %96 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 12][i64 1];
    store i32* %96 with i32 0;
    i32* %97 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 13][i64 0];
    store i32* %97 with i32 0;
    i32* %98 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 13][i64 1];
    store i32* %98 with i32 0;
    i32* %99 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 14][i64 0];
    store i32* %99 with i32 0;
    i32* %100 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 14][i64 1];
    store i32* %100 with i32 0;
    i32* %101 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 15][i64 0];
    store i32* %101 with i32 0;
    i32* %102 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 15][i64 1];
    store i32* %102 with i32 0;
    i32* %103 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 16][i64 0];
    store i32* %103 with i32 0;
    i32* %104 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 16][i64 1];
    store i32* %104 with i32 0;
    i32* %105 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 17][i64 0];
    store i32* %105 with i32 0;
    i32* %106 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 17][i64 1];
    store i32* %106 with i32 0;
    i32* %107 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 18][i64 0];
    store i32* %107 with i32 0;
    i32* %108 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 18][i64 1];
    store i32* %108 with i32 0;
    i32* %109 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 19][i64 0];
    store i32* %109 with i32 0;
    i32* %110 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 19][i64 1];
    store i32* %110 with i32 0;
    i32* %111 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 20][i64 0];
    store i32* %111 with i32 0;
    i32* %112 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 20][i64 1];
    store i32* %112 with i32 0;
    i32* %113 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 21][i64 0];
    store i32* %113 with i32 0;
    i32* %114 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 21][i64 1];
    store i32* %114 with i32 0;
    i32* %115 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 22][i64 0];
    store i32* %115 with i32 0;
    i32* %116 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 22][i64 1];
    store i32* %116 with i32 0;
    i32* %117 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 23][i64 0];
    store i32* %117 with i32 0;
    i32* %118 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 23][i64 1];
    store i32* %118 with i32 0;
    i32* %119 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 24][i64 0];
    store i32* %119 with i32 0;
    i32* %120 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 24][i64 1];
    store i32* %120 with i32 0;
    i32* %121 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 25][i64 0];
    store i32* %121 with i32 0;
    i32* %122 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 25][i64 1];
    store i32* %122 with i32 0;
    i32* %123 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 26][i64 0];
    store i32* %123 with i32 0;
    i32* %124 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 26][i64 1];
    store i32* %124 with i32 0;
    i32* %125 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 27][i64 0];
    store i32* %125 with i32 0;
    i32* %126 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 27][i64 1];
    store i32* %126 with i32 0;
    i32* %127 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 28][i64 0];
    store i32* %127 with i32 0;
    i32* %128 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 28][i64 1];
    store i32* %128 with i32 0;
    i32* %129 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 29][i64 0];
    store i32* %129 with i32 0;
    i32* %130 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 29][i64 1];
    store i32* %130 with i32 0;
    i32* %131 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 30][i64 0];
    store i32* %131 with i32 0;
    i32* %132 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 30][i64 1];
    store i32* %132 with i32 0;
    i32* %133 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 31][i64 0];
    store i32* %133 with i32 0;
    i32* %134 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 31][i64 1];
    store i32* %134 with i32 0;
    store i32* %73 with i32 8847;
    i32 %135 = add i32 %71, i32 -2;
    store i32* %74 with i32 %135;
    i32 %136 = add i32 %71, i32 -3;
    store i32* %75 with i32 %136;
    store i32* %76 with i32 8845;
    store i32* %77 with i32 8844;
    i32 %137 = add i32 %71, i32 -5;
    store i32* %78 with i32 %137;
    i32 %138 = add i32 %71, i32 -6;
    store i32* %79 with i32 %138;
    store i32* %80 with i32 8842;
    store i32* %81 with i32 8841;
    i32 %139 = add i32 %71, i32 -8;
    store i32* %82 with i32 %139;
    i32 %140 = add i32 %71, i32 -9;
    store i32* %83 with i32 %140;
    store i32* %84 with i32 8839;
    store i32* %85 with i32 8838;
    i32 %141 = add i32 %71, i32 -11;
    store i32* %86 with i32 %141;
    i32 %142 = add i32 %71, i32 -12;
    store i32* %87 with i32 %142;
    store i32* %88 with i32 8836;
    store i32* %89 with i32 8835;
    i32 %143 = add i32 %71, i32 -14;
    store i32* %90 with i32 %143;
    i32 %144 = add i32 %71, i32 -15;
    store i32* %91 with i32 %144;
    store i32* %92 with i32 8833;
    store i32* %93 with i32 8832;
    i32 %145 = add i32 %71, i32 -17;
    store i32* %94 with i32 %145;
    i32 %146 = add i32 %71, i32 -18;
    store i32* %95 with i32 %146;
    store i32* %96 with i32 8830;
    store i32* %97 with i32 8829;
    i32 %147 = add i32 %71, i32 -20;
    store i32* %98 with i32 %147;
    i32 %148 = add i32 %71, i32 -21;
    store i32* %99 with i32 %148;
    store i32* %100 with i32 8827;
    store i32* %101 with i32 8826;
    i32 %149 = add i32 %71, i32 -23;
    store i32* %102 with i32 %149;
    i32 %150 = add i32 %71, i32 -24;
    store i32* %103 with i32 %150;
    store i32* %104 with i32 8824;
    store i32* %105 with i32 8823;
    i32 %151 = add i32 %71, i32 -26;
    store i32* %106 with i32 %151;
    i32 %152 = add i32 %71, i32 -27;
    store i32* %107 with i32 %152;
    store i32* %108 with i32 8821;
    store i32* %109 with i32 8820;
    i32 %153 = add i32 %71, i32 -29;
    store i32* %110 with i32 %153;
    i32 %154 = add i32 %71, i32 -30;
    store i32* %111 with i32 %154;
    store i32* %112 with i32 8818;
    store i32* %113 with i32 8817;
    i32 %155 = add i32 %71, i32 -32;
    store i32* %114 with i32 %155;
    i32 %156 = add i32 %71, i32 -33;
    store i32* %115 with i32 %156;
    store i32* %116 with i32 8815;
    store i32* %117 with i32 8814;
    i32 %157 = add i32 %71, i32 -35;
    store i32* %118 with i32 %157;
    i32 %158 = add i32 %71, i32 -36;
    store i32* %119 with i32 %158;
    store i32* %120 with i32 8812;
    store i32* %121 with i32 8811;
    i32 %159 = add i32 %71, i32 -38;
    store i32* %122 with i32 %159;
    i32 %160 = add i32 %71, i32 -39;
    store i32* %123 with i32 %160;
    store i32* %124 with i32 8809;
    store i32* %125 with i32 8808;
    i32 %161 = add i32 %71, i32 -41;
    store i32* %126 with i32 %161;
    i32 %162 = add i32 %71, i32 -42;
    store i32* %127 with i32 %162;
    store i32* %128 with i32 8806;
    store i32* %129 with i32 8805;
    i32 %163 = add i32 %71, i32 -44;
    store i32* %130 with i32 %163;
    i32 %164 = add i32 %71, i32 -45;
    store i32* %131 with i32 %164;
    store i32* %132 with i32 8803;
    store i32* %133 with i32 8802;
    i32 %165 = add i32 %71, i32 -47;
    store i32* %134 with i32 %165;
    i32 %166 = load i32* %16;
    i32 %167 = add i32 %166, i32 281648;
    i32 %168 = mul i32 %71, i32 31;
    i32 %169 = add i32 %167, i32 %168;
    call (i32) -> void @putint(i32 %169);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
