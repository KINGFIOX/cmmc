internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [16 * i32]* %arr = alloc [16 * i32];
    [32 * [2 * i32]]* %arr1 = alloc [32 * [2 * i32]];
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i32 %2 = call () -> i32 @getint();
    i32 %3 = call () -> i32 @getint();
    i32 %4 = call () -> i32 @getint();
    i32 %5 = call () -> i32 @getint();
    i32 %6 = call () -> i32 @getint();
    i32 %7 = call () -> i32 @getint();
    i32 %8 = call () -> i32 @getint();
    i32 %9 = call () -> i32 @getint();
    i32 %10 = call () -> i32 @getint();
    i32 %11 = call () -> i32 @getint();
    i32 %12 = call () -> i32 @getint();
    i32 %13 = call () -> i32 @getint();
    i32 %14 = call () -> i32 @getint();
    i32 %15 = call () -> i32 @getint();
    i32* %16 = getelementptr &([16 * i32]* %arr)[i64 0][i64 0];
    store i32* %16 with i32 %0;
    i32* %17 = getelementptr &([16 * i32]* %arr)[i64 0][i64 1];
    store i32* %17 with i32 %1;
    i32* %18 = getelementptr &([16 * i32]* %arr)[i64 0][i64 2];
    store i32* %18 with i32 %2;
    i32* %19 = getelementptr &([16 * i32]* %arr)[i64 0][i64 3];
    store i32* %19 with i32 %3;
    i32* %20 = getelementptr &([16 * i32]* %arr)[i64 0][i64 4];
    store i32* %20 with i32 %4;
    i32* %21 = getelementptr &([16 * i32]* %arr)[i64 0][i64 5];
    store i32* %21 with i32 %5;
    i32* %22 = getelementptr &([16 * i32]* %arr)[i64 0][i64 6];
    store i32* %22 with i32 %6;
    i32* %23 = getelementptr &([16 * i32]* %arr)[i64 0][i64 7];
    store i32* %23 with i32 %7;
    i32* %24 = getelementptr &([16 * i32]* %arr)[i64 0][i64 8];
    store i32* %24 with i32 %8;
    i32* %25 = getelementptr &([16 * i32]* %arr)[i64 0][i64 9];
    store i32* %25 with i32 %9;
    i32* %26 = getelementptr &([16 * i32]* %arr)[i64 0][i64 10];
    store i32* %26 with i32 %10;
    i32* %27 = getelementptr &([16 * i32]* %arr)[i64 0][i64 11];
    store i32* %27 with i32 %11;
    i32* %28 = getelementptr &([16 * i32]* %arr)[i64 0][i64 12];
    store i32* %28 with i32 %12;
    i32* %29 = getelementptr &([16 * i32]* %arr)[i64 0][i64 13];
    store i32* %29 with i32 %13;
    i32* %30 = getelementptr &([16 * i32]* %arr)[i64 0][i64 14];
    store i32* %30 with i32 %14;
    i32* %31 = getelementptr &([16 * i32]* %arr)[i64 0][i64 15];
    store i32* %31 with i32 %15;
    ubr ^while.header;
^while.header:
    i32 %32 = phi [^entry, i32 0] [^while.header1, i32 %35];
    i1 %33 = scmp lt i32 %32, i32 15;
    cbr i1 %33(prob = 0.97), ^while.body, ^entry1;
^while.body:
    i32* %34 = getelementptr &(i32* %16)[i32 %32];
    i32 %35 = add i32 %32, i32 1;
    ubr ^while.header1;
^entry1:
    i32 %36 = load i32* %16;
    i32 %37 = load i32* %17;
    i32 %38 = load i32* %18;
    i32 %39 = load i32* %19;
    i32 %40 = load i32* %20;
    i32 %41 = load i32* %21;
    i32 %42 = load i32* %22;
    i32 %43 = load i32* %23;
    i32 %44 = load i32* %24;
    i32 %45 = load i32* %25;
    i32 %46 = load i32* %26;
    i32 %47 = load i32* %27;
    i32 %48 = load i32* %28;
    i32 %49 = load i32* %29;
    i32 %50 = load i32* %30;
    i32 %51 = load i32* %31;
    i1 %52 = scmp eq i32 %36, i32 0;
    cbr i1 %52(prob = 0.5), ^b, ^if.else;
^while.header1:
    i32 %53 = phi [^while.body, i32 %35] [^b1, i32 %194];
    i1 %54 = scmp lt i32 %53, i32 16;
    cbr i1 %54(prob = 0.97), ^while.body1, ^while.header;
^if.else:
    i32 %55 = phi [^entry1, i32 %36] [^if.else, i32 %87];
    i32 %56 = phi [^entry1, i32 %37] [^if.else, i32 %89];
    i32 %57 = phi [^entry1, i32 %38] [^if.else, i32 %58];
    i32 %58 = phi [^entry1, i32 %39] [^if.else, i32 %59];
    i32 %59 = phi [^entry1, i32 %40] [^if.else, i32 %60];
    i32 %60 = phi [^entry1, i32 %41] [^if.else, i32 %61];
    i32 %61 = phi [^entry1, i32 %42] [^if.else, i32 %62];
    i32 %62 = phi [^entry1, i32 %43] [^if.else, i32 %63];
    i32 %63 = phi [^entry1, i32 %44] [^if.else, i32 %64];
    i32 %64 = phi [^entry1, i32 %45] [^if.else, i32 %65];
    i32 %65 = phi [^entry1, i32 %46] [^if.else, i32 %66];
    i32 %66 = phi [^entry1, i32 %47] [^if.else, i32 %67];
    i32 %67 = phi [^entry1, i32 %48] [^if.else, i32 %68];
    i32 %68 = phi [^entry1, i32 %49] [^if.else, i32 %69];
    i32 %69 = phi [^entry1, i32 %50] [^if.else, i32 %70];
    i32 %70 = phi [^entry1, i32 %51] [^if.else, i32 %71];
    i32 %71 = phi [^entry1, i32 %0] [^if.else, i32 %72];
    i32 %72 = phi [^entry1, i32 %1] [^if.else, i32 %73];
    i32 %73 = phi [^entry1, i32 %2] [^if.else, i32 %74];
    i32 %74 = phi [^entry1, i32 %3] [^if.else, i32 %75];
    i32 %75 = phi [^entry1, i32 %4] [^if.else, i32 %76];
    i32 %76 = phi [^entry1, i32 %5] [^if.else, i32 %77];
    i32 %77 = phi [^entry1, i32 %6] [^if.else, i32 %78];
    i32 %78 = phi [^entry1, i32 %7] [^if.else, i32 %79];
    i32 %79 = phi [^entry1, i32 %8] [^if.else, i32 %80];
    i32 %80 = phi [^entry1, i32 %9] [^if.else, i32 %81];
    i32 %81 = phi [^entry1, i32 %10] [^if.else, i32 %82];
    i32 %82 = phi [^entry1, i32 %11] [^if.else, i32 %83];
    i32 %83 = phi [^entry1, i32 %12] [^if.else, i32 %84];
    i32 %84 = phi [^entry1, i32 %13] [^if.else, i32 %85];
    i32 %85 = phi [^entry1, i32 %14] [^if.else, i32 %86];
    i32 %86 = phi [^entry1, i32 %15] [^if.else, i32 0];
    i32 %87 = add i32 %55, i32 -1;
    i32 %88 = add i32 %56, i32 %57;
    i32 %89 = srem i32 %88, i32 998244353;
    i1 %90 = scmp eq i32 %87, i32 0;
    cbr i1 %90(prob = 0.5), ^b, ^if.else;
^b:
    i32 %91 = phi [^entry1, i32 %37] [^if.else, i32 %89];
    i32* %92 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 0][i64 0];
    store i32* %92 with i32 %91;
    i32* %93 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 0][i64 1];
    store i32* %93 with i32 8848;
    i32* %94 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 1][i64 0];
    store i32* %94 with i32 0;
    i32* %95 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 1][i64 1];
    store i32* %95 with i32 0;
    i32* %96 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 2][i64 0];
    store i32* %96 with i32 0;
    i32* %97 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 2][i64 1];
    store i32* %97 with i32 0;
    i32* %98 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 3][i64 0];
    store i32* %98 with i32 0;
    i32* %99 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 3][i64 1];
    store i32* %99 with i32 0;
    i32* %100 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 4][i64 0];
    store i32* %100 with i32 0;
    i32* %101 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 4][i64 1];
    store i32* %101 with i32 0;
    i32* %102 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 5][i64 0];
    store i32* %102 with i32 0;
    i32* %103 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 5][i64 1];
    store i32* %103 with i32 0;
    i32* %104 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 6][i64 0];
    store i32* %104 with i32 0;
    i32* %105 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 6][i64 1];
    store i32* %105 with i32 0;
    i32* %106 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 7][i64 0];
    store i32* %106 with i32 0;
    i32* %107 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 7][i64 1];
    store i32* %107 with i32 0;
    i32* %108 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 8][i64 0];
    store i32* %108 with i32 0;
    i32* %109 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 8][i64 1];
    store i32* %109 with i32 0;
    i32* %110 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 9][i64 0];
    store i32* %110 with i32 0;
    i32* %111 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 9][i64 1];
    store i32* %111 with i32 0;
    i32* %112 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 10][i64 0];
    store i32* %112 with i32 0;
    i32* %113 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 10][i64 1];
    store i32* %113 with i32 0;
    i32* %114 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 11][i64 0];
    store i32* %114 with i32 0;
    i32* %115 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 11][i64 1];
    store i32* %115 with i32 0;
    i32* %116 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 12][i64 0];
    store i32* %116 with i32 0;
    i32* %117 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 12][i64 1];
    store i32* %117 with i32 0;
    i32* %118 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 13][i64 0];
    store i32* %118 with i32 0;
    i32* %119 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 13][i64 1];
    store i32* %119 with i32 0;
    i32* %120 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 14][i64 0];
    store i32* %120 with i32 0;
    i32* %121 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 14][i64 1];
    store i32* %121 with i32 0;
    i32* %122 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 15][i64 0];
    store i32* %122 with i32 0;
    i32* %123 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 15][i64 1];
    store i32* %123 with i32 0;
    i32* %124 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 16][i64 0];
    store i32* %124 with i32 0;
    i32* %125 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 16][i64 1];
    store i32* %125 with i32 0;
    i32* %126 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 17][i64 0];
    store i32* %126 with i32 0;
    i32* %127 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 17][i64 1];
    store i32* %127 with i32 0;
    i32* %128 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 18][i64 0];
    store i32* %128 with i32 0;
    i32* %129 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 18][i64 1];
    store i32* %129 with i32 0;
    i32* %130 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 19][i64 0];
    store i32* %130 with i32 0;
    i32* %131 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 19][i64 1];
    store i32* %131 with i32 0;
    i32* %132 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 20][i64 0];
    store i32* %132 with i32 0;
    i32* %133 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 20][i64 1];
    store i32* %133 with i32 0;
    i32* %134 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 21][i64 0];
    store i32* %134 with i32 0;
    i32* %135 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 21][i64 1];
    store i32* %135 with i32 0;
    i32* %136 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 22][i64 0];
    store i32* %136 with i32 0;
    i32* %137 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 22][i64 1];
    store i32* %137 with i32 0;
    i32* %138 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 23][i64 0];
    store i32* %138 with i32 0;
    i32* %139 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 23][i64 1];
    store i32* %139 with i32 0;
    i32* %140 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 24][i64 0];
    store i32* %140 with i32 0;
    i32* %141 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 24][i64 1];
    store i32* %141 with i32 0;
    i32* %142 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 25][i64 0];
    store i32* %142 with i32 0;
    i32* %143 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 25][i64 1];
    store i32* %143 with i32 0;
    i32* %144 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 26][i64 0];
    store i32* %144 with i32 0;
    i32* %145 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 26][i64 1];
    store i32* %145 with i32 0;
    i32* %146 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 27][i64 0];
    store i32* %146 with i32 0;
    i32* %147 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 27][i64 1];
    store i32* %147 with i32 0;
    i32* %148 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 28][i64 0];
    store i32* %148 with i32 0;
    i32* %149 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 28][i64 1];
    store i32* %149 with i32 0;
    i32* %150 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 29][i64 0];
    store i32* %150 with i32 0;
    i32* %151 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 29][i64 1];
    store i32* %151 with i32 0;
    i32* %152 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 30][i64 0];
    store i32* %152 with i32 0;
    i32* %153 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 30][i64 1];
    store i32* %153 with i32 0;
    i32* %154 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 31][i64 0];
    store i32* %154 with i32 0;
    i32* %155 = getelementptr &([32 * [2 * i32]]* %arr1)[i64 0][i64 31][i64 1];
    store i32* %155 with i32 0;
    store i32* %94 with i32 8847;
    i32 %156 = add i32 %91, i32 -2;
    store i32* %95 with i32 %156;
    i32 %157 = add i32 %91, i32 -3;
    store i32* %96 with i32 %157;
    store i32* %97 with i32 8845;
    store i32* %98 with i32 8844;
    i32 %158 = add i32 %91, i32 -5;
    store i32* %99 with i32 %158;
    i32 %159 = add i32 %91, i32 -6;
    store i32* %100 with i32 %159;
    store i32* %101 with i32 8842;
    store i32* %102 with i32 8841;
    i32 %160 = add i32 %91, i32 -8;
    store i32* %103 with i32 %160;
    i32 %161 = add i32 %91, i32 -9;
    store i32* %104 with i32 %161;
    store i32* %105 with i32 8839;
    store i32* %106 with i32 8838;
    i32 %162 = add i32 %91, i32 -11;
    store i32* %107 with i32 %162;
    i32 %163 = add i32 %91, i32 -12;
    store i32* %108 with i32 %163;
    store i32* %109 with i32 8836;
    store i32* %110 with i32 8835;
    i32 %164 = add i32 %91, i32 -14;
    store i32* %111 with i32 %164;
    i32 %165 = add i32 %91, i32 -15;
    store i32* %112 with i32 %165;
    store i32* %113 with i32 8833;
    store i32* %114 with i32 8832;
    i32 %166 = add i32 %91, i32 -17;
    store i32* %115 with i32 %166;
    i32 %167 = add i32 %91, i32 -18;
    store i32* %116 with i32 %167;
    store i32* %117 with i32 8830;
    store i32* %118 with i32 8829;
    i32 %168 = add i32 %91, i32 -20;
    store i32* %119 with i32 %168;
    i32 %169 = add i32 %91, i32 -21;
    store i32* %120 with i32 %169;
    store i32* %121 with i32 8827;
    store i32* %122 with i32 8826;
    i32 %170 = add i32 %91, i32 -23;
    store i32* %123 with i32 %170;
    i32 %171 = add i32 %91, i32 -24;
    store i32* %124 with i32 %171;
    store i32* %125 with i32 8824;
    store i32* %126 with i32 8823;
    i32 %172 = add i32 %91, i32 -26;
    store i32* %127 with i32 %172;
    i32 %173 = add i32 %91, i32 -27;
    store i32* %128 with i32 %173;
    store i32* %129 with i32 8821;
    store i32* %130 with i32 8820;
    i32 %174 = add i32 %91, i32 -29;
    store i32* %131 with i32 %174;
    i32 %175 = add i32 %91, i32 -30;
    store i32* %132 with i32 %175;
    store i32* %133 with i32 8818;
    store i32* %134 with i32 8817;
    i32 %176 = add i32 %91, i32 -32;
    store i32* %135 with i32 %176;
    i32 %177 = add i32 %91, i32 -33;
    store i32* %136 with i32 %177;
    store i32* %137 with i32 8815;
    store i32* %138 with i32 8814;
    i32 %178 = add i32 %91, i32 -35;
    store i32* %139 with i32 %178;
    i32 %179 = add i32 %91, i32 -36;
    store i32* %140 with i32 %179;
    store i32* %141 with i32 8812;
    store i32* %142 with i32 8811;
    i32 %180 = add i32 %91, i32 -38;
    store i32* %143 with i32 %180;
    i32 %181 = add i32 %91, i32 -39;
    store i32* %144 with i32 %181;
    store i32* %145 with i32 8809;
    store i32* %146 with i32 8808;
    i32 %182 = add i32 %91, i32 -41;
    store i32* %147 with i32 %182;
    i32 %183 = add i32 %91, i32 -42;
    store i32* %148 with i32 %183;
    store i32* %149 with i32 8806;
    store i32* %150 with i32 8805;
    i32 %184 = add i32 %91, i32 -44;
    store i32* %151 with i32 %184;
    i32 %185 = add i32 %91, i32 -45;
    store i32* %152 with i32 %185;
    store i32* %153 with i32 8803;
    store i32* %154 with i32 8802;
    i32 %186 = add i32 %91, i32 -47;
    store i32* %155 with i32 %186;
    i32 %187 = shl i32 %91, i32 5;
    i32 %188 = add i32 %187, i32 281648;
    call (i32) -> void @putint(i32 %188);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^while.body1:
    i32 %189 = load i32* %34;
    i32* %190 = getelementptr &(i32* %16)[i32 %53];
    i32 %191 = load i32* %190;
    i1 %192 = scmp lt i32 %189, i32 %191;
    cbr i1 %192(prob = 0.5), ^if.then, ^b1;
^if.then:
    i32 %193 = load i32* %34;
    store i32* %34 with i32 %191;
    store i32* %190 with i32 %193;
    ubr ^b1;
^b1:
    i32 %194 = add i32 %53, i32 1;
    ubr ^while.header1;
}
