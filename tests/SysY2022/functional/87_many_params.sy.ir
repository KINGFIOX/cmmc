internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @param32_rec(i32 %a1, i32 %a2, i32 %a3, i32 %a4, i32 %a5, i32 %a6, i32 %a7, i32 %a8, i32 %a9, i32 %a10, i32 %a11, i32 %a12, i32 %a13, i32 %a14, i32 %a15, i32 %a16, i32 %a17, i32 %a18, i32 %a19, i32 %a20, i32 %a21, i32 %a22, i32 %a23, i32 %a24, i32 %a25, i32 %a26, i32 %a27, i32 %a28, i32 %a29, i32 %a30, i32 %a31, i32 %a32) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry:
    i1 %0 = scmp eq i32 %a1, i32 0;
    cbr i1 %0(prob = 0.5), ^b, ^if.else;
^if.else:
    i32 %1 = add i32 %a1, i32 -1;
    i32 %2 = add i32 %a2, i32 %a3;
    i32 %3 = srem i32 %2, i32 998244353;
    i32 %4 = call (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32) -> i32 @param32_rec(i32 %1, i32 %3, i32 %a4, i32 %a5, i32 %a6, i32 %a7, i32 %a8, i32 %a9, i32 %a10, i32 %a11, i32 %a12, i32 %a13, i32 %a14, i32 %a15, i32 %a16, i32 %a17, i32 %a18, i32 %a19, i32 %a20, i32 %a21, i32 %a22, i32 %a23, i32 %a24, i32 %a25, i32 %a26, i32 %a27, i32 %a28, i32 %a29, i32 %a30, i32 %a31, i32 %a32, i32 0);
    ubr ^b;
^b:
    i32 %5 = phi [^entry, i32 %a2] [^if.else, i32 %4];
    ret i32 %5;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [16 * i32]* %arr = alloc [16 * i32];
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i32 %2 = call () -> i32 @getint();
    i32 %3 = call () -> i32 @getint();
    i32 %4 = call () -> i32 @getint();
    i32 %5 = call () -> i32 @getint();
    i32 %6 = call () -> i32 @getint();
    i32 %7 = call () -> i32 @getint();
    i32 %8 = call () -> i32 @getint();
    i32 %9 = call () -> i32 @getint();
    i32 %10 = call () -> i32 @getint();
    i32 %11 = call () -> i32 @getint();
    i32 %12 = call () -> i32 @getint();
    i32 %13 = call () -> i32 @getint();
    i32 %14 = call () -> i32 @getint();
    i32 %15 = call () -> i32 @getint();
    i32* %16 = getelementptr &([16 * i32]* %arr)[i64 0][i64 0];
    store i32* %16 with i32 %0;
    i32* %17 = getelementptr &([16 * i32]* %arr)[i64 0][i64 1];
    store i32* %17 with i32 %1;
    i32* %18 = getelementptr &([16 * i32]* %arr)[i64 0][i64 2];
    store i32* %18 with i32 %2;
    i32* %19 = getelementptr &([16 * i32]* %arr)[i64 0][i64 3];
    store i32* %19 with i32 %3;
    i32* %20 = getelementptr &([16 * i32]* %arr)[i64 0][i64 4];
    store i32* %20 with i32 %4;
    i32* %21 = getelementptr &([16 * i32]* %arr)[i64 0][i64 5];
    store i32* %21 with i32 %5;
    i32* %22 = getelementptr &([16 * i32]* %arr)[i64 0][i64 6];
    store i32* %22 with i32 %6;
    i32* %23 = getelementptr &([16 * i32]* %arr)[i64 0][i64 7];
    store i32* %23 with i32 %7;
    i32* %24 = getelementptr &([16 * i32]* %arr)[i64 0][i64 8];
    store i32* %24 with i32 %8;
    i32* %25 = getelementptr &([16 * i32]* %arr)[i64 0][i64 9];
    store i32* %25 with i32 %9;
    i32* %26 = getelementptr &([16 * i32]* %arr)[i64 0][i64 10];
    store i32* %26 with i32 %10;
    i32* %27 = getelementptr &([16 * i32]* %arr)[i64 0][i64 11];
    store i32* %27 with i32 %11;
    i32* %28 = getelementptr &([16 * i32]* %arr)[i64 0][i64 12];
    store i32* %28 with i32 %12;
    i32* %29 = getelementptr &([16 * i32]* %arr)[i64 0][i64 13];
    store i32* %29 with i32 %13;
    i32* %30 = getelementptr &([16 * i32]* %arr)[i64 0][i64 14];
    store i32* %30 with i32 %14;
    i32* %31 = getelementptr &([16 * i32]* %arr)[i64 0][i64 15];
    store i32* %31 with i32 %15;
    ubr ^while.body;
^while.body:
    i32 %32 = phi [^entry, i32 0] [^b, i32 %46];
    i32 %33 = phi [^entry, i32 16] [^b, i32 %44];
    i32 %34 = add i32 %32, i32 1;
    i1 %35 = scmp lt i32 %34, i32 %33;
    cbr i1 %35(prob = 0.97), ^while.body1, ^b;
^while.body1:
    i32 %36 = phi [^b1, i32 %52] [^while.body, i32 %34];
    i32 %37 = phi [^b1, i32 %50] [^while.body, i32 %33];
    i32 %38 = phi [^b1, i32 %51] [^while.body, i32 %32];
    i32* %39 = getelementptr &(i32* %16)[i32 %38];
    i32 %40 = load i32* %39;
    i32* %41 = getelementptr &(i32* %16)[i32 %36];
    i32 %42 = load i32* %41;
    i1 %43 = scmp lt i32 %40, i32 %42;
    cbr i1 %43(prob = 0.5), ^if.then, ^b1;
^b:
    i32 %44 = phi [^b1, i32 %50] [^while.body, i32 %33];
    i32 %45 = phi [^b1, i32 %51] [^while.body, i32 %32];
    i32 %46 = add i32 %45, i32 1;
    i32 %47 = add i32 %44, i32 -1;
    i1 %48 = scmp lt i32 %46, i32 %47;
    cbr i1 %48(prob = 0.97), ^while.body, ^entry1;
^if.then:
    i32 %49 = load i32* %39;
    store i32* %39 with i32 %42;
    store i32* %41 with i32 %49;
    ubr ^b1;
^b1:
    i32 %50 = phi [^if.then, i32 16] [^while.body1, i32 %37];
    i32 %51 = phi [^if.then, i32 %32] [^while.body1, i32 %38];
    i32 %52 = add i32 %36, i32 1;
    i1 %53 = scmp lt i32 %52, i32 %50;
    cbr i1 %53(prob = 0.97), ^while.body1, ^b;
^entry1:
    i32 %54 = load i32* %16;
    i32 %55 = load i32* %17;
    i32 %56 = load i32* %18;
    i32 %57 = load i32* %19;
    i32 %58 = load i32* %20;
    i32 %59 = load i32* %21;
    i32 %60 = load i32* %22;
    i32 %61 = load i32* %23;
    i32 %62 = load i32* %24;
    i32 %63 = load i32* %25;
    i32 %64 = load i32* %26;
    i32 %65 = load i32* %27;
    i32 %66 = load i32* %28;
    i32 %67 = load i32* %29;
    i32 %68 = load i32* %30;
    i32 %69 = load i32* %31;
    i32 %70 = call (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32) -> i32 @param32_rec(i32 %54, i32 %55, i32 %56, i32 %57, i32 %58, i32 %59, i32 %60, i32 %61, i32 %62, i32 %63, i32 %64, i32 %65, i32 %66, i32 %67, i32 %68, i32 %69, i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11, i32 %12, i32 %13, i32 %14, i32 %15);
    i32 %71 = mul i32 %70, i32 32;
    i32 %72 = add i32 %71, i32 281648;
    call (i32) -> void @putint(i32 %72);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
