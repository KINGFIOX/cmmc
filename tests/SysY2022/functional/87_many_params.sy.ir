internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [16 * i32]* %arr = alloc [16 * i32], align 8;
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i32 %2 = call () -> i32 @getint();
    i32 %3 = call () -> i32 @getint();
    i32 %4 = call () -> i32 @getint();
    i32 %5 = call () -> i32 @getint();
    i32 %6 = call () -> i32 @getint();
    i32 %7 = call () -> i32 @getint();
    i32 %8 = call () -> i32 @getint();
    i32 %9 = call () -> i32 @getint();
    i32 %10 = call () -> i32 @getint();
    i32 %11 = call () -> i32 @getint();
    i32 %12 = call () -> i32 @getint();
    i32 %13 = call () -> i32 @getint();
    i32 %14 = call () -> i32 @getint();
    i32 %15 = call () -> i32 @getint();
    i32* %16 = getelementptr &([16 * i32]* %arr)[i64 0][i64 0];
    store i32* %16 with i32 %0;
    i32* %17 = getelementptr &([16 * i32]* %arr)[i64 0][i64 1];
    store i32* %17 with i32 %1;
    i32* %18 = getelementptr &([16 * i32]* %arr)[i64 0][i64 2];
    store i32* %18 with i32 %2;
    i32* %19 = getelementptr &([16 * i32]* %arr)[i64 0][i64 3];
    store i32* %19 with i32 %3;
    i32* %20 = getelementptr &([16 * i32]* %arr)[i64 0][i64 4];
    store i32* %20 with i32 %4;
    i32* %21 = getelementptr &([16 * i32]* %arr)[i64 0][i64 5];
    store i32* %21 with i32 %5;
    i32* %22 = getelementptr &([16 * i32]* %arr)[i64 0][i64 6];
    store i32* %22 with i32 %6;
    i32* %23 = getelementptr &([16 * i32]* %arr)[i64 0][i64 7];
    store i32* %23 with i32 %7;
    i32* %24 = getelementptr &([16 * i32]* %arr)[i64 0][i64 8];
    store i32* %24 with i32 %8;
    i32* %25 = getelementptr &([16 * i32]* %arr)[i64 0][i64 9];
    store i32* %25 with i32 %9;
    i32* %26 = getelementptr &([16 * i32]* %arr)[i64 0][i64 10];
    store i32* %26 with i32 %10;
    i32* %27 = getelementptr &([16 * i32]* %arr)[i64 0][i64 11];
    store i32* %27 with i32 %11;
    i32* %28 = getelementptr &([16 * i32]* %arr)[i64 0][i64 12];
    store i32* %28 with i32 %12;
    i32* %29 = getelementptr &([16 * i32]* %arr)[i64 0][i64 13];
    store i32* %29 with i32 %13;
    i32* %30 = getelementptr &([16 * i32]* %arr)[i64 0][i64 14];
    store i32* %30 with i32 %14;
    i32* %31 = getelementptr &([16 * i32]* %arr)[i64 0][i64 15];
    store i32* %31 with i32 %15;
    ubr ^while.body;
  ^while.body:
    i32 %32 = phi [^entry, i32 0] [^b1, i32 %33];
    i32 %33 = add i32 %32, i32 1;
    i1 %34 = icmp slt i32 %33, i32 16;
    i32* %35 = getelementptr &(i32* %16)[i32 %32];
    cbr i1 %34(prob = 0.984615), ^b, ^b1;
  ^b:
    i32 %36 = phi [^while.body, i32 %33] [^b2, i32 %42];
    i32* %37 = getelementptr &(i32* %16)[i32 %36];
    i32 %38 = load i32* %35;
    i32 %39 = load i32* %37;
    i1 %40 = icmp slt i32 %38, i32 %39;
    cbr i1 %40(prob = 0.5), ^if.then, ^b2;
  ^b1:
    i1 %41 = icmp slt i32 %33, i32 15;
    cbr i1 %41(prob = 0.933333), ^while.body, ^b3;
  ^if.then:
    store i32* %35 with i32 %39;
    store i32* %37 with i32 %38;
    ubr ^b2;
  ^b2:
    i32 %42 = add i32 %36, i32 1;
    i1 %43 = icmp slt i32 %42, i32 16;
    cbr i1 %43(prob = 0.984615), ^b, ^b1;
  ^b3:
    i32 %44 = load i32* %16;
    i1 %45 = icmp eq i32 %44, i32 0;
    i32 %46 = load i32* %17;
    i32 %47 = load i32* %18;
    i32 %48 = load i32* %19;
    i32 %49 = load i32* %20;
    i32 %50 = load i32* %21;
    i32 %51 = load i32* %22;
    i32 %52 = load i32* %23;
    i32 %53 = load i32* %24;
    i32 %54 = load i32* %25;
    i32 %55 = load i32* %26;
    i32 %56 = load i32* %27;
    i32 %57 = load i32* %28;
    i32 %58 = load i32* %29;
    i32 %59 = load i32* %30;
    i32 %60 = load i32* %31;
    cbr i1 %45(prob = 0.5), ^b4, ^if.else;
  ^if.else:
    i32 %61 = phi [^b3, i32 %44] [^if.else, i32 %95];
    i32 %62 = phi [^b3, i32 %46] [^if.else, i32 %94];
    i32 %63 = phi [^b3, i32 %47] [^if.else, i32 %64];
    i32 %64 = phi [^b3, i32 %48] [^if.else, i32 %65];
    i32 %65 = phi [^b3, i32 %49] [^if.else, i32 %66];
    i32 %66 = phi [^b3, i32 %50] [^if.else, i32 %67];
    i32 %67 = phi [^b3, i32 %51] [^if.else, i32 %68];
    i32 %68 = phi [^b3, i32 %52] [^if.else, i32 %69];
    i32 %69 = phi [^b3, i32 %53] [^if.else, i32 %70];
    i32 %70 = phi [^b3, i32 %54] [^if.else, i32 %71];
    i32 %71 = phi [^b3, i32 %55] [^if.else, i32 %72];
    i32 %72 = phi [^b3, i32 %56] [^if.else, i32 %73];
    i32 %73 = phi [^b3, i32 %57] [^if.else, i32 %74];
    i32 %74 = phi [^b3, i32 %58] [^if.else, i32 %75];
    i32 %75 = phi [^b3, i32 %59] [^if.else, i32 %76];
    i32 %76 = phi [^b3, i32 %60] [^if.else, i32 %77];
    i32 %77 = phi [^b3, i32 %0] [^if.else, i32 %78];
    i32 %78 = phi [^b3, i32 %1] [^if.else, i32 %79];
    i32 %79 = phi [^b3, i32 %2] [^if.else, i32 %80];
    i32 %80 = phi [^b3, i32 %3] [^if.else, i32 %81];
    i32 %81 = phi [^b3, i32 %4] [^if.else, i32 %82];
    i32 %82 = phi [^b3, i32 %5] [^if.else, i32 %83];
    i32 %83 = phi [^b3, i32 %6] [^if.else, i32 %84];
    i32 %84 = phi [^b3, i32 %7] [^if.else, i32 %85];
    i32 %85 = phi [^b3, i32 %8] [^if.else, i32 %86];
    i32 %86 = phi [^b3, i32 %9] [^if.else, i32 %87];
    i32 %87 = phi [^b3, i32 %10] [^if.else, i32 %88];
    i32 %88 = phi [^b3, i32 %11] [^if.else, i32 %89];
    i32 %89 = phi [^b3, i32 %12] [^if.else, i32 %90];
    i32 %90 = phi [^b3, i32 %13] [^if.else, i32 %91];
    i32 %91 = phi [^b3, i32 %14] [^if.else, i32 %92];
    i32 %92 = phi [^b3, i32 %15] [^if.else, i32 0];
    i32 %93 = add i32 %62, i32 %63;
    i32 %94 = srem i32 %93, i32 998244353;
    i32 %95 = add i32 %61, i32 -1;
    i1 %96 = icmp neq i32 %95, i32 0;
    cbr i1 %96(prob = 0.5), ^if.else, ^b4;
  ^b4:
    i32 %97 = phi [^b3, i32 %46] [^if.else, i32 %94];
    i32 %98 = mul i32 %97, i32 32;
    i32 %99 = add i32 %98, i32 281648;
    call (i32) -> void @putint(i32 %99);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
