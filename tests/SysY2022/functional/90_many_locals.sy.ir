internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @foo() -> i32 {
^entry:
    i32* %sum2 = alloc i32;
    i32* %sum1 = alloc i32;
    i32* %p = alloc i32;
    i32* %o = alloc i32;
    i32* %n = alloc i32;
    i32* %m = alloc i32;
    i32* %l = alloc i32;
    i32* %k = alloc i32;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    i32* %h = alloc i32;
    i32* %g = alloc i32;
    i32* %f = alloc i32;
    i32* %e = alloc i32;
    i32* %d = alloc i32;
    i32* %c = alloc i32;
    i32* %b = alloc i32;
    i32* %a = alloc i32;
    [16 * i32]* %arr = alloc [16 * i32];
    i32* %0 = getelementptr &([16 * i32]* %arr)[i64 0][i64 1];
    i32* %1 = getelementptr &([16 * i32]* %arr)[i64 0][i64 0];
    store i32* %1 with i32 0;
    store i32* %0 with i32 1;
    i32* %2 = getelementptr &([16 * i32]* %arr)[i64 0][i64 2];
    store i32* %2 with i32 2;
    i32* %3 = getelementptr &([16 * i32]* %arr)[i64 0][i64 3];
    store i32* %3 with i32 3;
    i32* %4 = getelementptr &([16 * i32]* %arr)[i64 0][i64 5];
    i32* %5 = getelementptr &([16 * i32]* %arr)[i64 0][i64 4];
    store i32* %5 with i32 0;
    store i32* %4 with i32 1;
    i32* %6 = getelementptr &([16 * i32]* %arr)[i64 0][i64 6];
    store i32* %6 with i32 2;
    i32* %7 = getelementptr &([16 * i32]* %arr)[i64 0][i64 7];
    store i32* %7 with i32 3;
    i32* %8 = getelementptr &([16 * i32]* %arr)[i64 0][i64 9];
    i32* %9 = getelementptr &([16 * i32]* %arr)[i64 0][i64 8];
    store i32* %9 with i32 0;
    store i32* %8 with i32 1;
    i32* %10 = getelementptr &([16 * i32]* %arr)[i64 0][i64 10];
    store i32* %10 with i32 2;
    i32* %11 = getelementptr &([16 * i32]* %arr)[i64 0][i64 11];
    store i32* %11 with i32 3;
    i32* %12 = getelementptr &([16 * i32]* %arr)[i64 0][i64 13];
    i32* %13 = getelementptr &([16 * i32]* %arr)[i64 0][i64 12];
    store i32* %13 with i32 0;
    store i32* %12 with i32 1;
    i32* %14 = getelementptr &([16 * i32]* %arr)[i64 0][i64 14];
    store i32* %14 with i32 2;
    i32* %15 = getelementptr &([16 * i32]* %arr)[i64 0][i64 15];
    store i32* %15 with i32 3;
    i32* %16 = getelementptr &([16 * i32]* %arr)[i64 1][i64 0];
    store i32* %a with i32 3;
    store i32* %b with i32 7;
    store i32* %c with i32 5;
    store i32* %d with i32 6;
    store i32* %e with i32 1;
    store i32* %f with i32 0;
    store i32* %g with i32 3;
    store i32* %h with i32 5;
    store i32* %i with i32 4;
    store i32* %j with i32 2;
    store i32* %k with i32 7;
    store i32* %l with i32 9;
    store i32* %m with i32 8;
    store i32* %n with i32 1;
    store i32* %o with i32 4;
    store i32* %p with i32 6;
    i32 %17 = load i32* %a;
    i32 %18 = load i32* %b;
    i32 %19 = add i32 %17, i32 %18;
    i32 %20 = load i32* %c;
    i32 %21 = add i32 %19, i32 %20;
    i32 %22 = load i32* %d;
    i32 %23 = add i32 %21, i32 %22;
    i32 %24 = load i32* %e;
    i32 %25 = add i32 %23, i32 %24;
    i32 %26 = load i32* %f;
    i32 %27 = add i32 %25, i32 %26;
    i32 %28 = load i32* %g;
    i32 %29 = add i32 %27, i32 %28;
    i32 %30 = load i32* %h;
    i32 %31 = add i32 %29, i32 %30;
    store i32* %sum1 with i32 %31;
    i32 %32 = load i32* %i;
    i32 %33 = load i32* %j;
    i32 %34 = add i32 %32, i32 %33;
    i32 %35 = load i32* %k;
    i32 %36 = add i32 %34, i32 %35;
    i32 %37 = load i32* %l;
    i32 %38 = add i32 %36, i32 %37;
    i32 %39 = load i32* %m;
    i32 %40 = add i32 %38, i32 %39;
    i32 %41 = load i32* %n;
    i32 %42 = add i32 %40, i32 %41;
    i32 %43 = load i32* %o;
    i32 %44 = add i32 %42, i32 %43;
    i32 %45 = load i32* %p;
    i32 %46 = add i32 %44, i32 %45;
    store i32* %sum2 with i32 %46;
    i32 %47 = load i32* %sum1;
    i32 %48 = load i32* %sum2;
    i32 %49 = add i32 %47, i32 %48;
    i32 %50 = load i32* %a;
    i64 %51 = sext i32 %50 to i64;
    i32* %52 = getelementptr &([16 * i32]* %arr)[i64 0][i64 %51];
    i32 %53 = load i32* %52;
    i32 %54 = add i32 %49, i32 %53;
    ret i32 %54;
}
internal func @cmmc::Intrinsic::memset() -> i8* { NoMemoryRead };
func @main() -> i32 { Entry } {
^entry:
    i32* %sum = alloc i32;
    i32* %sum3 = alloc i32;
    i32* %x = alloc i32;
    i32* %w = alloc i32;
    i32* %v = alloc i32;
    i32* %u = alloc i32;
    i32* %t = alloc i32;
    i32* %s = alloc i32;
    i32* %r = alloc i32;
    i32* %q = alloc i32;
    i32* %sum2 = alloc i32;
    i32* %sum1 = alloc i32;
    i32* %p = alloc i32;
    i32* %o = alloc i32;
    i32* %n = alloc i32;
    i32* %m = alloc i32;
    i32* %l = alloc i32;
    i32* %k = alloc i32;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    i32* %h = alloc i32;
    i32* %g = alloc i32;
    i32* %f = alloc i32;
    i32* %e = alloc i32;
    i32* %d = alloc i32;
    i32* %c = alloc i32;
    i32* %b = alloc i32;
    i32* %a = alloc i32;
    store i32* %a with i32 3;
    store i32* %b with i32 7;
    store i32* %c with i32 5;
    store i32* %d with i32 6;
    store i32* %e with i32 1;
    store i32* %f with i32 0;
    store i32* %g with i32 3;
    store i32* %h with i32 5;
    store i32* %i with i32 4;
    store i32* %j with i32 2;
    store i32* %k with i32 7;
    store i32* %l with i32 9;
    store i32* %m with i32 8;
    store i32* %n with i32 1;
    store i32* %o with i32 4;
    store i32* %p with i32 6;
    i32 %0 = load i32* %a;
    i32 %1 = load i32* %b;
    i32 %2 = add i32 %0, i32 %1;
    i32 %3 = load i32* %c;
    i32 %4 = add i32 %2, i32 %3;
    i32 %5 = load i32* %d;
    i32 %6 = add i32 %4, i32 %5;
    i32 %7 = load i32* %e;
    i32 %8 = add i32 %6, i32 %7;
    i32 %9 = load i32* %f;
    i32 %10 = add i32 %8, i32 %9;
    i32 %11 = load i32* %g;
    i32 %12 = add i32 %10, i32 %11;
    i32 %13 = load i32* %h;
    i32 %14 = add i32 %12, i32 %13;
    store i32* %sum1 with i32 %14;
    i32 %15 = load i32* %i;
    i32 %16 = load i32* %j;
    i32 %17 = add i32 %15, i32 %16;
    i32 %18 = load i32* %k;
    i32 %19 = add i32 %17, i32 %18;
    i32 %20 = load i32* %l;
    i32 %21 = add i32 %19, i32 %20;
    i32 %22 = load i32* %m;
    i32 %23 = add i32 %21, i32 %22;
    i32 %24 = load i32* %n;
    i32 %25 = add i32 %23, i32 %24;
    i32 %26 = load i32* %o;
    i32 %27 = add i32 %25, i32 %26;
    i32 %28 = load i32* %p;
    i32 %29 = add i32 %27, i32 %28;
    store i32* %sum2 with i32 %29;
    i32 %30 = load i32* %sum1;
    i32 %31 = call () -> i32 @foo();
    i32 %32 = add i32 %30, i32 %31;
    store i32* %sum1 with i32 %32;
    store i32* %q with i32 4;
    store i32* %r with i32 7;
    store i32* %s with i32 2;
    store i32* %t with i32 5;
    store i32* %u with i32 8;
    store i32* %v with i32 0;
    store i32* %w with i32 6;
    store i32* %x with i32 3;
    i32 %33 = load i32* %sum2;
    i32 %34 = call () -> i32 @foo();
    i32 %35 = add i32 %33, i32 %34;
    store i32* %sum2 with i32 %35;
    i32 %36 = load i32* %i;
    store i32* %a with i32 %36;
    i32 %37 = load i32* %j;
    store i32* %b with i32 %37;
    i32 %38 = load i32* %k;
    store i32* %c with i32 %38;
    i32 %39 = load i32* %l;
    store i32* %d with i32 %39;
    i32 %40 = load i32* %m;
    store i32* %e with i32 %40;
    i32 %41 = load i32* %n;
    store i32* %f with i32 %41;
    i32 %42 = load i32* %o;
    store i32* %g with i32 %42;
    i32 %43 = load i32* %p;
    store i32* %h with i32 %43;
    i32 %44 = load i32* %q;
    i32 %45 = load i32* %r;
    i32 %46 = add i32 %44, i32 %45;
    i32 %47 = load i32* %s;
    i32 %48 = add i32 %46, i32 %47;
    i32 %49 = load i32* %t;
    i32 %50 = add i32 %48, i32 %49;
    i32 %51 = load i32* %u;
    i32 %52 = add i32 %50, i32 %51;
    i32 %53 = load i32* %v;
    i32 %54 = add i32 %52, i32 %53;
    i32 %55 = load i32* %w;
    i32 %56 = add i32 %54, i32 %55;
    i32 %57 = load i32* %x;
    i32 %58 = add i32 %56, i32 %57;
    store i32* %sum3 with i32 %58;
    i32 %59 = load i32* %sum1;
    i32 %60 = load i32* %sum2;
    i32 %61 = add i32 %59, i32 %60;
    i32 %62 = load i32* %sum3;
    i32 %63 = add i32 %61, i32 %62;
    store i32* %sum with i32 %63;
    i32 %64 = load i32* %sum;
    call (i32) -> void @putint(i32 %64);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
