internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [3 * f32]* %c2 = alloc [3 * f32];
    [3 * f32]* %c1 = alloc [3 * f32];
    [6 * f32]* %c0 = alloc [6 * f32];
    [3 * f32]* %a2 = alloc [3 * f32];
    [3 * f32]* %a1 = alloc [3 * f32];
    [3 * f32]* %a0 = alloc [3 * f32];
    ubr ^while.header;
^while.header:
    i32 %0 = phi [^while.body, i32 %10] [^entry, i32 0];
    i32 %1 = phi [^while.body, i32 %1] [^entry, i32 3];
    i32 %2 = phi [^while.body, i32 %2] [^entry, i32 3];
    i32 %3 = phi [^while.body, i32 %1] [^entry, i32 3];
    i32 %4 = phi [^while.body, i32 %10] [^entry, i32 0];
    i1 %5 = scmp lt i32 %4, i32 %3;
    cbr i1 %5(prob = 0.97), ^while.body, ^b;
^while.body:
    f32* %6 = getelementptr &([3 * f32]* %a0)[i64 0][i32 %0];
    f32 %7 = s2f i32 %0 to f32;
    store f32* %6 with f32 %7;
    f32* %8 = getelementptr &([3 * f32]* %a1)[i64 0][i32 %0];
    store f32* %8 with f32 %7;
    f32* %9 = getelementptr &([3 * f32]* %a2)[i64 0][i32 %0];
    store f32* %9 with f32 %7;
    i32 %10 = add i32 %0, i32 1;
    ubr ^while.header;
^b:
    f32* %11 = getelementptr &([3 * f32]* %a0)[i64 0][i64 0];
    f32* %12 = getelementptr &([3 * f32]* %a1)[i64 0][i64 0];
    f32* %13 = getelementptr &([3 * f32]* %a2)[i64 0][i64 0];
    f32* %14 = getelementptr &([6 * f32]* %c0)[i64 0][i64 0];
    f32* %15 = getelementptr &([3 * f32]* %c1)[i64 0][i64 0];
    f32* %16 = getelementptr &([3 * f32]* %c2)[i64 0][i64 0];
    f32* %17 = getelementptr &([3 * f32]* %c1)[i64 0][i64 2];
    f32* %18 = getelementptr &([3 * f32]* %a2)[i64 0][i64 1];
    f32 %19 = load f32* %18;
    store f32* %17 with f32 %19;
    f32* %20 = getelementptr &([3 * f32]* %c2)[i64 0][i64 1];
    f32* %21 = getelementptr &([3 * f32]* %a1)[i64 0][i64 2];
    f32 %22 = load f32* %21;
    store f32* %20 with f32 %22;
    f32* %23 = getelementptr &([6 * f32]* %c0)[i64 0][i64 1];
    f32 %24 = load f32* %12;
    store f32* %23 with f32 %24;
    f32* %25 = getelementptr &([6 * f32]* %c0)[i64 0][i64 2];
    f32 %26 = load f32* %13;
    store f32* %25 with f32 %26;
    f32* %27 = getelementptr &([3 * f32]* %a0)[i64 0][i64 1];
    f32 %28 = load f32* %27;
    store f32* %15 with f32 %28;
    f32* %29 = getelementptr &([3 * f32]* %a0)[i64 0][i64 2];
    f32 %30 = load f32* %29;
    store f32* %16 with f32 %30;
    f32* %31 = getelementptr &([3 * f32]* %c1)[i64 0][i64 1];
    f32* %32 = getelementptr &([3 * f32]* %a1)[i64 0][i64 1];
    f32 %33 = load f32* %32;
    store f32* %31 with f32 %33;
    f32* %34 = getelementptr &([3 * f32]* %c2)[i64 0][i64 2];
    f32* %35 = getelementptr &([3 * f32]* %a2)[i64 0][i64 2];
    f32 %36 = load f32* %35;
    store f32* %34 with f32 %36;
    f32 %37 = load f32* %11;
    store f32* %14 with f32 %37;
    ubr ^while.header1;
^while.header1:
    i32 %38 = phi [^while.body1, i32 %45] [^b, i32 0];
    i32 %39 = phi [^while.body1, i32 %39] [^b, i32 %2];
    i32 %40 = phi [^b, i32 0] [^while.body1, i32 %45];
    i1 %41 = scmp lt i32 %40, i32 %39;
    cbr i1 %41(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    f32* %42 = getelementptr &([6 * f32]* %c0)[i64 0][i32 %38];
    f32 %43 = load f32* %42;
    i32 %44 = f2s f32 %43 to i32;
    call (i32) -> void @putint(i32 %44);
    i32 %45 = add i32 %38, i32 1;
    ubr ^while.header1;
^b1:
    call (i32) -> void @putch(i32 10);
    ubr ^while.header2;
^while.header2:
    i32 %46 = phi [^while.body2, i32 %53] [^b1, i32 0];
    i32 %47 = phi [^while.body2, i32 %47] [^b1, i32 %39];
    i32 %48 = phi [^while.body2, i32 %53] [^b1, i32 0];
    i1 %49 = scmp lt i32 %48, i32 %47;
    cbr i1 %49(prob = 0.97), ^while.body2, ^b2;
^while.body2:
    f32* %50 = getelementptr &([3 * f32]* %c1)[i64 0][i32 %46];
    f32 %51 = load f32* %50;
    i32 %52 = f2s f32 %51 to i32;
    call (i32) -> void @putint(i32 %52);
    i32 %53 = add i32 %46, i32 1;
    ubr ^while.header2;
^b2:
    call (i32) -> void @putch(i32 10);
    ubr ^while.header3;
^while.header3:
    i32 %54 = phi [^while.body3, i32 %61] [^b2, i32 0];
    i32 %55 = phi [^while.body3, i32 %55] [^b2, i32 %47];
    i32 %56 = phi [^while.body3, i32 %61] [^b2, i32 0];
    i1 %57 = scmp lt i32 %56, i32 %55;
    cbr i1 %57(prob = 0.97), ^while.body3, ^b3;
^while.body3:
    f32* %58 = getelementptr &([3 * f32]* %c2)[i64 0][i32 %54];
    f32 %59 = load f32* %58;
    i32 %60 = f2s f32 %59 to i32;
    call (i32) -> void @putint(i32 %60);
    i32 %61 = add i32 %54, i32 1;
    ubr ^while.header3;
^b3:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
