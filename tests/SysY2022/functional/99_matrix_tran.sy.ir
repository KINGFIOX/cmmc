internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [3 * f32]* %c2 = alloc [3 * f32];
    [3 * f32]* %c1 = alloc [3 * f32];
    [6 * f32]* %c0 = alloc [6 * f32];
    [3 * f32]* %a2 = alloc [3 * f32];
    [3 * f32]* %a1 = alloc [3 * f32];
    [3 * f32]* %a0 = alloc [3 * f32];
    ubr ^while.header;
^while.header:
    i32 %0 = phi [^while.body, i32 %8] [^entry, i32 0];
    i32 %1 = phi [^while.body, i32 %1] [^entry, i32 3];
    i32 %2 = phi [^while.body, i32 %2] [^entry, i32 3];
    i1 %3 = scmp lt i32 %0, i32 %1;
    cbr i1 %3(prob = 0.97), ^while.body, ^b;
^while.body:
    f32* %4 = getelementptr &([3 * f32]* %a0)[i64 0][i32 %0];
    f32 %5 = s2f i32 %0 to f32;
    store f32* %4 with f32 %5;
    f32* %6 = getelementptr &([3 * f32]* %a1)[i64 0][i32 %0];
    store f32* %6 with f32 %5;
    f32* %7 = getelementptr &([3 * f32]* %a2)[i64 0][i32 %0];
    store f32* %7 with f32 %5;
    i32 %8 = add i32 %0, i32 1;
    ubr ^while.header;
^b:
    f32* %9 = getelementptr &([3 * f32]* %a0)[i64 0][i64 0];
    f32* %10 = getelementptr &([3 * f32]* %a1)[i64 0][i64 0];
    f32* %11 = getelementptr &([3 * f32]* %a2)[i64 0][i64 0];
    f32* %12 = getelementptr &([6 * f32]* %c0)[i64 0][i64 0];
    f32* %13 = getelementptr &([3 * f32]* %c1)[i64 0][i64 0];
    f32* %14 = getelementptr &([3 * f32]* %c2)[i64 0][i64 0];
    f32* %15 = getelementptr &([3 * f32]* %c1)[i64 0][i64 2];
    f32* %16 = getelementptr &([3 * f32]* %a2)[i64 0][i64 1];
    f32 %17 = load f32* %16;
    store f32* %15 with f32 %17;
    f32* %18 = getelementptr &([3 * f32]* %c2)[i64 0][i64 1];
    f32* %19 = getelementptr &([3 * f32]* %a1)[i64 0][i64 2];
    f32 %20 = load f32* %19;
    store f32* %18 with f32 %20;
    f32* %21 = getelementptr &([6 * f32]* %c0)[i64 0][i64 1];
    f32 %22 = load f32* %10;
    store f32* %21 with f32 %22;
    f32* %23 = getelementptr &([6 * f32]* %c0)[i64 0][i64 2];
    f32 %24 = load f32* %11;
    store f32* %23 with f32 %24;
    f32* %25 = getelementptr &([3 * f32]* %a0)[i64 0][i64 1];
    f32 %26 = load f32* %25;
    store f32* %13 with f32 %26;
    f32* %27 = getelementptr &([3 * f32]* %a0)[i64 0][i64 2];
    f32 %28 = load f32* %27;
    store f32* %14 with f32 %28;
    f32* %29 = getelementptr &([3 * f32]* %c1)[i64 0][i64 1];
    f32* %30 = getelementptr &([3 * f32]* %a1)[i64 0][i64 1];
    f32 %31 = load f32* %30;
    store f32* %29 with f32 %31;
    f32* %32 = getelementptr &([3 * f32]* %c2)[i64 0][i64 2];
    f32* %33 = getelementptr &([3 * f32]* %a2)[i64 0][i64 2];
    f32 %34 = load f32* %33;
    store f32* %32 with f32 %34;
    f32 %35 = load f32* %9;
    store f32* %12 with f32 %35;
    ubr ^while.header1;
^while.header1:
    i32 %36 = phi [^while.body1, i32 %42] [^b, i32 0];
    i32 %37 = phi [^while.body1, i32 %37] [^b, i32 %2];
    i1 %38 = scmp lt i32 %36, i32 %37;
    cbr i1 %38(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    f32* %39 = getelementptr &([6 * f32]* %c0)[i64 0][i32 %36];
    f32 %40 = load f32* %39;
    i32 %41 = f2s f32 %40 to i32;
    call (i32) -> void @putint(i32 %41);
    i32 %42 = add i32 %36, i32 1;
    ubr ^while.header1;
^b1:
    call (i32) -> void @putch(i32 10);
    ubr ^while.header2;
^while.header2:
    i32 %43 = phi [^while.body2, i32 %49] [^b1, i32 0];
    i32 %44 = phi [^while.body2, i32 %44] [^b1, i32 %37];
    i1 %45 = scmp lt i32 %43, i32 %44;
    cbr i1 %45(prob = 0.97), ^while.body2, ^b2;
^while.body2:
    f32* %46 = getelementptr &([3 * f32]* %c1)[i64 0][i32 %43];
    f32 %47 = load f32* %46;
    i32 %48 = f2s f32 %47 to i32;
    call (i32) -> void @putint(i32 %48);
    i32 %49 = add i32 %43, i32 1;
    ubr ^while.header2;
^b2:
    call (i32) -> void @putch(i32 10);
    ubr ^while.header3;
^while.header3:
    i32 %50 = phi [^while.body3, i32 %56] [^b2, i32 0];
    i32 %51 = phi [^while.body3, i32 %51] [^b2, i32 %44];
    i1 %52 = scmp lt i32 %50, i32 %51;
    cbr i1 %52(prob = 0.97), ^while.body3, ^b3;
^while.body3:
    f32* %53 = getelementptr &([3 * f32]* %c2)[i64 0][i32 %50];
    f32 %54 = load f32* %53;
    i32 %55 = f2s f32 %54 to i32;
    call (i32) -> void @putint(i32 %55);
    i32 %56 = add i32 %50, i32 1;
    ubr ^while.header3;
^b3:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
