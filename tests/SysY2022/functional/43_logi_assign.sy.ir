internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @a;
internal i32* @b;
func @main() -> i32 { Entry } {
^entry:
    i32* %c = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* @a with i32 %0;
    i32 %1 = call () -> i32 @getint();
    store i32* @b with i32 %1;
    store i32* %c with i32 0;
    i32 %2 = load i32* @a;
    i32 %3 = load i32* @b;
    i1 %4 = scmp eq i32 %2, i32 %3;
    i32 %5 = zext i1 %4 to i32;
    i1 %6 = scmp neq i32 %5, i32 0;
    cbr i1 %6(prob = 0.5), ^b, ^b1;
^b:
    i32 %7 = load i32* @a;
    i1 %8 = scmp neq i32 %7, i32 3;
    i32 %9 = zext i1 %8 to i32;
    i1 %10 = scmp neq i32 %9, i32 0;
    ubr ^b1;
^b1:
    i1 %11 = phi [^b, i1 %10] [^entry, i1 false];
    i32 %12 = zext i1 %11 to i32;
    i1 %13 = scmp neq i32 %12, i32 0;
    cbr i1 %13(prob = 0.5), ^if.then, ^if.else;
^if.then:
    store i32* %c with i32 1;
    ubr ^b2;
^if.else:
    store i32* %c with i32 0;
    ubr ^b2;
^b2:
    i32 %14 = load i32* %c;
    ret i32 %14;
}
