internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @QuickSort(i32* %arr, i32 %low, i32 %high) -> i32 {
  ^0:
    ubr ^entry;
  ^entry:
    i1 %1 = phi [^0, i1 false] [^b3, i1 true];
    i32 %2 = phi [^0, i32 undef] [^b3, i32 %4];
    i32 %3 = phi [^0, i32 %low] [^b3, i32 %29];
    i32 %4 = select i1 %1 ? i32 %2 : i32 0;
    i1 %5 = icmp sgt i32 %high, i32 %3;
    cbr i1 %5(prob = 0.5), ^if.then, ^b;
  ^if.then:
    i32* %6 = getelementptr &(i32* %arr)[i32 %3];
    i32 %7 = load i32* %6;
    i32 %8 = add i32 %7, i32 -1;
    ubr ^while.header;
  ^b:
    ret i32 %4;
  ^while.header:
    i32 %9 = phi [^if.then, i32 %high] [^while.header2, i32 %14] [^if.then3, i32 %34];
    i32 %10 = phi [^if.then, i32 %3] [^while.header2, i32 %19] [^if.then3, i32 %19];
    i1 %11 = icmp sgt i32 %9, i32 %10;
    cbr i1 %11(prob = 0.984615), ^while.header1, ^b1;
  ^b1:
    i32* %12 = getelementptr &(i32* %arr)[i32 %10];
    store i32* %12 with i32 %7;
    i32 %13 = add i32 %10, i32 -1;
    ubr ^entry1;
  ^while.header1:
    i32 %14 = phi [^while.header, i32 %9] [^while.body, i32 %23];
    i1 %15 = icmp slt i32 %10, i32 %14;
    i32* %16 = getelementptr &(i32* %arr)[i32 %14];
    cbr i1 %15(prob = 0.5), ^b2, ^while.header2;
  ^b2:
    i32 %17 = load i32* %16;
    i1 %18 = icmp slt i32 %8, i32 %17;
    cbr i1 %18(prob = 0.984615), ^while.body, ^if.then1;
  ^while.header2:
    i32 %19 = phi [^while.header1, i32 %10] [^if.then1, i32 %25] [^while.body1, i32 %33];
    i1 %20 = icmp sgt i32 %14, i32 %19;
    cbr i1 %20(prob = 0.5), ^b4, ^while.header;
  ^entry1:
    i32 %21 = phi [^b1, i32 %3] [^b7, i32 %55];
    i1 %22 = icmp sgt i32 %13, i32 %21;
    cbr i1 %22(prob = 0.5), ^if.then2, ^b3;
  ^while.body:
    i32 %23 = add i32 %14, i32 -1;
    ubr ^while.header1;
  ^if.then1:
    i32* %24 = getelementptr &(i32* %arr)[i32 %10];
    store i32* %24 with i32 %17;
    i32 %25 = add i32 %10, i32 1;
    ubr ^while.header2;
  ^if.then2:
    i32* %26 = getelementptr &(i32* %arr)[i32 %21];
    i32 %27 = load i32* %26;
    i32 %28 = add i32 %27, i32 -1;
    ubr ^while.header3;
  ^b3:
    i32 %29 = add i32 %10, i32 1;
    ubr ^entry;
  ^b4:
    i32* %30 = getelementptr &(i32* %arr)[i32 %19];
    i32 %31 = load i32* %30;
    i1 %32 = icmp sgt i32 %7, i32 %31;
    cbr i1 %32(prob = 0.984615), ^while.body1, ^if.then3;
  ^while.body1:
    i32 %33 = add i32 %19, i32 1;
    ubr ^while.header2;
  ^if.then3:
    store i32* %16 with i32 %31;
    i32 %34 = add i32 %14, i32 -1;
    ubr ^while.header;
  ^while.header3:
    i32 %35 = phi [^if.then2, i32 %13] [^while.header5, i32 %40] [^if.then6, i32 %60];
    i32 %36 = phi [^if.then2, i32 %21] [^while.header5, i32 %45] [^if.then6, i32 %45];
    i1 %37 = icmp sgt i32 %35, i32 %36;
    cbr i1 %37(prob = 0.984615), ^while.header4, ^b5;
  ^b5:
    i32* %38 = getelementptr &(i32* %arr)[i32 %36];
    store i32* %38 with i32 %27;
    i32 %39 = add i32 %36, i32 -1;
    ubr ^entry2;
  ^while.header4:
    i32 %40 = phi [^while.header3, i32 %35] [^while.body2, i32 %49];
    i1 %41 = icmp slt i32 %36, i32 %40;
    i32* %42 = getelementptr &(i32* %arr)[i32 %40];
    cbr i1 %41(prob = 0.5), ^b6, ^while.header5;
  ^b6:
    i32 %43 = load i32* %42;
    i1 %44 = icmp slt i32 %28, i32 %43;
    cbr i1 %44(prob = 0.984615), ^while.body2, ^if.then4;
  ^while.header5:
    i32 %45 = phi [^while.header4, i32 %36] [^if.then4, i32 %51] [^while.body3, i32 %59];
    i1 %46 = icmp sgt i32 %40, i32 %45;
    cbr i1 %46(prob = 0.5), ^b8, ^while.header3;
  ^entry2:
    i32 %47 = phi [^b5, i32 %21] [^b11, i32 %81];
    i1 %48 = icmp sgt i32 %39, i32 %47;
    cbr i1 %48(prob = 0.5), ^if.then5, ^b7;
  ^while.body2:
    i32 %49 = add i32 %40, i32 -1;
    ubr ^while.header4;
  ^if.then4:
    i32* %50 = getelementptr &(i32* %arr)[i32 %36];
    store i32* %50 with i32 %43;
    i32 %51 = add i32 %36, i32 1;
    ubr ^while.header5;
  ^if.then5:
    i32* %52 = getelementptr &(i32* %arr)[i32 %47];
    i32 %53 = load i32* %52;
    i32 %54 = add i32 %53, i32 -1;
    ubr ^while.header6;
  ^b7:
    i32 %55 = add i32 %36, i32 1;
    ubr ^entry1;
  ^b8:
    i32* %56 = getelementptr &(i32* %arr)[i32 %45];
    i32 %57 = load i32* %56;
    i1 %58 = icmp sgt i32 %27, i32 %57;
    cbr i1 %58(prob = 0.984615), ^while.body3, ^if.then6;
  ^while.body3:
    i32 %59 = add i32 %45, i32 1;
    ubr ^while.header5;
  ^if.then6:
    store i32* %42 with i32 %57;
    i32 %60 = add i32 %40, i32 -1;
    ubr ^while.header3;
  ^while.header6:
    i32 %61 = phi [^if.then5, i32 %39] [^while.header8, i32 %66] [^if.then9, i32 %86];
    i32 %62 = phi [^if.then5, i32 %47] [^while.header8, i32 %71] [^if.then9, i32 %71];
    i1 %63 = icmp sgt i32 %61, i32 %62;
    cbr i1 %63(prob = 0.984615), ^while.header7, ^b9;
  ^b9:
    i32* %64 = getelementptr &(i32* %arr)[i32 %62];
    store i32* %64 with i32 %53;
    i32 %65 = add i32 %62, i32 -1;
    ubr ^entry3;
  ^while.header7:
    i32 %66 = phi [^while.header6, i32 %61] [^while.body4, i32 %75];
    i1 %67 = icmp slt i32 %62, i32 %66;
    i32* %68 = getelementptr &(i32* %arr)[i32 %66];
    cbr i1 %67(prob = 0.5), ^b10, ^while.header8;
  ^b10:
    i32 %69 = load i32* %68;
    i1 %70 = icmp slt i32 %54, i32 %69;
    cbr i1 %70(prob = 0.984615), ^while.body4, ^if.then7;
  ^while.header8:
    i32 %71 = phi [^while.header7, i32 %62] [^if.then7, i32 %77] [^while.body5, i32 %85];
    i1 %72 = icmp sgt i32 %66, i32 %71;
    cbr i1 %72(prob = 0.5), ^b12, ^while.header6;
  ^entry3:
    i32 %73 = phi [^b9, i32 %47] [^b13, i32 %93];
    i1 %74 = icmp sgt i32 %65, i32 %73;
    cbr i1 %74(prob = 0.5), ^if.then8, ^b11;
  ^while.body4:
    i32 %75 = add i32 %66, i32 -1;
    ubr ^while.header7;
  ^if.then7:
    i32* %76 = getelementptr &(i32* %arr)[i32 %62];
    store i32* %76 with i32 %69;
    i32 %77 = add i32 %62, i32 1;
    ubr ^while.header8;
  ^if.then8:
    i32* %78 = getelementptr &(i32* %arr)[i32 %73];
    i32 %79 = load i32* %78;
    i32 %80 = add i32 %79, i32 -1;
    ubr ^while.header9;
  ^b11:
    i32 %81 = add i32 %62, i32 1;
    ubr ^entry2;
  ^b12:
    i32* %82 = getelementptr &(i32* %arr)[i32 %71];
    i32 %83 = load i32* %82;
    i1 %84 = icmp sgt i32 %53, i32 %83;
    cbr i1 %84(prob = 0.984615), ^while.body5, ^if.then9;
  ^while.body5:
    i32 %85 = add i32 %71, i32 1;
    ubr ^while.header8;
  ^if.then9:
    store i32* %68 with i32 %83;
    i32 %86 = add i32 %66, i32 -1;
    ubr ^while.header6;
  ^while.header9:
    i32 %87 = phi [^if.then8, i32 %65] [^while.header11, i32 %94] [^if.then11, i32 %108];
    i32 %88 = phi [^if.then8, i32 %73] [^while.header11, i32 %99] [^if.then11, i32 %99];
    i1 %89 = icmp sgt i32 %87, i32 %88;
    cbr i1 %89(prob = 0.984615), ^while.header10, ^b13;
  ^b13:
    i32* %90 = getelementptr &(i32* %arr)[i32 %88];
    store i32* %90 with i32 %79;
    i32 %91 = add i32 %88, i32 -1;
    i32 %92 = call (i32*, i32, i32) -> i32 @QuickSort(i32* %arr, i32 %73, i32 %91);
    i32 %93 = add i32 %88, i32 1;
    ubr ^entry3;
  ^while.header10:
    i32 %94 = phi [^while.header9, i32 %87] [^while.body6, i32 %101];
    i1 %95 = icmp slt i32 %88, i32 %94;
    i32* %96 = getelementptr &(i32* %arr)[i32 %94];
    cbr i1 %95(prob = 0.5), ^b14, ^while.header11;
  ^b14:
    i32 %97 = load i32* %96;
    i1 %98 = icmp slt i32 %80, i32 %97;
    cbr i1 %98(prob = 0.984615), ^while.body6, ^if.then10;
  ^while.header11:
    i32 %99 = phi [^while.header10, i32 %88] [^if.then10, i32 %103] [^while.body7, i32 %107];
    i1 %100 = icmp sgt i32 %94, i32 %99;
    cbr i1 %100(prob = 0.5), ^b15, ^while.header9;
  ^while.body6:
    i32 %101 = add i32 %94, i32 -1;
    ubr ^while.header10;
  ^if.then10:
    i32* %102 = getelementptr &(i32* %arr)[i32 %88];
    store i32* %102 with i32 %97;
    i32 %103 = add i32 %88, i32 1;
    ubr ^while.header11;
  ^b15:
    i32* %104 = getelementptr &(i32* %arr)[i32 %99];
    i32 %105 = load i32* %104;
    i1 %106 = icmp sgt i32 %79, i32 %105;
    cbr i1 %106(prob = 0.984615), ^while.body7, ^if.then11;
  ^while.body7:
    i32 %107 = add i32 %99, i32 1;
    ubr ^while.header11;
  ^if.then11:
    store i32* %96 with i32 %105;
    i32 %108 = add i32 %94, i32 -1;
    ubr ^while.header9;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [10 * i32]* %a = alloc [10 * i32], align 8;
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    i32 %10 = call (i32*, i32, i32) -> i32 @QuickSort(i32* %0, i32 0, i32 9);
    i1 %11 = icmp slt i32 %10, i32 10;
    cbr i1 %11(prob = 0.984615), ^while.body, ^b;
  ^while.body:
    i32 %12 = phi [^entry, i32 %10] [^while.body, i32 %15];
    i32* %13 = getelementptr &([10 * i32]* %a)[i64 0][i32 %12];
    i32 %14 = load i32* %13;
    call (i32) -> void @putint(i32 %14);
    call (i32) -> void @putch(i32 10);
    i32 %15 = add i32 %12, i32 1;
    i1 %16 = icmp slt i32 %15, i32 10;
    cbr i1 %16(prob = 0.984615), ^while.body, ^b;
  ^b:
    ret i32 0;
}
