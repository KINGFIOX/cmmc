internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @QuickSort(i32* %arr, i32 %low, i32 %high, i32* %0) -> i32 {
^entry:
    i32* %k = alloc i32;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    i32* %high1 = alloc i32;
    i32* %low1 = alloc i32;
    i32** %arr1 = alloc i32*;
    store i32** %arr1 with i32* %arr;
    store i32* %low1 with i32 %low;
    store i32* %high1 with i32 %high;
    i1 %1 = scmp lt i32 %low, i32 %high;
    cbr i1 %1(prob = 0.5), ^if.then, ^b;
^if.then:
    store i32* %i with i32 %low;
    store i32* %j with i32 %high;
    store i32* %k with i32 0;
    i32* %2 = getelementptr &(i32* %arr)[i32 %low];
    i32 %3 = load i32* %2;
    store i32* %k with i32 %3;
    ubr ^while.header;
^b:
    ret i32 0;
^while.header:
    i32* %4 = phi [^if.then2, i32* %41] [^b7, i32* %41] [^if.then, i32* %arr];
    i32 %5 = phi [^if.then2, i32 %57] [^b7, i32 %42] [^if.then, i32 %low];
    i32 %6 = phi [^if.then2, i32 %60] [^b7, i32 %43] [^if.then, i32 %high];
    i32 %7 = phi [^if.then2, i32 %59] [^b7, i32 %44] [^if.then, i32 %3];
    i32 %8 = phi [^if.then2, i32 %60] [^b7, i32 %43] [^if.then, i32 %high];
    i32 %9 = phi [^if.then2, i32 %57] [^b7, i32 %42] [^if.then, i32 %low];
    i1 %10 = scmp lt i32 %9, i32 %8;
    cbr i1 %10(prob = 0.97), ^while.header1, ^b1;
^b1:
    i32* %11 = getelementptr &(i32* %4)[i32 %5];
    store i32* %11 with i32 %7;
    i32 %12 = load i32* %low1;
    i32 %13 = load i32* %i;
    i32 %14 = add i32 %13, i32 -1;
    i32 %15 = call (i32*, i32, i32, i32*) -> i32 @QuickSort(i32* %4, i32 %12, i32 %14, i32* %0);
    i32* %16 = load i32** %arr1;
    i32 %17 = load i32* %high1;
    i32 %18 = load i32* %i;
    i32 %19 = add i32 %18, i32 1;
    i32 %20 = call (i32*, i32, i32, i32*) -> i32 @QuickSort(i32* %16, i32 %19, i32 %17, i32* %0);
    ubr ^b;
^while.header1:
    i32* %21 = phi [^while.header, i32* %4] [^while.body, i32* %21];
    i32 %22 = phi [^while.header, i32 %5] [^while.body, i32 %22];
    i32 %23 = phi [^while.header, i32 %6] [^while.body, i32 %32];
    i32 %24 = phi [^while.header, i32 %7] [^while.body, i32 %24];
    i32 %25 = phi [^while.header, i32 %6] [^while.body, i32 %32];
    i1 %26 = scmp lt i32 %22, i32 %25;
    cbr i1 %26(prob = 0.5), ^b2, ^b3;
^b2:
    i32* %27 = getelementptr &(i32* %21)[i32 %23];
    i32 %28 = load i32* %27;
    i32 %29 = add i32 %24, i32 -1;
    i1 %30 = scmp gt i32 %28, i32 %29;
    ubr ^b3;
^b3:
    i1 %31 = phi [^b2, i1 %30] [^while.header1, i1 false];
    cbr i1 %31(prob = 0.97), ^while.body, ^b4;
^while.body:
    i32 %32 = add i32 %23, i32 -1;
    store i32* %j with i32 %32;
    ubr ^while.header1;
^b4:
    i1 %33 = scmp lt i32 %22, i32 %23;
    cbr i1 %33(prob = 0.5), ^if.then1, ^while.header2;
^if.then1:
    i32* %34 = getelementptr &(i32* %21)[i32 %22];
    i32* %35 = getelementptr &(i32* %21)[i32 %23];
    i32 %36 = load i32* %35;
    store i32* %34 with i32 %36;
    i32 %37 = load i32* %i;
    i32 %38 = load i32* %j;
    i32 %39 = load i32* %k;
    i32 %40 = add i32 %37, i32 1;
    store i32* %i with i32 %40;
    ubr ^while.header2;
^while.header2:
    i32* %41 = phi [^if.then1, i32* %21] [^while.body1, i32* %41] [^b4, i32* %21];
    i32 %42 = phi [^if.then1, i32 %40] [^while.body1, i32 %52] [^b4, i32 %22];
    i32 %43 = phi [^if.then1, i32 %38] [^while.body1, i32 %43] [^b4, i32 %23];
    i32 %44 = phi [^if.then1, i32 %39] [^while.body1, i32 %44] [^b4, i32 %24];
    i32 %45 = phi [^if.then1, i32 %38] [^while.body1, i32 %43] [^b4, i32 %23];
    i32 %46 = phi [^if.then1, i32 %40] [^while.body1, i32 %52] [^b4, i32 %22];
    i1 %47 = scmp lt i32 %46, i32 %45;
    cbr i1 %47(prob = 0.5), ^b5, ^b6;
^b5:
    i32* %48 = getelementptr &(i32* %41)[i32 %42];
    i32 %49 = load i32* %48;
    i1 %50 = scmp lt i32 %49, i32 %44;
    ubr ^b6;
^b6:
    i1 %51 = phi [^b5, i1 %50] [^while.header2, i1 false];
    cbr i1 %51(prob = 0.97), ^while.body1, ^b7;
^while.body1:
    i32 %52 = add i32 %42, i32 1;
    store i32* %i with i32 %52;
    ubr ^while.header2;
^b7:
    i1 %53 = scmp lt i32 %42, i32 %43;
    cbr i1 %53(prob = 0.5), ^if.then2, ^while.header;
^if.then2:
    i32* %54 = getelementptr &(i32* %41)[i32 %43];
    i32* %55 = getelementptr &(i32* %41)[i32 %42];
    i32 %56 = load i32* %55;
    store i32* %54 with i32 %56;
    i32 %57 = load i32* %i;
    i32 %58 = load i32* %j;
    i32 %59 = load i32* %k;
    i32 %60 = add i32 %58, i32 -1;
    store i32* %j with i32 %60;
    ubr ^while.header;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %n = alloc i32;
    [10 * i32]* %a = alloc [10 * i32];
    store i32* %n with i32 10;
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    i32 %10 = call (i32*, i32, i32, i32*) -> i32 @QuickSort(i32* %0, i32 0, i32 9, i32* %n);
    i32 %11 = load i32* %n;
    ubr ^while.header;
^while.header:
    i32 %12 = phi [^while.body, i32 %18] [^entry, i32 %10];
    i32 %13 = phi [^while.body, i32 %13] [^entry, i32 %11];
    i32 %14 = phi [^while.body, i32 %18] [^entry, i32 %10];
    i1 %15 = scmp lt i32 %14, i32 %13;
    cbr i1 %15(prob = 0.97), ^while.body, ^b;
^while.body:
    i32* %16 = getelementptr &([10 * i32]* %a)[i64 0][i32 %12];
    i32 %17 = load i32* %16;
    call (i32) -> void @putint(i32 %17);
    call (i32) -> void @putch(i32 10);
    i32 %18 = add i32 %12, i32 1;
    ubr ^while.header;
^b:
    ret i32 0;
}
