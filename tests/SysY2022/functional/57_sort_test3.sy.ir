internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @QuickSort(i32*, i32, i32, i32*) -> i32 {
^entry(i32* %arg, i32 %arg1, i32 %arg2, i32* %arg3):
    i32** %arr = alloc i32*;
    store i32** %arr with i32* %arg;
    i32* %low = alloc i32;
    store i32* %low with i32 %arg1;
    i32* %high = alloc i32;
    store i32* %high with i32 %arg2;
    i1 %0 = scmp lt i32 %arg1, i32 %arg2;
    cbr i1 %0, [ ^indirect i32** %arr, i32* %high, i32* %low, i32* %arg, i32 %arg2, i32 %arg1, i32* %arg3, i32* %arg ], [ ^b ];
^indirect(i32** %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32* %arg6, i32* %arg7):
    i32* %i = alloc i32;
    store i32* %i with i32 %arg5;
    i32* %j = alloc i32;
    store i32* %j with i32 %arg4;
    i32* %k = alloc i32;
    i32* %0 = getelementptr &(i32* %arg3)[i32 %arg5];
    i32 %1 = load i32* %0;
    store i32* %k with i32 %1;
    i1 %2 = scmp lt i32 %arg5, i32 %arg4;
    cbr i1 %2, [ ^indirect1 i32* %arg2, i32** %arg, i32* %arg1, i32* %k, i32* %j, i32* %i, i32* %arg6, i32* %arg7, i32 %arg5, i32 %arg4, i32 %1 ], [ ^b1 i32* %j, i32* %arg2, i32* %arg1, i32* %k, i32** %arg, i32* %i, i32* %arg6, i32* %arg7, i32 %arg5, i32 %1 ];
^b():
    ret i32 0;
^indirect1(i32* %arg, i32** %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i1 %0 = scmp lt i32 %arg8, i32 %arg9;
    cbr i1 %0, [ ^b2 i32* %arg, i32* %arg5, i32* %arg2, i32* %arg3, i32** %arg1, i32* %arg4, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10 ], [ ^b3 i32* %arg, i32** %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10 ];
^b1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32** %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9):
    i32* %0 = getelementptr &(i32* %arg7)[i32 %arg8];
    store i32* %0 with i32 %arg9;
    i32 %1 = load i32* %arg1;
    i32 %2 = sub i32 %arg8, i32 1;
    i32 %3 = call (i32*, i32, i32, i32*) -> i32 @QuickSort(i32* %arg7, i32 %1, i32 %2, i32* %arg6);
    i32 %4 = load i32* %arg5;
    i32 %5 = load i32* %arg2;
    i32* %6 = load i32** %arg4;
    i32 %7 = add i32 %4, i32 1;
    i32 %8 = call (i32*, i32, i32, i32*) -> i32 @QuickSort(i32* %6, i32 %7, i32 %5, i32* %arg6);
    free i32* %arg3;
    free i32* %arg;
    free i32* %arg5;
    ret i32 0;
^b2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32** %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i32* %0 = getelementptr &(i32* %arg7)[i32 %arg9];
    i32 %1 = load i32* %0;
    i32 %2 = sub i32 %arg10, i32 1;
    i1 %3 = scmp gt i32 %1, i32 %2;
    cbr i1 %3, [ ^while.body i32* %arg, i32* %arg2, i32* %arg3, i32** %arg4, i32* %arg1, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10 ], [ ^b3 i32* %arg, i32** %arg4, i32* %arg2, i32* %arg3, i32* %arg5, i32* %arg1, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10 ];
^b3(i32* %arg, i32** %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i1 %0 = scmp lt i32 %arg8, i32 %arg9;
    cbr i1 %0, [ ^indirect2 i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, i32** %arg1, i32* %arg5, i32 %arg9, i32 %arg8, i32* %arg6, i32* %arg7 ], [ ^while.header i32* %arg, i32** %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg9, i32 %arg8, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10 ];
^indirect2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32** %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32* %arg8, i32* %arg9):
    i32* %0 = getelementptr &(i32* %arg9)[i32 %arg7];
    i32* %1 = getelementptr &(i32* %arg9)[i32 %arg6];
    i32 %2 = load i32* %1;
    store i32* %0 with i32 %2;
    i32 %3 = load i32* %arg2;
    i32 %4 = load i32* %arg3;
    i32 %5 = add i32 %arg7, i32 1;
    store i32* %arg5 with i32 %5;
    ubr [ ^while.header i32* %arg, i32** %arg4, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg5, i32 %4, i32 %5, i32* %arg8, i32* %arg9, i32 %5, i32 %4, i32 %3 ];
^while.body(i32* %arg, i32* %arg1, i32* %arg2, i32** %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i32 %0 = sub i32 %arg9, i32 1;
    store i32* %arg5 with i32 %0;
    i1 %1 = scmp lt i32 %arg8, i32 %0;
    cbr i1 %1, [ ^b2 i32* %arg, i32* %arg4, i32* %arg1, i32* %arg2, i32** %arg3, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %0, i32 %arg10 ], [ ^b3 i32* %arg, i32** %arg3, i32* %arg1, i32* %arg2, i32* %arg5, i32* %arg4, i32* %arg6, i32* %arg7, i32 %arg8, i32 %0, i32 %arg10 ];
^while.header(i32* %arg, i32** %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12):
    i1 %0 = scmp lt i32 %arg7, i32 %arg6;
    cbr i1 %0, [ ^b4 i32* %arg, i32* %arg4, i32* %arg2, i32* %arg3, i32** %arg1, i32* %arg5, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12 ], [ ^b5 i32* %arg3, i32* %arg2, i32* %arg, i32** %arg1, i32* %arg4, i32* %arg5, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12 ];
^b4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32** %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i32* %0 = getelementptr &(i32* %arg7)[i32 %arg8];
    i32 %1 = load i32* %0;
    i1 %2 = scmp lt i32 %1, i32 %arg10;
    cbr i1 %2, [ ^while.body1 i32* %arg, i32* %arg2, i32* %arg3, i32** %arg4, i32* %arg1, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10 ], [ ^b5 i32* %arg3, i32* %arg2, i32* %arg, i32** %arg4, i32* %arg1, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10 ];
^b5(i32* %arg, i32* %arg1, i32* %arg2, i32** %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i1 %0 = scmp lt i32 %arg8, i32 %arg9;
    cbr i1 %0, [ ^indirect3 i32* %arg2, i32* %arg1, i32* %arg, i32* %arg5, i32** %arg3, i32* %arg4, i32 %arg8, i32 %arg9, i32* %arg6, i32* %arg7 ], [ ^while.header1 i32* %arg2, i32** %arg3, i32* %arg1, i32* %arg, i32* %arg4, i32* %arg5, i32 %arg9, i32 %arg8, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10 ];
^while.body1(i32* %arg, i32* %arg1, i32* %arg2, i32** %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i32 %0 = add i32 %arg8, i32 1;
    store i32* %arg5 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 %arg9;
    cbr i1 %1, [ ^b4 i32* %arg, i32* %arg4, i32* %arg1, i32* %arg2, i32** %arg3, i32* %arg5, i32* %arg6, i32* %arg7, i32 %0, i32 %arg9, i32 %arg10 ], [ ^b5 i32* %arg2, i32* %arg1, i32* %arg, i32** %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %0, i32 %arg9, i32 %arg10 ];
^indirect3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32** %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32* %arg8, i32* %arg9):
    i32* %0 = getelementptr &(i32* %arg9)[i32 %arg7];
    i32* %1 = getelementptr &(i32* %arg9)[i32 %arg6];
    i32 %2 = load i32* %1;
    store i32* %0 with i32 %2;
    i32 %3 = load i32* %arg2;
    i32 %4 = load i32* %arg3;
    i32 %5 = sub i32 %arg7, i32 1;
    store i32* %arg5 with i32 %5;
    i1 %6 = scmp lt i32 %arg6, i32 %5;
    cbr i1 %6, [ ^indirect1 i32* %arg, i32** %arg4, i32* %arg1, i32* %arg2, i32* %arg5, i32* %arg3, i32* %arg8, i32* %arg9, i32 %4, i32 %5, i32 %3 ], [ ^b1 i32* %arg5, i32* %arg, i32* %arg1, i32* %arg2, i32** %arg4, i32* %arg3, i32* %arg8, i32* %arg9, i32 %4, i32 %3 ];
^while.header1(i32* %arg, i32** %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12):
    i1 %0 = scmp lt i32 %arg7, i32 %arg6;
    cbr i1 %0, [ ^indirect1 i32* %arg, i32** %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12 ], [ ^b1 i32* %arg4, i32* %arg, i32* %arg2, i32* %arg3, i32** %arg1, i32* %arg5, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg12 ];
}
func @main() -> i32 { NoRecurse Entry } {
^entry():
    i32* %n = alloc i32;
    store i32* %n with i32 10;
    [10 * i32]* %a = alloc [10 * i32];
    i32* %0 = getelementptr &([10 * i32]* %a)[i32 0][i32 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i32 0][i32 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i32 0][i32 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i32 0][i32 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i32 0][i32 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i32 0][i32 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i32 0][i32 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i32 0][i32 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i32 0][i32 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i32 0][i32 9];
    store i32* %9 with i32 8;
    i32 %10 = call (i32*, i32, i32, i32*) -> i32 @QuickSort(i32* %0, i32 0, i32 9, i32* %n);
    i32 %11 = load i32* %n;
    i1 %12 = scmp lt i32 %10, i32 %11;
    cbr i1 %12, [ ^while.body [10 * i32]* %a, i32 %11, i32 %10 ], [ ^b ];
^while.body([10 * i32]* %arg, i32 %arg1, i32 %arg2):
    i32* %0 = getelementptr &([10 * i32]* %arg)[i32 0][i32 %arg2];
    i32 %1 = load i32* %0;
    call (i32) -> void @putint(i32 %1);
    call (i32) -> void @putch(i32 10);
    i32 %2 = add i32 %arg2, i32 1;
    i1 %3 = scmp lt i32 %2, i32 %arg1;
    cbr i1 %3, [ ^while.body [10 * i32]* %arg, i32 %arg1, i32 %2 ], [ ^b ];
^b():
    ret i32 0;
}
