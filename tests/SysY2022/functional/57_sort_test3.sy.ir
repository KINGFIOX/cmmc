internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @QuickSort(i32* %arr, i32 %low, i32 %high) -> i32 {
  ^0:
    i1 %1 = icmp slt i32 %low, i32 %high;
    cbr i1 %1(prob = 0.5), ^if.then, ^b;
  ^if.then:
    i32 %2 = phi [^0, i32 %low] [^b3, i32 %28];
    i32 %3 = phi [^0, i32 undef] [^b3, i32 %30];
    i1 %4 = phi [^0, i1 false] [^b3, i1 true];
    i32* %5 = getelementptr &(i32* %arr)[i32 %2];
    i32 %6 = load i32* %5;
    i32 %7 = add i32 %6, i32 -1;
    ubr ^while.header;
  ^b:
    i32 %8 = phi [^0, i32 undef] [^b3, i32 %30];
    i1 %9 = phi [^0, i1 false] [^b3, i1 true];
    i32 %10 = select i1 %9 ? i32 %8 : i32 0;
    ret i32 %10;
  ^while.header:
    i32 %11 = phi [^if.then, i32 %high] [^while.header2, i32 %14] [^b6, i32 %41];
    i32 %12 = phi [^if.then, i32 %2] [^while.header2, i32 %26] [^b6, i32 %26];
    i1 %13 = icmp sgt i32 %11, i32 %12;
    cbr i1 %13(prob = 0.984615), ^while.header1, ^b1;
  ^while.header1:
    i32 %14 = phi [^while.header, i32 %11] [^while.body, i32 %31];
    i1 %15 = icmp slt i32 %12, i32 %14;
    i32* %16 = getelementptr &(i32* %arr)[i32 %14];
    cbr i1 %15(prob = 0.5), ^b2, ^while.header2;
  ^b1:
    i32* %17 = getelementptr &(i32* %arr)[i32 %12];
    store i32* %17 with i32 %6;
    i32 %18 = add i32 %12, i32 -1;
    i1 %19 = icmp slt i32 %2, i32 %18;
    cbr i1 %19(prob = 0.5), ^if.then1, ^b3;
  ^if.then1:
    i32 %20 = phi [^b1, i32 %2] [^b9, i32 %56];
    i32* %21 = getelementptr &(i32* %arr)[i32 %20];
    i32 %22 = load i32* %21;
    i32 %23 = add i32 %22, i32 -1;
    ubr ^while.header3;
  ^b2:
    i32 %24 = load i32* %16;
    i1 %25 = icmp slt i32 %7, i32 %24;
    cbr i1 %25(prob = 0.984615), ^while.body, ^b4;
  ^while.header2:
    i32 %26 = phi [^while.header1, i32 %12] [^b4, i32 %33] [^while.body1, i32 %40];
    i1 %27 = icmp sle i32 %14, i32 %26;
    cbr i1 %27(prob = 0.5), ^while.header, ^b5;
  ^b3:
    i32 %28 = add i32 %12, i32 1;
    i1 %29 = icmp sgt i32 %high, i32 %28;
    i32 %30 = select i1 %4 ? i32 %3 : i32 0;
    cbr i1 %29(prob = 0.5), ^if.then, ^b;
  ^while.body:
    i32 %31 = add i32 %14, i32 -1;
    ubr ^while.header1;
  ^b4:
    i32* %32 = getelementptr &(i32* %arr)[i32 %12];
    store i32* %32 with i32 %24;
    i32 %33 = add i32 %12, i32 1;
    ubr ^while.header2;
  ^while.header3:
    i32 %34 = phi [^if.then1, i32 %18] [^while.header5, i32 %42] [^b12, i32 %68];
    i32 %35 = phi [^if.then1, i32 %20] [^while.header5, i32 %54] [^b12, i32 %54];
    i1 %36 = icmp sgt i32 %34, i32 %35;
    cbr i1 %36(prob = 0.984615), ^while.header4, ^b7;
  ^b5:
    i32* %37 = getelementptr &(i32* %arr)[i32 %26];
    i32 %38 = load i32* %37;
    i1 %39 = icmp sgt i32 %6, i32 %38;
    cbr i1 %39(prob = 0.984615), ^while.body1, ^b6;
  ^while.body1:
    i32 %40 = add i32 %26, i32 1;
    ubr ^while.header2;
  ^b6:
    store i32* %16 with i32 %38;
    i32 %41 = add i32 %14, i32 -1;
    ubr ^while.header;
  ^while.header4:
    i32 %42 = phi [^while.header3, i32 %34] [^while.body2, i32 %58];
    i1 %43 = icmp slt i32 %35, i32 %42;
    i32* %44 = getelementptr &(i32* %arr)[i32 %42];
    cbr i1 %43(prob = 0.5), ^b8, ^while.header5;
  ^b7:
    i32* %45 = getelementptr &(i32* %arr)[i32 %35];
    store i32* %45 with i32 %22;
    i32 %46 = add i32 %35, i32 -1;
    i1 %47 = icmp slt i32 %20, i32 %46;
    cbr i1 %47(prob = 0.5), ^if.then2, ^b9;
  ^if.then2:
    i32 %48 = phi [^b7, i32 %20] [^b15, i32 %83];
    i32* %49 = getelementptr &(i32* %arr)[i32 %48];
    i32 %50 = load i32* %49;
    i32 %51 = add i32 %50, i32 -1;
    ubr ^while.header6;
  ^b8:
    i32 %52 = load i32* %44;
    i1 %53 = icmp slt i32 %23, i32 %52;
    cbr i1 %53(prob = 0.984615), ^while.body2, ^b10;
  ^while.header5:
    i32 %54 = phi [^while.header4, i32 %35] [^b10, i32 %60] [^while.body3, i32 %67];
    i1 %55 = icmp sle i32 %42, i32 %54;
    cbr i1 %55(prob = 0.5), ^while.header3, ^b11;
  ^b9:
    i32 %56 = add i32 %35, i32 1;
    i1 %57 = icmp sgt i32 %18, i32 %56;
    cbr i1 %57(prob = 0.5), ^if.then1, ^b3;
  ^while.body2:
    i32 %58 = add i32 %42, i32 -1;
    ubr ^while.header4;
  ^b10:
    i32* %59 = getelementptr &(i32* %arr)[i32 %35];
    store i32* %59 with i32 %52;
    i32 %60 = add i32 %35, i32 1;
    ubr ^while.header5;
  ^while.header6:
    i32 %61 = phi [^if.then2, i32 %46] [^while.header8, i32 %69] [^b18, i32 %95];
    i32 %62 = phi [^if.then2, i32 %48] [^while.header8, i32 %81] [^b18, i32 %81];
    i1 %63 = icmp sgt i32 %61, i32 %62;
    cbr i1 %63(prob = 0.984615), ^while.header7, ^b13;
  ^b11:
    i32* %64 = getelementptr &(i32* %arr)[i32 %54];
    i32 %65 = load i32* %64;
    i1 %66 = icmp sgt i32 %22, i32 %65;
    cbr i1 %66(prob = 0.984615), ^while.body3, ^b12;
  ^while.body3:
    i32 %67 = add i32 %54, i32 1;
    ubr ^while.header5;
  ^b12:
    store i32* %44 with i32 %65;
    i32 %68 = add i32 %42, i32 -1;
    ubr ^while.header3;
  ^while.header7:
    i32 %69 = phi [^while.header6, i32 %61] [^while.body4, i32 %85];
    i1 %70 = icmp slt i32 %62, i32 %69;
    i32* %71 = getelementptr &(i32* %arr)[i32 %69];
    cbr i1 %70(prob = 0.5), ^b14, ^while.header8;
  ^b13:
    i32* %72 = getelementptr &(i32* %arr)[i32 %62];
    store i32* %72 with i32 %50;
    i32 %73 = add i32 %62, i32 -1;
    i1 %74 = icmp slt i32 %48, i32 %73;
    cbr i1 %74(prob = 0.5), ^if.then3, ^b15;
  ^if.then3:
    i32 %75 = phi [^b13, i32 %48] [^b19, i32 %102];
    i32* %76 = getelementptr &(i32* %arr)[i32 %75];
    i32 %77 = load i32* %76;
    i32 %78 = add i32 %77, i32 -1;
    ubr ^while.header9;
  ^b14:
    i32 %79 = load i32* %71;
    i1 %80 = icmp slt i32 %51, i32 %79;
    cbr i1 %80(prob = 0.984615), ^while.body4, ^b16;
  ^while.header8:
    i32 %81 = phi [^while.header7, i32 %62] [^b16, i32 %87] [^while.body5, i32 %94];
    i1 %82 = icmp sle i32 %69, i32 %81;
    cbr i1 %82(prob = 0.5), ^while.header6, ^b17;
  ^b15:
    i32 %83 = add i32 %62, i32 1;
    i1 %84 = icmp sgt i32 %46, i32 %83;
    cbr i1 %84(prob = 0.5), ^if.then2, ^b9;
  ^while.body4:
    i32 %85 = add i32 %69, i32 -1;
    ubr ^while.header7;
  ^b16:
    i32* %86 = getelementptr &(i32* %arr)[i32 %62];
    store i32* %86 with i32 %79;
    i32 %87 = add i32 %62, i32 1;
    ubr ^while.header8;
  ^while.header9:
    i32 %88 = phi [^if.then3, i32 %73] [^while.header11, i32 %96] [^b23, i32 %115];
    i32 %89 = phi [^if.then3, i32 %75] [^while.header11, i32 %106] [^b23, i32 %106];
    i1 %90 = icmp sgt i32 %88, i32 %89;
    cbr i1 %90(prob = 0.984615), ^while.header10, ^b19;
  ^b17:
    i32* %91 = getelementptr &(i32* %arr)[i32 %81];
    i32 %92 = load i32* %91;
    i1 %93 = icmp sgt i32 %50, i32 %92;
    cbr i1 %93(prob = 0.984615), ^while.body5, ^b18;
  ^while.body5:
    i32 %94 = add i32 %81, i32 1;
    ubr ^while.header8;
  ^b18:
    store i32* %71 with i32 %92;
    i32 %95 = add i32 %69, i32 -1;
    ubr ^while.header6;
  ^while.header10:
    i32 %96 = phi [^while.header9, i32 %88] [^while.body6, i32 %108];
    i1 %97 = icmp slt i32 %89, i32 %96;
    i32* %98 = getelementptr &(i32* %arr)[i32 %96];
    cbr i1 %97(prob = 0.5), ^b20, ^while.header11;
  ^b19:
    i32* %99 = getelementptr &(i32* %arr)[i32 %89];
    store i32* %99 with i32 %77;
    i32 %100 = add i32 %89, i32 -1;
    i32 %101 = call (i32*, i32, i32) -> i32 @QuickSort(i32* %arr, i32 %75, i32 %100);
    i32 %102 = add i32 %89, i32 1;
    i1 %103 = icmp sgt i32 %73, i32 %102;
    cbr i1 %103(prob = 0.5), ^if.then3, ^b15;
  ^b20:
    i32 %104 = load i32* %98;
    i1 %105 = icmp slt i32 %78, i32 %104;
    cbr i1 %105(prob = 0.984615), ^while.body6, ^b21;
  ^while.header11:
    i32 %106 = phi [^while.header10, i32 %89] [^b21, i32 %110] [^while.body7, i32 %114];
    i1 %107 = icmp sle i32 %96, i32 %106;
    cbr i1 %107(prob = 0.5), ^while.header9, ^b22;
  ^while.body6:
    i32 %108 = add i32 %96, i32 -1;
    ubr ^while.header10;
  ^b21:
    i32* %109 = getelementptr &(i32* %arr)[i32 %89];
    store i32* %109 with i32 %104;
    i32 %110 = add i32 %89, i32 1;
    ubr ^while.header11;
  ^b22:
    i32* %111 = getelementptr &(i32* %arr)[i32 %106];
    i32 %112 = load i32* %111;
    i1 %113 = icmp sgt i32 %77, i32 %112;
    cbr i1 %113(prob = 0.984615), ^while.body7, ^b23;
  ^while.body7:
    i32 %114 = add i32 %106, i32 1;
    ubr ^while.header11;
  ^b23:
    store i32* %98 with i32 %112;
    i32 %115 = add i32 %96, i32 -1;
    ubr ^while.header9;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [10 * i32]* %a = alloc [10 * i32], align 8;
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    i32 %10 = call (i32*, i32, i32) -> i32 @QuickSort(i32* %0, i32 0, i32 9);
    i1 %11 = icmp slt i32 %10, i32 10;
    cbr i1 %11(prob = 0.984615), ^while.body, ^b;
  ^while.body:
    i32 %12 = phi [^entry, i32 %10] [^while.body, i32 %15];
    i32* %13 = getelementptr &([10 * i32]* %a)[i64 0][i32 %12];
    i32 %14 = load i32* %13;
    call (i32) -> void @putint(i32 %14);
    call (i32) -> void @putch(i32 10);
    i32 %15 = add i32 %12, i32 1;
    i1 %16 = icmp slt i32 %15, i32 10;
    cbr i1 %16(prob = 0.984615), ^while.body, ^b;
  ^b:
    ret i32 0;
}
