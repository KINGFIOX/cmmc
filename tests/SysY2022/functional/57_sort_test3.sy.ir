internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @n;
internal func @QuickSort(i32* %arr, i32 %low, i32 %high) -> i32 {
^entry:
    i32* %tmp = alloc i32;
    i32* %k = alloc i32;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    i32* %high1 = alloc i32;
    i32* %low1 = alloc i32;
    i32** %arr1 = alloc i32*;
    store i32** %arr1 with i32* %arr;
    store i32* %low1 with i32 %low;
    store i32* %high1 with i32 %high;
    i32 %0 = load i32* %low1;
    i32 %1 = load i32* %high1;
    i1 %2 = scmp lt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.5), ^if.then, ^b;
^if.then:
    store i32* %i with i32 0;
    i32 %5 = load i32* %low1;
    store i32* %i with i32 %5;
    store i32* %j with i32 0;
    i32 %6 = load i32* %high1;
    store i32* %j with i32 %6;
    store i32* %k with i32 0;
    i32 %7 = load i32* %low1;
    i64 %8 = sext i32 %7 to i64;
    i32* %9 = load i32** %arr1;
    i32* %10 = getelementptr &(i32* %9)[i64 %8];
    i32 %11 = load i32* %10;
    store i32* %k with i32 %11;
    ubr ^while.header;
^b:
    ret i32 0;
^while.header:
    i32 %12 = load i32* %i;
    i32 %13 = load i32* %j;
    i1 %14 = scmp lt i32 %12, i32 %13;
    i32 %15 = zext i1 %14 to i32;
    i1 %16 = scmp neq i32 %15, i32 0;
    cbr i1 %16(prob = 0.97), ^while.body, ^b1;
^while.body:
    ubr ^while.header1;
^b1:
    i32 %17 = load i32* %i;
    i64 %18 = sext i32 %17 to i64;
    i32* %19 = load i32** %arr1;
    i32* %20 = getelementptr &(i32* %19)[i64 %18];
    i32 %21 = load i32* %k;
    store i32* %20 with i32 %21;
    store i32* %tmp with i32 0;
    i32 %22 = load i32* %i;
    i32 %23 = sub i32 %22, i32 1;
    store i32* %tmp with i32 %23;
    i32* %24 = load i32** %arr1;
    i32 %25 = load i32* %low1;
    i32 %26 = load i32* %tmp;
    i32 %27 = call (i32*, i32, i32) -> i32 @QuickSort(i32* %24, i32 %25, i32 %26);
    store i32* %tmp with i32 %27;
    i32 %28 = load i32* %i;
    i32 %29 = add i32 %28, i32 1;
    store i32* %tmp with i32 %29;
    i32* %30 = load i32** %arr1;
    i32 %31 = load i32* %tmp;
    i32 %32 = load i32* %high1;
    i32 %33 = call (i32*, i32, i32) -> i32 @QuickSort(i32* %30, i32 %31, i32 %32);
    store i32* %tmp with i32 %33;
    ubr ^b;
^while.header1:
    i32 %34 = load i32* %i;
    i32 %35 = load i32* %j;
    i1 %36 = scmp lt i32 %34, i32 %35;
    i32 %37 = zext i1 %36 to i32;
    i1 %38 = scmp neq i32 %37, i32 0;
    cbr i1 %38(prob = 0.5), ^b2, ^b3;
^b2:
    i32 %39 = load i32* %j;
    i64 %40 = sext i32 %39 to i64;
    i32* %41 = load i32** %arr1;
    i32* %42 = getelementptr &(i32* %41)[i64 %40];
    i32 %43 = load i32* %42;
    i32 %44 = load i32* %k;
    i32 %45 = sub i32 %44, i32 1;
    i1 %46 = scmp gt i32 %43, i32 %45;
    i32 %47 = zext i1 %46 to i32;
    i1 %48 = scmp neq i32 %47, i32 0;
    ubr ^b3;
^b3:
    i1 %49 = phi [^b2, i1 %48] [^while.header1, i1 false];
    i32 %50 = zext i1 %49 to i32;
    i1 %51 = scmp neq i32 %50, i32 0;
    cbr i1 %51(prob = 0.97), ^while.body1, ^b4;
^while.body1:
    i32 %52 = load i32* %j;
    i32 %53 = sub i32 %52, i32 1;
    store i32* %j with i32 %53;
    ubr ^while.header1;
^b4:
    i32 %54 = load i32* %i;
    i32 %55 = load i32* %j;
    i1 %56 = scmp lt i32 %54, i32 %55;
    i32 %57 = zext i1 %56 to i32;
    i1 %58 = scmp neq i32 %57, i32 0;
    cbr i1 %58(prob = 0.5), ^if.then1, ^b5;
^if.then1:
    i32 %59 = load i32* %i;
    i64 %60 = sext i32 %59 to i64;
    i32* %61 = load i32** %arr1;
    i32* %62 = getelementptr &(i32* %61)[i64 %60];
    i32 %63 = load i32* %j;
    i64 %64 = sext i32 %63 to i64;
    i32* %65 = load i32** %arr1;
    i32* %66 = getelementptr &(i32* %65)[i64 %64];
    i32 %67 = load i32* %66;
    store i32* %62 with i32 %67;
    i32 %68 = load i32* %i;
    i32 %69 = add i32 %68, i32 1;
    store i32* %i with i32 %69;
    ubr ^b5;
^b5:
    ubr ^while.header2;
^while.header2:
    i32 %70 = load i32* %i;
    i32 %71 = load i32* %j;
    i1 %72 = scmp lt i32 %70, i32 %71;
    i32 %73 = zext i1 %72 to i32;
    i1 %74 = scmp neq i32 %73, i32 0;
    cbr i1 %74(prob = 0.5), ^b6, ^b7;
^b6:
    i32 %75 = load i32* %i;
    i64 %76 = sext i32 %75 to i64;
    i32* %77 = load i32** %arr1;
    i32* %78 = getelementptr &(i32* %77)[i64 %76];
    i32 %79 = load i32* %78;
    i32 %80 = load i32* %k;
    i1 %81 = scmp lt i32 %79, i32 %80;
    i32 %82 = zext i1 %81 to i32;
    i1 %83 = scmp neq i32 %82, i32 0;
    ubr ^b7;
^b7:
    i1 %84 = phi [^b6, i1 %83] [^while.header2, i1 false];
    i32 %85 = zext i1 %84 to i32;
    i1 %86 = scmp neq i32 %85, i32 0;
    cbr i1 %86(prob = 0.97), ^while.body2, ^b8;
^while.body2:
    i32 %87 = load i32* %i;
    i32 %88 = add i32 %87, i32 1;
    store i32* %i with i32 %88;
    ubr ^while.header2;
^b8:
    i32 %89 = load i32* %i;
    i32 %90 = load i32* %j;
    i1 %91 = scmp lt i32 %89, i32 %90;
    i32 %92 = zext i1 %91 to i32;
    i1 %93 = scmp neq i32 %92, i32 0;
    cbr i1 %93(prob = 0.5), ^if.then2, ^b9;
^if.then2:
    i32 %94 = load i32* %j;
    i64 %95 = sext i32 %94 to i64;
    i32* %96 = load i32** %arr1;
    i32* %97 = getelementptr &(i32* %96)[i64 %95];
    i32 %98 = load i32* %i;
    i64 %99 = sext i32 %98 to i64;
    i32* %100 = load i32** %arr1;
    i32* %101 = getelementptr &(i32* %100)[i64 %99];
    i32 %102 = load i32* %101;
    store i32* %97 with i32 %102;
    i32 %103 = load i32* %j;
    i32 %104 = sub i32 %103, i32 1;
    store i32* %j with i32 %104;
    ubr ^b9;
^b9:
    ubr ^while.header;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %tmp = alloc i32;
    i32* %tmp1 = alloc i32;
    i32* %i = alloc i32;
    [10 * i32]* %a = alloc [10 * i32];
    store i32* @n with i32 10;
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    store i32* %i with i32 0;
    store i32* %i with i32 0;
    store i32* %tmp1 with i32 0;
    store i32* %tmp1 with i32 9;
    i32* %10 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    i32 %11 = load i32* %i;
    i32 %12 = load i32* %tmp1;
    i32 %13 = call (i32*, i32, i32) -> i32 @QuickSort(i32* %10, i32 %11, i32 %12);
    store i32* %i with i32 %13;
    ubr ^while.header;
^while.header:
    i32 %14 = load i32* %i;
    i32 %15 = load i32* @n;
    i1 %16 = scmp lt i32 %14, i32 %15;
    i32 %17 = zext i1 %16 to i32;
    i1 %18 = scmp neq i32 %17, i32 0;
    cbr i1 %18(prob = 0.97), ^while.body, ^b;
^while.body:
    store i32* %tmp with i32 0;
    i32 %19 = load i32* %i;
    i64 %20 = sext i32 %19 to i64;
    i32* %21 = getelementptr &([10 * i32]* %a)[i64 0][i64 %20];
    i32 %22 = load i32* %21;
    store i32* %tmp with i32 %22;
    i32 %23 = load i32* %tmp;
    call (i32) -> void @putint(i32 %23);
    store i32* %tmp with i32 10;
    i32 %24 = load i32* %tmp;
    call (i32) -> void @putch(i32 %24);
    i32 %25 = load i32* %i;
    i32 %26 = add i32 %25, i32 1;
    store i32* %i with i32 %26;
    ubr ^while.header;
^b:
    ret i32 0;
}
