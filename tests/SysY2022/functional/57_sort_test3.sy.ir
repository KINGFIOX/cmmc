internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @QuickSort(i32* %arr, i32 %low, i32 %high) -> i32 {
  ^0:
    ubr ^entry;
  ^entry:
    i1 %1 = phi [^0, i1 false] [^b4, i1 true];
    i32 %2 = phi [^0, i32 undef] [^b4, i32 %4];
    i32 %3 = phi [^0, i32 %low] [^b4, i32 %28];
    i32 %4 = select i1 %1 ? i32 %2 : i32 0;
    i1 %5 = icmp sgt i32 %high, i32 %3;
    cbr i1 %5(prob = 0.5), ^if.then, ^b;
  ^if.then:
    i32* %6 = getelementptr &(i32* %arr)[i32 %3];
    i32 %7 = load i32* %6;
    i32 %8 = add i32 %7, i32 -1;
    ubr ^while.header;
  ^b:
    ret i32 %4;
  ^while.header:
    i32 %9 = phi [^if.then, i32 %high] [^b6, i32 %14] [^if.then3, i32 %42];
    i32 %10 = phi [^if.then, i32 %3] [^b6, i32 %29] [^if.then3, i32 %29];
    i1 %11 = icmp sgt i32 %9, i32 %10;
    cbr i1 %11(prob = 0.984615), ^while.header1, ^b1;
  ^b1:
    i32* %12 = getelementptr &(i32* %arr)[i32 %10];
    store i32* %12 with i32 %7;
    i32 %13 = add i32 %10, i32 -1;
    ubr ^entry1;
  ^while.header1:
    i32 %14 = phi [^while.header, i32 %9] [^while.body, i32 %21];
    i1 %15 = icmp slt i32 %10, i32 %14;
    i32* %16 = getelementptr &(i32* %arr)[i32 %14];
    cbr i1 %15(prob = 0.5), ^b2, ^b3;
  ^b2:
    i32 %17 = load i32* %16;
    i1 %18 = icmp slt i32 %8, i32 %17;
    cbr i1 %18(prob = 0.984615), ^while.body, ^b3;
  ^b3:
    cbr i1 %15(prob = 0.5), ^if.then1, ^while.header2;
  ^entry1:
    i32 %19 = phi [^b1, i32 %3] [^b10, i32 %57];
    i1 %20 = icmp sgt i32 %13, i32 %19;
    cbr i1 %20(prob = 0.5), ^if.then2, ^b4;
  ^while.body:
    i32 %21 = add i32 %14, i32 -1;
    ubr ^while.header1;
  ^if.then1:
    i32* %22 = getelementptr &(i32* %arr)[i32 %10];
    i32 %23 = load i32* %16;
    store i32* %22 with i32 %23;
    i32 %24 = add i32 %10, i32 1;
    ubr ^while.header2;
  ^if.then2:
    i32* %25 = getelementptr &(i32* %arr)[i32 %19];
    i32 %26 = load i32* %25;
    i32 %27 = add i32 %26, i32 -1;
    ubr ^while.header3;
  ^b4:
    i32 %28 = add i32 %10, i32 1;
    ubr ^entry;
  ^while.header2:
    i32 %29 = phi [^b3, i32 %10] [^if.then1, i32 %24] [^while.body1, i32 %37];
    i1 %30 = icmp sgt i32 %14, i32 %29;
    cbr i1 %30(prob = 0.5), ^b5, ^b6;
  ^while.header3:
    i32 %31 = phi [^if.then2, i32 %13] [^b12, i32 %43] [^if.then6, i32 %71];
    i32 %32 = phi [^if.then2, i32 %19] [^b12, i32 %58] [^if.then6, i32 %58];
    i1 %33 = icmp sgt i32 %31, i32 %32;
    cbr i1 %33(prob = 0.984615), ^while.header4, ^b7;
  ^b5:
    i32* %34 = getelementptr &(i32* %arr)[i32 %29];
    i32 %35 = load i32* %34;
    i1 %36 = icmp sgt i32 %7, i32 %35;
    cbr i1 %36(prob = 0.984615), ^while.body1, ^b6;
  ^b6:
    cbr i1 %30(prob = 0.5), ^if.then3, ^while.header;
  ^while.body1:
    i32 %37 = add i32 %29, i32 1;
    ubr ^while.header2;
  ^b7:
    i32* %38 = getelementptr &(i32* %arr)[i32 %32];
    store i32* %38 with i32 %26;
    i32 %39 = add i32 %32, i32 -1;
    ubr ^entry2;
  ^if.then3:
    i32* %40 = getelementptr &(i32* %arr)[i32 %29];
    i32 %41 = load i32* %40;
    store i32* %16 with i32 %41;
    i32 %42 = add i32 %14, i32 -1;
    ubr ^while.header;
  ^while.header4:
    i32 %43 = phi [^while.header3, i32 %31] [^while.body2, i32 %50];
    i1 %44 = icmp slt i32 %32, i32 %43;
    i32* %45 = getelementptr &(i32* %arr)[i32 %43];
    cbr i1 %44(prob = 0.5), ^b8, ^b9;
  ^b8:
    i32 %46 = load i32* %45;
    i1 %47 = icmp slt i32 %27, i32 %46;
    cbr i1 %47(prob = 0.984615), ^while.body2, ^b9;
  ^b9:
    cbr i1 %44(prob = 0.5), ^if.then4, ^while.header5;
  ^entry2:
    i32 %48 = phi [^b7, i32 %19] [^b16, i32 %86];
    i1 %49 = icmp sgt i32 %39, i32 %48;
    cbr i1 %49(prob = 0.5), ^if.then5, ^b10;
  ^while.body2:
    i32 %50 = add i32 %43, i32 -1;
    ubr ^while.header4;
  ^if.then4:
    i32* %51 = getelementptr &(i32* %arr)[i32 %32];
    i32 %52 = load i32* %45;
    store i32* %51 with i32 %52;
    i32 %53 = add i32 %32, i32 1;
    ubr ^while.header5;
  ^if.then5:
    i32* %54 = getelementptr &(i32* %arr)[i32 %48];
    i32 %55 = load i32* %54;
    i32 %56 = add i32 %55, i32 -1;
    ubr ^while.header6;
  ^b10:
    i32 %57 = add i32 %32, i32 1;
    ubr ^entry1;
  ^while.header5:
    i32 %58 = phi [^b9, i32 %32] [^if.then4, i32 %53] [^while.body3, i32 %66];
    i1 %59 = icmp sgt i32 %43, i32 %58;
    cbr i1 %59(prob = 0.5), ^b11, ^b12;
  ^while.header6:
    i32 %60 = phi [^if.then5, i32 %39] [^b18, i32 %72] [^if.then9, i32 %102];
    i32 %61 = phi [^if.then5, i32 %48] [^b18, i32 %87] [^if.then9, i32 %87];
    i1 %62 = icmp sgt i32 %60, i32 %61;
    cbr i1 %62(prob = 0.984615), ^while.header7, ^b13;
  ^b11:
    i32* %63 = getelementptr &(i32* %arr)[i32 %58];
    i32 %64 = load i32* %63;
    i1 %65 = icmp sgt i32 %26, i32 %64;
    cbr i1 %65(prob = 0.984615), ^while.body3, ^b12;
  ^b12:
    cbr i1 %59(prob = 0.5), ^if.then6, ^while.header3;
  ^while.body3:
    i32 %66 = add i32 %58, i32 1;
    ubr ^while.header5;
  ^b13:
    i32* %67 = getelementptr &(i32* %arr)[i32 %61];
    store i32* %67 with i32 %55;
    i32 %68 = add i32 %61, i32 -1;
    ubr ^entry3;
  ^if.then6:
    i32* %69 = getelementptr &(i32* %arr)[i32 %58];
    i32 %70 = load i32* %69;
    store i32* %45 with i32 %70;
    i32 %71 = add i32 %43, i32 -1;
    ubr ^while.header3;
  ^while.header7:
    i32 %72 = phi [^while.header6, i32 %60] [^while.body4, i32 %79];
    i1 %73 = icmp slt i32 %61, i32 %72;
    i32* %74 = getelementptr &(i32* %arr)[i32 %72];
    cbr i1 %73(prob = 0.5), ^b14, ^b15;
  ^b14:
    i32 %75 = load i32* %74;
    i1 %76 = icmp slt i32 %56, i32 %75;
    cbr i1 %76(prob = 0.984615), ^while.body4, ^b15;
  ^b15:
    cbr i1 %73(prob = 0.5), ^if.then7, ^while.header8;
  ^entry3:
    i32 %77 = phi [^b13, i32 %48] [^b19, i32 %99];
    i1 %78 = icmp sgt i32 %68, i32 %77;
    cbr i1 %78(prob = 0.5), ^if.then8, ^b16;
  ^while.body4:
    i32 %79 = add i32 %72, i32 -1;
    ubr ^while.header7;
  ^if.then7:
    i32* %80 = getelementptr &(i32* %arr)[i32 %61];
    i32 %81 = load i32* %74;
    store i32* %80 with i32 %81;
    i32 %82 = add i32 %61, i32 1;
    ubr ^while.header8;
  ^if.then8:
    i32* %83 = getelementptr &(i32* %arr)[i32 %77];
    i32 %84 = load i32* %83;
    i32 %85 = add i32 %84, i32 -1;
    ubr ^while.header9;
  ^b16:
    i32 %86 = add i32 %61, i32 1;
    ubr ^entry2;
  ^while.header8:
    i32 %87 = phi [^b15, i32 %61] [^if.then7, i32 %82] [^while.body5, i32 %95];
    i1 %88 = icmp sgt i32 %72, i32 %87;
    cbr i1 %88(prob = 0.5), ^b17, ^b18;
  ^while.header9:
    i32 %89 = phi [^if.then8, i32 %68] [^b23, i32 %103] [^if.then11, i32 %120];
    i32 %90 = phi [^if.then8, i32 %77] [^b23, i32 %112] [^if.then11, i32 %112];
    i1 %91 = icmp sgt i32 %89, i32 %90;
    cbr i1 %91(prob = 0.984615), ^while.header10, ^b19;
  ^b17:
    i32* %92 = getelementptr &(i32* %arr)[i32 %87];
    i32 %93 = load i32* %92;
    i1 %94 = icmp sgt i32 %55, i32 %93;
    cbr i1 %94(prob = 0.984615), ^while.body5, ^b18;
  ^b18:
    cbr i1 %88(prob = 0.5), ^if.then9, ^while.header6;
  ^while.body5:
    i32 %95 = add i32 %87, i32 1;
    ubr ^while.header8;
  ^b19:
    i32* %96 = getelementptr &(i32* %arr)[i32 %90];
    store i32* %96 with i32 %84;
    i32 %97 = add i32 %90, i32 -1;
    i32 %98 = call (i32*, i32, i32) -> i32 @QuickSort(i32* %arr, i32 %77, i32 %97);
    i32 %99 = add i32 %90, i32 1;
    ubr ^entry3;
  ^if.then9:
    i32* %100 = getelementptr &(i32* %arr)[i32 %87];
    i32 %101 = load i32* %100;
    store i32* %74 with i32 %101;
    i32 %102 = add i32 %72, i32 -1;
    ubr ^while.header6;
  ^while.header10:
    i32 %103 = phi [^while.header9, i32 %89] [^while.body6, i32 %108];
    i1 %104 = icmp slt i32 %90, i32 %103;
    i32* %105 = getelementptr &(i32* %arr)[i32 %103];
    cbr i1 %104(prob = 0.5), ^b20, ^b21;
  ^b20:
    i32 %106 = load i32* %105;
    i1 %107 = icmp slt i32 %85, i32 %106;
    cbr i1 %107(prob = 0.984615), ^while.body6, ^b21;
  ^b21:
    cbr i1 %104(prob = 0.5), ^if.then10, ^while.header11;
  ^while.body6:
    i32 %108 = add i32 %103, i32 -1;
    ubr ^while.header10;
  ^if.then10:
    i32* %109 = getelementptr &(i32* %arr)[i32 %90];
    i32 %110 = load i32* %105;
    store i32* %109 with i32 %110;
    i32 %111 = add i32 %90, i32 1;
    ubr ^while.header11;
  ^while.header11:
    i32 %112 = phi [^b21, i32 %90] [^if.then10, i32 %111] [^while.body7, i32 %117];
    i1 %113 = icmp sgt i32 %103, i32 %112;
    cbr i1 %113(prob = 0.5), ^b22, ^b23;
  ^b22:
    i32* %114 = getelementptr &(i32* %arr)[i32 %112];
    i32 %115 = load i32* %114;
    i1 %116 = icmp sgt i32 %84, i32 %115;
    cbr i1 %116(prob = 0.984615), ^while.body7, ^b23;
  ^b23:
    cbr i1 %113(prob = 0.5), ^if.then11, ^while.header9;
  ^while.body7:
    i32 %117 = add i32 %112, i32 1;
    ubr ^while.header11;
  ^if.then11:
    i32* %118 = getelementptr &(i32* %arr)[i32 %112];
    i32 %119 = load i32* %118;
    store i32* %105 with i32 %119;
    i32 %120 = add i32 %103, i32 -1;
    ubr ^while.header9;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [10 * i32]* %a = alloc [10 * i32], align 8;
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    i32 %10 = call (i32*, i32, i32) -> i32 @QuickSort(i32* %0, i32 0, i32 9);
    i1 %11 = icmp slt i32 %10, i32 10;
    cbr i1 %11(prob = 0.984615), ^while.body, ^b;
  ^while.body:
    i32 %12 = phi [^entry, i32 %10] [^while.body, i32 %15];
    i32* %13 = getelementptr &([10 * i32]* %a)[i64 0][i32 %12];
    i32 %14 = load i32* %13;
    call (i32) -> void @putint(i32 %14);
    call (i32) -> void @putch(i32 10);
    i32 %15 = add i32 %12, i32 1;
    i1 %16 = icmp slt i32 %15, i32 10;
    cbr i1 %16(prob = 0.984615), ^while.body, ^b;
  ^b:
    ret i32 0;
}
