internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @QuickSort(i32* %arr, i32 %low, i32 %high, i32* %0) -> i32 {
^entry:
    i32* %k = alloc i32;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    i32* %high1 = alloc i32;
    i32* %low1 = alloc i32;
    i32** %arr1 = alloc i32*;
    store i32** %arr1 with i32* %arr;
    store i32* %low1 with i32 %low;
    store i32* %high1 with i32 %high;
    i1 %1 = scmp lt i32 %low, i32 %high;
    cbr i1 %1(prob = 0.5), ^if.then, ^b;
^if.then:
    store i32* %i with i32 %low;
    store i32* %j with i32 %high;
    store i32* %k with i32 0;
    i32* %2 = getelementptr &(i32* %arr)[i32 %low];
    i32 %3 = load i32* %2;
    store i32* %k with i32 %3;
    ubr ^while.guard;
^b:
    ret i32 0;
^while.guard:
    i32 %4 = phi [^if.then, i32 %low] [^b11, i32 %53];
    i32 %5 = phi [^if.then, i32 %high] [^b11, i32 %54];
    i32 %6 = phi [^if.then, i32 %3] [^b11, i32 %55];
    i1 %7 = scmp lt i32 %4, i32 %5;
    i32 %8 = add i32 %6, i32 -1;
    cbr i1 %7(prob = 0.5), ^b1, ^b2;
^b1:
    i32* %9 = getelementptr &(i32* %arr)[i32 %5];
    i32 %10 = load i32* %9;
    i1 %11 = scmp gt i32 %10, i32 %8;
    ubr ^b2;
^b2:
    i1 %12 = phi [^while.guard, i1 false] [^b1, i1 %11];
    cbr i1 %12(prob = 0.97), ^while.body, ^b3;
^while.body:
    i32 %13 = phi [^b2, i32 %5] [^b5, i32 %14];
    i32 %14 = add i32 %13, i32 -1;
    store i32* %j with i32 %14;
    i1 %15 = scmp lt i32 %4, i32 %14;
    cbr i1 %15(prob = 0.5), ^b4, ^b5;
^b3:
    i32 %16 = phi [^b2, i32 %5] [^b5, i32 %14];
    i1 %17 = scmp lt i32 %4, i32 %16;
    cbr i1 %17(prob = 0.5), ^if.then1, ^while.guard1;
^b4:
    i32* %18 = getelementptr &(i32* %arr)[i32 %14];
    i32 %19 = load i32* %18;
    i1 %20 = scmp gt i32 %19, i32 %8;
    ubr ^b5;
^if.then1:
    i32* %21 = getelementptr &(i32* %arr)[i32 %4];
    i32* %22 = getelementptr &(i32* %arr)[i32 %16];
    i32 %23 = load i32* %22;
    store i32* %21 with i32 %23;
    i32 %24 = load i32* %i;
    i32 %25 = load i32* %j;
    i32 %26 = load i32* %k;
    i32 %27 = add i32 %24, i32 1;
    store i32* %i with i32 %27;
    ubr ^while.guard1;
^b5:
    i1 %28 = phi [^while.body, i1 false] [^b4, i1 %20];
    cbr i1 %28(prob = 0.97), ^while.body, ^b3;
^while.guard1:
    i32 %29 = phi [^b3, i32 %4] [^if.then1, i32 %27];
    i32 %30 = phi [^b3, i32 %16] [^if.then1, i32 %25];
    i32 %31 = phi [^b3, i32 %6] [^if.then1, i32 %26];
    i1 %32 = scmp lt i32 %29, i32 %30;
    cbr i1 %32(prob = 0.5), ^b6, ^b7;
^b6:
    i32* %33 = getelementptr &(i32* %arr)[i32 %29];
    i32 %34 = load i32* %33;
    i1 %35 = scmp lt i32 %34, i32 %31;
    ubr ^b7;
^b7:
    i1 %36 = phi [^while.guard1, i1 false] [^b6, i1 %35];
    cbr i1 %36(prob = 0.97), ^while.body1, ^b8;
^while.body1:
    i32 %37 = phi [^b7, i32 %29] [^b10, i32 %38];
    i32 %38 = add i32 %37, i32 1;
    store i32* %i with i32 %38;
    i1 %39 = scmp lt i32 %38, i32 %30;
    cbr i1 %39(prob = 0.5), ^b9, ^b10;
^b8:
    i32 %40 = phi [^b7, i32 %29] [^b10, i32 %38];
    i1 %41 = scmp lt i32 %40, i32 %30;
    cbr i1 %41(prob = 0.5), ^if.then2, ^b11;
^b9:
    i32* %42 = getelementptr &(i32* %arr)[i32 %38];
    i32 %43 = load i32* %42;
    i1 %44 = scmp lt i32 %43, i32 %31;
    ubr ^b10;
^if.then2:
    i32* %45 = getelementptr &(i32* %arr)[i32 %30];
    i32* %46 = getelementptr &(i32* %arr)[i32 %40];
    i32 %47 = load i32* %46;
    store i32* %45 with i32 %47;
    i32 %48 = load i32* %i;
    i32 %49 = load i32* %j;
    i32 %50 = load i32* %k;
    i32 %51 = add i32 %49, i32 -1;
    store i32* %j with i32 %51;
    ubr ^b11;
^b10:
    i1 %52 = phi [^while.body1, i1 false] [^b9, i1 %44];
    cbr i1 %52(prob = 0.97), ^while.body1, ^b8;
^b11:
    i32 %53 = phi [^b8, i32 %40] [^if.then2, i32 %48];
    i32 %54 = phi [^b8, i32 %30] [^if.then2, i32 %51];
    i32 %55 = phi [^b8, i32 %31] [^if.then2, i32 %50];
    i1 %56 = scmp lt i32 %53, i32 %54;
    cbr i1 %56(prob = 0.97), ^while.guard, ^indirect;
^indirect:
    i32* %57 = getelementptr &(i32* %arr)[i32 %53];
    store i32* %57 with i32 %55;
    i32 %58 = load i32* %low1;
    i32 %59 = load i32* %i;
    i32 %60 = add i32 %59, i32 -1;
    i32 %61 = call (i32*, i32, i32, i32*) -> i32 @QuickSort(i32* %arr, i32 %58, i32 %60, i32* %0);
    i32* %62 = load i32** %arr1;
    i32 %63 = load i32* %high1;
    i32 %64 = load i32* %i;
    i32 %65 = add i32 %64, i32 1;
    i32 %66 = call (i32*, i32, i32, i32*) -> i32 @QuickSort(i32* %62, i32 %65, i32 %63, i32* %0);
    ubr ^b;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %n = alloc i32;
    [10 * i32]* %a = alloc [10 * i32];
    store i32* %n with i32 10;
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    i32 %10 = call (i32*, i32, i32, i32*) -> i32 @QuickSort(i32* %0, i32 0, i32 9, i32* %n);
    i32 %11 = load i32* %n;
    i1 %12 = scmp lt i32 %10, i32 %11;
    cbr i1 %12(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %13 = phi [^entry, i32 %10] [^while.body, i32 %16];
    i32* %14 = getelementptr &([10 * i32]* %a)[i64 0][i32 %13];
    i32 %15 = load i32* %14;
    call (i32) -> void @putint(i32 %15);
    call (i32) -> void @putch(i32 10);
    i32 %16 = add i32 %13, i32 1;
    i1 %17 = scmp lt i32 %16, i32 %11;
    cbr i1 %17(prob = 0.97), ^while.body, ^b;
^b:
    ret i32 0;
}
