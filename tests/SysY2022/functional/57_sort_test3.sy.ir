internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @QuickSort(i32* %arr, i32 %low, i32 %high) -> i32 {
^0:
    ubr ^entry;
^entry:
    i1 %1 = phi [^0, i1 false] [^indirect, i1 true];
    i32 %2 = phi [^0, i32 undef] [^indirect, i32 %54];
    i32 %3 = phi [^0, i32 %low] [^indirect, i32 %53];
    i1 %4 = scmp lt i32 %3, i32 %high;
    cbr i1 %4(prob = 0.5), ^if.then, ^b;
^if.then:
    i32* %5 = getelementptr &(i32* %arr)[i32 %3];
    i32 %6 = load i32* %5;
    i32 %7 = add i32 %6, i32 -1;
    ubr ^while.guard;
^b:
    i32 %8 = select i1 %1 ? i32 %2 : i32 0;
    ret i32 %8;
^while.guard:
    i32 %9 = phi [^if.then, i32 %3] [^b11, i32 %38];
    i32 %10 = phi [^if.then, i32 %high] [^b11, i32 %48];
    i1 %11 = scmp lt i32 %9, i32 %10;
    cbr i1 %11(prob = 0.5), ^b1, ^b2;
^b1:
    i32* %12 = getelementptr &(i32* %arr)[i32 %10];
    i32 %13 = load i32* %12;
    i1 %14 = scmp gt i32 %13, i32 %7;
    ubr ^b2;
^b2:
    i1 %15 = phi [^while.guard, i1 false] [^b1, i1 %14];
    cbr i1 %15(prob = 0.97), ^while.body, ^b3;
^while.body:
    i32 %16 = phi [^b2, i32 %10] [^b5, i32 %17];
    i32 %17 = add i32 %16, i32 -1;
    i1 %18 = scmp lt i32 %9, i32 %17;
    cbr i1 %18(prob = 0.5), ^b4, ^b5;
^b3:
    i32 %19 = phi [^b2, i32 %10] [^b5, i32 %17];
    i1 %20 = scmp lt i32 %9, i32 %19;
    cbr i1 %20(prob = 0.5), ^if.then1, ^while.guard1;
^b4:
    i32* %21 = getelementptr &(i32* %arr)[i32 %17];
    i32 %22 = load i32* %21;
    i1 %23 = scmp gt i32 %22, i32 %7;
    ubr ^b5;
^if.then1:
    i32* %24 = getelementptr &(i32* %arr)[i32 %9];
    i32* %25 = getelementptr &(i32* %arr)[i32 %19];
    i32 %26 = load i32* %25;
    store i32* %24 with i32 %26;
    i32 %27 = add i32 %9, i32 1;
    ubr ^while.guard1;
^b5:
    i1 %28 = phi [^while.body, i1 false] [^b4, i1 %23];
    cbr i1 %28(prob = 0.97), ^while.body, ^b3;
^while.guard1:
    i32 %29 = phi [^b3, i32 %9] [^if.then1, i32 %27];
    i1 %30 = scmp lt i32 %29, i32 %19;
    cbr i1 %30(prob = 0.5), ^b6, ^b7;
^b6:
    i32* %31 = getelementptr &(i32* %arr)[i32 %29];
    i32 %32 = load i32* %31;
    i1 %33 = scmp lt i32 %32, i32 %6;
    ubr ^b7;
^b7:
    i1 %34 = phi [^while.guard1, i1 false] [^b6, i1 %33];
    cbr i1 %34(prob = 0.97), ^while.body1, ^b8;
^while.body1:
    i32 %35 = phi [^b7, i32 %29] [^b10, i32 %36];
    i32 %36 = add i32 %35, i32 1;
    i1 %37 = scmp lt i32 %36, i32 %19;
    cbr i1 %37(prob = 0.5), ^b9, ^b10;
^b8:
    i32 %38 = phi [^b7, i32 %29] [^b10, i32 %36];
    i1 %39 = scmp lt i32 %38, i32 %19;
    cbr i1 %39(prob = 0.5), ^if.then2, ^b11;
^b9:
    i32* %40 = getelementptr &(i32* %arr)[i32 %36];
    i32 %41 = load i32* %40;
    i1 %42 = scmp lt i32 %41, i32 %6;
    ubr ^b10;
^if.then2:
    i32* %43 = getelementptr &(i32* %arr)[i32 %19];
    i32* %44 = getelementptr &(i32* %arr)[i32 %38];
    i32 %45 = load i32* %44;
    store i32* %43 with i32 %45;
    i32 %46 = add i32 %19, i32 -1;
    ubr ^b11;
^b10:
    i1 %47 = phi [^while.body1, i1 false] [^b9, i1 %42];
    cbr i1 %47(prob = 0.97), ^while.body1, ^b8;
^b11:
    i32 %48 = phi [^b8, i32 %19] [^if.then2, i32 %46];
    i1 %49 = scmp lt i32 %38, i32 %48;
    cbr i1 %49(prob = 0.97), ^while.guard, ^indirect;
^indirect:
    i32* %50 = getelementptr &(i32* %arr)[i32 %38];
    store i32* %50 with i32 %6;
    i32 %51 = add i32 %38, i32 -1;
    i32 %52 = call (i32*, i32, i32) -> i32 @QuickSort(i32* %arr, i32 %3, i32 %51);
    i32 %53 = add i32 %38, i32 1;
    i32 %54 = select i1 %1 ? i32 %2 : i32 0;
    ubr ^entry;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    [10 * i32]* %a = alloc [10 * i32];
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    i32 %10 = call (i32*, i32, i32) -> i32 @QuickSort(i32* %0, i32 0, i32 9);
    i1 %11 = scmp lt i32 %10, i32 10;
    cbr i1 %11(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %12 = phi [^entry, i32 %10] [^while.body, i32 %15];
    i32* %13 = getelementptr &([10 * i32]* %a)[i64 0][i32 %12];
    i32 %14 = load i32* %13;
    call (i32) -> void @putint(i32 %14);
    call (i32) -> void @putch(i32 10);
    i32 %15 = add i32 %12, i32 1;
    i1 %16 = scmp lt i32 %15, i32 10;
    cbr i1 %16(prob = 0.97), ^while.body, ^b;
^b:
    ret i32 0;
}
