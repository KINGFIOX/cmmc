internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @QuickSort(i32* %arr, i32 %low, i32 %high) -> i32 {
  ^0:
    i1 %1 = icmp slt i32 %low, i32 %high;
    cbr i1 %1(prob = 0.5), ^if.then, ^b;
  ^if.then:
    i32 %2 = phi [^0, i32 %low] [^b3, i32 %23];
    i32* %3 = getelementptr &(i32* %arr)[i32 %2];
    i32 %4 = load i32* %3;
    i32 %5 = add i32 %4, i32 -1;
    ubr ^while.header;
  ^b:
    ret i32 0;
  ^while.header:
    i32 %6 = phi [^if.then, i32 %high] [^while.header2, i32 %9] [^b6, i32 %35];
    i32 %7 = phi [^if.then, i32 %2] [^while.header2, i32 %21] [^b6, i32 %21];
    i1 %8 = icmp sgt i32 %6, i32 %7;
    cbr i1 %8(prob = 0.984615), ^while.header1, ^b1;
  ^while.header1:
    i32 %9 = phi [^while.header, i32 %6] [^while.body, i32 %25];
    i1 %10 = icmp slt i32 %7, i32 %9;
    i32* %11 = getelementptr &(i32* %arr)[i32 %9];
    cbr i1 %10(prob = 0.5), ^b2, ^while.header2;
  ^b1:
    i32* %12 = getelementptr &(i32* %arr)[i32 %7];
    store i32* %12 with i32 %4;
    i32 %13 = add i32 %7, i32 -1;
    i1 %14 = icmp slt i32 %2, i32 %13;
    cbr i1 %14(prob = 0.5), ^if.then1, ^b3;
  ^if.then1:
    i32 %15 = phi [^b1, i32 %2] [^b9, i32 %50];
    i32* %16 = getelementptr &(i32* %arr)[i32 %15];
    i32 %17 = load i32* %16;
    i32 %18 = add i32 %17, i32 -1;
    ubr ^while.header3;
  ^b2:
    i32 %19 = load i32* %11;
    i1 %20 = icmp slt i32 %5, i32 %19;
    cbr i1 %20(prob = 0.984615), ^while.body, ^b4;
  ^while.header2:
    i32 %21 = phi [^while.header1, i32 %7] [^b4, i32 %27] [^while.body1, i32 %34];
    i1 %22 = icmp sle i32 %9, i32 %21;
    cbr i1 %22(prob = 0.5), ^while.header, ^b5;
  ^b3:
    i32 %23 = add i32 %7, i32 1;
    i1 %24 = icmp sgt i32 %high, i32 %23;
    cbr i1 %24(prob = 0.5), ^if.then, ^b;
  ^while.body:
    i32 %25 = add i32 %9, i32 -1;
    ubr ^while.header1;
  ^b4:
    i32* %26 = getelementptr &(i32* %arr)[i32 %7];
    store i32* %26 with i32 %19;
    i32 %27 = add i32 %7, i32 1;
    ubr ^while.header2;
  ^while.header3:
    i32 %28 = phi [^if.then1, i32 %13] [^while.header5, i32 %36] [^b12, i32 %62];
    i32 %29 = phi [^if.then1, i32 %15] [^while.header5, i32 %48] [^b12, i32 %48];
    i1 %30 = icmp sgt i32 %28, i32 %29;
    cbr i1 %30(prob = 0.984615), ^while.header4, ^b7;
  ^b5:
    i32* %31 = getelementptr &(i32* %arr)[i32 %21];
    i32 %32 = load i32* %31;
    i1 %33 = icmp sgt i32 %4, i32 %32;
    cbr i1 %33(prob = 0.984615), ^while.body1, ^b6;
  ^while.body1:
    i32 %34 = add i32 %21, i32 1;
    ubr ^while.header2;
  ^b6:
    store i32* %11 with i32 %32;
    i32 %35 = add i32 %9, i32 -1;
    ubr ^while.header;
  ^while.header4:
    i32 %36 = phi [^while.header3, i32 %28] [^while.body2, i32 %52];
    i1 %37 = icmp slt i32 %29, i32 %36;
    i32* %38 = getelementptr &(i32* %arr)[i32 %36];
    cbr i1 %37(prob = 0.5), ^b8, ^while.header5;
  ^b7:
    i32* %39 = getelementptr &(i32* %arr)[i32 %29];
    store i32* %39 with i32 %17;
    i32 %40 = add i32 %29, i32 -1;
    i1 %41 = icmp slt i32 %15, i32 %40;
    cbr i1 %41(prob = 0.5), ^if.then2, ^b9;
  ^if.then2:
    i32 %42 = phi [^b7, i32 %15] [^b15, i32 %77];
    i32* %43 = getelementptr &(i32* %arr)[i32 %42];
    i32 %44 = load i32* %43;
    i32 %45 = add i32 %44, i32 -1;
    ubr ^while.header6;
  ^b8:
    i32 %46 = load i32* %38;
    i1 %47 = icmp slt i32 %18, i32 %46;
    cbr i1 %47(prob = 0.984615), ^while.body2, ^b10;
  ^while.header5:
    i32 %48 = phi [^while.header4, i32 %29] [^b10, i32 %54] [^while.body3, i32 %61];
    i1 %49 = icmp sle i32 %36, i32 %48;
    cbr i1 %49(prob = 0.5), ^while.header3, ^b11;
  ^b9:
    i32 %50 = add i32 %29, i32 1;
    i1 %51 = icmp sgt i32 %13, i32 %50;
    cbr i1 %51(prob = 0.5), ^if.then1, ^b3;
  ^while.body2:
    i32 %52 = add i32 %36, i32 -1;
    ubr ^while.header4;
  ^b10:
    i32* %53 = getelementptr &(i32* %arr)[i32 %29];
    store i32* %53 with i32 %46;
    i32 %54 = add i32 %29, i32 1;
    ubr ^while.header5;
  ^while.header6:
    i32 %55 = phi [^if.then2, i32 %40] [^while.header8, i32 %63] [^b18, i32 %89];
    i32 %56 = phi [^if.then2, i32 %42] [^while.header8, i32 %75] [^b18, i32 %75];
    i1 %57 = icmp sgt i32 %55, i32 %56;
    cbr i1 %57(prob = 0.984615), ^while.header7, ^b13;
  ^b11:
    i32* %58 = getelementptr &(i32* %arr)[i32 %48];
    i32 %59 = load i32* %58;
    i1 %60 = icmp sgt i32 %17, i32 %59;
    cbr i1 %60(prob = 0.984615), ^while.body3, ^b12;
  ^while.body3:
    i32 %61 = add i32 %48, i32 1;
    ubr ^while.header5;
  ^b12:
    store i32* %38 with i32 %59;
    i32 %62 = add i32 %36, i32 -1;
    ubr ^while.header3;
  ^while.header7:
    i32 %63 = phi [^while.header6, i32 %55] [^while.body4, i32 %79];
    i1 %64 = icmp slt i32 %56, i32 %63;
    i32* %65 = getelementptr &(i32* %arr)[i32 %63];
    cbr i1 %64(prob = 0.5), ^b14, ^while.header8;
  ^b13:
    i32* %66 = getelementptr &(i32* %arr)[i32 %56];
    store i32* %66 with i32 %44;
    i32 %67 = add i32 %56, i32 -1;
    i1 %68 = icmp slt i32 %42, i32 %67;
    cbr i1 %68(prob = 0.5), ^if.then3, ^b15;
  ^if.then3:
    i32 %69 = phi [^b13, i32 %42] [^b19, i32 %96];
    i32* %70 = getelementptr &(i32* %arr)[i32 %69];
    i32 %71 = load i32* %70;
    i32 %72 = add i32 %71, i32 -1;
    ubr ^while.header9;
  ^b14:
    i32 %73 = load i32* %65;
    i1 %74 = icmp slt i32 %45, i32 %73;
    cbr i1 %74(prob = 0.984615), ^while.body4, ^b16;
  ^while.header8:
    i32 %75 = phi [^while.header7, i32 %56] [^b16, i32 %81] [^while.body5, i32 %88];
    i1 %76 = icmp sle i32 %63, i32 %75;
    cbr i1 %76(prob = 0.5), ^while.header6, ^b17;
  ^b15:
    i32 %77 = add i32 %56, i32 1;
    i1 %78 = icmp sgt i32 %40, i32 %77;
    cbr i1 %78(prob = 0.5), ^if.then2, ^b9;
  ^while.body4:
    i32 %79 = add i32 %63, i32 -1;
    ubr ^while.header7;
  ^b16:
    i32* %80 = getelementptr &(i32* %arr)[i32 %56];
    store i32* %80 with i32 %73;
    i32 %81 = add i32 %56, i32 1;
    ubr ^while.header8;
  ^while.header9:
    i32 %82 = phi [^if.then3, i32 %67] [^while.header11, i32 %90] [^b23, i32 %109];
    i32 %83 = phi [^if.then3, i32 %69] [^while.header11, i32 %100] [^b23, i32 %100];
    i1 %84 = icmp sgt i32 %82, i32 %83;
    cbr i1 %84(prob = 0.984615), ^while.header10, ^b19;
  ^b17:
    i32* %85 = getelementptr &(i32* %arr)[i32 %75];
    i32 %86 = load i32* %85;
    i1 %87 = icmp sgt i32 %44, i32 %86;
    cbr i1 %87(prob = 0.984615), ^while.body5, ^b18;
  ^while.body5:
    i32 %88 = add i32 %75, i32 1;
    ubr ^while.header8;
  ^b18:
    store i32* %65 with i32 %86;
    i32 %89 = add i32 %63, i32 -1;
    ubr ^while.header6;
  ^while.header10:
    i32 %90 = phi [^while.header9, i32 %82] [^while.body6, i32 %102];
    i1 %91 = icmp slt i32 %83, i32 %90;
    i32* %92 = getelementptr &(i32* %arr)[i32 %90];
    cbr i1 %91(prob = 0.5), ^b20, ^while.header11;
  ^b19:
    i32* %93 = getelementptr &(i32* %arr)[i32 %83];
    store i32* %93 with i32 %71;
    i32 %94 = add i32 %83, i32 -1;
    i32 %95 = call (i32*, i32, i32) -> i32 @QuickSort(i32* %arr, i32 %69, i32 %94);
    i32 %96 = add i32 %83, i32 1;
    i1 %97 = icmp sgt i32 %67, i32 %96;
    cbr i1 %97(prob = 0.5), ^if.then3, ^b15;
  ^b20:
    i32 %98 = load i32* %92;
    i1 %99 = icmp slt i32 %72, i32 %98;
    cbr i1 %99(prob = 0.984615), ^while.body6, ^b21;
  ^while.header11:
    i32 %100 = phi [^while.header10, i32 %83] [^b21, i32 %104] [^while.body7, i32 %108];
    i1 %101 = icmp sle i32 %90, i32 %100;
    cbr i1 %101(prob = 0.5), ^while.header9, ^b22;
  ^while.body6:
    i32 %102 = add i32 %90, i32 -1;
    ubr ^while.header10;
  ^b21:
    i32* %103 = getelementptr &(i32* %arr)[i32 %83];
    store i32* %103 with i32 %98;
    i32 %104 = add i32 %83, i32 1;
    ubr ^while.header11;
  ^b22:
    i32* %105 = getelementptr &(i32* %arr)[i32 %100];
    i32 %106 = load i32* %105;
    i1 %107 = icmp sgt i32 %71, i32 %106;
    cbr i1 %107(prob = 0.984615), ^while.body7, ^b23;
  ^while.body7:
    i32 %108 = add i32 %100, i32 1;
    ubr ^while.header11;
  ^b23:
    store i32* %92 with i32 %106;
    i32 %109 = add i32 %90, i32 -1;
    ubr ^while.header9;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [10 * i32]* %a = alloc [10 * i32], align 8;
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    i32 %10 = call (i32*, i32, i32) -> i32 @QuickSort(i32* %0, i32 0, i32 9);
    i1 %11 = icmp slt i32 %10, i32 10;
    cbr i1 %11(prob = 0.984615), ^while.body, ^b;
  ^while.body:
    i32 %12 = phi [^entry, i32 %10] [^while.body, i32 %15];
    i32* %13 = getelementptr &([10 * i32]* %a)[i64 0][i32 %12];
    i32 %14 = load i32* %13;
    call (i32) -> void @putint(i32 %14);
    call (i32) -> void @putch(i32 10);
    i32 %15 = add i32 %12, i32 1;
    i1 %16 = icmp slt i32 %15, i32 10;
    cbr i1 %16(prob = 0.984615), ^while.body, ^b;
  ^b:
    ret i32 0;
}
