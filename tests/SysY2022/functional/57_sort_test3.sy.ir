internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @QuickSort(i32* %arr, i32 %low, i32 %high) -> i32 {
  ^0:
    ubr ^entry;
  ^entry:
    i1 %1 = phi [^0, i1 false] [^b1, i1 true];
    i32 %2 = phi [^0, i32 undef] [^b1, i32 %15];
    i32 %3 = phi [^0, i32 %low] [^b1, i32 %16];
    i1 %4 = icmp sgt i32 %high, i32 %3;
    cbr i1 %4(prob = 0.5), ^if.then, ^b;
  ^if.then:
    i32* %5 = getelementptr &(i32* %arr)[i32 %3];
    i32 %6 = load i32* %5;
    i32 %7 = add i32 %6, i32 -1;
    ubr ^while.header;
  ^b:
    i32 %8 = select i1 %1 ? i32 %2 : i32 0;
    ret i32 %8;
  ^while.header:
    i32 %9 = phi [^if.then, i32 %high] [^b5, i32 %17] [^if.then2, i32 %36];
    i32 %10 = phi [^if.then, i32 %3] [^b5, i32 %27] [^if.then2, i32 %27];
    i1 %11 = icmp sgt i32 %9, i32 %10;
    cbr i1 %11(prob = 0.97), ^while.header1, ^b1;
  ^b1:
    i32* %12 = getelementptr &(i32* %arr)[i32 %10];
    store i32* %12 with i32 %6;
    i32 %13 = add i32 %10, i32 -1;
    i32 %14 = call (i32*, i32, i32) -> i32 @QuickSort(i32* %arr, i32 %3, i32 %13);
    i32 %15 = select i1 %1 ? i32 %2 : i32 0;
    i32 %16 = add i32 %10, i32 1;
    ubr ^entry;
  ^while.header1:
    i32 %17 = phi [^while.header, i32 %9] [^while.body, i32 %22];
    i1 %18 = icmp slt i32 %10, i32 %17;
    cbr i1 %18(prob = 0.5), ^b2, ^b3;
  ^b2:
    i32* %19 = getelementptr &(i32* %arr)[i32 %17];
    i32 %20 = load i32* %19;
    i1 %21 = icmp slt i32 %7, i32 %20;
    cbr i1 %21(prob = 0.97), ^while.body, ^b3;
  ^b3:
    cbr i1 %18(prob = 0.5), ^if.then1, ^while.header2;
  ^while.body:
    i32 %22 = add i32 %17, i32 -1;
    ubr ^while.header1;
  ^if.then1:
    i32* %23 = getelementptr &(i32* %arr)[i32 %17];
    i32 %24 = load i32* %23;
    i32* %25 = getelementptr &(i32* %arr)[i32 %10];
    store i32* %25 with i32 %24;
    i32 %26 = add i32 %10, i32 1;
    ubr ^while.header2;
  ^while.header2:
    i32 %27 = phi [^b3, i32 %10] [^if.then1, i32 %26] [^while.body1, i32 %32];
    i1 %28 = icmp sgt i32 %17, i32 %27;
    cbr i1 %28(prob = 0.5), ^b4, ^b5;
  ^b4:
    i32* %29 = getelementptr &(i32* %arr)[i32 %27];
    i32 %30 = load i32* %29;
    i1 %31 = icmp sgt i32 %6, i32 %30;
    cbr i1 %31(prob = 0.97), ^while.body1, ^b5;
  ^b5:
    cbr i1 %28(prob = 0.5), ^if.then2, ^while.header;
  ^while.body1:
    i32 %32 = add i32 %27, i32 1;
    ubr ^while.header2;
  ^if.then2:
    i32* %33 = getelementptr &(i32* %arr)[i32 %27];
    i32 %34 = load i32* %33;
    i32* %35 = getelementptr &(i32* %arr)[i32 %17];
    store i32* %35 with i32 %34;
    i32 %36 = add i32 %17, i32 -1;
    ubr ^while.header;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [10 * i32]* %a = alloc [10 * i32];
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    i32 %10 = call (i32*, i32, i32) -> i32 @QuickSort(i32* %0, i32 0, i32 9);
    i1 %11 = icmp slt i32 %10, i32 10;
    cbr i1 %11(prob = 0.97), ^while.body, ^b;
  ^while.body:
    i32 %12 = phi [^entry, i32 %10] [^while.body, i32 %15];
    i32* %13 = getelementptr &([10 * i32]* %a)[i64 0][i32 %12];
    i32 %14 = load i32* %13;
    call (i32) -> void @putint(i32 %14);
    call (i32) -> void @putch(i32 10);
    i32 %15 = add i32 %12, i32 1;
    i1 %16 = icmp slt i32 %15, i32 10;
    cbr i1 %16(prob = 0.97), ^while.body, ^b;
  ^b:
    ret i32 0;
}
