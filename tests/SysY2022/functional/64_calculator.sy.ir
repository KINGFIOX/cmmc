internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal [10000 * i32]* @ints;
internal [10000 * i32]* @chas;
internal [10000 * i32]* @get;
internal [10000 * i32]* @get2;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = icmp neq i32 %0, i32 13;
    i1 %2 = icmp neq i32 %0, i32 10;
    i1 %3 = and i1 %1, i1 %2;
    [10000 * i32]* %4 = ptrcast [10000 * i32]* @get to [10000 * i32]*;
    i32* %5 = getelementptr &([10000 * i32]* %4)[i64 0][i64 0];
    [10000 * i32]* %6 = ptrcast [10000 * i32]* @chas to [10000 * i32]*;
    [10000 * i32]* %7 = ptrcast [10000 * i32]* @ints to [10000 * i32]*;
    [10000 * i32]* %8 = ptrcast [10000 * i32]* @get2 to [10000 * i32]*;
    cbr i1 %3(prob = 0.97), ^while.body, ^b;
  ^b:
    i32 %9 = phi [^entry, i32 0] [^while.body, i32 %17];
    ubr ^while.header;
  ^while.body:
    i32 %10 = phi [^entry, i32 %0] [^while.body, i32 %13];
    i32 %11 = phi [^entry, i32 0] [^while.body, i32 %17];
    i32* %12 = getelementptr &(i32* %5)[i32 %11];
    store i32* %12 with i32 %10;
    i32 %13 = call () -> i32 @getch();
    i1 %14 = icmp neq i32 %13, i32 13;
    i1 %15 = icmp neq i32 %13, i32 10;
    i1 %16 = and i1 %14, i1 %15;
    i32 %17 = add i32 %11, i32 1;
    cbr i1 %16(prob = 0.97), ^while.body, ^b;
  ^while.header:
    i32 %18 = phi [^b, i32 0] [^if.then, i32 %29] [^b15, i32 %290];
    i32 %19 = phi [^b, i32 1] [^if.then, i32 %28] [^b15, i32 %289];
    i32 %20 = phi [^b, i32 0] [^if.then, i32 %20] [^b15, i32 %286];
    i1 %21 = icmp sgt i32 %9, i32 %18;
    cbr i1 %21(prob = 0.97), ^while.body1, ^indirect;
  ^while.body1:
    i32* %22 = getelementptr &([10000 * i32]* %4)[i64 0][i32 %18];
    i32 %23 = load i32* %22;
    i32 %24 = add i32 %23, i32 -48;
    i1 %25 = icmp ult i32 %24, i32 10;
    cbr i1 %25(prob = 0.5), ^if.then, ^if.else;
  ^indirect:
    i1 %26 = icmp sgt i32 %20, i32 0;
    cbr i1 %26(prob = 0.97), ^super.header, ^b1;
  ^if.then:
    i32* %27 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %19];
    store i32* %27 with i32 %23;
    i32 %28 = add i32 %19, i32 1;
    i32 %29 = add i32 %18, i32 1;
    ubr ^while.header;
  ^if.else:
    i1 %30 = icmp eq i32 %23, i32 40;
    cbr i1 %30(prob = 0.5), ^entry1, ^b2;
  ^super.header:
    i32 %31 = phi [^indirect, i32 %20] [^entry2, i32 %33];
    i32 %32 = phi [^indirect, i32 %19] [^entry2, i32 %58];
    i32 %33 = add i32 %31, i32 -4;
    i1 %34 = icmp sgt i32 %33, i32 0;
    cbr i1 %34(prob = 0.89), ^entry2, ^super.header1;
  ^b1:
    i32 %35 = phi [^indirect, i32 %19] [^entry6, i32 %120];
    i32* %36 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %35];
    store i32* %36 with i32 64;
    i32* %37 = getelementptr &([10000 * i32]* %8)[i64 0][i64 1];
    i32 %38 = load i32* %37;
    i1 %39 = icmp neq i32 %38, i32 64;
    cbr i1 %39(prob = 0.97), ^while.body2, ^b3;
  ^entry1:
    i32 %40 = add i32 %20, i32 1;
    i32* %41 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %40];
    store i32* %41 with i32 40;
    ubr ^b2;
  ^entry2:
    i32* %42 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %31];
    i32 %43 = load i32* %42;
    i32* %44 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %32];
    store i32* %44 with i32 32;
    i32* %45 = getelementptr &(i32* %44)[i64 1];
    store i32* %45 with i32 %43;
    i32* %46 = getelementptr &(i32* %42)[i64 -1];
    i32 %47 = load i32* %46;
    i32* %48 = getelementptr &(i32* %44)[i64 2];
    store i32* %48 with i32 32;
    i32* %49 = getelementptr &(i32* %44)[i64 3];
    store i32* %49 with i32 %47;
    i32* %50 = getelementptr &(i32* %42)[i64 -2];
    i32 %51 = load i32* %50;
    i32* %52 = getelementptr &(i32* %44)[i64 4];
    store i32* %52 with i32 32;
    i32* %53 = getelementptr &(i32* %44)[i64 5];
    store i32* %53 with i32 %51;
    i32* %54 = getelementptr &(i32* %42)[i64 -3];
    i32 %55 = load i32* %54;
    i32* %56 = getelementptr &(i32* %44)[i64 6];
    store i32* %56 with i32 32;
    i32* %57 = getelementptr &(i32* %44)[i64 7];
    store i32* %57 with i32 %55;
    i32 %58 = add i32 %32, i32 8;
    ubr ^super.header;
  ^b2:
    i32 %59 = phi [^if.else, i32 %20] [^entry1, i32 %40];
    i32 %60 = load i32* %22;
    i1 %61 = icmp eq i32 %60, i32 94;
    cbr i1 %61(prob = 0.5), ^entry4, ^b4;
  ^super.header1:
    i32 %62 = phi [^super.header, i32 %31] [^entry3, i32 %64];
    i32 %63 = phi [^super.header, i32 %32] [^entry3, i32 %99];
    i32 %64 = add i32 %62, i32 -4;
    i1 %65 = icmp sgt i32 %64, i32 0;
    cbr i1 %65(prob = 0.89), ^entry3, ^entry6;
  ^while.body2:
    i32 %66 = phi [^b1, i32 1] [^b7, i32 %142];
    i32 %67 = phi [^b1, i32 0] [^b7, i32 %140];
    i32* %68 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %66];
    i32 %69 = load i32* %68;
    i1 %70 = icmp eq i32 %69, i32 43;
    i1 %71 = icmp eq i32 %69, i32 45;
    i1 %72 = or i1 %70, i1 %71;
    i1 %73 = icmp eq i32 %69, i32 42;
    i1 %74 = or i1 %72, i1 %73;
    i1 %75 = icmp eq i32 %69, i32 47;
    i1 %76 = or i1 %74, i1 %75;
    i1 %77 = icmp eq i32 %69, i32 37;
    i1 %78 = or i1 %76, i1 %77;
    i1 %79 = icmp eq i32 %69, i32 94;
    i1 %80 = or i1 %78, i1 %79;
    cbr i1 %80(prob = 0.5), ^entry5, ^if.else1;
  ^b3:
    i32* %81 = getelementptr &([10000 * i32]* %7)[i64 0][i64 1];
    i32 %82 = load i32* %81;
    call (i32) -> void @putint(i32 %82);
    ret i32 0;
  ^entry3:
    i32* %83 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %62];
    i32 %84 = load i32* %83;
    i32* %85 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %63];
    store i32* %85 with i32 32;
    i32* %86 = getelementptr &(i32* %85)[i64 1];
    store i32* %86 with i32 %84;
    i32* %87 = getelementptr &(i32* %83)[i64 -1];
    i32 %88 = load i32* %87;
    i32* %89 = getelementptr &(i32* %85)[i64 2];
    store i32* %89 with i32 32;
    i32* %90 = getelementptr &(i32* %85)[i64 3];
    store i32* %90 with i32 %88;
    i32* %91 = getelementptr &(i32* %83)[i64 -2];
    i32 %92 = load i32* %91;
    i32* %93 = getelementptr &(i32* %85)[i64 4];
    store i32* %93 with i32 32;
    i32* %94 = getelementptr &(i32* %85)[i64 5];
    store i32* %94 with i32 %92;
    i32* %95 = getelementptr &(i32* %83)[i64 -3];
    i32 %96 = load i32* %95;
    i32* %97 = getelementptr &(i32* %85)[i64 6];
    store i32* %97 with i32 32;
    i32* %98 = getelementptr &(i32* %85)[i64 7];
    store i32* %98 with i32 %96;
    i32 %99 = add i32 %63, i32 8;
    ubr ^super.header1;
  ^entry4:
    i32 %100 = add i32 %59, i32 1;
    i32* %101 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %100];
    store i32* %101 with i32 94;
    ubr ^b4;
  ^entry5:
    i32* %102 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %67];
    i32 %103 = load i32* %102;
    i32* %104 = getelementptr &(i32* %102)[i64 -1];
    i32 %105 = load i32* %104;
    i32 %106 = add i32 %103, i32 %105;
    i32 %107 = select i1 %70 ? i32 %106 : i32 0;
    i32 %108 = sub i32 %105, i32 %103;
    i32 %109 = select i1 %71 ? i32 %108 : i32 %107;
    i32 %110 = mul i32 %103, i32 %105;
    i32 %111 = select i1 %73 ? i32 %110 : i32 %109;
    cbr i1 %75(prob = 0.5), ^if.then1, ^b5;
  ^entry6:
    i32 %112 = phi [^super.header1, i32 %62] [^entry6, i32 %118];
    i32 %113 = phi [^super.header1, i32 %63] [^entry6, i32 %120];
    i32* %114 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %112];
    i32 %115 = load i32* %114;
    i32* %116 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %113];
    store i32* %116 with i32 32;
    i32* %117 = getelementptr &(i32* %116)[i64 1];
    store i32* %117 with i32 %115;
    i32 %118 = add i32 %112, i32 -1;
    i1 %119 = icmp sgt i32 %118, i32 0;
    i32 %120 = add i32 %113, i32 2;
    cbr i1 %119(prob = 0.97), ^entry6, ^b1;
  ^b4:
    i32 %121 = phi [^b2, i32 %59] [^entry4, i32 %100];
    i1 %122 = icmp eq i32 %60, i32 41;
    cbr i1 %122(prob = 0.5), ^entry7, ^b6;
  ^if.else1:
    i1 %123 = icmp neq i32 %69, i32 32;
    cbr i1 %123(prob = 0.5), ^if.then2, ^b7;
  ^if.then1:
    i32 %124 = sdiv i32 %105, i32 %103;
    ubr ^b5;
  ^entry7:
    i32* %125 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %121];
    i32 %126 = load i32* %125;
    i32 %127 = add i32 %121, i32 -1;
    ubr ^while.header1;
  ^if.then2:
    i32 %128 = add i32 %67, i32 1;
    i32* %129 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %128];
    i32 %130 = add i32 %69, i32 -48;
    store i32* %129 with i32 %130;
    i32 %131 = add i32 %66, i32 1;
    i32* %132 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %131];
    i32 %133 = load i32* %132;
    i1 %134 = icmp neq i32 %133, i32 32;
    cbr i1 %134(prob = 0.97), ^while.body3, ^b8;
  ^b5:
    i32 %135 = phi [^entry5, i32 %111] [^if.then1, i32 %124];
    cbr i1 %77(prob = 0.5), ^if.then3, ^b9;
  ^b6:
    i32 %136 = phi [^b4, i32 %19] [^while.header1, i32 %151];
    i32 %137 = phi [^b4, i32 %121] [^while.header1, i32 %152];
    i32 %138 = load i32* %22;
    i1 %139 = icmp eq i32 %138, i32 43;
    cbr i1 %139(prob = 0.5), ^while.header2, ^b10;
  ^b7:
    i32 %140 = phi [^if.else1, i32 %67] [^b8, i32 %128] [^b11, i32 %196];
    i32 %141 = phi [^if.else1, i32 %66] [^b8, i32 %149] [^b11, i32 %66];
    i32 %142 = add i32 %141, i32 1;
    i32* %143 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %142];
    i32 %144 = load i32* %143;
    i1 %145 = icmp neq i32 %144, i32 64;
    cbr i1 %145(prob = 0.97), ^while.body2, ^b3;
  ^if.then3:
    i32 %146 = srem i32 %105, i32 %103;
    ubr ^b9;
  ^b8:
    i32 %147 = phi [^if.then2, i32 1] [^while.body3, i32 %166];
    i32 %148 = add i32 %66, i32 -1;
    i32 %149 = add i32 %147, i32 %148;
    ubr ^b7;
  ^while.header1:
    i32 %150 = phi [^entry7, i32 %126] [^while.body4, i32 %192];
    i32 %151 = phi [^entry7, i32 %19] [^while.body4, i32 %193];
    i32 %152 = phi [^entry7, i32 %127] [^while.body4, i32 %194];
    i1 %153 = icmp neq i32 %150, i32 40;
    cbr i1 %153(prob = 0.97), ^while.body4, ^b6;
  ^while.body3:
    i32 %154 = phi [^if.then2, i32 %130] [^while.body3, i32 %161];
    i32 %155 = phi [^if.then2, i32 1] [^while.body3, i32 %166];
    i32 %156 = add i32 %66, i32 %155;
    i32* %157 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %156];
    i32 %158 = load i32* %157;
    i32 %159 = mul i32 %154, i32 10;
    i32 %160 = add i32 %159, i32 -48;
    i32 %161 = add i32 %158, i32 %160;
    store i32* %129 with i32 %161;
    i32 %162 = add i32 %131, i32 %155;
    i32* %163 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %162];
    i32 %164 = load i32* %163;
    i1 %165 = icmp neq i32 %164, i32 32;
    i32 %166 = add i32 %155, i32 1;
    cbr i1 %165(prob = 0.97), ^while.body3, ^b8;
  ^while.header2:
    i32 %167 = phi [^b6, i32 %136] [^entry9, i32 %207];
    i32 %168 = phi [^b6, i32 %137] [^entry9, i32 %205];
    i32* %169 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %168];
    i32 %170 = load i32* %169;
    i1 %171 = icmp eq i32 %170, i32 43;
    i1 %172 = icmp eq i32 %170, i32 45;
    i1 %173 = or i1 %171, i1 %172;
    i1 %174 = icmp eq i32 %170, i32 42;
    i1 %175 = or i1 %173, i1 %174;
    i1 %176 = icmp eq i32 %170, i32 47;
    i1 %177 = or i1 %175, i1 %176;
    i1 %178 = icmp eq i32 %170, i32 37;
    i1 %179 = or i1 %177, i1 %178;
    i1 %180 = icmp eq i32 %170, i32 94;
    i1 %181 = or i1 %179, i1 %180;
    cbr i1 %181(prob = 0.97), ^entry9, ^entry8;
  ^b9:
    i32 %182 = phi [^b5, i32 %135] [^if.then3, i32 %146];
    i32 %183 = load i32* %68;
    i1 %184 = icmp eq i32 %183, i32 94;
    cbr i1 %184(prob = 0.5), ^entry10, ^b11;
  ^b10:
    i32 %185 = phi [^b6, i32 %138] [^entry8, i32 %202];
    i32 %186 = phi [^b6, i32 %136] [^entry8, i32 %198];
    i32 %187 = phi [^b6, i32 %137] [^entry8, i32 %200];
    i1 %188 = icmp eq i32 %185, i32 45;
    cbr i1 %188(prob = 0.5), ^while.header3, ^b12;
  ^while.body4:
    i32* %189 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %151];
    store i32* %189 with i32 32;
    i32* %190 = getelementptr &(i32* %189)[i64 1];
    store i32* %190 with i32 %150;
    i32* %191 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %152];
    i32 %192 = load i32* %191;
    i32 %193 = add i32 %151, i32 2;
    i32 %194 = add i32 %152, i32 -1;
    ubr ^while.header1;
  ^b11:
    i32 %195 = phi [^b9, i32 %182] [^entry10, i32 1] [^while.body5, i32 %230];
    i32 %196 = add i32 %67, i32 -1;
    i32* %197 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %196];
    store i32* %197 with i32 %195;
    ubr ^b7;
  ^entry8:
    i32 %198 = phi [^while.header2, i32 %167] [^entry9, i32 %207];
    i32 %199 = phi [^while.header2, i32 %168] [^entry9, i32 %205];
    i32 %200 = add i32 %199, i32 1;
    i32* %201 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %200];
    store i32* %201 with i32 43;
    i32 %202 = load i32* %22;
    ubr ^b10;
  ^entry9:
    i32* %203 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %167];
    store i32* %203 with i32 32;
    i32* %204 = getelementptr &(i32* %203)[i64 1];
    store i32* %204 with i32 %170;
    i32 %205 = add i32 %168, i32 -1;
    i1 %206 = icmp eq i32 %205, i32 0;
    i32 %207 = add i32 %167, i32 2;
    cbr i1 %206(prob = 0.5), ^entry8, ^while.header2;
  ^entry10:
    i1 %208 = icmp neq i32 %103, i32 0;
    cbr i1 %208(prob = 0.97), ^while.body5, ^b11;
  ^while.header3:
    i32 %209 = phi [^b10, i32 %186] [^entry12, i32 %241];
    i32 %210 = phi [^b10, i32 %187] [^entry12, i32 %239];
    i32* %211 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %210];
    i32 %212 = load i32* %211;
    i1 %213 = icmp eq i32 %212, i32 43;
    i1 %214 = icmp eq i32 %212, i32 45;
    i1 %215 = or i1 %213, i1 %214;
    i1 %216 = icmp eq i32 %212, i32 42;
    i1 %217 = or i1 %215, i1 %216;
    i1 %218 = icmp eq i32 %212, i32 47;
    i1 %219 = or i1 %217, i1 %218;
    i1 %220 = icmp eq i32 %212, i32 37;
    i1 %221 = or i1 %219, i1 %220;
    i1 %222 = icmp eq i32 %212, i32 94;
    i1 %223 = or i1 %221, i1 %222;
    cbr i1 %223(prob = 0.97), ^entry12, ^entry11;
  ^b12:
    i32 %224 = phi [^b10, i32 %186] [^entry11, i32 %233];
    i32 %225 = phi [^b10, i32 %187] [^entry11, i32 %235];
    i32 %226 = load i32* %22;
    i1 %227 = icmp eq i32 %226, i32 42;
    cbr i1 %227(prob = 0.5), ^while.header4, ^b13;
  ^while.body5:
    i32 %228 = phi [^entry10, i32 %103] [^while.body5, i32 %231];
    i32 %229 = phi [^entry10, i32 1] [^while.body5, i32 %230];
    i32 %230 = mul i32 %105, i32 %229;
    i32 %231 = add i32 %228, i32 -1;
    i1 %232 = icmp neq i32 %231, i32 0;
    cbr i1 %232(prob = 0.97), ^while.body5, ^b11;
  ^entry11:
    i32 %233 = phi [^while.header3, i32 %209] [^entry12, i32 %241];
    i32 %234 = phi [^while.header3, i32 %210] [^entry12, i32 %239];
    i32 %235 = add i32 %234, i32 1;
    i32* %236 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %235];
    store i32* %236 with i32 45;
    ubr ^b12;
  ^entry12:
    i32* %237 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %209];
    store i32* %237 with i32 32;
    i32* %238 = getelementptr &(i32* %237)[i64 1];
    store i32* %238 with i32 %212;
    i32 %239 = add i32 %210, i32 -1;
    i1 %240 = icmp eq i32 %239, i32 0;
    i32 %241 = add i32 %209, i32 2;
    cbr i1 %240(prob = 0.5), ^entry11, ^while.header3;
  ^while.header4:
    i32 %242 = phi [^b12, i32 %224] [^entry14, i32 %266];
    i32 %243 = phi [^b12, i32 %225] [^entry14, i32 %264];
    i32* %244 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %243];
    i32 %245 = load i32* %244;
    i1 %246 = icmp eq i32 %245, i32 42;
    i1 %247 = icmp eq i32 %245, i32 47;
    i1 %248 = or i1 %246, i1 %247;
    i1 %249 = icmp eq i32 %245, i32 37;
    i1 %250 = or i1 %248, i1 %249;
    i1 %251 = icmp eq i32 %245, i32 94;
    i1 %252 = or i1 %250, i1 %251;
    cbr i1 %252(prob = 0.97), ^entry14, ^entry13;
  ^b13:
    i32 %253 = phi [^b12, i32 %226] [^entry13, i32 %261];
    i32 %254 = phi [^b12, i32 %224] [^entry13, i32 %257];
    i32 %255 = phi [^b12, i32 %225] [^entry13, i32 %259];
    i1 %256 = icmp eq i32 %253, i32 47;
    cbr i1 %256(prob = 0.5), ^while.header5, ^b14;
  ^entry13:
    i32 %257 = phi [^while.header4, i32 %242] [^entry14, i32 %266];
    i32 %258 = phi [^while.header4, i32 %243] [^entry14, i32 %264];
    i32 %259 = add i32 %258, i32 1;
    i32* %260 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %259];
    store i32* %260 with i32 42;
    i32 %261 = load i32* %22;
    ubr ^b13;
  ^entry14:
    i32* %262 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %242];
    store i32* %262 with i32 32;
    i32* %263 = getelementptr &(i32* %262)[i64 1];
    store i32* %263 with i32 %245;
    i32 %264 = add i32 %243, i32 -1;
    i1 %265 = icmp eq i32 %264, i32 0;
    i32 %266 = add i32 %242, i32 2;
    cbr i1 %265(prob = 0.5), ^entry13, ^while.header4;
  ^while.header5:
    i32 %267 = phi [^b13, i32 %254] [^entry16, i32 %295];
    i32 %268 = phi [^b13, i32 %255] [^entry16, i32 %293];
    i32* %269 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %268];
    i32 %270 = load i32* %269;
    i1 %271 = icmp eq i32 %270, i32 42;
    i1 %272 = icmp eq i32 %270, i32 47;
    i1 %273 = or i1 %271, i1 %272;
    i1 %274 = icmp eq i32 %270, i32 37;
    i1 %275 = or i1 %273, i1 %274;
    i1 %276 = icmp eq i32 %270, i32 94;
    i1 %277 = or i1 %275, i1 %276;
    cbr i1 %277(prob = 0.97), ^entry16, ^entry15;
  ^b14:
    i32 %278 = phi [^b13, i32 %254] [^entry15, i32 %282];
    i32 %279 = phi [^b13, i32 %255] [^entry15, i32 %284];
    i32 %280 = load i32* %22;
    i1 %281 = icmp eq i32 %280, i32 37;
    cbr i1 %281(prob = 0.5), ^while.header6, ^b15;
  ^entry15:
    i32 %282 = phi [^while.header5, i32 %267] [^entry16, i32 %295];
    i32 %283 = phi [^while.header5, i32 %268] [^entry16, i32 %293];
    i32 %284 = add i32 %283, i32 1;
    i32* %285 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %284];
    store i32* %285 with i32 47;
    ubr ^b14;
  ^b15:
    i32 %286 = phi [^b14, i32 %279] [^entry17, i32 %309];
    i32 %287 = phi [^b14, i32 %278] [^entry17, i32 %307];
    i32* %288 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %287];
    store i32* %288 with i32 32;
    i32 %289 = add i32 %287, i32 1;
    i32 %290 = add i32 %18, i32 1;
    ubr ^while.header;
  ^entry16:
    i32* %291 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %267];
    store i32* %291 with i32 32;
    i32* %292 = getelementptr &(i32* %291)[i64 1];
    store i32* %292 with i32 %270;
    i32 %293 = add i32 %268, i32 -1;
    i1 %294 = icmp eq i32 %293, i32 0;
    i32 %295 = add i32 %267, i32 2;
    cbr i1 %294(prob = 0.5), ^entry15, ^while.header5;
  ^while.header6:
    i32 %296 = phi [^b14, i32 %278] [^entry18, i32 %315];
    i32 %297 = phi [^b14, i32 %279] [^entry18, i32 %313];
    i32* %298 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %297];
    i32 %299 = load i32* %298;
    i1 %300 = icmp eq i32 %299, i32 42;
    i1 %301 = icmp eq i32 %299, i32 47;
    i1 %302 = or i1 %300, i1 %301;
    i1 %303 = icmp eq i32 %299, i32 37;
    i1 %304 = or i1 %302, i1 %303;
    i1 %305 = icmp eq i32 %299, i32 94;
    i1 %306 = or i1 %304, i1 %305;
    cbr i1 %306(prob = 0.97), ^entry18, ^entry17;
  ^entry17:
    i32 %307 = phi [^while.header6, i32 %296] [^entry18, i32 %315];
    i32 %308 = phi [^while.header6, i32 %297] [^entry18, i32 %313];
    i32 %309 = add i32 %308, i32 1;
    i32* %310 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %309];
    store i32* %310 with i32 37;
    ubr ^b15;
  ^entry18:
    i32* %311 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %296];
    store i32* %311 with i32 32;
    i32* %312 = getelementptr &(i32* %311)[i64 1];
    store i32* %312 with i32 %299;
    i32 %313 = add i32 %297, i32 -1;
    i1 %314 = icmp eq i32 %313, i32 0;
    i32 %315 = add i32 %296, i32 2;
    cbr i1 %314(prob = 0.5), ^entry17, ^while.header6;
}
