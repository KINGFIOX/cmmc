internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal [10000 * i32]* @ints;
internal [10000 * i32]* @chas;
internal [10000 * i32]* @get;
internal [10000 * i32]* @get2;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    [10000 * i32]* %1 = ptrcast [10000 * i32]* @get to [10000 * i32]*;
    i32* %2 = getelementptr &([10000 * i32]* %1)[i64 0][i64 0];
    [10000 * i32]* %3 = ptrcast [10000 * i32]* @chas to [10000 * i32]*;
    [10000 * i32]* %4 = ptrcast [10000 * i32]* @ints to [10000 * i32]*;
    [10000 * i32]* %5 = ptrcast [10000 * i32]* @get2 to [10000 * i32]*;
    ubr ^while.header;
  ^while.header:
    i32 %6 = phi [^entry, i32 0] [^while.body, i32 %13];
    i32 %7 = phi [^entry, i32 %0] [^while.body, i32 %12];
    i1 %8 = scmp neq i32 %7, i32 13;
    cbr i1 %8(prob = 0.5), ^b, ^b1;
  ^b:
    i1 %9 = scmp neq i32 %7, i32 10;
    ubr ^b1;
  ^b1:
    i1 %10 = phi [^while.header, i1 false] [^b, i1 %9];
    cbr i1 %10(prob = 0.97), ^while.body, ^while.header1;
  ^while.body:
    i32* %11 = getelementptr &(i32* %2)[i32 %6];
    store i32* %11 with i32 %7;
    i32 %12 = call () -> i32 @getch();
    i32 %13 = add i32 %6, i32 1;
    ubr ^while.header;
  ^while.header1:
    i32 %14 = phi [^b1, i32 1] [^b6, i32 %112];
    i32 %15 = phi [^b1, i32 0] [^b6, i32 %113];
    i32 %16 = phi [^b1, i32 0] [^b6, i32 %114];
    i1 %17 = scmp lt i32 %16, i32 %6;
    cbr i1 %17(prob = 0.97), ^while.body1, ^indirect;
  ^while.body1:
    i32* %18 = getelementptr &([10000 * i32]* %1)[i64 0][i32 %16];
    i32 %19 = load i32* %18;
    i1 %20 = scmp gt i32 %19, i32 47;
    cbr i1 %20(prob = 0.5), ^b2, ^b3;
  ^indirect:
    i1 %21 = scmp gt i32 %15, i32 0;
    cbr i1 %21(prob = 0.97), ^super.header, ^b4;
  ^b2:
    i1 %22 = scmp le i32 %19, i32 57;
    ubr ^b3;
  ^b3:
    i1 %23 = phi [^while.body1, i1 false] [^b2, i1 %22];
    cbr i1 %23(prob = 0.5), ^if.then, ^if.else;
  ^super.header:
    i32 %24 = phi [^indirect, i32 %15] [^entry1, i32 %26];
    i32 %25 = phi [^indirect, i32 %14] [^entry1, i32 %99];
    i32 %26 = add i32 %24, i32 -16;
    i1 %27 = scmp gt i32 %26, i32 0;
    cbr i1 %27(prob = 0.67), ^entry1, ^super.header1;
  ^b4:
    i32 %28 = phi [^indirect, i32 %14] [^entry4, i32 %192];
    i32* %29 = getelementptr &([10000 * i32]* %5)[i64 0][i32 %28];
    store i32* %29 with i32 64;
    i32* %30 = getelementptr &([10000 * i32]* %5)[i64 0][i64 1];
    i32 %31 = load i32* %30;
    i1 %32 = scmp neq i32 %31, i32 64;
    cbr i1 %32(prob = 0.97), ^while.body2, ^b5;
  ^if.then:
    i32* %33 = getelementptr &([10000 * i32]* %5)[i64 0][i32 %14];
    store i32* %33 with i32 %19;
    i32 %34 = add i32 %14, i32 1;
    ubr ^b6;
  ^entry1:
    i32* %35 = getelementptr &([10000 * i32]* %3)[i64 0][i32 %24];
    i32 %36 = load i32* %35;
    i32* %37 = getelementptr &([10000 * i32]* %5)[i64 0][i32 %25];
    store i32* %37 with i32 32;
    i32* %38 = getelementptr &(i32* %37)[i64 1];
    store i32* %38 with i32 %36;
    i32* %39 = getelementptr &(i32* %35)[i64 -1];
    i32 %40 = load i32* %39;
    i32* %41 = getelementptr &(i32* %37)[i64 2];
    store i32* %41 with i32 32;
    i32* %42 = getelementptr &(i32* %37)[i64 3];
    store i32* %42 with i32 %40;
    i32* %43 = getelementptr &(i32* %35)[i64 -2];
    i32 %44 = load i32* %43;
    i32* %45 = getelementptr &(i32* %37)[i64 4];
    store i32* %45 with i32 32;
    i32* %46 = getelementptr &(i32* %37)[i64 5];
    store i32* %46 with i32 %44;
    i32* %47 = getelementptr &(i32* %35)[i64 -3];
    i32 %48 = load i32* %47;
    i32* %49 = getelementptr &(i32* %37)[i64 6];
    store i32* %49 with i32 32;
    i32* %50 = getelementptr &(i32* %37)[i64 7];
    store i32* %50 with i32 %48;
    i32* %51 = getelementptr &(i32* %35)[i64 -4];
    i32 %52 = load i32* %51;
    i32* %53 = getelementptr &(i32* %37)[i64 8];
    store i32* %53 with i32 32;
    i32* %54 = getelementptr &(i32* %37)[i64 9];
    store i32* %54 with i32 %52;
    i32* %55 = getelementptr &(i32* %35)[i64 -5];
    i32 %56 = load i32* %55;
    i32* %57 = getelementptr &(i32* %37)[i64 10];
    store i32* %57 with i32 32;
    i32* %58 = getelementptr &(i32* %37)[i64 11];
    store i32* %58 with i32 %56;
    i32* %59 = getelementptr &(i32* %35)[i64 -6];
    i32 %60 = load i32* %59;
    i32* %61 = getelementptr &(i32* %37)[i64 12];
    store i32* %61 with i32 32;
    i32* %62 = getelementptr &(i32* %37)[i64 13];
    store i32* %62 with i32 %60;
    i32* %63 = getelementptr &(i32* %35)[i64 -7];
    i32 %64 = load i32* %63;
    i32* %65 = getelementptr &(i32* %37)[i64 14];
    store i32* %65 with i32 32;
    i32* %66 = getelementptr &(i32* %37)[i64 15];
    store i32* %66 with i32 %64;
    i32* %67 = getelementptr &(i32* %35)[i64 -8];
    i32 %68 = load i32* %67;
    i32* %69 = getelementptr &(i32* %37)[i64 16];
    store i32* %69 with i32 32;
    i32* %70 = getelementptr &(i32* %37)[i64 17];
    store i32* %70 with i32 %68;
    i32* %71 = getelementptr &(i32* %35)[i64 -9];
    i32 %72 = load i32* %71;
    i32* %73 = getelementptr &(i32* %37)[i64 18];
    store i32* %73 with i32 32;
    i32* %74 = getelementptr &(i32* %37)[i64 19];
    store i32* %74 with i32 %72;
    i32* %75 = getelementptr &(i32* %35)[i64 -10];
    i32 %76 = load i32* %75;
    i32* %77 = getelementptr &(i32* %37)[i64 20];
    store i32* %77 with i32 32;
    i32* %78 = getelementptr &(i32* %37)[i64 21];
    store i32* %78 with i32 %76;
    i32* %79 = getelementptr &(i32* %35)[i64 -11];
    i32 %80 = load i32* %79;
    i32* %81 = getelementptr &(i32* %37)[i64 22];
    store i32* %81 with i32 32;
    i32* %82 = getelementptr &(i32* %37)[i64 23];
    store i32* %82 with i32 %80;
    i32* %83 = getelementptr &(i32* %35)[i64 -12];
    i32 %84 = load i32* %83;
    i32* %85 = getelementptr &(i32* %37)[i64 24];
    store i32* %85 with i32 32;
    i32* %86 = getelementptr &(i32* %37)[i64 25];
    store i32* %86 with i32 %84;
    i32* %87 = getelementptr &(i32* %35)[i64 -13];
    i32 %88 = load i32* %87;
    i32* %89 = getelementptr &(i32* %37)[i64 26];
    store i32* %89 with i32 32;
    i32* %90 = getelementptr &(i32* %37)[i64 27];
    store i32* %90 with i32 %88;
    i32* %91 = getelementptr &(i32* %35)[i64 -14];
    i32 %92 = load i32* %91;
    i32* %93 = getelementptr &(i32* %37)[i64 28];
    store i32* %93 with i32 32;
    i32* %94 = getelementptr &(i32* %37)[i64 29];
    store i32* %94 with i32 %92;
    i32* %95 = getelementptr &(i32* %35)[i64 -15];
    i32 %96 = load i32* %95;
    i32* %97 = getelementptr &(i32* %37)[i64 30];
    store i32* %97 with i32 32;
    i32* %98 = getelementptr &(i32* %37)[i64 31];
    store i32* %98 with i32 %96;
    i32 %99 = add i32 %25, i32 32;
    ubr ^super.header;
  ^if.else:
    i1 %100 = scmp eq i32 %19, i32 40;
    cbr i1 %100(prob = 0.5), ^entry3, ^b9;
  ^super.header1:
    i32 %101 = phi [^super.header, i32 %24] [^entry2, i32 %103];
    i32 %102 = phi [^super.header, i32 %25] [^entry2, i32 %179];
    i32 %103 = add i32 %101, i32 -16;
    i1 %104 = scmp gt i32 %103, i32 0;
    cbr i1 %104(prob = 0.67), ^entry2, ^entry4;
  ^while.body2:
    i32 %105 = phi [^b4, i32 0] [^b31, i32 %283];
    i32 %106 = phi [^b4, i32 1] [^b31, i32 %285];
    i32* %107 = getelementptr &([10000 * i32]* %5)[i64 0][i32 %106];
    i32 %108 = load i32* %107;
    i1 %109 = scmp eq i32 %108, i32 43;
    cbr i1 %109(prob = 0.5), ^b8, ^b7;
  ^b5:
    i32* %110 = getelementptr &([10000 * i32]* %4)[i64 0][i64 1];
    i32 %111 = load i32* %110;
    call (i32) -> void @putint(i32 %111);
    ret i32 0;
  ^b6:
    i32 %112 = phi [^if.then, i32 %34] [^b47, i32 %337];
    i32 %113 = phi [^if.then, i32 %15] [^b47, i32 %334];
    i32 %114 = add i32 %16, i32 1;
    ubr ^while.header1;
  ^entry2:
    i32* %115 = getelementptr &([10000 * i32]* %3)[i64 0][i32 %101];
    i32 %116 = load i32* %115;
    i32* %117 = getelementptr &([10000 * i32]* %5)[i64 0][i32 %102];
    store i32* %117 with i32 32;
    i32* %118 = getelementptr &(i32* %117)[i64 1];
    store i32* %118 with i32 %116;
    i32* %119 = getelementptr &(i32* %115)[i64 -1];
    i32 %120 = load i32* %119;
    i32* %121 = getelementptr &(i32* %117)[i64 2];
    store i32* %121 with i32 32;
    i32* %122 = getelementptr &(i32* %117)[i64 3];
    store i32* %122 with i32 %120;
    i32* %123 = getelementptr &(i32* %115)[i64 -2];
    i32 %124 = load i32* %123;
    i32* %125 = getelementptr &(i32* %117)[i64 4];
    store i32* %125 with i32 32;
    i32* %126 = getelementptr &(i32* %117)[i64 5];
    store i32* %126 with i32 %124;
    i32* %127 = getelementptr &(i32* %115)[i64 -3];
    i32 %128 = load i32* %127;
    i32* %129 = getelementptr &(i32* %117)[i64 6];
    store i32* %129 with i32 32;
    i32* %130 = getelementptr &(i32* %117)[i64 7];
    store i32* %130 with i32 %128;
    i32* %131 = getelementptr &(i32* %115)[i64 -4];
    i32 %132 = load i32* %131;
    i32* %133 = getelementptr &(i32* %117)[i64 8];
    store i32* %133 with i32 32;
    i32* %134 = getelementptr &(i32* %117)[i64 9];
    store i32* %134 with i32 %132;
    i32* %135 = getelementptr &(i32* %115)[i64 -5];
    i32 %136 = load i32* %135;
    i32* %137 = getelementptr &(i32* %117)[i64 10];
    store i32* %137 with i32 32;
    i32* %138 = getelementptr &(i32* %117)[i64 11];
    store i32* %138 with i32 %136;
    i32* %139 = getelementptr &(i32* %115)[i64 -6];
    i32 %140 = load i32* %139;
    i32* %141 = getelementptr &(i32* %117)[i64 12];
    store i32* %141 with i32 32;
    i32* %142 = getelementptr &(i32* %117)[i64 13];
    store i32* %142 with i32 %140;
    i32* %143 = getelementptr &(i32* %115)[i64 -7];
    i32 %144 = load i32* %143;
    i32* %145 = getelementptr &(i32* %117)[i64 14];
    store i32* %145 with i32 32;
    i32* %146 = getelementptr &(i32* %117)[i64 15];
    store i32* %146 with i32 %144;
    i32* %147 = getelementptr &(i32* %115)[i64 -8];
    i32 %148 = load i32* %147;
    i32* %149 = getelementptr &(i32* %117)[i64 16];
    store i32* %149 with i32 32;
    i32* %150 = getelementptr &(i32* %117)[i64 17];
    store i32* %150 with i32 %148;
    i32* %151 = getelementptr &(i32* %115)[i64 -9];
    i32 %152 = load i32* %151;
    i32* %153 = getelementptr &(i32* %117)[i64 18];
    store i32* %153 with i32 32;
    i32* %154 = getelementptr &(i32* %117)[i64 19];
    store i32* %154 with i32 %152;
    i32* %155 = getelementptr &(i32* %115)[i64 -10];
    i32 %156 = load i32* %155;
    i32* %157 = getelementptr &(i32* %117)[i64 20];
    store i32* %157 with i32 32;
    i32* %158 = getelementptr &(i32* %117)[i64 21];
    store i32* %158 with i32 %156;
    i32* %159 = getelementptr &(i32* %115)[i64 -11];
    i32 %160 = load i32* %159;
    i32* %161 = getelementptr &(i32* %117)[i64 22];
    store i32* %161 with i32 32;
    i32* %162 = getelementptr &(i32* %117)[i64 23];
    store i32* %162 with i32 %160;
    i32* %163 = getelementptr &(i32* %115)[i64 -12];
    i32 %164 = load i32* %163;
    i32* %165 = getelementptr &(i32* %117)[i64 24];
    store i32* %165 with i32 32;
    i32* %166 = getelementptr &(i32* %117)[i64 25];
    store i32* %166 with i32 %164;
    i32* %167 = getelementptr &(i32* %115)[i64 -13];
    i32 %168 = load i32* %167;
    i32* %169 = getelementptr &(i32* %117)[i64 26];
    store i32* %169 with i32 32;
    i32* %170 = getelementptr &(i32* %117)[i64 27];
    store i32* %170 with i32 %168;
    i32* %171 = getelementptr &(i32* %115)[i64 -14];
    i32 %172 = load i32* %171;
    i32* %173 = getelementptr &(i32* %117)[i64 28];
    store i32* %173 with i32 32;
    i32* %174 = getelementptr &(i32* %117)[i64 29];
    store i32* %174 with i32 %172;
    i32* %175 = getelementptr &(i32* %115)[i64 -15];
    i32 %176 = load i32* %175;
    i32* %177 = getelementptr &(i32* %117)[i64 30];
    store i32* %177 with i32 32;
    i32* %178 = getelementptr &(i32* %117)[i64 31];
    store i32* %178 with i32 %176;
    i32 %179 = add i32 %102, i32 32;
    ubr ^super.header1;
  ^entry3:
    i32 %180 = add i32 %15, i32 1;
    i32* %181 = getelementptr &([10000 * i32]* %3)[i64 0][i32 %180];
    store i32* %181 with i32 40;
    ubr ^b9;
  ^b7:
    i1 %182 = scmp eq i32 %108, i32 45;
    ubr ^b8;
  ^b8:
    i1 %183 = phi [^while.body2, i1 true] [^b7, i1 %182];
    cbr i1 %183(prob = 0.5), ^b11, ^b10;
  ^entry4:
    i32 %184 = phi [^super.header1, i32 %101] [^entry4, i32 %190];
    i32 %185 = phi [^super.header1, i32 %102] [^entry4, i32 %192];
    i32* %186 = getelementptr &([10000 * i32]* %3)[i64 0][i32 %184];
    i32 %187 = load i32* %186;
    i32* %188 = getelementptr &([10000 * i32]* %5)[i64 0][i32 %185];
    store i32* %188 with i32 32;
    i32* %189 = getelementptr &(i32* %188)[i64 1];
    store i32* %189 with i32 %187;
    i32 %190 = add i32 %184, i32 -1;
    i1 %191 = scmp gt i32 %190, i32 0;
    i32 %192 = add i32 %185, i32 2;
    cbr i1 %191(prob = 0.97), ^entry4, ^b4;
  ^b9:
    i32 %193 = phi [^if.else, i32 %15] [^entry3, i32 %180];
    i32 %194 = load i32* %18;
    i1 %195 = scmp eq i32 %194, i32 94;
    cbr i1 %195(prob = 0.5), ^entry5, ^b12;
  ^entry5:
    i32 %196 = add i32 %193, i32 1;
    i32* %197 = getelementptr &([10000 * i32]* %3)[i64 0][i32 %196];
    store i32* %197 with i32 94;
    ubr ^b12;
  ^b10:
    i32 %198 = load i32* %107;
    i1 %199 = scmp eq i32 %198, i32 42;
    ubr ^b11;
  ^b11:
    i1 %200 = phi [^b8, i1 true] [^b10, i1 %199];
    cbr i1 %200(prob = 0.5), ^b14, ^b13;
  ^b12:
    i32 %201 = phi [^b9, i32 %193] [^entry5, i32 %196];
    i1 %202 = scmp eq i32 %194, i32 41;
    cbr i1 %202(prob = 0.5), ^entry6, ^b15;
  ^b13:
    i32 %203 = load i32* %107;
    i1 %204 = scmp eq i32 %203, i32 47;
    ubr ^b14;
  ^entry6:
    i32* %205 = getelementptr &([10000 * i32]* %3)[i64 0][i32 %201];
    i32 %206 = load i32* %205;
    i32 %207 = add i32 %201, i32 -1;
    ubr ^while.header2;
  ^b14:
    i1 %208 = phi [^b11, i1 true] [^b13, i1 %204];
    cbr i1 %208(prob = 0.5), ^b17, ^b16;
  ^b15:
    i32 %209 = phi [^b12, i32 %14] [^while.header2, i32 %218];
    i32 %210 = phi [^b12, i32 %201] [^while.header2, i32 %216];
    i32 %211 = load i32* %18;
    i1 %212 = scmp eq i32 %211, i32 43;
    cbr i1 %212(prob = 0.5), ^while.header3, ^b18;
  ^b16:
    i32 %213 = load i32* %107;
    i1 %214 = scmp eq i32 %213, i32 37;
    ubr ^b17;
  ^b17:
    i1 %215 = phi [^b14, i1 true] [^b16, i1 %214];
    cbr i1 %215(prob = 0.5), ^b20, ^b19;
  ^while.header2:
    i32 %216 = phi [^entry6, i32 %207] [^while.body3, i32 %236];
    i32 %217 = phi [^entry6, i32 %206] [^while.body3, i32 %234];
    i32 %218 = phi [^entry6, i32 %14] [^while.body3, i32 %235];
    i1 %219 = scmp neq i32 %217, i32 40;
    cbr i1 %219(prob = 0.97), ^while.body3, ^b15;
  ^while.header3:
    i32 %220 = phi [^b15, i32 %209] [^entry9, i32 %374];
    i32 %221 = phi [^b15, i32 %210] [^entry9, i32 %372];
    i32* %222 = getelementptr &([10000 * i32]* %3)[i64 0][i32 %221];
    i32 %223 = load i32* %222;
    i1 %224 = scmp eq i32 %223, i32 43;
    cbr i1 %224(prob = 0.5), ^b22, ^b21;
  ^b18:
    i32 %225 = phi [^b15, i32 %211] [^entry8, i32 %366];
    i32 %226 = phi [^b15, i32 %209] [^entry8, i32 %362];
    i32 %227 = phi [^b15, i32 %210] [^entry8, i32 %364];
    i1 %228 = scmp eq i32 %225, i32 45;
    cbr i1 %228(prob = 0.5), ^while.header4, ^b23;
  ^b19:
    i32 %229 = load i32* %107;
    i1 %230 = scmp eq i32 %229, i32 94;
    ubr ^b20;
  ^while.body3:
    i32* %231 = getelementptr &([10000 * i32]* %5)[i64 0][i32 %218];
    store i32* %231 with i32 32;
    i32* %232 = getelementptr &(i32* %231)[i64 1];
    store i32* %232 with i32 %217;
    i32* %233 = getelementptr &([10000 * i32]* %3)[i64 0][i32 %216];
    i32 %234 = load i32* %233;
    i32 %235 = add i32 %218, i32 2;
    i32 %236 = add i32 %216, i32 -1;
    ubr ^while.header2;
  ^b20:
    i1 %237 = phi [^b17, i1 true] [^b19, i1 %230];
    cbr i1 %237(prob = 0.5), ^entry7, ^if.else1;
  ^b21:
    i1 %238 = scmp eq i32 %223, i32 45;
    ubr ^b22;
  ^b22:
    i1 %239 = phi [^while.header3, i1 true] [^b21, i1 %238];
    cbr i1 %239(prob = 0.5), ^b26, ^b24;
  ^while.header4:
    i32 %240 = phi [^b18, i32 %226] [^entry13, i32 %406];
    i32 %241 = phi [^b18, i32 %227] [^entry13, i32 %404];
    i32* %242 = getelementptr &([10000 * i32]* %3)[i64 0][i32 %241];
    i32 %243 = load i32* %242;
    i1 %244 = scmp eq i32 %243, i32 43;
    cbr i1 %244(prob = 0.5), ^b27, ^b25;
  ^b23:
    i32 %245 = phi [^b18, i32 %226] [^entry12, i32 %397];
    i32 %246 = phi [^b18, i32 %227] [^entry12, i32 %399];
    i32 %247 = load i32* %18;
    i1 %248 = scmp eq i32 %247, i32 42;
    cbr i1 %248(prob = 0.5), ^while.header5, ^b28;
  ^entry7:
    i32* %249 = getelementptr &([10000 * i32]* %4)[i64 0][i32 %105];
    i32 %250 = load i32* %249;
    i32* %251 = getelementptr &(i32* %249)[i64 -1];
    i32 %252 = load i32* %251;
    i32 %253 = load i32* %107;
    i1 %254 = scmp eq i32 %253, i32 43;
    cbr i1 %254(prob = 0.5), ^if.then1, ^b29;
  ^if.else1:
    i32 %255 = load i32* %107;
    i1 %256 = scmp neq i32 %255, i32 32;
    cbr i1 %256(prob = 0.5), ^if.then2, ^b31;
  ^b24:
    i32 %257 = load i32* %222;
    i1 %258 = scmp eq i32 %257, i32 42;
    ubr ^b26;
  ^b25:
    i1 %259 = scmp eq i32 %243, i32 45;
    ubr ^b27;
  ^b26:
    i1 %260 = phi [^b22, i1 true] [^b24, i1 %258];
    cbr i1 %260(prob = 0.5), ^b33, ^b30;
  ^b27:
    i1 %261 = phi [^while.header4, i1 true] [^b25, i1 %259];
    cbr i1 %261(prob = 0.5), ^b35, ^b32;
  ^while.header5:
    i32 %262 = phi [^b23, i32 %245] [^entry11, i32 %391];
    i32 %263 = phi [^b23, i32 %246] [^entry11, i32 %389];
    i32* %264 = getelementptr &([10000 * i32]* %3)[i64 0][i32 %263];
    i32 %265 = load i32* %264;
    i1 %266 = scmp eq i32 %265, i32 42;
    cbr i1 %266(prob = 0.5), ^b36, ^b34;
  ^b28:
    i32 %267 = phi [^b23, i32 %247] [^entry10, i32 %383];
    i32 %268 = phi [^b23, i32 %245] [^entry10, i32 %379];
    i32 %269 = phi [^b23, i32 %246] [^entry10, i32 %381];
    i1 %270 = scmp eq i32 %267, i32 47;
    cbr i1 %270(prob = 0.5), ^while.header6, ^b37;
  ^if.then1:
    i32 %271 = add i32 %250, i32 %252;
    ubr ^b29;
  ^if.then2:
    i32 %272 = add i32 %105, i32 1;
    i32* %273 = getelementptr &([10000 * i32]* %4)[i64 0][i32 %272];
    i32 %274 = add i32 %255, i32 -48;
    store i32* %273 with i32 %274;
    i32 %275 = add i32 %106, i32 1;
    i32* %276 = getelementptr &([10000 * i32]* %5)[i64 0][i32 %275];
    i32 %277 = load i32* %276;
    i1 %278 = scmp neq i32 %277, i32 32;
    cbr i1 %278(prob = 0.97), ^while.body4, ^b38;
  ^b29:
    i32 %279 = phi [^entry7, i32 0] [^if.then1, i32 %271];
    i1 %280 = scmp eq i32 %253, i32 45;
    cbr i1 %280(prob = 0.5), ^if.then3, ^b40;
  ^b30:
    i32 %281 = load i32* %222;
    i1 %282 = scmp eq i32 %281, i32 47;
    ubr ^b33;
  ^b31:
    i32 %283 = phi [^if.else1, i32 %105] [^b38, i32 %272] [^b70, i32 %423];
    i32 %284 = phi [^if.else1, i32 %106] [^b38, i32 %307] [^b70, i32 %106];
    i32 %285 = add i32 %284, i32 1;
    i32* %286 = getelementptr &([10000 * i32]* %5)[i64 0][i32 %285];
    i32 %287 = load i32* %286;
    i1 %288 = scmp neq i32 %287, i32 64;
    cbr i1 %288(prob = 0.97), ^while.body2, ^b5;
  ^b32:
    i32 %289 = load i32* %242;
    i1 %290 = scmp eq i32 %289, i32 42;
    ubr ^b35;
  ^b33:
    i1 %291 = phi [^b26, i1 true] [^b30, i1 %282];
    cbr i1 %291(prob = 0.5), ^b42, ^b39;
  ^b34:
    i1 %292 = scmp eq i32 %265, i32 47;
    ubr ^b36;
  ^b35:
    i1 %293 = phi [^b27, i1 true] [^b32, i1 %290];
    cbr i1 %293(prob = 0.5), ^b44, ^b41;
  ^b36:
    i1 %294 = phi [^while.header5, i1 true] [^b34, i1 %292];
    cbr i1 %294(prob = 0.5), ^b46, ^b43;
  ^while.header6:
    i32 %295 = phi [^b28, i32 %268] [^entry15, i32 %420];
    i32 %296 = phi [^b28, i32 %269] [^entry15, i32 %418];
    i32* %297 = getelementptr &([10000 * i32]* %3)[i64 0][i32 %296];
    i32 %298 = load i32* %297;
    i1 %299 = scmp eq i32 %298, i32 42;
    cbr i1 %299(prob = 0.5), ^b48, ^b45;
  ^b37:
    i32 %300 = phi [^b28, i32 %268] [^entry14, i32 %409];
    i32 %301 = phi [^b28, i32 %269] [^entry14, i32 %411];
    i32 %302 = load i32* %18;
    i1 %303 = scmp eq i32 %302, i32 37;
    cbr i1 %303(prob = 0.5), ^while.header7, ^b47;
  ^if.then3:
    i32 %304 = sub i32 %252, i32 %250;
    ubr ^b40;
  ^b38:
    i32 %305 = phi [^if.then2, i32 1] [^while.body4, i32 %320];
    i32 %306 = add i32 %106, i32 -1;
    i32 %307 = add i32 %306, i32 %305;
    ubr ^b31;
  ^while.body4:
    i32 %308 = phi [^if.then2, i32 %274] [^while.body4, i32 %315];
    i32 %309 = phi [^if.then2, i32 1] [^while.body4, i32 %320];
    i32 %310 = add i32 %106, i32 %309;
    i32* %311 = getelementptr &([10000 * i32]* %5)[i64 0][i32 %310];
    i32 %312 = load i32* %311;
    i32 %313 = mul i32 %308, i32 10;
    i32 %314 = add i32 %313, i32 -48;
    i32 %315 = add i32 %314, i32 %312;
    store i32* %273 with i32 %315;
    i32 %316 = add i32 %275, i32 %309;
    i32* %317 = getelementptr &([10000 * i32]* %5)[i64 0][i32 %316];
    i32 %318 = load i32* %317;
    i1 %319 = scmp neq i32 %318, i32 32;
    i32 %320 = add i32 %309, i32 1;
    cbr i1 %319(prob = 0.97), ^while.body4, ^b38;
  ^b39:
    i32 %321 = load i32* %222;
    i1 %322 = scmp eq i32 %321, i32 37;
    ubr ^b42;
  ^b40:
    i32 %323 = phi [^b29, i32 %279] [^if.then3, i32 %304];
    i32 %324 = load i32* %107;
    i1 %325 = scmp eq i32 %324, i32 42;
    cbr i1 %325(prob = 0.5), ^if.then4, ^b52;
  ^b41:
    i32 %326 = load i32* %242;
    i1 %327 = scmp eq i32 %326, i32 47;
    ubr ^b44;
  ^b42:
    i1 %328 = phi [^b33, i1 true] [^b39, i1 %322];
    cbr i1 %328(prob = 0.5), ^b51, ^b49;
  ^b43:
    i32 %329 = load i32* %264;
    i1 %330 = scmp eq i32 %329, i32 37;
    ubr ^b46;
  ^b44:
    i1 %331 = phi [^b35, i1 true] [^b41, i1 %327];
    cbr i1 %331(prob = 0.5), ^b54, ^b50;
  ^b45:
    i1 %332 = scmp eq i32 %298, i32 47;
    ubr ^b48;
  ^b46:
    i1 %333 = phi [^b36, i1 true] [^b43, i1 %330];
    cbr i1 %333(prob = 0.5), ^b56, ^b53;
  ^b47:
    i32 %334 = phi [^b37, i32 %301] [^entry17, i32 %428];
    i32 %335 = phi [^b37, i32 %300] [^entry17, i32 %426];
    i32* %336 = getelementptr &([10000 * i32]* %5)[i64 0][i32 %335];
    store i32* %336 with i32 32;
    i32 %337 = add i32 %335, i32 1;
    ubr ^b6;
  ^b48:
    i1 %338 = phi [^while.header6, i1 true] [^b45, i1 %332];
    cbr i1 %338(prob = 0.5), ^b58, ^b55;
  ^while.header7:
    i32 %339 = phi [^b37, i32 %300] [^entry18, i32 %435];
    i32 %340 = phi [^b37, i32 %301] [^entry18, i32 %433];
    i32* %341 = getelementptr &([10000 * i32]* %3)[i64 0][i32 %340];
    i32 %342 = load i32* %341;
    i1 %343 = scmp eq i32 %342, i32 42;
    cbr i1 %343(prob = 0.5), ^b59, ^b57;
  ^if.then4:
    i32 %344 = mul i32 %250, i32 %252;
    ubr ^b52;
  ^b49:
    i32 %345 = load i32* %222;
    i1 %346 = scmp eq i32 %345, i32 94;
    ubr ^b51;
  ^b50:
    i32 %347 = load i32* %242;
    i1 %348 = scmp eq i32 %347, i32 37;
    ubr ^b54;
  ^b51:
    i1 %349 = phi [^b42, i1 true] [^b49, i1 %346];
    cbr i1 %349(prob = 0.97), ^entry9, ^entry8;
  ^b52:
    i32 %350 = phi [^b40, i32 %323] [^if.then4, i32 %344];
    i1 %351 = scmp eq i32 %324, i32 47;
    cbr i1 %351(prob = 0.5), ^if.then5, ^b62;
  ^b53:
    i32 %352 = load i32* %264;
    i1 %353 = scmp eq i32 %352, i32 94;
    ubr ^b56;
  ^b54:
    i1 %354 = phi [^b44, i1 true] [^b50, i1 %348];
    cbr i1 %354(prob = 0.5), ^b61, ^b60;
  ^b55:
    i32 %355 = load i32* %297;
    i1 %356 = scmp eq i32 %355, i32 37;
    ubr ^b58;
  ^b56:
    i1 %357 = phi [^b46, i1 true] [^b53, i1 %353];
    cbr i1 %357(prob = 0.97), ^entry11, ^entry10;
  ^b57:
    i1 %358 = scmp eq i32 %342, i32 47;
    ubr ^b59;
  ^b58:
    i1 %359 = phi [^b48, i1 true] [^b55, i1 %356];
    cbr i1 %359(prob = 0.5), ^b65, ^b63;
  ^b59:
    i1 %360 = phi [^while.header7, i1 true] [^b57, i1 %358];
    cbr i1 %360(prob = 0.5), ^b66, ^b64;
  ^if.then5:
    i32 %361 = sdiv i32 %252, i32 %250;
    ubr ^b62;
  ^entry8:
    i32 %362 = phi [^b51, i32 %220] [^entry9, i32 %374];
    i32 %363 = phi [^b51, i32 %221] [^entry9, i32 %372];
    i32 %364 = add i32 %363, i32 1;
    i32* %365 = getelementptr &([10000 * i32]* %3)[i64 0][i32 %364];
    store i32* %365 with i32 43;
    i32 %366 = load i32* %18;
    ubr ^b18;
  ^b60:
    i32 %367 = load i32* %242;
    i1 %368 = scmp eq i32 %367, i32 94;
    ubr ^b61;
  ^entry9:
    i32 %369 = load i32* %222;
    i32* %370 = getelementptr &([10000 * i32]* %5)[i64 0][i32 %220];
    store i32* %370 with i32 32;
    i32* %371 = getelementptr &(i32* %370)[i64 1];
    store i32* %371 with i32 %369;
    i32 %372 = add i32 %221, i32 -1;
    i1 %373 = scmp eq i32 %372, i32 0;
    i32 %374 = add i32 %220, i32 2;
    cbr i1 %373(prob = 0.5), ^entry8, ^while.header3;
  ^b61:
    i1 %375 = phi [^b54, i1 true] [^b60, i1 %368];
    cbr i1 %375(prob = 0.97), ^entry13, ^entry12;
  ^b62:
    i32 %376 = phi [^b52, i32 %350] [^if.then5, i32 %361];
    i32 %377 = load i32* %107;
    i1 %378 = scmp eq i32 %377, i32 37;
    cbr i1 %378(prob = 0.5), ^if.then6, ^b67;
  ^entry10:
    i32 %379 = phi [^b56, i32 %262] [^entry11, i32 %391];
    i32 %380 = phi [^b56, i32 %263] [^entry11, i32 %389];
    i32 %381 = add i32 %380, i32 1;
    i32* %382 = getelementptr &([10000 * i32]* %3)[i64 0][i32 %381];
    store i32* %382 with i32 42;
    i32 %383 = load i32* %18;
    ubr ^b28;
  ^b63:
    i32 %384 = load i32* %297;
    i1 %385 = scmp eq i32 %384, i32 94;
    ubr ^b65;
  ^entry11:
    i32 %386 = load i32* %264;
    i32* %387 = getelementptr &([10000 * i32]* %5)[i64 0][i32 %262];
    store i32* %387 with i32 32;
    i32* %388 = getelementptr &(i32* %387)[i64 1];
    store i32* %388 with i32 %386;
    i32 %389 = add i32 %263, i32 -1;
    i1 %390 = scmp eq i32 %389, i32 0;
    i32 %391 = add i32 %262, i32 2;
    cbr i1 %390(prob = 0.5), ^entry10, ^while.header5;
  ^b64:
    i32 %392 = load i32* %341;
    i1 %393 = scmp eq i32 %392, i32 37;
    ubr ^b66;
  ^b65:
    i1 %394 = phi [^b58, i1 true] [^b63, i1 %385];
    cbr i1 %394(prob = 0.97), ^entry15, ^entry14;
  ^b66:
    i1 %395 = phi [^b59, i1 true] [^b64, i1 %393];
    cbr i1 %395(prob = 0.5), ^b69, ^b68;
  ^if.then6:
    i32 %396 = srem i32 %252, i32 %250;
    ubr ^b67;
  ^entry12:
    i32 %397 = phi [^b61, i32 %240] [^entry13, i32 %406];
    i32 %398 = phi [^b61, i32 %241] [^entry13, i32 %404];
    i32 %399 = add i32 %398, i32 1;
    i32* %400 = getelementptr &([10000 * i32]* %3)[i64 0][i32 %399];
    store i32* %400 with i32 45;
    ubr ^b23;
  ^entry13:
    i32 %401 = load i32* %242;
    i32* %402 = getelementptr &([10000 * i32]* %5)[i64 0][i32 %240];
    store i32* %402 with i32 32;
    i32* %403 = getelementptr &(i32* %402)[i64 1];
    store i32* %403 with i32 %401;
    i32 %404 = add i32 %241, i32 -1;
    i1 %405 = scmp eq i32 %404, i32 0;
    i32 %406 = add i32 %240, i32 2;
    cbr i1 %405(prob = 0.5), ^entry12, ^while.header4;
  ^b67:
    i32 %407 = phi [^b62, i32 %376] [^if.then6, i32 %396];
    i1 %408 = scmp eq i32 %377, i32 94;
    cbr i1 %408(prob = 0.5), ^entry16, ^b70;
  ^entry14:
    i32 %409 = phi [^b65, i32 %295] [^entry15, i32 %420];
    i32 %410 = phi [^b65, i32 %296] [^entry15, i32 %418];
    i32 %411 = add i32 %410, i32 1;
    i32* %412 = getelementptr &([10000 * i32]* %3)[i64 0][i32 %411];
    store i32* %412 with i32 47;
    ubr ^b37;
  ^b68:
    i32 %413 = load i32* %341;
    i1 %414 = scmp eq i32 %413, i32 94;
    ubr ^b69;
  ^entry15:
    i32 %415 = load i32* %297;
    i32* %416 = getelementptr &([10000 * i32]* %5)[i64 0][i32 %295];
    store i32* %416 with i32 32;
    i32* %417 = getelementptr &(i32* %416)[i64 1];
    store i32* %417 with i32 %415;
    i32 %418 = add i32 %296, i32 -1;
    i1 %419 = scmp eq i32 %418, i32 0;
    i32 %420 = add i32 %295, i32 2;
    cbr i1 %419(prob = 0.5), ^entry14, ^while.header6;
  ^b69:
    i1 %421 = phi [^b66, i1 true] [^b68, i1 %414];
    cbr i1 %421(prob = 0.97), ^entry18, ^entry17;
  ^b70:
    i32 %422 = phi [^b67, i32 %407] [^b71, i32 %436];
    i32 %423 = add i32 %105, i32 -1;
    i32* %424 = getelementptr &([10000 * i32]* %4)[i64 0][i32 %423];
    store i32* %424 with i32 %422;
    ubr ^b31;
  ^entry16:
    i1 %425 = scmp neq i32 %250, i32 0;
    cbr i1 %425(prob = 0.97), ^while.body5, ^b71;
  ^entry17:
    i32 %426 = phi [^b69, i32 %339] [^entry18, i32 %435];
    i32 %427 = phi [^b69, i32 %340] [^entry18, i32 %433];
    i32 %428 = add i32 %427, i32 1;
    i32* %429 = getelementptr &([10000 * i32]* %3)[i64 0][i32 %428];
    store i32* %429 with i32 37;
    ubr ^b47;
  ^entry18:
    i32 %430 = load i32* %341;
    i32* %431 = getelementptr &([10000 * i32]* %5)[i64 0][i32 %339];
    store i32* %431 with i32 32;
    i32* %432 = getelementptr &(i32* %431)[i64 1];
    store i32* %432 with i32 %430;
    i32 %433 = add i32 %340, i32 -1;
    i1 %434 = scmp eq i32 %433, i32 0;
    i32 %435 = add i32 %339, i32 2;
    cbr i1 %434(prob = 0.5), ^entry17, ^while.header7;
  ^b71:
    i32 %436 = phi [^entry16, i32 1] [^while.body5, i32 %441];
    ubr ^b70;
  ^while.body5:
    i32 %437 = phi [^entry16, i32 1] [^while.body5, i32 %441];
    i32 %438 = phi [^entry16, i32 %250] [^while.body5, i32 %439];
    i32 %439 = add i32 %438, i32 -1;
    i1 %440 = scmp neq i32 %439, i32 0;
    i32 %441 = mul i32 %252, i32 %437;
    cbr i1 %440(prob = 0.97), ^while.body5, ^b71;
}
