internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal [10000 * i32]* @ints;
internal [10000 * i32]* @chas;
internal [10000 * i32]* @get;
internal [10000 * i32]* @get2;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = icmp neq i32 %0, i32 13;
    i1 %2 = icmp neq i32 %0, i32 10;
    i1 %3 = and i1 %1, i1 %2;
    [10000 * i32]* %4 = ptrcast [10000 * i32]* @get to [10000 * i32]*;
    i32* %5 = getelementptr &([10000 * i32]* %4)[i64 0][i64 0];
    [10000 * i32]* %6 = ptrcast [10000 * i32]* @chas to [10000 * i32]*;
    [10000 * i32]* %7 = ptrcast [10000 * i32]* @ints to [10000 * i32]*;
    [10000 * i32]* %8 = ptrcast [10000 * i32]* @get2 to [10000 * i32]*;
    cbr i1 %3(prob = 0.97), ^while.body, ^b;
  ^b:
    i32 %9 = phi [^entry, i32 0] [^while.body, i32 %17];
    ubr ^while.header;
  ^while.body:
    i32 %10 = phi [^entry, i32 %0] [^while.body, i32 %13];
    i32 %11 = phi [^entry, i32 0] [^while.body, i32 %17];
    i32* %12 = getelementptr &(i32* %5)[i32 %11];
    store i32* %12 with i32 %10;
    i32 %13 = call () -> i32 @getch();
    i1 %14 = icmp neq i32 %13, i32 13;
    i1 %15 = icmp neq i32 %13, i32 10;
    i1 %16 = and i1 %14, i1 %15;
    i32 %17 = add i32 %11, i32 1;
    cbr i1 %16(prob = 0.97), ^while.body, ^b;
  ^while.header:
    i32 %18 = phi [^b, i32 0] [^if.then, i32 %29] [^b14, i32 %259];
    i32 %19 = phi [^b, i32 1] [^if.then, i32 %28] [^b14, i32 %258];
    i32 %20 = phi [^b, i32 0] [^if.then, i32 %20] [^b14, i32 %255];
    i1 %21 = icmp sgt i32 %9, i32 %18;
    cbr i1 %21(prob = 0.97), ^while.body1, ^indirect;
  ^while.body1:
    i32* %22 = getelementptr &([10000 * i32]* %4)[i64 0][i32 %18];
    i32 %23 = load i32* %22;
    i32 %24 = add i32 %23, i32 -48;
    i1 %25 = icmp ult i32 %24, i32 10;
    cbr i1 %25(prob = 0.5), ^if.then, ^if.else;
  ^indirect:
    i1 %26 = icmp sgt i32 %20, i32 0;
    cbr i1 %26(prob = 0.97), ^super.header, ^b1;
  ^if.then:
    i32* %27 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %19];
    store i32* %27 with i32 %23;
    i32 %28 = add i32 %19, i32 1;
    i32 %29 = add i32 %18, i32 1;
    ubr ^while.header;
  ^if.else:
    i1 %30 = icmp eq i32 %23, i32 40;
    cbr i1 %30(prob = 0.5), ^entry1, ^b2;
  ^super.header:
    i32 %31 = phi [^indirect, i32 %20] [^entry2, i32 %33];
    i32 %32 = phi [^indirect, i32 %19] [^entry2, i32 %58];
    i32 %33 = add i32 %31, i32 -4;
    i1 %34 = icmp sgt i32 %33, i32 0;
    cbr i1 %34(prob = 0.89), ^entry2, ^entry3;
  ^b1:
    i32 %35 = phi [^indirect, i32 %19] [^entry3, i32 %69];
    i32* %36 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %35];
    store i32* %36 with i32 64;
    i32* %37 = getelementptr &([10000 * i32]* %8)[i64 0][i64 1];
    i32 %38 = load i32* %37;
    i1 %39 = icmp neq i32 %38, i32 64;
    cbr i1 %39(prob = 0.97), ^while.body2, ^b3;
  ^entry1:
    i32 %40 = add i32 %20, i32 1;
    i32* %41 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %40];
    store i32* %41 with i32 40;
    ubr ^b2;
  ^entry2:
    i32* %42 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %31];
    i32 %43 = load i32* %42;
    i32* %44 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %32];
    store i32* %44 with i32 32;
    i32* %45 = getelementptr &(i32* %44)[i64 1];
    store i32* %45 with i32 %43;
    i32* %46 = getelementptr &(i32* %42)[i64 -1];
    i32 %47 = load i32* %46;
    i32* %48 = getelementptr &(i32* %44)[i64 2];
    store i32* %48 with i32 32;
    i32* %49 = getelementptr &(i32* %44)[i64 3];
    store i32* %49 with i32 %47;
    i32* %50 = getelementptr &(i32* %42)[i64 -2];
    i32 %51 = load i32* %50;
    i32* %52 = getelementptr &(i32* %44)[i64 4];
    store i32* %52 with i32 32;
    i32* %53 = getelementptr &(i32* %44)[i64 5];
    store i32* %53 with i32 %51;
    i32* %54 = getelementptr &(i32* %42)[i64 -3];
    i32 %55 = load i32* %54;
    i32* %56 = getelementptr &(i32* %44)[i64 6];
    store i32* %56 with i32 32;
    i32* %57 = getelementptr &(i32* %44)[i64 7];
    store i32* %57 with i32 %55;
    i32 %58 = add i32 %32, i32 8;
    ubr ^super.header;
  ^b2:
    i32 %59 = phi [^if.else, i32 %20] [^entry1, i32 %40];
    i1 %60 = icmp eq i32 %23, i32 94;
    cbr i1 %60(prob = 0.5), ^entry4, ^b4;
  ^entry3:
    i32 %61 = phi [^super.header, i32 %31] [^entry3, i32 %67];
    i32 %62 = phi [^super.header, i32 %32] [^entry3, i32 %69];
    i32* %63 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %61];
    i32 %64 = load i32* %63;
    i32* %65 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %62];
    store i32* %65 with i32 32;
    i32* %66 = getelementptr &(i32* %65)[i64 1];
    store i32* %66 with i32 %64;
    i32 %67 = add i32 %61, i32 -1;
    i1 %68 = icmp sgt i32 %67, i32 0;
    i32 %69 = add i32 %62, i32 2;
    cbr i1 %68(prob = 0.75), ^entry3, ^b1;
  ^while.body2:
    i32 %70 = phi [^b1, i32 1] [^while.header3, i32 %154];
    i32 %71 = phi [^b1, i32 0] [^while.header3, i32 %153];
    i32* %72 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %70];
    i32 %73 = load i32* %72;
    i1 %74 = icmp eq i32 %73, i32 43;
    i1 %75 = icmp eq i32 %73, i32 45;
    i1 %76 = or i1 %74, i1 %75;
    i1 %77 = icmp eq i32 %73, i32 42;
    i1 %78 = or i1 %76, i1 %77;
    i1 %79 = icmp eq i32 %73, i32 47;
    i1 %80 = or i1 %78, i1 %79;
    i1 %81 = icmp eq i32 %73, i32 37;
    i1 %82 = or i1 %80, i1 %81;
    i1 %83 = icmp eq i32 %73, i32 94;
    i1 %84 = or i1 %82, i1 %83;
    cbr i1 %84(prob = 0.98), ^entry5, ^if.else1;
  ^b3:
    i32* %85 = getelementptr &([10000 * i32]* %7)[i64 0][i64 1];
    i32 %86 = load i32* %85;
    call (i32) -> void @putint(i32 %86);
    ret i32 0;
  ^entry4:
    i32 %87 = add i32 %59, i32 1;
    i32* %88 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %87];
    store i32* %88 with i32 94;
    ubr ^b4;
  ^entry5:
    i32* %89 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %71];
    i32 %90 = load i32* %89;
    i32* %91 = getelementptr &(i32* %89)[i64 -1];
    i32 %92 = load i32* %91;
    i32 %93 = add i32 %90, i32 %92;
    i32 %94 = select i1 %74 ? i32 %93 : i32 0;
    i32 %95 = sub i32 %92, i32 %90;
    i32 %96 = select i1 %75 ? i32 %95 : i32 %94;
    i32 %97 = mul i32 %90, i32 %92;
    i32 %98 = select i1 %77 ? i32 %97 : i32 %96;
    cbr i1 %79(prob = 0.5), ^if.then1, ^b5;
  ^b4:
    i32 %99 = phi [^b2, i32 %59] [^entry4, i32 %87];
    i1 %100 = icmp eq i32 %23, i32 41;
    cbr i1 %100(prob = 0.5), ^entry6, ^b6;
  ^if.else1:
    i1 %101 = icmp neq i32 %73, i32 32;
    cbr i1 %101(prob = 0.5), ^if.then2, ^indirect1;
  ^if.then1:
    i32 %102 = sdiv i32 %92, i32 %90;
    ubr ^b5;
  ^entry6:
    i32* %103 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %99];
    i32 %104 = load i32* %103;
    i32 %105 = add i32 %99, i32 -1;
    ubr ^while.header1;
  ^indirect1:
    i32 %106 = add i32 %70, i32 1;
    ubr ^while.header3;
  ^if.then2:
    i32 %107 = add i32 %71, i32 1;
    i32* %108 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %107];
    i32 %109 = add i32 %73, i32 -48;
    store i32* %108 with i32 %109;
    i32 %110 = add i32 %70, i32 1;
    i32* %111 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %110];
    i32 %112 = load i32* %111;
    i1 %113 = icmp neq i32 %112, i32 32;
    cbr i1 %113(prob = 0.97), ^while.body3, ^b7;
  ^b5:
    i32 %114 = phi [^entry5, i32 %98] [^if.then1, i32 %102];
    cbr i1 %81(prob = 0.5), ^if.then3, ^b8;
  ^b6:
    i32 %115 = phi [^b4, i32 %19] [^while.header1, i32 %123];
    i32 %116 = phi [^b4, i32 %99] [^while.header1, i32 %121];
    i1 %117 = icmp eq i32 %23, i32 43;
    cbr i1 %117(prob = 0.5), ^while.header2, ^b9;
  ^if.then3:
    i32 %118 = srem i32 %92, i32 %90;
    ubr ^b8;
  ^b7:
    i32 %119 = phi [^if.then2, i32 1] [^while.body3, i32 %137];
    i32 %120 = add i32 %70, i32 %119;
    ubr ^while.header3;
  ^while.header1:
    i32 %121 = phi [^entry6, i32 %105] [^while.body4, i32 %167];
    i32 %122 = phi [^entry6, i32 %104] [^while.body4, i32 %165];
    i32 %123 = phi [^entry6, i32 %19] [^while.body4, i32 %166];
    i1 %124 = icmp neq i32 %122, i32 40;
    cbr i1 %124(prob = 0.97), ^while.body4, ^b6;
  ^while.body3:
    i32 %125 = phi [^if.then2, i32 %109] [^while.body3, i32 %132];
    i32 %126 = phi [^if.then2, i32 1] [^while.body3, i32 %137];
    i32 %127 = add i32 %70, i32 %126;
    i32* %128 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %127];
    i32 %129 = load i32* %128;
    i32 %130 = mul i32 %125, i32 10;
    i32 %131 = add i32 %130, i32 -48;
    i32 %132 = add i32 %129, i32 %131;
    store i32* %108 with i32 %132;
    i32 %133 = add i32 %110, i32 %126;
    i32* %134 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %133];
    i32 %135 = load i32* %134;
    i1 %136 = icmp neq i32 %135, i32 32;
    i32 %137 = add i32 %126, i32 1;
    cbr i1 %136(prob = 0.97), ^while.body3, ^b7;
  ^while.header2:
    i32 %138 = phi [^b6, i32 %115] [^entry8, i32 %180];
    i32 %139 = phi [^b6, i32 %116] [^entry8, i32 %178];
    i32* %140 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %139];
    i32 %141 = load i32* %140;
    i1 %142 = icmp eq i32 %141, i32 43;
    i1 %143 = icmp eq i32 %141, i32 45;
    i1 %144 = or i1 %142, i1 %143;
    i1 %145 = icmp eq i32 %141, i32 42;
    i1 %146 = or i1 %144, i1 %145;
    i1 %147 = icmp eq i32 %141, i32 47;
    i1 %148 = or i1 %146, i1 %147;
    i1 %149 = icmp eq i32 %141, i32 37;
    i1 %150 = or i1 %148, i1 %149;
    i1 %151 = icmp eq i32 %141, i32 94;
    i1 %152 = or i1 %150, i1 %151;
    cbr i1 %152(prob = 1), ^entry8, ^entry7;
  ^while.header3:
    i32 %153 = phi [^indirect1, i32 %71] [^b7, i32 %107] [^b10, i32 %169];
    i32 %154 = phi [^indirect1, i32 %106] [^b7, i32 %120] [^b10, i32 %171];
    i32* %155 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %154];
    i32 %156 = load i32* %155;
    i1 %157 = icmp neq i32 %156, i32 64;
    cbr i1 %157(prob = 0.97), ^while.body2, ^b3;
  ^b8:
    i32 %158 = phi [^b5, i32 %114] [^if.then3, i32 %118];
    cbr i1 %83(prob = 0.5), ^entry9, ^b10;
  ^b9:
    i32 %159 = phi [^b6, i32 %115] [^entry7, i32 %172];
    i32 %160 = phi [^b6, i32 %116] [^entry7, i32 %174];
    i1 %161 = icmp eq i32 %23, i32 45;
    cbr i1 %161(prob = 0.5), ^while.header4, ^b11;
  ^while.body4:
    i32* %162 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %123];
    store i32* %162 with i32 32;
    i32* %163 = getelementptr &(i32* %162)[i64 1];
    store i32* %163 with i32 %122;
    i32* %164 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %121];
    i32 %165 = load i32* %164;
    i32 %166 = add i32 %123, i32 2;
    i32 %167 = add i32 %121, i32 -1;
    ubr ^while.header1;
  ^b10:
    i32 %168 = phi [^b8, i32 %158] [^entry9, i32 1] [^while.body5, i32 %202];
    i32 %169 = add i32 %71, i32 -1;
    i32* %170 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %169];
    store i32* %170 with i32 %168;
    i32 %171 = add i32 %70, i32 1;
    ubr ^while.header3;
  ^entry7:
    i32 %172 = phi [^while.header2, i32 %138] [^entry8, i32 %180];
    i32 %173 = phi [^while.header2, i32 %139] [^entry8, i32 %178];
    i32 %174 = add i32 %173, i32 1;
    i32* %175 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %174];
    store i32* %175 with i32 43;
    ubr ^b9;
  ^entry8:
    i32* %176 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %138];
    store i32* %176 with i32 32;
    i32* %177 = getelementptr &(i32* %176)[i64 1];
    store i32* %177 with i32 %141;
    i32 %178 = add i32 %139, i32 -1;
    i1 %179 = icmp eq i32 %178, i32 0;
    i32 %180 = add i32 %138, i32 2;
    cbr i1 %179(prob = 0.5), ^entry7, ^while.header2;
  ^entry9:
    i1 %181 = icmp neq i32 %90, i32 0;
    cbr i1 %181(prob = 0.97), ^while.body5, ^b10;
  ^while.header4:
    i32 %182 = phi [^b9, i32 %159] [^entry11, i32 %213];
    i32 %183 = phi [^b9, i32 %160] [^entry11, i32 %211];
    i32* %184 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %183];
    i32 %185 = load i32* %184;
    i1 %186 = icmp eq i32 %185, i32 43;
    i1 %187 = icmp eq i32 %185, i32 45;
    i1 %188 = or i1 %186, i1 %187;
    i1 %189 = icmp eq i32 %185, i32 42;
    i1 %190 = or i1 %188, i1 %189;
    i1 %191 = icmp eq i32 %185, i32 47;
    i1 %192 = or i1 %190, i1 %191;
    i1 %193 = icmp eq i32 %185, i32 37;
    i1 %194 = or i1 %192, i1 %193;
    i1 %195 = icmp eq i32 %185, i32 94;
    i1 %196 = or i1 %194, i1 %195;
    cbr i1 %196(prob = 1), ^entry11, ^entry10;
  ^b11:
    i32 %197 = phi [^b9, i32 %159] [^entry10, i32 %205];
    i32 %198 = phi [^b9, i32 %160] [^entry10, i32 %207];
    i1 %199 = icmp eq i32 %23, i32 42;
    cbr i1 %199(prob = 0.5), ^while.header5, ^b12;
  ^while.body5:
    i32 %200 = phi [^entry9, i32 %90] [^while.body5, i32 %203];
    i32 %201 = phi [^entry9, i32 1] [^while.body5, i32 %202];
    i32 %202 = mul i32 %92, i32 %201;
    i32 %203 = add i32 %200, i32 -1;
    i1 %204 = icmp neq i32 %203, i32 0;
    cbr i1 %204(prob = 0.97), ^while.body5, ^b10;
  ^entry10:
    i32 %205 = phi [^while.header4, i32 %182] [^entry11, i32 %213];
    i32 %206 = phi [^while.header4, i32 %183] [^entry11, i32 %211];
    i32 %207 = add i32 %206, i32 1;
    i32* %208 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %207];
    store i32* %208 with i32 45;
    ubr ^b11;
  ^entry11:
    i32* %209 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %182];
    store i32* %209 with i32 32;
    i32* %210 = getelementptr &(i32* %209)[i64 1];
    store i32* %210 with i32 %185;
    i32 %211 = add i32 %183, i32 -1;
    i1 %212 = icmp eq i32 %211, i32 0;
    i32 %213 = add i32 %182, i32 2;
    cbr i1 %212(prob = 0.5), ^entry10, ^while.header4;
  ^while.header5:
    i32 %214 = phi [^b11, i32 %197] [^entry13, i32 %236];
    i32 %215 = phi [^b11, i32 %198] [^entry13, i32 %234];
    i32* %216 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %215];
    i32 %217 = load i32* %216;
    i1 %218 = icmp eq i32 %217, i32 42;
    i1 %219 = icmp eq i32 %217, i32 47;
    i1 %220 = or i1 %218, i1 %219;
    i1 %221 = icmp eq i32 %217, i32 37;
    i1 %222 = or i1 %220, i1 %221;
    i1 %223 = icmp eq i32 %217, i32 94;
    i1 %224 = or i1 %222, i1 %223;
    cbr i1 %224(prob = 1), ^entry13, ^entry12;
  ^b12:
    i32 %225 = phi [^b11, i32 %197] [^entry12, i32 %228];
    i32 %226 = phi [^b11, i32 %198] [^entry12, i32 %230];
    i1 %227 = icmp eq i32 %23, i32 47;
    cbr i1 %227(prob = 0.5), ^while.header6, ^b13;
  ^entry12:
    i32 %228 = phi [^while.header5, i32 %214] [^entry13, i32 %236];
    i32 %229 = phi [^while.header5, i32 %215] [^entry13, i32 %234];
    i32 %230 = add i32 %229, i32 1;
    i32* %231 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %230];
    store i32* %231 with i32 42;
    ubr ^b12;
  ^entry13:
    i32* %232 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %214];
    store i32* %232 with i32 32;
    i32* %233 = getelementptr &(i32* %232)[i64 1];
    store i32* %233 with i32 %217;
    i32 %234 = add i32 %215, i32 -1;
    i1 %235 = icmp eq i32 %234, i32 0;
    i32 %236 = add i32 %214, i32 2;
    cbr i1 %235(prob = 0.5), ^entry12, ^while.header5;
  ^while.header6:
    i32 %237 = phi [^b12, i32 %225] [^entry15, i32 %264];
    i32 %238 = phi [^b12, i32 %226] [^entry15, i32 %262];
    i32* %239 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %238];
    i32 %240 = load i32* %239;
    i1 %241 = icmp eq i32 %240, i32 42;
    i1 %242 = icmp eq i32 %240, i32 47;
    i1 %243 = or i1 %241, i1 %242;
    i1 %244 = icmp eq i32 %240, i32 37;
    i1 %245 = or i1 %243, i1 %244;
    i1 %246 = icmp eq i32 %240, i32 94;
    i1 %247 = or i1 %245, i1 %246;
    cbr i1 %247(prob = 1), ^entry15, ^entry14;
  ^b13:
    i32 %248 = phi [^b12, i32 %225] [^entry14, i32 %251];
    i32 %249 = phi [^b12, i32 %226] [^entry14, i32 %253];
    i1 %250 = icmp eq i32 %23, i32 37;
    cbr i1 %250(prob = 0.5), ^while.header7, ^b14;
  ^entry14:
    i32 %251 = phi [^while.header6, i32 %237] [^entry15, i32 %264];
    i32 %252 = phi [^while.header6, i32 %238] [^entry15, i32 %262];
    i32 %253 = add i32 %252, i32 1;
    i32* %254 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %253];
    store i32* %254 with i32 47;
    ubr ^b13;
  ^b14:
    i32 %255 = phi [^b13, i32 %249] [^entry16, i32 %278];
    i32 %256 = phi [^b13, i32 %248] [^entry16, i32 %276];
    i32* %257 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %256];
    store i32* %257 with i32 32;
    i32 %258 = add i32 %256, i32 1;
    i32 %259 = add i32 %18, i32 1;
    ubr ^while.header;
  ^entry15:
    i32* %260 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %237];
    store i32* %260 with i32 32;
    i32* %261 = getelementptr &(i32* %260)[i64 1];
    store i32* %261 with i32 %240;
    i32 %262 = add i32 %238, i32 -1;
    i1 %263 = icmp eq i32 %262, i32 0;
    i32 %264 = add i32 %237, i32 2;
    cbr i1 %263(prob = 0.5), ^entry14, ^while.header6;
  ^while.header7:
    i32 %265 = phi [^b13, i32 %248] [^entry17, i32 %284];
    i32 %266 = phi [^b13, i32 %249] [^entry17, i32 %282];
    i32* %267 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %266];
    i32 %268 = load i32* %267;
    i1 %269 = icmp eq i32 %268, i32 42;
    i1 %270 = icmp eq i32 %268, i32 47;
    i1 %271 = or i1 %269, i1 %270;
    i1 %272 = icmp eq i32 %268, i32 37;
    i1 %273 = or i1 %271, i1 %272;
    i1 %274 = icmp eq i32 %268, i32 94;
    i1 %275 = or i1 %273, i1 %274;
    cbr i1 %275(prob = 1), ^entry17, ^entry16;
  ^entry16:
    i32 %276 = phi [^while.header7, i32 %265] [^entry17, i32 %284];
    i32 %277 = phi [^while.header7, i32 %266] [^entry17, i32 %282];
    i32 %278 = add i32 %277, i32 1;
    i32* %279 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %278];
    store i32* %279 with i32 37;
    ubr ^b14;
  ^entry17:
    i32* %280 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %265];
    store i32* %280 with i32 32;
    i32* %281 = getelementptr &(i32* %280)[i64 1];
    store i32* %281 with i32 %268;
    i32 %282 = add i32 %266, i32 -1;
    i1 %283 = icmp eq i32 %282, i32 0;
    i32 %284 = add i32 %265, i32 2;
    cbr i1 %283(prob = 0.5), ^entry16, ^while.header7;
}
