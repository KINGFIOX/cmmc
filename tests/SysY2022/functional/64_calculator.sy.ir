internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal [10000 * i32]* @ints;
internal [10000 * i32]* @chas;
internal [10000 * i32]* @get;
internal [10000 * i32]* @get2;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %0 = getelementptr &([10000 * i32]* @get)[i64 0][i64 0];
    i32 %1 = call () -> i32 @getch();
    ubr ^while.header;
^while.header:
    i32 %2 = phi [^entry, i32 0] [^while.body, i32 %8];
    i32 %3 = phi [^entry, i32 %1] [^while.body, i32 %9];
    i1 %4 = scmp neq i32 %3, i32 13;
    cbr i1 %4(prob = 0.5), ^b, ^b1;
^b:
    i1 %5 = scmp neq i32 %3, i32 10;
    ubr ^b1;
^b1:
    i1 %6 = phi [^while.header, i1 false] [^b, i1 %5];
    cbr i1 %6(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i32* %7 = getelementptr &(i32* %0)[i32 %2];
    store i32* %7 with i32 %3;
    i32 %8 = add i32 %2, i32 1;
    i32 %9 = call () -> i32 @getch();
    ubr ^while.header;
^while.header1:
    i32 %10 = phi [^b1, i32 0] [^b6, i32 %113];
    i32 %11 = phi [^b1, i32 1] [^b6, i32 %114];
    i32 %12 = phi [^b1, i32 0] [^b6, i32 %115];
    i1 %13 = scmp lt i32 %12, i32 %2;
    cbr i1 %13(prob = 0.97), ^while.body1, ^indirect;
^while.body1:
    i32* %14 = getelementptr &([10000 * i32]* @get)[i64 0][i32 %12];
    i32 %15 = load i32* %14;
    i1 %16 = scmp gt i32 %15, i32 47;
    cbr i1 %16(prob = 0.5), ^b2, ^b3;
^indirect:
    i1 %17 = scmp gt i32 %10, i32 0;
    cbr i1 %17(prob = 0.97), ^super.header, ^b4;
^b2:
    i1 %18 = scmp le i32 %15, i32 57;
    ubr ^b3;
^b3:
    i1 %19 = phi [^while.body1, i1 false] [^b2, i1 %18];
    cbr i1 %19(prob = 0.5), ^if.then, ^if.else;
^super.header:
    i32 %20 = phi [^indirect, i32 %10] [^entry1, i32 %22];
    i32 %21 = phi [^indirect, i32 %11] [^entry1, i32 %95];
    i32 %22 = add i32 %20, i32 -16;
    i1 %23 = scmp gt i32 %22, i32 0;
    cbr i1 %23(prob = 0.67), ^entry1, ^entry2;
^b4:
    i32 %24 = phi [^indirect, i32 %11] [^entry2, i32 %104];
    i32* %25 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %24];
    store i32* %25 with i32 64;
    i32* %26 = getelementptr &([10000 * i32]* @get2)[i64 0][i64 1];
    i32 %27 = load i32* %26;
    i1 %28 = scmp neq i32 %27, i32 64;
    cbr i1 %28(prob = 0.97), ^while.body2, ^b5;
^if.then:
    i32* %29 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %11];
    store i32* %29 with i32 %15;
    i32 %30 = add i32 %11, i32 1;
    ubr ^b6;
^entry1:
    i32* %31 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %20];
    i32 %32 = load i32* %31;
    i32* %33 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %21];
    store i32* %33 with i32 32;
    i32* %34 = getelementptr &(i32* %33)[i64 1];
    store i32* %34 with i32 %32;
    i32* %35 = getelementptr &(i32* %31)[i64 -1];
    i32 %36 = load i32* %35;
    i32* %37 = getelementptr &(i32* %33)[i64 2];
    store i32* %37 with i32 32;
    i32* %38 = getelementptr &(i32* %33)[i64 3];
    store i32* %38 with i32 %36;
    i32* %39 = getelementptr &(i32* %31)[i64 -2];
    i32 %40 = load i32* %39;
    i32* %41 = getelementptr &(i32* %33)[i64 4];
    store i32* %41 with i32 32;
    i32* %42 = getelementptr &(i32* %33)[i64 5];
    store i32* %42 with i32 %40;
    i32* %43 = getelementptr &(i32* %31)[i64 -3];
    i32 %44 = load i32* %43;
    i32* %45 = getelementptr &(i32* %33)[i64 6];
    store i32* %45 with i32 32;
    i32* %46 = getelementptr &(i32* %33)[i64 7];
    store i32* %46 with i32 %44;
    i32* %47 = getelementptr &(i32* %31)[i64 -4];
    i32 %48 = load i32* %47;
    i32* %49 = getelementptr &(i32* %33)[i64 8];
    store i32* %49 with i32 32;
    i32* %50 = getelementptr &(i32* %33)[i64 9];
    store i32* %50 with i32 %48;
    i32* %51 = getelementptr &(i32* %31)[i64 -5];
    i32 %52 = load i32* %51;
    i32* %53 = getelementptr &(i32* %33)[i64 10];
    store i32* %53 with i32 32;
    i32* %54 = getelementptr &(i32* %33)[i64 11];
    store i32* %54 with i32 %52;
    i32* %55 = getelementptr &(i32* %31)[i64 -6];
    i32 %56 = load i32* %55;
    i32* %57 = getelementptr &(i32* %33)[i64 12];
    store i32* %57 with i32 32;
    i32* %58 = getelementptr &(i32* %33)[i64 13];
    store i32* %58 with i32 %56;
    i32* %59 = getelementptr &(i32* %31)[i64 -7];
    i32 %60 = load i32* %59;
    i32* %61 = getelementptr &(i32* %33)[i64 14];
    store i32* %61 with i32 32;
    i32* %62 = getelementptr &(i32* %33)[i64 15];
    store i32* %62 with i32 %60;
    i32* %63 = getelementptr &(i32* %31)[i64 -8];
    i32 %64 = load i32* %63;
    i32* %65 = getelementptr &(i32* %33)[i64 16];
    store i32* %65 with i32 32;
    i32* %66 = getelementptr &(i32* %33)[i64 17];
    store i32* %66 with i32 %64;
    i32* %67 = getelementptr &(i32* %31)[i64 -9];
    i32 %68 = load i32* %67;
    i32* %69 = getelementptr &(i32* %33)[i64 18];
    store i32* %69 with i32 32;
    i32* %70 = getelementptr &(i32* %33)[i64 19];
    store i32* %70 with i32 %68;
    i32* %71 = getelementptr &(i32* %31)[i64 -10];
    i32 %72 = load i32* %71;
    i32* %73 = getelementptr &(i32* %33)[i64 20];
    store i32* %73 with i32 32;
    i32* %74 = getelementptr &(i32* %33)[i64 21];
    store i32* %74 with i32 %72;
    i32* %75 = getelementptr &(i32* %31)[i64 -11];
    i32 %76 = load i32* %75;
    i32* %77 = getelementptr &(i32* %33)[i64 22];
    store i32* %77 with i32 32;
    i32* %78 = getelementptr &(i32* %33)[i64 23];
    store i32* %78 with i32 %76;
    i32* %79 = getelementptr &(i32* %31)[i64 -12];
    i32 %80 = load i32* %79;
    i32* %81 = getelementptr &(i32* %33)[i64 24];
    store i32* %81 with i32 32;
    i32* %82 = getelementptr &(i32* %33)[i64 25];
    store i32* %82 with i32 %80;
    i32* %83 = getelementptr &(i32* %31)[i64 -13];
    i32 %84 = load i32* %83;
    i32* %85 = getelementptr &(i32* %33)[i64 26];
    store i32* %85 with i32 32;
    i32* %86 = getelementptr &(i32* %33)[i64 27];
    store i32* %86 with i32 %84;
    i32* %87 = getelementptr &(i32* %31)[i64 -14];
    i32 %88 = load i32* %87;
    i32* %89 = getelementptr &(i32* %33)[i64 28];
    store i32* %89 with i32 32;
    i32* %90 = getelementptr &(i32* %33)[i64 29];
    store i32* %90 with i32 %88;
    i32* %91 = getelementptr &(i32* %31)[i64 -15];
    i32 %92 = load i32* %91;
    i32* %93 = getelementptr &(i32* %33)[i64 30];
    store i32* %93 with i32 32;
    i32* %94 = getelementptr &(i32* %33)[i64 31];
    store i32* %94 with i32 %92;
    i32 %95 = add i32 %21, i32 32;
    ubr ^super.header;
^if.else:
    i1 %96 = scmp eq i32 %15, i32 40;
    cbr i1 %96(prob = 0.5), ^entry3, ^b9;
^entry2:
    i32 %97 = phi [^super.header, i32 %20] [^entry2, i32 %99];
    i32 %98 = phi [^super.header, i32 %21] [^entry2, i32 %104];
    i32 %99 = add i32 %97, i32 -1;
    i32* %100 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %97];
    i32 %101 = load i32* %100;
    i32* %102 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %98];
    store i32* %102 with i32 32;
    i32* %103 = getelementptr &(i32* %102)[i64 1];
    store i32* %103 with i32 %101;
    i32 %104 = add i32 %98, i32 2;
    i1 %105 = scmp gt i32 %99, i32 0;
    cbr i1 %105(prob = 0.97), ^entry2, ^b4;
^while.body2:
    i32 %106 = phi [^b4, i32 0] [^b31, i32 %210];
    i32 %107 = phi [^b4, i32 1] [^b31, i32 %212];
    i32* %108 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %107];
    i32 %109 = load i32* %108;
    i1 %110 = scmp eq i32 %109, i32 43;
    cbr i1 %110(prob = 0.5), ^b8, ^b7;
^b5:
    i32* %111 = getelementptr &([10000 * i32]* @ints)[i64 0][i64 1];
    i32 %112 = load i32* %111;
    call (i32) -> void @putint(i32 %112);
    ret i32 0;
^b6:
    i32 %113 = phi [^if.then, i32 %10] [^b47, i32 %261];
    i32 %114 = phi [^if.then, i32 %30] [^b47, i32 %264];
    i32 %115 = add i32 %12, i32 1;
    ubr ^while.header1;
^entry3:
    i32 %116 = add i32 %10, i32 1;
    i32* %117 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %116];
    store i32* %117 with i32 40;
    ubr ^b9;
^b7:
    i1 %118 = scmp eq i32 %109, i32 45;
    ubr ^b8;
^b8:
    i1 %119 = phi [^while.body2, i1 true] [^b7, i1 %118];
    cbr i1 %119(prob = 0.5), ^b11, ^b10;
^b9:
    i32 %120 = phi [^if.else, i32 %10] [^entry3, i32 %116];
    i32 %121 = load i32* %14;
    i1 %122 = scmp eq i32 %121, i32 94;
    cbr i1 %122(prob = 0.5), ^entry4, ^b12;
^entry4:
    i32 %123 = add i32 %120, i32 1;
    i32* %124 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %123];
    store i32* %124 with i32 94;
    ubr ^b12;
^b10:
    i32 %125 = load i32* %108;
    i1 %126 = scmp eq i32 %125, i32 42;
    ubr ^b11;
^b11:
    i1 %127 = phi [^b8, i1 true] [^b10, i1 %126];
    cbr i1 %127(prob = 0.5), ^b14, ^b13;
^b12:
    i32 %128 = phi [^b9, i32 %120] [^entry4, i32 %123];
    i1 %129 = scmp eq i32 %121, i32 41;
    cbr i1 %129(prob = 0.5), ^entry5, ^b15;
^b13:
    i32 %130 = load i32* %108;
    i1 %131 = scmp eq i32 %130, i32 47;
    ubr ^b14;
^entry5:
    i32 %132 = add i32 %128, i32 -1;
    i32* %133 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %128];
    i32 %134 = load i32* %133;
    ubr ^while.header2;
^b14:
    i1 %135 = phi [^b11, i1 true] [^b13, i1 %131];
    cbr i1 %135(prob = 0.5), ^b17, ^b16;
^b15:
    i32 %136 = phi [^b12, i32 %11] [^while.header2, i32 %144];
    i32 %137 = phi [^b12, i32 %128] [^while.header2, i32 %145];
    i32 %138 = load i32* %14;
    i1 %139 = scmp eq i32 %138, i32 43;
    cbr i1 %139(prob = 0.5), ^while.header3, ^b18;
^b16:
    i32 %140 = load i32* %108;
    i1 %141 = scmp eq i32 %140, i32 37;
    ubr ^b17;
^b17:
    i1 %142 = phi [^b14, i1 true] [^b16, i1 %141];
    cbr i1 %142(prob = 0.5), ^b20, ^b19;
^while.header2:
    i32 %143 = phi [^entry5, i32 %134] [^while.body3, i32 %163];
    i32 %144 = phi [^entry5, i32 %11] [^while.body3, i32 %160];
    i32 %145 = phi [^entry5, i32 %132] [^while.body3, i32 %161];
    i1 %146 = scmp neq i32 %143, i32 40;
    cbr i1 %146(prob = 0.97), ^while.body3, ^b15;
^while.header3:
    i32 %147 = phi [^b15, i32 %136] [^entry8, i32 %300];
    i32 %148 = phi [^b15, i32 %137] [^entry8, i32 %296];
    i32* %149 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %148];
    i32 %150 = load i32* %149;
    i1 %151 = scmp eq i32 %150, i32 43;
    cbr i1 %151(prob = 0.5), ^b22, ^b21;
^b18:
    i32 %152 = phi [^b15, i32 %136] [^entry7, i32 %290];
    i32 %153 = phi [^b15, i32 %137] [^entry7, i32 %292];
    i32 %154 = load i32* %14;
    i1 %155 = scmp eq i32 %154, i32 45;
    cbr i1 %155(prob = 0.5), ^while.header4, ^b23;
^b19:
    i32 %156 = load i32* %108;
    i1 %157 = scmp eq i32 %156, i32 94;
    ubr ^b20;
^while.body3:
    i32* %158 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %144];
    store i32* %158 with i32 32;
    i32* %159 = getelementptr &(i32* %158)[i64 1];
    store i32* %159 with i32 %143;
    i32 %160 = add i32 %144, i32 2;
    i32 %161 = add i32 %145, i32 -1;
    i32* %162 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %145];
    i32 %163 = load i32* %162;
    ubr ^while.header2;
^b20:
    i1 %164 = phi [^b17, i1 true] [^b19, i1 %157];
    cbr i1 %164(prob = 0.5), ^entry6, ^if.else1;
^b21:
    i1 %165 = scmp eq i32 %150, i32 45;
    ubr ^b22;
^b22:
    i1 %166 = phi [^while.header3, i1 true] [^b21, i1 %165];
    cbr i1 %166(prob = 0.5), ^b26, ^b24;
^while.header4:
    i32 %167 = phi [^b18, i32 %152] [^entry12, i32 %338];
    i32 %168 = phi [^b18, i32 %153] [^entry12, i32 %334];
    i32* %169 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %168];
    i32 %170 = load i32* %169;
    i1 %171 = scmp eq i32 %170, i32 43;
    cbr i1 %171(prob = 0.5), ^b27, ^b25;
^b23:
    i32 %172 = phi [^b18, i32 %154] [^entry11, i32 %333];
    i32 %173 = phi [^b18, i32 %152] [^entry11, i32 %329];
    i32 %174 = phi [^b18, i32 %153] [^entry11, i32 %331];
    i1 %175 = scmp eq i32 %172, i32 42;
    cbr i1 %175(prob = 0.5), ^while.header5, ^b28;
^entry6:
    i32* %176 = getelementptr &([10000 * i32]* @ints)[i64 0][i32 %106];
    i32 %177 = load i32* %176;
    i32* %178 = getelementptr &(i32* %176)[i64 -1];
    i32 %179 = load i32* %178;
    i32 %180 = load i32* %108;
    i1 %181 = scmp eq i32 %180, i32 43;
    cbr i1 %181(prob = 0.5), ^if.then1, ^b29;
^if.else1:
    i32 %182 = load i32* %108;
    i1 %183 = scmp neq i32 %182, i32 32;
    cbr i1 %183(prob = 0.5), ^if.then2, ^b31;
^b24:
    i32 %184 = load i32* %149;
    i1 %185 = scmp eq i32 %184, i32 42;
    ubr ^b26;
^b25:
    i1 %186 = scmp eq i32 %170, i32 45;
    ubr ^b27;
^b26:
    i1 %187 = phi [^b22, i1 true] [^b24, i1 %185];
    cbr i1 %187(prob = 0.5), ^b33, ^b30;
^b27:
    i1 %188 = phi [^while.header4, i1 true] [^b25, i1 %186];
    cbr i1 %188(prob = 0.5), ^b35, ^b32;
^while.header5:
    i32 %189 = phi [^b23, i32 %173] [^entry10, i32 %319];
    i32 %190 = phi [^b23, i32 %174] [^entry10, i32 %315];
    i32* %191 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %190];
    i32 %192 = load i32* %191;
    i1 %193 = scmp eq i32 %192, i32 42;
    cbr i1 %193(prob = 0.5), ^b36, ^b34;
^b28:
    i32 %194 = phi [^b23, i32 %173] [^entry9, i32 %309];
    i32 %195 = phi [^b23, i32 %174] [^entry9, i32 %311];
    i32 %196 = load i32* %14;
    i1 %197 = scmp eq i32 %196, i32 47;
    cbr i1 %197(prob = 0.5), ^while.header6, ^b37;
^if.then1:
    i32 %198 = add i32 %177, i32 %179;
    ubr ^b29;
^if.then2:
    i32 %199 = add i32 %182, i32 -48;
    i32 %200 = add i32 %106, i32 1;
    i32* %201 = getelementptr &([10000 * i32]* @ints)[i64 0][i32 %200];
    store i32* %201 with i32 %199;
    i32 %202 = add i32 %107, i32 1;
    i32* %203 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %202];
    i32 %204 = load i32* %203;
    i1 %205 = scmp neq i32 %204, i32 32;
    cbr i1 %205(prob = 0.97), ^while.body4, ^b38;
^b29:
    i32 %206 = phi [^entry6, i32 0] [^if.then1, i32 %198];
    i1 %207 = scmp eq i32 %180, i32 45;
    cbr i1 %207(prob = 0.5), ^if.then3, ^b40;
^b30:
    i32 %208 = load i32* %149;
    i1 %209 = scmp eq i32 %208, i32 47;
    ubr ^b33;
^b31:
    i32 %210 = phi [^if.else1, i32 %106] [^b38, i32 %200] [^b70, i32 %362];
    i32 %211 = phi [^if.else1, i32 %107] [^b38, i32 %234] [^b70, i32 %107];
    i32 %212 = add i32 %211, i32 1;
    i32* %213 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %212];
    i32 %214 = load i32* %213;
    i1 %215 = scmp neq i32 %214, i32 64;
    cbr i1 %215(prob = 0.97), ^while.body2, ^b5;
^b32:
    i32 %216 = load i32* %169;
    i1 %217 = scmp eq i32 %216, i32 42;
    ubr ^b35;
^b33:
    i1 %218 = phi [^b26, i1 true] [^b30, i1 %209];
    cbr i1 %218(prob = 0.5), ^b42, ^b39;
^b34:
    i1 %219 = scmp eq i32 %192, i32 47;
    ubr ^b36;
^b35:
    i1 %220 = phi [^b27, i1 true] [^b32, i1 %217];
    cbr i1 %220(prob = 0.5), ^b44, ^b41;
^b36:
    i1 %221 = phi [^while.header5, i1 true] [^b34, i1 %219];
    cbr i1 %221(prob = 0.5), ^b46, ^b43;
^while.header6:
    i32 %222 = phi [^b28, i32 %194] [^entry14, i32 %355];
    i32 %223 = phi [^b28, i32 %195] [^entry14, i32 %351];
    i32* %224 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %223];
    i32 %225 = load i32* %224;
    i1 %226 = scmp eq i32 %225, i32 42;
    cbr i1 %226(prob = 0.5), ^b48, ^b45;
^b37:
    i32 %227 = phi [^b28, i32 %194] [^entry13, i32 %345];
    i32 %228 = phi [^b28, i32 %195] [^entry13, i32 %347];
    i32 %229 = load i32* %14;
    i1 %230 = scmp eq i32 %229, i32 37;
    cbr i1 %230(prob = 0.5), ^while.header7, ^b47;
^if.then3:
    i32 %231 = sub i32 %179, i32 %177;
    ubr ^b40;
^b38:
    i32 %232 = phi [^if.then2, i32 1] [^while.body4, i32 %243];
    i32 %233 = add i32 %232, i32 -1;
    i32 %234 = add i32 %233, i32 %107;
    ubr ^b31;
^while.body4:
    i32 %235 = phi [^if.then2, i32 %199] [^indirect1, i32 %271];
    i32 %236 = phi [^if.then2, i32 1] [^indirect1, i32 %243];
    i32 %237 = add i32 %236, i32 %107;
    i32* %238 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %237];
    i32 %239 = load i32* %238;
    i32 %240 = mul i32 %235, i32 10;
    i32 %241 = add i32 %240, i32 -48;
    i32 %242 = add i32 %241, i32 %239;
    store i32* %201 with i32 %242;
    i32 %243 = add i32 %236, i32 1;
    i32 %244 = add i32 %236, i32 %202;
    i32* %245 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %244];
    i32 %246 = load i32* %245;
    i1 %247 = scmp neq i32 %246, i32 32;
    cbr i1 %247(prob = 0.97), ^indirect1, ^b38;
^b39:
    i32 %248 = load i32* %149;
    i1 %249 = scmp eq i32 %248, i32 37;
    ubr ^b42;
^b40:
    i32 %250 = phi [^b29, i32 %206] [^if.then3, i32 %231];
    i32 %251 = load i32* %108;
    i1 %252 = scmp eq i32 %251, i32 42;
    cbr i1 %252(prob = 0.5), ^if.then4, ^b52;
^b41:
    i32 %253 = load i32* %169;
    i1 %254 = scmp eq i32 %253, i32 47;
    ubr ^b44;
^b42:
    i1 %255 = phi [^b33, i1 true] [^b39, i1 %249];
    cbr i1 %255(prob = 0.5), ^b51, ^b49;
^b43:
    i32 %256 = load i32* %191;
    i1 %257 = scmp eq i32 %256, i32 37;
    ubr ^b46;
^b44:
    i1 %258 = phi [^b35, i1 true] [^b41, i1 %254];
    cbr i1 %258(prob = 0.5), ^b54, ^b50;
^b45:
    i1 %259 = scmp eq i32 %225, i32 47;
    ubr ^b48;
^b46:
    i1 %260 = phi [^b36, i1 true] [^b43, i1 %257];
    cbr i1 %260(prob = 0.5), ^b56, ^b53;
^b47:
    i32 %261 = phi [^b37, i32 %228] [^entry16, i32 %367];
    i32 %262 = phi [^b37, i32 %227] [^entry16, i32 %365];
    i32* %263 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %262];
    store i32* %263 with i32 32;
    i32 %264 = add i32 %262, i32 1;
    ubr ^b6;
^b48:
    i1 %265 = phi [^while.header6, i1 true] [^b45, i1 %259];
    cbr i1 %265(prob = 0.5), ^b58, ^b55;
^while.header7:
    i32 %266 = phi [^b37, i32 %227] [^entry17, i32 %373];
    i32 %267 = phi [^b37, i32 %228] [^entry17, i32 %369];
    i32* %268 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %267];
    i32 %269 = load i32* %268;
    i1 %270 = scmp eq i32 %269, i32 42;
    cbr i1 %270(prob = 0.5), ^b59, ^b57;
^indirect1:
    i32 %271 = load i32* %201;
    ubr ^while.body4;
^if.then4:
    i32 %272 = mul i32 %177, i32 %179;
    ubr ^b52;
^b49:
    i32 %273 = load i32* %149;
    i1 %274 = scmp eq i32 %273, i32 94;
    ubr ^b51;
^b50:
    i32 %275 = load i32* %169;
    i1 %276 = scmp eq i32 %275, i32 37;
    ubr ^b54;
^b51:
    i1 %277 = phi [^b42, i1 true] [^b49, i1 %274];
    cbr i1 %277(prob = 0.97), ^entry8, ^entry7;
^b52:
    i32 %278 = phi [^b40, i32 %250] [^if.then4, i32 %272];
    i1 %279 = scmp eq i32 %251, i32 47;
    cbr i1 %279(prob = 0.5), ^if.then5, ^b62;
^b53:
    i32 %280 = load i32* %191;
    i1 %281 = scmp eq i32 %280, i32 94;
    ubr ^b56;
^b54:
    i1 %282 = phi [^b44, i1 true] [^b50, i1 %276];
    cbr i1 %282(prob = 0.5), ^b61, ^b60;
^b55:
    i32 %283 = load i32* %224;
    i1 %284 = scmp eq i32 %283, i32 37;
    ubr ^b58;
^b56:
    i1 %285 = phi [^b46, i1 true] [^b53, i1 %281];
    cbr i1 %285(prob = 0.97), ^entry10, ^entry9;
^b57:
    i1 %286 = scmp eq i32 %269, i32 47;
    ubr ^b59;
^b58:
    i1 %287 = phi [^b48, i1 true] [^b55, i1 %284];
    cbr i1 %287(prob = 0.5), ^b65, ^b63;
^b59:
    i1 %288 = phi [^while.header7, i1 true] [^b57, i1 %286];
    cbr i1 %288(prob = 0.5), ^b66, ^b64;
^if.then5:
    i32 %289 = sdiv i32 %179, i32 %177;
    ubr ^b62;
^entry7:
    i32 %290 = phi [^b51, i32 %147] [^entry8, i32 %300];
    i32 %291 = phi [^b51, i32 %148] [^entry8, i32 %296];
    i32 %292 = add i32 %291, i32 1;
    i32* %293 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %292];
    store i32* %293 with i32 43;
    ubr ^b18;
^b60:
    i32 %294 = load i32* %169;
    i1 %295 = scmp eq i32 %294, i32 94;
    ubr ^b61;
^entry8:
    i32 %296 = add i32 %148, i32 -1;
    i32 %297 = load i32* %149;
    i32* %298 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %147];
    store i32* %298 with i32 32;
    i32* %299 = getelementptr &(i32* %298)[i64 1];
    store i32* %299 with i32 %297;
    i32 %300 = add i32 %147, i32 2;
    i1 %301 = scmp eq i32 %296, i32 0;
    i32 %302 = zext i1 %301 to i32;
    i32 %303 = sub i32 1, i32 %302;
    i1 %304 = scmp eq i32 %303, i32 0;
    cbr i1 %304(prob = 0.5), ^entry7, ^while.header3;
^b61:
    i1 %305 = phi [^b54, i1 true] [^b60, i1 %295];
    cbr i1 %305(prob = 0.97), ^entry12, ^entry11;
^b62:
    i32 %306 = phi [^b52, i32 %278] [^if.then5, i32 %289];
    i32 %307 = load i32* %108;
    i1 %308 = scmp eq i32 %307, i32 37;
    cbr i1 %308(prob = 0.5), ^if.then6, ^b67;
^entry9:
    i32 %309 = phi [^b56, i32 %189] [^entry10, i32 %319];
    i32 %310 = phi [^b56, i32 %190] [^entry10, i32 %315];
    i32 %311 = add i32 %310, i32 1;
    i32* %312 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %311];
    store i32* %312 with i32 42;
    ubr ^b28;
^b63:
    i32 %313 = load i32* %224;
    i1 %314 = scmp eq i32 %313, i32 94;
    ubr ^b65;
^entry10:
    i32 %315 = add i32 %190, i32 -1;
    i32 %316 = load i32* %191;
    i32* %317 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %189];
    store i32* %317 with i32 32;
    i32* %318 = getelementptr &(i32* %317)[i64 1];
    store i32* %318 with i32 %316;
    i32 %319 = add i32 %189, i32 2;
    i1 %320 = scmp eq i32 %315, i32 0;
    i32 %321 = zext i1 %320 to i32;
    i32 %322 = sub i32 1, i32 %321;
    i1 %323 = scmp eq i32 %322, i32 0;
    cbr i1 %323(prob = 0.5), ^entry9, ^while.header5;
^b64:
    i32 %324 = load i32* %268;
    i1 %325 = scmp eq i32 %324, i32 37;
    ubr ^b66;
^b65:
    i1 %326 = phi [^b58, i1 true] [^b63, i1 %314];
    cbr i1 %326(prob = 0.97), ^entry14, ^entry13;
^b66:
    i1 %327 = phi [^b59, i1 true] [^b64, i1 %325];
    cbr i1 %327(prob = 0.5), ^b69, ^b68;
^if.then6:
    i32 %328 = srem i32 %179, i32 %177;
    ubr ^b67;
^entry11:
    i32 %329 = phi [^b61, i32 %167] [^entry12, i32 %338];
    i32 %330 = phi [^b61, i32 %168] [^entry12, i32 %334];
    i32 %331 = add i32 %330, i32 1;
    i32* %332 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %331];
    store i32* %332 with i32 45;
    i32 %333 = load i32* %14;
    ubr ^b23;
^entry12:
    i32 %334 = add i32 %168, i32 -1;
    i32 %335 = load i32* %169;
    i32* %336 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %167];
    store i32* %336 with i32 32;
    i32* %337 = getelementptr &(i32* %336)[i64 1];
    store i32* %337 with i32 %335;
    i32 %338 = add i32 %167, i32 2;
    i1 %339 = scmp eq i32 %334, i32 0;
    i32 %340 = zext i1 %339 to i32;
    i32 %341 = sub i32 1, i32 %340;
    i1 %342 = scmp eq i32 %341, i32 0;
    cbr i1 %342(prob = 0.5), ^entry11, ^while.header4;
^b67:
    i32 %343 = phi [^b62, i32 %306] [^if.then6, i32 %328];
    i1 %344 = scmp eq i32 %307, i32 94;
    cbr i1 %344(prob = 0.5), ^entry15, ^b70;
^entry13:
    i32 %345 = phi [^b65, i32 %222] [^entry14, i32 %355];
    i32 %346 = phi [^b65, i32 %223] [^entry14, i32 %351];
    i32 %347 = add i32 %346, i32 1;
    i32* %348 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %347];
    store i32* %348 with i32 47;
    ubr ^b37;
^b68:
    i32 %349 = load i32* %268;
    i1 %350 = scmp eq i32 %349, i32 94;
    ubr ^b69;
^entry14:
    i32 %351 = add i32 %223, i32 -1;
    i32 %352 = load i32* %224;
    i32* %353 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %222];
    store i32* %353 with i32 32;
    i32* %354 = getelementptr &(i32* %353)[i64 1];
    store i32* %354 with i32 %352;
    i32 %355 = add i32 %222, i32 2;
    i1 %356 = scmp eq i32 %351, i32 0;
    i32 %357 = zext i1 %356 to i32;
    i32 %358 = sub i32 1, i32 %357;
    i1 %359 = scmp eq i32 %358, i32 0;
    cbr i1 %359(prob = 0.5), ^entry13, ^while.header6;
^b69:
    i1 %360 = phi [^b66, i1 true] [^b68, i1 %350];
    cbr i1 %360(prob = 0.97), ^entry17, ^entry16;
^b70:
    i32 %361 = phi [^b67, i32 %343] [^b71, i32 %378];
    i32 %362 = add i32 %106, i32 -1;
    i32* %363 = getelementptr &([10000 * i32]* @ints)[i64 0][i32 %362];
    store i32* %363 with i32 %361;
    ubr ^b31;
^entry15:
    i1 %364 = scmp neq i32 %177, i32 0;
    cbr i1 %364(prob = 0.97), ^while.body5, ^b71;
^entry16:
    i32 %365 = phi [^b69, i32 %266] [^entry17, i32 %373];
    i32 %366 = phi [^b69, i32 %267] [^entry17, i32 %369];
    i32 %367 = add i32 %366, i32 1;
    i32* %368 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %367];
    store i32* %368 with i32 37;
    ubr ^b47;
^entry17:
    i32 %369 = add i32 %267, i32 -1;
    i32 %370 = load i32* %268;
    i32* %371 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %266];
    store i32* %371 with i32 32;
    i32* %372 = getelementptr &(i32* %371)[i64 1];
    store i32* %372 with i32 %370;
    i32 %373 = add i32 %266, i32 2;
    i1 %374 = scmp eq i32 %369, i32 0;
    i32 %375 = zext i1 %374 to i32;
    i32 %376 = sub i32 1, i32 %375;
    i1 %377 = scmp eq i32 %376, i32 0;
    cbr i1 %377(prob = 0.5), ^entry16, ^while.header7;
^b71:
    i32 %378 = phi [^entry15, i32 1] [^while.body5, i32 %381];
    ubr ^b70;
^while.body5:
    i32 %379 = phi [^entry15, i32 1] [^while.body5, i32 %381];
    i32 %380 = phi [^entry15, i32 %177] [^while.body5, i32 %382];
    i32 %381 = mul i32 %179, i32 %379;
    i32 %382 = add i32 %380, i32 -1;
    i1 %383 = scmp neq i32 %382, i32 0;
    cbr i1 %383(prob = 0.97), ^while.body5, ^b71;
}
