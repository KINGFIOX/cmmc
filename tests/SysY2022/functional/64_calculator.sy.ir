internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal [10000 * i32]* @ints, align 8 { Flexible };
internal [10000 * i32]* @chas, align 8 { Flexible };
internal [10000 * i32]* @get, align 8 { Flexible };
internal [10000 * i32]* @get2, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = icmp neq i32 %0, i32 13;
    i1 %2 = icmp neq i32 %0, i32 10;
    i1 %3 = and i1 %1, i1 %2;
    [10000 * i32]* %4 = ptrcast [10000 * i32]* @get to [10000 * i32]*;
    i32* %5 = getelementptr &([10000 * i32]* %4)[i64 0][i64 0];
    [10000 * i32]* %6 = ptrcast [10000 * i32]* @chas to [10000 * i32]*;
    [10000 * i32]* %7 = ptrcast [10000 * i32]* @ints to [10000 * i32]*;
    [10000 * i32]* %8 = ptrcast [10000 * i32]* @get2 to [10000 * i32]*;
    cbr i1 %3(prob = 0.97), ^while.body, ^b;
  ^b:
    i32 %9 = phi [^entry, i32 0] [^while.body, i32 %17];
    ubr ^while.header;
  ^while.body:
    i32 %10 = phi [^entry, i32 %0] [^while.body, i32 %13];
    i32 %11 = phi [^entry, i32 0] [^while.body, i32 %17];
    i32* %12 = getelementptr &(i32* %5)[i32 %11];
    store i32* %12 with i32 %10;
    i32 %13 = call () -> i32 @getch();
    i1 %14 = icmp neq i32 %13, i32 13;
    i1 %15 = icmp neq i32 %13, i32 10;
    i1 %16 = and i1 %14, i1 %15;
    i32 %17 = add i32 %11, i32 1;
    cbr i1 %16(prob = 0.97), ^while.body, ^b;
  ^while.header:
    i32 %18 = phi [^b, i32 0] [^if.then, i32 %18] [^b14, i32 %258];
    i32 %19 = phi [^b, i32 1] [^if.then, i32 %28] [^b14, i32 %261];
    i32 %20 = phi [^b, i32 0] [^if.then, i32 %29] [^b14, i32 %262];
    i1 %21 = icmp sgt i32 %9, i32 %20;
    cbr i1 %21(prob = 0.97), ^while.body1, ^indirect;
  ^while.body1:
    i32* %22 = getelementptr &([10000 * i32]* %4)[i64 0][i32 %20];
    i32 %23 = load i32* %22;
    i32 %24 = add i32 %23, i32 -48;
    i1 %25 = icmp ult i32 %24, i32 10;
    cbr i1 %25(prob = 0.5), ^if.then, ^if.else;
  ^indirect:
    i1 %26 = icmp sgt i32 %18, i32 0;
    cbr i1 %26(prob = 0.97), ^indirect1, ^b1;
  ^if.then:
    i32* %27 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %19];
    store i32* %27 with i32 %23;
    i32 %28 = add i32 %19, i32 1;
    i32 %29 = add i32 %20, i32 1;
    ubr ^while.header;
  ^indirect1:
    i32 %30 = add i32 %18, i32 -4;
    i1 %31 = icmp sgt i32 %30, i32 0;
    cbr i1 %31(prob = 0.89), ^entry2, ^entry3;
  ^if.else:
    i1 %32 = icmp eq i32 %23, i32 40;
    cbr i1 %32(prob = 0.5), ^entry1, ^b2;
  ^b1:
    i32 %33 = phi [^indirect, i32 %19] [^entry3, i32 %71];
    i32* %34 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %33];
    store i32* %34 with i32 64;
    i32* %35 = getelementptr &([10000 * i32]* %8)[i64 0][i64 1];
    i32 %36 = load i32* %35;
    i1 %37 = icmp neq i32 %36, i32 64;
    cbr i1 %37(prob = 0.97), ^while.body2, ^b3;
  ^entry1:
    i32 %38 = add i32 %18, i32 1;
    i32* %39 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %38];
    store i32* %39 with i32 40;
    ubr ^b2;
  ^entry2:
    i32 %40 = phi [^indirect1, i32 %19] [^entry2, i32 %60];
    i32 %41 = phi [^indirect1, i32 %18] [^entry2, i32 %58];
    i32* %42 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %41];
    i32 %43 = load i32* %42;
    i32* %44 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %40];
    store i32* %44 with i32 32;
    i32* %45 = getelementptr &(i32* %44)[i64 1];
    store i32* %45 with i32 %43;
    i32* %46 = getelementptr &(i32* %42)[i64 -1];
    i32 %47 = load i32* %46;
    i32* %48 = getelementptr &(i32* %44)[i64 2];
    store i32* %48 with i32 32;
    i32* %49 = getelementptr &(i32* %44)[i64 3];
    store i32* %49 with i32 %47;
    i32* %50 = getelementptr &(i32* %42)[i64 -2];
    i32 %51 = load i32* %50;
    i32* %52 = getelementptr &(i32* %44)[i64 4];
    store i32* %52 with i32 32;
    i32* %53 = getelementptr &(i32* %44)[i64 5];
    store i32* %53 with i32 %51;
    i32* %54 = getelementptr &(i32* %42)[i64 -3];
    i32 %55 = load i32* %54;
    i32* %56 = getelementptr &(i32* %44)[i64 6];
    store i32* %56 with i32 32;
    i32* %57 = getelementptr &(i32* %44)[i64 7];
    store i32* %57 with i32 %55;
    i32 %58 = add i32 %41, i32 -4;
    i1 %59 = icmp sgt i32 %58, i32 4;
    i32 %60 = add i32 %40, i32 8;
    cbr i1 %59(prob = 0.89), ^entry2, ^entry3;
  ^b2:
    i32 %61 = phi [^if.else, i32 %18] [^entry1, i32 %38];
    i1 %62 = icmp eq i32 %23, i32 94;
    cbr i1 %62(prob = 0.5), ^entry4, ^b4;
  ^entry3 {scalar}:
    i32 %63 = phi [^indirect1, i32 %18] [^entry2, i32 %58] [^entry3, i32 %69];
    i32 %64 = phi [^indirect1, i32 %19] [^entry2, i32 %60] [^entry3, i32 %71];
    i32* %65 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %63];
    i32 %66 = load i32* %65;
    i32* %67 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %64];
    store i32* %67 with i32 32;
    i32* %68 = getelementptr &(i32* %67)[i64 1];
    store i32* %68 with i32 %66;
    i32 %69 = add i32 %63, i32 -1;
    i1 %70 = icmp sgt i32 %69, i32 0;
    i32 %71 = add i32 %64, i32 2;
    cbr i1 %70(prob = 0.75), ^entry3, ^b1;
  ^while.body2:
    i32 %72 = phi [^b1, i32 1] [^while.header2, i32 %164];
    i32 %73 = phi [^b1, i32 0] [^while.header2, i32 %163];
    i32* %74 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %72];
    i32 %75 = load i32* %74;
    i1 %76 = icmp eq i32 %75, i32 43;
    i1 %77 = icmp eq i32 %75, i32 45;
    i1 %78 = or i1 %76, i1 %77;
    i1 %79 = icmp eq i32 %75, i32 42;
    i1 %80 = icmp eq i32 %75, i32 47;
    i1 %81 = or i1 %79, i1 %80;
    i1 %82 = or i1 %78, i1 %81;
    i1 %83 = icmp eq i32 %75, i32 37;
    i1 %84 = icmp eq i32 %75, i32 94;
    i1 %85 = or i1 %83, i1 %84;
    i1 %86 = or i1 %82, i1 %85;
    cbr i1 %86(prob = 0.98), ^entry5, ^if.else1;
  ^b3:
    i32* %87 = getelementptr &([10000 * i32]* %7)[i64 0][i64 1];
    i32 %88 = load i32* %87;
    call (i32) -> void @putint(i32 %88);
    ret i32 0;
  ^entry4:
    i32 %89 = add i32 %61, i32 1;
    i32* %90 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %89];
    store i32* %90 with i32 94;
    ubr ^b4;
  ^entry5:
    i32* %91 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %73];
    i32 %92 = load i32* %91;
    i32* %93 = getelementptr &(i32* %91)[i64 -1];
    i32 %94 = load i32* %93;
    i32 %95 = add i32 %92, i32 %94;
    i32 %96 = select i1 %76 ? i32 %95 : i32 0;
    i32 %97 = sub i32 %94, i32 %92;
    i32 %98 = select i1 %77 ? i32 %97 : i32 %96;
    i32 %99 = mul i32 %92, i32 %94;
    i32 %100 = select i1 %79 ? i32 %99 : i32 %98;
    cbr i1 %80(prob = 0.5), ^if.then1, ^b5;
  ^b4:
    i32 %101 = phi [^b2, i32 %61] [^entry4, i32 %89];
    i1 %102 = icmp eq i32 %23, i32 41;
    cbr i1 %102(prob = 0.5), ^entry6, ^b6;
  ^if.else1:
    i1 %103 = icmp neq i32 %75, i32 32;
    cbr i1 %103(prob = 0.5), ^if.then2, ^indirect2;
  ^if.then1:
    i32 %104 = sdiv i32 %94, i32 %92;
    ubr ^b5;
  ^indirect2:
    i32 %105 = phi [^if.else1, i32 %73] [^b10, i32 %173];
    i32 %106 = add i32 %72, i32 1;
    ubr ^while.header2;
  ^entry6:
    i32* %107 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %101];
    i32 %108 = load i32* %107;
    i1 %109 = icmp neq i32 %108, i32 40;
    i32 %110 = add i32 %101, i32 -1;
    cbr i1 %109(prob = 0.97), ^while.body3, ^b6;
  ^if.then2:
    i32 %111 = add i32 %73, i32 1;
    i32* %112 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %111];
    i32 %113 = add i32 %75, i32 -48;
    store i32* %112 with i32 %113;
    i32 %114 = add i32 %72, i32 1;
    i32* %115 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %114];
    i32 %116 = load i32* %115;
    i1 %117 = icmp neq i32 %116, i32 32;
    cbr i1 %117(prob = 0.97), ^while.body4, ^b7;
  ^b5:
    i32 %118 = phi [^entry5, i32 %100] [^if.then1, i32 %104];
    cbr i1 %83(prob = 0.5), ^if.then3, ^b8;
  ^b6:
    i32 %119 = phi [^b4, i32 %19] [^entry6, i32 %19] [^while.body3, i32 %133];
    i32 %120 = phi [^b4, i32 %101] [^entry6, i32 %110] [^while.body3, i32 %134];
    i1 %121 = icmp eq i32 %23, i32 43;
    cbr i1 %121(prob = 0.5), ^while.header1, ^b9;
  ^if.then3:
    i32 %122 = srem i32 %94, i32 %92;
    ubr ^b8;
  ^b7:
    i32 %123 = phi [^if.then2, i32 1] [^while.body4, i32 %147];
    i32 %124 = add i32 %72, i32 %123;
    ubr ^while.header2;
  ^while.body3:
    i32 %125 = phi [^entry6, i32 %110] [^while.body3, i32 %134];
    i32 %126 = phi [^entry6, i32 %19] [^while.body3, i32 %133];
    i32 %127 = phi [^entry6, i32 %108] [^while.body3, i32 %131];
    i32* %128 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %126];
    store i32* %128 with i32 32;
    i32* %129 = getelementptr &(i32* %128)[i64 1];
    store i32* %129 with i32 %127;
    i32* %130 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %125];
    i32 %131 = load i32* %130;
    i1 %132 = icmp neq i32 %131, i32 40;
    i32 %133 = add i32 %126, i32 2;
    i32 %134 = add i32 %125, i32 -1;
    cbr i1 %132(prob = 0.97), ^while.body3, ^b6;
  ^while.body4:
    i32 %135 = phi [^if.then2, i32 %113] [^while.body4, i32 %142];
    i32 %136 = phi [^if.then2, i32 1] [^while.body4, i32 %147];
    i32 %137 = add i32 %72, i32 %136;
    i32* %138 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %137];
    i32 %139 = load i32* %138;
    i32 %140 = mul i32 %135, i32 10;
    i32 %141 = add i32 %140, i32 -48;
    i32 %142 = add i32 %139, i32 %141;
    store i32* %112 with i32 %142;
    i32 %143 = add i32 %114, i32 %136;
    i32* %144 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %143];
    i32 %145 = load i32* %144;
    i1 %146 = icmp neq i32 %145, i32 32;
    i32 %147 = add i32 %136, i32 1;
    cbr i1 %146(prob = 0.97), ^while.body4, ^b7;
  ^while.header1:
    i32 %148 = phi [^b6, i32 %119] [^entry8, i32 %183];
    i32 %149 = phi [^b6, i32 %120] [^entry8, i32 %181];
    i32* %150 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %149];
    i32 %151 = load i32* %150;
    i1 %152 = icmp eq i32 %151, i32 43;
    i1 %153 = icmp eq i32 %151, i32 45;
    i1 %154 = or i1 %152, i1 %153;
    i1 %155 = icmp eq i32 %151, i32 42;
    i1 %156 = icmp eq i32 %151, i32 47;
    i1 %157 = or i1 %155, i1 %156;
    i1 %158 = or i1 %154, i1 %157;
    i1 %159 = icmp eq i32 %151, i32 37;
    i1 %160 = icmp eq i32 %151, i32 94;
    i1 %161 = or i1 %159, i1 %160;
    i1 %162 = or i1 %158, i1 %161;
    cbr i1 %162(prob = 1), ^entry8, ^entry7;
  ^while.header2:
    i32 %163 = phi [^indirect2, i32 %105] [^b7, i32 %111];
    i32 %164 = phi [^indirect2, i32 %106] [^b7, i32 %124];
    i32* %165 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %164];
    i32 %166 = load i32* %165;
    i1 %167 = icmp neq i32 %166, i32 64;
    cbr i1 %167(prob = 0.97), ^while.body2, ^b3;
  ^b8:
    i32 %168 = phi [^b5, i32 %118] [^if.then3, i32 %122];
    cbr i1 %84(prob = 0.5), ^entry9, ^b10;
  ^b9:
    i32 %169 = phi [^b6, i32 %119] [^entry7, i32 %175];
    i32 %170 = phi [^b6, i32 %120] [^entry7, i32 %177];
    i1 %171 = icmp eq i32 %23, i32 45;
    cbr i1 %171(prob = 0.5), ^while.header3, ^b11;
  ^b10:
    i32 %172 = phi [^b8, i32 %168] [^entry9, i32 1] [^while.body5, i32 %205];
    i32 %173 = add i32 %73, i32 -1;
    i32* %174 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %173];
    store i32* %174 with i32 %172;
    ubr ^indirect2;
  ^entry7:
    i32 %175 = phi [^while.header1, i32 %148] [^entry8, i32 %183];
    i32 %176 = phi [^while.header1, i32 %149] [^entry8, i32 %181];
    i32 %177 = add i32 %176, i32 1;
    i32* %178 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %177];
    store i32* %178 with i32 43;
    ubr ^b9;
  ^entry8:
    i32* %179 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %148];
    store i32* %179 with i32 32;
    i32* %180 = getelementptr &(i32* %179)[i64 1];
    store i32* %180 with i32 %151;
    i32 %181 = add i32 %149, i32 -1;
    i1 %182 = icmp eq i32 %181, i32 0;
    i32 %183 = add i32 %148, i32 2;
    cbr i1 %182(prob = 0.5), ^entry7, ^while.header1;
  ^entry9:
    i1 %184 = icmp neq i32 %92, i32 0;
    cbr i1 %184(prob = 0.97), ^while.body5, ^b10;
  ^while.header3:
    i32 %185 = phi [^b9, i32 %169] [^entry11, i32 %216];
    i32 %186 = phi [^b9, i32 %170] [^entry11, i32 %214];
    i32* %187 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %186];
    i32 %188 = load i32* %187;
    i1 %189 = icmp eq i32 %188, i32 43;
    i1 %190 = icmp eq i32 %188, i32 45;
    i1 %191 = or i1 %189, i1 %190;
    i1 %192 = icmp eq i32 %188, i32 42;
    i1 %193 = icmp eq i32 %188, i32 47;
    i1 %194 = or i1 %192, i1 %193;
    i1 %195 = or i1 %191, i1 %194;
    i1 %196 = icmp eq i32 %188, i32 37;
    i1 %197 = icmp eq i32 %188, i32 94;
    i1 %198 = or i1 %196, i1 %197;
    i1 %199 = or i1 %195, i1 %198;
    cbr i1 %199(prob = 1), ^entry11, ^entry10;
  ^b11:
    i32 %200 = phi [^b9, i32 %169] [^entry10, i32 %208];
    i32 %201 = phi [^b9, i32 %170] [^entry10, i32 %210];
    i1 %202 = icmp eq i32 %23, i32 42;
    cbr i1 %202(prob = 0.5), ^while.header4, ^b12;
  ^while.body5:
    i32 %203 = phi [^entry9, i32 %92] [^while.body5, i32 %206];
    i32 %204 = phi [^entry9, i32 1] [^while.body5, i32 %205];
    i32 %205 = mul i32 %94, i32 %204;
    i32 %206 = add i32 %203, i32 -1;
    i1 %207 = icmp neq i32 %206, i32 0;
    cbr i1 %207(prob = 0.97), ^while.body5, ^b10;
  ^entry10:
    i32 %208 = phi [^while.header3, i32 %185] [^entry11, i32 %216];
    i32 %209 = phi [^while.header3, i32 %186] [^entry11, i32 %214];
    i32 %210 = add i32 %209, i32 1;
    i32* %211 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %210];
    store i32* %211 with i32 45;
    ubr ^b11;
  ^entry11:
    i32* %212 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %185];
    store i32* %212 with i32 32;
    i32* %213 = getelementptr &(i32* %212)[i64 1];
    store i32* %213 with i32 %188;
    i32 %214 = add i32 %186, i32 -1;
    i1 %215 = icmp eq i32 %214, i32 0;
    i32 %216 = add i32 %185, i32 2;
    cbr i1 %215(prob = 0.5), ^entry10, ^while.header3;
  ^while.header4:
    i32 %217 = phi [^b11, i32 %200] [^entry13, i32 %239];
    i32 %218 = phi [^b11, i32 %201] [^entry13, i32 %237];
    i32* %219 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %218];
    i32 %220 = load i32* %219;
    i1 %221 = icmp eq i32 %220, i32 42;
    i1 %222 = icmp eq i32 %220, i32 47;
    i1 %223 = or i1 %221, i1 %222;
    i1 %224 = icmp eq i32 %220, i32 37;
    i1 %225 = icmp eq i32 %220, i32 94;
    i1 %226 = or i1 %224, i1 %225;
    i1 %227 = or i1 %223, i1 %226;
    cbr i1 %227(prob = 1), ^entry13, ^entry12;
  ^b12:
    i32 %228 = phi [^b11, i32 %200] [^entry12, i32 %231];
    i32 %229 = phi [^b11, i32 %201] [^entry12, i32 %233];
    i1 %230 = icmp eq i32 %23, i32 47;
    cbr i1 %230(prob = 0.5), ^while.header5, ^b13;
  ^entry12:
    i32 %231 = phi [^while.header4, i32 %217] [^entry13, i32 %239];
    i32 %232 = phi [^while.header4, i32 %218] [^entry13, i32 %237];
    i32 %233 = add i32 %232, i32 1;
    i32* %234 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %233];
    store i32* %234 with i32 42;
    ubr ^b12;
  ^entry13:
    i32* %235 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %217];
    store i32* %235 with i32 32;
    i32* %236 = getelementptr &(i32* %235)[i64 1];
    store i32* %236 with i32 %220;
    i32 %237 = add i32 %218, i32 -1;
    i1 %238 = icmp eq i32 %237, i32 0;
    i32 %239 = add i32 %217, i32 2;
    cbr i1 %238(prob = 0.5), ^entry12, ^while.header4;
  ^while.header5:
    i32 %240 = phi [^b12, i32 %228] [^entry15, i32 %267];
    i32 %241 = phi [^b12, i32 %229] [^entry15, i32 %265];
    i32* %242 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %241];
    i32 %243 = load i32* %242;
    i1 %244 = icmp eq i32 %243, i32 42;
    i1 %245 = icmp eq i32 %243, i32 47;
    i1 %246 = or i1 %244, i1 %245;
    i1 %247 = icmp eq i32 %243, i32 37;
    i1 %248 = icmp eq i32 %243, i32 94;
    i1 %249 = or i1 %247, i1 %248;
    i1 %250 = or i1 %246, i1 %249;
    cbr i1 %250(prob = 1), ^entry15, ^entry14;
  ^b13:
    i32 %251 = phi [^b12, i32 %228] [^entry14, i32 %254];
    i32 %252 = phi [^b12, i32 %229] [^entry14, i32 %256];
    i1 %253 = icmp eq i32 %23, i32 37;
    cbr i1 %253(prob = 0.5), ^while.header6, ^b14;
  ^entry14:
    i32 %254 = phi [^while.header5, i32 %240] [^entry15, i32 %267];
    i32 %255 = phi [^while.header5, i32 %241] [^entry15, i32 %265];
    i32 %256 = add i32 %255, i32 1;
    i32* %257 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %256];
    store i32* %257 with i32 47;
    ubr ^b13;
  ^b14:
    i32 %258 = phi [^b13, i32 %252] [^entry16, i32 %281];
    i32 %259 = phi [^b13, i32 %251] [^entry16, i32 %279];
    i32* %260 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %259];
    store i32* %260 with i32 32;
    i32 %261 = add i32 %259, i32 1;
    i32 %262 = add i32 %20, i32 1;
    ubr ^while.header;
  ^entry15:
    i32* %263 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %240];
    store i32* %263 with i32 32;
    i32* %264 = getelementptr &(i32* %263)[i64 1];
    store i32* %264 with i32 %243;
    i32 %265 = add i32 %241, i32 -1;
    i1 %266 = icmp eq i32 %265, i32 0;
    i32 %267 = add i32 %240, i32 2;
    cbr i1 %266(prob = 0.5), ^entry14, ^while.header5;
  ^while.header6:
    i32 %268 = phi [^b13, i32 %251] [^entry17, i32 %287];
    i32 %269 = phi [^b13, i32 %252] [^entry17, i32 %285];
    i32* %270 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %269];
    i32 %271 = load i32* %270;
    i1 %272 = icmp eq i32 %271, i32 42;
    i1 %273 = icmp eq i32 %271, i32 47;
    i1 %274 = or i1 %272, i1 %273;
    i1 %275 = icmp eq i32 %271, i32 37;
    i1 %276 = icmp eq i32 %271, i32 94;
    i1 %277 = or i1 %275, i1 %276;
    i1 %278 = or i1 %274, i1 %277;
    cbr i1 %278(prob = 1), ^entry17, ^entry16;
  ^entry16:
    i32 %279 = phi [^while.header6, i32 %268] [^entry17, i32 %287];
    i32 %280 = phi [^while.header6, i32 %269] [^entry17, i32 %285];
    i32 %281 = add i32 %280, i32 1;
    i32* %282 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %281];
    store i32* %282 with i32 37;
    ubr ^b14;
  ^entry17:
    i32* %283 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %268];
    store i32* %283 with i32 32;
    i32* %284 = getelementptr &(i32* %283)[i64 1];
    store i32* %284 with i32 %271;
    i32 %285 = add i32 %269, i32 -1;
    i1 %286 = icmp eq i32 %285, i32 0;
    i32 %287 = add i32 %268, i32 2;
    cbr i1 %286(prob = 0.5), ^entry16, ^while.header6;
}
