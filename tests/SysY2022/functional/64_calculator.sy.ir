internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal [10000 * i32]* @ints;
internal [10000 * i32]* @chas;
internal [10000 * i32]* @get;
internal [10000 * i32]* @get2;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = scmp neq i32 %0, i32 13;
    cbr i1 %1(prob = 0.5), ^b, ^b1;
^b:
    i32* %2 = getelementptr &([10000 * i32]* @get)[i64 0][i64 0];
    i1 %3 = scmp neq i32 %0, i32 10;
    cbr i1 %3(prob = 0.97), ^while.body, ^b1;
^b1:
    i32 %4 = phi [^entry, i32 0] [^b, i32 0] [^b4, i32 %9];
    i1 %5 = scmp gt i32 %4, i32 0;
    cbr i1 %5(prob = 0.97), ^while.body1, ^while.guard;
^while.body:
    i32 %6 = phi [^b, i32 %0] [^b4, i32 %10];
    i32 %7 = phi [^b, i32 0] [^b4, i32 %9];
    i32* %8 = getelementptr &(i32* %2)[i32 %7];
    store i32* %8 with i32 %6;
    i32 %9 = add i32 %7, i32 1;
    i32 %10 = call () -> i32 @getch();
    i1 %11 = scmp neq i32 %10, i32 13;
    cbr i1 %11(prob = 0.5), ^b2, ^b4;
^while.body1:
    i32 %12 = phi [^b1, i32 1] [^b8, i32 %118];
    i32 %13 = phi [^b1, i32 0] [^b8, i32 %119];
    i32 %14 = phi [^b1, i32 0] [^b8, i32 %120];
    i32* %15 = getelementptr &([10000 * i32]* @get)[i64 0][i32 %14];
    i32 %16 = load i32* %15;
    i1 %17 = scmp gt i32 %16, i32 47;
    cbr i1 %17(prob = 0.5), ^b3, ^b5;
^while.guard:
    i32 %18 = phi [^b1, i32 1] [^b8, i32 %118];
    i32 %19 = phi [^b1, i32 0] [^b8, i32 %119];
    i1 %20 = scmp gt i32 %19, i32 0;
    cbr i1 %20(prob = 0.97), ^super.header, ^b6;
^b2:
    i1 %21 = scmp neq i32 %10, i32 10;
    ubr ^b4;
^b3:
    i1 %22 = scmp le i32 %16, i32 57;
    ubr ^b5;
^b4:
    i1 %23 = phi [^while.body, i1 false] [^b2, i1 %21];
    cbr i1 %23(prob = 0.97), ^while.body, ^b1;
^b5:
    i1 %24 = phi [^while.body1, i1 false] [^b3, i1 %22];
    cbr i1 %24(prob = 0.5), ^if.then, ^if.else;
^super.header:
    i32 %25 = phi [^while.guard, i32 %19] [^entry1, i32 %27];
    i32 %26 = phi [^while.guard, i32 %18] [^entry1, i32 %101];
    i32 %27 = add i32 %25, i32 -16;
    i1 %28 = scmp gt i32 %27, i32 0;
    cbr i1 %28(prob = 0.67), ^entry1, ^entry2;
^b6:
    i32 %29 = phi [^while.guard, i32 %18] [^entry2, i32 %111];
    i32* %30 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %29];
    store i32* %30 with i32 64;
    i32* %31 = getelementptr &([10000 * i32]* @get2)[i64 0][i64 1];
    i32 %32 = load i32* %31;
    i1 %33 = scmp neq i32 %32, i32 64;
    cbr i1 %33(prob = 0.97), ^while.body2, ^b7;
^if.then:
    i32* %34 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %12];
    i32 %35 = load i32* %15;
    store i32* %34 with i32 %35;
    i32 %36 = add i32 %12, i32 1;
    ubr ^b8;
^entry1:
    i32* %37 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %25];
    i32 %38 = load i32* %37;
    i32* %39 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %26];
    store i32* %39 with i32 32;
    i32* %40 = getelementptr &(i32* %39)[i64 1];
    store i32* %40 with i32 %38;
    i32* %41 = getelementptr &(i32* %37)[i64 -1];
    i32 %42 = load i32* %41;
    i32* %43 = getelementptr &(i32* %39)[i64 2];
    store i32* %43 with i32 32;
    i32* %44 = getelementptr &(i32* %39)[i64 3];
    store i32* %44 with i32 %42;
    i32* %45 = getelementptr &(i32* %37)[i64 -2];
    i32 %46 = load i32* %45;
    i32* %47 = getelementptr &(i32* %39)[i64 4];
    store i32* %47 with i32 32;
    i32* %48 = getelementptr &(i32* %39)[i64 5];
    store i32* %48 with i32 %46;
    i32* %49 = getelementptr &(i32* %37)[i64 -3];
    i32 %50 = load i32* %49;
    i32* %51 = getelementptr &(i32* %39)[i64 6];
    store i32* %51 with i32 32;
    i32* %52 = getelementptr &(i32* %39)[i64 7];
    store i32* %52 with i32 %50;
    i32* %53 = getelementptr &(i32* %37)[i64 -4];
    i32 %54 = load i32* %53;
    i32* %55 = getelementptr &(i32* %39)[i64 8];
    store i32* %55 with i32 32;
    i32* %56 = getelementptr &(i32* %39)[i64 9];
    store i32* %56 with i32 %54;
    i32* %57 = getelementptr &(i32* %37)[i64 -5];
    i32 %58 = load i32* %57;
    i32* %59 = getelementptr &(i32* %39)[i64 10];
    store i32* %59 with i32 32;
    i32* %60 = getelementptr &(i32* %39)[i64 11];
    store i32* %60 with i32 %58;
    i32* %61 = getelementptr &(i32* %37)[i64 -6];
    i32 %62 = load i32* %61;
    i32* %63 = getelementptr &(i32* %39)[i64 12];
    store i32* %63 with i32 32;
    i32* %64 = getelementptr &(i32* %39)[i64 13];
    store i32* %64 with i32 %62;
    i32* %65 = getelementptr &(i32* %37)[i64 -7];
    i32 %66 = load i32* %65;
    i32* %67 = getelementptr &(i32* %39)[i64 14];
    store i32* %67 with i32 32;
    i32* %68 = getelementptr &(i32* %39)[i64 15];
    store i32* %68 with i32 %66;
    i32* %69 = getelementptr &(i32* %37)[i64 -8];
    i32 %70 = load i32* %69;
    i32* %71 = getelementptr &(i32* %39)[i64 16];
    store i32* %71 with i32 32;
    i32* %72 = getelementptr &(i32* %39)[i64 17];
    store i32* %72 with i32 %70;
    i32* %73 = getelementptr &(i32* %37)[i64 -9];
    i32 %74 = load i32* %73;
    i32* %75 = getelementptr &(i32* %39)[i64 18];
    store i32* %75 with i32 32;
    i32* %76 = getelementptr &(i32* %39)[i64 19];
    store i32* %76 with i32 %74;
    i32* %77 = getelementptr &(i32* %37)[i64 -10];
    i32 %78 = load i32* %77;
    i32* %79 = getelementptr &(i32* %39)[i64 20];
    store i32* %79 with i32 32;
    i32* %80 = getelementptr &(i32* %39)[i64 21];
    store i32* %80 with i32 %78;
    i32* %81 = getelementptr &(i32* %37)[i64 -11];
    i32 %82 = load i32* %81;
    i32* %83 = getelementptr &(i32* %39)[i64 22];
    store i32* %83 with i32 32;
    i32* %84 = getelementptr &(i32* %39)[i64 23];
    store i32* %84 with i32 %82;
    i32* %85 = getelementptr &(i32* %37)[i64 -12];
    i32 %86 = load i32* %85;
    i32* %87 = getelementptr &(i32* %39)[i64 24];
    store i32* %87 with i32 32;
    i32* %88 = getelementptr &(i32* %39)[i64 25];
    store i32* %88 with i32 %86;
    i32* %89 = getelementptr &(i32* %37)[i64 -13];
    i32 %90 = load i32* %89;
    i32* %91 = getelementptr &(i32* %39)[i64 26];
    store i32* %91 with i32 32;
    i32* %92 = getelementptr &(i32* %39)[i64 27];
    store i32* %92 with i32 %90;
    i32* %93 = getelementptr &(i32* %37)[i64 -14];
    i32 %94 = load i32* %93;
    i32* %95 = getelementptr &(i32* %39)[i64 28];
    store i32* %95 with i32 32;
    i32* %96 = getelementptr &(i32* %39)[i64 29];
    store i32* %96 with i32 %94;
    i32* %97 = getelementptr &(i32* %37)[i64 -15];
    i32 %98 = load i32* %97;
    i32* %99 = getelementptr &(i32* %39)[i64 30];
    store i32* %99 with i32 32;
    i32* %100 = getelementptr &(i32* %39)[i64 31];
    store i32* %100 with i32 %98;
    i32 %101 = add i32 %26, i32 32;
    ubr ^super.header;
^if.else:
    i32 %102 = load i32* %15;
    i1 %103 = scmp eq i32 %102, i32 40;
    cbr i1 %103(prob = 0.5), ^entry3, ^b10;
^entry2:
    i32 %104 = phi [^super.header, i32 %25] [^entry2, i32 %106];
    i32 %105 = phi [^super.header, i32 %26] [^entry2, i32 %111];
    i32 %106 = add i32 %104, i32 -1;
    i32* %107 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %104];
    i32 %108 = load i32* %107;
    i32* %109 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %105];
    store i32* %109 with i32 32;
    i32* %110 = getelementptr &(i32* %109)[i64 1];
    store i32* %110 with i32 %108;
    i32 %111 = add i32 %105, i32 2;
    i1 %112 = scmp gt i32 %106, i32 0;
    cbr i1 %112(prob = 0.97), ^entry2, ^b6;
^while.body2:
    i1 %113 = scmp eq i32 %32, i32 43;
    cbr i1 %113(prob = 0.5), ^entry4, ^b9;
^b7:
    i32* %114 = getelementptr &([10000 * i32]* @ints)[i64 0][i64 1];
    i32 %115 = load i32* %114;
    call (i32) -> void @putint(i32 %115);
    ret i32 0;
^entry3:
    i32 %116 = add i32 %13, i32 1;
    i32* %117 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %116];
    store i32* %117 with i32 40;
    ubr ^b10;
^b8:
    i32 %118 = phi [^if.then, i32 %36] [^b47, i32 %336];
    i32 %119 = phi [^if.then, i32 %13] [^b47, i32 %333];
    i32 %120 = add i32 %14, i32 1;
    i1 %121 = scmp lt i32 %120, i32 %4;
    cbr i1 %121(prob = 0.97), ^while.body1, ^while.guard;
^b9:
    i32 %122 = phi [^while.body2, i32 0] [^while.body6, i32 %338];
    i32 %123 = phi [^while.body2, i32 1] [^while.body6, i32 %340];
    i32* %124 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %123];
    i32 %125 = load i32* %124;
    i1 %126 = scmp eq i32 %125, i32 45;
    ubr ^b11;
^entry4:
    i32 %127 = phi [^while.body2, i32 1] [^b29, i32 %142];
    i32 %128 = phi [^while.body2, i32 0] [^b29, i32 %141];
    i32* %129 = getelementptr &([10000 * i32]* @ints)[i64 0][i32 %128];
    i32 %130 = load i32* %129;
    i32* %131 = getelementptr &(i32* %129)[i64 -1];
    i32 %132 = load i32* %131;
    i32* %133 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %127];
    i32 %134 = load i32* %133;
    i1 %135 = scmp eq i32 %134, i32 43;
    cbr i1 %135(prob = 0.5), ^if.then1, ^b12;
^b10:
    i32 %136 = phi [^if.else, i32 %13] [^entry3, i32 %116];
    i1 %137 = scmp eq i32 %102, i32 94;
    cbr i1 %137(prob = 0.5), ^entry5, ^b13;
^if.then1:
    i32 %138 = add i32 %130, i32 %132;
    ubr ^b12;
^entry5:
    i32 %139 = add i32 %136, i32 1;
    i32* %140 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %139];
    store i32* %140 with i32 94;
    ubr ^b13;
^b11:
    i32 %141 = phi [^b9, i32 %122] [^while.body6, i32 %338];
    i32 %142 = phi [^b9, i32 %123] [^while.body6, i32 %340];
    i1 %143 = phi [^b9, i1 %126] [^while.body6, i1 true];
    cbr i1 %143(prob = 0.5), ^b15, ^b14;
^b12:
    i32 %144 = phi [^entry4, i32 0] [^if.then1, i32 %138];
    i1 %145 = scmp eq i32 %134, i32 45;
    cbr i1 %145(prob = 0.5), ^if.then2, ^b16;
^b13:
    i32 %146 = phi [^b10, i32 %136] [^entry5, i32 %139];
    i32 %147 = load i32* %15;
    i1 %148 = scmp eq i32 %147, i32 41;
    cbr i1 %148(prob = 0.5), ^entry6, ^b17;
^if.then2:
    i32 %149 = sub i32 %132, i32 %130;
    ubr ^b16;
^b14:
    i32* %150 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %142];
    i32 %151 = load i32* %150;
    i1 %152 = scmp eq i32 %151, i32 42;
    ubr ^b15;
^b15:
    i1 %153 = phi [^b11, i1 true] [^b14, i1 %152];
    cbr i1 %153(prob = 0.5), ^b19, ^b18;
^entry6:
    i32 %154 = add i32 %146, i32 -1;
    i32* %155 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %146];
    i32 %156 = load i32* %155;
    i1 %157 = scmp neq i32 %156, i32 40;
    cbr i1 %157(prob = 0.97), ^while.body3, ^b17;
^b16:
    i32 %158 = phi [^b12, i32 %144] [^if.then2, i32 %149];
    i32 %159 = load i32* %133;
    i1 %160 = scmp eq i32 %159, i32 42;
    cbr i1 %160(prob = 0.5), ^if.then3, ^b20;
^b17:
    i32 %161 = phi [^b13, i32 %12] [^entry6, i32 %12] [^while.body3, i32 %175];
    i32 %162 = phi [^b13, i32 %146] [^entry6, i32 %154] [^while.body3, i32 %176];
    i32 %163 = load i32* %15;
    i1 %164 = scmp eq i32 %163, i32 43;
    cbr i1 %164(prob = 0.5), ^while.guard1, ^b21;
^b18:
    i32* %165 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %142];
    i32 %166 = load i32* %165;
    i1 %167 = scmp eq i32 %166, i32 47;
    ubr ^b19;
^if.then3:
    i32 %168 = mul i32 %130, i32 %132;
    ubr ^b20;
^b19:
    i1 %169 = phi [^b15, i1 true] [^b18, i1 %167];
    cbr i1 %169(prob = 0.5), ^b23, ^b22;
^while.body3:
    i32 %170 = phi [^entry6, i32 %154] [^while.body3, i32 %176];
    i32 %171 = phi [^entry6, i32 %12] [^while.body3, i32 %175];
    i32 %172 = phi [^entry6, i32 %156] [^while.body3, i32 %178];
    i32* %173 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %171];
    store i32* %173 with i32 32;
    i32* %174 = getelementptr &(i32* %173)[i64 1];
    store i32* %174 with i32 %172;
    i32 %175 = add i32 %171, i32 2;
    i32 %176 = add i32 %170, i32 -1;
    i32* %177 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %170];
    i32 %178 = load i32* %177;
    i1 %179 = scmp neq i32 %178, i32 40;
    cbr i1 %179(prob = 0.97), ^while.body3, ^b17;
^while.guard1:
    i32* %180 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %162];
    i32 %181 = load i32* %180;
    i1 %182 = scmp eq i32 %181, i32 43;
    cbr i1 %182(prob = 0.5), ^b24, ^b25;
^b20:
    i32 %183 = phi [^b16, i32 %158] [^if.then3, i32 %168];
    i1 %184 = scmp eq i32 %159, i32 47;
    cbr i1 %184(prob = 0.5), ^if.then4, ^b26;
^b21:
    i32 %185 = phi [^b17, i32 %161] [^entry8, i32 %240];
    i32 %186 = phi [^b17, i32 %162] [^entry8, i32 %242];
    i32 %187 = load i32* %15;
    i1 %188 = scmp eq i32 %187, i32 45;
    cbr i1 %188(prob = 0.5), ^while.guard2, ^b27;
^b22:
    i32* %189 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %142];
    i32 %190 = load i32* %189;
    i1 %191 = scmp eq i32 %190, i32 37;
    ubr ^b23;
^b23:
    i1 %192 = phi [^b19, i1 true] [^b22, i1 %191];
    cbr i1 %192(prob = 0.5), ^b29, ^b28;
^if.then4:
    i32 %193 = sdiv i32 %132, i32 %130;
    ubr ^b26;
^b24:
    i1 %194 = phi [^while.guard1, i1 true] [^b30, i1 %212];
    cbr i1 %194(prob = 0.5), ^entry7, ^b31;
^b25:
    i1 %195 = scmp eq i32 %181, i32 45;
    cbr i1 %195(prob = 0.5), ^entry7, ^b30;
^while.guard2:
    i32* %196 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %186];
    i32 %197 = load i32* %196;
    i1 %198 = scmp eq i32 %197, i32 43;
    cbr i1 %198(prob = 0.5), ^b32, ^b33;
^b26:
    i32 %199 = phi [^b20, i32 %183] [^if.then4, i32 %193];
    i32 %200 = load i32* %133;
    i1 %201 = scmp eq i32 %200, i32 37;
    cbr i1 %201(prob = 0.5), ^if.then5, ^b34;
^b27:
    i32 %202 = phi [^b21, i32 %185] [^entry11, i32 %295];
    i32 %203 = phi [^b21, i32 %186] [^entry11, i32 %297];
    i32 %204 = load i32* %15;
    i1 %205 = scmp eq i32 %204, i32 42;
    cbr i1 %205(prob = 0.5), ^while.guard3, ^b35;
^b28:
    i32* %206 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %142];
    i32 %207 = load i32* %206;
    i1 %208 = scmp eq i32 %207, i32 94;
    ubr ^b29;
^b29:
    i1 %209 = phi [^b23, i1 true] [^b28, i1 %208];
    cbr i1 %209(prob = 0.5), ^entry4, ^if.else1;
^if.then5:
    i32 %210 = srem i32 %132, i32 %130;
    ubr ^b34;
^b30:
    i32 %211 = load i32* %180;
    i1 %212 = scmp eq i32 %211, i32 42;
    ubr ^b24;
^entry7:
    i32 %213 = phi [^b24, i32 %161] [^b25, i32 %161] [^b31, i32 %161] [^b37, i32 %220] [^b40, i32 %276];
    i32 %214 = phi [^b24, i32 %162] [^b25, i32 %162] [^b31, i32 %162] [^b37, i32 %215] [^b40, i32 %277];
    i32 %215 = add i32 %214, i32 -1;
    i32* %216 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %214];
    i32 %217 = load i32* %216;
    i32* %218 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %213];
    store i32* %218 with i32 32;
    i32* %219 = getelementptr &(i32* %218)[i64 1];
    store i32* %219 with i32 %217;
    i32 %220 = add i32 %213, i32 2;
    i1 %221 = scmp eq i32 %215, i32 0;
    i32 %222 = zext i1 %221 to i32;
    i32 %223 = sub i32 1, i32 %222;
    i1 %224 = scmp eq i32 %223, i32 0;
    cbr i1 %224(prob = 0.5), ^entry8, ^b37;
^b31:
    i32 %225 = load i32* %180;
    i1 %226 = scmp eq i32 %225, i32 47;
    i1 %227 = scmp eq i32 %225, i32 37;
    i1 %228 = or i1 %227, i1 %226;
    cbr i1 %228(prob = 0.75), ^entry7, ^b40;
^b32:
    i1 %229 = phi [^while.guard2, i1 true] [^b36, i1 %248];
    cbr i1 %229(prob = 0.5), ^entry9, ^b41;
^b33:
    i1 %230 = scmp eq i32 %197, i32 45;
    cbr i1 %230(prob = 0.5), ^entry9, ^b36;
^while.guard3:
    i32* %231 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %203];
    i32 %232 = load i32* %231;
    i1 %233 = scmp eq i32 %232, i32 42;
    cbr i1 %233(prob = 0.5), ^b39, ^b42;
^b34:
    i32 %234 = phi [^b26, i32 %199] [^if.then5, i32 %210];
    i1 %235 = scmp eq i32 %200, i32 94;
    cbr i1 %235(prob = 0.5), ^entry10, ^b38;
^b35:
    i32 %236 = phi [^b27, i32 %202] [^entry13, i32 %372];
    i32 %237 = phi [^b27, i32 %203] [^entry13, i32 %374];
    i32 %238 = load i32* %15;
    i1 %239 = scmp eq i32 %238, i32 47;
    cbr i1 %239(prob = 0.5), ^while.guard4, ^b43;
^entry8:
    i32 %240 = phi [^entry7, i32 %220] [^b40, i32 %276];
    i32 %241 = phi [^entry7, i32 %215] [^b40, i32 %277];
    i32 %242 = add i32 %241, i32 1;
    i32* %243 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %242];
    store i32* %243 with i32 43;
    ubr ^b21;
^if.else1:
    i32* %244 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %142];
    i32 %245 = load i32* %244;
    i1 %246 = scmp neq i32 %245, i32 32;
    cbr i1 %246(prob = 0.5), ^if.then6, ^b49;
^b36:
    i32 %247 = load i32* %196;
    i1 %248 = scmp eq i32 %247, i32 42;
    ubr ^b32;
^entry9:
    i32 %249 = phi [^b32, i32 %185] [^b33, i32 %185] [^b41, i32 %281] [^b46, i32 %256] [^b51, i32 %281];
    i32 %250 = phi [^b32, i32 %186] [^b33, i32 %186] [^b41, i32 %282] [^b46, i32 %251] [^b51, i32 %282];
    i32 %251 = add i32 %250, i32 -1;
    i32* %252 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %250];
    i32 %253 = load i32* %252;
    i32* %254 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %249];
    store i32* %254 with i32 32;
    i32* %255 = getelementptr &(i32* %254)[i64 1];
    store i32* %255 with i32 %253;
    i32 %256 = add i32 %249, i32 2;
    i1 %257 = scmp eq i32 %251, i32 0;
    i32 %258 = zext i1 %257 to i32;
    i32 %259 = sub i32 1, i32 %258;
    i1 %260 = scmp eq i32 %259, i32 0;
    cbr i1 %260(prob = 0.5), ^entry11, ^b46;
^b37:
    i32* %261 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %215];
    i32 %262 = load i32* %261;
    i1 %263 = scmp eq i32 %262, i32 43;
    i1 %264 = scmp eq i32 %262, i32 45;
    i1 %265 = scmp eq i32 %262, i32 42;
    i1 %266 = scmp eq i32 %262, i32 47;
    i1 %267 = scmp eq i32 %262, i32 37;
    i1 %268 = or i1 %264, i1 %265;
    i1 %269 = or i1 %268, i1 %266;
    i1 %270 = or i1 %269, i1 %267;
    i1 %271 = or i1 %270, i1 %263;
    cbr i1 %271(prob = 0.97), ^entry7, ^b40;
^b38:
    i32 %272 = phi [^b34, i32 %234] [^b44, i32 %306];
    i32 %273 = add i32 %128, i32 -1;
    i32* %274 = getelementptr &([10000 * i32]* @ints)[i64 0][i32 %273];
    store i32* %274 with i32 %272;
    ubr ^b49;
^b39:
    i1 %275 = phi [^while.guard3, i1 true] [^b45, i1 %308];
    cbr i1 %275(prob = 0.5), ^entry12, ^b50;
^b40:
    i32 %276 = phi [^b31, i32 %161] [^b37, i32 %220];
    i32 %277 = phi [^b31, i32 %162] [^b37, i32 %215];
    i32* %278 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %277];
    i32 %279 = load i32* %278;
    i1 %280 = scmp eq i32 %279, i32 94;
    cbr i1 %280(prob = 0.97), ^entry7, ^entry8;
^b41:
    i32 %281 = phi [^b32, i32 %185] [^b46, i32 %256];
    i32 %282 = phi [^b32, i32 %186] [^b46, i32 %251];
    i32* %283 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %282];
    i32 %284 = load i32* %283;
    i1 %285 = scmp eq i32 %284, i32 47;
    cbr i1 %285(prob = 0.5), ^entry9, ^b51;
^entry10:
    i1 %286 = scmp neq i32 %130, i32 0;
    cbr i1 %286(prob = 0.97), ^while.body4, ^b44;
^b42:
    i1 %287 = scmp eq i32 %232, i32 47;
    cbr i1 %287(prob = 0.5), ^entry12, ^b45;
^while.guard4:
    i32* %288 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %237];
    i32 %289 = load i32* %288;
    i1 %290 = scmp eq i32 %289, i32 42;
    cbr i1 %290(prob = 0.5), ^b48, ^b52;
^b43:
    i32 %291 = phi [^b35, i32 %238] [^entry15, i32 %410];
    i32 %292 = phi [^b35, i32 %236] [^entry15, i32 %406];
    i32 %293 = phi [^b35, i32 %237] [^entry15, i32 %408];
    i1 %294 = scmp eq i32 %291, i32 37;
    cbr i1 %294(prob = 0.5), ^while.guard5, ^b47;
^entry11:
    i32 %295 = phi [^entry9, i32 %256] [^b51, i32 %281];
    i32 %296 = phi [^entry9, i32 %251] [^b51, i32 %282];
    i32 %297 = add i32 %296, i32 1;
    i32* %298 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %297];
    store i32* %298 with i32 45;
    ubr ^b27;
^if.then6:
    i32 %299 = add i32 %245, i32 -48;
    i32 %300 = add i32 %141, i32 1;
    i32* %301 = getelementptr &([10000 * i32]* @ints)[i64 0][i32 %300];
    store i32* %301 with i32 %299;
    i32 %302 = add i32 %142, i32 1;
    i32* %303 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %302];
    i32 %304 = load i32* %303;
    i1 %305 = scmp neq i32 %304, i32 32;
    cbr i1 %305(prob = 0.97), ^while.body5, ^b53;
^b44:
    i32 %306 = phi [^entry10, i32 1] [^while.body4, i32 %330];
    ubr ^b38;
^b45:
    i32 %307 = load i32* %231;
    i1 %308 = scmp eq i32 %307, i32 37;
    ubr ^b39;
^entry12:
    i32 %309 = phi [^b39, i32 %202] [^b42, i32 %202] [^b50, i32 %344] [^b55, i32 %316];
    i32 %310 = phi [^b39, i32 %203] [^b42, i32 %203] [^b50, i32 %345] [^b55, i32 %311];
    i32 %311 = add i32 %310, i32 -1;
    i32* %312 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %310];
    i32 %313 = load i32* %312;
    i32* %314 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %309];
    store i32* %314 with i32 32;
    i32* %315 = getelementptr &(i32* %314)[i64 1];
    store i32* %315 with i32 %313;
    i32 %316 = add i32 %309, i32 2;
    i1 %317 = scmp eq i32 %311, i32 0;
    i32 %318 = zext i1 %317 to i32;
    i32 %319 = sub i32 1, i32 %318;
    i1 %320 = scmp eq i32 %319, i32 0;
    cbr i1 %320(prob = 0.5), ^entry13, ^b55;
^b46:
    i32* %321 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %251];
    i32 %322 = load i32* %321;
    i1 %323 = scmp eq i32 %322, i32 43;
    i1 %324 = scmp eq i32 %322, i32 45;
    i1 %325 = scmp eq i32 %322, i32 42;
    i1 %326 = or i1 %324, i1 %325;
    i1 %327 = or i1 %326, i1 %323;
    cbr i1 %327(prob = 0.88), ^entry9, ^b41;
^while.body4:
    i32 %328 = phi [^entry10, i32 1] [^while.body4, i32 %330];
    i32 %329 = phi [^entry10, i32 %130] [^while.body4, i32 %331];
    i32 %330 = mul i32 %132, i32 %328;
    i32 %331 = add i32 %329, i32 -1;
    i1 %332 = scmp neq i32 %331, i32 0;
    cbr i1 %332(prob = 0.97), ^while.body4, ^b44;
^b47:
    i32 %333 = phi [^b43, i32 %293] [^entry17, i32 %439];
    i32 %334 = phi [^b43, i32 %292] [^entry17, i32 %437];
    i32* %335 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %334];
    store i32* %335 with i32 32;
    i32 %336 = add i32 %334, i32 1;
    ubr ^b8;
^b48:
    i1 %337 = phi [^while.guard4, i1 true] [^b54, i1 %377];
    cbr i1 %337(prob = 0.5), ^entry14, ^b57;
^b49:
    i32 %338 = phi [^if.else1, i32 %141] [^b38, i32 %273] [^b53, i32 %300];
    i32 %339 = phi [^if.else1, i32 %142] [^b38, i32 %127] [^b53, i32 %358];
    i32 %340 = add i32 %339, i32 1;
    i32* %341 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %340];
    i32 %342 = load i32* %341;
    i1 %343 = scmp neq i32 %342, i32 64;
    cbr i1 %343(prob = 0.97), ^while.body6, ^b7;
^b50:
    i32 %344 = phi [^b39, i32 %202] [^b55, i32 %316];
    i32 %345 = phi [^b39, i32 %203] [^b55, i32 %311];
    i32* %346 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %345];
    i32 %347 = load i32* %346;
    i1 %348 = scmp eq i32 %347, i32 94;
    cbr i1 %348(prob = 0.97), ^entry12, ^entry13;
^b51:
    i1 %349 = scmp eq i32 %284, i32 37;
    i1 %350 = scmp eq i32 %284, i32 94;
    i1 %351 = or i1 %350, i1 %349;
    cbr i1 %351(prob = 0.98), ^entry9, ^entry11;
^b52:
    i1 %352 = scmp eq i32 %289, i32 47;
    cbr i1 %352(prob = 0.5), ^entry14, ^b54;
^while.guard5:
    i32* %353 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %293];
    i32 %354 = load i32* %353;
    i1 %355 = scmp eq i32 %354, i32 42;
    cbr i1 %355(prob = 0.5), ^b56, ^b58;
^b53:
    i32 %356 = phi [^if.then6, i32 1] [^while.body5, i32 %367];
    i32 %357 = add i32 %142, i32 -1;
    i32 %358 = add i32 %357, i32 %356;
    ubr ^b49;
^while.body5:
    i32 %359 = phi [^if.then6, i32 %299] [^indirect, i32 %405];
    i32 %360 = phi [^if.then6, i32 1] [^indirect, i32 %367];
    i32 %361 = add i32 %360, i32 %142;
    i32* %362 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %361];
    i32 %363 = load i32* %362;
    i32 %364 = mul i32 %359, i32 10;
    i32 %365 = add i32 %364, i32 -48;
    i32 %366 = add i32 %365, i32 %363;
    store i32* %301 with i32 %366;
    i32 %367 = add i32 %360, i32 1;
    i32 %368 = add i32 %367, i32 %142;
    i32* %369 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %368];
    i32 %370 = load i32* %369;
    i1 %371 = scmp neq i32 %370, i32 32;
    cbr i1 %371(prob = 0.97), ^indirect, ^b53;
^entry13:
    i32 %372 = phi [^entry12, i32 %316] [^b50, i32 %344];
    i32 %373 = phi [^entry12, i32 %311] [^b50, i32 %345];
    i32 %374 = add i32 %373, i32 1;
    i32* %375 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %374];
    store i32* %375 with i32 42;
    ubr ^b35;
^b54:
    i32 %376 = load i32* %288;
    i1 %377 = scmp eq i32 %376, i32 37;
    ubr ^b48;
^entry14:
    i32 %378 = phi [^b48, i32 %236] [^b52, i32 %236] [^b57, i32 %399] [^b60, i32 %385];
    i32 %379 = phi [^b48, i32 %237] [^b52, i32 %237] [^b57, i32 %400] [^b60, i32 %380];
    i32 %380 = add i32 %379, i32 -1;
    i32* %381 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %379];
    i32 %382 = load i32* %381;
    i32* %383 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %378];
    store i32* %383 with i32 32;
    i32* %384 = getelementptr &(i32* %383)[i64 1];
    store i32* %384 with i32 %382;
    i32 %385 = add i32 %378, i32 2;
    i1 %386 = scmp eq i32 %380, i32 0;
    i32 %387 = zext i1 %386 to i32;
    i32 %388 = sub i32 1, i32 %387;
    i1 %389 = scmp eq i32 %388, i32 0;
    cbr i1 %389(prob = 0.5), ^entry15, ^b60;
^b55:
    i32* %390 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %311];
    i32 %391 = load i32* %390;
    i1 %392 = scmp eq i32 %391, i32 42;
    i1 %393 = scmp eq i32 %391, i32 47;
    i1 %394 = scmp eq i32 %391, i32 37;
    i1 %395 = or i1 %393, i1 %394;
    i1 %396 = or i1 %395, i1 %392;
    cbr i1 %396(prob = 0.88), ^entry12, ^b50;
^while.body6:
    i1 %397 = scmp eq i32 %342, i32 43;
    cbr i1 %397(prob = 0.5), ^b11, ^b9;
^b56:
    i1 %398 = phi [^while.guard5, i1 true] [^b59, i1 %412];
    cbr i1 %398(prob = 0.5), ^entry16, ^b61;
^b57:
    i32 %399 = phi [^b48, i32 %236] [^b60, i32 %385];
    i32 %400 = phi [^b48, i32 %237] [^b60, i32 %380];
    i32* %401 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %400];
    i32 %402 = load i32* %401;
    i1 %403 = scmp eq i32 %402, i32 94;
    cbr i1 %403(prob = 0.97), ^entry14, ^entry15;
^b58:
    i1 %404 = scmp eq i32 %354, i32 47;
    cbr i1 %404(prob = 0.5), ^entry16, ^b59;
^indirect:
    i32 %405 = load i32* %301;
    ubr ^while.body5;
^entry15:
    i32 %406 = phi [^entry14, i32 %385] [^b57, i32 %399];
    i32 %407 = phi [^entry14, i32 %380] [^b57, i32 %400];
    i32 %408 = add i32 %407, i32 1;
    i32* %409 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %408];
    store i32* %409 with i32 47;
    i32 %410 = load i32* %15;
    ubr ^b43;
^b59:
    i32 %411 = load i32* %353;
    i1 %412 = scmp eq i32 %411, i32 37;
    ubr ^b56;
^entry16:
    i32 %413 = phi [^b56, i32 %292] [^b58, i32 %292] [^b61, i32 %432] [^b62, i32 %420];
    i32 %414 = phi [^b56, i32 %293] [^b58, i32 %293] [^b61, i32 %433] [^b62, i32 %415];
    i32 %415 = add i32 %414, i32 -1;
    i32* %416 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %414];
    i32 %417 = load i32* %416;
    i32* %418 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %413];
    store i32* %418 with i32 32;
    i32* %419 = getelementptr &(i32* %418)[i64 1];
    store i32* %419 with i32 %417;
    i32 %420 = add i32 %413, i32 2;
    i1 %421 = scmp eq i32 %415, i32 0;
    i32 %422 = zext i1 %421 to i32;
    i32 %423 = sub i32 1, i32 %422;
    i1 %424 = scmp eq i32 %423, i32 0;
    cbr i1 %424(prob = 0.5), ^entry17, ^b62;
^b60:
    i32* %425 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %380];
    i32 %426 = load i32* %425;
    i1 %427 = scmp eq i32 %426, i32 42;
    i1 %428 = scmp eq i32 %426, i32 47;
    i1 %429 = scmp eq i32 %426, i32 37;
    i1 %430 = or i1 %428, i1 %429;
    i1 %431 = or i1 %430, i1 %427;
    cbr i1 %431(prob = 0.88), ^entry14, ^b57;
^b61:
    i32 %432 = phi [^b56, i32 %292] [^b62, i32 %420];
    i32 %433 = phi [^b56, i32 %293] [^b62, i32 %415];
    i32* %434 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %433];
    i32 %435 = load i32* %434;
    i1 %436 = scmp eq i32 %435, i32 94;
    cbr i1 %436(prob = 0.97), ^entry16, ^entry17;
^entry17:
    i32 %437 = phi [^entry16, i32 %420] [^b61, i32 %432];
    i32 %438 = phi [^entry16, i32 %415] [^b61, i32 %433];
    i32 %439 = add i32 %438, i32 1;
    i32* %440 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %439];
    store i32* %440 with i32 37;
    ubr ^b47;
^b62:
    i32* %441 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %415];
    i32 %442 = load i32* %441;
    i1 %443 = scmp eq i32 %442, i32 42;
    i1 %444 = scmp eq i32 %442, i32 47;
    i1 %445 = scmp eq i32 %442, i32 37;
    i1 %446 = or i1 %444, i1 %445;
    i1 %447 = or i1 %446, i1 %443;
    cbr i1 %447(prob = 0.88), ^entry16, ^b61;
}
