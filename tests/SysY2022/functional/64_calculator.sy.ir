internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal [10000 * i32]* @ints;
internal [10000 * i32]* @chas;
internal [10000 * i32]* @get;
internal [10000 * i32]* @get2;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = scmp neq i32 %0, i32 13;
    i1 %2 = scmp neq i32 %0, i32 10;
    i1 %3 = and i1 %1, i1 %2;
    [10000 * i32]* %4 = ptrcast [10000 * i32]* @get to [10000 * i32]*;
    i32* %5 = getelementptr &([10000 * i32]* %4)[i64 0][i64 0];
    [10000 * i32]* %6 = ptrcast [10000 * i32]* @chas to [10000 * i32]*;
    [10000 * i32]* %7 = ptrcast [10000 * i32]* @ints to [10000 * i32]*;
    [10000 * i32]* %8 = ptrcast [10000 * i32]* @get2 to [10000 * i32]*;
    cbr i1 %3(prob = 0.97), ^while.body, ^b;
  ^b:
    i32 %9 = phi [^entry, i32 0] [^while.body, i32 %17];
    ubr ^while.header;
  ^while.body:
    i32 %10 = phi [^entry, i32 0] [^while.body, i32 %17];
    i32 %11 = phi [^entry, i32 %0] [^while.body, i32 %13];
    i32* %12 = getelementptr &(i32* %5)[i32 %10];
    store i32* %12 with i32 %11;
    i32 %13 = call () -> i32 @getch();
    i1 %14 = scmp neq i32 %13, i32 13;
    i1 %15 = scmp neq i32 %13, i32 10;
    i1 %16 = and i1 %14, i1 %15;
    i32 %17 = add i32 %10, i32 1;
    cbr i1 %16(prob = 0.97), ^while.body, ^b;
  ^while.header:
    i32 %18 = phi [^b, i32 0] [^b2, i32 %42];
    i32 %19 = phi [^b, i32 1] [^b2, i32 %40];
    i32 %20 = phi [^b, i32 0] [^b2, i32 %41];
    i1 %21 = scmp lt i32 %18, i32 %9;
    cbr i1 %21(prob = 0.97), ^while.body1, ^indirect;
  ^while.body1:
    i32* %22 = getelementptr &([10000 * i32]* %4)[i64 0][i32 %18];
    i32 %23 = load i32* %22;
    i1 %24 = scmp gt i32 %23, i32 47;
    i1 %25 = scmp le i32 %23, i32 57;
    i1 %26 = and i1 %24, i1 %25;
    cbr i1 %26(prob = 0.5), ^if.then, ^if.else;
  ^indirect:
    i1 %27 = scmp gt i32 %20, i32 0;
    cbr i1 %27(prob = 0.97), ^super.header, ^b1;
  ^if.then:
    i32* %28 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %19];
    store i32* %28 with i32 %23;
    i32 %29 = add i32 %19, i32 1;
    ubr ^b2;
  ^if.else:
    i1 %30 = scmp eq i32 %23, i32 40;
    cbr i1 %30(prob = 0.5), ^entry1, ^b3;
  ^super.header:
    i32 %31 = phi [^indirect, i32 %20] [^entry2, i32 %33];
    i32 %32 = phi [^indirect, i32 %19] [^entry2, i32 %109];
    i32 %33 = add i32 %31, i32 -16;
    i1 %34 = scmp gt i32 %33, i32 0;
    cbr i1 %34(prob = 0.67), ^entry2, ^super.header1;
  ^b1:
    i32 %35 = phi [^indirect, i32 %19] [^entry6, i32 %219];
    i32* %36 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %35];
    store i32* %36 with i32 64;
    i32* %37 = getelementptr &([10000 * i32]* %8)[i64 0][i64 1];
    i32 %38 = load i32* %37;
    i1 %39 = scmp neq i32 %38, i32 64;
    cbr i1 %39(prob = 0.97), ^while.body2, ^b4;
  ^b2:
    i32 %40 = phi [^if.then, i32 %29] [^b17, i32 %388];
    i32 %41 = phi [^if.then, i32 %20] [^b17, i32 %385];
    i32 %42 = add i32 %18, i32 1;
    ubr ^while.header;
  ^entry1:
    i32 %43 = add i32 %20, i32 1;
    i32* %44 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %43];
    store i32* %44 with i32 40;
    ubr ^b3;
  ^entry2:
    i32* %45 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %31];
    i32 %46 = load i32* %45;
    i32* %47 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %32];
    store i32* %47 with i32 32;
    i32* %48 = getelementptr &(i32* %47)[i64 1];
    store i32* %48 with i32 %46;
    i32* %49 = getelementptr &(i32* %45)[i64 -1];
    i32 %50 = load i32* %49;
    i32* %51 = getelementptr &(i32* %47)[i64 2];
    store i32* %51 with i32 32;
    i32* %52 = getelementptr &(i32* %47)[i64 3];
    store i32* %52 with i32 %50;
    i32* %53 = getelementptr &(i32* %45)[i64 -2];
    i32 %54 = load i32* %53;
    i32* %55 = getelementptr &(i32* %47)[i64 4];
    store i32* %55 with i32 32;
    i32* %56 = getelementptr &(i32* %47)[i64 5];
    store i32* %56 with i32 %54;
    i32* %57 = getelementptr &(i32* %45)[i64 -3];
    i32 %58 = load i32* %57;
    i32* %59 = getelementptr &(i32* %47)[i64 6];
    store i32* %59 with i32 32;
    i32* %60 = getelementptr &(i32* %47)[i64 7];
    store i32* %60 with i32 %58;
    i32* %61 = getelementptr &(i32* %45)[i64 -4];
    i32 %62 = load i32* %61;
    i32* %63 = getelementptr &(i32* %47)[i64 8];
    store i32* %63 with i32 32;
    i32* %64 = getelementptr &(i32* %47)[i64 9];
    store i32* %64 with i32 %62;
    i32* %65 = getelementptr &(i32* %45)[i64 -5];
    i32 %66 = load i32* %65;
    i32* %67 = getelementptr &(i32* %47)[i64 10];
    store i32* %67 with i32 32;
    i32* %68 = getelementptr &(i32* %47)[i64 11];
    store i32* %68 with i32 %66;
    i32* %69 = getelementptr &(i32* %45)[i64 -6];
    i32 %70 = load i32* %69;
    i32* %71 = getelementptr &(i32* %47)[i64 12];
    store i32* %71 with i32 32;
    i32* %72 = getelementptr &(i32* %47)[i64 13];
    store i32* %72 with i32 %70;
    i32* %73 = getelementptr &(i32* %45)[i64 -7];
    i32 %74 = load i32* %73;
    i32* %75 = getelementptr &(i32* %47)[i64 14];
    store i32* %75 with i32 32;
    i32* %76 = getelementptr &(i32* %47)[i64 15];
    store i32* %76 with i32 %74;
    i32* %77 = getelementptr &(i32* %45)[i64 -8];
    i32 %78 = load i32* %77;
    i32* %79 = getelementptr &(i32* %47)[i64 16];
    store i32* %79 with i32 32;
    i32* %80 = getelementptr &(i32* %47)[i64 17];
    store i32* %80 with i32 %78;
    i32* %81 = getelementptr &(i32* %45)[i64 -9];
    i32 %82 = load i32* %81;
    i32* %83 = getelementptr &(i32* %47)[i64 18];
    store i32* %83 with i32 32;
    i32* %84 = getelementptr &(i32* %47)[i64 19];
    store i32* %84 with i32 %82;
    i32* %85 = getelementptr &(i32* %45)[i64 -10];
    i32 %86 = load i32* %85;
    i32* %87 = getelementptr &(i32* %47)[i64 20];
    store i32* %87 with i32 32;
    i32* %88 = getelementptr &(i32* %47)[i64 21];
    store i32* %88 with i32 %86;
    i32* %89 = getelementptr &(i32* %45)[i64 -11];
    i32 %90 = load i32* %89;
    i32* %91 = getelementptr &(i32* %47)[i64 22];
    store i32* %91 with i32 32;
    i32* %92 = getelementptr &(i32* %47)[i64 23];
    store i32* %92 with i32 %90;
    i32* %93 = getelementptr &(i32* %45)[i64 -12];
    i32 %94 = load i32* %93;
    i32* %95 = getelementptr &(i32* %47)[i64 24];
    store i32* %95 with i32 32;
    i32* %96 = getelementptr &(i32* %47)[i64 25];
    store i32* %96 with i32 %94;
    i32* %97 = getelementptr &(i32* %45)[i64 -13];
    i32 %98 = load i32* %97;
    i32* %99 = getelementptr &(i32* %47)[i64 26];
    store i32* %99 with i32 32;
    i32* %100 = getelementptr &(i32* %47)[i64 27];
    store i32* %100 with i32 %98;
    i32* %101 = getelementptr &(i32* %45)[i64 -14];
    i32 %102 = load i32* %101;
    i32* %103 = getelementptr &(i32* %47)[i64 28];
    store i32* %103 with i32 32;
    i32* %104 = getelementptr &(i32* %47)[i64 29];
    store i32* %104 with i32 %102;
    i32* %105 = getelementptr &(i32* %45)[i64 -15];
    i32 %106 = load i32* %105;
    i32* %107 = getelementptr &(i32* %47)[i64 30];
    store i32* %107 with i32 32;
    i32* %108 = getelementptr &(i32* %47)[i64 31];
    store i32* %108 with i32 %106;
    i32 %109 = add i32 %32, i32 32;
    ubr ^super.header;
  ^b3:
    i32 %110 = phi [^if.else, i32 %20] [^entry1, i32 %43];
    i32 %111 = load i32* %22;
    i1 %112 = scmp eq i32 %111, i32 94;
    cbr i1 %112(prob = 0.5), ^entry4, ^b5;
  ^super.header1:
    i32 %113 = phi [^super.header, i32 %31] [^entry3, i32 %115];
    i32 %114 = phi [^super.header, i32 %32] [^entry3, i32 %198];
    i32 %115 = add i32 %113, i32 -16;
    i1 %116 = scmp gt i32 %115, i32 0;
    cbr i1 %116(prob = 0.67), ^entry3, ^entry6;
  ^while.body2:
    i32 %117 = phi [^b1, i32 0] [^b8, i32 %240];
    i32 %118 = phi [^b1, i32 1] [^b8, i32 %242];
    i32* %119 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %118];
    i32 %120 = load i32* %119;
    i1 %121 = scmp eq i32 %120, i32 43;
    i1 %122 = scmp eq i32 %120, i32 45;
    i1 %123 = or i1 %121, i1 %122;
    i1 %124 = scmp eq i32 %120, i32 42;
    i1 %125 = or i1 %123, i1 %124;
    i1 %126 = scmp eq i32 %120, i32 47;
    i1 %127 = or i1 %125, i1 %126;
    i1 %128 = scmp eq i32 %120, i32 37;
    i1 %129 = or i1 %127, i1 %128;
    i1 %130 = scmp eq i32 %120, i32 94;
    i1 %131 = or i1 %129, i1 %130;
    cbr i1 %131(prob = 0.5), ^entry5, ^if.else1;
  ^b4:
    i32* %132 = getelementptr &([10000 * i32]* %7)[i64 0][i64 1];
    i32 %133 = load i32* %132;
    call (i32) -> void @putint(i32 %133);
    ret i32 0;
  ^entry3:
    i32* %134 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %113];
    i32 %135 = load i32* %134;
    i32* %136 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %114];
    store i32* %136 with i32 32;
    i32* %137 = getelementptr &(i32* %136)[i64 1];
    store i32* %137 with i32 %135;
    i32* %138 = getelementptr &(i32* %134)[i64 -1];
    i32 %139 = load i32* %138;
    i32* %140 = getelementptr &(i32* %136)[i64 2];
    store i32* %140 with i32 32;
    i32* %141 = getelementptr &(i32* %136)[i64 3];
    store i32* %141 with i32 %139;
    i32* %142 = getelementptr &(i32* %134)[i64 -2];
    i32 %143 = load i32* %142;
    i32* %144 = getelementptr &(i32* %136)[i64 4];
    store i32* %144 with i32 32;
    i32* %145 = getelementptr &(i32* %136)[i64 5];
    store i32* %145 with i32 %143;
    i32* %146 = getelementptr &(i32* %134)[i64 -3];
    i32 %147 = load i32* %146;
    i32* %148 = getelementptr &(i32* %136)[i64 6];
    store i32* %148 with i32 32;
    i32* %149 = getelementptr &(i32* %136)[i64 7];
    store i32* %149 with i32 %147;
    i32* %150 = getelementptr &(i32* %134)[i64 -4];
    i32 %151 = load i32* %150;
    i32* %152 = getelementptr &(i32* %136)[i64 8];
    store i32* %152 with i32 32;
    i32* %153 = getelementptr &(i32* %136)[i64 9];
    store i32* %153 with i32 %151;
    i32* %154 = getelementptr &(i32* %134)[i64 -5];
    i32 %155 = load i32* %154;
    i32* %156 = getelementptr &(i32* %136)[i64 10];
    store i32* %156 with i32 32;
    i32* %157 = getelementptr &(i32* %136)[i64 11];
    store i32* %157 with i32 %155;
    i32* %158 = getelementptr &(i32* %134)[i64 -6];
    i32 %159 = load i32* %158;
    i32* %160 = getelementptr &(i32* %136)[i64 12];
    store i32* %160 with i32 32;
    i32* %161 = getelementptr &(i32* %136)[i64 13];
    store i32* %161 with i32 %159;
    i32* %162 = getelementptr &(i32* %134)[i64 -7];
    i32 %163 = load i32* %162;
    i32* %164 = getelementptr &(i32* %136)[i64 14];
    store i32* %164 with i32 32;
    i32* %165 = getelementptr &(i32* %136)[i64 15];
    store i32* %165 with i32 %163;
    i32* %166 = getelementptr &(i32* %134)[i64 -8];
    i32 %167 = load i32* %166;
    i32* %168 = getelementptr &(i32* %136)[i64 16];
    store i32* %168 with i32 32;
    i32* %169 = getelementptr &(i32* %136)[i64 17];
    store i32* %169 with i32 %167;
    i32* %170 = getelementptr &(i32* %134)[i64 -9];
    i32 %171 = load i32* %170;
    i32* %172 = getelementptr &(i32* %136)[i64 18];
    store i32* %172 with i32 32;
    i32* %173 = getelementptr &(i32* %136)[i64 19];
    store i32* %173 with i32 %171;
    i32* %174 = getelementptr &(i32* %134)[i64 -10];
    i32 %175 = load i32* %174;
    i32* %176 = getelementptr &(i32* %136)[i64 20];
    store i32* %176 with i32 32;
    i32* %177 = getelementptr &(i32* %136)[i64 21];
    store i32* %177 with i32 %175;
    i32* %178 = getelementptr &(i32* %134)[i64 -11];
    i32 %179 = load i32* %178;
    i32* %180 = getelementptr &(i32* %136)[i64 22];
    store i32* %180 with i32 32;
    i32* %181 = getelementptr &(i32* %136)[i64 23];
    store i32* %181 with i32 %179;
    i32* %182 = getelementptr &(i32* %134)[i64 -12];
    i32 %183 = load i32* %182;
    i32* %184 = getelementptr &(i32* %136)[i64 24];
    store i32* %184 with i32 32;
    i32* %185 = getelementptr &(i32* %136)[i64 25];
    store i32* %185 with i32 %183;
    i32* %186 = getelementptr &(i32* %134)[i64 -13];
    i32 %187 = load i32* %186;
    i32* %188 = getelementptr &(i32* %136)[i64 26];
    store i32* %188 with i32 32;
    i32* %189 = getelementptr &(i32* %136)[i64 27];
    store i32* %189 with i32 %187;
    i32* %190 = getelementptr &(i32* %134)[i64 -14];
    i32 %191 = load i32* %190;
    i32* %192 = getelementptr &(i32* %136)[i64 28];
    store i32* %192 with i32 32;
    i32* %193 = getelementptr &(i32* %136)[i64 29];
    store i32* %193 with i32 %191;
    i32* %194 = getelementptr &(i32* %134)[i64 -15];
    i32 %195 = load i32* %194;
    i32* %196 = getelementptr &(i32* %136)[i64 30];
    store i32* %196 with i32 32;
    i32* %197 = getelementptr &(i32* %136)[i64 31];
    store i32* %197 with i32 %195;
    i32 %198 = add i32 %114, i32 32;
    ubr ^super.header1;
  ^entry4:
    i32 %199 = add i32 %110, i32 1;
    i32* %200 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %199];
    store i32* %200 with i32 94;
    ubr ^b5;
  ^entry5:
    i32* %201 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %117];
    i32 %202 = load i32* %201;
    i32* %203 = getelementptr &(i32* %201)[i64 -1];
    i32 %204 = load i32* %203;
    i32 %205 = add i32 %202, i32 %204;
    i32 %206 = select i1 %121 ? i32 %205 : i32 0;
    i32 %207 = sub i32 %204, i32 %202;
    i32 %208 = select i1 %122 ? i32 %207 : i32 %206;
    i32 %209 = mul i32 %202, i32 %204;
    i32 %210 = select i1 %124 ? i32 %209 : i32 %208;
    cbr i1 %126(prob = 0.5), ^if.then1, ^b6;
  ^entry6:
    i32 %211 = phi [^super.header1, i32 %113] [^entry6, i32 %217];
    i32 %212 = phi [^super.header1, i32 %114] [^entry6, i32 %219];
    i32* %213 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %211];
    i32 %214 = load i32* %213;
    i32* %215 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %212];
    store i32* %215 with i32 32;
    i32* %216 = getelementptr &(i32* %215)[i64 1];
    store i32* %216 with i32 %214;
    i32 %217 = add i32 %211, i32 -1;
    i1 %218 = scmp gt i32 %217, i32 0;
    i32 %219 = add i32 %212, i32 2;
    cbr i1 %218(prob = 0.97), ^entry6, ^b1;
  ^b5:
    i32 %220 = phi [^b3, i32 %110] [^entry4, i32 %199];
    i1 %221 = scmp eq i32 %111, i32 41;
    cbr i1 %221(prob = 0.5), ^entry7, ^b7;
  ^if.else1:
    i1 %222 = scmp neq i32 %120, i32 32;
    cbr i1 %222(prob = 0.5), ^if.then2, ^b8;
  ^if.then1:
    i32 %223 = sdiv i32 %204, i32 %202;
    ubr ^b6;
  ^entry7:
    i32* %224 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %220];
    i32 %225 = load i32* %224;
    i32 %226 = add i32 %220, i32 -1;
    ubr ^while.header1;
  ^if.then2:
    i32 %227 = load i32* %119;
    i32 %228 = add i32 %227, i32 -48;
    i32 %229 = add i32 %117, i32 1;
    i32* %230 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %229];
    store i32* %230 with i32 %228;
    i32* %231 = getelementptr &(i32* %119)[i64 1];
    i32 %232 = load i32* %231;
    i1 %233 = scmp neq i32 %232, i32 32;
    i32 %234 = add i32 %118, i32 1;
    cbr i1 %233(prob = 0.97), ^while.body3, ^b9;
  ^b6:
    i32 %235 = phi [^entry5, i32 %210] [^if.then1, i32 %223];
    cbr i1 %128(prob = 0.5), ^if.then3, ^b10;
  ^b7:
    i32 %236 = phi [^b5, i32 %19] [^while.header1, i32 %251];
    i32 %237 = phi [^b5, i32 %220] [^while.header1, i32 %252];
    i32 %238 = load i32* %22;
    i1 %239 = scmp eq i32 %238, i32 43;
    cbr i1 %239(prob = 0.5), ^while.header2, ^b11;
  ^b8:
    i32 %240 = phi [^if.else1, i32 %117] [^b9, i32 %229] [^b12, i32 %294];
    i32 %241 = phi [^if.else1, i32 %118] [^b9, i32 %249] [^b12, i32 %118];
    i32 %242 = add i32 %241, i32 1;
    i32* %243 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %242];
    i32 %244 = load i32* %243;
    i1 %245 = scmp neq i32 %244, i32 64;
    cbr i1 %245(prob = 0.97), ^while.body2, ^b4;
  ^if.then3:
    i32 %246 = srem i32 %204, i32 %202;
    ubr ^b10;
  ^b9:
    i32 %247 = phi [^if.then2, i32 1] [^while.body3, i32 %266];
    i32 %248 = add i32 %118, i32 -1;
    i32 %249 = add i32 %248, i32 %247;
    ubr ^b8;
  ^while.header1:
    i32 %250 = phi [^entry7, i32 %225] [^while.body4, i32 %290];
    i32 %251 = phi [^entry7, i32 %19] [^while.body4, i32 %291];
    i32 %252 = phi [^entry7, i32 %226] [^while.body4, i32 %292];
    i1 %253 = scmp neq i32 %250, i32 40;
    cbr i1 %253(prob = 0.97), ^while.body4, ^b7;
  ^while.body3:
    i32 %254 = phi [^if.then2, i32 %228] [^while.body3, i32 %261];
    i32 %255 = phi [^if.then2, i32 1] [^while.body3, i32 %266];
    i32 %256 = add i32 %118, i32 %255;
    i32* %257 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %256];
    i32 %258 = load i32* %257;
    i32 %259 = mul i32 %254, i32 10;
    i32 %260 = add i32 %259, i32 -48;
    i32 %261 = add i32 %260, i32 %258;
    store i32* %230 with i32 %261;
    i32 %262 = add i32 %234, i32 %255;
    i32* %263 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %262];
    i32 %264 = load i32* %263;
    i1 %265 = scmp neq i32 %264, i32 32;
    i32 %266 = add i32 %255, i32 1;
    cbr i1 %265(prob = 0.97), ^while.body3, ^b9;
  ^while.header2:
    i32 %267 = phi [^b7, i32 %236] [^entry9, i32 %305];
    i32 %268 = phi [^b7, i32 %237] [^entry9, i32 %303];
    i32* %269 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %268];
    i32 %270 = load i32* %269;
    i1 %271 = scmp eq i32 %270, i32 43;
    i1 %272 = scmp eq i32 %270, i32 45;
    i1 %273 = or i1 %271, i1 %272;
    i1 %274 = scmp eq i32 %270, i32 42;
    i1 %275 = or i1 %273, i1 %274;
    i1 %276 = scmp eq i32 %270, i32 47;
    i1 %277 = or i1 %275, i1 %276;
    i1 %278 = scmp eq i32 %270, i32 37;
    i1 %279 = or i1 %277, i1 %278;
    i1 %280 = scmp eq i32 %270, i32 94;
    i1 %281 = or i1 %279, i1 %280;
    cbr i1 %281(prob = 0.97), ^entry9, ^entry8;
  ^b10:
    i32 %282 = phi [^b6, i32 %235] [^if.then3, i32 %246];
    cbr i1 %130(prob = 0.5), ^entry10, ^b12;
  ^b11:
    i32 %283 = phi [^b7, i32 %238] [^entry8, i32 %300];
    i32 %284 = phi [^b7, i32 %236] [^entry8, i32 %296];
    i32 %285 = phi [^b7, i32 %237] [^entry8, i32 %298];
    i1 %286 = scmp eq i32 %283, i32 45;
    cbr i1 %286(prob = 0.5), ^while.header3, ^b13;
  ^while.body4:
    i32* %287 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %251];
    store i32* %287 with i32 32;
    i32* %288 = getelementptr &(i32* %287)[i64 1];
    store i32* %288 with i32 %250;
    i32* %289 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %252];
    i32 %290 = load i32* %289;
    i32 %291 = add i32 %251, i32 2;
    i32 %292 = add i32 %252, i32 -1;
    ubr ^while.header1;
  ^b12:
    i32 %293 = phi [^b10, i32 %282] [^b14, i32 %326];
    i32 %294 = add i32 %117, i32 -1;
    i32* %295 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %294];
    store i32* %295 with i32 %293;
    ubr ^b8;
  ^entry8:
    i32 %296 = phi [^while.header2, i32 %267] [^entry9, i32 %305];
    i32 %297 = phi [^while.header2, i32 %268] [^entry9, i32 %303];
    i32 %298 = add i32 %297, i32 1;
    i32* %299 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %298];
    store i32* %299 with i32 43;
    i32 %300 = load i32* %22;
    ubr ^b11;
  ^entry9:
    i32* %301 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %267];
    store i32* %301 with i32 32;
    i32* %302 = getelementptr &(i32* %301)[i64 1];
    store i32* %302 with i32 %270;
    i32 %303 = add i32 %268, i32 -1;
    i1 %304 = scmp eq i32 %303, i32 0;
    i32 %305 = add i32 %267, i32 2;
    cbr i1 %304(prob = 0.5), ^entry8, ^while.header2;
  ^entry10:
    i1 %306 = scmp neq i32 %202, i32 0;
    cbr i1 %306(prob = 0.97), ^while.body5, ^b14;
  ^while.header3:
    i32 %307 = phi [^b11, i32 %284] [^entry12, i32 %340];
    i32 %308 = phi [^b11, i32 %285] [^entry12, i32 %338];
    i32* %309 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %308];
    i32 %310 = load i32* %309;
    i1 %311 = scmp eq i32 %310, i32 43;
    i1 %312 = scmp eq i32 %310, i32 45;
    i1 %313 = or i1 %311, i1 %312;
    i1 %314 = scmp eq i32 %310, i32 42;
    i1 %315 = or i1 %313, i1 %314;
    i1 %316 = scmp eq i32 %310, i32 47;
    i1 %317 = or i1 %315, i1 %316;
    i1 %318 = scmp eq i32 %310, i32 37;
    i1 %319 = or i1 %317, i1 %318;
    i1 %320 = scmp eq i32 %310, i32 94;
    i1 %321 = or i1 %319, i1 %320;
    cbr i1 %321(prob = 0.97), ^entry12, ^entry11;
  ^b13:
    i32 %322 = phi [^b11, i32 %284] [^entry11, i32 %332];
    i32 %323 = phi [^b11, i32 %285] [^entry11, i32 %334];
    i32 %324 = load i32* %22;
    i1 %325 = scmp eq i32 %324, i32 42;
    cbr i1 %325(prob = 0.5), ^while.header4, ^b15;
  ^b14:
    i32 %326 = phi [^entry10, i32 1] [^while.body5, i32 %331];
    ubr ^b12;
  ^while.body5:
    i32 %327 = phi [^entry10, i32 1] [^while.body5, i32 %331];
    i32 %328 = phi [^entry10, i32 %202] [^while.body5, i32 %329];
    i32 %329 = add i32 %328, i32 -1;
    i1 %330 = scmp neq i32 %329, i32 0;
    i32 %331 = mul i32 %204, i32 %327;
    cbr i1 %330(prob = 0.97), ^while.body5, ^b14;
  ^entry11:
    i32 %332 = phi [^while.header3, i32 %307] [^entry12, i32 %340];
    i32 %333 = phi [^while.header3, i32 %308] [^entry12, i32 %338];
    i32 %334 = add i32 %333, i32 1;
    i32* %335 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %334];
    store i32* %335 with i32 45;
    ubr ^b13;
  ^entry12:
    i32* %336 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %307];
    store i32* %336 with i32 32;
    i32* %337 = getelementptr &(i32* %336)[i64 1];
    store i32* %337 with i32 %310;
    i32 %338 = add i32 %308, i32 -1;
    i1 %339 = scmp eq i32 %338, i32 0;
    i32 %340 = add i32 %307, i32 2;
    cbr i1 %339(prob = 0.5), ^entry11, ^while.header3;
  ^while.header4:
    i32 %341 = phi [^b13, i32 %322] [^entry14, i32 %365];
    i32 %342 = phi [^b13, i32 %323] [^entry14, i32 %363];
    i32* %343 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %342];
    i32 %344 = load i32* %343;
    i1 %345 = scmp eq i32 %344, i32 42;
    i1 %346 = scmp eq i32 %344, i32 47;
    i1 %347 = or i1 %345, i1 %346;
    i1 %348 = scmp eq i32 %344, i32 37;
    i1 %349 = or i1 %347, i1 %348;
    i1 %350 = scmp eq i32 %344, i32 94;
    i1 %351 = or i1 %349, i1 %350;
    cbr i1 %351(prob = 0.97), ^entry14, ^entry13;
  ^b15:
    i32 %352 = phi [^b13, i32 %324] [^entry13, i32 %360];
    i32 %353 = phi [^b13, i32 %322] [^entry13, i32 %356];
    i32 %354 = phi [^b13, i32 %323] [^entry13, i32 %358];
    i1 %355 = scmp eq i32 %352, i32 47;
    cbr i1 %355(prob = 0.5), ^while.header5, ^b16;
  ^entry13:
    i32 %356 = phi [^while.header4, i32 %341] [^entry14, i32 %365];
    i32 %357 = phi [^while.header4, i32 %342] [^entry14, i32 %363];
    i32 %358 = add i32 %357, i32 1;
    i32* %359 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %358];
    store i32* %359 with i32 42;
    i32 %360 = load i32* %22;
    ubr ^b15;
  ^entry14:
    i32* %361 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %341];
    store i32* %361 with i32 32;
    i32* %362 = getelementptr &(i32* %361)[i64 1];
    store i32* %362 with i32 %344;
    i32 %363 = add i32 %342, i32 -1;
    i1 %364 = scmp eq i32 %363, i32 0;
    i32 %365 = add i32 %341, i32 2;
    cbr i1 %364(prob = 0.5), ^entry13, ^while.header4;
  ^while.header5:
    i32 %366 = phi [^b15, i32 %353] [^entry16, i32 %393];
    i32 %367 = phi [^b15, i32 %354] [^entry16, i32 %391];
    i32* %368 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %367];
    i32 %369 = load i32* %368;
    i1 %370 = scmp eq i32 %369, i32 42;
    i1 %371 = scmp eq i32 %369, i32 47;
    i1 %372 = or i1 %370, i1 %371;
    i1 %373 = scmp eq i32 %369, i32 37;
    i1 %374 = or i1 %372, i1 %373;
    i1 %375 = scmp eq i32 %369, i32 94;
    i1 %376 = or i1 %374, i1 %375;
    cbr i1 %376(prob = 0.97), ^entry16, ^entry15;
  ^b16:
    i32 %377 = phi [^b15, i32 %353] [^entry15, i32 %381];
    i32 %378 = phi [^b15, i32 %354] [^entry15, i32 %383];
    i32 %379 = load i32* %22;
    i1 %380 = scmp eq i32 %379, i32 37;
    cbr i1 %380(prob = 0.5), ^while.header6, ^b17;
  ^entry15:
    i32 %381 = phi [^while.header5, i32 %366] [^entry16, i32 %393];
    i32 %382 = phi [^while.header5, i32 %367] [^entry16, i32 %391];
    i32 %383 = add i32 %382, i32 1;
    i32* %384 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %383];
    store i32* %384 with i32 47;
    ubr ^b16;
  ^b17:
    i32 %385 = phi [^b16, i32 %378] [^entry17, i32 %407];
    i32 %386 = phi [^b16, i32 %377] [^entry17, i32 %405];
    i32* %387 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %386];
    store i32* %387 with i32 32;
    i32 %388 = add i32 %386, i32 1;
    ubr ^b2;
  ^entry16:
    i32* %389 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %366];
    store i32* %389 with i32 32;
    i32* %390 = getelementptr &(i32* %389)[i64 1];
    store i32* %390 with i32 %369;
    i32 %391 = add i32 %367, i32 -1;
    i1 %392 = scmp eq i32 %391, i32 0;
    i32 %393 = add i32 %366, i32 2;
    cbr i1 %392(prob = 0.5), ^entry15, ^while.header5;
  ^while.header6:
    i32 %394 = phi [^b16, i32 %377] [^entry18, i32 %413];
    i32 %395 = phi [^b16, i32 %378] [^entry18, i32 %411];
    i32* %396 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %395];
    i32 %397 = load i32* %396;
    i1 %398 = scmp eq i32 %397, i32 42;
    i1 %399 = scmp eq i32 %397, i32 47;
    i1 %400 = or i1 %398, i1 %399;
    i1 %401 = scmp eq i32 %397, i32 37;
    i1 %402 = or i1 %400, i1 %401;
    i1 %403 = scmp eq i32 %397, i32 94;
    i1 %404 = or i1 %402, i1 %403;
    cbr i1 %404(prob = 0.97), ^entry18, ^entry17;
  ^entry17:
    i32 %405 = phi [^while.header6, i32 %394] [^entry18, i32 %413];
    i32 %406 = phi [^while.header6, i32 %395] [^entry18, i32 %411];
    i32 %407 = add i32 %406, i32 1;
    i32* %408 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %407];
    store i32* %408 with i32 37;
    ubr ^b17;
  ^entry18:
    i32* %409 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %394];
    store i32* %409 with i32 32;
    i32* %410 = getelementptr &(i32* %409)[i64 1];
    store i32* %410 with i32 %397;
    i32 %411 = add i32 %395, i32 -1;
    i1 %412 = scmp eq i32 %411, i32 0;
    i32 %413 = add i32 %394, i32 2;
    cbr i1 %412(prob = 0.5), ^entry17, ^while.header6;
}
