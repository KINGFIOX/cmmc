internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [10000 * i32]* @ints, align 8 { Flexible };
internal [10000 * i32]* @chas, align 8 { Flexible };
internal [10000 * i32]* @get, align 8 { Flexible };
internal [10000 * i32]* @get2, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = icmp neq i32 %0, i32 13;
    i1 %2 = icmp neq i32 %0, i32 10;
    i1 %3 = and i1 %1, i1 %2;
    [10000 * i32]* %4 = ptrcast [10000 * i32]* @get to [10000 * i32]*;
    i32* %5 = getelementptr &([10000 * i32]* %4)[i64 0][i64 0];
    [10000 * i32]* %6 = ptrcast [10000 * i32]* @chas to [10000 * i32]*;
    [10000 * i32]* %7 = ptrcast [10000 * i32]* @ints to [10000 * i32]*;
    [10000 * i32]* %8 = ptrcast [10000 * i32]* @get2 to [10000 * i32]*;
    cbr i1 %3(prob = 0.984615), ^while.body, ^b;
  ^b:
    i32 %9 = phi [^entry, i32 0] [^while.body, i32 %17];
    ubr ^while.header;
  ^while.body:
    i32 %10 = phi [^entry, i32 %0] [^while.body, i32 %13];
    i32 %11 = phi [^entry, i32 0] [^while.body, i32 %17];
    i32* %12 = getelementptr &(i32* %5)[i32 %11];
    store i32* %12 with i32 %10;
    i32 %13 = call () -> i32 @getch();
    i1 %14 = icmp neq i32 %13, i32 13;
    i1 %15 = icmp neq i32 %13, i32 10;
    i1 %16 = and i1 %14, i1 %15;
    i32 %17 = add i32 %11, i32 1;
    cbr i1 %16(prob = 0.984615), ^while.body, ^b;
  ^while.header:
    i32 %18 = phi [^b, i32 0] [^if.then, i32 %18] [^b14, i32 %256];
    i32 %19 = phi [^b, i32 1] [^if.then, i32 %29] [^b14, i32 %259];
    i32 %20 = phi [^b, i32 0] [^if.then, i32 %26] [^b14, i32 %26];
    i1 %21 = icmp sgt i32 %9, i32 %20;
    cbr i1 %21(prob = 0.984615), ^while.body1, ^indirect;
  ^while.body1:
    i32* %22 = getelementptr &([10000 * i32]* %4)[i64 0][i32 %20];
    i32 %23 = load i32* %22;
    i32 %24 = add i32 %23, i32 -48;
    i1 %25 = icmp ult i32 %24, i32 10;
    i32 %26 = add i32 %20, i32 1;
    cbr i1 %25(prob = 0.5), ^if.then, ^if.else;
  ^indirect:
    i1 %27 = icmp sgt i32 %18, i32 0;
    cbr i1 %27(prob = 0.984615), ^indirect1, ^b1;
  ^if.then:
    i32* %28 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %19];
    store i32* %28 with i32 %23;
    i32 %29 = add i32 %19, i32 1;
    ubr ^while.header;
  ^indirect1:
    i32 %30 = add i32 %18, i32 -4;
    i1 %31 = icmp sgt i32 %30, i32 0;
    cbr i1 %31(prob = 0.941176), ^entry2, ^entry3;
  ^if.else:
    i1 %32 = icmp eq i32 %23, i32 40;
    cbr i1 %32(prob = 0.5), ^entry1, ^b2;
  ^b1:
    i32 %33 = phi [^indirect, i32 %19] [^entry3, i32 %71];
    i32* %34 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %33];
    store i32* %34 with i32 64;
    i32* %35 = getelementptr &([10000 * i32]* %8)[i64 0][i64 1];
    i32 %36 = load i32* %35;
    i1 %37 = icmp neq i32 %36, i32 64;
    cbr i1 %37(prob = 0.984615), ^while.body2, ^b3;
  ^entry1:
    i32 %38 = add i32 %18, i32 1;
    i32* %39 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %38];
    store i32* %39 with i32 40;
    ubr ^b2;
  ^entry2:
    i32 %40 = phi [^indirect1, i32 %19] [^entry2, i32 %60];
    i32 %41 = phi [^indirect1, i32 %18] [^entry2, i32 %58];
    i32* %42 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %41];
    i32 %43 = load i32* %42;
    i32* %44 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %40];
    store i32* %44 with i32 32;
    i32* %45 = getelementptr &(i32* %44)[i64 1];
    store i32* %45 with i32 %43;
    i32* %46 = getelementptr &(i32* %42)[i64 -1];
    i32 %47 = load i32* %46;
    i32* %48 = getelementptr &(i32* %44)[i64 2];
    store i32* %48 with i32 32;
    i32* %49 = getelementptr &(i32* %44)[i64 3];
    store i32* %49 with i32 %47;
    i32* %50 = getelementptr &(i32* %42)[i64 -2];
    i32 %51 = load i32* %50;
    i32* %52 = getelementptr &(i32* %44)[i64 4];
    store i32* %52 with i32 32;
    i32* %53 = getelementptr &(i32* %44)[i64 5];
    store i32* %53 with i32 %51;
    i32* %54 = getelementptr &(i32* %42)[i64 -3];
    i32 %55 = load i32* %54;
    i32* %56 = getelementptr &(i32* %44)[i64 6];
    store i32* %56 with i32 32;
    i32* %57 = getelementptr &(i32* %44)[i64 7];
    store i32* %57 with i32 %55;
    i32 %58 = add i32 %41, i32 -4;
    i1 %59 = icmp sgt i32 %58, i32 4;
    i32 %60 = add i32 %40, i32 8;
    cbr i1 %59(prob = 0.941176), ^entry2, ^entry3;
  ^b2:
    i32 %61 = phi [^if.else, i32 %18] [^entry1, i32 %38];
    i1 %62 = icmp eq i32 %23, i32 94;
    cbr i1 %62(prob = 0.5), ^entry4, ^b4;
  ^entry3 {scalar}:
    i32 %63 = phi [^indirect1, i32 %18] [^entry2, i32 %58] [^entry3, i32 %69];
    i32 %64 = phi [^indirect1, i32 %19] [^entry2, i32 %60] [^entry3, i32 %71];
    i32* %65 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %63];
    i32 %66 = load i32* %65;
    i32* %67 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %64];
    store i32* %67 with i32 32;
    i32* %68 = getelementptr &(i32* %67)[i64 1];
    store i32* %68 with i32 %66;
    i32 %69 = add i32 %63, i32 -1;
    i1 %70 = icmp sgt i32 %69, i32 0;
    i32 %71 = add i32 %64, i32 2;
    cbr i1 %70(prob = 0.75), ^entry3, ^b1;
  ^while.body2:
    i32 %72 = phi [^b1, i32 1] [^while.header1, i32 %121];
    i32 %73 = phi [^b1, i32 0] [^while.header1, i32 %120];
    i32* %74 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %72];
    i32 %75 = load i32* %74;
    i1 %76 = icmp eq i32 %75, i32 43;
    i1 %77 = icmp eq i32 %75, i32 45;
    i1 %78 = or i1 %76, i1 %77;
    i1 %79 = icmp eq i32 %75, i32 42;
    i1 %80 = icmp eq i32 %75, i32 47;
    i1 %81 = or i1 %79, i1 %80;
    i1 %82 = or i1 %78, i1 %81;
    i1 %83 = icmp eq i32 %75, i32 37;
    i1 %84 = icmp eq i32 %75, i32 94;
    i1 %85 = or i1 %83, i1 %84;
    i1 %86 = or i1 %82, i1 %85;
    i32 %87 = add i32 %72, i32 1;
    cbr i1 %86(prob = 0.984375), ^entry5, ^if.else1;
  ^b3:
    i32* %88 = getelementptr &([10000 * i32]* %7)[i64 0][i64 1];
    i32 %89 = load i32* %88;
    call (i32) -> void @putint(i32 %89);
    ret i32 0;
  ^entry4:
    i32 %90 = add i32 %61, i32 1;
    i32* %91 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %90];
    store i32* %91 with i32 94;
    ubr ^b4;
  ^entry5:
    i32* %92 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %73];
    i32 %93 = load i32* %92;
    i32* %94 = getelementptr &(i32* %92)[i64 -1];
    i32 %95 = load i32* %94;
    i32 %96 = add i32 %93, i32 %95;
    i32 %97 = select i1 %76 ? i32 %96 : i32 0;
    i32 %98 = sub i32 %95, i32 %93;
    i32 %99 = select i1 %77 ? i32 %98 : i32 %97;
    i32 %100 = mul i32 %93, i32 %95;
    i32 %101 = select i1 %79 ? i32 %100 : i32 %99;
    cbr i1 %80(prob = 0.5), ^if.then1, ^b5;
  ^b4:
    i32 %102 = phi [^b2, i32 %61] [^entry4, i32 %90];
    i1 %103 = icmp eq i32 %23, i32 41;
    cbr i1 %103(prob = 0.5), ^entry6, ^b6;
  ^if.else1:
    i1 %104 = icmp neq i32 %75, i32 32;
    cbr i1 %104(prob = 0.5), ^if.then2, ^while.header1;
  ^if.then1:
    i32 %105 = sdiv i32 %95, i32 %93;
    ubr ^b5;
  ^entry6:
    i32* %106 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %102];
    i32 %107 = load i32* %106;
    i1 %108 = icmp neq i32 %107, i32 40;
    i32 %109 = add i32 %102, i32 -1;
    cbr i1 %108(prob = 0.984615), ^while.body3, ^b6;
  ^if.then2:
    i32 %110 = add i32 %73, i32 1;
    i32* %111 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %110];
    i32 %112 = add i32 %75, i32 -48;
    store i32* %111 with i32 %112;
    i32* %113 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %87];
    i32 %114 = load i32* %113;
    i1 %115 = icmp neq i32 %114, i32 32;
    cbr i1 %115(prob = 0.984615), ^while.body4, ^b7;
  ^b5:
    i32 %116 = phi [^entry5, i32 %101] [^if.then1, i32 %105];
    cbr i1 %83(prob = 0.5), ^if.then3, ^b8;
  ^b6:
    i32 %117 = phi [^b4, i32 %19] [^entry6, i32 %19] [^while.body3, i32 %136];
    i32 %118 = phi [^b4, i32 %102] [^entry6, i32 %109] [^while.body3, i32 %137];
    i1 %119 = icmp eq i32 %23, i32 43;
    cbr i1 %119(prob = 0.5), ^while.header2, ^b9;
  ^while.header1:
    i32 %120 = phi [^if.else1, i32 %73] [^b7, i32 %110] [^b10, i32 %171];
    i32 %121 = phi [^if.else1, i32 %87] [^b7, i32 %127] [^b10, i32 %87];
    i32* %122 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %121];
    i32 %123 = load i32* %122;
    i1 %124 = icmp neq i32 %123, i32 64;
    cbr i1 %124(prob = 0.984615), ^while.body2, ^b3;
  ^if.then3:
    i32 %125 = srem i32 %95, i32 %93;
    ubr ^b8;
  ^b7:
    i32 %126 = phi [^if.then2, i32 1] [^while.body4, i32 %150];
    i32 %127 = add i32 %72, i32 %126;
    ubr ^while.header1;
  ^while.body3:
    i32 %128 = phi [^entry6, i32 %109] [^while.body3, i32 %137];
    i32 %129 = phi [^entry6, i32 %19] [^while.body3, i32 %136];
    i32 %130 = phi [^entry6, i32 %107] [^while.body3, i32 %134];
    i32* %131 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %129];
    store i32* %131 with i32 32;
    i32* %132 = getelementptr &(i32* %131)[i64 1];
    store i32* %132 with i32 %130;
    i32* %133 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %128];
    i32 %134 = load i32* %133;
    i1 %135 = icmp neq i32 %134, i32 40;
    i32 %136 = add i32 %129, i32 2;
    i32 %137 = add i32 %128, i32 -1;
    cbr i1 %135(prob = 0.984615), ^while.body3, ^b6;
  ^while.body4:
    i32 %138 = phi [^if.then2, i32 %112] [^while.body4, i32 %145];
    i32 %139 = phi [^if.then2, i32 1] [^while.body4, i32 %150];
    i32 %140 = add i32 %72, i32 %139;
    i32* %141 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %140];
    i32 %142 = load i32* %141;
    i32 %143 = mul i32 %138, i32 10;
    i32 %144 = add i32 %143, i32 -48;
    i32 %145 = add i32 %142, i32 %144;
    store i32* %111 with i32 %145;
    i32 %146 = add i32 %87, i32 %139;
    i32* %147 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %146];
    i32 %148 = load i32* %147;
    i1 %149 = icmp neq i32 %148, i32 32;
    i32 %150 = add i32 %139, i32 1;
    cbr i1 %149(prob = 0.984615), ^while.body4, ^b7;
  ^while.header2:
    i32 %151 = phi [^b6, i32 %117] [^entry8, i32 %181];
    i32 %152 = phi [^b6, i32 %118] [^entry8, i32 %179];
    i32* %153 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %152];
    i32 %154 = load i32* %153;
    i1 %155 = icmp eq i32 %154, i32 43;
    i1 %156 = icmp eq i32 %154, i32 45;
    i1 %157 = or i1 %155, i1 %156;
    i1 %158 = icmp eq i32 %154, i32 42;
    i1 %159 = icmp eq i32 %154, i32 47;
    i1 %160 = or i1 %158, i1 %159;
    i1 %161 = or i1 %157, i1 %160;
    i1 %162 = icmp eq i32 %154, i32 37;
    i1 %163 = icmp eq i32 %154, i32 94;
    i1 %164 = or i1 %162, i1 %163;
    i1 %165 = or i1 %161, i1 %164;
    cbr i1 %165(prob = 0.999519), ^entry8, ^entry7;
  ^b8:
    i32 %166 = phi [^b5, i32 %116] [^if.then3, i32 %125];
    cbr i1 %84(prob = 0.5), ^entry9, ^b10;
  ^b9:
    i32 %167 = phi [^b6, i32 %117] [^entry7, i32 %173];
    i32 %168 = phi [^b6, i32 %118] [^entry7, i32 %175];
    i1 %169 = icmp eq i32 %23, i32 45;
    cbr i1 %169(prob = 0.5), ^while.header3, ^b11;
  ^b10:
    i32 %170 = phi [^b8, i32 %166] [^entry9, i32 1] [^while.body5, i32 %203];
    i32 %171 = add i32 %73, i32 -1;
    i32* %172 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %171];
    store i32* %172 with i32 %170;
    ubr ^while.header1;
  ^entry7:
    i32 %173 = phi [^while.header2, i32 %151] [^entry8, i32 %181];
    i32 %174 = phi [^while.header2, i32 %152] [^entry8, i32 %179];
    i32 %175 = add i32 %174, i32 1;
    i32* %176 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %175];
    store i32* %176 with i32 43;
    ubr ^b9;
  ^entry8:
    i32* %177 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %151];
    store i32* %177 with i32 32;
    i32* %178 = getelementptr &(i32* %177)[i64 1];
    store i32* %178 with i32 %154;
    i32 %179 = add i32 %152, i32 -1;
    i1 %180 = icmp eq i32 %179, i32 0;
    i32 %181 = add i32 %151, i32 2;
    cbr i1 %180(prob = 0.5), ^entry7, ^while.header2;
  ^entry9:
    i1 %182 = icmp neq i32 %93, i32 0;
    cbr i1 %182(prob = 0.984615), ^while.body5, ^b10;
  ^while.header3:
    i32 %183 = phi [^b9, i32 %167] [^entry11, i32 %214];
    i32 %184 = phi [^b9, i32 %168] [^entry11, i32 %212];
    i32* %185 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %184];
    i32 %186 = load i32* %185;
    i1 %187 = icmp eq i32 %186, i32 43;
    i1 %188 = icmp eq i32 %186, i32 45;
    i1 %189 = or i1 %187, i1 %188;
    i1 %190 = icmp eq i32 %186, i32 42;
    i1 %191 = icmp eq i32 %186, i32 47;
    i1 %192 = or i1 %190, i1 %191;
    i1 %193 = or i1 %189, i1 %192;
    i1 %194 = icmp eq i32 %186, i32 37;
    i1 %195 = icmp eq i32 %186, i32 94;
    i1 %196 = or i1 %194, i1 %195;
    i1 %197 = or i1 %193, i1 %196;
    cbr i1 %197(prob = 0.999519), ^entry11, ^entry10;
  ^b11:
    i32 %198 = phi [^b9, i32 %167] [^entry10, i32 %206];
    i32 %199 = phi [^b9, i32 %168] [^entry10, i32 %208];
    i1 %200 = icmp eq i32 %23, i32 42;
    cbr i1 %200(prob = 0.5), ^while.header4, ^b12;
  ^while.body5:
    i32 %201 = phi [^entry9, i32 %93] [^while.body5, i32 %204];
    i32 %202 = phi [^entry9, i32 1] [^while.body5, i32 %203];
    i32 %203 = mul i32 %95, i32 %202;
    i32 %204 = add i32 %201, i32 -1;
    i1 %205 = icmp neq i32 %204, i32 0;
    cbr i1 %205(prob = 0.984615), ^while.body5, ^b10;
  ^entry10:
    i32 %206 = phi [^while.header3, i32 %183] [^entry11, i32 %214];
    i32 %207 = phi [^while.header3, i32 %184] [^entry11, i32 %212];
    i32 %208 = add i32 %207, i32 1;
    i32* %209 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %208];
    store i32* %209 with i32 45;
    ubr ^b11;
  ^entry11:
    i32* %210 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %183];
    store i32* %210 with i32 32;
    i32* %211 = getelementptr &(i32* %210)[i64 1];
    store i32* %211 with i32 %186;
    i32 %212 = add i32 %184, i32 -1;
    i1 %213 = icmp eq i32 %212, i32 0;
    i32 %214 = add i32 %183, i32 2;
    cbr i1 %213(prob = 0.5), ^entry10, ^while.header3;
  ^while.header4:
    i32 %215 = phi [^b11, i32 %198] [^entry13, i32 %237];
    i32 %216 = phi [^b11, i32 %199] [^entry13, i32 %235];
    i32* %217 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %216];
    i32 %218 = load i32* %217;
    i1 %219 = icmp eq i32 %218, i32 42;
    i1 %220 = icmp eq i32 %218, i32 47;
    i1 %221 = or i1 %219, i1 %220;
    i1 %222 = icmp eq i32 %218, i32 37;
    i1 %223 = icmp eq i32 %218, i32 94;
    i1 %224 = or i1 %222, i1 %223;
    i1 %225 = or i1 %221, i1 %224;
    cbr i1 %225(prob = 0.998077), ^entry13, ^entry12;
  ^b12:
    i32 %226 = phi [^b11, i32 %198] [^entry12, i32 %229];
    i32 %227 = phi [^b11, i32 %199] [^entry12, i32 %231];
    i1 %228 = icmp eq i32 %23, i32 47;
    cbr i1 %228(prob = 0.5), ^while.header5, ^b13;
  ^entry12:
    i32 %229 = phi [^while.header4, i32 %215] [^entry13, i32 %237];
    i32 %230 = phi [^while.header4, i32 %216] [^entry13, i32 %235];
    i32 %231 = add i32 %230, i32 1;
    i32* %232 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %231];
    store i32* %232 with i32 42;
    ubr ^b12;
  ^entry13:
    i32* %233 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %215];
    store i32* %233 with i32 32;
    i32* %234 = getelementptr &(i32* %233)[i64 1];
    store i32* %234 with i32 %218;
    i32 %235 = add i32 %216, i32 -1;
    i1 %236 = icmp eq i32 %235, i32 0;
    i32 %237 = add i32 %215, i32 2;
    cbr i1 %236(prob = 0.5), ^entry12, ^while.header4;
  ^while.header5:
    i32 %238 = phi [^b12, i32 %226] [^entry15, i32 %264];
    i32 %239 = phi [^b12, i32 %227] [^entry15, i32 %262];
    i32* %240 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %239];
    i32 %241 = load i32* %240;
    i1 %242 = icmp eq i32 %241, i32 42;
    i1 %243 = icmp eq i32 %241, i32 47;
    i1 %244 = or i1 %242, i1 %243;
    i1 %245 = icmp eq i32 %241, i32 37;
    i1 %246 = icmp eq i32 %241, i32 94;
    i1 %247 = or i1 %245, i1 %246;
    i1 %248 = or i1 %244, i1 %247;
    cbr i1 %248(prob = 0.998077), ^entry15, ^entry14;
  ^b13:
    i32 %249 = phi [^b12, i32 %226] [^entry14, i32 %252];
    i32 %250 = phi [^b12, i32 %227] [^entry14, i32 %254];
    i1 %251 = icmp eq i32 %23, i32 37;
    cbr i1 %251(prob = 0.5), ^while.header6, ^b14;
  ^entry14:
    i32 %252 = phi [^while.header5, i32 %238] [^entry15, i32 %264];
    i32 %253 = phi [^while.header5, i32 %239] [^entry15, i32 %262];
    i32 %254 = add i32 %253, i32 1;
    i32* %255 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %254];
    store i32* %255 with i32 47;
    ubr ^b13;
  ^b14:
    i32 %256 = phi [^b13, i32 %250] [^entry16, i32 %278];
    i32 %257 = phi [^b13, i32 %249] [^entry16, i32 %276];
    i32* %258 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %257];
    store i32* %258 with i32 32;
    i32 %259 = add i32 %257, i32 1;
    ubr ^while.header;
  ^entry15:
    i32* %260 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %238];
    store i32* %260 with i32 32;
    i32* %261 = getelementptr &(i32* %260)[i64 1];
    store i32* %261 with i32 %241;
    i32 %262 = add i32 %239, i32 -1;
    i1 %263 = icmp eq i32 %262, i32 0;
    i32 %264 = add i32 %238, i32 2;
    cbr i1 %263(prob = 0.5), ^entry14, ^while.header5;
  ^while.header6:
    i32 %265 = phi [^b13, i32 %249] [^entry17, i32 %284];
    i32 %266 = phi [^b13, i32 %250] [^entry17, i32 %282];
    i32* %267 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %266];
    i32 %268 = load i32* %267;
    i1 %269 = icmp eq i32 %268, i32 42;
    i1 %270 = icmp eq i32 %268, i32 47;
    i1 %271 = or i1 %269, i1 %270;
    i1 %272 = icmp eq i32 %268, i32 37;
    i1 %273 = icmp eq i32 %268, i32 94;
    i1 %274 = or i1 %272, i1 %273;
    i1 %275 = or i1 %271, i1 %274;
    cbr i1 %275(prob = 0.998077), ^entry17, ^entry16;
  ^entry16:
    i32 %276 = phi [^while.header6, i32 %265] [^entry17, i32 %284];
    i32 %277 = phi [^while.header6, i32 %266] [^entry17, i32 %282];
    i32 %278 = add i32 %277, i32 1;
    i32* %279 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %278];
    store i32* %279 with i32 37;
    ubr ^b14;
  ^entry17:
    i32* %280 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %265];
    store i32* %280 with i32 32;
    i32* %281 = getelementptr &(i32* %280)[i64 1];
    store i32* %281 with i32 %268;
    i32 %282 = add i32 %266, i32 -1;
    i1 %283 = icmp eq i32 %282, i32 0;
    i32 %284 = add i32 %265, i32 2;
    cbr i1 %283(prob = 0.5), ^entry16, ^while.header6;
}
