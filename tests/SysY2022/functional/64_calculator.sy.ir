internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal [10000 * i32]* @ints, align 8 { Flexible };
internal [10000 * i32]* @chas, align 8 { Flexible };
internal [10000 * i32]* @get, align 8 { Flexible };
internal [10000 * i32]* @get2, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = icmp neq i32 %0, i32 13;
    i1 %2 = icmp neq i32 %0, i32 10;
    i1 %3 = and i1 %1, i1 %2;
    [10000 * i32]* %4 = ptrcast [10000 * i32]* @get to [10000 * i32]*;
    i32* %5 = getelementptr &([10000 * i32]* %4)[i64 0][i64 0];
    [10000 * i32]* %6 = ptrcast [10000 * i32]* @chas to [10000 * i32]*;
    [10000 * i32]* %7 = ptrcast [10000 * i32]* @ints to [10000 * i32]*;
    [10000 * i32]* %8 = ptrcast [10000 * i32]* @get2 to [10000 * i32]*;
    cbr i1 %3(prob = 0.984615), ^while.body, ^b;
  ^b:
    i32 %9 = phi [^entry, i32 0] [^while.body, i32 %17];
    ubr ^while.header;
  ^while.body:
    i32 %10 = phi [^entry, i32 %0] [^while.body, i32 %13];
    i32 %11 = phi [^entry, i32 0] [^while.body, i32 %17];
    i32* %12 = getelementptr &(i32* %5)[i32 %11];
    store i32* %12 with i32 %10;
    i32 %13 = call () -> i32 @getch();
    i1 %14 = icmp neq i32 %13, i32 13;
    i1 %15 = icmp neq i32 %13, i32 10;
    i1 %16 = and i1 %14, i1 %15;
    i32 %17 = add i32 %11, i32 1;
    cbr i1 %16(prob = 0.984615), ^while.body, ^b;
  ^while.header:
    i32 %18 = phi [^b, i32 0] [^if.then, i32 %26] [^b14, i32 %26];
    i32 %19 = phi [^b, i32 1] [^if.then, i32 %29] [^b14, i32 %275];
    i32 %20 = phi [^b, i32 0] [^if.then, i32 %20] [^b14, i32 %272];
    i1 %21 = icmp sgt i32 %9, i32 %18;
    cbr i1 %21(prob = 0.984615), ^while.body1, ^indirect;
  ^while.body1:
    i32* %22 = getelementptr &([10000 * i32]* %4)[i64 0][i32 %18];
    i32 %23 = load i32* %22;
    i32 %24 = add i32 %23, i32 -48;
    i1 %25 = icmp ult i32 %24, i32 10;
    i32 %26 = add i32 %18, i32 1;
    cbr i1 %25(prob = 0.5), ^if.then, ^if.else;
  ^indirect:
    i1 %27 = icmp sgt i32 %20, i32 0;
    cbr i1 %27(prob = 0.984615), ^indirect1, ^b1;
  ^if.then:
    i32* %28 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %19];
    store i32* %28 with i32 %23;
    i32 %29 = add i32 %19, i32 1;
    ubr ^while.header;
  ^indirect1:
    i32 %30 = add i32 %20, i32 -8;
    i1 %31 = icmp sgt i32 %30, i32 0;
    cbr i1 %31(prob = 0.888889), ^entry2, ^entry3;
  ^if.else:
    i1 %32 = icmp eq i32 %23, i32 40;
    cbr i1 %32(prob = 0.5), ^entry1, ^b2;
  ^b1:
    i32 %33 = phi [^indirect, i32 %19] [^entry3, i32 %87];
    i32* %34 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %33];
    store i32* %34 with i32 64;
    i32* %35 = getelementptr &([10000 * i32]* %8)[i64 0][i64 1];
    i32 %36 = load i32* %35;
    i1 %37 = icmp neq i32 %36, i32 64;
    cbr i1 %37(prob = 0.984615), ^while.body2, ^b3;
  ^entry1:
    i32 %38 = add i32 %20, i32 1;
    i32* %39 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %38];
    store i32* %39 with i32 40;
    ubr ^b2;
  ^entry2:
    i32 %40 = phi [^indirect1, i32 %19] [^entry2, i32 %76];
    i32 %41 = phi [^indirect1, i32 %20] [^entry2, i32 %74];
    i32* %42 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %41];
    i32 %43 = load i32* %42;
    i32* %44 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %40];
    store i32* %44 with i32 32;
    i32* %45 = getelementptr &(i32* %44)[i64 1];
    store i32* %45 with i32 %43;
    i32* %46 = getelementptr &(i32* %42)[i64 -1];
    i32 %47 = load i32* %46;
    i32* %48 = getelementptr &(i32* %44)[i64 2];
    store i32* %48 with i32 32;
    i32* %49 = getelementptr &(i32* %44)[i64 3];
    store i32* %49 with i32 %47;
    i32* %50 = getelementptr &(i32* %42)[i64 -2];
    i32 %51 = load i32* %50;
    i32* %52 = getelementptr &(i32* %44)[i64 4];
    store i32* %52 with i32 32;
    i32* %53 = getelementptr &(i32* %44)[i64 5];
    store i32* %53 with i32 %51;
    i32* %54 = getelementptr &(i32* %42)[i64 -3];
    i32 %55 = load i32* %54;
    i32* %56 = getelementptr &(i32* %44)[i64 6];
    store i32* %56 with i32 32;
    i32* %57 = getelementptr &(i32* %44)[i64 7];
    store i32* %57 with i32 %55;
    i32* %58 = getelementptr &(i32* %42)[i64 -4];
    i32 %59 = load i32* %58;
    i32* %60 = getelementptr &(i32* %44)[i64 8];
    store i32* %60 with i32 32;
    i32* %61 = getelementptr &(i32* %44)[i64 9];
    store i32* %61 with i32 %59;
    i32* %62 = getelementptr &(i32* %42)[i64 -5];
    i32 %63 = load i32* %62;
    i32* %64 = getelementptr &(i32* %44)[i64 10];
    store i32* %64 with i32 32;
    i32* %65 = getelementptr &(i32* %44)[i64 11];
    store i32* %65 with i32 %63;
    i32* %66 = getelementptr &(i32* %42)[i64 -6];
    i32 %67 = load i32* %66;
    i32* %68 = getelementptr &(i32* %44)[i64 12];
    store i32* %68 with i32 32;
    i32* %69 = getelementptr &(i32* %44)[i64 13];
    store i32* %69 with i32 %67;
    i32* %70 = getelementptr &(i32* %42)[i64 -7];
    i32 %71 = load i32* %70;
    i32* %72 = getelementptr &(i32* %44)[i64 14];
    store i32* %72 with i32 32;
    i32* %73 = getelementptr &(i32* %44)[i64 15];
    store i32* %73 with i32 %71;
    i32 %74 = add i32 %41, i32 -8;
    i1 %75 = icmp sgt i32 %74, i32 8;
    i32 %76 = add i32 %40, i32 16;
    cbr i1 %75(prob = 0.888889), ^entry2, ^entry3;
  ^b2:
    i32 %77 = phi [^if.else, i32 %20] [^entry1, i32 %38];
    i1 %78 = icmp eq i32 %23, i32 94;
    cbr i1 %78(prob = 0.5), ^entry4, ^b4;
  ^entry3 {scalar}:
    i32 %79 = phi [^indirect1, i32 %20] [^entry2, i32 %74] [^entry3, i32 %85];
    i32 %80 = phi [^indirect1, i32 %19] [^entry2, i32 %76] [^entry3, i32 %87];
    i32* %81 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %79];
    i32 %82 = load i32* %81;
    i32* %83 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %80];
    store i32* %83 with i32 32;
    i32* %84 = getelementptr &(i32* %83)[i64 1];
    store i32* %84 with i32 %82;
    i32 %85 = add i32 %79, i32 -1;
    i1 %86 = icmp sgt i32 %85, i32 0;
    i32 %87 = add i32 %80, i32 2;
    cbr i1 %86(prob = 0.875), ^entry3, ^b1;
  ^while.body2:
    i32 %88 = phi [^b1, i32 1] [^while.header1, i32 %137];
    i32 %89 = phi [^b1, i32 0] [^while.header1, i32 %136];
    i32* %90 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %88];
    i32 %91 = load i32* %90;
    i1 %92 = icmp eq i32 %91, i32 43;
    i1 %93 = icmp eq i32 %91, i32 45;
    i1 %94 = or i1 %92, i1 %93;
    i1 %95 = icmp eq i32 %91, i32 42;
    i1 %96 = icmp eq i32 %91, i32 47;
    i1 %97 = or i1 %95, i1 %96;
    i1 %98 = or i1 %94, i1 %97;
    i1 %99 = icmp eq i32 %91, i32 37;
    i1 %100 = icmp eq i32 %91, i32 94;
    i1 %101 = or i1 %99, i1 %100;
    i1 %102 = or i1 %98, i1 %101;
    i32 %103 = add i32 %88, i32 1;
    cbr i1 %102(prob = 0.984375), ^entry5, ^if.else1;
  ^b3:
    i32* %104 = getelementptr &([10000 * i32]* %7)[i64 0][i64 1];
    i32 %105 = load i32* %104;
    call (i32) -> void @putint(i32 %105);
    ret i32 0;
  ^entry4:
    i32 %106 = add i32 %77, i32 1;
    i32* %107 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %106];
    store i32* %107 with i32 94;
    ubr ^b4;
  ^entry5:
    i32* %108 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %89];
    i32 %109 = load i32* %108;
    i32* %110 = getelementptr &(i32* %108)[i64 -1];
    i32 %111 = load i32* %110;
    i32 %112 = add i32 %109, i32 %111;
    i32 %113 = select i1 %92 ? i32 %112 : i32 0;
    i32 %114 = sub i32 %111, i32 %109;
    i32 %115 = select i1 %93 ? i32 %114 : i32 %113;
    i32 %116 = mul i32 %109, i32 %111;
    i32 %117 = select i1 %95 ? i32 %116 : i32 %115;
    cbr i1 %96(prob = 0.5), ^if.then1, ^b5;
  ^b4:
    i32 %118 = phi [^b2, i32 %77] [^entry4, i32 %106];
    i1 %119 = icmp eq i32 %23, i32 41;
    cbr i1 %119(prob = 0.5), ^entry6, ^b6;
  ^if.else1:
    i1 %120 = icmp neq i32 %91, i32 32;
    cbr i1 %120(prob = 0.5), ^if.then2, ^while.header1;
  ^if.then1:
    i32 %121 = sdiv i32 %111, i32 %109;
    ubr ^b5;
  ^entry6:
    i32* %122 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %118];
    i32 %123 = load i32* %122;
    i1 %124 = icmp neq i32 %123, i32 40;
    i32 %125 = add i32 %118, i32 -1;
    cbr i1 %124(prob = 0.984615), ^while.body3, ^b6;
  ^if.then2:
    i32 %126 = add i32 %89, i32 1;
    i32* %127 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %126];
    i32 %128 = add i32 %91, i32 -48;
    store i32* %127 with i32 %128;
    i32* %129 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %103];
    i32 %130 = load i32* %129;
    i1 %131 = icmp neq i32 %130, i32 32;
    cbr i1 %131(prob = 0.984615), ^while.body4, ^b7;
  ^b5:
    i32 %132 = phi [^entry5, i32 %117] [^if.then1, i32 %121];
    cbr i1 %99(prob = 0.5), ^if.then3, ^b8;
  ^b6:
    i32 %133 = phi [^b4, i32 %19] [^entry6, i32 %19] [^while.body3, i32 %152];
    i32 %134 = phi [^b4, i32 %118] [^entry6, i32 %125] [^while.body3, i32 %153];
    i1 %135 = icmp eq i32 %23, i32 43;
    cbr i1 %135(prob = 0.5), ^while.header2, ^b9;
  ^while.header1:
    i32 %136 = phi [^if.else1, i32 %89] [^b7, i32 %126] [^b10, i32 %187];
    i32 %137 = phi [^if.else1, i32 %103] [^b7, i32 %143] [^b10, i32 %103];
    i32* %138 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %137];
    i32 %139 = load i32* %138;
    i1 %140 = icmp neq i32 %139, i32 64;
    cbr i1 %140(prob = 0.984615), ^while.body2, ^b3;
  ^if.then3:
    i32 %141 = srem i32 %111, i32 %109;
    ubr ^b8;
  ^b7:
    i32 %142 = phi [^if.then2, i32 1] [^while.body4, i32 %166];
    i32 %143 = add i32 %88, i32 %142;
    ubr ^while.header1;
  ^while.body3:
    i32 %144 = phi [^entry6, i32 %125] [^while.body3, i32 %153];
    i32 %145 = phi [^entry6, i32 %19] [^while.body3, i32 %152];
    i32 %146 = phi [^entry6, i32 %123] [^while.body3, i32 %150];
    i32* %147 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %145];
    store i32* %147 with i32 32;
    i32* %148 = getelementptr &(i32* %147)[i64 1];
    store i32* %148 with i32 %146;
    i32* %149 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %144];
    i32 %150 = load i32* %149;
    i1 %151 = icmp neq i32 %150, i32 40;
    i32 %152 = add i32 %145, i32 2;
    i32 %153 = add i32 %144, i32 -1;
    cbr i1 %151(prob = 0.984615), ^while.body3, ^b6;
  ^while.body4:
    i32 %154 = phi [^if.then2, i32 %128] [^while.body4, i32 %161];
    i32 %155 = phi [^if.then2, i32 1] [^while.body4, i32 %166];
    i32 %156 = add i32 %88, i32 %155;
    i32* %157 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %156];
    i32 %158 = load i32* %157;
    i32 %159 = mul i32 %154, i32 10;
    i32 %160 = add i32 %159, i32 -48;
    i32 %161 = add i32 %158, i32 %160;
    store i32* %127 with i32 %161;
    i32 %162 = add i32 %103, i32 %155;
    i32* %163 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %162];
    i32 %164 = load i32* %163;
    i1 %165 = icmp neq i32 %164, i32 32;
    i32 %166 = add i32 %155, i32 1;
    cbr i1 %165(prob = 0.984615), ^while.body4, ^b7;
  ^while.header2:
    i32 %167 = phi [^b6, i32 %133] [^entry8, i32 %197];
    i32 %168 = phi [^b6, i32 %134] [^entry8, i32 %195];
    i32* %169 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %168];
    i32 %170 = load i32* %169;
    i1 %171 = icmp eq i32 %170, i32 43;
    i1 %172 = icmp eq i32 %170, i32 45;
    i1 %173 = or i1 %171, i1 %172;
    i1 %174 = icmp eq i32 %170, i32 42;
    i1 %175 = icmp eq i32 %170, i32 47;
    i1 %176 = or i1 %174, i1 %175;
    i1 %177 = or i1 %173, i1 %176;
    i1 %178 = icmp eq i32 %170, i32 37;
    i1 %179 = icmp eq i32 %170, i32 94;
    i1 %180 = or i1 %178, i1 %179;
    i1 %181 = or i1 %177, i1 %180;
    cbr i1 %181(prob = 0.999519), ^entry8, ^entry7;
  ^b8:
    i32 %182 = phi [^b5, i32 %132] [^if.then3, i32 %141];
    cbr i1 %100(prob = 0.5), ^entry9, ^b10;
  ^b9:
    i32 %183 = phi [^b6, i32 %133] [^entry7, i32 %189];
    i32 %184 = phi [^b6, i32 %134] [^entry7, i32 %191];
    i1 %185 = icmp eq i32 %23, i32 45;
    cbr i1 %185(prob = 0.5), ^while.header3, ^b11;
  ^b10:
    i32 %186 = phi [^b8, i32 %182] [^entry9, i32 1] [^while.body5, i32 %219];
    i32 %187 = add i32 %89, i32 -1;
    i32* %188 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %187];
    store i32* %188 with i32 %186;
    ubr ^while.header1;
  ^entry7:
    i32 %189 = phi [^while.header2, i32 %167] [^entry8, i32 %197];
    i32 %190 = phi [^while.header2, i32 %168] [^entry8, i32 %195];
    i32 %191 = add i32 %190, i32 1;
    i32* %192 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %191];
    store i32* %192 with i32 43;
    ubr ^b9;
  ^entry8:
    i32* %193 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %167];
    store i32* %193 with i32 32;
    i32* %194 = getelementptr &(i32* %193)[i64 1];
    store i32* %194 with i32 %170;
    i32 %195 = add i32 %168, i32 -1;
    i1 %196 = icmp eq i32 %195, i32 0;
    i32 %197 = add i32 %167, i32 2;
    cbr i1 %196(prob = 0.5), ^entry7, ^while.header2;
  ^entry9:
    i1 %198 = icmp neq i32 %109, i32 0;
    cbr i1 %198(prob = 0.984615), ^while.body5, ^b10;
  ^while.header3:
    i32 %199 = phi [^b9, i32 %183] [^entry11, i32 %230];
    i32 %200 = phi [^b9, i32 %184] [^entry11, i32 %228];
    i32* %201 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %200];
    i32 %202 = load i32* %201;
    i1 %203 = icmp eq i32 %202, i32 43;
    i1 %204 = icmp eq i32 %202, i32 45;
    i1 %205 = or i1 %203, i1 %204;
    i1 %206 = icmp eq i32 %202, i32 42;
    i1 %207 = icmp eq i32 %202, i32 47;
    i1 %208 = or i1 %206, i1 %207;
    i1 %209 = or i1 %205, i1 %208;
    i1 %210 = icmp eq i32 %202, i32 37;
    i1 %211 = icmp eq i32 %202, i32 94;
    i1 %212 = or i1 %210, i1 %211;
    i1 %213 = or i1 %209, i1 %212;
    cbr i1 %213(prob = 0.999519), ^entry11, ^entry10;
  ^b11:
    i32 %214 = phi [^b9, i32 %183] [^entry10, i32 %222];
    i32 %215 = phi [^b9, i32 %184] [^entry10, i32 %224];
    i1 %216 = icmp eq i32 %23, i32 42;
    cbr i1 %216(prob = 0.5), ^while.header4, ^b12;
  ^while.body5:
    i32 %217 = phi [^entry9, i32 %109] [^while.body5, i32 %220];
    i32 %218 = phi [^entry9, i32 1] [^while.body5, i32 %219];
    i32 %219 = mul i32 %111, i32 %218;
    i32 %220 = add i32 %217, i32 -1;
    i1 %221 = icmp neq i32 %220, i32 0;
    cbr i1 %221(prob = 0.984615), ^while.body5, ^b10;
  ^entry10:
    i32 %222 = phi [^while.header3, i32 %199] [^entry11, i32 %230];
    i32 %223 = phi [^while.header3, i32 %200] [^entry11, i32 %228];
    i32 %224 = add i32 %223, i32 1;
    i32* %225 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %224];
    store i32* %225 with i32 45;
    ubr ^b11;
  ^entry11:
    i32* %226 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %199];
    store i32* %226 with i32 32;
    i32* %227 = getelementptr &(i32* %226)[i64 1];
    store i32* %227 with i32 %202;
    i32 %228 = add i32 %200, i32 -1;
    i1 %229 = icmp eq i32 %228, i32 0;
    i32 %230 = add i32 %199, i32 2;
    cbr i1 %229(prob = 0.5), ^entry10, ^while.header3;
  ^while.header4:
    i32 %231 = phi [^b11, i32 %214] [^entry13, i32 %253];
    i32 %232 = phi [^b11, i32 %215] [^entry13, i32 %251];
    i32* %233 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %232];
    i32 %234 = load i32* %233;
    i1 %235 = icmp eq i32 %234, i32 42;
    i1 %236 = icmp eq i32 %234, i32 47;
    i1 %237 = or i1 %235, i1 %236;
    i1 %238 = icmp eq i32 %234, i32 37;
    i1 %239 = icmp eq i32 %234, i32 94;
    i1 %240 = or i1 %238, i1 %239;
    i1 %241 = or i1 %237, i1 %240;
    cbr i1 %241(prob = 0.998077), ^entry13, ^entry12;
  ^b12:
    i32 %242 = phi [^b11, i32 %214] [^entry12, i32 %245];
    i32 %243 = phi [^b11, i32 %215] [^entry12, i32 %247];
    i1 %244 = icmp eq i32 %23, i32 47;
    cbr i1 %244(prob = 0.5), ^while.header5, ^b13;
  ^entry12:
    i32 %245 = phi [^while.header4, i32 %231] [^entry13, i32 %253];
    i32 %246 = phi [^while.header4, i32 %232] [^entry13, i32 %251];
    i32 %247 = add i32 %246, i32 1;
    i32* %248 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %247];
    store i32* %248 with i32 42;
    ubr ^b12;
  ^entry13:
    i32* %249 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %231];
    store i32* %249 with i32 32;
    i32* %250 = getelementptr &(i32* %249)[i64 1];
    store i32* %250 with i32 %234;
    i32 %251 = add i32 %232, i32 -1;
    i1 %252 = icmp eq i32 %251, i32 0;
    i32 %253 = add i32 %231, i32 2;
    cbr i1 %252(prob = 0.5), ^entry12, ^while.header4;
  ^while.header5:
    i32 %254 = phi [^b12, i32 %242] [^entry15, i32 %280];
    i32 %255 = phi [^b12, i32 %243] [^entry15, i32 %278];
    i32* %256 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %255];
    i32 %257 = load i32* %256;
    i1 %258 = icmp eq i32 %257, i32 42;
    i1 %259 = icmp eq i32 %257, i32 47;
    i1 %260 = or i1 %258, i1 %259;
    i1 %261 = icmp eq i32 %257, i32 37;
    i1 %262 = icmp eq i32 %257, i32 94;
    i1 %263 = or i1 %261, i1 %262;
    i1 %264 = or i1 %260, i1 %263;
    cbr i1 %264(prob = 0.998077), ^entry15, ^entry14;
  ^b13:
    i32 %265 = phi [^b12, i32 %242] [^entry14, i32 %268];
    i32 %266 = phi [^b12, i32 %243] [^entry14, i32 %270];
    i1 %267 = icmp eq i32 %23, i32 37;
    cbr i1 %267(prob = 0.5), ^while.header6, ^b14;
  ^entry14:
    i32 %268 = phi [^while.header5, i32 %254] [^entry15, i32 %280];
    i32 %269 = phi [^while.header5, i32 %255] [^entry15, i32 %278];
    i32 %270 = add i32 %269, i32 1;
    i32* %271 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %270];
    store i32* %271 with i32 47;
    ubr ^b13;
  ^b14:
    i32 %272 = phi [^b13, i32 %266] [^entry16, i32 %294];
    i32 %273 = phi [^b13, i32 %265] [^entry16, i32 %292];
    i32* %274 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %273];
    store i32* %274 with i32 32;
    i32 %275 = add i32 %273, i32 1;
    ubr ^while.header;
  ^entry15:
    i32* %276 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %254];
    store i32* %276 with i32 32;
    i32* %277 = getelementptr &(i32* %276)[i64 1];
    store i32* %277 with i32 %257;
    i32 %278 = add i32 %255, i32 -1;
    i1 %279 = icmp eq i32 %278, i32 0;
    i32 %280 = add i32 %254, i32 2;
    cbr i1 %279(prob = 0.5), ^entry14, ^while.header5;
  ^while.header6:
    i32 %281 = phi [^b13, i32 %265] [^entry17, i32 %300];
    i32 %282 = phi [^b13, i32 %266] [^entry17, i32 %298];
    i32* %283 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %282];
    i32 %284 = load i32* %283;
    i1 %285 = icmp eq i32 %284, i32 42;
    i1 %286 = icmp eq i32 %284, i32 47;
    i1 %287 = or i1 %285, i1 %286;
    i1 %288 = icmp eq i32 %284, i32 37;
    i1 %289 = icmp eq i32 %284, i32 94;
    i1 %290 = or i1 %288, i1 %289;
    i1 %291 = or i1 %287, i1 %290;
    cbr i1 %291(prob = 0.998077), ^entry17, ^entry16;
  ^entry16:
    i32 %292 = phi [^while.header6, i32 %281] [^entry17, i32 %300];
    i32 %293 = phi [^while.header6, i32 %282] [^entry17, i32 %298];
    i32 %294 = add i32 %293, i32 1;
    i32* %295 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %294];
    store i32* %295 with i32 37;
    ubr ^b14;
  ^entry17:
    i32* %296 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %281];
    store i32* %296 with i32 32;
    i32* %297 = getelementptr &(i32* %296)[i64 1];
    store i32* %297 with i32 %284;
    i32 %298 = add i32 %282, i32 -1;
    i1 %299 = icmp eq i32 %298, i32 0;
    i32 %300 = add i32 %281, i32 2;
    cbr i1 %299(prob = 0.5), ^entry16, ^while.header6;
}
