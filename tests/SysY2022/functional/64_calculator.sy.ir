internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal [10000 * i32]* @ints;
internal [10000 * i32]* @chas;
internal [10000 * i32]* @get;
internal [10000 * i32]* @get2;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %length = alloc i32;
    i32* %ii = alloc i32;
    i32* %i = alloc i32;
    i32* %chat = alloc i32;
    i32* %intt = alloc i32;
    store i32* %i with i32 0;
    store i32* %ii with i32 1;
    store i32* %intt with i32 0;
    store i32* %chat with i32 0;
    i32* %0 = getelementptr &([10000 * i32]* @get)[i64 0][i64 0];
    i32 %1 = call () -> i32 @getch();
    store i32* %length with i32 0;
    ubr ^while.header;
^while.header:
    i32 %2 = phi [^while.body, i32 %14] [^entry, i32 0];
    i32 %3 = phi [^while.body, i32 %15] [^entry, i32 0];
    i32 %4 = phi [^while.body, i32 %16] [^entry, i32 0];
    i32 %5 = phi [^while.body, i32 %17] [^entry, i32 1];
    i32 %6 = phi [^while.body, i32 %19] [^entry, i32 0];
    i32 %7 = phi [^while.body, i32 %20] [^entry, i32 %1];
    i32* %8 = phi [^while.body, i32* %8] [^entry, i32* %0];
    i32 %9 = phi [^entry, i32 %1] [^while.body, i32 %20];
    i1 %10 = scmp neq i32 %9, i32 13;
    cbr i1 %10(prob = 0.5), ^b, ^b1;
^b:
    i1 %11 = scmp neq i32 %7, i32 10;
    ubr ^b1;
^b1:
    i1 %12 = phi [^while.header, i1 false] [^b, i1 %11];
    cbr i1 %12(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i32* %13 = getelementptr &(i32* %8)[i32 %6];
    store i32* %13 with i32 %7;
    i32 %14 = load i32* %intt;
    i32 %15 = load i32* %chat;
    i32 %16 = load i32* %i;
    i32 %17 = load i32* %ii;
    i32 %18 = load i32* %length;
    i32 %19 = add i32 %18, i32 1;
    store i32* %length with i32 %19;
    i32 %20 = call () -> i32 @getch();
    ubr ^while.header;
^while.header1:
    i32 %21 = phi [^b1, i32 %6] [^b7, i32 %62];
    i32 %22 = phi [^b1, i32 %2] [^b7, i32 %63];
    i32 %23 = phi [^b1, i32 %3] [^b7, i32 %64];
    i32 %24 = phi [^b1, i32 %4] [^b7, i32 %67];
    i32 %25 = phi [^b1, i32 %5] [^b7, i32 %66];
    i32 %26 = phi [^b1, i32 %4] [^b7, i32 %67];
    i32 %27 = phi [^b1, i32 %6] [^b7, i32 %62];
    i1 %28 = scmp lt i32 %26, i32 %27;
    cbr i1 %28(prob = 0.97), ^while.body1, ^while.header2;
^while.body1:
    i32* %29 = getelementptr &([10000 * i32]* @get)[i64 0][i32 %24];
    i32 %30 = load i32* %29;
    i1 %31 = scmp gt i32 %30, i32 47;
    cbr i1 %31(prob = 0.5), ^b2, ^b4;
^while.header2:
    i32 %32 = phi [^entry1, i32 %32] [^while.header1, i32 %22];
    i32 %33 = phi [^entry1, i32 %38] [^while.header1, i32 %23];
    i32 %34 = phi [^entry1, i32 %43] [^while.header1, i32 %25];
    i32 %35 = phi [^entry1, i32 %38] [^while.header1, i32 %23];
    i1 %36 = scmp gt i32 %35, i32 0;
    cbr i1 %36(prob = 0.97), ^entry1, ^b3;
^b2:
    i1 %37 = scmp le i32 %30, i32 57;
    ubr ^b4;
^entry1:
    i32 %38 = add i32 %33, i32 -1;
    i32* %39 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %33];
    i32 %40 = load i32* %39;
    i32* %41 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %34];
    store i32* %41 with i32 32;
    i32* %42 = getelementptr &(i32* %41)[i64 1];
    store i32* %42 with i32 %40;
    i32 %43 = add i32 %34, i32 2;
    ubr ^while.header2;
^b3:
    i32* %44 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %34];
    store i32* %44 with i32 64;
    ubr ^while.header3;
^b4:
    i1 %45 = phi [^while.body1, i1 false] [^b2, i1 %37];
    cbr i1 %45(prob = 0.5), ^while.body2, ^b5;
^b5:
    ubr ^while.body2;
^while.body2:
    i32 %46 = phi [^b4, i32 1] [^b5, i32 0];
    i1 %47 = scmp eq i32 %46, i32 1;
    cbr i1 %47(prob = 0.5), ^if.then, ^if.else;
^while.header3:
    i32 %48 = phi [^b30, i32 %186] [^b3, i32 %32];
    i32 %49 = phi [^b30, i32 %188] [^b3, i32 1];
    i32 %50 = phi [^b30, i32 %188] [^b3, i32 1];
    i32* %51 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %50];
    i32 %52 = load i32* %51;
    i1 %53 = scmp neq i32 %52, i32 64;
    cbr i1 %53(prob = 0.97), ^while.body3, ^b6;
^if.then:
    i32* %54 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %25];
    store i32* %54 with i32 %30;
    i32 %55 = add i32 %25, i32 1;
    ubr ^b7;
^if.else:
    i1 %56 = scmp eq i32 %30, i32 40;
    cbr i1 %56(prob = 0.5), ^entry2, ^b10;
^while.body3:
    i32* %57 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %49];
    i32 %58 = load i32* %57;
    i1 %59 = scmp eq i32 %58, i32 43;
    cbr i1 %59(prob = 0.5), ^b9, ^b8;
^b6:
    i32* %60 = getelementptr &([10000 * i32]* @ints)[i64 0][i64 1];
    i32 %61 = load i32* %60;
    call (i32) -> void @putint(i32 %61);
    ret i32 0;
^b7:
    i32 %62 = phi [^b47, i32 %237] [^if.then, i32 %21];
    i32 %63 = phi [^b47, i32 %238] [^if.then, i32 %22];
    i32 %64 = phi [^b47, i32 %239] [^if.then, i32 %23];
    i32 %65 = phi [^b47, i32 %240] [^if.then, i32 %24];
    i32 %66 = phi [^b47, i32 %243] [^if.then, i32 %55];
    i32 %67 = add i32 %65, i32 1;
    ubr ^while.header1;
^entry2:
    i32 %68 = add i32 %23, i32 1;
    i32* %69 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %68];
    store i32* %69 with i32 40;
    ubr ^b10;
^b8:
    i1 %70 = scmp eq i32 %58, i32 45;
    ubr ^b9;
^b9:
    i1 %71 = phi [^b8, i1 %70] [^while.body3, i1 true];
    cbr i1 %71(prob = 0.5), ^b12, ^b11;
^b10:
    i32 %72 = phi [^entry2, i32 %68] [^if.else, i32 %23];
    i32 %73 = load i32* %29;
    i1 %74 = scmp eq i32 %73, i32 94;
    cbr i1 %74(prob = 0.5), ^entry3, ^b13;
^entry3:
    i32 %75 = add i32 %72, i32 1;
    i32* %76 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %75];
    store i32* %76 with i32 94;
    ubr ^b13;
^b11:
    i32 %77 = load i32* %57;
    i1 %78 = scmp eq i32 %77, i32 42;
    ubr ^b12;
^b12:
    i1 %79 = phi [^b11, i1 %78] [^b9, i1 true];
    cbr i1 %79(prob = 0.5), ^b15, ^b14;
^b13:
    i32 %80 = phi [^entry3, i32 %75] [^b10, i32 %72];
    i1 %81 = scmp eq i32 %73, i32 41;
    cbr i1 %81(prob = 0.5), ^entry4, ^b16;
^b14:
    i32 %82 = load i32* %57;
    i1 %83 = scmp eq i32 %82, i32 47;
    ubr ^b15;
^entry4:
    i32 %84 = add i32 %80, i32 -1;
    i32* %85 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %80];
    i32 %86 = load i32* %85;
    ubr ^while.header4;
^b15:
    i1 %87 = phi [^b14, i1 %83] [^b12, i1 true];
    cbr i1 %87(prob = 0.5), ^b18, ^b17;
^b16:
    i32 %88 = phi [^while.header4, i32 %99] [^b13, i32 %21];
    i32 %89 = phi [^while.header4, i32 %100] [^b13, i32 %22];
    i32 %90 = phi [^while.header4, i32 %101] [^b13, i32 %80];
    i32 %91 = phi [^while.header4, i32 %102] [^b13, i32 %24];
    i32 %92 = phi [^while.header4, i32 %103] [^b13, i32 %25];
    i32* %93 = getelementptr &([10000 * i32]* @get)[i64 0][i32 %91];
    i32 %94 = load i32* %93;
    i1 %95 = scmp eq i32 %94, i32 43;
    cbr i1 %95(prob = 0.5), ^while.header5, ^b19;
^b17:
    i32 %96 = load i32* %57;
    i1 %97 = scmp eq i32 %96, i32 37;
    ubr ^b18;
^b18:
    i1 %98 = phi [^b17, i1 %97] [^b15, i1 true];
    cbr i1 %98(prob = 0.5), ^b21, ^b20;
^while.header4:
    i32 %99 = phi [^while.body4, i32 %99] [^entry4, i32 %21];
    i32 %100 = phi [^while.body4, i32 %100] [^entry4, i32 %22];
    i32 %101 = phi [^while.body4, i32 %129] [^entry4, i32 %84];
    i32 %102 = phi [^while.body4, i32 %102] [^entry4, i32 %24];
    i32 %103 = phi [^while.body4, i32 %128] [^entry4, i32 %25];
    i32 %104 = phi [^while.body4, i32 %131] [^entry4, i32 %86];
    i32 %105 = phi [^while.body4, i32 %131] [^entry4, i32 %86];
    i1 %106 = scmp neq i32 %105, i32 40;
    cbr i1 %106(prob = 0.97), ^while.body4, ^b16;
^while.header5:
    i32 %107 = phi [^while.body6, i32 %107] [^b16, i32 %88];
    i32 %108 = phi [^while.body6, i32 %108] [^b16, i32 %89];
    i32 %109 = phi [^while.body6, i32 %288] [^b16, i32 %90];
    i32 %110 = phi [^while.body6, i32 %110] [^b16, i32 %91];
    i32 %111 = phi [^while.body6, i32 %292] [^b16, i32 %92];
    i32* %112 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %109];
    i32 %113 = load i32* %112;
    i1 %114 = scmp eq i32 %113, i32 43;
    cbr i1 %114(prob = 0.5), ^b23, ^b22;
^b19:
    i32 %115 = phi [^entry6, i32 %107] [^b16, i32 %88];
    i32 %116 = phi [^entry6, i32 %108] [^b16, i32 %89];
    i32 %117 = phi [^entry6, i32 %284] [^b16, i32 %90];
    i32 %118 = phi [^entry6, i32 %110] [^b16, i32 %91];
    i32 %119 = phi [^entry6, i32 %283] [^b16, i32 %92];
    i32 %120 = phi [^entry6, i32 %110] [^b16, i32 %91];
    i32* %121 = getelementptr &([10000 * i32]* @get)[i64 0][i32 %120];
    i32 %122 = load i32* %121;
    i1 %123 = scmp eq i32 %122, i32 45;
    cbr i1 %123(prob = 0.5), ^while.header6, ^b24;
^b20:
    i32 %124 = load i32* %57;
    i1 %125 = scmp eq i32 %124, i32 94;
    ubr ^b21;
^while.body4:
    i32* %126 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %103];
    store i32* %126 with i32 32;
    i32* %127 = getelementptr &(i32* %126)[i64 1];
    store i32* %127 with i32 %104;
    i32 %128 = add i32 %103, i32 2;
    i32 %129 = add i32 %101, i32 -1;
    i32* %130 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %101];
    i32 %131 = load i32* %130;
    ubr ^while.header4;
^b21:
    i1 %132 = phi [^b20, i1 %125] [^b18, i1 true];
    cbr i1 %132(prob = 0.5), ^entry5, ^if.else1;
^b22:
    i1 %133 = scmp eq i32 %113, i32 45;
    ubr ^b23;
^b23:
    i1 %134 = phi [^b22, i1 %133] [^while.header5, i1 true];
    cbr i1 %134(prob = 0.5), ^b26, ^b25;
^while.header6:
    i32 %135 = phi [^while.body8, i32 %135] [^b19, i32 %115];
    i32 %136 = phi [^while.body8, i32 %136] [^b19, i32 %116];
    i32 %137 = phi [^while.body8, i32 %321] [^b19, i32 %117];
    i32 %138 = phi [^while.body8, i32 %138] [^b19, i32 %118];
    i32 %139 = phi [^while.body8, i32 %325] [^b19, i32 %119];
    i32* %140 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %137];
    i32 %141 = load i32* %140;
    i1 %142 = scmp eq i32 %141, i32 43;
    cbr i1 %142(prob = 0.5), ^b28, ^b27;
^b24:
    i32 %143 = phi [^entry10, i32 %135] [^b19, i32 %115];
    i32 %144 = phi [^entry10, i32 %136] [^b19, i32 %116];
    i32 %145 = phi [^entry10, i32 %317] [^b19, i32 %117];
    i32 %146 = phi [^entry10, i32 %138] [^b19, i32 %118];
    i32 %147 = phi [^entry10, i32 %316] [^b19, i32 %119];
    i32* %148 = getelementptr &([10000 * i32]* @get)[i64 0][i32 %146];
    i32 %149 = load i32* %148;
    i1 %150 = scmp eq i32 %149, i32 42;
    cbr i1 %150(prob = 0.5), ^while.header7, ^b29;
^entry5:
    i32* %151 = getelementptr &([10000 * i32]* @ints)[i64 0][i32 %48];
    i32 %152 = load i32* %151;
    i32 %153 = add i32 %48, i32 -2;
    i32* %154 = getelementptr &(i32* %151)[i64 -1];
    i32 %155 = load i32* %154;
    i32 %156 = load i32* %57;
    i1 %157 = scmp eq i32 %156, i32 43;
    cbr i1 %157(prob = 0.5), ^if.then1, ^b31;
^if.else1:
    i32 %158 = load i32* %57;
    i1 %159 = scmp neq i32 %158, i32 32;
    cbr i1 %159(prob = 0.5), ^if.then2, ^b30;
^b25:
    i32 %160 = load i32* %112;
    i1 %161 = scmp eq i32 %160, i32 42;
    ubr ^b26;
^b26:
    i1 %162 = phi [^b25, i1 %161] [^b23, i1 true];
    cbr i1 %162(prob = 0.5), ^b33, ^b32;
^b27:
    i1 %163 = scmp eq i32 %141, i32 45;
    ubr ^b28;
^b28:
    i1 %164 = phi [^b27, i1 %163] [^while.header6, i1 true];
    cbr i1 %164(prob = 0.5), ^b35, ^b34;
^while.header7:
    i32 %165 = phi [^while.body7, i32 %165] [^b24, i32 %143];
    i32 %166 = phi [^while.body7, i32 %166] [^b24, i32 %144];
    i32 %167 = phi [^while.body7, i32 %304] [^b24, i32 %145];
    i32 %168 = phi [^while.body7, i32 %168] [^b24, i32 %146];
    i32 %169 = phi [^while.body7, i32 %308] [^b24, i32 %147];
    i32* %170 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %167];
    i32 %171 = load i32* %170;
    i1 %172 = scmp eq i32 %171, i32 42;
    cbr i1 %172(prob = 0.5), ^b37, ^b36;
^b29:
    i32 %173 = phi [^entry8, i32 %165] [^b24, i32 %143];
    i32 %174 = phi [^entry8, i32 %166] [^b24, i32 %144];
    i32 %175 = phi [^entry8, i32 %297] [^b24, i32 %145];
    i32 %176 = phi [^entry8, i32 %168] [^b24, i32 %146];
    i32 %177 = phi [^entry8, i32 %296] [^b24, i32 %147];
    i32 %178 = phi [^entry8, i32 %168] [^b24, i32 %146];
    i32* %179 = getelementptr &([10000 * i32]* @get)[i64 0][i32 %178];
    i32 %180 = load i32* %179;
    i1 %181 = scmp eq i32 %180, i32 47;
    cbr i1 %181(prob = 0.5), ^while.header8, ^b38;
^if.then1:
    i32 %182 = add i32 %152, i32 %155;
    ubr ^b31;
^if.then2:
    i32 %183 = add i32 %158, i32 -48;
    i32 %184 = add i32 %48, i32 1;
    i32* %185 = getelementptr &([10000 * i32]* @ints)[i64 0][i32 %184];
    store i32* %185 with i32 %183;
    ubr ^while.header9;
^b30:
    i32 %186 = phi [^b74, i32 %349] [^b49, i32 %216] [^if.else1, i32 %48];
    i32 %187 = phi [^b74, i32 %347] [^b49, i32 %263] [^if.else1, i32 %49];
    i32 %188 = add i32 %187, i32 1;
    ubr ^while.header3;
^b31:
    i32 %189 = phi [^if.then1, i32 %182] [^entry5, i32 0];
    i1 %190 = scmp eq i32 %156, i32 45;
    cbr i1 %190(prob = 0.5), ^if.then3, ^b40;
^b32:
    i32 %191 = load i32* %112;
    i1 %192 = scmp eq i32 %191, i32 47;
    ubr ^b33;
^b33:
    i1 %193 = phi [^b32, i1 %192] [^b26, i1 true];
    cbr i1 %193(prob = 0.5), ^b41, ^b39;
^b34:
    i32 %194 = load i32* %140;
    i1 %195 = scmp eq i32 %194, i32 42;
    ubr ^b35;
^b35:
    i1 %196 = phi [^b34, i1 %195] [^b28, i1 true];
    cbr i1 %196(prob = 0.5), ^b43, ^b42;
^b36:
    i1 %197 = scmp eq i32 %171, i32 47;
    ubr ^b37;
^b37:
    i1 %198 = phi [^b36, i1 %197] [^while.header7, i1 true];
    cbr i1 %198(prob = 0.5), ^b45, ^b44;
^while.header8:
    i32 %199 = phi [^while.body9, i32 %199] [^b29, i32 %173];
    i32 %200 = phi [^while.body9, i32 %200] [^b29, i32 %174];
    i32 %201 = phi [^while.body9, i32 %337] [^b29, i32 %175];
    i32 %202 = phi [^while.body9, i32 %202] [^b29, i32 %176];
    i32 %203 = phi [^while.body9, i32 %341] [^b29, i32 %177];
    i32* %204 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %201];
    i32 %205 = load i32* %204;
    i1 %206 = scmp eq i32 %205, i32 42;
    cbr i1 %206(prob = 0.5), ^b48, ^b46;
^b38:
    i32 %207 = phi [^entry12, i32 %199] [^b29, i32 %173];
    i32 %208 = phi [^entry12, i32 %200] [^b29, i32 %174];
    i32 %209 = phi [^entry12, i32 %329] [^b29, i32 %175];
    i32 %210 = phi [^entry12, i32 %202] [^b29, i32 %176];
    i32 %211 = phi [^entry12, i32 %328] [^b29, i32 %177];
    i32* %212 = getelementptr &([10000 * i32]* @get)[i64 0][i32 %210];
    i32 %213 = load i32* %212;
    i1 %214 = scmp eq i32 %213, i32 37;
    cbr i1 %214(prob = 0.5), ^while.header10, ^b47;
^if.then3:
    i32 %215 = sub i32 %155, i32 %152;
    ubr ^b40;
^while.header9:
    i32 %216 = phi [^while.body5, i32 %216] [^if.then2, i32 %184];
    i32 %217 = phi [^while.body5, i32 %217] [^if.then2, i32 %49];
    i32 %218 = phi [^while.body5, i32 %261] [^if.then2, i32 1];
    i32 %219 = phi [^while.body5, i32 %261] [^if.then2, i32 1];
    i32 %220 = add i32 %219, i32 %217;
    i32* %221 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %220];
    i32 %222 = load i32* %221;
    i1 %223 = scmp neq i32 %222, i32 32;
    cbr i1 %223(prob = 0.97), ^while.body5, ^b49;
^b39:
    i32 %224 = load i32* %112;
    i1 %225 = scmp eq i32 %224, i32 37;
    ubr ^b41;
^b40:
    i32 %226 = phi [^if.then3, i32 %215] [^b31, i32 %189];
    i32 %227 = load i32* %57;
    i1 %228 = scmp eq i32 %227, i32 42;
    cbr i1 %228(prob = 0.5), ^if.then4, ^b53;
^b41:
    i1 %229 = phi [^b39, i1 %225] [^b33, i1 true];
    cbr i1 %229(prob = 0.5), ^b51, ^b50;
^b42:
    i32 %230 = load i32* %140;
    i1 %231 = scmp eq i32 %230, i32 47;
    ubr ^b43;
^b43:
    i1 %232 = phi [^b42, i1 %231] [^b35, i1 true];
    cbr i1 %232(prob = 0.5), ^b54, ^b52;
^b44:
    i32 %233 = load i32* %170;
    i1 %234 = scmp eq i32 %233, i32 37;
    ubr ^b45;
^b45:
    i1 %235 = phi [^b44, i1 %234] [^b37, i1 true];
    cbr i1 %235(prob = 0.5), ^b56, ^b55;
^b46:
    i1 %236 = scmp eq i32 %205, i32 47;
    ubr ^b48;
^b47:
    i32 %237 = phi [^entry14, i32 %245] [^b38, i32 %207];
    i32 %238 = phi [^entry14, i32 %246] [^b38, i32 %208];
    i32 %239 = phi [^entry14, i32 %360] [^b38, i32 %209];
    i32 %240 = phi [^entry14, i32 %248] [^b38, i32 %210];
    i32 %241 = phi [^entry14, i32 %359] [^b38, i32 %211];
    i32* %242 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %241];
    store i32* %242 with i32 32;
    i32 %243 = add i32 %241, i32 1;
    ubr ^b7;
^b48:
    i1 %244 = phi [^b46, i1 %236] [^while.header8, i1 true];
    cbr i1 %244(prob = 0.5), ^b58, ^b57;
^while.header10:
    i32 %245 = phi [^while.body11, i32 %245] [^b38, i32 %207];
    i32 %246 = phi [^while.body11, i32 %246] [^b38, i32 %208];
    i32 %247 = phi [^while.body11, i32 %364] [^b38, i32 %209];
    i32 %248 = phi [^while.body11, i32 %248] [^b38, i32 %210];
    i32 %249 = phi [^while.body11, i32 %368] [^b38, i32 %211];
    i32* %250 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %247];
    i32 %251 = load i32* %250;
    i1 %252 = scmp eq i32 %251, i32 42;
    cbr i1 %252(prob = 0.5), ^b60, ^b59;
^while.body5:
    i32 %253 = add i32 %218, i32 %217;
    i32* %254 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %253];
    i32 %255 = load i32* %254;
    i32* %256 = getelementptr &([10000 * i32]* @ints)[i64 0][i32 %216];
    i32 %257 = load i32* %256;
    i32 %258 = mul i32 %257, i32 10;
    i32 %259 = add i32 %258, i32 -48;
    i32 %260 = add i32 %259, i32 %255;
    store i32* %256 with i32 %260;
    i32 %261 = add i32 %218, i32 1;
    ubr ^while.header9;
^b49:
    i32 %262 = add i32 %218, i32 -1;
    i32 %263 = add i32 %262, i32 %217;
    ubr ^b30;
^if.then4:
    i32 %264 = mul i32 %152, i32 %155;
    ubr ^b53;
^b50:
    i32 %265 = load i32* %112;
    i1 %266 = scmp eq i32 %265, i32 94;
    ubr ^b51;
^b51:
    i1 %267 = phi [^b50, i1 %266] [^b41, i1 true];
    cbr i1 %267(prob = 0.97), ^entry7, ^entry6;
^b52:
    i32 %268 = load i32* %140;
    i1 %269 = scmp eq i32 %268, i32 37;
    ubr ^b54;
^b53:
    i32 %270 = phi [^if.then4, i32 %264] [^b40, i32 %226];
    i1 %271 = scmp eq i32 %227, i32 47;
    cbr i1 %271(prob = 0.5), ^if.then5, ^b63;
^b54:
    i1 %272 = phi [^b52, i1 %269] [^b43, i1 true];
    cbr i1 %272(prob = 0.5), ^b62, ^b61;
^b55:
    i32 %273 = load i32* %170;
    i1 %274 = scmp eq i32 %273, i32 94;
    ubr ^b56;
^b56:
    i1 %275 = phi [^b55, i1 %274] [^b45, i1 true];
    cbr i1 %275(prob = 0.97), ^entry9, ^entry8;
^b57:
    i32 %276 = load i32* %204;
    i1 %277 = scmp eq i32 %276, i32 37;
    ubr ^b58;
^b58:
    i1 %278 = phi [^b57, i1 %277] [^b48, i1 true];
    cbr i1 %278(prob = 0.5), ^b65, ^b64;
^b59:
    i1 %279 = scmp eq i32 %251, i32 47;
    ubr ^b60;
^b60:
    i1 %280 = phi [^b59, i1 %279] [^while.header10, i1 true];
    cbr i1 %280(prob = 0.5), ^b67, ^b66;
^if.then5:
    i32 %281 = sdiv i32 %155, i32 %152;
    ubr ^b63;
^entry6:
    i32 %282 = phi [^while.body6, i32 %288] [^b51, i32 %109];
    i32 %283 = phi [^while.body6, i32 %292] [^b51, i32 %111];
    i32 %284 = add i32 %282, i32 1;
    i32* %285 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %284];
    store i32* %285 with i32 43;
    ubr ^b19;
^b61:
    i32 %286 = load i32* %140;
    i1 %287 = scmp eq i32 %286, i32 94;
    ubr ^b62;
^entry7:
    i32 %288 = add i32 %109, i32 -1;
    i32 %289 = load i32* %112;
    i32* %290 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %111];
    store i32* %290 with i32 32;
    i32* %291 = getelementptr &(i32* %290)[i64 1];
    store i32* %291 with i32 %289;
    i32 %292 = add i32 %111, i32 2;
    i1 %293 = scmp eq i32 %109, i32 1;
    cbr i1 %293(prob = 0.5), ^while.body6, ^b68;
^b62:
    i1 %294 = phi [^b61, i1 %287] [^b54, i1 true];
    cbr i1 %294(prob = 0.97), ^entry11, ^entry10;
^entry8:
    i32 %295 = phi [^while.body7, i32 %304] [^b56, i32 %167];
    i32 %296 = phi [^while.body7, i32 %308] [^b56, i32 %169];
    i32 %297 = add i32 %295, i32 1;
    i32* %298 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %297];
    store i32* %298 with i32 42;
    ubr ^b29;
^b63:
    i32 %299 = phi [^if.then5, i32 %281] [^b53, i32 %270];
    i32 %300 = load i32* %57;
    i1 %301 = scmp eq i32 %300, i32 37;
    cbr i1 %301(prob = 0.5), ^if.then6, ^b70;
^b64:
    i32 %302 = load i32* %204;
    i1 %303 = scmp eq i32 %302, i32 94;
    ubr ^b65;
^entry9:
    i32 %304 = add i32 %167, i32 -1;
    i32 %305 = load i32* %170;
    i32* %306 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %169];
    store i32* %306 with i32 32;
    i32* %307 = getelementptr &(i32* %306)[i64 1];
    store i32* %307 with i32 %305;
    i32 %308 = add i32 %169, i32 2;
    i1 %309 = scmp eq i32 %167, i32 1;
    cbr i1 %309(prob = 0.5), ^while.body7, ^b69;
^b65:
    i1 %310 = phi [^b64, i1 %303] [^b58, i1 true];
    cbr i1 %310(prob = 0.97), ^entry13, ^entry12;
^b66:
    i32 %311 = load i32* %250;
    i1 %312 = scmp eq i32 %311, i32 37;
    ubr ^b67;
^b67:
    i1 %313 = phi [^b66, i1 %312] [^b60, i1 true];
    cbr i1 %313(prob = 0.5), ^b72, ^b71;
^b68:
    ubr ^while.body6;
^if.then6:
    i32 %314 = srem i32 %155, i32 %152;
    ubr ^b70;
^entry10:
    i32 %315 = phi [^while.body8, i32 %321] [^b62, i32 %137];
    i32 %316 = phi [^while.body8, i32 %325] [^b62, i32 %139];
    i32 %317 = add i32 %315, i32 1;
    i32* %318 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %317];
    store i32* %318 with i32 45;
    ubr ^b24;
^while.body6:
    i32 %319 = phi [^entry7, i32 0] [^b68, i32 1];
    i1 %320 = scmp eq i32 %319, i32 0;
    cbr i1 %320(prob = 0.5), ^entry6, ^while.header5;
^entry11:
    i32 %321 = add i32 %137, i32 -1;
    i32 %322 = load i32* %140;
    i32* %323 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %139];
    store i32* %323 with i32 32;
    i32* %324 = getelementptr &(i32* %323)[i64 1];
    store i32* %324 with i32 %322;
    i32 %325 = add i32 %139, i32 2;
    i1 %326 = scmp eq i32 %137, i32 1;
    cbr i1 %326(prob = 0.5), ^while.body8, ^b73;
^b69:
    ubr ^while.body7;
^entry12:
    i32 %327 = phi [^while.body9, i32 %337] [^b65, i32 %201];
    i32 %328 = phi [^while.body9, i32 %341] [^b65, i32 %203];
    i32 %329 = add i32 %327, i32 1;
    i32* %330 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %329];
    store i32* %330 with i32 47;
    ubr ^b38;
^while.body7:
    i32 %331 = phi [^entry9, i32 0] [^b69, i32 1];
    i1 %332 = scmp eq i32 %331, i32 0;
    cbr i1 %332(prob = 0.5), ^entry8, ^while.header7;
^b70:
    i32 %333 = phi [^if.then6, i32 %314] [^b63, i32 %299];
    i1 %334 = scmp eq i32 %300, i32 94;
    cbr i1 %334(prob = 0.5), ^while.header11, ^b74;
^b71:
    i32 %335 = load i32* %250;
    i1 %336 = scmp eq i32 %335, i32 94;
    ubr ^b72;
^entry13:
    i32 %337 = add i32 %201, i32 -1;
    i32 %338 = load i32* %204;
    i32* %339 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %203];
    store i32* %339 with i32 32;
    i32* %340 = getelementptr &(i32* %339)[i64 1];
    store i32* %340 with i32 %338;
    i32 %341 = add i32 %203, i32 2;
    i1 %342 = scmp eq i32 %201, i32 1;
    cbr i1 %342(prob = 0.5), ^while.body9, ^b75;
^b72:
    i1 %343 = phi [^b71, i1 %336] [^b67, i1 true];
    cbr i1 %343(prob = 0.97), ^entry15, ^entry14;
^b73:
    ubr ^while.body8;
^while.body8:
    i32 %344 = phi [^entry11, i32 0] [^b73, i32 1];
    i1 %345 = scmp eq i32 %344, i32 0;
    cbr i1 %345(prob = 0.5), ^entry10, ^while.header6;
^b74:
    i32 %346 = phi [^while.header11, i32 %351] [^b70, i32 %153];
    i32 %347 = phi [^while.header11, i32 %352] [^b70, i32 %49];
    i32 %348 = phi [^while.header11, i32 %353] [^b70, i32 %333];
    i32 %349 = add i32 %346, i32 1;
    i32* %350 = getelementptr &([10000 * i32]* @ints)[i64 0][i32 %349];
    store i32* %350 with i32 %348;
    ubr ^b30;
^b75:
    ubr ^while.body9;
^while.header11:
    i32 %351 = phi [^b70, i32 %153] [^while.body10, i32 %351];
    i32 %352 = phi [^b70, i32 %49] [^while.body10, i32 %352];
    i32 %353 = phi [^b70, i32 1] [^while.body10, i32 %370];
    i32 %354 = phi [^b70, i32 %152] [^while.body10, i32 %371];
    i32 %355 = phi [^b70, i32 %155] [^while.body10, i32 %355];
    i32 %356 = phi [^b70, i32 %152] [^while.body10, i32 %371];
    i1 %357 = scmp neq i32 %356, i32 0;
    cbr i1 %357(prob = 0.97), ^while.body10, ^b74;
^entry14:
    i32 %358 = phi [^while.body11, i32 %364] [^b72, i32 %247];
    i32 %359 = phi [^while.body11, i32 %368] [^b72, i32 %249];
    i32 %360 = add i32 %358, i32 1;
    i32* %361 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %360];
    store i32* %361 with i32 37;
    ubr ^b47;
^while.body9:
    i32 %362 = phi [^entry13, i32 0] [^b75, i32 1];
    i1 %363 = scmp eq i32 %362, i32 0;
    cbr i1 %363(prob = 0.5), ^entry12, ^while.header8;
^entry15:
    i32 %364 = add i32 %247, i32 -1;
    i32 %365 = load i32* %250;
    i32* %366 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %249];
    store i32* %366 with i32 32;
    i32* %367 = getelementptr &(i32* %366)[i64 1];
    store i32* %367 with i32 %365;
    i32 %368 = add i32 %249, i32 2;
    i1 %369 = scmp eq i32 %247, i32 1;
    cbr i1 %369(prob = 0.5), ^while.body11, ^b76;
^while.body10:
    i32 %370 = mul i32 %355, i32 %353;
    i32 %371 = add i32 %354, i32 -1;
    ubr ^while.header11;
^b76:
    ubr ^while.body11;
^while.body11:
    i32 %372 = phi [^entry15, i32 0] [^b76, i32 1];
    i1 %373 = scmp eq i32 %372, i32 0;
    cbr i1 %373(prob = 0.5), ^entry14, ^while.header10;
}
