internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal [10000 * i32]* @ints;
internal [10000 * i32]* @chas;
internal [10000 * i32]* @get;
internal [10000 * i32]* @get2;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = scmp neq i32 %0, i32 13;
    i1 %2 = scmp neq i32 %0, i32 10;
    i1 %3 = and i1 %1, i1 %2;
    [10000 * i32]* %4 = ptrcast [10000 * i32]* @get to [10000 * i32]*;
    i32* %5 = getelementptr &([10000 * i32]* %4)[i64 0][i64 0];
    [10000 * i32]* %6 = ptrcast [10000 * i32]* @chas to [10000 * i32]*;
    [10000 * i32]* %7 = ptrcast [10000 * i32]* @ints to [10000 * i32]*;
    [10000 * i32]* %8 = ptrcast [10000 * i32]* @get2 to [10000 * i32]*;
    cbr i1 %3(prob = 0.97), ^while.body, ^b;
  ^b:
    i32 %9 = phi [^entry, i32 0] [^while.body, i32 %17];
    ubr ^while.header;
  ^while.body:
    i32 %10 = phi [^entry, i32 0] [^while.body, i32 %17];
    i32 %11 = phi [^entry, i32 %0] [^while.body, i32 %13];
    i32* %12 = getelementptr &(i32* %5)[i32 %10];
    store i32* %12 with i32 %11;
    i32 %13 = call () -> i32 @getch();
    i1 %14 = scmp neq i32 %13, i32 13;
    i1 %15 = scmp neq i32 %13, i32 10;
    i1 %16 = and i1 %14, i1 %15;
    i32 %17 = add i32 %10, i32 1;
    cbr i1 %16(prob = 0.97), ^while.body, ^b;
  ^while.header:
    i32 %18 = phi [^b, i32 0] [^b2, i32 %39];
    i32 %19 = phi [^b, i32 1] [^b2, i32 %40];
    i32 %20 = phi [^b, i32 0] [^b2, i32 %41];
    i1 %21 = scmp gt i32 %9, i32 %20;
    cbr i1 %21(prob = 0.97), ^while.body1, ^indirect;
  ^while.body1:
    i32* %22 = getelementptr &([10000 * i32]* %4)[i64 0][i32 %20];
    i32 %23 = load i32* %22;
    i32 %24 = add i32 %23, i32 -48;
    i1 %25 = ucmp lt i32 %24, i32 10;
    cbr i1 %25(prob = 0.5), ^if.then, ^if.else;
  ^indirect:
    i1 %26 = scmp gt i32 %18, i32 0;
    cbr i1 %26(prob = 0.97), ^super.header, ^b1;
  ^if.then:
    i32* %27 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %19];
    store i32* %27 with i32 %23;
    i32 %28 = add i32 %19, i32 1;
    ubr ^b2;
  ^if.else:
    i1 %29 = scmp eq i32 %23, i32 40;
    cbr i1 %29(prob = 0.5), ^entry1, ^b3;
  ^super.header:
    i32 %30 = phi [^indirect, i32 %18] [^entry2, i32 %32];
    i32 %31 = phi [^indirect, i32 %19] [^entry2, i32 %60];
    i32 %32 = add i32 %30, i32 -4;
    i1 %33 = scmp gt i32 %32, i32 0;
    cbr i1 %33(prob = 0.89), ^entry2, ^super.header1;
  ^b1:
    i32 %34 = phi [^indirect, i32 %19] [^entry6, i32 %122];
    i32* %35 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %34];
    store i32* %35 with i32 64;
    i32* %36 = getelementptr &([10000 * i32]* %8)[i64 0][i64 1];
    i32 %37 = load i32* %36;
    i1 %38 = scmp neq i32 %37, i32 64;
    cbr i1 %38(prob = 0.97), ^while.body2, ^b4;
  ^b2:
    i32 %39 = phi [^if.then, i32 %18] [^b17, i32 %287];
    i32 %40 = phi [^if.then, i32 %28] [^b17, i32 %290];
    i32 %41 = add i32 %20, i32 1;
    ubr ^while.header;
  ^entry1:
    i32 %42 = add i32 %18, i32 1;
    i32* %43 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %42];
    store i32* %43 with i32 40;
    ubr ^b3;
  ^entry2:
    i32* %44 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %30];
    i32 %45 = load i32* %44;
    i32* %46 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %31];
    store i32* %46 with i32 32;
    i32* %47 = getelementptr &(i32* %46)[i64 1];
    store i32* %47 with i32 %45;
    i32* %48 = getelementptr &(i32* %44)[i64 -1];
    i32 %49 = load i32* %48;
    i32* %50 = getelementptr &(i32* %46)[i64 2];
    store i32* %50 with i32 32;
    i32* %51 = getelementptr &(i32* %46)[i64 3];
    store i32* %51 with i32 %49;
    i32* %52 = getelementptr &(i32* %44)[i64 -2];
    i32 %53 = load i32* %52;
    i32* %54 = getelementptr &(i32* %46)[i64 4];
    store i32* %54 with i32 32;
    i32* %55 = getelementptr &(i32* %46)[i64 5];
    store i32* %55 with i32 %53;
    i32* %56 = getelementptr &(i32* %44)[i64 -3];
    i32 %57 = load i32* %56;
    i32* %58 = getelementptr &(i32* %46)[i64 6];
    store i32* %58 with i32 32;
    i32* %59 = getelementptr &(i32* %46)[i64 7];
    store i32* %59 with i32 %57;
    i32 %60 = add i32 %31, i32 8;
    ubr ^super.header;
  ^b3:
    i32 %61 = phi [^if.else, i32 %18] [^entry1, i32 %42];
    i32 %62 = load i32* %22;
    i1 %63 = scmp eq i32 %62, i32 94;
    cbr i1 %63(prob = 0.5), ^entry4, ^b5;
  ^super.header1:
    i32 %64 = phi [^super.header, i32 %30] [^entry3, i32 %66];
    i32 %65 = phi [^super.header, i32 %31] [^entry3, i32 %101];
    i32 %66 = add i32 %64, i32 -4;
    i1 %67 = scmp gt i32 %66, i32 0;
    cbr i1 %67(prob = 0.89), ^entry3, ^entry6;
  ^while.body2:
    i32 %68 = phi [^b1, i32 1] [^b8, i32 %144];
    i32 %69 = phi [^b1, i32 0] [^b8, i32 %142];
    i32* %70 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %68];
    i32 %71 = load i32* %70;
    i1 %72 = scmp eq i32 %71, i32 43;
    i1 %73 = scmp eq i32 %71, i32 45;
    i1 %74 = or i1 %72, i1 %73;
    i1 %75 = scmp eq i32 %71, i32 42;
    i1 %76 = or i1 %74, i1 %75;
    i1 %77 = scmp eq i32 %71, i32 47;
    i1 %78 = or i1 %76, i1 %77;
    i1 %79 = scmp eq i32 %71, i32 37;
    i1 %80 = or i1 %78, i1 %79;
    i1 %81 = scmp eq i32 %71, i32 94;
    i1 %82 = or i1 %80, i1 %81;
    cbr i1 %82(prob = 0.5), ^entry5, ^if.else1;
  ^b4:
    i32* %83 = getelementptr &([10000 * i32]* %7)[i64 0][i64 1];
    i32 %84 = load i32* %83;
    call (i32) -> void @putint(i32 %84);
    ret i32 0;
  ^entry3:
    i32* %85 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %64];
    i32 %86 = load i32* %85;
    i32* %87 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %65];
    store i32* %87 with i32 32;
    i32* %88 = getelementptr &(i32* %87)[i64 1];
    store i32* %88 with i32 %86;
    i32* %89 = getelementptr &(i32* %85)[i64 -1];
    i32 %90 = load i32* %89;
    i32* %91 = getelementptr &(i32* %87)[i64 2];
    store i32* %91 with i32 32;
    i32* %92 = getelementptr &(i32* %87)[i64 3];
    store i32* %92 with i32 %90;
    i32* %93 = getelementptr &(i32* %85)[i64 -2];
    i32 %94 = load i32* %93;
    i32* %95 = getelementptr &(i32* %87)[i64 4];
    store i32* %95 with i32 32;
    i32* %96 = getelementptr &(i32* %87)[i64 5];
    store i32* %96 with i32 %94;
    i32* %97 = getelementptr &(i32* %85)[i64 -3];
    i32 %98 = load i32* %97;
    i32* %99 = getelementptr &(i32* %87)[i64 6];
    store i32* %99 with i32 32;
    i32* %100 = getelementptr &(i32* %87)[i64 7];
    store i32* %100 with i32 %98;
    i32 %101 = add i32 %65, i32 8;
    ubr ^super.header1;
  ^entry4:
    i32 %102 = add i32 %61, i32 1;
    i32* %103 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %102];
    store i32* %103 with i32 94;
    ubr ^b5;
  ^entry5:
    i32* %104 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %69];
    i32 %105 = load i32* %104;
    i32* %106 = getelementptr &(i32* %104)[i64 -1];
    i32 %107 = load i32* %106;
    i32 %108 = add i32 %105, i32 %107;
    i32 %109 = select i1 %72 ? i32 %108 : i32 0;
    i32 %110 = sub i32 %107, i32 %105;
    i32 %111 = select i1 %73 ? i32 %110 : i32 %109;
    i32 %112 = mul i32 %105, i32 %107;
    i32 %113 = select i1 %75 ? i32 %112 : i32 %111;
    cbr i1 %77(prob = 0.5), ^if.then1, ^b6;
  ^entry6:
    i32 %114 = phi [^super.header1, i32 %64] [^entry6, i32 %120];
    i32 %115 = phi [^super.header1, i32 %65] [^entry6, i32 %122];
    i32* %116 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %114];
    i32 %117 = load i32* %116;
    i32* %118 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %115];
    store i32* %118 with i32 32;
    i32* %119 = getelementptr &(i32* %118)[i64 1];
    store i32* %119 with i32 %117;
    i32 %120 = add i32 %114, i32 -1;
    i1 %121 = scmp gt i32 %120, i32 0;
    i32 %122 = add i32 %115, i32 2;
    cbr i1 %121(prob = 0.97), ^entry6, ^b1;
  ^b5:
    i32 %123 = phi [^b3, i32 %61] [^entry4, i32 %102];
    i1 %124 = scmp eq i32 %62, i32 41;
    cbr i1 %124(prob = 0.5), ^entry7, ^b7;
  ^if.else1:
    i1 %125 = scmp neq i32 %71, i32 32;
    cbr i1 %125(prob = 0.5), ^if.then2, ^b8;
  ^if.then1:
    i32 %126 = sdiv i32 %107, i32 %105;
    ubr ^b6;
  ^entry7:
    i32* %127 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %123];
    i32 %128 = load i32* %127;
    i32 %129 = add i32 %123, i32 -1;
    ubr ^while.header1;
  ^if.then2:
    i32 %130 = add i32 %69, i32 1;
    i32* %131 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %130];
    i32 %132 = add i32 %71, i32 -48;
    store i32* %131 with i32 %132;
    i32 %133 = add i32 %68, i32 1;
    i32* %134 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %133];
    i32 %135 = load i32* %134;
    i1 %136 = scmp neq i32 %135, i32 32;
    cbr i1 %136(prob = 0.97), ^while.body3, ^b9;
  ^b6:
    i32 %137 = phi [^entry5, i32 %113] [^if.then1, i32 %126];
    cbr i1 %79(prob = 0.5), ^if.then3, ^b10;
  ^b7:
    i32 %138 = phi [^b5, i32 %19] [^while.header1, i32 %154];
    i32 %139 = phi [^b5, i32 %123] [^while.header1, i32 %152];
    i32 %140 = load i32* %22;
    i1 %141 = scmp eq i32 %140, i32 43;
    cbr i1 %141(prob = 0.5), ^while.header2, ^b11;
  ^b8:
    i32 %142 = phi [^if.else1, i32 %69] [^b9, i32 %130] [^b12, i32 %196];
    i32 %143 = phi [^if.else1, i32 %68] [^b9, i32 %151] [^b12, i32 %68];
    i32 %144 = add i32 %143, i32 1;
    i32* %145 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %144];
    i32 %146 = load i32* %145;
    i1 %147 = scmp neq i32 %146, i32 64;
    cbr i1 %147(prob = 0.97), ^while.body2, ^b4;
  ^if.then3:
    i32 %148 = srem i32 %107, i32 %105;
    ubr ^b10;
  ^b9:
    i32 %149 = phi [^if.then2, i32 1] [^while.body3, i32 %168];
    i32 %150 = add i32 %68, i32 -1;
    i32 %151 = add i32 %149, i32 %150;
    ubr ^b8;
  ^while.header1:
    i32 %152 = phi [^entry7, i32 %129] [^while.body4, i32 %194];
    i32 %153 = phi [^entry7, i32 %128] [^while.body4, i32 %192];
    i32 %154 = phi [^entry7, i32 %19] [^while.body4, i32 %193];
    i1 %155 = scmp neq i32 %153, i32 40;
    cbr i1 %155(prob = 0.97), ^while.body4, ^b7;
  ^while.body3:
    i32 %156 = phi [^if.then2, i32 %132] [^while.body3, i32 %163];
    i32 %157 = phi [^if.then2, i32 1] [^while.body3, i32 %168];
    i32 %158 = add i32 %68, i32 %157;
    i32* %159 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %158];
    i32 %160 = load i32* %159;
    i32 %161 = mul i32 %156, i32 10;
    i32 %162 = add i32 %161, i32 -48;
    i32 %163 = add i32 %160, i32 %162;
    store i32* %131 with i32 %163;
    i32 %164 = add i32 %133, i32 %157;
    i32* %165 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %164];
    i32 %166 = load i32* %165;
    i1 %167 = scmp neq i32 %166, i32 32;
    i32 %168 = add i32 %157, i32 1;
    cbr i1 %167(prob = 0.97), ^while.body3, ^b9;
  ^while.header2:
    i32 %169 = phi [^b7, i32 %138] [^entry9, i32 %207];
    i32 %170 = phi [^b7, i32 %139] [^entry9, i32 %205];
    i32* %171 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %170];
    i32 %172 = load i32* %171;
    i1 %173 = scmp eq i32 %172, i32 43;
    i1 %174 = scmp eq i32 %172, i32 45;
    i1 %175 = or i1 %173, i1 %174;
    i1 %176 = scmp eq i32 %172, i32 42;
    i1 %177 = or i1 %175, i1 %176;
    i1 %178 = scmp eq i32 %172, i32 47;
    i1 %179 = or i1 %177, i1 %178;
    i1 %180 = scmp eq i32 %172, i32 37;
    i1 %181 = or i1 %179, i1 %180;
    i1 %182 = scmp eq i32 %172, i32 94;
    i1 %183 = or i1 %181, i1 %182;
    cbr i1 %183(prob = 0.97), ^entry9, ^entry8;
  ^b10:
    i32 %184 = phi [^b6, i32 %137] [^if.then3, i32 %148];
    cbr i1 %81(prob = 0.5), ^entry10, ^b12;
  ^b11:
    i32 %185 = phi [^b7, i32 %140] [^entry8, i32 %202];
    i32 %186 = phi [^b7, i32 %138] [^entry8, i32 %198];
    i32 %187 = phi [^b7, i32 %139] [^entry8, i32 %200];
    i1 %188 = scmp eq i32 %185, i32 45;
    cbr i1 %188(prob = 0.5), ^while.header3, ^b13;
  ^while.body4:
    i32* %189 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %154];
    store i32* %189 with i32 32;
    i32* %190 = getelementptr &(i32* %189)[i64 1];
    store i32* %190 with i32 %153;
    i32* %191 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %152];
    i32 %192 = load i32* %191;
    i32 %193 = add i32 %154, i32 2;
    i32 %194 = add i32 %152, i32 -1;
    ubr ^while.header1;
  ^b12:
    i32 %195 = phi [^b10, i32 %184] [^b14, i32 %228];
    i32 %196 = add i32 %69, i32 -1;
    i32* %197 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %196];
    store i32* %197 with i32 %195;
    ubr ^b8;
  ^entry8:
    i32 %198 = phi [^while.header2, i32 %169] [^entry9, i32 %207];
    i32 %199 = phi [^while.header2, i32 %170] [^entry9, i32 %205];
    i32 %200 = add i32 %199, i32 1;
    i32* %201 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %200];
    store i32* %201 with i32 43;
    i32 %202 = load i32* %22;
    ubr ^b11;
  ^entry9:
    i32* %203 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %169];
    store i32* %203 with i32 32;
    i32* %204 = getelementptr &(i32* %203)[i64 1];
    store i32* %204 with i32 %172;
    i32 %205 = add i32 %170, i32 -1;
    i1 %206 = scmp eq i32 %205, i32 0;
    i32 %207 = add i32 %169, i32 2;
    cbr i1 %206(prob = 0.5), ^entry8, ^while.header2;
  ^entry10:
    i1 %208 = scmp neq i32 %105, i32 0;
    cbr i1 %208(prob = 0.97), ^while.body5, ^b14;
  ^while.header3:
    i32 %209 = phi [^b11, i32 %186] [^entry12, i32 %242];
    i32 %210 = phi [^b11, i32 %187] [^entry12, i32 %240];
    i32* %211 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %210];
    i32 %212 = load i32* %211;
    i1 %213 = scmp eq i32 %212, i32 43;
    i1 %214 = scmp eq i32 %212, i32 45;
    i1 %215 = or i1 %213, i1 %214;
    i1 %216 = scmp eq i32 %212, i32 42;
    i1 %217 = or i1 %215, i1 %216;
    i1 %218 = scmp eq i32 %212, i32 47;
    i1 %219 = or i1 %217, i1 %218;
    i1 %220 = scmp eq i32 %212, i32 37;
    i1 %221 = or i1 %219, i1 %220;
    i1 %222 = scmp eq i32 %212, i32 94;
    i1 %223 = or i1 %221, i1 %222;
    cbr i1 %223(prob = 0.97), ^entry12, ^entry11;
  ^b13:
    i32 %224 = phi [^b11, i32 %186] [^entry11, i32 %234];
    i32 %225 = phi [^b11, i32 %187] [^entry11, i32 %236];
    i32 %226 = load i32* %22;
    i1 %227 = scmp eq i32 %226, i32 42;
    cbr i1 %227(prob = 0.5), ^while.header4, ^b15;
  ^b14:
    i32 %228 = phi [^entry10, i32 1] [^while.body5, i32 %231];
    ubr ^b12;
  ^while.body5:
    i32 %229 = phi [^entry10, i32 1] [^while.body5, i32 %231];
    i32 %230 = phi [^entry10, i32 %105] [^while.body5, i32 %232];
    i32 %231 = mul i32 %107, i32 %229;
    i32 %232 = add i32 %230, i32 -1;
    i1 %233 = scmp neq i32 %232, i32 0;
    cbr i1 %233(prob = 0.97), ^while.body5, ^b14;
  ^entry11:
    i32 %234 = phi [^while.header3, i32 %209] [^entry12, i32 %242];
    i32 %235 = phi [^while.header3, i32 %210] [^entry12, i32 %240];
    i32 %236 = add i32 %235, i32 1;
    i32* %237 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %236];
    store i32* %237 with i32 45;
    ubr ^b13;
  ^entry12:
    i32* %238 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %209];
    store i32* %238 with i32 32;
    i32* %239 = getelementptr &(i32* %238)[i64 1];
    store i32* %239 with i32 %212;
    i32 %240 = add i32 %210, i32 -1;
    i1 %241 = scmp eq i32 %240, i32 0;
    i32 %242 = add i32 %209, i32 2;
    cbr i1 %241(prob = 0.5), ^entry11, ^while.header3;
  ^while.header4:
    i32 %243 = phi [^b13, i32 %224] [^entry14, i32 %267];
    i32 %244 = phi [^b13, i32 %225] [^entry14, i32 %265];
    i32* %245 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %244];
    i32 %246 = load i32* %245;
    i1 %247 = scmp eq i32 %246, i32 42;
    i1 %248 = scmp eq i32 %246, i32 47;
    i1 %249 = or i1 %247, i1 %248;
    i1 %250 = scmp eq i32 %246, i32 37;
    i1 %251 = or i1 %249, i1 %250;
    i1 %252 = scmp eq i32 %246, i32 94;
    i1 %253 = or i1 %251, i1 %252;
    cbr i1 %253(prob = 0.97), ^entry14, ^entry13;
  ^b15:
    i32 %254 = phi [^b13, i32 %226] [^entry13, i32 %262];
    i32 %255 = phi [^b13, i32 %224] [^entry13, i32 %258];
    i32 %256 = phi [^b13, i32 %225] [^entry13, i32 %260];
    i1 %257 = scmp eq i32 %254, i32 47;
    cbr i1 %257(prob = 0.5), ^while.header5, ^b16;
  ^entry13:
    i32 %258 = phi [^while.header4, i32 %243] [^entry14, i32 %267];
    i32 %259 = phi [^while.header4, i32 %244] [^entry14, i32 %265];
    i32 %260 = add i32 %259, i32 1;
    i32* %261 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %260];
    store i32* %261 with i32 42;
    i32 %262 = load i32* %22;
    ubr ^b15;
  ^entry14:
    i32* %263 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %243];
    store i32* %263 with i32 32;
    i32* %264 = getelementptr &(i32* %263)[i64 1];
    store i32* %264 with i32 %246;
    i32 %265 = add i32 %244, i32 -1;
    i1 %266 = scmp eq i32 %265, i32 0;
    i32 %267 = add i32 %243, i32 2;
    cbr i1 %266(prob = 0.5), ^entry13, ^while.header4;
  ^while.header5:
    i32 %268 = phi [^b15, i32 %255] [^entry16, i32 %295];
    i32 %269 = phi [^b15, i32 %256] [^entry16, i32 %293];
    i32* %270 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %269];
    i32 %271 = load i32* %270;
    i1 %272 = scmp eq i32 %271, i32 42;
    i1 %273 = scmp eq i32 %271, i32 47;
    i1 %274 = or i1 %272, i1 %273;
    i1 %275 = scmp eq i32 %271, i32 37;
    i1 %276 = or i1 %274, i1 %275;
    i1 %277 = scmp eq i32 %271, i32 94;
    i1 %278 = or i1 %276, i1 %277;
    cbr i1 %278(prob = 0.97), ^entry16, ^entry15;
  ^b16:
    i32 %279 = phi [^b15, i32 %255] [^entry15, i32 %283];
    i32 %280 = phi [^b15, i32 %256] [^entry15, i32 %285];
    i32 %281 = load i32* %22;
    i1 %282 = scmp eq i32 %281, i32 37;
    cbr i1 %282(prob = 0.5), ^while.header6, ^b17;
  ^entry15:
    i32 %283 = phi [^while.header5, i32 %268] [^entry16, i32 %295];
    i32 %284 = phi [^while.header5, i32 %269] [^entry16, i32 %293];
    i32 %285 = add i32 %284, i32 1;
    i32* %286 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %285];
    store i32* %286 with i32 47;
    ubr ^b16;
  ^b17:
    i32 %287 = phi [^b16, i32 %280] [^entry17, i32 %309];
    i32 %288 = phi [^b16, i32 %279] [^entry17, i32 %307];
    i32* %289 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %288];
    store i32* %289 with i32 32;
    i32 %290 = add i32 %288, i32 1;
    ubr ^b2;
  ^entry16:
    i32* %291 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %268];
    store i32* %291 with i32 32;
    i32* %292 = getelementptr &(i32* %291)[i64 1];
    store i32* %292 with i32 %271;
    i32 %293 = add i32 %269, i32 -1;
    i1 %294 = scmp eq i32 %293, i32 0;
    i32 %295 = add i32 %268, i32 2;
    cbr i1 %294(prob = 0.5), ^entry15, ^while.header5;
  ^while.header6:
    i32 %296 = phi [^b16, i32 %279] [^entry18, i32 %315];
    i32 %297 = phi [^b16, i32 %280] [^entry18, i32 %313];
    i32* %298 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %297];
    i32 %299 = load i32* %298;
    i1 %300 = scmp eq i32 %299, i32 42;
    i1 %301 = scmp eq i32 %299, i32 47;
    i1 %302 = or i1 %300, i1 %301;
    i1 %303 = scmp eq i32 %299, i32 37;
    i1 %304 = or i1 %302, i1 %303;
    i1 %305 = scmp eq i32 %299, i32 94;
    i1 %306 = or i1 %304, i1 %305;
    cbr i1 %306(prob = 0.97), ^entry18, ^entry17;
  ^entry17:
    i32 %307 = phi [^while.header6, i32 %296] [^entry18, i32 %315];
    i32 %308 = phi [^while.header6, i32 %297] [^entry18, i32 %313];
    i32 %309 = add i32 %308, i32 1;
    i32* %310 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %309];
    store i32* %310 with i32 37;
    ubr ^b17;
  ^entry18:
    i32* %311 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %296];
    store i32* %311 with i32 32;
    i32* %312 = getelementptr &(i32* %311)[i64 1];
    store i32* %312 with i32 %299;
    i32 %313 = add i32 %297, i32 -1;
    i1 %314 = scmp eq i32 %313, i32 0;
    i32 %315 = add i32 %296, i32 2;
    cbr i1 %314(prob = 0.5), ^entry17, ^while.header6;
}
