internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal [10000 * i32]* @ints { Flexible };
internal [10000 * i32]* @chas { Flexible };
internal [10000 * i32]* @get { Flexible };
internal [10000 * i32]* @get2 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = icmp neq i32 %0, i32 13;
    i1 %2 = icmp neq i32 %0, i32 10;
    i1 %3 = and i1 %1, i1 %2;
    [10000 * i32]* %4 = ptrcast [10000 * i32]* @get to [10000 * i32]*;
    i32* %5 = getelementptr &([10000 * i32]* %4)[i64 0][i64 0];
    [10000 * i32]* %6 = ptrcast [10000 * i32]* @chas to [10000 * i32]*;
    [10000 * i32]* %7 = ptrcast [10000 * i32]* @ints to [10000 * i32]*;
    [10000 * i32]* %8 = ptrcast [10000 * i32]* @get2 to [10000 * i32]*;
    cbr i1 %3(prob = 0.97), ^while.body, ^b;
  ^b:
    i32 %9 = phi [^entry, i32 0] [^while.body, i32 %17];
    ubr ^while.header;
  ^while.body:
    i32 %10 = phi [^entry, i32 %0] [^while.body, i32 %13];
    i32 %11 = phi [^entry, i32 0] [^while.body, i32 %17];
    i32* %12 = getelementptr &(i32* %5)[i32 %11];
    store i32* %12 with i32 %10;
    i32 %13 = call () -> i32 @getch();
    i1 %14 = icmp neq i32 %13, i32 13;
    i1 %15 = icmp neq i32 %13, i32 10;
    i1 %16 = and i1 %14, i1 %15;
    i32 %17 = add i32 %11, i32 1;
    cbr i1 %16(prob = 0.97), ^while.body, ^b;
  ^while.header:
    i32 %18 = phi [^b, i32 0] [^if.then, i32 %18] [^b14, i32 %259];
    i32 %19 = phi [^b, i32 1] [^if.then, i32 %28] [^b14, i32 %262];
    i32 %20 = phi [^b, i32 0] [^if.then, i32 %29] [^b14, i32 %263];
    i1 %21 = icmp sgt i32 %9, i32 %20;
    cbr i1 %21(prob = 0.97), ^while.body1, ^indirect;
  ^while.body1:
    i32* %22 = getelementptr &([10000 * i32]* %4)[i64 0][i32 %20];
    i32 %23 = load i32* %22;
    i32 %24 = add i32 %23, i32 -48;
    i1 %25 = icmp ult i32 %24, i32 10;
    cbr i1 %25(prob = 0.5), ^if.then, ^if.else;
  ^indirect:
    i1 %26 = icmp sgt i32 %18, i32 0;
    cbr i1 %26(prob = 0.97), ^indirect1, ^b1;
  ^if.then:
    i32* %27 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %19];
    store i32* %27 with i32 %23;
    i32 %28 = add i32 %19, i32 1;
    i32 %29 = add i32 %20, i32 1;
    ubr ^while.header;
  ^indirect1:
    i32 %30 = add i32 %18, i32 -4;
    i1 %31 = icmp sgt i32 %30, i32 0;
    cbr i1 %31(prob = 0.89), ^entry2, ^entry3;
  ^if.else:
    i1 %32 = icmp eq i32 %23, i32 40;
    cbr i1 %32(prob = 0.5), ^entry1, ^b2;
  ^b1:
    i32 %33 = phi [^indirect, i32 %19] [^entry3, i32 %72];
    i32* %34 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %33];
    store i32* %34 with i32 64;
    i32* %35 = getelementptr &([10000 * i32]* %8)[i64 0][i64 1];
    i32 %36 = load i32* %35;
    i1 %37 = icmp neq i32 %36, i32 64;
    cbr i1 %37(prob = 0.97), ^while.body2, ^b3;
  ^entry1:
    i32 %38 = add i32 %18, i32 1;
    i32* %39 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %38];
    store i32* %39 with i32 40;
    ubr ^b2;
  ^entry2:
    i32 %40 = phi [^indirect1, i32 %19] [^entry2, i32 %61];
    i32 %41 = phi [^indirect1, i32 %18] [^entry2, i32 %60];
    i32* %42 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %41];
    i32 %43 = load i32* %42;
    i32* %44 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %40];
    store i32* %44 with i32 32;
    i32* %45 = getelementptr &(i32* %44)[i64 1];
    store i32* %45 with i32 %43;
    i32* %46 = getelementptr &(i32* %42)[i64 -1];
    i32 %47 = load i32* %46;
    i32* %48 = getelementptr &(i32* %44)[i64 2];
    store i32* %48 with i32 32;
    i32* %49 = getelementptr &(i32* %44)[i64 3];
    store i32* %49 with i32 %47;
    i32* %50 = getelementptr &(i32* %42)[i64 -2];
    i32 %51 = load i32* %50;
    i32* %52 = getelementptr &(i32* %44)[i64 4];
    store i32* %52 with i32 32;
    i32* %53 = getelementptr &(i32* %44)[i64 5];
    store i32* %53 with i32 %51;
    i32* %54 = getelementptr &(i32* %42)[i64 -3];
    i32 %55 = load i32* %54;
    i32* %56 = getelementptr &(i32* %44)[i64 6];
    store i32* %56 with i32 32;
    i32* %57 = getelementptr &(i32* %44)[i64 7];
    store i32* %57 with i32 %55;
    i32 %58 = add i32 %41, i32 -8;
    i1 %59 = icmp sgt i32 %58, i32 0;
    i32 %60 = add i32 %41, i32 -4;
    i32 %61 = add i32 %40, i32 8;
    cbr i1 %59(prob = 0.89), ^entry2, ^entry3;
  ^b2:
    i32 %62 = phi [^if.else, i32 %18] [^entry1, i32 %38];
    i1 %63 = icmp eq i32 %23, i32 94;
    cbr i1 %63(prob = 0.5), ^entry4, ^b4;
  ^entry3:
    i32 %64 = phi [^indirect1, i32 %18] [^entry2, i32 %60] [^entry3, i32 %70];
    i32 %65 = phi [^indirect1, i32 %19] [^entry2, i32 %61] [^entry3, i32 %72];
    i32* %66 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %64];
    i32 %67 = load i32* %66;
    i32* %68 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %65];
    store i32* %68 with i32 32;
    i32* %69 = getelementptr &(i32* %68)[i64 1];
    store i32* %69 with i32 %67;
    i32 %70 = add i32 %64, i32 -1;
    i1 %71 = icmp sgt i32 %70, i32 0;
    i32 %72 = add i32 %65, i32 2;
    cbr i1 %71(prob = 0.75), ^entry3, ^b1;
  ^while.body2:
    i32 %73 = phi [^b1, i32 1] [^while.header2, i32 %165];
    i32 %74 = phi [^b1, i32 0] [^while.header2, i32 %164];
    i32* %75 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %73];
    i32 %76 = load i32* %75;
    i1 %77 = icmp eq i32 %76, i32 43;
    i1 %78 = icmp eq i32 %76, i32 45;
    i1 %79 = or i1 %77, i1 %78;
    i1 %80 = icmp eq i32 %76, i32 42;
    i1 %81 = or i1 %79, i1 %80;
    i1 %82 = icmp eq i32 %76, i32 47;
    i1 %83 = or i1 %81, i1 %82;
    i1 %84 = icmp eq i32 %76, i32 37;
    i1 %85 = or i1 %83, i1 %84;
    i1 %86 = icmp eq i32 %76, i32 94;
    i1 %87 = or i1 %85, i1 %86;
    cbr i1 %87(prob = 0.98), ^entry5, ^if.else1;
  ^b3:
    i32* %88 = getelementptr &([10000 * i32]* %7)[i64 0][i64 1];
    i32 %89 = load i32* %88;
    call (i32) -> void @putint(i32 %89);
    ret i32 0;
  ^entry4:
    i32 %90 = add i32 %62, i32 1;
    i32* %91 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %90];
    store i32* %91 with i32 94;
    ubr ^b4;
  ^entry5:
    i32* %92 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %74];
    i32 %93 = load i32* %92;
    i32* %94 = getelementptr &(i32* %92)[i64 -1];
    i32 %95 = load i32* %94;
    i32 %96 = add i32 %93, i32 %95;
    i32 %97 = select i1 %77 ? i32 %96 : i32 0;
    i32 %98 = sub i32 %95, i32 %93;
    i32 %99 = select i1 %78 ? i32 %98 : i32 %97;
    i32 %100 = mul i32 %93, i32 %95;
    i32 %101 = select i1 %80 ? i32 %100 : i32 %99;
    cbr i1 %82(prob = 0.5), ^if.then1, ^b5;
  ^b4:
    i32 %102 = phi [^b2, i32 %62] [^entry4, i32 %90];
    i1 %103 = icmp eq i32 %23, i32 41;
    cbr i1 %103(prob = 0.5), ^entry6, ^b6;
  ^if.else1:
    i1 %104 = icmp neq i32 %76, i32 32;
    cbr i1 %104(prob = 0.5), ^if.then2, ^indirect2;
  ^if.then1:
    i32 %105 = sdiv i32 %95, i32 %93;
    ubr ^b5;
  ^indirect2:
    i32 %106 = phi [^if.else1, i32 %74] [^b10, i32 %174];
    i32 %107 = add i32 %73, i32 1;
    ubr ^while.header2;
  ^entry6:
    i32* %108 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %102];
    i32 %109 = load i32* %108;
    i1 %110 = icmp neq i32 %109, i32 40;
    i32 %111 = add i32 %102, i32 -1;
    cbr i1 %110(prob = 0.97), ^while.body3, ^b6;
  ^if.then2:
    i32 %112 = add i32 %74, i32 1;
    i32* %113 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %112];
    i32 %114 = add i32 %76, i32 -48;
    store i32* %113 with i32 %114;
    i32 %115 = add i32 %73, i32 1;
    i32* %116 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %115];
    i32 %117 = load i32* %116;
    i1 %118 = icmp neq i32 %117, i32 32;
    cbr i1 %118(prob = 0.97), ^while.body4, ^b7;
  ^b5:
    i32 %119 = phi [^entry5, i32 %101] [^if.then1, i32 %105];
    cbr i1 %84(prob = 0.5), ^if.then3, ^b8;
  ^b6:
    i32 %120 = phi [^b4, i32 %19] [^entry6, i32 %19] [^while.body3, i32 %134];
    i32 %121 = phi [^b4, i32 %102] [^entry6, i32 %111] [^while.body3, i32 %135];
    i1 %122 = icmp eq i32 %23, i32 43;
    cbr i1 %122(prob = 0.5), ^while.header1, ^b9;
  ^if.then3:
    i32 %123 = srem i32 %95, i32 %93;
    ubr ^b8;
  ^b7:
    i32 %124 = phi [^if.then2, i32 1] [^while.body4, i32 %148];
    i32 %125 = add i32 %73, i32 %124;
    ubr ^while.header2;
  ^while.body3:
    i32 %126 = phi [^entry6, i32 %111] [^while.body3, i32 %135];
    i32 %127 = phi [^entry6, i32 %19] [^while.body3, i32 %134];
    i32 %128 = phi [^entry6, i32 %109] [^while.body3, i32 %132];
    i32* %129 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %127];
    store i32* %129 with i32 32;
    i32* %130 = getelementptr &(i32* %129)[i64 1];
    store i32* %130 with i32 %128;
    i32* %131 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %126];
    i32 %132 = load i32* %131;
    i1 %133 = icmp neq i32 %132, i32 40;
    i32 %134 = add i32 %127, i32 2;
    i32 %135 = add i32 %126, i32 -1;
    cbr i1 %133(prob = 0.97), ^while.body3, ^b6;
  ^while.body4:
    i32 %136 = phi [^if.then2, i32 %114] [^while.body4, i32 %143];
    i32 %137 = phi [^if.then2, i32 1] [^while.body4, i32 %148];
    i32 %138 = add i32 %73, i32 %137;
    i32* %139 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %138];
    i32 %140 = load i32* %139;
    i32 %141 = mul i32 %136, i32 10;
    i32 %142 = add i32 %141, i32 -48;
    i32 %143 = add i32 %140, i32 %142;
    store i32* %113 with i32 %143;
    i32 %144 = add i32 %115, i32 %137;
    i32* %145 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %144];
    i32 %146 = load i32* %145;
    i1 %147 = icmp neq i32 %146, i32 32;
    i32 %148 = add i32 %137, i32 1;
    cbr i1 %147(prob = 0.97), ^while.body4, ^b7;
  ^while.header1:
    i32 %149 = phi [^b6, i32 %120] [^entry8, i32 %184];
    i32 %150 = phi [^b6, i32 %121] [^entry8, i32 %182];
    i32* %151 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %150];
    i32 %152 = load i32* %151;
    i1 %153 = icmp eq i32 %152, i32 43;
    i1 %154 = icmp eq i32 %152, i32 45;
    i1 %155 = or i1 %153, i1 %154;
    i1 %156 = icmp eq i32 %152, i32 42;
    i1 %157 = or i1 %155, i1 %156;
    i1 %158 = icmp eq i32 %152, i32 47;
    i1 %159 = or i1 %157, i1 %158;
    i1 %160 = icmp eq i32 %152, i32 37;
    i1 %161 = or i1 %159, i1 %160;
    i1 %162 = icmp eq i32 %152, i32 94;
    i1 %163 = or i1 %161, i1 %162;
    cbr i1 %163(prob = 1), ^entry8, ^entry7;
  ^while.header2:
    i32 %164 = phi [^indirect2, i32 %106] [^b7, i32 %112];
    i32 %165 = phi [^indirect2, i32 %107] [^b7, i32 %125];
    i32* %166 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %165];
    i32 %167 = load i32* %166;
    i1 %168 = icmp neq i32 %167, i32 64;
    cbr i1 %168(prob = 0.97), ^while.body2, ^b3;
  ^b8:
    i32 %169 = phi [^b5, i32 %119] [^if.then3, i32 %123];
    cbr i1 %86(prob = 0.5), ^entry9, ^b10;
  ^b9:
    i32 %170 = phi [^b6, i32 %120] [^entry7, i32 %176];
    i32 %171 = phi [^b6, i32 %121] [^entry7, i32 %178];
    i1 %172 = icmp eq i32 %23, i32 45;
    cbr i1 %172(prob = 0.5), ^while.header3, ^b11;
  ^b10:
    i32 %173 = phi [^b8, i32 %169] [^entry9, i32 1] [^while.body5, i32 %206];
    i32 %174 = add i32 %74, i32 -1;
    i32* %175 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %174];
    store i32* %175 with i32 %173;
    ubr ^indirect2;
  ^entry7:
    i32 %176 = phi [^while.header1, i32 %149] [^entry8, i32 %184];
    i32 %177 = phi [^while.header1, i32 %150] [^entry8, i32 %182];
    i32 %178 = add i32 %177, i32 1;
    i32* %179 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %178];
    store i32* %179 with i32 43;
    ubr ^b9;
  ^entry8:
    i32* %180 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %149];
    store i32* %180 with i32 32;
    i32* %181 = getelementptr &(i32* %180)[i64 1];
    store i32* %181 with i32 %152;
    i32 %182 = add i32 %150, i32 -1;
    i1 %183 = icmp eq i32 %182, i32 0;
    i32 %184 = add i32 %149, i32 2;
    cbr i1 %183(prob = 0.5), ^entry7, ^while.header1;
  ^entry9:
    i1 %185 = icmp neq i32 %93, i32 0;
    cbr i1 %185(prob = 0.97), ^while.body5, ^b10;
  ^while.header3:
    i32 %186 = phi [^b9, i32 %170] [^entry11, i32 %217];
    i32 %187 = phi [^b9, i32 %171] [^entry11, i32 %215];
    i32* %188 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %187];
    i32 %189 = load i32* %188;
    i1 %190 = icmp eq i32 %189, i32 43;
    i1 %191 = icmp eq i32 %189, i32 45;
    i1 %192 = or i1 %190, i1 %191;
    i1 %193 = icmp eq i32 %189, i32 42;
    i1 %194 = or i1 %192, i1 %193;
    i1 %195 = icmp eq i32 %189, i32 47;
    i1 %196 = or i1 %194, i1 %195;
    i1 %197 = icmp eq i32 %189, i32 37;
    i1 %198 = or i1 %196, i1 %197;
    i1 %199 = icmp eq i32 %189, i32 94;
    i1 %200 = or i1 %198, i1 %199;
    cbr i1 %200(prob = 1), ^entry11, ^entry10;
  ^b11:
    i32 %201 = phi [^b9, i32 %170] [^entry10, i32 %209];
    i32 %202 = phi [^b9, i32 %171] [^entry10, i32 %211];
    i1 %203 = icmp eq i32 %23, i32 42;
    cbr i1 %203(prob = 0.5), ^while.header4, ^b12;
  ^while.body5:
    i32 %204 = phi [^entry9, i32 %93] [^while.body5, i32 %207];
    i32 %205 = phi [^entry9, i32 1] [^while.body5, i32 %206];
    i32 %206 = mul i32 %95, i32 %205;
    i32 %207 = add i32 %204, i32 -1;
    i1 %208 = icmp neq i32 %207, i32 0;
    cbr i1 %208(prob = 0.97), ^while.body5, ^b10;
  ^entry10:
    i32 %209 = phi [^while.header3, i32 %186] [^entry11, i32 %217];
    i32 %210 = phi [^while.header3, i32 %187] [^entry11, i32 %215];
    i32 %211 = add i32 %210, i32 1;
    i32* %212 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %211];
    store i32* %212 with i32 45;
    ubr ^b11;
  ^entry11:
    i32* %213 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %186];
    store i32* %213 with i32 32;
    i32* %214 = getelementptr &(i32* %213)[i64 1];
    store i32* %214 with i32 %189;
    i32 %215 = add i32 %187, i32 -1;
    i1 %216 = icmp eq i32 %215, i32 0;
    i32 %217 = add i32 %186, i32 2;
    cbr i1 %216(prob = 0.5), ^entry10, ^while.header3;
  ^while.header4:
    i32 %218 = phi [^b11, i32 %201] [^entry13, i32 %240];
    i32 %219 = phi [^b11, i32 %202] [^entry13, i32 %238];
    i32* %220 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %219];
    i32 %221 = load i32* %220;
    i1 %222 = icmp eq i32 %221, i32 42;
    i1 %223 = icmp eq i32 %221, i32 47;
    i1 %224 = or i1 %222, i1 %223;
    i1 %225 = icmp eq i32 %221, i32 37;
    i1 %226 = or i1 %224, i1 %225;
    i1 %227 = icmp eq i32 %221, i32 94;
    i1 %228 = or i1 %226, i1 %227;
    cbr i1 %228(prob = 1), ^entry13, ^entry12;
  ^b12:
    i32 %229 = phi [^b11, i32 %201] [^entry12, i32 %232];
    i32 %230 = phi [^b11, i32 %202] [^entry12, i32 %234];
    i1 %231 = icmp eq i32 %23, i32 47;
    cbr i1 %231(prob = 0.5), ^while.header5, ^b13;
  ^entry12:
    i32 %232 = phi [^while.header4, i32 %218] [^entry13, i32 %240];
    i32 %233 = phi [^while.header4, i32 %219] [^entry13, i32 %238];
    i32 %234 = add i32 %233, i32 1;
    i32* %235 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %234];
    store i32* %235 with i32 42;
    ubr ^b12;
  ^entry13:
    i32* %236 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %218];
    store i32* %236 with i32 32;
    i32* %237 = getelementptr &(i32* %236)[i64 1];
    store i32* %237 with i32 %221;
    i32 %238 = add i32 %219, i32 -1;
    i1 %239 = icmp eq i32 %238, i32 0;
    i32 %240 = add i32 %218, i32 2;
    cbr i1 %239(prob = 0.5), ^entry12, ^while.header4;
  ^while.header5:
    i32 %241 = phi [^b12, i32 %229] [^entry15, i32 %268];
    i32 %242 = phi [^b12, i32 %230] [^entry15, i32 %266];
    i32* %243 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %242];
    i32 %244 = load i32* %243;
    i1 %245 = icmp eq i32 %244, i32 42;
    i1 %246 = icmp eq i32 %244, i32 47;
    i1 %247 = or i1 %245, i1 %246;
    i1 %248 = icmp eq i32 %244, i32 37;
    i1 %249 = or i1 %247, i1 %248;
    i1 %250 = icmp eq i32 %244, i32 94;
    i1 %251 = or i1 %249, i1 %250;
    cbr i1 %251(prob = 1), ^entry15, ^entry14;
  ^b13:
    i32 %252 = phi [^b12, i32 %229] [^entry14, i32 %255];
    i32 %253 = phi [^b12, i32 %230] [^entry14, i32 %257];
    i1 %254 = icmp eq i32 %23, i32 37;
    cbr i1 %254(prob = 0.5), ^while.header6, ^b14;
  ^entry14:
    i32 %255 = phi [^while.header5, i32 %241] [^entry15, i32 %268];
    i32 %256 = phi [^while.header5, i32 %242] [^entry15, i32 %266];
    i32 %257 = add i32 %256, i32 1;
    i32* %258 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %257];
    store i32* %258 with i32 47;
    ubr ^b13;
  ^b14:
    i32 %259 = phi [^b13, i32 %253] [^entry16, i32 %282];
    i32 %260 = phi [^b13, i32 %252] [^entry16, i32 %280];
    i32* %261 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %260];
    store i32* %261 with i32 32;
    i32 %262 = add i32 %260, i32 1;
    i32 %263 = add i32 %20, i32 1;
    ubr ^while.header;
  ^entry15:
    i32* %264 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %241];
    store i32* %264 with i32 32;
    i32* %265 = getelementptr &(i32* %264)[i64 1];
    store i32* %265 with i32 %244;
    i32 %266 = add i32 %242, i32 -1;
    i1 %267 = icmp eq i32 %266, i32 0;
    i32 %268 = add i32 %241, i32 2;
    cbr i1 %267(prob = 0.5), ^entry14, ^while.header5;
  ^while.header6:
    i32 %269 = phi [^b13, i32 %252] [^entry17, i32 %288];
    i32 %270 = phi [^b13, i32 %253] [^entry17, i32 %286];
    i32* %271 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %270];
    i32 %272 = load i32* %271;
    i1 %273 = icmp eq i32 %272, i32 42;
    i1 %274 = icmp eq i32 %272, i32 47;
    i1 %275 = or i1 %273, i1 %274;
    i1 %276 = icmp eq i32 %272, i32 37;
    i1 %277 = or i1 %275, i1 %276;
    i1 %278 = icmp eq i32 %272, i32 94;
    i1 %279 = or i1 %277, i1 %278;
    cbr i1 %279(prob = 1), ^entry17, ^entry16;
  ^entry16:
    i32 %280 = phi [^while.header6, i32 %269] [^entry17, i32 %288];
    i32 %281 = phi [^while.header6, i32 %270] [^entry17, i32 %286];
    i32 %282 = add i32 %281, i32 1;
    i32* %283 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %282];
    store i32* %283 with i32 37;
    ubr ^b14;
  ^entry17:
    i32* %284 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %269];
    store i32* %284 with i32 32;
    i32* %285 = getelementptr &(i32* %284)[i64 1];
    store i32* %285 with i32 %272;
    i32 %286 = add i32 %270, i32 -1;
    i1 %287 = icmp eq i32 %286, i32 0;
    i32 %288 = add i32 %269, i32 2;
    cbr i1 %287(prob = 0.5), ^entry16, ^while.header6;
}
