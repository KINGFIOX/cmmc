internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal [10000 * i32]* @ints;
internal [10000 * i32]* @chas;
internal [10000 * i32]* @get;
internal [10000 * i32]* @get2;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = icmp neq i32 %0, i32 13;
    i1 %2 = icmp neq i32 %0, i32 10;
    i1 %3 = and i1 %1, i1 %2;
    [10000 * i32]* %4 = ptrcast [10000 * i32]* @get to [10000 * i32]*;
    i32* %5 = getelementptr &([10000 * i32]* %4)[i64 0][i64 0];
    [10000 * i32]* %6 = ptrcast [10000 * i32]* @chas to [10000 * i32]*;
    [10000 * i32]* %7 = ptrcast [10000 * i32]* @ints to [10000 * i32]*;
    [10000 * i32]* %8 = ptrcast [10000 * i32]* @get2 to [10000 * i32]*;
    cbr i1 %3(prob = 0.97), ^while.body, ^b;
  ^b:
    i32 %9 = phi [^entry, i32 0] [^while.body, i32 %17];
    ubr ^while.header;
  ^while.body:
    i32 %10 = phi [^entry, i32 %0] [^while.body, i32 %13];
    i32 %11 = phi [^entry, i32 0] [^while.body, i32 %17];
    i32* %12 = getelementptr &(i32* %5)[i32 %11];
    store i32* %12 with i32 %10;
    i32 %13 = call () -> i32 @getch();
    i1 %14 = icmp neq i32 %13, i32 13;
    i1 %15 = icmp neq i32 %13, i32 10;
    i1 %16 = and i1 %14, i1 %15;
    i32 %17 = add i32 %11, i32 1;
    cbr i1 %16(prob = 0.97), ^while.body, ^b;
  ^while.header:
    i32 %18 = phi [^b, i32 0] [^if.then, i32 %29] [^b15, i32 %280];
    i32 %19 = phi [^b, i32 1] [^if.then, i32 %28] [^b15, i32 %279];
    i32 %20 = phi [^b, i32 0] [^if.then, i32 %20] [^b15, i32 %276];
    i1 %21 = icmp sgt i32 %9, i32 %18;
    cbr i1 %21(prob = 0.97), ^while.body1, ^indirect;
  ^while.body1:
    i32* %22 = getelementptr &([10000 * i32]* %4)[i64 0][i32 %18];
    i32 %23 = load i32* %22;
    i32 %24 = add i32 %23, i32 -48;
    i1 %25 = icmp ult i32 %24, i32 10;
    cbr i1 %25(prob = 0.5), ^if.then, ^if.else;
  ^indirect:
    i1 %26 = icmp sgt i32 %20, i32 0;
    cbr i1 %26(prob = 0.97), ^super.header, ^b1;
  ^if.then:
    i32* %27 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %19];
    store i32* %27 with i32 %23;
    i32 %28 = add i32 %19, i32 1;
    i32 %29 = add i32 %18, i32 1;
    ubr ^while.header;
  ^if.else:
    i1 %30 = icmp eq i32 %23, i32 40;
    cbr i1 %30(prob = 0.5), ^entry1, ^b2;
  ^super.header:
    i32 %31 = phi [^indirect, i32 %20] [^entry2, i32 %33];
    i32 %32 = phi [^indirect, i32 %19] [^entry2, i32 %58];
    i32 %33 = add i32 %31, i32 -4;
    i1 %34 = icmp sgt i32 %33, i32 0;
    cbr i1 %34(prob = 0.89), ^entry2, ^super.header1;
  ^b1:
    i32 %35 = phi [^indirect, i32 %19] [^entry6, i32 %119];
    i32* %36 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %35];
    store i32* %36 with i32 64;
    i32* %37 = getelementptr &([10000 * i32]* %8)[i64 0][i64 1];
    i32 %38 = load i32* %37;
    i1 %39 = icmp neq i32 %38, i32 64;
    cbr i1 %39(prob = 0.97), ^while.body2, ^b3;
  ^entry1:
    i32 %40 = add i32 %20, i32 1;
    i32* %41 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %40];
    store i32* %41 with i32 40;
    ubr ^b2;
  ^entry2:
    i32* %42 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %31];
    i32 %43 = load i32* %42;
    i32* %44 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %32];
    store i32* %44 with i32 32;
    i32* %45 = getelementptr &(i32* %44)[i64 1];
    store i32* %45 with i32 %43;
    i32* %46 = getelementptr &(i32* %42)[i64 -1];
    i32 %47 = load i32* %46;
    i32* %48 = getelementptr &(i32* %44)[i64 2];
    store i32* %48 with i32 32;
    i32* %49 = getelementptr &(i32* %44)[i64 3];
    store i32* %49 with i32 %47;
    i32* %50 = getelementptr &(i32* %42)[i64 -2];
    i32 %51 = load i32* %50;
    i32* %52 = getelementptr &(i32* %44)[i64 4];
    store i32* %52 with i32 32;
    i32* %53 = getelementptr &(i32* %44)[i64 5];
    store i32* %53 with i32 %51;
    i32* %54 = getelementptr &(i32* %42)[i64 -3];
    i32 %55 = load i32* %54;
    i32* %56 = getelementptr &(i32* %44)[i64 6];
    store i32* %56 with i32 32;
    i32* %57 = getelementptr &(i32* %44)[i64 7];
    store i32* %57 with i32 %55;
    i32 %58 = add i32 %32, i32 8;
    ubr ^super.header;
  ^b2:
    i32 %59 = phi [^if.else, i32 %20] [^entry1, i32 %40];
    i1 %60 = icmp eq i32 %23, i32 94;
    cbr i1 %60(prob = 0.5), ^entry4, ^b4;
  ^super.header1:
    i32 %61 = phi [^super.header, i32 %31] [^entry3, i32 %63];
    i32 %62 = phi [^super.header, i32 %32] [^entry3, i32 %98];
    i32 %63 = add i32 %61, i32 -4;
    i1 %64 = icmp sgt i32 %63, i32 0;
    cbr i1 %64(prob = 0.89), ^entry3, ^entry6;
  ^while.body2:
    i32 %65 = phi [^b1, i32 1] [^b7, i32 %140];
    i32 %66 = phi [^b1, i32 0] [^b7, i32 %138];
    i32* %67 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %65];
    i32 %68 = load i32* %67;
    i1 %69 = icmp eq i32 %68, i32 43;
    i1 %70 = icmp eq i32 %68, i32 45;
    i1 %71 = or i1 %69, i1 %70;
    i1 %72 = icmp eq i32 %68, i32 42;
    i1 %73 = or i1 %71, i1 %72;
    i1 %74 = icmp eq i32 %68, i32 47;
    i1 %75 = or i1 %73, i1 %74;
    i1 %76 = icmp eq i32 %68, i32 37;
    i1 %77 = or i1 %75, i1 %76;
    i1 %78 = icmp eq i32 %68, i32 94;
    i1 %79 = or i1 %77, i1 %78;
    cbr i1 %79(prob = 0.5), ^entry5, ^if.else1;
  ^b3:
    i32* %80 = getelementptr &([10000 * i32]* %7)[i64 0][i64 1];
    i32 %81 = load i32* %80;
    call (i32) -> void @putint(i32 %81);
    ret i32 0;
  ^entry3:
    i32* %82 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %61];
    i32 %83 = load i32* %82;
    i32* %84 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %62];
    store i32* %84 with i32 32;
    i32* %85 = getelementptr &(i32* %84)[i64 1];
    store i32* %85 with i32 %83;
    i32* %86 = getelementptr &(i32* %82)[i64 -1];
    i32 %87 = load i32* %86;
    i32* %88 = getelementptr &(i32* %84)[i64 2];
    store i32* %88 with i32 32;
    i32* %89 = getelementptr &(i32* %84)[i64 3];
    store i32* %89 with i32 %87;
    i32* %90 = getelementptr &(i32* %82)[i64 -2];
    i32 %91 = load i32* %90;
    i32* %92 = getelementptr &(i32* %84)[i64 4];
    store i32* %92 with i32 32;
    i32* %93 = getelementptr &(i32* %84)[i64 5];
    store i32* %93 with i32 %91;
    i32* %94 = getelementptr &(i32* %82)[i64 -3];
    i32 %95 = load i32* %94;
    i32* %96 = getelementptr &(i32* %84)[i64 6];
    store i32* %96 with i32 32;
    i32* %97 = getelementptr &(i32* %84)[i64 7];
    store i32* %97 with i32 %95;
    i32 %98 = add i32 %62, i32 8;
    ubr ^super.header1;
  ^entry4:
    i32 %99 = add i32 %59, i32 1;
    i32* %100 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %99];
    store i32* %100 with i32 94;
    ubr ^b4;
  ^entry5:
    i32* %101 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %66];
    i32 %102 = load i32* %101;
    i32* %103 = getelementptr &(i32* %101)[i64 -1];
    i32 %104 = load i32* %103;
    i32 %105 = add i32 %102, i32 %104;
    i32 %106 = select i1 %69 ? i32 %105 : i32 0;
    i32 %107 = sub i32 %104, i32 %102;
    i32 %108 = select i1 %70 ? i32 %107 : i32 %106;
    i32 %109 = mul i32 %102, i32 %104;
    i32 %110 = select i1 %72 ? i32 %109 : i32 %108;
    cbr i1 %74(prob = 0.5), ^if.then1, ^b5;
  ^entry6:
    i32 %111 = phi [^super.header1, i32 %61] [^entry6, i32 %117];
    i32 %112 = phi [^super.header1, i32 %62] [^entry6, i32 %119];
    i32* %113 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %111];
    i32 %114 = load i32* %113;
    i32* %115 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %112];
    store i32* %115 with i32 32;
    i32* %116 = getelementptr &(i32* %115)[i64 1];
    store i32* %116 with i32 %114;
    i32 %117 = add i32 %111, i32 -1;
    i1 %118 = icmp sgt i32 %117, i32 0;
    i32 %119 = add i32 %112, i32 2;
    cbr i1 %118(prob = 0.97), ^entry6, ^b1;
  ^b4:
    i32 %120 = phi [^b2, i32 %59] [^entry4, i32 %99];
    i1 %121 = icmp eq i32 %23, i32 41;
    cbr i1 %121(prob = 0.5), ^entry7, ^b6;
  ^if.else1:
    i1 %122 = icmp neq i32 %68, i32 32;
    cbr i1 %122(prob = 0.5), ^if.then2, ^b7;
  ^if.then1:
    i32 %123 = sdiv i32 %104, i32 %102;
    ubr ^b5;
  ^entry7:
    i32* %124 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %120];
    i32 %125 = load i32* %124;
    i32 %126 = add i32 %120, i32 -1;
    ubr ^while.header1;
  ^if.then2:
    i32 %127 = add i32 %66, i32 1;
    i32* %128 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %127];
    i32 %129 = add i32 %68, i32 -48;
    store i32* %128 with i32 %129;
    i32 %130 = add i32 %65, i32 1;
    i32* %131 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %130];
    i32 %132 = load i32* %131;
    i1 %133 = icmp neq i32 %132, i32 32;
    cbr i1 %133(prob = 0.97), ^while.body3, ^b8;
  ^b5:
    i32 %134 = phi [^entry5, i32 %110] [^if.then1, i32 %123];
    cbr i1 %76(prob = 0.5), ^if.then3, ^b9;
  ^b6:
    i32 %135 = phi [^b4, i32 %19] [^while.header1, i32 %149];
    i32 %136 = phi [^b4, i32 %120] [^while.header1, i32 %150];
    i1 %137 = icmp eq i32 %23, i32 43;
    cbr i1 %137(prob = 0.5), ^while.header2, ^b10;
  ^b7:
    i32 %138 = phi [^if.else1, i32 %66] [^b8, i32 %127] [^b11, i32 %191];
    i32 %139 = phi [^if.else1, i32 %65] [^b8, i32 %147] [^b11, i32 %65];
    i32 %140 = add i32 %139, i32 1;
    i32* %141 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %140];
    i32 %142 = load i32* %141;
    i1 %143 = icmp neq i32 %142, i32 64;
    cbr i1 %143(prob = 0.97), ^while.body2, ^b3;
  ^if.then3:
    i32 %144 = srem i32 %104, i32 %102;
    ubr ^b9;
  ^b8:
    i32 %145 = phi [^if.then2, i32 1] [^while.body3, i32 %164];
    i32 %146 = add i32 %65, i32 -1;
    i32 %147 = add i32 %145, i32 %146;
    ubr ^b7;
  ^while.header1:
    i32 %148 = phi [^entry7, i32 %125] [^while.body4, i32 %187];
    i32 %149 = phi [^entry7, i32 %19] [^while.body4, i32 %188];
    i32 %150 = phi [^entry7, i32 %126] [^while.body4, i32 %189];
    i1 %151 = icmp neq i32 %148, i32 40;
    cbr i1 %151(prob = 0.97), ^while.body4, ^b6;
  ^while.body3:
    i32 %152 = phi [^if.then2, i32 %129] [^while.body3, i32 %159];
    i32 %153 = phi [^if.then2, i32 1] [^while.body3, i32 %164];
    i32 %154 = add i32 %65, i32 %153;
    i32* %155 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %154];
    i32 %156 = load i32* %155;
    i32 %157 = mul i32 %152, i32 10;
    i32 %158 = add i32 %157, i32 -48;
    i32 %159 = add i32 %156, i32 %158;
    store i32* %128 with i32 %159;
    i32 %160 = add i32 %130, i32 %153;
    i32* %161 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %160];
    i32 %162 = load i32* %161;
    i1 %163 = icmp neq i32 %162, i32 32;
    i32 %164 = add i32 %153, i32 1;
    cbr i1 %163(prob = 0.97), ^while.body3, ^b8;
  ^while.header2:
    i32 %165 = phi [^b6, i32 %135] [^entry9, i32 %201];
    i32 %166 = phi [^b6, i32 %136] [^entry9, i32 %199];
    i32* %167 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %166];
    i32 %168 = load i32* %167;
    i1 %169 = icmp eq i32 %168, i32 43;
    i1 %170 = icmp eq i32 %168, i32 45;
    i1 %171 = or i1 %169, i1 %170;
    i1 %172 = icmp eq i32 %168, i32 42;
    i1 %173 = or i1 %171, i1 %172;
    i1 %174 = icmp eq i32 %168, i32 47;
    i1 %175 = or i1 %173, i1 %174;
    i1 %176 = icmp eq i32 %168, i32 37;
    i1 %177 = or i1 %175, i1 %176;
    i1 %178 = icmp eq i32 %168, i32 94;
    i1 %179 = or i1 %177, i1 %178;
    cbr i1 %179(prob = 0.97), ^entry9, ^entry8;
  ^b9:
    i32 %180 = phi [^b5, i32 %134] [^if.then3, i32 %144];
    cbr i1 %78(prob = 0.5), ^entry10, ^b11;
  ^b10:
    i32 %181 = phi [^b6, i32 %135] [^entry8, i32 %193];
    i32 %182 = phi [^b6, i32 %136] [^entry8, i32 %195];
    i1 %183 = icmp eq i32 %23, i32 45;
    cbr i1 %183(prob = 0.5), ^while.header3, ^b12;
  ^while.body4:
    i32* %184 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %149];
    store i32* %184 with i32 32;
    i32* %185 = getelementptr &(i32* %184)[i64 1];
    store i32* %185 with i32 %148;
    i32* %186 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %150];
    i32 %187 = load i32* %186;
    i32 %188 = add i32 %149, i32 2;
    i32 %189 = add i32 %150, i32 -1;
    ubr ^while.header1;
  ^b11:
    i32 %190 = phi [^b9, i32 %180] [^entry10, i32 1] [^while.body5, i32 %223];
    i32 %191 = add i32 %66, i32 -1;
    i32* %192 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %191];
    store i32* %192 with i32 %190;
    ubr ^b7;
  ^entry8:
    i32 %193 = phi [^while.header2, i32 %165] [^entry9, i32 %201];
    i32 %194 = phi [^while.header2, i32 %166] [^entry9, i32 %199];
    i32 %195 = add i32 %194, i32 1;
    i32* %196 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %195];
    store i32* %196 with i32 43;
    ubr ^b10;
  ^entry9:
    i32* %197 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %165];
    store i32* %197 with i32 32;
    i32* %198 = getelementptr &(i32* %197)[i64 1];
    store i32* %198 with i32 %168;
    i32 %199 = add i32 %166, i32 -1;
    i1 %200 = icmp eq i32 %199, i32 0;
    i32 %201 = add i32 %165, i32 2;
    cbr i1 %200(prob = 0.5), ^entry8, ^while.header2;
  ^entry10:
    i1 %202 = icmp neq i32 %102, i32 0;
    cbr i1 %202(prob = 0.97), ^while.body5, ^b11;
  ^while.header3:
    i32 %203 = phi [^b10, i32 %181] [^entry12, i32 %234];
    i32 %204 = phi [^b10, i32 %182] [^entry12, i32 %232];
    i32* %205 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %204];
    i32 %206 = load i32* %205;
    i1 %207 = icmp eq i32 %206, i32 43;
    i1 %208 = icmp eq i32 %206, i32 45;
    i1 %209 = or i1 %207, i1 %208;
    i1 %210 = icmp eq i32 %206, i32 42;
    i1 %211 = or i1 %209, i1 %210;
    i1 %212 = icmp eq i32 %206, i32 47;
    i1 %213 = or i1 %211, i1 %212;
    i1 %214 = icmp eq i32 %206, i32 37;
    i1 %215 = or i1 %213, i1 %214;
    i1 %216 = icmp eq i32 %206, i32 94;
    i1 %217 = or i1 %215, i1 %216;
    cbr i1 %217(prob = 0.97), ^entry12, ^entry11;
  ^b12:
    i32 %218 = phi [^b10, i32 %181] [^entry11, i32 %226];
    i32 %219 = phi [^b10, i32 %182] [^entry11, i32 %228];
    i1 %220 = icmp eq i32 %23, i32 42;
    cbr i1 %220(prob = 0.5), ^while.header4, ^b13;
  ^while.body5:
    i32 %221 = phi [^entry10, i32 %102] [^while.body5, i32 %224];
    i32 %222 = phi [^entry10, i32 1] [^while.body5, i32 %223];
    i32 %223 = mul i32 %104, i32 %222;
    i32 %224 = add i32 %221, i32 -1;
    i1 %225 = icmp neq i32 %224, i32 0;
    cbr i1 %225(prob = 0.97), ^while.body5, ^b11;
  ^entry11:
    i32 %226 = phi [^while.header3, i32 %203] [^entry12, i32 %234];
    i32 %227 = phi [^while.header3, i32 %204] [^entry12, i32 %232];
    i32 %228 = add i32 %227, i32 1;
    i32* %229 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %228];
    store i32* %229 with i32 45;
    ubr ^b12;
  ^entry12:
    i32* %230 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %203];
    store i32* %230 with i32 32;
    i32* %231 = getelementptr &(i32* %230)[i64 1];
    store i32* %231 with i32 %206;
    i32 %232 = add i32 %204, i32 -1;
    i1 %233 = icmp eq i32 %232, i32 0;
    i32 %234 = add i32 %203, i32 2;
    cbr i1 %233(prob = 0.5), ^entry11, ^while.header3;
  ^while.header4:
    i32 %235 = phi [^b12, i32 %218] [^entry14, i32 %257];
    i32 %236 = phi [^b12, i32 %219] [^entry14, i32 %255];
    i32* %237 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %236];
    i32 %238 = load i32* %237;
    i1 %239 = icmp eq i32 %238, i32 42;
    i1 %240 = icmp eq i32 %238, i32 47;
    i1 %241 = or i1 %239, i1 %240;
    i1 %242 = icmp eq i32 %238, i32 37;
    i1 %243 = or i1 %241, i1 %242;
    i1 %244 = icmp eq i32 %238, i32 94;
    i1 %245 = or i1 %243, i1 %244;
    cbr i1 %245(prob = 0.97), ^entry14, ^entry13;
  ^b13:
    i32 %246 = phi [^b12, i32 %218] [^entry13, i32 %249];
    i32 %247 = phi [^b12, i32 %219] [^entry13, i32 %251];
    i1 %248 = icmp eq i32 %23, i32 47;
    cbr i1 %248(prob = 0.5), ^while.header5, ^b14;
  ^entry13:
    i32 %249 = phi [^while.header4, i32 %235] [^entry14, i32 %257];
    i32 %250 = phi [^while.header4, i32 %236] [^entry14, i32 %255];
    i32 %251 = add i32 %250, i32 1;
    i32* %252 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %251];
    store i32* %252 with i32 42;
    ubr ^b13;
  ^entry14:
    i32* %253 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %235];
    store i32* %253 with i32 32;
    i32* %254 = getelementptr &(i32* %253)[i64 1];
    store i32* %254 with i32 %238;
    i32 %255 = add i32 %236, i32 -1;
    i1 %256 = icmp eq i32 %255, i32 0;
    i32 %257 = add i32 %235, i32 2;
    cbr i1 %256(prob = 0.5), ^entry13, ^while.header4;
  ^while.header5:
    i32 %258 = phi [^b13, i32 %246] [^entry16, i32 %285];
    i32 %259 = phi [^b13, i32 %247] [^entry16, i32 %283];
    i32* %260 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %259];
    i32 %261 = load i32* %260;
    i1 %262 = icmp eq i32 %261, i32 42;
    i1 %263 = icmp eq i32 %261, i32 47;
    i1 %264 = or i1 %262, i1 %263;
    i1 %265 = icmp eq i32 %261, i32 37;
    i1 %266 = or i1 %264, i1 %265;
    i1 %267 = icmp eq i32 %261, i32 94;
    i1 %268 = or i1 %266, i1 %267;
    cbr i1 %268(prob = 0.97), ^entry16, ^entry15;
  ^b14:
    i32 %269 = phi [^b13, i32 %246] [^entry15, i32 %272];
    i32 %270 = phi [^b13, i32 %247] [^entry15, i32 %274];
    i1 %271 = icmp eq i32 %23, i32 37;
    cbr i1 %271(prob = 0.5), ^while.header6, ^b15;
  ^entry15:
    i32 %272 = phi [^while.header5, i32 %258] [^entry16, i32 %285];
    i32 %273 = phi [^while.header5, i32 %259] [^entry16, i32 %283];
    i32 %274 = add i32 %273, i32 1;
    i32* %275 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %274];
    store i32* %275 with i32 47;
    ubr ^b14;
  ^b15:
    i32 %276 = phi [^b14, i32 %270] [^entry17, i32 %299];
    i32 %277 = phi [^b14, i32 %269] [^entry17, i32 %297];
    i32* %278 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %277];
    store i32* %278 with i32 32;
    i32 %279 = add i32 %277, i32 1;
    i32 %280 = add i32 %18, i32 1;
    ubr ^while.header;
  ^entry16:
    i32* %281 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %258];
    store i32* %281 with i32 32;
    i32* %282 = getelementptr &(i32* %281)[i64 1];
    store i32* %282 with i32 %261;
    i32 %283 = add i32 %259, i32 -1;
    i1 %284 = icmp eq i32 %283, i32 0;
    i32 %285 = add i32 %258, i32 2;
    cbr i1 %284(prob = 0.5), ^entry15, ^while.header5;
  ^while.header6:
    i32 %286 = phi [^b14, i32 %269] [^entry18, i32 %305];
    i32 %287 = phi [^b14, i32 %270] [^entry18, i32 %303];
    i32* %288 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %287];
    i32 %289 = load i32* %288;
    i1 %290 = icmp eq i32 %289, i32 42;
    i1 %291 = icmp eq i32 %289, i32 47;
    i1 %292 = or i1 %290, i1 %291;
    i1 %293 = icmp eq i32 %289, i32 37;
    i1 %294 = or i1 %292, i1 %293;
    i1 %295 = icmp eq i32 %289, i32 94;
    i1 %296 = or i1 %294, i1 %295;
    cbr i1 %296(prob = 0.97), ^entry18, ^entry17;
  ^entry17:
    i32 %297 = phi [^while.header6, i32 %286] [^entry18, i32 %305];
    i32 %298 = phi [^while.header6, i32 %287] [^entry18, i32 %303];
    i32 %299 = add i32 %298, i32 1;
    i32* %300 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %299];
    store i32* %300 with i32 37;
    ubr ^b15;
  ^entry18:
    i32* %301 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %286];
    store i32* %301 with i32 32;
    i32* %302 = getelementptr &(i32* %301)[i64 1];
    store i32* %302 with i32 %289;
    i32 %303 = add i32 %287, i32 -1;
    i1 %304 = icmp eq i32 %303, i32 0;
    i32 %305 = add i32 %286, i32 2;
    cbr i1 %304(prob = 0.5), ^entry17, ^while.header6;
}
