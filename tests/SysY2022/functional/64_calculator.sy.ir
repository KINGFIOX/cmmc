internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [10000 * i32]* @ints, align 8 { Flexible };
internal [10000 * i32]* @chas, align 8 { Flexible };
internal [10000 * i32]* @get, align 8 { Flexible };
internal [10000 * i32]* @get2, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = icmp neq i32 %0, i32 13;
    i1 %2 = icmp neq i32 %0, i32 10;
    i1 %3 = and i1 %1, i1 %2;
    [10000 * i32]* %4 = ptrcast [10000 * i32]* @get to [10000 * i32]*;
    i32* %5 = getelementptr &([10000 * i32]* %4)[i64 0][i64 0];
    cbr i1 %3(prob = 0.984615), ^while.body, ^b;
  ^b:
    i32 %6 = phi [^entry, i32 0] [^while.body, i32 %16];
    [10000 * i32]* %7 = ptrcast [10000 * i32]* @get2 to [10000 * i32]*;
    [10000 * i32]* %8 = ptrcast [10000 * i32]* @chas to [10000 * i32]*;
    ubr ^while.header;
  ^while.body:
    i32 %9 = phi [^entry, i32 %0] [^while.body, i32 %12];
    i32 %10 = phi [^entry, i32 0] [^while.body, i32 %16];
    i32* %11 = getelementptr &(i32* %5)[i32 %10];
    store i32* %11 with i32 %9;
    i32 %12 = call () -> i32 @getch();
    i1 %13 = icmp neq i32 %12, i32 13;
    i1 %14 = icmp neq i32 %12, i32 10;
    i1 %15 = and i1 %13, i1 %14;
    i32 %16 = add i32 %10, i32 1;
    cbr i1 %15(prob = 0.984615), ^while.body, ^b;
  ^while.header:
    i32 %17 = phi [^b, i32 0] [^if.then, i32 %17] [^b18, i32 %259];
    i32 %18 = phi [^b, i32 0] [^if.then, i32 %25] [^b18, i32 %25];
    i32 %19 = phi [^b, i32 1] [^if.then, i32 %28] [^b18, i32 %262];
    i1 %20 = icmp sgt i32 %6, i32 %18;
    cbr i1 %20(prob = 0.984615), ^while.body1, ^indirect;
  ^while.body1:
    i32* %21 = getelementptr &([10000 * i32]* %4)[i64 0][i32 %18];
    i32 %22 = load i32* %21;
    i32 %23 = add i32 %22, i32 -48;
    i1 %24 = icmp ult i32 %23, i32 10;
    i32 %25 = add i32 %18, i32 1;
    cbr i1 %24(prob = 0.5), ^if.then, ^if.else;
  ^indirect:
    i1 %26 = icmp sgt i32 %17, i32 0;
    cbr i1 %26(prob = 0.984615), ^super.header, ^b1;
  ^if.then:
    i32* %27 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %19];
    store i32* %27 with i32 %22;
    i32 %28 = add i32 %19, i32 1;
    ubr ^while.header;
  ^if.else:
    i1 %29 = icmp eq i32 %22, i32 40;
    cbr i1 %29(prob = 0.5), ^if.then1, ^b2;
  ^super.header:
    i32 %30 = add i32 %17, i32 -3;
    i1 %31 = icmp sgt i32 %30, i32 0;
    cbr i1 %31(prob = 0.941176), ^while.body2, ^scalar.header;
  ^b1:
    i32 %32 = phi [^indirect, i32 %19] [^scalar.header, i32 %63] [^while.body4, i32 %94];
    i32* %33 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %32];
    store i32* %33 with i32 64;
    i32* %34 = getelementptr &([10000 * i32]* %7)[i64 0][i64 1];
    i32 %35 = load i32* %34;
    i1 %36 = icmp neq i32 %35, i32 64;
    [10000 * i32]* %37 = ptrcast [10000 * i32]* @ints to [10000 * i32]*;
    cbr i1 %36(prob = 0.984615), ^while.body3, ^b3;
  ^if.then1:
    i32 %38 = add i32 %17, i32 1;
    i32* %39 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %38];
    store i32* %39 with i32 40;
    ubr ^b2;
  ^while.body2:
    i32 %40 = phi [^super.header, i32 %19] [^while.body2, i32 %60];
    i32 %41 = phi [^super.header, i32 %17] [^while.body2, i32 %58];
    i32* %42 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %41];
    i32 %43 = load i32* %42;
    i32* %44 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %40];
    store i32* %44 with i32 32;
    i32* %45 = getelementptr &(i32* %44)[i64 1];
    store i32* %45 with i32 %43;
    i32* %46 = getelementptr &(i32* %42)[i64 -1];
    i32 %47 = load i32* %46;
    i32* %48 = getelementptr &(i32* %44)[i64 2];
    store i32* %48 with i32 32;
    i32* %49 = getelementptr &(i32* %44)[i64 3];
    store i32* %49 with i32 %47;
    i32* %50 = getelementptr &(i32* %42)[i64 -2];
    i32 %51 = load i32* %50;
    i32* %52 = getelementptr &(i32* %44)[i64 4];
    store i32* %52 with i32 32;
    i32* %53 = getelementptr &(i32* %44)[i64 5];
    store i32* %53 with i32 %51;
    i32* %54 = getelementptr &(i32* %42)[i64 -3];
    i32 %55 = load i32* %54;
    i32* %56 = getelementptr &(i32* %44)[i64 6];
    store i32* %56 with i32 32;
    i32* %57 = getelementptr &(i32* %44)[i64 7];
    store i32* %57 with i32 %55;
    i32 %58 = add i32 %41, i32 -4;
    i1 %59 = icmp sgt i32 %58, i32 3;
    i32 %60 = add i32 %40, i32 8;
    cbr i1 %59(prob = 0.941176), ^while.body2, ^scalar.header;
  ^scalar.header:
    i32 %61 = phi [^super.header, i32 %19] [^while.body2, i32 %60];
    i32 %62 = phi [^super.header, i32 %17] [^while.body2, i32 %58];
    i32 %63 = phi [^super.header, i32 undef] [^while.body2, i32 %60];
    i1 %64 = icmp sgt i32 %62, i32 0;
    cbr i1 %64(prob = 0.75), ^while.body4, ^b1;
  ^b2:
    i32 %65 = phi [^if.else, i32 %17] [^if.then1, i32 %38];
    i1 %66 = icmp eq i32 %22, i32 94;
    cbr i1 %66(prob = 0.5), ^if.then2, ^b4;
  ^while.body3:
    i32 %67 = phi [^b1, i32 0] [^while.header2, i32 %164];
    i32 %68 = phi [^b1, i32 1] [^while.header2, i32 %165];
    i32* %69 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %68];
    i32 %70 = load i32* %69;
    i1 %71 = icmp eq i32 %70, i32 43;
    i1 %72 = icmp eq i32 %70, i32 45;
    i1 %73 = or i1 %71, i1 %72;
    i1 %74 = icmp eq i32 %70, i32 42;
    i1 %75 = icmp eq i32 %70, i32 47;
    i1 %76 = or i1 %74, i1 %75;
    i1 %77 = or i1 %73, i1 %76;
    i1 %78 = icmp eq i32 %70, i32 37;
    i1 %79 = icmp eq i32 %70, i32 94;
    i1 %80 = or i1 %78, i1 %79;
    i1 %81 = or i1 %77, i1 %80;
    cbr i1 %81(prob = 0.984375), ^if.then3, ^if.else1;
  ^b3:
    i32* %82 = getelementptr &([10000 * i32]* %37)[i64 0][i64 1];
    i32 %83 = load i32* %82;
    call (i32) -> void @putint(i32 %83);
    ret i32 0;
  ^if.then2:
    i32 %84 = add i32 %65, i32 1;
    i32* %85 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %84];
    store i32* %85 with i32 94;
    ubr ^b4;
  ^while.body4 {scalar}:
    i32 %86 = phi [^scalar.header, i32 %62] [^while.body4, i32 %92];
    i32 %87 = phi [^scalar.header, i32 %61] [^while.body4, i32 %94];
    i32* %88 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %86];
    i32 %89 = load i32* %88;
    i32* %90 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %87];
    store i32* %90 with i32 32;
    i32* %91 = getelementptr &(i32* %90)[i64 1];
    store i32* %91 with i32 %89;
    i32 %92 = add i32 %86, i32 -1;
    i1 %93 = icmp sgt i32 %92, i32 0;
    i32 %94 = add i32 %87, i32 2;
    cbr i1 %93(prob = 0.75), ^while.body4, ^b1;
  ^if.then3:
    i32* %95 = getelementptr &([10000 * i32]* %37)[i64 0][i32 %67];
    i32 %96 = load i32* %95;
    i32* %97 = getelementptr &(i32* %95)[i64 -1];
    i32 %98 = load i32* %97;
    i32 %99 = add i32 %96, i32 %98;
    i32 %100 = select i1 %71 ? i32 %99 : i32 0;
    i32 %101 = sub i32 %98, i32 %96;
    i32 %102 = select i1 %72 ? i32 %101 : i32 %100;
    i32 %103 = mul i32 %96, i32 %98;
    i32 %104 = select i1 %74 ? i32 %103 : i32 %102;
    cbr i1 %75(prob = 0.5), ^if.then4, ^b5;
  ^b4:
    i32 %105 = phi [^b2, i32 %65] [^if.then2, i32 %84];
    i1 %106 = icmp eq i32 %22, i32 41;
    cbr i1 %106(prob = 0.5), ^if.then5, ^b6;
  ^if.else1:
    i1 %107 = icmp neq i32 %70, i32 32;
    cbr i1 %107(prob = 0.5), ^if.then6, ^indirect1;
  ^if.then4:
    i32 %108 = sdiv i32 %98, i32 %96;
    ubr ^b5;
  ^indirect1:
    i32 %109 = phi [^if.else1, i32 %67] [^b10, i32 %174];
    i32 %110 = add i32 %68, i32 1;
    ubr ^while.header2;
  ^if.then5:
    i32* %111 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %105];
    i32 %112 = load i32* %111;
    i1 %113 = icmp neq i32 %112, i32 40;
    i32 %114 = add i32 %105, i32 -1;
    cbr i1 %113(prob = 0.984615), ^while.body5, ^b6;
  ^if.then6:
    i32 %115 = add i32 %67, i32 1;
    i32* %116 = getelementptr &([10000 * i32]* %37)[i64 0][i32 %115];
    i32 %117 = add i32 %70, i32 -48;
    store i32* %116 with i32 %117;
    i32* %118 = getelementptr &(i32* %69)[i64 1];
    i32 %119 = load i32* %118;
    i1 %120 = icmp neq i32 %119, i32 32;
    cbr i1 %120(prob = 0.984615), ^while.body6, ^b7;
  ^b5:
    i32 %121 = phi [^if.then3, i32 %104] [^if.then4, i32 %108];
    cbr i1 %78(prob = 0.5), ^if.then7, ^b8;
  ^b6:
    i32 %122 = phi [^b4, i32 %19] [^if.then5, i32 %19] [^while.body5, i32 %136];
    i32 %123 = phi [^b4, i32 %105] [^if.then5, i32 %114] [^while.body5, i32 %137];
    i1 %124 = icmp eq i32 %22, i32 43;
    cbr i1 %124(prob = 0.5), ^while.header1, ^b9;
  ^if.then7:
    i32 %125 = srem i32 %98, i32 %96;
    ubr ^b8;
  ^b7:
    i32 %126 = phi [^if.then6, i32 1] [^while.body6, i32 %148];
    i32 %127 = add i32 %68, i32 %126;
    ubr ^while.header2;
  ^while.body5:
    i32 %128 = phi [^if.then5, i32 %114] [^while.body5, i32 %137];
    i32 %129 = phi [^if.then5, i32 %19] [^while.body5, i32 %136];
    i32 %130 = phi [^if.then5, i32 %112] [^while.body5, i32 %134];
    i32* %131 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %129];
    store i32* %131 with i32 32;
    i32* %132 = getelementptr &(i32* %131)[i64 1];
    store i32* %132 with i32 %130;
    i32* %133 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %128];
    i32 %134 = load i32* %133;
    i1 %135 = icmp neq i32 %134, i32 40;
    i32 %136 = add i32 %129, i32 2;
    i32 %137 = add i32 %128, i32 -1;
    cbr i1 %135(prob = 0.984615), ^while.body5, ^b6;
  ^while.body6:
    i32 %138 = phi [^if.then6, i32 %117] [^while.body6, i32 %144];
    i32 %139 = phi [^if.then6, i32 1] [^while.body6, i32 %148];
    i32* %140 = getelementptr &(i32* %69)[i32 %139];
    i32 %141 = load i32* %140;
    i32 %142 = mul i32 %138, i32 10;
    i32 %143 = add i32 %142, i32 -48;
    i32 %144 = add i32 %141, i32 %143;
    store i32* %116 with i32 %144;
    i32* %145 = getelementptr &(i32* %140)[i64 1];
    i32 %146 = load i32* %145;
    i1 %147 = icmp neq i32 %146, i32 32;
    i32 %148 = add i32 %139, i32 1;
    cbr i1 %147(prob = 0.984615), ^while.body6, ^b7;
  ^while.header1:
    i32 %149 = phi [^b6, i32 %122] [^while.body7, i32 %184];
    i32 %150 = phi [^b6, i32 %123] [^while.body7, i32 %182];
    i32* %151 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %150];
    i32 %152 = load i32* %151;
    i1 %153 = icmp eq i32 %152, i32 43;
    i1 %154 = icmp eq i32 %152, i32 45;
    i1 %155 = or i1 %153, i1 %154;
    i1 %156 = icmp eq i32 %152, i32 42;
    i1 %157 = icmp eq i32 %152, i32 47;
    i1 %158 = or i1 %156, i1 %157;
    i1 %159 = or i1 %155, i1 %158;
    i1 %160 = icmp eq i32 %152, i32 37;
    i1 %161 = icmp eq i32 %152, i32 94;
    i1 %162 = or i1 %160, i1 %161;
    i1 %163 = or i1 %159, i1 %162;
    cbr i1 %163(prob = 0.999519), ^while.body7, ^b11;
  ^while.header2:
    i32 %164 = phi [^indirect1, i32 %109] [^b7, i32 %115];
    i32 %165 = phi [^indirect1, i32 %110] [^b7, i32 %127];
    i32* %166 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %165];
    i32 %167 = load i32* %166;
    i1 %168 = icmp neq i32 %167, i32 64;
    cbr i1 %168(prob = 0.984615), ^while.body3, ^b3;
  ^b8:
    i32 %169 = phi [^b5, i32 %121] [^if.then7, i32 %125];
    cbr i1 %79(prob = 0.5), ^if.then8, ^b10;
  ^b9:
    i32 %170 = phi [^b6, i32 %122] [^b11, i32 %176];
    i32 %171 = phi [^b6, i32 %123] [^b11, i32 %178];
    i1 %172 = icmp eq i32 %22, i32 45;
    cbr i1 %172(prob = 0.5), ^while.header3, ^b12;
  ^b10:
    i32 %173 = phi [^b8, i32 %169] [^if.then8, i32 1] [^while.body8, i32 %206];
    i32 %174 = add i32 %67, i32 -1;
    i32* %175 = getelementptr &([10000 * i32]* %37)[i64 0][i32 %174];
    store i32* %175 with i32 %173;
    ubr ^indirect1;
  ^b11:
    i32 %176 = phi [^while.header1, i32 %149] [^while.body7, i32 %184];
    i32 %177 = phi [^while.header1, i32 %150] [^while.body7, i32 %182];
    i32 %178 = add i32 %177, i32 1;
    i32* %179 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %178];
    store i32* %179 with i32 43;
    ubr ^b9;
  ^while.body7:
    i32* %180 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %149];
    store i32* %180 with i32 32;
    i32* %181 = getelementptr &(i32* %180)[i64 1];
    store i32* %181 with i32 %152;
    i32 %182 = add i32 %150, i32 -1;
    i1 %183 = icmp neq i32 %182, i32 0;
    i32 %184 = add i32 %149, i32 2;
    cbr i1 %183(prob = 0.5), ^while.header1, ^b11;
  ^if.then8:
    i1 %185 = icmp neq i32 %96, i32 0;
    cbr i1 %185(prob = 0.984615), ^while.body8, ^b10;
  ^while.header3:
    i32 %186 = phi [^b9, i32 %170] [^while.body9, i32 %217];
    i32 %187 = phi [^b9, i32 %171] [^while.body9, i32 %215];
    i32* %188 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %187];
    i32 %189 = load i32* %188;
    i1 %190 = icmp eq i32 %189, i32 43;
    i1 %191 = icmp eq i32 %189, i32 45;
    i1 %192 = or i1 %190, i1 %191;
    i1 %193 = icmp eq i32 %189, i32 42;
    i1 %194 = icmp eq i32 %189, i32 47;
    i1 %195 = or i1 %193, i1 %194;
    i1 %196 = or i1 %192, i1 %195;
    i1 %197 = icmp eq i32 %189, i32 37;
    i1 %198 = icmp eq i32 %189, i32 94;
    i1 %199 = or i1 %197, i1 %198;
    i1 %200 = or i1 %196, i1 %199;
    cbr i1 %200(prob = 0.999519), ^while.body9, ^b13;
  ^b12:
    i32 %201 = phi [^b9, i32 %170] [^b13, i32 %209];
    i32 %202 = phi [^b9, i32 %171] [^b13, i32 %211];
    i1 %203 = icmp eq i32 %22, i32 42;
    cbr i1 %203(prob = 0.5), ^while.header4, ^b14;
  ^while.body8:
    i32 %204 = phi [^if.then8, i32 %96] [^while.body8, i32 %207];
    i32 %205 = phi [^if.then8, i32 1] [^while.body8, i32 %206];
    i32 %206 = mul i32 %98, i32 %205;
    i32 %207 = add i32 %204, i32 -1;
    i1 %208 = icmp neq i32 %207, i32 0;
    cbr i1 %208(prob = 0.984615), ^while.body8, ^b10;
  ^b13:
    i32 %209 = phi [^while.header3, i32 %186] [^while.body9, i32 %217];
    i32 %210 = phi [^while.header3, i32 %187] [^while.body9, i32 %215];
    i32 %211 = add i32 %210, i32 1;
    i32* %212 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %211];
    store i32* %212 with i32 45;
    ubr ^b12;
  ^while.body9:
    i32* %213 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %186];
    store i32* %213 with i32 32;
    i32* %214 = getelementptr &(i32* %213)[i64 1];
    store i32* %214 with i32 %189;
    i32 %215 = add i32 %187, i32 -1;
    i1 %216 = icmp neq i32 %215, i32 0;
    i32 %217 = add i32 %186, i32 2;
    cbr i1 %216(prob = 0.5), ^while.header3, ^b13;
  ^while.header4:
    i32 %218 = phi [^b12, i32 %201] [^while.body10, i32 %240];
    i32 %219 = phi [^b12, i32 %202] [^while.body10, i32 %238];
    i32* %220 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %219];
    i32 %221 = load i32* %220;
    i1 %222 = icmp eq i32 %221, i32 42;
    i1 %223 = icmp eq i32 %221, i32 47;
    i1 %224 = or i1 %222, i1 %223;
    i1 %225 = icmp eq i32 %221, i32 37;
    i1 %226 = icmp eq i32 %221, i32 94;
    i1 %227 = or i1 %225, i1 %226;
    i1 %228 = or i1 %224, i1 %227;
    cbr i1 %228(prob = 0.998077), ^while.body10, ^b15;
  ^b14:
    i32 %229 = phi [^b12, i32 %201] [^b15, i32 %232];
    i32 %230 = phi [^b12, i32 %202] [^b15, i32 %234];
    i1 %231 = icmp eq i32 %22, i32 47;
    cbr i1 %231(prob = 0.5), ^while.header5, ^b16;
  ^b15:
    i32 %232 = phi [^while.header4, i32 %218] [^while.body10, i32 %240];
    i32 %233 = phi [^while.header4, i32 %219] [^while.body10, i32 %238];
    i32 %234 = add i32 %233, i32 1;
    i32* %235 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %234];
    store i32* %235 with i32 42;
    ubr ^b14;
  ^while.body10:
    i32* %236 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %218];
    store i32* %236 with i32 32;
    i32* %237 = getelementptr &(i32* %236)[i64 1];
    store i32* %237 with i32 %221;
    i32 %238 = add i32 %219, i32 -1;
    i1 %239 = icmp neq i32 %238, i32 0;
    i32 %240 = add i32 %218, i32 2;
    cbr i1 %239(prob = 0.5), ^while.header4, ^b15;
  ^while.header5:
    i32 %241 = phi [^b14, i32 %229] [^while.body11, i32 %267];
    i32 %242 = phi [^b14, i32 %230] [^while.body11, i32 %265];
    i32* %243 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %242];
    i32 %244 = load i32* %243;
    i1 %245 = icmp eq i32 %244, i32 42;
    i1 %246 = icmp eq i32 %244, i32 47;
    i1 %247 = or i1 %245, i1 %246;
    i1 %248 = icmp eq i32 %244, i32 37;
    i1 %249 = icmp eq i32 %244, i32 94;
    i1 %250 = or i1 %248, i1 %249;
    i1 %251 = or i1 %247, i1 %250;
    cbr i1 %251(prob = 0.998077), ^while.body11, ^b17;
  ^b16:
    i32 %252 = phi [^b14, i32 %229] [^b17, i32 %255];
    i32 %253 = phi [^b14, i32 %230] [^b17, i32 %257];
    i1 %254 = icmp eq i32 %22, i32 37;
    cbr i1 %254(prob = 0.5), ^while.header6, ^b18;
  ^b17:
    i32 %255 = phi [^while.header5, i32 %241] [^while.body11, i32 %267];
    i32 %256 = phi [^while.header5, i32 %242] [^while.body11, i32 %265];
    i32 %257 = add i32 %256, i32 1;
    i32* %258 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %257];
    store i32* %258 with i32 47;
    ubr ^b16;
  ^b18:
    i32 %259 = phi [^b16, i32 %253] [^b19, i32 %281];
    i32 %260 = phi [^b16, i32 %252] [^b19, i32 %279];
    i32* %261 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %260];
    store i32* %261 with i32 32;
    i32 %262 = add i32 %260, i32 1;
    ubr ^while.header;
  ^while.body11:
    i32* %263 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %241];
    store i32* %263 with i32 32;
    i32* %264 = getelementptr &(i32* %263)[i64 1];
    store i32* %264 with i32 %244;
    i32 %265 = add i32 %242, i32 -1;
    i1 %266 = icmp neq i32 %265, i32 0;
    i32 %267 = add i32 %241, i32 2;
    cbr i1 %266(prob = 0.5), ^while.header5, ^b17;
  ^while.header6:
    i32 %268 = phi [^b16, i32 %252] [^while.body12, i32 %287];
    i32 %269 = phi [^b16, i32 %253] [^while.body12, i32 %285];
    i32* %270 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %269];
    i32 %271 = load i32* %270;
    i1 %272 = icmp eq i32 %271, i32 42;
    i1 %273 = icmp eq i32 %271, i32 47;
    i1 %274 = or i1 %272, i1 %273;
    i1 %275 = icmp eq i32 %271, i32 37;
    i1 %276 = icmp eq i32 %271, i32 94;
    i1 %277 = or i1 %275, i1 %276;
    i1 %278 = or i1 %274, i1 %277;
    cbr i1 %278(prob = 0.998077), ^while.body12, ^b19;
  ^b19:
    i32 %279 = phi [^while.header6, i32 %268] [^while.body12, i32 %287];
    i32 %280 = phi [^while.header6, i32 %269] [^while.body12, i32 %285];
    i32 %281 = add i32 %280, i32 1;
    i32* %282 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %281];
    store i32* %282 with i32 37;
    ubr ^b18;
  ^while.body12:
    i32* %283 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %268];
    store i32* %283 with i32 32;
    i32* %284 = getelementptr &(i32* %283)[i64 1];
    store i32* %284 with i32 %271;
    i32 %285 = add i32 %269, i32 -1;
    i1 %286 = icmp neq i32 %285, i32 0;
    i32 %287 = add i32 %268, i32 2;
    cbr i1 %286(prob = 0.5), ^while.header6, ^b19;
}
