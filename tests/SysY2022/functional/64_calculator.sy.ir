internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal [10000 * i32]* @ints;
internal [10000 * i32]* @chas;
internal [10000 * i32]* @get;
internal [10000 * i32]* @get2;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %0 = getelementptr &([10000 * i32]* @get)[i64 0][i64 0];
    i32 %1 = call () -> i32 @getch();
    i1 %2 = scmp neq i32 %1, i32 13;
    i1 %3 = scmp neq i32 %1, i32 10;
    i1 %4 = and i1 %2, i1 %3;
    cbr i1 %4(prob = 0.48), ^while.body, ^b;
^while.body:
    i32 %5 = phi [^entry, i32 0] [^b2, i32 %8];
    i32 %6 = phi [^entry, i32 %1] [^b2, i32 %9];
    i32* %7 = getelementptr &(i32* %0)[i32 %5];
    store i32* %7 with i32 %6;
    i32 %8 = add i32 %5, i32 1;
    i32 %9 = call () -> i32 @getch();
    i1 %10 = scmp neq i32 %9, i32 13;
    cbr i1 %10(prob = 0.5), ^b1, ^b2;
^b:
    i32 %11 = phi [^entry, i32 0] [^b2, i32 %8];
    i1 %12 = scmp gt i32 %11, i32 0;
    cbr i1 %12(prob = 0.97), ^while.body1, ^while.guard;
^b1:
    i1 %13 = scmp neq i32 %9, i32 10;
    ubr ^b2;
^b2:
    i1 %14 = phi [^while.body, i1 false] [^b1, i1 %13];
    cbr i1 %14(prob = 0.97), ^while.body, ^b;
^while.body1:
    i32 %15 = phi [^b, i32 0] [^b7, i32 %124];
    i32 %16 = phi [^b, i32 0] [^b7, i32 %125];
    i32 %17 = phi [^b, i32 0] [^b7, i32 %130];
    i32 %18 = phi [^b, i32 1] [^b7, i32 %126];
    i32 %19 = phi [^b, i32 %11] [^b7, i32 %127];
    i32 %20 = phi [^b, i32 %11] [^b7, i32 %128];
    i32* %21 = getelementptr &([10000 * i32]* @get)[i64 0][i32 %17];
    i32 %22 = load i32* %21;
    i1 %23 = scmp gt i32 %22, i32 47;
    cbr i1 %23(prob = 0.5), ^b3, ^b4;
^while.guard:
    i32 %24 = phi [^b, i32 0] [^b7, i32 %124];
    i32 %25 = phi [^b, i32 0] [^b7, i32 %125];
    i32 %26 = phi [^b, i32 1] [^b7, i32 %126];
    i1 %27 = scmp gt i32 %25, i32 0;
    cbr i1 %27(prob = 0.97), ^super.header, ^b5;
^b3:
    i1 %28 = scmp lt i32 %22, i32 58;
    cbr i1 %28(prob = 0.5), ^b4, ^if.else;
^b4:
    i32 %29 = phi [^while.body1, i32 0] [^b3, i32 1];
    i1 %30 = scmp eq i32 %29, i32 1;
    cbr i1 %30(prob = 0.5), ^if.then, ^if.else;
^super.header:
    i32 %31 = phi [^while.guard, i32 %26] [^entry1, i32 %107];
    i32 %32 = phi [^while.guard, i32 %25] [^entry1, i32 %33];
    i32 %33 = add i32 %32, i32 -16;
    i1 %34 = scmp gt i32 %33, i32 0;
    cbr i1 %34(prob = 0.67), ^entry1, ^entry2;
^b5:
    i32 %35 = phi [^while.guard, i32 %26] [^entry2, i32 %117];
    i32* %36 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %35];
    store i32* %36 with i32 64;
    i32* %37 = getelementptr &([10000 * i32]* @get2)[i64 0][i64 1];
    i32 %38 = load i32* %37;
    i1 %39 = scmp neq i32 %38, i32 64;
    cbr i1 %39(prob = 0.97), ^while.body2, ^b6;
^if.then:
    i32* %40 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %18];
    i32 %41 = load i32* %21;
    store i32* %40 with i32 %41;
    i32 %42 = add i32 %18, i32 1;
    ubr ^b7;
^entry1:
    i32* %43 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %32];
    i32 %44 = load i32* %43;
    i32* %45 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %31];
    store i32* %45 with i32 32;
    i32* %46 = getelementptr &(i32* %45)[i64 1];
    store i32* %46 with i32 %44;
    i32* %47 = getelementptr &(i32* %43)[i64 -1];
    i32 %48 = load i32* %47;
    i32* %49 = getelementptr &(i32* %45)[i64 2];
    store i32* %49 with i32 32;
    i32* %50 = getelementptr &(i32* %45)[i64 3];
    store i32* %50 with i32 %48;
    i32* %51 = getelementptr &(i32* %43)[i64 -2];
    i32 %52 = load i32* %51;
    i32* %53 = getelementptr &(i32* %45)[i64 4];
    store i32* %53 with i32 32;
    i32* %54 = getelementptr &(i32* %45)[i64 5];
    store i32* %54 with i32 %52;
    i32* %55 = getelementptr &(i32* %43)[i64 -3];
    i32 %56 = load i32* %55;
    i32* %57 = getelementptr &(i32* %45)[i64 6];
    store i32* %57 with i32 32;
    i32* %58 = getelementptr &(i32* %45)[i64 7];
    store i32* %58 with i32 %56;
    i32* %59 = getelementptr &(i32* %43)[i64 -4];
    i32 %60 = load i32* %59;
    i32* %61 = getelementptr &(i32* %45)[i64 8];
    store i32* %61 with i32 32;
    i32* %62 = getelementptr &(i32* %45)[i64 9];
    store i32* %62 with i32 %60;
    i32* %63 = getelementptr &(i32* %43)[i64 -5];
    i32 %64 = load i32* %63;
    i32* %65 = getelementptr &(i32* %45)[i64 10];
    store i32* %65 with i32 32;
    i32* %66 = getelementptr &(i32* %45)[i64 11];
    store i32* %66 with i32 %64;
    i32* %67 = getelementptr &(i32* %43)[i64 -6];
    i32 %68 = load i32* %67;
    i32* %69 = getelementptr &(i32* %45)[i64 12];
    store i32* %69 with i32 32;
    i32* %70 = getelementptr &(i32* %45)[i64 13];
    store i32* %70 with i32 %68;
    i32* %71 = getelementptr &(i32* %43)[i64 -7];
    i32 %72 = load i32* %71;
    i32* %73 = getelementptr &(i32* %45)[i64 14];
    store i32* %73 with i32 32;
    i32* %74 = getelementptr &(i32* %45)[i64 15];
    store i32* %74 with i32 %72;
    i32* %75 = getelementptr &(i32* %43)[i64 -8];
    i32 %76 = load i32* %75;
    i32* %77 = getelementptr &(i32* %45)[i64 16];
    store i32* %77 with i32 32;
    i32* %78 = getelementptr &(i32* %45)[i64 17];
    store i32* %78 with i32 %76;
    i32* %79 = getelementptr &(i32* %43)[i64 -9];
    i32 %80 = load i32* %79;
    i32* %81 = getelementptr &(i32* %45)[i64 18];
    store i32* %81 with i32 32;
    i32* %82 = getelementptr &(i32* %45)[i64 19];
    store i32* %82 with i32 %80;
    i32* %83 = getelementptr &(i32* %43)[i64 -10];
    i32 %84 = load i32* %83;
    i32* %85 = getelementptr &(i32* %45)[i64 20];
    store i32* %85 with i32 32;
    i32* %86 = getelementptr &(i32* %45)[i64 21];
    store i32* %86 with i32 %84;
    i32* %87 = getelementptr &(i32* %43)[i64 -11];
    i32 %88 = load i32* %87;
    i32* %89 = getelementptr &(i32* %45)[i64 22];
    store i32* %89 with i32 32;
    i32* %90 = getelementptr &(i32* %45)[i64 23];
    store i32* %90 with i32 %88;
    i32* %91 = getelementptr &(i32* %43)[i64 -12];
    i32 %92 = load i32* %91;
    i32* %93 = getelementptr &(i32* %45)[i64 24];
    store i32* %93 with i32 32;
    i32* %94 = getelementptr &(i32* %45)[i64 25];
    store i32* %94 with i32 %92;
    i32* %95 = getelementptr &(i32* %43)[i64 -13];
    i32 %96 = load i32* %95;
    i32* %97 = getelementptr &(i32* %45)[i64 26];
    store i32* %97 with i32 32;
    i32* %98 = getelementptr &(i32* %45)[i64 27];
    store i32* %98 with i32 %96;
    i32* %99 = getelementptr &(i32* %43)[i64 -14];
    i32 %100 = load i32* %99;
    i32* %101 = getelementptr &(i32* %45)[i64 28];
    store i32* %101 with i32 32;
    i32* %102 = getelementptr &(i32* %45)[i64 29];
    store i32* %102 with i32 %100;
    i32* %103 = getelementptr &(i32* %43)[i64 -15];
    i32 %104 = load i32* %103;
    i32* %105 = getelementptr &(i32* %45)[i64 30];
    store i32* %105 with i32 32;
    i32* %106 = getelementptr &(i32* %45)[i64 31];
    store i32* %106 with i32 %104;
    i32 %107 = add i32 %31, i32 32;
    ubr ^super.header;
^if.else:
    i32 %108 = load i32* %21;
    i1 %109 = scmp eq i32 %108, i32 40;
    cbr i1 %109(prob = 0.5), ^entry3, ^b9;
^entry2:
    i32 %110 = phi [^super.header, i32 %31] [^entry2, i32 %117];
    i32 %111 = phi [^super.header, i32 %32] [^entry2, i32 %112];
    i32 %112 = add i32 %111, i32 -1;
    i32* %113 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %111];
    i32 %114 = load i32* %113;
    i32* %115 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %110];
    store i32* %115 with i32 32;
    i32* %116 = getelementptr &(i32* %115)[i64 1];
    store i32* %116 with i32 %114;
    i32 %117 = add i32 %110, i32 2;
    i1 %118 = scmp gt i32 %112, i32 0;
    cbr i1 %118(prob = 0.97), ^entry2, ^b5;
^while.body2:
    i1 %119 = scmp eq i32 %38, i32 43;
    cbr i1 %119(prob = 0.5), ^entry4, ^b8;
^b6:
    i32* %120 = getelementptr &([10000 * i32]* @ints)[i64 0][i64 1];
    i32 %121 = load i32* %120;
    call (i32) -> void @putint(i32 %121);
    ret i32 0;
^entry3:
    i32 %122 = add i32 %16, i32 1;
    i32* %123 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %122];
    store i32* %123 with i32 40;
    ubr ^b9;
^b7:
    i32 %124 = phi [^if.then, i32 %15] [^b36, i32 %247];
    i32 %125 = phi [^if.then, i32 %16] [^b36, i32 %379];
    i32 %126 = phi [^if.then, i32 %42] [^b36, i32 %383];
    i32 %127 = phi [^if.then, i32 %19] [^b36, i32 %251];
    i32 %128 = phi [^if.then, i32 %20] [^b36, i32 %381];
    i32 %129 = phi [^if.then, i32 %17] [^b36, i32 %249];
    i32 %130 = add i32 %129, i32 1;
    i1 %131 = scmp lt i32 %130, i32 %128;
    cbr i1 %131(prob = 0.97), ^while.body1, ^while.guard;
^b8:
    i32 %132 = phi [^while.body2, i32 %24] [^while.body6, i32 %405];
    i32 %133 = phi [^while.body2, i32 1] [^while.body6, i32 %407];
    i32* %134 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %133];
    i32 %135 = load i32* %134;
    i1 %136 = scmp eq i32 %135, i32 45;
    ubr ^b11;
^b9:
    i32 %137 = phi [^if.else, i32 %16] [^entry3, i32 %122];
    i32 %138 = phi [^if.else, i32 %20] [^entry3, i32 %19];
    i1 %139 = scmp eq i32 %108, i32 94;
    cbr i1 %139(prob = 0.5), ^entry5, ^b10;
^entry4:
    i32 %140 = phi [^while.body2, i32 %24] [^b27, i32 %156];
    i32 %141 = phi [^while.body2, i32 1] [^b27, i32 %157];
    i32* %142 = getelementptr &([10000 * i32]* @ints)[i64 0][i32 %140];
    i32 %143 = load i32* %142;
    i32* %144 = getelementptr &(i32* %142)[i64 -1];
    i32 %145 = load i32* %144;
    i32* %146 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %141];
    i32 %147 = load i32* %146;
    i1 %148 = scmp eq i32 %147, i32 43;
    cbr i1 %148(prob = 0.5), ^if.then1, ^b12;
^entry5:
    i32 %149 = add i32 %137, i32 1;
    i32* %150 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %149];
    store i32* %150 with i32 94;
    ubr ^b10;
^if.then1:
    i32 %151 = add i32 %143, i32 %145;
    ubr ^b12;
^b10:
    i32 %152 = phi [^b9, i32 %137] [^entry5, i32 %149];
    i32 %153 = phi [^b9, i32 %138] [^entry5, i32 %19];
    i32 %154 = load i32* %21;
    i1 %155 = scmp eq i32 %154, i32 41;
    cbr i1 %155(prob = 0.5), ^entry6, ^b15;
^b11:
    i32 %156 = phi [^b8, i32 %132] [^while.body6, i32 %405];
    i32 %157 = phi [^b8, i32 %133] [^while.body6, i32 %407];
    i1 %158 = phi [^b8, i1 %136] [^while.body6, i1 true];
    cbr i1 %158(prob = 0.5), ^b14, ^b13;
^b12:
    i32 %159 = phi [^entry4, i32 0] [^if.then1, i32 %151];
    i1 %160 = scmp eq i32 %147, i32 45;
    cbr i1 %160(prob = 0.5), ^if.then2, ^b16;
^if.then2:
    i32 %161 = sub i32 %145, i32 %143;
    ubr ^b16;
^b13:
    i32* %162 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %157];
    i32 %163 = load i32* %162;
    i1 %164 = scmp eq i32 %163, i32 42;
    ubr ^b14;
^entry6:
    i32 %165 = add i32 %152, i32 -1;
    i32* %166 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %152];
    i32 %167 = load i32* %166;
    i1 %168 = scmp neq i32 %167, i32 40;
    cbr i1 %168(prob = 0.97), ^while.body3, ^b15;
^b14:
    i1 %169 = phi [^b11, i1 true] [^b13, i1 %164];
    cbr i1 %169(prob = 0.5), ^b18, ^b17;
^b15:
    i32 %170 = phi [^b10, i32 %152] [^entry6, i32 %165] [^while.body3, i32 %189];
    i32 %171 = phi [^b10, i32 %18] [^entry6, i32 %18] [^while.body3, i32 %188];
    i32 %172 = phi [^b10, i32 %153] [^entry6, i32 %19] [^while.body3, i32 %19];
    i32 %173 = load i32* %21;
    i1 %174 = scmp eq i32 %173, i32 43;
    cbr i1 %174(prob = 0.5), ^while.guard1, ^b19;
^b16:
    i32 %175 = phi [^b12, i32 %159] [^if.then2, i32 %161];
    i32 %176 = load i32* %146;
    i1 %177 = scmp eq i32 %176, i32 42;
    cbr i1 %177(prob = 0.5), ^if.then3, ^b20;
^b17:
    i32* %178 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %157];
    i32 %179 = load i32* %178;
    i1 %180 = scmp eq i32 %179, i32 47;
    ubr ^b18;
^if.then3:
    i32 %181 = mul i32 %143, i32 %145;
    ubr ^b20;
^b18:
    i1 %182 = phi [^b14, i1 true] [^b17, i1 %180];
    cbr i1 %182(prob = 0.5), ^b22, ^b21;
^while.body3:
    i32 %183 = phi [^entry6, i32 %18] [^while.body3, i32 %188];
    i32 %184 = phi [^entry6, i32 %165] [^while.body3, i32 %189];
    i32 %185 = phi [^entry6, i32 %167] [^while.body3, i32 %191];
    i32* %186 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %183];
    store i32* %186 with i32 32;
    i32* %187 = getelementptr &(i32* %186)[i64 1];
    store i32* %187 with i32 %185;
    i32 %188 = add i32 %183, i32 2;
    i32 %189 = add i32 %184, i32 -1;
    i32* %190 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %184];
    i32 %191 = load i32* %190;
    i1 %192 = scmp neq i32 %191, i32 40;
    cbr i1 %192(prob = 0.97), ^while.body3, ^b15;
^while.guard1:
    i32* %193 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %170];
    i32 %194 = load i32* %193;
    i1 %195 = scmp eq i32 %194, i32 43;
    i1 %196 = scmp eq i32 %194, i32 45;
    i1 %197 = scmp eq i32 %194, i32 42;
    i1 %198 = or i1 %196, i1 %197;
    i1 %199 = or i1 %198, i1 %195;
    cbr i1 %199(prob = 0.88), ^entry7, ^b23;
^b19:
    i32 %200 = phi [^b15, i32 %15] [^entry8, i32 %259];
    i32 %201 = phi [^b15, i32 %170] [^entry8, i32 %264];
    i32 %202 = phi [^b15, i32 %17] [^entry8, i32 %260];
    i32 %203 = phi [^b15, i32 %171] [^entry8, i32 %261];
    i32 %204 = phi [^b15, i32 %19] [^entry8, i32 %262];
    i32 %205 = phi [^b15, i32 %172] [^entry8, i32 %262];
    i32* %206 = getelementptr &([10000 * i32]* @get)[i64 0][i32 %202];
    i32 %207 = load i32* %206;
    i1 %208 = scmp eq i32 %207, i32 45;
    cbr i1 %208(prob = 0.5), ^while.guard2, ^b24;
^b20:
    i32 %209 = phi [^b16, i32 %175] [^if.then3, i32 %181];
    i1 %210 = scmp eq i32 %176, i32 47;
    cbr i1 %210(prob = 0.5), ^if.then4, ^b25;
^b21:
    i32* %211 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %157];
    i32 %212 = load i32* %211;
    i1 %213 = scmp eq i32 %212, i32 37;
    ubr ^b22;
^b22:
    i1 %214 = phi [^b18, i1 true] [^b21, i1 %213];
    cbr i1 %214(prob = 0.5), ^b27, ^b26;
^if.then4:
    i32 %215 = sdiv i32 %145, i32 %143;
    ubr ^b25;
^entry7:
    i32 %216 = phi [^while.guard1, i32 %15] [^b23, i32 %235] [^b28, i32 %216];
    i32 %217 = phi [^while.guard1, i32 %17] [^b23, i32 %237] [^b28, i32 %217];
    i32 %218 = phi [^while.guard1, i32 %171] [^b23, i32 %238] [^b28, i32 %226];
    i32 %219 = phi [^while.guard1, i32 %19] [^b23, i32 %239] [^b28, i32 %219];
    i32 %220 = phi [^while.guard1, i32 %170] [^b23, i32 %236] [^b28, i32 %221];
    i32 %221 = add i32 %220, i32 -1;
    i32* %222 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %220];
    i32 %223 = load i32* %222;
    i32* %224 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %218];
    store i32* %224 with i32 32;
    i32* %225 = getelementptr &(i32* %224)[i64 1];
    store i32* %225 with i32 %223;
    i32 %226 = add i32 %218, i32 2;
    i1 %227 = scmp eq i32 %221, i32 0;
    cbr i1 %227(prob = 0.5), ^entry8, ^b28;
^while.guard2:
    i32* %228 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %201];
    i32 %229 = load i32* %228;
    i1 %230 = scmp eq i32 %229, i32 43;
    i1 %231 = scmp eq i32 %229, i32 45;
    i1 %232 = scmp eq i32 %229, i32 42;
    i1 %233 = or i1 %231, i1 %232;
    i1 %234 = or i1 %233, i1 %230;
    cbr i1 %234(prob = 0.88), ^entry9, ^b29;
^b23:
    i32 %235 = phi [^while.guard1, i32 %15] [^b28, i32 %216];
    i32 %236 = phi [^while.guard1, i32 %170] [^b28, i32 %221];
    i32 %237 = phi [^while.guard1, i32 %17] [^b28, i32 %217];
    i32 %238 = phi [^while.guard1, i32 %171] [^b28, i32 %226];
    i32 %239 = phi [^while.guard1, i32 %19] [^b28, i32 %219];
    i32* %240 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %236];
    i32 %241 = load i32* %240;
    i1 %242 = scmp eq i32 %241, i32 47;
    i1 %243 = scmp eq i32 %241, i32 37;
    i1 %244 = scmp eq i32 %241, i32 94;
    i1 %245 = or i1 %243, i1 %244;
    i1 %246 = or i1 %245, i1 %242;
    cbr i1 %246(prob = 0.99), ^entry7, ^entry8;
^b24:
    i32 %247 = phi [^b19, i32 %200] [^entry10, i32 %320];
    i32 %248 = phi [^b19, i32 %201] [^entry10, i32 %325];
    i32 %249 = phi [^b19, i32 %202] [^entry10, i32 %321];
    i32 %250 = phi [^b19, i32 %203] [^entry10, i32 %322];
    i32 %251 = phi [^b19, i32 %204] [^entry10, i32 %323];
    i32 %252 = phi [^b19, i32 %205] [^entry10, i32 %323];
    i32* %253 = getelementptr &([10000 * i32]* @get)[i64 0][i32 %249];
    i32 %254 = load i32* %253;
    i1 %255 = scmp eq i32 %254, i32 42;
    cbr i1 %255(prob = 0.5), ^while.guard3, ^b30;
^b25:
    i32 %256 = phi [^b20, i32 %209] [^if.then4, i32 %215];
    i32 %257 = load i32* %146;
    i1 %258 = scmp eq i32 %257, i32 37;
    cbr i1 %258(prob = 0.5), ^if.then5, ^b31;
^entry8:
    i32 %259 = phi [^entry7, i32 %216] [^b23, i32 %235];
    i32 %260 = phi [^entry7, i32 %217] [^b23, i32 %237];
    i32 %261 = phi [^entry7, i32 %226] [^b23, i32 %238];
    i32 %262 = phi [^entry7, i32 %219] [^b23, i32 %239];
    i32 %263 = phi [^entry7, i32 %221] [^b23, i32 %236];
    i32 %264 = add i32 %263, i32 1;
    i32* %265 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %264];
    store i32* %265 with i32 43;
    ubr ^b19;
^b26:
    i32* %266 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %157];
    i32 %267 = load i32* %266;
    i1 %268 = scmp eq i32 %267, i32 94;
    ubr ^b27;
^b27:
    i1 %269 = phi [^b22, i1 true] [^b26, i1 %268];
    cbr i1 %269(prob = 0.5), ^entry4, ^if.else1;
^if.then5:
    i32 %270 = srem i32 %145, i32 %143;
    ubr ^b31;
^b28:
    i32* %271 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %221];
    i32 %272 = load i32* %271;
    i1 %273 = scmp eq i32 %272, i32 43;
    i1 %274 = scmp eq i32 %272, i32 45;
    i1 %275 = scmp eq i32 %272, i32 42;
    i1 %276 = or i1 %274, i1 %275;
    i1 %277 = or i1 %276, i1 %273;
    cbr i1 %277(prob = 0.88), ^entry7, ^b23;
^entry9:
    i32 %278 = phi [^while.guard2, i32 %200] [^b29, i32 %290] [^b32, i32 %278];
    i32 %279 = phi [^while.guard2, i32 %202] [^b29, i32 %292] [^b32, i32 %279];
    i32 %280 = phi [^while.guard2, i32 %203] [^b29, i32 %293] [^b32, i32 %288];
    i32 %281 = phi [^while.guard2, i32 %204] [^b29, i32 %294] [^b32, i32 %281];
    i32 %282 = phi [^while.guard2, i32 %201] [^b29, i32 %291] [^b32, i32 %283];
    i32 %283 = add i32 %282, i32 -1;
    i32* %284 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %282];
    i32 %285 = load i32* %284;
    i32* %286 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %280];
    store i32* %286 with i32 32;
    i32* %287 = getelementptr &(i32* %286)[i64 1];
    store i32* %287 with i32 %285;
    i32 %288 = add i32 %280, i32 2;
    i1 %289 = scmp eq i32 %283, i32 0;
    cbr i1 %289(prob = 0.5), ^entry10, ^b32;
^b29:
    i32 %290 = phi [^while.guard2, i32 %200] [^b32, i32 %278];
    i32 %291 = phi [^while.guard2, i32 %201] [^b32, i32 %283];
    i32 %292 = phi [^while.guard2, i32 %202] [^b32, i32 %279];
    i32 %293 = phi [^while.guard2, i32 %203] [^b32, i32 %288];
    i32 %294 = phi [^while.guard2, i32 %204] [^b32, i32 %281];
    i32* %295 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %291];
    i32 %296 = load i32* %295;
    i1 %297 = scmp eq i32 %296, i32 47;
    i1 %298 = scmp eq i32 %296, i32 37;
    i1 %299 = scmp eq i32 %296, i32 94;
    i1 %300 = or i1 %298, i1 %299;
    i1 %301 = or i1 %300, i1 %297;
    cbr i1 %301(prob = 0.99), ^entry9, ^entry10;
^while.guard3:
    i32 %302 = phi [^b24, i32 %250] [^entry12, i32 %345];
    i32 %303 = phi [^b24, i32 %248] [^entry12, i32 %342];
    i32* %304 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %303];
    i32 %305 = load i32* %304;
    i1 %306 = scmp eq i32 %305, i32 42;
    i1 %307 = scmp eq i32 %305, i32 47;
    i1 %308 = scmp eq i32 %305, i32 37;
    i1 %309 = scmp eq i32 %305, i32 94;
    i1 %310 = or i1 %307, i1 %308;
    i1 %311 = or i1 %310, i1 %309;
    i1 %312 = or i1 %311, i1 %306;
    cbr i1 %312(prob = 1), ^entry12, ^entry11;
^b30:
    i32 %313 = phi [^b24, i32 %254] [^entry11, i32 %334];
    i32 %314 = phi [^b24, i32 %248] [^entry11, i32 %332];
    i32 %315 = phi [^b24, i32 %250] [^entry11, i32 %330];
    i32 %316 = phi [^b24, i32 %252] [^entry11, i32 %251];
    i1 %317 = scmp eq i32 %313, i32 47;
    cbr i1 %317(prob = 0.5), ^while.guard4, ^b34;
^b31:
    i32 %318 = phi [^b25, i32 %256] [^if.then5, i32 %270];
    i1 %319 = scmp eq i32 %257, i32 94;
    cbr i1 %319(prob = 0.5), ^entry13, ^b33;
^entry10:
    i32 %320 = phi [^entry9, i32 %278] [^b29, i32 %290];
    i32 %321 = phi [^entry9, i32 %279] [^b29, i32 %292];
    i32 %322 = phi [^entry9, i32 %288] [^b29, i32 %293];
    i32 %323 = phi [^entry9, i32 %281] [^b29, i32 %294];
    i32 %324 = phi [^entry9, i32 %283] [^b29, i32 %291];
    i32 %325 = add i32 %324, i32 1;
    i32* %326 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %325];
    store i32* %326 with i32 45;
    ubr ^b24;
^if.else1:
    i32* %327 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %157];
    i32 %328 = load i32* %327;
    i1 %329 = scmp neq i32 %328, i32 32;
    cbr i1 %329(prob = 0.5), ^if.then6, ^b37;
^entry11:
    i32 %330 = phi [^while.guard3, i32 %302] [^entry12, i32 %345];
    i32 %331 = phi [^while.guard3, i32 %303] [^entry12, i32 %342];
    i32 %332 = add i32 %331, i32 1;
    i32* %333 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %332];
    store i32* %333 with i32 42;
    i32 %334 = load i32* %253;
    ubr ^b30;
^b32:
    i32* %335 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %283];
    i32 %336 = load i32* %335;
    i1 %337 = scmp eq i32 %336, i32 43;
    i1 %338 = scmp eq i32 %336, i32 45;
    i1 %339 = scmp eq i32 %336, i32 42;
    i1 %340 = or i1 %338, i1 %339;
    i1 %341 = or i1 %340, i1 %337;
    cbr i1 %341(prob = 0.88), ^entry9, ^b29;
^entry12:
    i32 %342 = add i32 %303, i32 -1;
    i32* %343 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %302];
    store i32* %343 with i32 32;
    i32* %344 = getelementptr &(i32* %343)[i64 1];
    store i32* %344 with i32 %305;
    i32 %345 = add i32 %302, i32 2;
    i1 %346 = scmp eq i32 %342, i32 0;
    cbr i1 %346(prob = 0.5), ^entry11, ^while.guard3;
^b33:
    i32 %347 = phi [^b31, i32 %318] [^b35, i32 %378];
    i32 %348 = add i32 %140, i32 -1;
    i32* %349 = getelementptr &([10000 * i32]* @ints)[i64 0][i32 %348];
    store i32* %349 with i32 %347;
    ubr ^b37;
^while.guard4:
    i32 %350 = phi [^b30, i32 %315] [^entry15, i32 %387];
    i32 %351 = phi [^b30, i32 %314] [^entry15, i32 %384];
    i32* %352 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %351];
    i32 %353 = load i32* %352;
    i1 %354 = scmp eq i32 %353, i32 42;
    i1 %355 = scmp eq i32 %353, i32 47;
    i1 %356 = scmp eq i32 %353, i32 37;
    i1 %357 = scmp eq i32 %353, i32 94;
    i1 %358 = or i1 %355, i1 %356;
    i1 %359 = or i1 %358, i1 %357;
    i1 %360 = or i1 %359, i1 %354;
    cbr i1 %360(prob = 1), ^entry15, ^entry14;
^entry13:
    i1 %361 = scmp neq i32 %143, i32 0;
    cbr i1 %361(prob = 0.97), ^while.body4, ^b35;
^b34:
    i32 %362 = phi [^b30, i32 %314] [^entry14, i32 %376];
    i32 %363 = phi [^b30, i32 %315] [^entry14, i32 %374];
    i32 %364 = phi [^b30, i32 %316] [^entry14, i32 %251];
    i32 %365 = load i32* %253;
    i1 %366 = scmp eq i32 %365, i32 37;
    cbr i1 %366(prob = 0.5), ^while.guard5, ^b36;
^if.then6:
    i32 %367 = add i32 %328, i32 -48;
    i32 %368 = add i32 %156, i32 1;
    i32* %369 = getelementptr &([10000 * i32]* @ints)[i64 0][i32 %368];
    store i32* %369 with i32 %367;
    i32 %370 = add i32 %157, i32 1;
    i32* %371 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %370];
    i32 %372 = load i32* %371;
    i1 %373 = scmp neq i32 %372, i32 32;
    cbr i1 %373(prob = 0.97), ^while.body5, ^b38;
^entry14:
    i32 %374 = phi [^while.guard4, i32 %350] [^entry15, i32 %387];
    i32 %375 = phi [^while.guard4, i32 %351] [^entry15, i32 %384];
    i32 %376 = add i32 %375, i32 1;
    i32* %377 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %376];
    store i32* %377 with i32 47;
    ubr ^b34;
^b35:
    i32 %378 = phi [^entry13, i32 1] [^while.body4, i32 %391];
    ubr ^b33;
^b36:
    i32 %379 = phi [^b34, i32 %362] [^entry16, i32 %429];
    i32 %380 = phi [^b34, i32 %363] [^entry16, i32 %427];
    i32 %381 = phi [^b34, i32 %364] [^entry16, i32 %251];
    i32* %382 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %380];
    store i32* %382 with i32 32;
    i32 %383 = add i32 %380, i32 1;
    ubr ^b7;
^entry15:
    i32 %384 = add i32 %351, i32 -1;
    i32* %385 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %350];
    store i32* %385 with i32 32;
    i32* %386 = getelementptr &(i32* %385)[i64 1];
    store i32* %386 with i32 %353;
    i32 %387 = add i32 %350, i32 2;
    i1 %388 = scmp eq i32 %384, i32 0;
    cbr i1 %388(prob = 0.5), ^entry14, ^while.guard4;
^while.body4:
    i32 %389 = phi [^entry13, i32 %143] [^while.body4, i32 %392];
    i32 %390 = phi [^entry13, i32 1] [^while.body4, i32 %391];
    i32 %391 = mul i32 %145, i32 %390;
    i32 %392 = add i32 %389, i32 -1;
    i1 %393 = scmp neq i32 %392, i32 0;
    cbr i1 %393(prob = 0.97), ^while.body4, ^b35;
^while.guard5:
    i32 %394 = phi [^b34, i32 %363] [^entry17, i32 %434];
    i32 %395 = phi [^b34, i32 %362] [^entry17, i32 %431];
    i32* %396 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %395];
    i32 %397 = load i32* %396;
    i1 %398 = scmp eq i32 %397, i32 42;
    i1 %399 = scmp eq i32 %397, i32 47;
    i1 %400 = scmp eq i32 %397, i32 37;
    i1 %401 = scmp eq i32 %397, i32 94;
    i1 %402 = or i1 %399, i1 %400;
    i1 %403 = or i1 %402, i1 %401;
    i1 %404 = or i1 %403, i1 %398;
    cbr i1 %404(prob = 1), ^entry17, ^entry16;
^b37:
    i32 %405 = phi [^if.else1, i32 %156] [^b33, i32 %348] [^b38, i32 %368];
    i32 %406 = phi [^if.else1, i32 %157] [^b33, i32 %141] [^b38, i32 %413];
    i32 %407 = add i32 %406, i32 1;
    i32* %408 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %407];
    i32 %409 = load i32* %408;
    i1 %410 = scmp neq i32 %409, i32 64;
    cbr i1 %410(prob = 0.97), ^while.body6, ^b6;
^b38:
    i32 %411 = phi [^if.then6, i32 1] [^while.body5, i32 %422];
    i32 %412 = add i32 %411, i32 -1;
    i32 %413 = add i32 %412, i32 %157;
    ubr ^b37;
^while.body5:
    i32 %414 = phi [^if.then6, i32 %367] [^indirect, i32 %437];
    i32 %415 = phi [^if.then6, i32 1] [^indirect, i32 %422];
    i32 %416 = add i32 %415, i32 %157;
    i32* %417 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %416];
    i32 %418 = load i32* %417;
    i32 %419 = mul i32 %414, i32 10;
    i32 %420 = add i32 %419, i32 -48;
    i32 %421 = add i32 %420, i32 %418;
    store i32* %369 with i32 %421;
    i32 %422 = add i32 %415, i32 1;
    i32 %423 = add i32 %422, i32 %157;
    i32* %424 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %423];
    i32 %425 = load i32* %424;
    i1 %426 = scmp neq i32 %425, i32 32;
    cbr i1 %426(prob = 0.97), ^indirect, ^b38;
^entry16:
    i32 %427 = phi [^while.guard5, i32 %394] [^entry17, i32 %434];
    i32 %428 = phi [^while.guard5, i32 %395] [^entry17, i32 %431];
    i32 %429 = add i32 %428, i32 1;
    i32* %430 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %429];
    store i32* %430 with i32 37;
    ubr ^b36;
^entry17:
    i32 %431 = add i32 %395, i32 -1;
    i32* %432 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %394];
    store i32* %432 with i32 32;
    i32* %433 = getelementptr &(i32* %432)[i64 1];
    store i32* %433 with i32 %397;
    i32 %434 = add i32 %394, i32 2;
    i1 %435 = scmp eq i32 %431, i32 0;
    cbr i1 %435(prob = 0.5), ^entry16, ^while.guard5;
^while.body6:
    i1 %436 = scmp eq i32 %409, i32 43;
    cbr i1 %436(prob = 0.5), ^b11, ^b8;
^indirect:
    i32 %437 = load i32* %369;
    ubr ^while.body5;
}
