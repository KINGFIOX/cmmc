internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal [10000 * i32]* @ints;
internal [10000 * i32]* @chas;
internal [10000 * i32]* @get;
internal [10000 * i32]* @get2;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = scmp neq i32 %0, i32 13;
    i1 %2 = scmp neq i32 %0, i32 10;
    i1 %3 = and i1 %1, i1 %2;
    [10000 * i32]* %4 = ptrcast [10000 * i32]* @get to [10000 * i32]*;
    i32* %5 = getelementptr &([10000 * i32]* %4)[i64 0][i64 0];
    [10000 * i32]* %6 = ptrcast [10000 * i32]* @chas to [10000 * i32]*;
    [10000 * i32]* %7 = ptrcast [10000 * i32]* @ints to [10000 * i32]*;
    [10000 * i32]* %8 = ptrcast [10000 * i32]* @get2 to [10000 * i32]*;
    cbr i1 %3(prob = 0.97), ^while.body, ^b;
  ^b:
    i32 %9 = phi [^entry, i32 0] [^while.body, i32 %17];
    ubr ^while.header;
  ^while.body:
    i32 %10 = phi [^entry, i32 0] [^while.body, i32 %17];
    i32 %11 = phi [^entry, i32 %0] [^while.body, i32 %13];
    i32* %12 = getelementptr &(i32* %5)[i32 %10];
    store i32* %12 with i32 %11;
    i32 %13 = call () -> i32 @getch();
    i1 %14 = scmp neq i32 %13, i32 13;
    i1 %15 = scmp neq i32 %13, i32 10;
    i1 %16 = and i1 %14, i1 %15;
    i32 %17 = add i32 %10, i32 1;
    cbr i1 %16(prob = 0.97), ^while.body, ^b;
  ^while.header:
    i32 %18 = phi [^b, i32 0] [^b2, i32 %39];
    i32 %19 = phi [^b, i32 1] [^b2, i32 %40];
    i32 %20 = phi [^b, i32 0] [^b2, i32 %41];
    i1 %21 = scmp lt i32 %20, i32 %9;
    cbr i1 %21(prob = 0.97), ^while.body1, ^indirect;
  ^while.body1:
    i32* %22 = getelementptr &([10000 * i32]* %4)[i64 0][i32 %20];
    i32 %23 = load i32* %22;
    i32 %24 = add i32 %23, i32 -48;
    i1 %25 = ucmp lt i32 %24, i32 10;
    cbr i1 %25(prob = 0.5), ^if.then, ^if.else;
  ^indirect:
    i1 %26 = scmp gt i32 %18, i32 0;
    cbr i1 %26(prob = 0.97), ^super.header, ^b1;
  ^if.then:
    i32* %27 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %19];
    store i32* %27 with i32 %23;
    i32 %28 = add i32 %19, i32 1;
    ubr ^b2;
  ^if.else:
    i1 %29 = scmp eq i32 %23, i32 40;
    cbr i1 %29(prob = 0.5), ^entry1, ^b3;
  ^super.header:
    i32 %30 = phi [^indirect, i32 %18] [^entry2, i32 %32];
    i32 %31 = phi [^indirect, i32 %19] [^entry2, i32 %108];
    i32 %32 = add i32 %30, i32 -16;
    i1 %33 = scmp gt i32 %32, i32 0;
    cbr i1 %33(prob = 0.67), ^entry2, ^super.header1;
  ^b1:
    i32 %34 = phi [^indirect, i32 %19] [^entry6, i32 %218];
    i32* %35 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %34];
    store i32* %35 with i32 64;
    i32* %36 = getelementptr &([10000 * i32]* %8)[i64 0][i64 1];
    i32 %37 = load i32* %36;
    i1 %38 = scmp neq i32 %37, i32 64;
    cbr i1 %38(prob = 0.97), ^while.body2, ^b4;
  ^b2:
    i32 %39 = phi [^if.then, i32 %18] [^b17, i32 %384];
    i32 %40 = phi [^if.then, i32 %28] [^b17, i32 %387];
    i32 %41 = add i32 %20, i32 1;
    ubr ^while.header;
  ^entry1:
    i32 %42 = add i32 %18, i32 1;
    i32* %43 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %42];
    store i32* %43 with i32 40;
    ubr ^b3;
  ^entry2:
    i32* %44 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %30];
    i32 %45 = load i32* %44;
    i32* %46 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %31];
    store i32* %46 with i32 32;
    i32* %47 = getelementptr &(i32* %46)[i64 1];
    store i32* %47 with i32 %45;
    i32* %48 = getelementptr &(i32* %44)[i64 -1];
    i32 %49 = load i32* %48;
    i32* %50 = getelementptr &(i32* %46)[i64 2];
    store i32* %50 with i32 32;
    i32* %51 = getelementptr &(i32* %46)[i64 3];
    store i32* %51 with i32 %49;
    i32* %52 = getelementptr &(i32* %44)[i64 -2];
    i32 %53 = load i32* %52;
    i32* %54 = getelementptr &(i32* %46)[i64 4];
    store i32* %54 with i32 32;
    i32* %55 = getelementptr &(i32* %46)[i64 5];
    store i32* %55 with i32 %53;
    i32* %56 = getelementptr &(i32* %44)[i64 -3];
    i32 %57 = load i32* %56;
    i32* %58 = getelementptr &(i32* %46)[i64 6];
    store i32* %58 with i32 32;
    i32* %59 = getelementptr &(i32* %46)[i64 7];
    store i32* %59 with i32 %57;
    i32* %60 = getelementptr &(i32* %44)[i64 -4];
    i32 %61 = load i32* %60;
    i32* %62 = getelementptr &(i32* %46)[i64 8];
    store i32* %62 with i32 32;
    i32* %63 = getelementptr &(i32* %46)[i64 9];
    store i32* %63 with i32 %61;
    i32* %64 = getelementptr &(i32* %44)[i64 -5];
    i32 %65 = load i32* %64;
    i32* %66 = getelementptr &(i32* %46)[i64 10];
    store i32* %66 with i32 32;
    i32* %67 = getelementptr &(i32* %46)[i64 11];
    store i32* %67 with i32 %65;
    i32* %68 = getelementptr &(i32* %44)[i64 -6];
    i32 %69 = load i32* %68;
    i32* %70 = getelementptr &(i32* %46)[i64 12];
    store i32* %70 with i32 32;
    i32* %71 = getelementptr &(i32* %46)[i64 13];
    store i32* %71 with i32 %69;
    i32* %72 = getelementptr &(i32* %44)[i64 -7];
    i32 %73 = load i32* %72;
    i32* %74 = getelementptr &(i32* %46)[i64 14];
    store i32* %74 with i32 32;
    i32* %75 = getelementptr &(i32* %46)[i64 15];
    store i32* %75 with i32 %73;
    i32* %76 = getelementptr &(i32* %44)[i64 -8];
    i32 %77 = load i32* %76;
    i32* %78 = getelementptr &(i32* %46)[i64 16];
    store i32* %78 with i32 32;
    i32* %79 = getelementptr &(i32* %46)[i64 17];
    store i32* %79 with i32 %77;
    i32* %80 = getelementptr &(i32* %44)[i64 -9];
    i32 %81 = load i32* %80;
    i32* %82 = getelementptr &(i32* %46)[i64 18];
    store i32* %82 with i32 32;
    i32* %83 = getelementptr &(i32* %46)[i64 19];
    store i32* %83 with i32 %81;
    i32* %84 = getelementptr &(i32* %44)[i64 -10];
    i32 %85 = load i32* %84;
    i32* %86 = getelementptr &(i32* %46)[i64 20];
    store i32* %86 with i32 32;
    i32* %87 = getelementptr &(i32* %46)[i64 21];
    store i32* %87 with i32 %85;
    i32* %88 = getelementptr &(i32* %44)[i64 -11];
    i32 %89 = load i32* %88;
    i32* %90 = getelementptr &(i32* %46)[i64 22];
    store i32* %90 with i32 32;
    i32* %91 = getelementptr &(i32* %46)[i64 23];
    store i32* %91 with i32 %89;
    i32* %92 = getelementptr &(i32* %44)[i64 -12];
    i32 %93 = load i32* %92;
    i32* %94 = getelementptr &(i32* %46)[i64 24];
    store i32* %94 with i32 32;
    i32* %95 = getelementptr &(i32* %46)[i64 25];
    store i32* %95 with i32 %93;
    i32* %96 = getelementptr &(i32* %44)[i64 -13];
    i32 %97 = load i32* %96;
    i32* %98 = getelementptr &(i32* %46)[i64 26];
    store i32* %98 with i32 32;
    i32* %99 = getelementptr &(i32* %46)[i64 27];
    store i32* %99 with i32 %97;
    i32* %100 = getelementptr &(i32* %44)[i64 -14];
    i32 %101 = load i32* %100;
    i32* %102 = getelementptr &(i32* %46)[i64 28];
    store i32* %102 with i32 32;
    i32* %103 = getelementptr &(i32* %46)[i64 29];
    store i32* %103 with i32 %101;
    i32* %104 = getelementptr &(i32* %44)[i64 -15];
    i32 %105 = load i32* %104;
    i32* %106 = getelementptr &(i32* %46)[i64 30];
    store i32* %106 with i32 32;
    i32* %107 = getelementptr &(i32* %46)[i64 31];
    store i32* %107 with i32 %105;
    i32 %108 = add i32 %31, i32 32;
    ubr ^super.header;
  ^b3:
    i32 %109 = phi [^if.else, i32 %18] [^entry1, i32 %42];
    i32 %110 = load i32* %22;
    i1 %111 = scmp eq i32 %110, i32 94;
    cbr i1 %111(prob = 0.5), ^entry4, ^b5;
  ^super.header1:
    i32 %112 = phi [^super.header, i32 %30] [^entry3, i32 %114];
    i32 %113 = phi [^super.header, i32 %31] [^entry3, i32 %197];
    i32 %114 = add i32 %112, i32 -16;
    i1 %115 = scmp gt i32 %114, i32 0;
    cbr i1 %115(prob = 0.67), ^entry3, ^entry6;
  ^while.body2:
    i32 %116 = phi [^b1, i32 0] [^b8, i32 %239];
    i32 %117 = phi [^b1, i32 1] [^b8, i32 %241];
    i32* %118 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %117];
    i32 %119 = load i32* %118;
    i1 %120 = scmp eq i32 %119, i32 43;
    i1 %121 = scmp eq i32 %119, i32 45;
    i1 %122 = or i1 %120, i1 %121;
    i1 %123 = scmp eq i32 %119, i32 42;
    i1 %124 = or i1 %122, i1 %123;
    i1 %125 = scmp eq i32 %119, i32 47;
    i1 %126 = or i1 %124, i1 %125;
    i1 %127 = scmp eq i32 %119, i32 37;
    i1 %128 = or i1 %126, i1 %127;
    i1 %129 = scmp eq i32 %119, i32 94;
    i1 %130 = or i1 %128, i1 %129;
    cbr i1 %130(prob = 0.5), ^entry5, ^if.else1;
  ^b4:
    i32* %131 = getelementptr &([10000 * i32]* %7)[i64 0][i64 1];
    i32 %132 = load i32* %131;
    call (i32) -> void @putint(i32 %132);
    ret i32 0;
  ^entry3:
    i32* %133 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %112];
    i32 %134 = load i32* %133;
    i32* %135 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %113];
    store i32* %135 with i32 32;
    i32* %136 = getelementptr &(i32* %135)[i64 1];
    store i32* %136 with i32 %134;
    i32* %137 = getelementptr &(i32* %133)[i64 -1];
    i32 %138 = load i32* %137;
    i32* %139 = getelementptr &(i32* %135)[i64 2];
    store i32* %139 with i32 32;
    i32* %140 = getelementptr &(i32* %135)[i64 3];
    store i32* %140 with i32 %138;
    i32* %141 = getelementptr &(i32* %133)[i64 -2];
    i32 %142 = load i32* %141;
    i32* %143 = getelementptr &(i32* %135)[i64 4];
    store i32* %143 with i32 32;
    i32* %144 = getelementptr &(i32* %135)[i64 5];
    store i32* %144 with i32 %142;
    i32* %145 = getelementptr &(i32* %133)[i64 -3];
    i32 %146 = load i32* %145;
    i32* %147 = getelementptr &(i32* %135)[i64 6];
    store i32* %147 with i32 32;
    i32* %148 = getelementptr &(i32* %135)[i64 7];
    store i32* %148 with i32 %146;
    i32* %149 = getelementptr &(i32* %133)[i64 -4];
    i32 %150 = load i32* %149;
    i32* %151 = getelementptr &(i32* %135)[i64 8];
    store i32* %151 with i32 32;
    i32* %152 = getelementptr &(i32* %135)[i64 9];
    store i32* %152 with i32 %150;
    i32* %153 = getelementptr &(i32* %133)[i64 -5];
    i32 %154 = load i32* %153;
    i32* %155 = getelementptr &(i32* %135)[i64 10];
    store i32* %155 with i32 32;
    i32* %156 = getelementptr &(i32* %135)[i64 11];
    store i32* %156 with i32 %154;
    i32* %157 = getelementptr &(i32* %133)[i64 -6];
    i32 %158 = load i32* %157;
    i32* %159 = getelementptr &(i32* %135)[i64 12];
    store i32* %159 with i32 32;
    i32* %160 = getelementptr &(i32* %135)[i64 13];
    store i32* %160 with i32 %158;
    i32* %161 = getelementptr &(i32* %133)[i64 -7];
    i32 %162 = load i32* %161;
    i32* %163 = getelementptr &(i32* %135)[i64 14];
    store i32* %163 with i32 32;
    i32* %164 = getelementptr &(i32* %135)[i64 15];
    store i32* %164 with i32 %162;
    i32* %165 = getelementptr &(i32* %133)[i64 -8];
    i32 %166 = load i32* %165;
    i32* %167 = getelementptr &(i32* %135)[i64 16];
    store i32* %167 with i32 32;
    i32* %168 = getelementptr &(i32* %135)[i64 17];
    store i32* %168 with i32 %166;
    i32* %169 = getelementptr &(i32* %133)[i64 -9];
    i32 %170 = load i32* %169;
    i32* %171 = getelementptr &(i32* %135)[i64 18];
    store i32* %171 with i32 32;
    i32* %172 = getelementptr &(i32* %135)[i64 19];
    store i32* %172 with i32 %170;
    i32* %173 = getelementptr &(i32* %133)[i64 -10];
    i32 %174 = load i32* %173;
    i32* %175 = getelementptr &(i32* %135)[i64 20];
    store i32* %175 with i32 32;
    i32* %176 = getelementptr &(i32* %135)[i64 21];
    store i32* %176 with i32 %174;
    i32* %177 = getelementptr &(i32* %133)[i64 -11];
    i32 %178 = load i32* %177;
    i32* %179 = getelementptr &(i32* %135)[i64 22];
    store i32* %179 with i32 32;
    i32* %180 = getelementptr &(i32* %135)[i64 23];
    store i32* %180 with i32 %178;
    i32* %181 = getelementptr &(i32* %133)[i64 -12];
    i32 %182 = load i32* %181;
    i32* %183 = getelementptr &(i32* %135)[i64 24];
    store i32* %183 with i32 32;
    i32* %184 = getelementptr &(i32* %135)[i64 25];
    store i32* %184 with i32 %182;
    i32* %185 = getelementptr &(i32* %133)[i64 -13];
    i32 %186 = load i32* %185;
    i32* %187 = getelementptr &(i32* %135)[i64 26];
    store i32* %187 with i32 32;
    i32* %188 = getelementptr &(i32* %135)[i64 27];
    store i32* %188 with i32 %186;
    i32* %189 = getelementptr &(i32* %133)[i64 -14];
    i32 %190 = load i32* %189;
    i32* %191 = getelementptr &(i32* %135)[i64 28];
    store i32* %191 with i32 32;
    i32* %192 = getelementptr &(i32* %135)[i64 29];
    store i32* %192 with i32 %190;
    i32* %193 = getelementptr &(i32* %133)[i64 -15];
    i32 %194 = load i32* %193;
    i32* %195 = getelementptr &(i32* %135)[i64 30];
    store i32* %195 with i32 32;
    i32* %196 = getelementptr &(i32* %135)[i64 31];
    store i32* %196 with i32 %194;
    i32 %197 = add i32 %113, i32 32;
    ubr ^super.header1;
  ^entry4:
    i32 %198 = add i32 %109, i32 1;
    i32* %199 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %198];
    store i32* %199 with i32 94;
    ubr ^b5;
  ^entry5:
    i32* %200 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %116];
    i32 %201 = load i32* %200;
    i32* %202 = getelementptr &(i32* %200)[i64 -1];
    i32 %203 = load i32* %202;
    i32 %204 = add i32 %201, i32 %203;
    i32 %205 = select i1 %120 ? i32 %204 : i32 0;
    i32 %206 = sub i32 %203, i32 %201;
    i32 %207 = select i1 %121 ? i32 %206 : i32 %205;
    i32 %208 = mul i32 %201, i32 %203;
    i32 %209 = select i1 %123 ? i32 %208 : i32 %207;
    cbr i1 %125(prob = 0.5), ^if.then1, ^b6;
  ^entry6:
    i32 %210 = phi [^super.header1, i32 %112] [^entry6, i32 %216];
    i32 %211 = phi [^super.header1, i32 %113] [^entry6, i32 %218];
    i32* %212 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %210];
    i32 %213 = load i32* %212;
    i32* %214 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %211];
    store i32* %214 with i32 32;
    i32* %215 = getelementptr &(i32* %214)[i64 1];
    store i32* %215 with i32 %213;
    i32 %216 = add i32 %210, i32 -1;
    i1 %217 = scmp gt i32 %216, i32 0;
    i32 %218 = add i32 %211, i32 2;
    cbr i1 %217(prob = 0.97), ^entry6, ^b1;
  ^b5:
    i32 %219 = phi [^b3, i32 %109] [^entry4, i32 %198];
    i1 %220 = scmp eq i32 %110, i32 41;
    cbr i1 %220(prob = 0.5), ^entry7, ^b7;
  ^if.else1:
    i1 %221 = scmp neq i32 %119, i32 32;
    cbr i1 %221(prob = 0.5), ^if.then2, ^b8;
  ^if.then1:
    i32 %222 = sdiv i32 %203, i32 %201;
    ubr ^b6;
  ^entry7:
    i32* %223 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %219];
    i32 %224 = load i32* %223;
    i32 %225 = add i32 %219, i32 -1;
    ubr ^while.header1;
  ^if.then2:
    i32 %226 = load i32* %118;
    i32 %227 = add i32 %226, i32 -48;
    i32 %228 = add i32 %116, i32 1;
    i32* %229 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %228];
    store i32* %229 with i32 %227;
    i32* %230 = getelementptr &(i32* %118)[i64 1];
    i32 %231 = load i32* %230;
    i1 %232 = scmp neq i32 %231, i32 32;
    i32 %233 = add i32 %117, i32 1;
    cbr i1 %232(prob = 0.97), ^while.body3, ^b9;
  ^b6:
    i32 %234 = phi [^entry5, i32 %209] [^if.then1, i32 %222];
    cbr i1 %127(prob = 0.5), ^if.then3, ^b10;
  ^b7:
    i32 %235 = phi [^b5, i32 %19] [^while.header1, i32 %251];
    i32 %236 = phi [^b5, i32 %219] [^while.header1, i32 %249];
    i32 %237 = load i32* %22;
    i1 %238 = scmp eq i32 %237, i32 43;
    cbr i1 %238(prob = 0.5), ^while.header2, ^b11;
  ^b8:
    i32 %239 = phi [^if.else1, i32 %116] [^b9, i32 %228] [^b12, i32 %293];
    i32 %240 = phi [^if.else1, i32 %117] [^b9, i32 %248] [^b12, i32 %117];
    i32 %241 = add i32 %240, i32 1;
    i32* %242 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %241];
    i32 %243 = load i32* %242;
    i1 %244 = scmp neq i32 %243, i32 64;
    cbr i1 %244(prob = 0.97), ^while.body2, ^b4;
  ^if.then3:
    i32 %245 = srem i32 %203, i32 %201;
    ubr ^b10;
  ^b9:
    i32 %246 = phi [^if.then2, i32 1] [^while.body3, i32 %265];
    i32 %247 = add i32 %117, i32 -1;
    i32 %248 = add i32 %247, i32 %246;
    ubr ^b8;
  ^while.header1:
    i32 %249 = phi [^entry7, i32 %225] [^while.body4, i32 %291];
    i32 %250 = phi [^entry7, i32 %224] [^while.body4, i32 %289];
    i32 %251 = phi [^entry7, i32 %19] [^while.body4, i32 %290];
    i1 %252 = scmp neq i32 %250, i32 40;
    cbr i1 %252(prob = 0.97), ^while.body4, ^b7;
  ^while.body3:
    i32 %253 = phi [^if.then2, i32 %227] [^while.body3, i32 %260];
    i32 %254 = phi [^if.then2, i32 1] [^while.body3, i32 %265];
    i32 %255 = add i32 %117, i32 %254;
    i32* %256 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %255];
    i32 %257 = load i32* %256;
    i32 %258 = mul i32 %253, i32 10;
    i32 %259 = add i32 %258, i32 -48;
    i32 %260 = add i32 %259, i32 %257;
    store i32* %229 with i32 %260;
    i32 %261 = add i32 %233, i32 %254;
    i32* %262 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %261];
    i32 %263 = load i32* %262;
    i1 %264 = scmp neq i32 %263, i32 32;
    i32 %265 = add i32 %254, i32 1;
    cbr i1 %264(prob = 0.97), ^while.body3, ^b9;
  ^while.header2:
    i32 %266 = phi [^b7, i32 %235] [^entry9, i32 %304];
    i32 %267 = phi [^b7, i32 %236] [^entry9, i32 %302];
    i32* %268 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %267];
    i32 %269 = load i32* %268;
    i1 %270 = scmp eq i32 %269, i32 43;
    i1 %271 = scmp eq i32 %269, i32 45;
    i1 %272 = or i1 %270, i1 %271;
    i1 %273 = scmp eq i32 %269, i32 42;
    i1 %274 = or i1 %272, i1 %273;
    i1 %275 = scmp eq i32 %269, i32 47;
    i1 %276 = or i1 %274, i1 %275;
    i1 %277 = scmp eq i32 %269, i32 37;
    i1 %278 = or i1 %276, i1 %277;
    i1 %279 = scmp eq i32 %269, i32 94;
    i1 %280 = or i1 %278, i1 %279;
    cbr i1 %280(prob = 0.97), ^entry9, ^entry8;
  ^b10:
    i32 %281 = phi [^b6, i32 %234] [^if.then3, i32 %245];
    cbr i1 %129(prob = 0.5), ^entry10, ^b12;
  ^b11:
    i32 %282 = phi [^b7, i32 %237] [^entry8, i32 %299];
    i32 %283 = phi [^b7, i32 %235] [^entry8, i32 %295];
    i32 %284 = phi [^b7, i32 %236] [^entry8, i32 %297];
    i1 %285 = scmp eq i32 %282, i32 45;
    cbr i1 %285(prob = 0.5), ^while.header3, ^b13;
  ^while.body4:
    i32* %286 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %251];
    store i32* %286 with i32 32;
    i32* %287 = getelementptr &(i32* %286)[i64 1];
    store i32* %287 with i32 %250;
    i32* %288 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %249];
    i32 %289 = load i32* %288;
    i32 %290 = add i32 %251, i32 2;
    i32 %291 = add i32 %249, i32 -1;
    ubr ^while.header1;
  ^b12:
    i32 %292 = phi [^b10, i32 %281] [^b14, i32 %325];
    i32 %293 = add i32 %116, i32 -1;
    i32* %294 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %293];
    store i32* %294 with i32 %292;
    ubr ^b8;
  ^entry8:
    i32 %295 = phi [^while.header2, i32 %266] [^entry9, i32 %304];
    i32 %296 = phi [^while.header2, i32 %267] [^entry9, i32 %302];
    i32 %297 = add i32 %296, i32 1;
    i32* %298 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %297];
    store i32* %298 with i32 43;
    i32 %299 = load i32* %22;
    ubr ^b11;
  ^entry9:
    i32* %300 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %266];
    store i32* %300 with i32 32;
    i32* %301 = getelementptr &(i32* %300)[i64 1];
    store i32* %301 with i32 %269;
    i32 %302 = add i32 %267, i32 -1;
    i1 %303 = scmp eq i32 %302, i32 0;
    i32 %304 = add i32 %266, i32 2;
    cbr i1 %303(prob = 0.5), ^entry8, ^while.header2;
  ^entry10:
    i1 %305 = scmp neq i32 %201, i32 0;
    cbr i1 %305(prob = 0.97), ^while.body5, ^b14;
  ^while.header3:
    i32 %306 = phi [^b11, i32 %283] [^entry12, i32 %339];
    i32 %307 = phi [^b11, i32 %284] [^entry12, i32 %337];
    i32* %308 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %307];
    i32 %309 = load i32* %308;
    i1 %310 = scmp eq i32 %309, i32 43;
    i1 %311 = scmp eq i32 %309, i32 45;
    i1 %312 = or i1 %310, i1 %311;
    i1 %313 = scmp eq i32 %309, i32 42;
    i1 %314 = or i1 %312, i1 %313;
    i1 %315 = scmp eq i32 %309, i32 47;
    i1 %316 = or i1 %314, i1 %315;
    i1 %317 = scmp eq i32 %309, i32 37;
    i1 %318 = or i1 %316, i1 %317;
    i1 %319 = scmp eq i32 %309, i32 94;
    i1 %320 = or i1 %318, i1 %319;
    cbr i1 %320(prob = 0.97), ^entry12, ^entry11;
  ^b13:
    i32 %321 = phi [^b11, i32 %283] [^entry11, i32 %331];
    i32 %322 = phi [^b11, i32 %284] [^entry11, i32 %333];
    i32 %323 = load i32* %22;
    i1 %324 = scmp eq i32 %323, i32 42;
    cbr i1 %324(prob = 0.5), ^while.header4, ^b15;
  ^b14:
    i32 %325 = phi [^entry10, i32 1] [^while.body5, i32 %330];
    ubr ^b12;
  ^while.body5:
    i32 %326 = phi [^entry10, i32 1] [^while.body5, i32 %330];
    i32 %327 = phi [^entry10, i32 %201] [^while.body5, i32 %328];
    i32 %328 = add i32 %327, i32 -1;
    i1 %329 = scmp neq i32 %328, i32 0;
    i32 %330 = mul i32 %203, i32 %326;
    cbr i1 %329(prob = 0.97), ^while.body5, ^b14;
  ^entry11:
    i32 %331 = phi [^while.header3, i32 %306] [^entry12, i32 %339];
    i32 %332 = phi [^while.header3, i32 %307] [^entry12, i32 %337];
    i32 %333 = add i32 %332, i32 1;
    i32* %334 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %333];
    store i32* %334 with i32 45;
    ubr ^b13;
  ^entry12:
    i32* %335 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %306];
    store i32* %335 with i32 32;
    i32* %336 = getelementptr &(i32* %335)[i64 1];
    store i32* %336 with i32 %309;
    i32 %337 = add i32 %307, i32 -1;
    i1 %338 = scmp eq i32 %337, i32 0;
    i32 %339 = add i32 %306, i32 2;
    cbr i1 %338(prob = 0.5), ^entry11, ^while.header3;
  ^while.header4:
    i32 %340 = phi [^b13, i32 %321] [^entry14, i32 %364];
    i32 %341 = phi [^b13, i32 %322] [^entry14, i32 %362];
    i32* %342 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %341];
    i32 %343 = load i32* %342;
    i1 %344 = scmp eq i32 %343, i32 42;
    i1 %345 = scmp eq i32 %343, i32 47;
    i1 %346 = or i1 %344, i1 %345;
    i1 %347 = scmp eq i32 %343, i32 37;
    i1 %348 = or i1 %346, i1 %347;
    i1 %349 = scmp eq i32 %343, i32 94;
    i1 %350 = or i1 %348, i1 %349;
    cbr i1 %350(prob = 0.97), ^entry14, ^entry13;
  ^b15:
    i32 %351 = phi [^b13, i32 %323] [^entry13, i32 %359];
    i32 %352 = phi [^b13, i32 %321] [^entry13, i32 %355];
    i32 %353 = phi [^b13, i32 %322] [^entry13, i32 %357];
    i1 %354 = scmp eq i32 %351, i32 47;
    cbr i1 %354(prob = 0.5), ^while.header5, ^b16;
  ^entry13:
    i32 %355 = phi [^while.header4, i32 %340] [^entry14, i32 %364];
    i32 %356 = phi [^while.header4, i32 %341] [^entry14, i32 %362];
    i32 %357 = add i32 %356, i32 1;
    i32* %358 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %357];
    store i32* %358 with i32 42;
    i32 %359 = load i32* %22;
    ubr ^b15;
  ^entry14:
    i32* %360 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %340];
    store i32* %360 with i32 32;
    i32* %361 = getelementptr &(i32* %360)[i64 1];
    store i32* %361 with i32 %343;
    i32 %362 = add i32 %341, i32 -1;
    i1 %363 = scmp eq i32 %362, i32 0;
    i32 %364 = add i32 %340, i32 2;
    cbr i1 %363(prob = 0.5), ^entry13, ^while.header4;
  ^while.header5:
    i32 %365 = phi [^b15, i32 %352] [^entry16, i32 %392];
    i32 %366 = phi [^b15, i32 %353] [^entry16, i32 %390];
    i32* %367 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %366];
    i32 %368 = load i32* %367;
    i1 %369 = scmp eq i32 %368, i32 42;
    i1 %370 = scmp eq i32 %368, i32 47;
    i1 %371 = or i1 %369, i1 %370;
    i1 %372 = scmp eq i32 %368, i32 37;
    i1 %373 = or i1 %371, i1 %372;
    i1 %374 = scmp eq i32 %368, i32 94;
    i1 %375 = or i1 %373, i1 %374;
    cbr i1 %375(prob = 0.97), ^entry16, ^entry15;
  ^b16:
    i32 %376 = phi [^b15, i32 %352] [^entry15, i32 %380];
    i32 %377 = phi [^b15, i32 %353] [^entry15, i32 %382];
    i32 %378 = load i32* %22;
    i1 %379 = scmp eq i32 %378, i32 37;
    cbr i1 %379(prob = 0.5), ^while.header6, ^b17;
  ^entry15:
    i32 %380 = phi [^while.header5, i32 %365] [^entry16, i32 %392];
    i32 %381 = phi [^while.header5, i32 %366] [^entry16, i32 %390];
    i32 %382 = add i32 %381, i32 1;
    i32* %383 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %382];
    store i32* %383 with i32 47;
    ubr ^b16;
  ^b17:
    i32 %384 = phi [^b16, i32 %377] [^entry17, i32 %406];
    i32 %385 = phi [^b16, i32 %376] [^entry17, i32 %404];
    i32* %386 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %385];
    store i32* %386 with i32 32;
    i32 %387 = add i32 %385, i32 1;
    ubr ^b2;
  ^entry16:
    i32* %388 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %365];
    store i32* %388 with i32 32;
    i32* %389 = getelementptr &(i32* %388)[i64 1];
    store i32* %389 with i32 %368;
    i32 %390 = add i32 %366, i32 -1;
    i1 %391 = scmp eq i32 %390, i32 0;
    i32 %392 = add i32 %365, i32 2;
    cbr i1 %391(prob = 0.5), ^entry15, ^while.header5;
  ^while.header6:
    i32 %393 = phi [^b16, i32 %376] [^entry18, i32 %412];
    i32 %394 = phi [^b16, i32 %377] [^entry18, i32 %410];
    i32* %395 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %394];
    i32 %396 = load i32* %395;
    i1 %397 = scmp eq i32 %396, i32 42;
    i1 %398 = scmp eq i32 %396, i32 47;
    i1 %399 = or i1 %397, i1 %398;
    i1 %400 = scmp eq i32 %396, i32 37;
    i1 %401 = or i1 %399, i1 %400;
    i1 %402 = scmp eq i32 %396, i32 94;
    i1 %403 = or i1 %401, i1 %402;
    cbr i1 %403(prob = 0.97), ^entry18, ^entry17;
  ^entry17:
    i32 %404 = phi [^while.header6, i32 %393] [^entry18, i32 %412];
    i32 %405 = phi [^while.header6, i32 %394] [^entry18, i32 %410];
    i32 %406 = add i32 %405, i32 1;
    i32* %407 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %406];
    store i32* %407 with i32 37;
    ubr ^b17;
  ^entry18:
    i32* %408 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %393];
    store i32* %408 with i32 32;
    i32* %409 = getelementptr &(i32* %408)[i64 1];
    store i32* %409 with i32 %396;
    i32 %410 = add i32 %394, i32 -1;
    i1 %411 = scmp eq i32 %410, i32 0;
    i32 %412 = add i32 %393, i32 2;
    cbr i1 %411(prob = 0.5), ^entry17, ^while.header6;
}
