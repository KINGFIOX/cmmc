internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal [10000 * i32]* @ints;
internal [10000 * i32]* @chas;
internal [10000 * i32]* @get;
internal [10000 * i32]* @get2;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %length = alloc i32;
    i32* %ii = alloc i32;
    i32* %i = alloc i32;
    i32* %chat = alloc i32;
    i32* %intt = alloc i32;
    store i32* %i with i32 0;
    store i32* %ii with i32 1;
    store i32* %intt with i32 0;
    store i32* %chat with i32 0;
    i32* %0 = getelementptr &([10000 * i32]* @get)[i64 0][i64 0];
    i32 %1 = call () -> i32 @getch();
    store i32* %length with i32 0;
    ubr ^while.header;
^while.header:
    i32 %2 = phi [^while.body, i32 %13] [^entry, i32 0];
    i32 %3 = phi [^while.body, i32 %14] [^entry, i32 0];
    i32 %4 = phi [^while.body, i32 %15] [^entry, i32 0];
    i32 %5 = phi [^while.body, i32 %16] [^entry, i32 1];
    i32 %6 = phi [^while.body, i32 %18] [^entry, i32 0];
    i32 %7 = phi [^while.body, i32 %19] [^entry, i32 %1];
    i32* %8 = phi [^while.body, i32* %8] [^entry, i32* %0];
    i1 %9 = scmp neq i32 %7, i32 13;
    cbr i1 %9(prob = 0.5), ^b, ^b1;
^b:
    i1 %10 = scmp neq i32 %7, i32 10;
    ubr ^b1;
^b1:
    i1 %11 = phi [^while.header, i1 false] [^b, i1 %10];
    cbr i1 %11(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i32* %12 = getelementptr &(i32* %8)[i32 %6];
    store i32* %12 with i32 %7;
    i32 %13 = load i32* %intt;
    i32 %14 = load i32* %chat;
    i32 %15 = load i32* %i;
    i32 %16 = load i32* %ii;
    i32 %17 = load i32* %length;
    i32 %18 = add i32 %17, i32 1;
    store i32* %length with i32 %18;
    i32 %19 = call () -> i32 @getch();
    ubr ^while.header;
^while.header1:
    i32 %20 = phi [^b1, i32 %6] [^b7, i32 %55];
    i32 %21 = phi [^b1, i32 %2] [^b7, i32 %56];
    i32 %22 = phi [^b1, i32 %3] [^b7, i32 %57];
    i32 %23 = phi [^b1, i32 %4] [^b7, i32 %60];
    i32 %24 = phi [^b1, i32 %5] [^b7, i32 %59];
    i1 %25 = scmp lt i32 %23, i32 %20;
    cbr i1 %25(prob = 0.97), ^while.body1, ^while.header2;
^while.body1:
    i32* %26 = getelementptr &([10000 * i32]* @get)[i64 0][i32 %23];
    i32 %27 = load i32* %26;
    i1 %28 = scmp gt i32 %27, i32 47;
    cbr i1 %28(prob = 0.5), ^b2, ^b4;
^while.header2:
    i32 %29 = phi [^while.header1, i32 %21] [^entry1, i32 %29];
    i32 %30 = phi [^while.header1, i32 %22] [^entry1, i32 %34];
    i32 %31 = phi [^while.header1, i32 %24] [^entry1, i32 %39];
    i1 %32 = scmp gt i32 %30, i32 0;
    cbr i1 %32(prob = 0.97), ^entry1, ^b3;
^b2:
    i1 %33 = scmp le i32 %27, i32 57;
    ubr ^b4;
^entry1:
    i32 %34 = add i32 %30, i32 -1;
    i32* %35 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %30];
    i32 %36 = load i32* %35;
    i32* %37 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %31];
    store i32* %37 with i32 32;
    i32* %38 = getelementptr &(i32* %37)[i64 1];
    store i32* %38 with i32 %36;
    i32 %39 = add i32 %31, i32 2;
    ubr ^while.header2;
^b3:
    i32* %40 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %31];
    store i32* %40 with i32 64;
    ubr ^while.header3;
^b4:
    i1 %41 = phi [^while.body1, i1 false] [^b2, i1 %33];
    cbr i1 %41(prob = 0.5), ^while.body2, ^b5;
^b5:
    ubr ^while.body2;
^while.body2:
    i32 %42 = phi [^b4, i32 1] [^b5, i32 0];
    i1 %43 = scmp eq i32 %42, i32 1;
    cbr i1 %43(prob = 0.5), ^if.then, ^if.else;
^while.header3:
    i32 %44 = phi [^b30, i32 %176] [^b3, i32 %29];
    i32 %45 = phi [^b30, i32 %178] [^b3, i32 1];
    i32* %46 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %45];
    i32 %47 = load i32* %46;
    i1 %48 = scmp neq i32 %47, i32 64;
    cbr i1 %48(prob = 0.97), ^while.body3, ^b6;
^if.then:
    i32* %49 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %24];
    store i32* %49 with i32 %27;
    i32 %50 = add i32 %24, i32 1;
    ubr ^b7;
^if.else:
    i1 %51 = scmp eq i32 %27, i32 40;
    cbr i1 %51(prob = 0.5), ^entry2, ^b10;
^while.body3:
    i1 %52 = scmp eq i32 %47, i32 43;
    cbr i1 %52(prob = 0.5), ^b9, ^b8;
^b6:
    i32* %53 = getelementptr &([10000 * i32]* @ints)[i64 0][i64 1];
    i32 %54 = load i32* %53;
    call (i32) -> void @putint(i32 %54);
    ret i32 0;
^b7:
    i32 %55 = phi [^b47, i32 %226] [^if.then, i32 %20];
    i32 %56 = phi [^b47, i32 %227] [^if.then, i32 %21];
    i32 %57 = phi [^b47, i32 %228] [^if.then, i32 %22];
    i32 %58 = phi [^b47, i32 %229] [^if.then, i32 %23];
    i32 %59 = phi [^b47, i32 %232] [^if.then, i32 %50];
    i32 %60 = add i32 %58, i32 1;
    ubr ^while.header1;
^entry2:
    i32 %61 = add i32 %22, i32 1;
    i32* %62 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %61];
    store i32* %62 with i32 40;
    ubr ^b10;
^b8:
    i1 %63 = scmp eq i32 %47, i32 45;
    ubr ^b9;
^b9:
    i1 %64 = phi [^b8, i1 %63] [^while.body3, i1 true];
    cbr i1 %64(prob = 0.5), ^b12, ^b11;
^b10:
    i32 %65 = phi [^entry2, i32 %61] [^if.else, i32 %22];
    i32 %66 = load i32* %26;
    i1 %67 = scmp eq i32 %66, i32 94;
    cbr i1 %67(prob = 0.5), ^entry3, ^b13;
^entry3:
    i32 %68 = add i32 %65, i32 1;
    i32* %69 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %68];
    store i32* %69 with i32 94;
    ubr ^b13;
^b11:
    i32 %70 = load i32* %46;
    i1 %71 = scmp eq i32 %70, i32 42;
    ubr ^b12;
^b12:
    i1 %72 = phi [^b11, i1 %71] [^b9, i1 true];
    cbr i1 %72(prob = 0.5), ^b15, ^b14;
^b13:
    i32 %73 = phi [^entry3, i32 %68] [^b10, i32 %65];
    i1 %74 = scmp eq i32 %66, i32 41;
    cbr i1 %74(prob = 0.5), ^entry4, ^b16;
^b14:
    i32 %75 = load i32* %46;
    i1 %76 = scmp eq i32 %75, i32 47;
    ubr ^b15;
^entry4:
    i32 %77 = add i32 %73, i32 -1;
    i32* %78 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %73];
    i32 %79 = load i32* %78;
    ubr ^while.header4;
^b15:
    i1 %80 = phi [^b14, i1 %76] [^b12, i1 true];
    cbr i1 %80(prob = 0.5), ^b18, ^b17;
^b16:
    i32 %81 = phi [^while.header4, i32 %92] [^b13, i32 %20];
    i32 %82 = phi [^while.header4, i32 %93] [^b13, i32 %21];
    i32 %83 = phi [^while.header4, i32 %94] [^b13, i32 %73];
    i32 %84 = phi [^while.header4, i32 %95] [^b13, i32 %23];
    i32 %85 = phi [^while.header4, i32 %96] [^b13, i32 %24];
    i32* %86 = getelementptr &([10000 * i32]* @get)[i64 0][i32 %84];
    i32 %87 = load i32* %86;
    i1 %88 = scmp eq i32 %87, i32 43;
    cbr i1 %88(prob = 0.5), ^while.header5, ^b19;
^b17:
    i32 %89 = load i32* %46;
    i1 %90 = scmp eq i32 %89, i32 37;
    ubr ^b18;
^b18:
    i1 %91 = phi [^b17, i1 %90] [^b15, i1 true];
    cbr i1 %91(prob = 0.5), ^b21, ^b20;
^while.header4:
    i32 %92 = phi [^while.body4, i32 %92] [^entry4, i32 %20];
    i32 %93 = phi [^while.body4, i32 %93] [^entry4, i32 %21];
    i32 %94 = phi [^while.body4, i32 %120] [^entry4, i32 %77];
    i32 %95 = phi [^while.body4, i32 %95] [^entry4, i32 %23];
    i32 %96 = phi [^while.body4, i32 %119] [^entry4, i32 %24];
    i32 %97 = phi [^while.body4, i32 %122] [^entry4, i32 %79];
    i1 %98 = scmp neq i32 %97, i32 40;
    cbr i1 %98(prob = 0.97), ^while.body4, ^b16;
^while.header5:
    i32 %99 = phi [^while.body6, i32 %99] [^b16, i32 %81];
    i32 %100 = phi [^while.body6, i32 %100] [^b16, i32 %82];
    i32 %101 = phi [^while.body6, i32 %273] [^b16, i32 %83];
    i32 %102 = phi [^while.body6, i32 %102] [^b16, i32 %84];
    i32 %103 = phi [^while.body6, i32 %277] [^b16, i32 %85];
    i32* %104 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %101];
    i32 %105 = load i32* %104;
    i1 %106 = scmp eq i32 %105, i32 43;
    cbr i1 %106(prob = 0.5), ^b23, ^b22;
^b19:
    i32 %107 = phi [^entry6, i32 %99] [^b16, i32 %81];
    i32 %108 = phi [^entry6, i32 %100] [^b16, i32 %82];
    i32 %109 = phi [^entry6, i32 %269] [^b16, i32 %83];
    i32 %110 = phi [^entry6, i32 %102] [^b16, i32 %84];
    i32 %111 = phi [^entry6, i32 %268] [^b16, i32 %85];
    i32* %112 = getelementptr &([10000 * i32]* @get)[i64 0][i32 %110];
    i32 %113 = load i32* %112;
    i1 %114 = scmp eq i32 %113, i32 45;
    cbr i1 %114(prob = 0.5), ^while.header6, ^b24;
^b20:
    i32 %115 = load i32* %46;
    i1 %116 = scmp eq i32 %115, i32 94;
    ubr ^b21;
^while.body4:
    i32* %117 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %96];
    store i32* %117 with i32 32;
    i32* %118 = getelementptr &(i32* %117)[i64 1];
    store i32* %118 with i32 %97;
    i32 %119 = add i32 %96, i32 2;
    i32 %120 = add i32 %94, i32 -1;
    i32* %121 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %94];
    i32 %122 = load i32* %121;
    ubr ^while.header4;
^b21:
    i1 %123 = phi [^b20, i1 %116] [^b18, i1 true];
    cbr i1 %123(prob = 0.5), ^entry5, ^if.else1;
^b22:
    i1 %124 = scmp eq i32 %105, i32 45;
    ubr ^b23;
^b23:
    i1 %125 = phi [^b22, i1 %124] [^while.header5, i1 true];
    cbr i1 %125(prob = 0.5), ^b26, ^b25;
^while.header6:
    i32 %126 = phi [^while.body8, i32 %126] [^b19, i32 %107];
    i32 %127 = phi [^while.body8, i32 %127] [^b19, i32 %108];
    i32 %128 = phi [^while.body8, i32 %306] [^b19, i32 %109];
    i32 %129 = phi [^while.body8, i32 %129] [^b19, i32 %110];
    i32 %130 = phi [^while.body8, i32 %310] [^b19, i32 %111];
    i32* %131 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %128];
    i32 %132 = load i32* %131;
    i1 %133 = scmp eq i32 %132, i32 43;
    cbr i1 %133(prob = 0.5), ^b28, ^b27;
^b24:
    i32 %134 = phi [^entry10, i32 %126] [^b19, i32 %107];
    i32 %135 = phi [^entry10, i32 %127] [^b19, i32 %108];
    i32 %136 = phi [^entry10, i32 %302] [^b19, i32 %109];
    i32 %137 = phi [^entry10, i32 %129] [^b19, i32 %110];
    i32 %138 = phi [^entry10, i32 %301] [^b19, i32 %111];
    i32* %139 = getelementptr &([10000 * i32]* @get)[i64 0][i32 %137];
    i32 %140 = load i32* %139;
    i1 %141 = scmp eq i32 %140, i32 42;
    cbr i1 %141(prob = 0.5), ^while.header7, ^b29;
^entry5:
    i32* %142 = getelementptr &([10000 * i32]* @ints)[i64 0][i32 %44];
    i32 %143 = load i32* %142;
    i32 %144 = add i32 %44, i32 -2;
    i32* %145 = getelementptr &(i32* %142)[i64 -1];
    i32 %146 = load i32* %145;
    i32 %147 = load i32* %46;
    i1 %148 = scmp eq i32 %147, i32 43;
    cbr i1 %148(prob = 0.5), ^if.then1, ^b31;
^if.else1:
    i32 %149 = load i32* %46;
    i1 %150 = scmp neq i32 %149, i32 32;
    cbr i1 %150(prob = 0.5), ^if.then2, ^b30;
^b25:
    i32 %151 = load i32* %104;
    i1 %152 = scmp eq i32 %151, i32 42;
    ubr ^b26;
^b26:
    i1 %153 = phi [^b25, i1 %152] [^b23, i1 true];
    cbr i1 %153(prob = 0.5), ^b33, ^b32;
^b27:
    i1 %154 = scmp eq i32 %132, i32 45;
    ubr ^b28;
^b28:
    i1 %155 = phi [^b27, i1 %154] [^while.header6, i1 true];
    cbr i1 %155(prob = 0.5), ^b35, ^b34;
^while.header7:
    i32 %156 = phi [^while.body7, i32 %156] [^b24, i32 %134];
    i32 %157 = phi [^while.body7, i32 %157] [^b24, i32 %135];
    i32 %158 = phi [^while.body7, i32 %289] [^b24, i32 %136];
    i32 %159 = phi [^while.body7, i32 %159] [^b24, i32 %137];
    i32 %160 = phi [^while.body7, i32 %293] [^b24, i32 %138];
    i32* %161 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %158];
    i32 %162 = load i32* %161;
    i1 %163 = scmp eq i32 %162, i32 42;
    cbr i1 %163(prob = 0.5), ^b37, ^b36;
^b29:
    i32 %164 = phi [^entry8, i32 %156] [^b24, i32 %134];
    i32 %165 = phi [^entry8, i32 %157] [^b24, i32 %135];
    i32 %166 = phi [^entry8, i32 %282] [^b24, i32 %136];
    i32 %167 = phi [^entry8, i32 %159] [^b24, i32 %137];
    i32 %168 = phi [^entry8, i32 %281] [^b24, i32 %138];
    i32* %169 = getelementptr &([10000 * i32]* @get)[i64 0][i32 %167];
    i32 %170 = load i32* %169;
    i1 %171 = scmp eq i32 %170, i32 47;
    cbr i1 %171(prob = 0.5), ^while.header8, ^b38;
^if.then1:
    i32 %172 = add i32 %143, i32 %146;
    ubr ^b31;
^if.then2:
    i32 %173 = add i32 %149, i32 -48;
    i32 %174 = add i32 %44, i32 1;
    i32* %175 = getelementptr &([10000 * i32]* @ints)[i64 0][i32 %174];
    store i32* %175 with i32 %173;
    ubr ^while.header9;
^b30:
    i32 %176 = phi [^b74, i32 %334] [^b49, i32 %206] [^if.else1, i32 %44];
    i32 %177 = phi [^b74, i32 %332] [^b49, i32 %248] [^if.else1, i32 %45];
    i32 %178 = add i32 %177, i32 1;
    ubr ^while.header3;
^b31:
    i32 %179 = phi [^if.then1, i32 %172] [^entry5, i32 0];
    i1 %180 = scmp eq i32 %147, i32 45;
    cbr i1 %180(prob = 0.5), ^if.then3, ^b40;
^b32:
    i32 %181 = load i32* %104;
    i1 %182 = scmp eq i32 %181, i32 47;
    ubr ^b33;
^b33:
    i1 %183 = phi [^b32, i1 %182] [^b26, i1 true];
    cbr i1 %183(prob = 0.5), ^b41, ^b39;
^b34:
    i32 %184 = load i32* %131;
    i1 %185 = scmp eq i32 %184, i32 42;
    ubr ^b35;
^b35:
    i1 %186 = phi [^b34, i1 %185] [^b28, i1 true];
    cbr i1 %186(prob = 0.5), ^b43, ^b42;
^b36:
    i1 %187 = scmp eq i32 %162, i32 47;
    ubr ^b37;
^b37:
    i1 %188 = phi [^b36, i1 %187] [^while.header7, i1 true];
    cbr i1 %188(prob = 0.5), ^b45, ^b44;
^while.header8:
    i32 %189 = phi [^while.body9, i32 %189] [^b29, i32 %164];
    i32 %190 = phi [^while.body9, i32 %190] [^b29, i32 %165];
    i32 %191 = phi [^while.body9, i32 %322] [^b29, i32 %166];
    i32 %192 = phi [^while.body9, i32 %192] [^b29, i32 %167];
    i32 %193 = phi [^while.body9, i32 %326] [^b29, i32 %168];
    i32* %194 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %191];
    i32 %195 = load i32* %194;
    i1 %196 = scmp eq i32 %195, i32 42;
    cbr i1 %196(prob = 0.5), ^b48, ^b46;
^b38:
    i32 %197 = phi [^entry12, i32 %189] [^b29, i32 %164];
    i32 %198 = phi [^entry12, i32 %190] [^b29, i32 %165];
    i32 %199 = phi [^entry12, i32 %314] [^b29, i32 %166];
    i32 %200 = phi [^entry12, i32 %192] [^b29, i32 %167];
    i32 %201 = phi [^entry12, i32 %313] [^b29, i32 %168];
    i32* %202 = getelementptr &([10000 * i32]* @get)[i64 0][i32 %200];
    i32 %203 = load i32* %202;
    i1 %204 = scmp eq i32 %203, i32 37;
    cbr i1 %204(prob = 0.5), ^while.header10, ^b47;
^if.then3:
    i32 %205 = sub i32 %146, i32 %143;
    ubr ^b40;
^while.header9:
    i32 %206 = phi [^while.body5, i32 %206] [^if.then2, i32 %174];
    i32 %207 = phi [^while.body5, i32 %207] [^if.then2, i32 %45];
    i32 %208 = phi [^while.body5, i32 %247] [^if.then2, i32 1];
    i32 %209 = add i32 %208, i32 %207;
    i32* %210 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %209];
    i32 %211 = load i32* %210;
    i1 %212 = scmp neq i32 %211, i32 32;
    cbr i1 %212(prob = 0.97), ^while.body5, ^b49;
^b39:
    i32 %213 = load i32* %104;
    i1 %214 = scmp eq i32 %213, i32 37;
    ubr ^b41;
^b40:
    i32 %215 = phi [^if.then3, i32 %205] [^b31, i32 %179];
    i32 %216 = load i32* %46;
    i1 %217 = scmp eq i32 %216, i32 42;
    cbr i1 %217(prob = 0.5), ^if.then4, ^b53;
^b41:
    i1 %218 = phi [^b39, i1 %214] [^b33, i1 true];
    cbr i1 %218(prob = 0.5), ^b51, ^b50;
^b42:
    i32 %219 = load i32* %131;
    i1 %220 = scmp eq i32 %219, i32 47;
    ubr ^b43;
^b43:
    i1 %221 = phi [^b42, i1 %220] [^b35, i1 true];
    cbr i1 %221(prob = 0.5), ^b54, ^b52;
^b44:
    i32 %222 = load i32* %161;
    i1 %223 = scmp eq i32 %222, i32 37;
    ubr ^b45;
^b45:
    i1 %224 = phi [^b44, i1 %223] [^b37, i1 true];
    cbr i1 %224(prob = 0.5), ^b56, ^b55;
^b46:
    i1 %225 = scmp eq i32 %195, i32 47;
    ubr ^b48;
^b47:
    i32 %226 = phi [^entry14, i32 %234] [^b38, i32 %197];
    i32 %227 = phi [^entry14, i32 %235] [^b38, i32 %198];
    i32 %228 = phi [^entry14, i32 %344] [^b38, i32 %199];
    i32 %229 = phi [^entry14, i32 %237] [^b38, i32 %200];
    i32 %230 = phi [^entry14, i32 %343] [^b38, i32 %201];
    i32* %231 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %230];
    store i32* %231 with i32 32;
    i32 %232 = add i32 %230, i32 1;
    ubr ^b7;
^b48:
    i1 %233 = phi [^b46, i1 %225] [^while.header8, i1 true];
    cbr i1 %233(prob = 0.5), ^b58, ^b57;
^while.header10:
    i32 %234 = phi [^while.body11, i32 %234] [^b38, i32 %197];
    i32 %235 = phi [^while.body11, i32 %235] [^b38, i32 %198];
    i32 %236 = phi [^while.body11, i32 %348] [^b38, i32 %199];
    i32 %237 = phi [^while.body11, i32 %237] [^b38, i32 %200];
    i32 %238 = phi [^while.body11, i32 %352] [^b38, i32 %201];
    i32* %239 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %236];
    i32 %240 = load i32* %239;
    i1 %241 = scmp eq i32 %240, i32 42;
    cbr i1 %241(prob = 0.5), ^b60, ^b59;
^while.body5:
    i32* %242 = getelementptr &([10000 * i32]* @ints)[i64 0][i32 %206];
    i32 %243 = load i32* %242;
    i32 %244 = mul i32 %243, i32 10;
    i32 %245 = add i32 %244, i32 -48;
    i32 %246 = add i32 %245, i32 %211;
    store i32* %242 with i32 %246;
    i32 %247 = add i32 %208, i32 1;
    ubr ^while.header9;
^b49:
    i32 %248 = add i32 %209, i32 -1;
    ubr ^b30;
^if.then4:
    i32 %249 = mul i32 %143, i32 %146;
    ubr ^b53;
^b50:
    i32 %250 = load i32* %104;
    i1 %251 = scmp eq i32 %250, i32 94;
    ubr ^b51;
^b51:
    i1 %252 = phi [^b50, i1 %251] [^b41, i1 true];
    cbr i1 %252(prob = 0.97), ^entry7, ^entry6;
^b52:
    i32 %253 = load i32* %131;
    i1 %254 = scmp eq i32 %253, i32 37;
    ubr ^b54;
^b53:
    i32 %255 = phi [^if.then4, i32 %249] [^b40, i32 %215];
    i1 %256 = scmp eq i32 %216, i32 47;
    cbr i1 %256(prob = 0.5), ^if.then5, ^b63;
^b54:
    i1 %257 = phi [^b52, i1 %254] [^b43, i1 true];
    cbr i1 %257(prob = 0.5), ^b62, ^b61;
^b55:
    i32 %258 = load i32* %161;
    i1 %259 = scmp eq i32 %258, i32 94;
    ubr ^b56;
^b56:
    i1 %260 = phi [^b55, i1 %259] [^b45, i1 true];
    cbr i1 %260(prob = 0.97), ^entry9, ^entry8;
^b57:
    i32 %261 = load i32* %194;
    i1 %262 = scmp eq i32 %261, i32 37;
    ubr ^b58;
^b58:
    i1 %263 = phi [^b57, i1 %262] [^b48, i1 true];
    cbr i1 %263(prob = 0.5), ^b65, ^b64;
^b59:
    i1 %264 = scmp eq i32 %240, i32 47;
    ubr ^b60;
^b60:
    i1 %265 = phi [^b59, i1 %264] [^while.header10, i1 true];
    cbr i1 %265(prob = 0.5), ^b67, ^b66;
^if.then5:
    i32 %266 = sdiv i32 %146, i32 %143;
    ubr ^b63;
^entry6:
    i32 %267 = phi [^while.body6, i32 %273] [^b51, i32 %101];
    i32 %268 = phi [^while.body6, i32 %277] [^b51, i32 %103];
    i32 %269 = add i32 %267, i32 1;
    i32* %270 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %269];
    store i32* %270 with i32 43;
    ubr ^b19;
^b61:
    i32 %271 = load i32* %131;
    i1 %272 = scmp eq i32 %271, i32 94;
    ubr ^b62;
^entry7:
    i32 %273 = add i32 %101, i32 -1;
    i32 %274 = load i32* %104;
    i32* %275 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %103];
    store i32* %275 with i32 32;
    i32* %276 = getelementptr &(i32* %275)[i64 1];
    store i32* %276 with i32 %274;
    i32 %277 = add i32 %103, i32 2;
    i1 %278 = scmp eq i32 %101, i32 1;
    cbr i1 %278(prob = 0.5), ^while.body6, ^b68;
^b62:
    i1 %279 = phi [^b61, i1 %272] [^b54, i1 true];
    cbr i1 %279(prob = 0.97), ^entry11, ^entry10;
^entry8:
    i32 %280 = phi [^while.body7, i32 %289] [^b56, i32 %158];
    i32 %281 = phi [^while.body7, i32 %293] [^b56, i32 %160];
    i32 %282 = add i32 %280, i32 1;
    i32* %283 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %282];
    store i32* %283 with i32 42;
    ubr ^b29;
^b63:
    i32 %284 = phi [^if.then5, i32 %266] [^b53, i32 %255];
    i32 %285 = load i32* %46;
    i1 %286 = scmp eq i32 %285, i32 37;
    cbr i1 %286(prob = 0.5), ^if.then6, ^b70;
^b64:
    i32 %287 = load i32* %194;
    i1 %288 = scmp eq i32 %287, i32 94;
    ubr ^b65;
^entry9:
    i32 %289 = add i32 %158, i32 -1;
    i32 %290 = load i32* %161;
    i32* %291 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %160];
    store i32* %291 with i32 32;
    i32* %292 = getelementptr &(i32* %291)[i64 1];
    store i32* %292 with i32 %290;
    i32 %293 = add i32 %160, i32 2;
    i1 %294 = scmp eq i32 %158, i32 1;
    cbr i1 %294(prob = 0.5), ^while.body7, ^b69;
^b65:
    i1 %295 = phi [^b64, i1 %288] [^b58, i1 true];
    cbr i1 %295(prob = 0.97), ^entry13, ^entry12;
^b66:
    i32 %296 = load i32* %239;
    i1 %297 = scmp eq i32 %296, i32 37;
    ubr ^b67;
^b67:
    i1 %298 = phi [^b66, i1 %297] [^b60, i1 true];
    cbr i1 %298(prob = 0.5), ^b72, ^b71;
^b68:
    ubr ^while.body6;
^if.then6:
    i32 %299 = srem i32 %146, i32 %143;
    ubr ^b70;
^entry10:
    i32 %300 = phi [^while.body8, i32 %306] [^b62, i32 %128];
    i32 %301 = phi [^while.body8, i32 %310] [^b62, i32 %130];
    i32 %302 = add i32 %300, i32 1;
    i32* %303 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %302];
    store i32* %303 with i32 45;
    ubr ^b24;
^while.body6:
    i32 %304 = phi [^entry7, i32 0] [^b68, i32 1];
    i1 %305 = scmp eq i32 %304, i32 0;
    cbr i1 %305(prob = 0.5), ^entry6, ^while.header5;
^entry11:
    i32 %306 = add i32 %128, i32 -1;
    i32 %307 = load i32* %131;
    i32* %308 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %130];
    store i32* %308 with i32 32;
    i32* %309 = getelementptr &(i32* %308)[i64 1];
    store i32* %309 with i32 %307;
    i32 %310 = add i32 %130, i32 2;
    i1 %311 = scmp eq i32 %128, i32 1;
    cbr i1 %311(prob = 0.5), ^while.body8, ^b73;
^b69:
    ubr ^while.body7;
^entry12:
    i32 %312 = phi [^while.body9, i32 %322] [^b65, i32 %191];
    i32 %313 = phi [^while.body9, i32 %326] [^b65, i32 %193];
    i32 %314 = add i32 %312, i32 1;
    i32* %315 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %314];
    store i32* %315 with i32 47;
    ubr ^b38;
^while.body7:
    i32 %316 = phi [^entry9, i32 0] [^b69, i32 1];
    i1 %317 = scmp eq i32 %316, i32 0;
    cbr i1 %317(prob = 0.5), ^entry8, ^while.header7;
^b70:
    i32 %318 = phi [^if.then6, i32 %299] [^b63, i32 %284];
    i1 %319 = scmp eq i32 %285, i32 94;
    cbr i1 %319(prob = 0.5), ^while.header11, ^b74;
^b71:
    i32 %320 = load i32* %239;
    i1 %321 = scmp eq i32 %320, i32 94;
    ubr ^b72;
^entry13:
    i32 %322 = add i32 %191, i32 -1;
    i32 %323 = load i32* %194;
    i32* %324 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %193];
    store i32* %324 with i32 32;
    i32* %325 = getelementptr &(i32* %324)[i64 1];
    store i32* %325 with i32 %323;
    i32 %326 = add i32 %193, i32 2;
    i1 %327 = scmp eq i32 %191, i32 1;
    cbr i1 %327(prob = 0.5), ^while.body9, ^b75;
^b72:
    i1 %328 = phi [^b71, i1 %321] [^b67, i1 true];
    cbr i1 %328(prob = 0.97), ^entry15, ^entry14;
^b73:
    ubr ^while.body8;
^while.body8:
    i32 %329 = phi [^entry11, i32 0] [^b73, i32 1];
    i1 %330 = scmp eq i32 %329, i32 0;
    cbr i1 %330(prob = 0.5), ^entry10, ^while.header6;
^b74:
    i32 %331 = phi [^while.header11, i32 %336] [^b70, i32 %144];
    i32 %332 = phi [^while.header11, i32 %337] [^b70, i32 %45];
    i32 %333 = phi [^while.header11, i32 %338] [^b70, i32 %318];
    i32 %334 = add i32 %331, i32 1;
    i32* %335 = getelementptr &([10000 * i32]* @ints)[i64 0][i32 %334];
    store i32* %335 with i32 %333;
    ubr ^b30;
^b75:
    ubr ^while.body9;
^while.header11:
    i32 %336 = phi [^b70, i32 %144] [^while.body10, i32 %336];
    i32 %337 = phi [^b70, i32 %45] [^while.body10, i32 %337];
    i32 %338 = phi [^b70, i32 1] [^while.body10, i32 %354];
    i32 %339 = phi [^b70, i32 %143] [^while.body10, i32 %355];
    i32 %340 = phi [^b70, i32 %146] [^while.body10, i32 %340];
    i1 %341 = scmp neq i32 %339, i32 0;
    cbr i1 %341(prob = 0.97), ^while.body10, ^b74;
^entry14:
    i32 %342 = phi [^while.body11, i32 %348] [^b72, i32 %236];
    i32 %343 = phi [^while.body11, i32 %352] [^b72, i32 %238];
    i32 %344 = add i32 %342, i32 1;
    i32* %345 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %344];
    store i32* %345 with i32 37;
    ubr ^b47;
^while.body9:
    i32 %346 = phi [^entry13, i32 0] [^b75, i32 1];
    i1 %347 = scmp eq i32 %346, i32 0;
    cbr i1 %347(prob = 0.5), ^entry12, ^while.header8;
^entry15:
    i32 %348 = add i32 %236, i32 -1;
    i32 %349 = load i32* %239;
    i32* %350 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %238];
    store i32* %350 with i32 32;
    i32* %351 = getelementptr &(i32* %350)[i64 1];
    store i32* %351 with i32 %349;
    i32 %352 = add i32 %238, i32 2;
    i1 %353 = scmp eq i32 %236, i32 1;
    cbr i1 %353(prob = 0.5), ^while.body11, ^b76;
^while.body10:
    i32 %354 = mul i32 %340, i32 %338;
    i32 %355 = add i32 %339, i32 -1;
    ubr ^while.header11;
^b76:
    ubr ^while.body11;
^while.body11:
    i32 %356 = phi [^entry15, i32 0] [^b76, i32 1];
    i1 %357 = scmp eq i32 %356, i32 0;
    cbr i1 %357(prob = 0.5), ^entry14, ^while.header10;
}
