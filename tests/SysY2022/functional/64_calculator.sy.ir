internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [10000 * i32]* @ints, align 8 { Flexible };
internal [10000 * i32]* @chas, align 8 { Flexible };
internal [10000 * i32]* @get, align 8 { Flexible };
internal [10000 * i32]* @get2, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = icmp neq i32 %0, i32 13;
    i1 %2 = icmp neq i32 %0, i32 10;
    i1 %3 = and i1 %1, i1 %2;
    [10000 * i32]* %4 = ptrcast [10000 * i32]* @get to [10000 * i32]*;
    i32* %5 = getelementptr &([10000 * i32]* %4)[i64 0][i64 0];
    cbr i1 %3(prob = 0.984615), ^while.body, ^b;
  ^b:
    i32 %6 = phi [^entry, i32 0] [^while.body, i32 %16];
    [10000 * i32]* %7 = ptrcast [10000 * i32]* @get2 to [10000 * i32]*;
    [10000 * i32]* %8 = ptrcast [10000 * i32]* @chas to [10000 * i32]*;
    ubr ^while.header;
  ^while.body:
    i32 %9 = phi [^entry, i32 %0] [^while.body, i32 %12];
    i32 %10 = phi [^entry, i32 0] [^while.body, i32 %16];
    i32* %11 = getelementptr &(i32* %5)[i32 %10];
    store i32* %11 with i32 %9;
    i32 %12 = call () -> i32 @getch();
    i1 %13 = icmp neq i32 %12, i32 13;
    i1 %14 = icmp neq i32 %12, i32 10;
    i1 %15 = and i1 %13, i1 %14;
    i32 %16 = add i32 %10, i32 1;
    cbr i1 %15(prob = 0.984615), ^while.body, ^b;
  ^while.header:
    i32 %17 = phi [^b, i32 0] [^if.then, i32 %17] [^b18, i32 %255];
    i32 %18 = phi [^b, i32 0] [^if.then, i32 %25] [^b18, i32 %25];
    i32 %19 = phi [^b, i32 1] [^if.then, i32 %28] [^b18, i32 %258];
    i1 %20 = icmp sgt i32 %6, i32 %18;
    cbr i1 %20(prob = 0.984615), ^while.body1, ^indirect;
  ^while.body1:
    i32* %21 = getelementptr &([10000 * i32]* %4)[i64 0][i32 %18];
    i32 %22 = load i32* %21;
    i32 %23 = add i32 %22, i32 -48;
    i1 %24 = icmp ult i32 %23, i32 10;
    i32 %25 = add i32 %18, i32 1;
    cbr i1 %24(prob = 0.5), ^if.then, ^if.else;
  ^indirect:
    i1 %26 = icmp sgt i32 %17, i32 0;
    cbr i1 %26(prob = 0.984615), ^super.header, ^b1;
  ^if.then:
    i32* %27 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %19];
    store i32* %27 with i32 %22;
    i32 %28 = add i32 %19, i32 1;
    ubr ^while.header;
  ^if.else:
    i1 %29 = icmp eq i32 %22, i32 40;
    cbr i1 %29(prob = 0.5), ^if.then1, ^b2;
  ^super.header:
    i32 %30 = add i32 %17, i32 -4;
    i1 %31 = icmp sgt i32 %30, i32 0;
    cbr i1 %31(prob = 0.941176), ^while.body2, ^while.body3;
  ^b1:
    i32 %32 = phi [^indirect, i32 %19] [^while.body3, i32 %69];
    i32* %33 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %32];
    store i32* %33 with i32 64;
    i32* %34 = getelementptr &([10000 * i32]* %7)[i64 0][i64 1];
    i32 %35 = load i32* %34;
    i1 %36 = icmp neq i32 %35, i32 64;
    [10000 * i32]* %37 = ptrcast [10000 * i32]* @ints to [10000 * i32]*;
    cbr i1 %36(prob = 0.984615), ^while.body4, ^b3;
  ^if.then1:
    i32 %38 = add i32 %17, i32 1;
    i32* %39 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %38];
    store i32* %39 with i32 40;
    ubr ^b2;
  ^while.body2:
    i32 %40 = phi [^super.header, i32 %19] [^while.body2, i32 %60];
    i32 %41 = phi [^super.header, i32 %17] [^while.body2, i32 %58];
    i32* %42 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %41];
    i32 %43 = load i32* %42;
    i32* %44 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %40];
    store i32* %44 with i32 32;
    i32* %45 = getelementptr &(i32* %44)[i64 1];
    store i32* %45 with i32 %43;
    i32* %46 = getelementptr &(i32* %42)[i64 -1];
    i32 %47 = load i32* %46;
    i32* %48 = getelementptr &(i32* %44)[i64 2];
    store i32* %48 with i32 32;
    i32* %49 = getelementptr &(i32* %44)[i64 3];
    store i32* %49 with i32 %47;
    i32* %50 = getelementptr &(i32* %42)[i64 -2];
    i32 %51 = load i32* %50;
    i32* %52 = getelementptr &(i32* %44)[i64 4];
    store i32* %52 with i32 32;
    i32* %53 = getelementptr &(i32* %44)[i64 5];
    store i32* %53 with i32 %51;
    i32* %54 = getelementptr &(i32* %42)[i64 -3];
    i32 %55 = load i32* %54;
    i32* %56 = getelementptr &(i32* %44)[i64 6];
    store i32* %56 with i32 32;
    i32* %57 = getelementptr &(i32* %44)[i64 7];
    store i32* %57 with i32 %55;
    i32 %58 = add i32 %41, i32 -4;
    i1 %59 = icmp sgt i32 %58, i32 4;
    i32 %60 = add i32 %40, i32 8;
    cbr i1 %59(prob = 0.941176), ^while.body2, ^while.body3;
  ^while.body3 {scalar}:
    i32 %61 = phi [^super.header, i32 %17] [^while.body2, i32 %58] [^while.body3, i32 %67];
    i32 %62 = phi [^super.header, i32 %19] [^while.body2, i32 %60] [^while.body3, i32 %69];
    i32* %63 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %61];
    i32 %64 = load i32* %63;
    i32* %65 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %62];
    store i32* %65 with i32 32;
    i32* %66 = getelementptr &(i32* %65)[i64 1];
    store i32* %66 with i32 %64;
    i32 %67 = add i32 %61, i32 -1;
    i1 %68 = icmp sgt i32 %67, i32 0;
    i32 %69 = add i32 %62, i32 2;
    cbr i1 %68(prob = 0.75), ^while.body3, ^b1;
  ^b2:
    i32 %70 = phi [^if.else, i32 %17] [^if.then1, i32 %38];
    i1 %71 = icmp eq i32 %22, i32 94;
    cbr i1 %71(prob = 0.5), ^if.then2, ^b4;
  ^while.body4:
    i32 %72 = phi [^b1, i32 0] [^while.header2, i32 %160];
    i32 %73 = phi [^b1, i32 1] [^while.header2, i32 %161];
    i32* %74 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %73];
    i32 %75 = load i32* %74;
    i1 %76 = icmp eq i32 %75, i32 43;
    i1 %77 = icmp eq i32 %75, i32 45;
    i1 %78 = or i1 %76, i1 %77;
    i1 %79 = icmp eq i32 %75, i32 42;
    i1 %80 = icmp eq i32 %75, i32 47;
    i1 %81 = or i1 %79, i1 %80;
    i1 %82 = or i1 %78, i1 %81;
    i1 %83 = icmp eq i32 %75, i32 37;
    i1 %84 = icmp eq i32 %75, i32 94;
    i1 %85 = or i1 %83, i1 %84;
    i1 %86 = or i1 %82, i1 %85;
    cbr i1 %86(prob = 0.984375), ^if.then3, ^if.else1;
  ^b3:
    i32* %87 = getelementptr &([10000 * i32]* %37)[i64 0][i64 1];
    i32 %88 = load i32* %87;
    call (i32) -> void @putint(i32 %88);
    ret i32 0;
  ^if.then2:
    i32 %89 = add i32 %70, i32 1;
    i32* %90 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %89];
    store i32* %90 with i32 94;
    ubr ^b4;
  ^if.then3:
    i32* %91 = getelementptr &([10000 * i32]* %37)[i64 0][i32 %72];
    i32 %92 = load i32* %91;
    i32* %93 = getelementptr &(i32* %91)[i64 -1];
    i32 %94 = load i32* %93;
    i32 %95 = add i32 %92, i32 %94;
    i32 %96 = select i1 %76 ? i32 %95 : i32 0;
    i32 %97 = sub i32 %94, i32 %92;
    i32 %98 = select i1 %77 ? i32 %97 : i32 %96;
    i32 %99 = mul i32 %92, i32 %94;
    i32 %100 = select i1 %79 ? i32 %99 : i32 %98;
    cbr i1 %80(prob = 0.5), ^if.then4, ^b5;
  ^b4:
    i32 %101 = phi [^b2, i32 %70] [^if.then2, i32 %89];
    i1 %102 = icmp eq i32 %22, i32 41;
    cbr i1 %102(prob = 0.5), ^if.then5, ^b6;
  ^if.else1:
    i1 %103 = icmp neq i32 %75, i32 32;
    cbr i1 %103(prob = 0.5), ^if.then6, ^indirect1;
  ^if.then4:
    i32 %104 = sdiv i32 %94, i32 %92;
    ubr ^b5;
  ^indirect1:
    i32 %105 = phi [^if.else1, i32 %72] [^b10, i32 %170];
    i32 %106 = add i32 %73, i32 1;
    ubr ^while.header2;
  ^if.then5:
    i32* %107 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %101];
    i32 %108 = load i32* %107;
    i1 %109 = icmp neq i32 %108, i32 40;
    i32 %110 = add i32 %101, i32 -1;
    cbr i1 %109(prob = 0.984615), ^while.body5, ^b6;
  ^if.then6:
    i32 %111 = add i32 %72, i32 1;
    i32* %112 = getelementptr &([10000 * i32]* %37)[i64 0][i32 %111];
    i32 %113 = add i32 %75, i32 -48;
    store i32* %112 with i32 %113;
    i32* %114 = getelementptr &(i32* %74)[i64 1];
    i32 %115 = load i32* %114;
    i1 %116 = icmp neq i32 %115, i32 32;
    cbr i1 %116(prob = 0.984615), ^while.body6, ^b7;
  ^b5:
    i32 %117 = phi [^if.then3, i32 %100] [^if.then4, i32 %104];
    cbr i1 %83(prob = 0.5), ^if.then7, ^b8;
  ^b6:
    i32 %118 = phi [^b4, i32 %19] [^if.then5, i32 %19] [^while.body5, i32 %132];
    i32 %119 = phi [^b4, i32 %101] [^if.then5, i32 %110] [^while.body5, i32 %133];
    i1 %120 = icmp eq i32 %22, i32 43;
    cbr i1 %120(prob = 0.5), ^while.header1, ^b9;
  ^if.then7:
    i32 %121 = srem i32 %94, i32 %92;
    ubr ^b8;
  ^b7:
    i32 %122 = phi [^if.then6, i32 1] [^while.body6, i32 %144];
    i32 %123 = add i32 %73, i32 %122;
    ubr ^while.header2;
  ^while.body5:
    i32 %124 = phi [^if.then5, i32 %110] [^while.body5, i32 %133];
    i32 %125 = phi [^if.then5, i32 %19] [^while.body5, i32 %132];
    i32 %126 = phi [^if.then5, i32 %108] [^while.body5, i32 %130];
    i32* %127 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %125];
    store i32* %127 with i32 32;
    i32* %128 = getelementptr &(i32* %127)[i64 1];
    store i32* %128 with i32 %126;
    i32* %129 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %124];
    i32 %130 = load i32* %129;
    i1 %131 = icmp neq i32 %130, i32 40;
    i32 %132 = add i32 %125, i32 2;
    i32 %133 = add i32 %124, i32 -1;
    cbr i1 %131(prob = 0.984615), ^while.body5, ^b6;
  ^while.body6:
    i32 %134 = phi [^if.then6, i32 %113] [^while.body6, i32 %140];
    i32 %135 = phi [^if.then6, i32 1] [^while.body6, i32 %144];
    i32* %136 = getelementptr &(i32* %74)[i32 %135];
    i32 %137 = load i32* %136;
    i32 %138 = mul i32 %134, i32 10;
    i32 %139 = add i32 %138, i32 -48;
    i32 %140 = add i32 %137, i32 %139;
    store i32* %112 with i32 %140;
    i32* %141 = getelementptr &(i32* %136)[i64 1];
    i32 %142 = load i32* %141;
    i1 %143 = icmp neq i32 %142, i32 32;
    i32 %144 = add i32 %135, i32 1;
    cbr i1 %143(prob = 0.984615), ^while.body6, ^b7;
  ^while.header1:
    i32 %145 = phi [^b6, i32 %118] [^while.body7, i32 %180];
    i32 %146 = phi [^b6, i32 %119] [^while.body7, i32 %178];
    i32* %147 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %146];
    i32 %148 = load i32* %147;
    i1 %149 = icmp eq i32 %148, i32 43;
    i1 %150 = icmp eq i32 %148, i32 45;
    i1 %151 = or i1 %149, i1 %150;
    i1 %152 = icmp eq i32 %148, i32 42;
    i1 %153 = icmp eq i32 %148, i32 47;
    i1 %154 = or i1 %152, i1 %153;
    i1 %155 = or i1 %151, i1 %154;
    i1 %156 = icmp eq i32 %148, i32 37;
    i1 %157 = icmp eq i32 %148, i32 94;
    i1 %158 = or i1 %156, i1 %157;
    i1 %159 = or i1 %155, i1 %158;
    cbr i1 %159(prob = 0.999519), ^while.body7, ^b11;
  ^while.header2:
    i32 %160 = phi [^indirect1, i32 %105] [^b7, i32 %111];
    i32 %161 = phi [^indirect1, i32 %106] [^b7, i32 %123];
    i32* %162 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %161];
    i32 %163 = load i32* %162;
    i1 %164 = icmp neq i32 %163, i32 64;
    cbr i1 %164(prob = 0.984615), ^while.body4, ^b3;
  ^b8:
    i32 %165 = phi [^b5, i32 %117] [^if.then7, i32 %121];
    cbr i1 %84(prob = 0.5), ^if.then8, ^b10;
  ^b9:
    i32 %166 = phi [^b6, i32 %118] [^b11, i32 %172];
    i32 %167 = phi [^b6, i32 %119] [^b11, i32 %174];
    i1 %168 = icmp eq i32 %22, i32 45;
    cbr i1 %168(prob = 0.5), ^while.header3, ^b12;
  ^b10:
    i32 %169 = phi [^b8, i32 %165] [^if.then8, i32 1] [^while.body8, i32 %202];
    i32 %170 = add i32 %72, i32 -1;
    i32* %171 = getelementptr &([10000 * i32]* %37)[i64 0][i32 %170];
    store i32* %171 with i32 %169;
    ubr ^indirect1;
  ^b11:
    i32 %172 = phi [^while.header1, i32 %145] [^while.body7, i32 %180];
    i32 %173 = phi [^while.header1, i32 %146] [^while.body7, i32 %178];
    i32 %174 = add i32 %173, i32 1;
    i32* %175 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %174];
    store i32* %175 with i32 43;
    ubr ^b9;
  ^while.body7:
    i32* %176 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %145];
    store i32* %176 with i32 32;
    i32* %177 = getelementptr &(i32* %176)[i64 1];
    store i32* %177 with i32 %148;
    i32 %178 = add i32 %146, i32 -1;
    i1 %179 = icmp neq i32 %178, i32 0;
    i32 %180 = add i32 %145, i32 2;
    cbr i1 %179(prob = 0.5), ^while.header1, ^b11;
  ^if.then8:
    i1 %181 = icmp neq i32 %92, i32 0;
    cbr i1 %181(prob = 0.984615), ^while.body8, ^b10;
  ^while.header3:
    i32 %182 = phi [^b9, i32 %166] [^while.body9, i32 %213];
    i32 %183 = phi [^b9, i32 %167] [^while.body9, i32 %211];
    i32* %184 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %183];
    i32 %185 = load i32* %184;
    i1 %186 = icmp eq i32 %185, i32 43;
    i1 %187 = icmp eq i32 %185, i32 45;
    i1 %188 = or i1 %186, i1 %187;
    i1 %189 = icmp eq i32 %185, i32 42;
    i1 %190 = icmp eq i32 %185, i32 47;
    i1 %191 = or i1 %189, i1 %190;
    i1 %192 = or i1 %188, i1 %191;
    i1 %193 = icmp eq i32 %185, i32 37;
    i1 %194 = icmp eq i32 %185, i32 94;
    i1 %195 = or i1 %193, i1 %194;
    i1 %196 = or i1 %192, i1 %195;
    cbr i1 %196(prob = 0.999519), ^while.body9, ^b13;
  ^b12:
    i32 %197 = phi [^b9, i32 %166] [^b13, i32 %205];
    i32 %198 = phi [^b9, i32 %167] [^b13, i32 %207];
    i1 %199 = icmp eq i32 %22, i32 42;
    cbr i1 %199(prob = 0.5), ^while.header4, ^b14;
  ^while.body8:
    i32 %200 = phi [^if.then8, i32 %92] [^while.body8, i32 %203];
    i32 %201 = phi [^if.then8, i32 1] [^while.body8, i32 %202];
    i32 %202 = mul i32 %94, i32 %201;
    i32 %203 = add i32 %200, i32 -1;
    i1 %204 = icmp neq i32 %203, i32 0;
    cbr i1 %204(prob = 0.984615), ^while.body8, ^b10;
  ^b13:
    i32 %205 = phi [^while.header3, i32 %182] [^while.body9, i32 %213];
    i32 %206 = phi [^while.header3, i32 %183] [^while.body9, i32 %211];
    i32 %207 = add i32 %206, i32 1;
    i32* %208 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %207];
    store i32* %208 with i32 45;
    ubr ^b12;
  ^while.body9:
    i32* %209 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %182];
    store i32* %209 with i32 32;
    i32* %210 = getelementptr &(i32* %209)[i64 1];
    store i32* %210 with i32 %185;
    i32 %211 = add i32 %183, i32 -1;
    i1 %212 = icmp neq i32 %211, i32 0;
    i32 %213 = add i32 %182, i32 2;
    cbr i1 %212(prob = 0.5), ^while.header3, ^b13;
  ^while.header4:
    i32 %214 = phi [^b12, i32 %197] [^while.body10, i32 %236];
    i32 %215 = phi [^b12, i32 %198] [^while.body10, i32 %234];
    i32* %216 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %215];
    i32 %217 = load i32* %216;
    i1 %218 = icmp eq i32 %217, i32 42;
    i1 %219 = icmp eq i32 %217, i32 47;
    i1 %220 = or i1 %218, i1 %219;
    i1 %221 = icmp eq i32 %217, i32 37;
    i1 %222 = icmp eq i32 %217, i32 94;
    i1 %223 = or i1 %221, i1 %222;
    i1 %224 = or i1 %220, i1 %223;
    cbr i1 %224(prob = 0.998077), ^while.body10, ^b15;
  ^b14:
    i32 %225 = phi [^b12, i32 %197] [^b15, i32 %228];
    i32 %226 = phi [^b12, i32 %198] [^b15, i32 %230];
    i1 %227 = icmp eq i32 %22, i32 47;
    cbr i1 %227(prob = 0.5), ^while.header5, ^b16;
  ^b15:
    i32 %228 = phi [^while.header4, i32 %214] [^while.body10, i32 %236];
    i32 %229 = phi [^while.header4, i32 %215] [^while.body10, i32 %234];
    i32 %230 = add i32 %229, i32 1;
    i32* %231 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %230];
    store i32* %231 with i32 42;
    ubr ^b14;
  ^while.body10:
    i32* %232 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %214];
    store i32* %232 with i32 32;
    i32* %233 = getelementptr &(i32* %232)[i64 1];
    store i32* %233 with i32 %217;
    i32 %234 = add i32 %215, i32 -1;
    i1 %235 = icmp neq i32 %234, i32 0;
    i32 %236 = add i32 %214, i32 2;
    cbr i1 %235(prob = 0.5), ^while.header4, ^b15;
  ^while.header5:
    i32 %237 = phi [^b14, i32 %225] [^while.body11, i32 %263];
    i32 %238 = phi [^b14, i32 %226] [^while.body11, i32 %261];
    i32* %239 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %238];
    i32 %240 = load i32* %239;
    i1 %241 = icmp eq i32 %240, i32 42;
    i1 %242 = icmp eq i32 %240, i32 47;
    i1 %243 = or i1 %241, i1 %242;
    i1 %244 = icmp eq i32 %240, i32 37;
    i1 %245 = icmp eq i32 %240, i32 94;
    i1 %246 = or i1 %244, i1 %245;
    i1 %247 = or i1 %243, i1 %246;
    cbr i1 %247(prob = 0.998077), ^while.body11, ^b17;
  ^b16:
    i32 %248 = phi [^b14, i32 %225] [^b17, i32 %251];
    i32 %249 = phi [^b14, i32 %226] [^b17, i32 %253];
    i1 %250 = icmp eq i32 %22, i32 37;
    cbr i1 %250(prob = 0.5), ^while.header6, ^b18;
  ^b17:
    i32 %251 = phi [^while.header5, i32 %237] [^while.body11, i32 %263];
    i32 %252 = phi [^while.header5, i32 %238] [^while.body11, i32 %261];
    i32 %253 = add i32 %252, i32 1;
    i32* %254 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %253];
    store i32* %254 with i32 47;
    ubr ^b16;
  ^b18:
    i32 %255 = phi [^b16, i32 %249] [^b19, i32 %277];
    i32 %256 = phi [^b16, i32 %248] [^b19, i32 %275];
    i32* %257 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %256];
    store i32* %257 with i32 32;
    i32 %258 = add i32 %256, i32 1;
    ubr ^while.header;
  ^while.body11:
    i32* %259 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %237];
    store i32* %259 with i32 32;
    i32* %260 = getelementptr &(i32* %259)[i64 1];
    store i32* %260 with i32 %240;
    i32 %261 = add i32 %238, i32 -1;
    i1 %262 = icmp neq i32 %261, i32 0;
    i32 %263 = add i32 %237, i32 2;
    cbr i1 %262(prob = 0.5), ^while.header5, ^b17;
  ^while.header6:
    i32 %264 = phi [^b16, i32 %248] [^while.body12, i32 %283];
    i32 %265 = phi [^b16, i32 %249] [^while.body12, i32 %281];
    i32* %266 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %265];
    i32 %267 = load i32* %266;
    i1 %268 = icmp eq i32 %267, i32 42;
    i1 %269 = icmp eq i32 %267, i32 47;
    i1 %270 = or i1 %268, i1 %269;
    i1 %271 = icmp eq i32 %267, i32 37;
    i1 %272 = icmp eq i32 %267, i32 94;
    i1 %273 = or i1 %271, i1 %272;
    i1 %274 = or i1 %270, i1 %273;
    cbr i1 %274(prob = 0.998077), ^while.body12, ^b19;
  ^b19:
    i32 %275 = phi [^while.header6, i32 %264] [^while.body12, i32 %283];
    i32 %276 = phi [^while.header6, i32 %265] [^while.body12, i32 %281];
    i32 %277 = add i32 %276, i32 1;
    i32* %278 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %277];
    store i32* %278 with i32 37;
    ubr ^b18;
  ^while.body12:
    i32* %279 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %264];
    store i32* %279 with i32 32;
    i32* %280 = getelementptr &(i32* %279)[i64 1];
    store i32* %280 with i32 %267;
    i32 %281 = add i32 %265, i32 -1;
    i1 %282 = icmp neq i32 %281, i32 0;
    i32 %283 = add i32 %264, i32 2;
    cbr i1 %282(prob = 0.5), ^while.header6, ^b19;
}
