internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [10000 * i32]* @ints, align 8 { Flexible };
internal [10000 * i32]* @chas, align 8 { Flexible };
internal [10000 * i32]* @get, align 8 { Flexible };
internal [10000 * i32]* @get2, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = icmp neq i32 %0, i32 13;
    i1 %2 = icmp neq i32 %0, i32 10;
    i1 %3 = and i1 %1, i1 %2;
    [10000 * i32]* %4 = ptrcast [10000 * i32]* @get to [10000 * i32]*;
    i32* %5 = getelementptr &([10000 * i32]* %4)[i64 0][i64 0];
    cbr i1 %3(prob = 0.984615), ^while.body, ^b;
  ^while.body:
    i32 %6 = phi [^entry, i32 %0] [^while.body, i32 %9];
    i32 %7 = phi [^entry, i32 0] [^while.body, i32 %13];
    i32* %8 = getelementptr &(i32* %5)[i32 %7];
    store i32* %8 with i32 %6;
    i32 %9 = call () -> i32 @getch();
    i1 %10 = icmp neq i32 %9, i32 13;
    i1 %11 = icmp neq i32 %9, i32 10;
    i1 %12 = and i1 %10, i1 %11;
    i32 %13 = add i32 %7, i32 1;
    cbr i1 %12(prob = 0.984615), ^while.body, ^b;
  ^b:
    i32 %14 = phi [^entry, i32 0] [^while.body, i32 %13];
    i1 %15 = icmp sgt i32 %14, i32 0;
    [10000 * i32]* %16 = ptrcast [10000 * i32]* @get2 to [10000 * i32]*;
    [10000 * i32]* %17 = ptrcast [10000 * i32]* @chas to [10000 * i32]*;
    cbr i1 %15(prob = 0.984615), ^while.body1, ^indirect;
  ^while.body1:
    i32 %18 = phi [^b, i32 0] [^b2, i32 %41];
    i32 %19 = phi [^b, i32 0] [^b2, i32 %43];
    i32 %20 = phi [^b, i32 1] [^b2, i32 %42];
    i32* %21 = getelementptr &([10000 * i32]* %4)[i64 0][i32 %19];
    i32 %22 = load i32* %21;
    i32 %23 = add i32 %22, i32 -48;
    i1 %24 = icmp ult i32 %23, i32 10;
    cbr i1 %24(prob = 0.5), ^if.then, ^if.else;
  ^indirect:
    i32 %25 = phi [^b, i32 1] [^b2, i32 %42];
    i32 %26 = phi [^b, i32 0] [^b2, i32 %41];
    i1 %27 = icmp sgt i32 %26, i32 0;
    cbr i1 %27(prob = 0.984615), ^super.header, ^b1;
  ^if.then:
    i32* %28 = getelementptr &([10000 * i32]* %16)[i64 0][i32 %20];
    store i32* %28 with i32 %22;
    i32 %29 = add i32 %20, i32 1;
    ubr ^b2;
  ^if.else:
    i1 %30 = icmp eq i32 %22, i32 40;
    cbr i1 %30(prob = 0.49), ^if.then1, ^b3;
  ^super.header:
    i32 %31 = add i32 %26, i32 -3;
    i1 %32 = icmp sgt i32 %31, i32 0;
    cbr i1 %32(prob = 0.941176), ^while.body2, ^scalar.header;
  ^b1:
    i32 %33 = phi [^indirect, i32 %25] [^scalar.header, i32 %68] [^while.body4, i32 %85];
    i32* %34 = getelementptr &([10000 * i32]* %16)[i64 0][i32 %33];
    store i32* %34 with i32 64;
    i32* %35 = getelementptr &([10000 * i32]* %16)[i64 0][i64 1];
    i32 %36 = load i32* %35;
    i1 %37 = icmp neq i32 %36, i32 64;
    [10000 * i32]* %38 = ptrcast [10000 * i32]* @ints to [10000 * i32]*;
    cbr i1 %37(prob = 0.984615), ^while.body3, ^b4;
  ^if.then1:
    i32 %39 = add i32 %18, i32 1;
    i32* %40 = getelementptr &([10000 * i32]* %17)[i64 0][i32 %39];
    store i32* %40 with i32 40;
    ubr ^b3;
  ^b2:
    i32 %41 = phi [^if.then, i32 %18] [^b21, i32 %273];
    i32 %42 = phi [^if.then, i32 %29] [^b21, i32 %276];
    i32 %43 = add i32 %19, i32 1;
    i1 %44 = icmp sgt i32 %14, i32 %43;
    cbr i1 %44(prob = 0.984615), ^while.body1, ^indirect;
  ^while.body2:
    i32 %45 = phi [^super.header, i32 %25] [^while.body2, i32 %65];
    i32 %46 = phi [^super.header, i32 %26] [^while.body2, i32 %63];
    i32* %47 = getelementptr &([10000 * i32]* %17)[i64 0][i32 %46];
    i32 %48 = load i32* %47;
    i32* %49 = getelementptr &([10000 * i32]* %16)[i64 0][i32 %45];
    store i32* %49 with i32 32;
    i32* %50 = getelementptr &(i32* %49)[i64 1];
    store i32* %50 with i32 %48;
    i32* %51 = getelementptr &(i32* %47)[i64 -1];
    i32 %52 = load i32* %51;
    i32* %53 = getelementptr &(i32* %49)[i64 2];
    store i32* %53 with i32 32;
    i32* %54 = getelementptr &(i32* %49)[i64 3];
    store i32* %54 with i32 %52;
    i32* %55 = getelementptr &(i32* %47)[i64 -2];
    i32 %56 = load i32* %55;
    i32* %57 = getelementptr &(i32* %49)[i64 4];
    store i32* %57 with i32 32;
    i32* %58 = getelementptr &(i32* %49)[i64 5];
    store i32* %58 with i32 %56;
    i32* %59 = getelementptr &(i32* %47)[i64 -3];
    i32 %60 = load i32* %59;
    i32* %61 = getelementptr &(i32* %49)[i64 6];
    store i32* %61 with i32 32;
    i32* %62 = getelementptr &(i32* %49)[i64 7];
    store i32* %62 with i32 %60;
    i32 %63 = add i32 %46, i32 -4;
    i1 %64 = icmp sgt i32 %63, i32 3;
    i32 %65 = add i32 %45, i32 8;
    cbr i1 %64(prob = 0.941176), ^while.body2, ^scalar.header;
  ^scalar.header:
    i32 %66 = phi [^super.header, i32 %25] [^while.body2, i32 %65];
    i32 %67 = phi [^super.header, i32 %26] [^while.body2, i32 %63];
    i32 %68 = phi [^super.header, i32 undef] [^while.body2, i32 %65];
    i1 %69 = icmp sgt i32 %67, i32 0;
    cbr i1 %69(prob = 0.75), ^while.body4, ^b1;
  ^b3:
    i32 %70 = phi [^if.else, i32 %18] [^if.then1, i32 %39];
    i1 %71 = icmp eq i32 %22, i32 94;
    cbr i1 %71(prob = 0.49), ^if.then2, ^b5;
  ^while.body3:
    i1 %72 = icmp eq i32 %36, i32 43;
    cbr i1 %72(prob = 0.49), ^if.then3, ^b6;
  ^b4:
    i32* %73 = getelementptr &([10000 * i32]* %38)[i64 0][i64 1];
    i32 %74 = load i32* %73;
    call (i32) -> void @putint(i32 %74);
    ret i32 0;
  ^if.then2:
    i32 %75 = add i32 %70, i32 1;
    i32* %76 = getelementptr &([10000 * i32]* %17)[i64 0][i32 %75];
    store i32* %76 with i32 94;
    ubr ^b5;
  ^while.body4 {scalar}:
    i32 %77 = phi [^scalar.header, i32 %67] [^while.body4, i32 %83];
    i32 %78 = phi [^scalar.header, i32 %66] [^while.body4, i32 %85];
    i32* %79 = getelementptr &([10000 * i32]* %17)[i64 0][i32 %77];
    i32 %80 = load i32* %79;
    i32* %81 = getelementptr &([10000 * i32]* %16)[i64 0][i32 %78];
    store i32* %81 with i32 32;
    i32* %82 = getelementptr &(i32* %81)[i64 1];
    store i32* %82 with i32 %80;
    i32 %83 = add i32 %77, i32 -1;
    i1 %84 = icmp sgt i32 %83, i32 0;
    i32 %85 = add i32 %78, i32 2;
    cbr i1 %84(prob = 0.75), ^while.body4, ^b1;
  ^if.then3:
    i32 %86 = phi [^while.body3, i32 1] [^b6, i32 %107] [^while.body8, i32 %169];
    i32 %87 = phi [^while.body3, i32 0] [^b6, i32 %106] [^while.body8, i32 %167];
    i32* %88 = getelementptr &([10000 * i32]* %38)[i64 0][i32 %87];
    i32 %89 = load i32* %88;
    i32* %90 = getelementptr &(i32* %88)[i64 -1];
    i32 %91 = load i32* %90;
    i32 %92 = add i32 %89, i32 %91;
    i32* %93 = getelementptr &([10000 * i32]* %16)[i64 0][i32 %86];
    i32 %94 = load i32* %93;
    i1 %95 = icmp eq i32 %94, i32 43;
    i32 %96 = select i1 %95 ? i32 %92 : i32 0;
    i32 %97 = sub i32 %91, i32 %89;
    i1 %98 = icmp eq i32 %94, i32 45;
    i32 %99 = select i1 %98 ? i32 %97 : i32 %96;
    i32 %100 = mul i32 %89, i32 %91;
    i1 %101 = icmp eq i32 %94, i32 42;
    i32 %102 = select i1 %101 ? i32 %100 : i32 %99;
    i1 %103 = icmp eq i32 %94, i32 47;
    cbr i1 %103(prob = 0.49), ^if.then4, ^b7;
  ^b5:
    i32 %104 = phi [^b3, i32 %70] [^if.then2, i32 %75];
    i1 %105 = icmp eq i32 %22, i32 41;
    cbr i1 %105(prob = 0.49), ^if.then5, ^b8;
  ^b6:
    i32 %106 = phi [^while.body3, i32 0] [^while.body8, i32 %167];
    i32 %107 = phi [^while.body3, i32 1] [^while.body8, i32 %169];
    i32* %108 = getelementptr &([10000 * i32]* %16)[i64 0][i32 %107];
    i32 %109 = load i32* %108;
    i1 %110 = icmp eq i32 %109, i32 45;
    i1 %111 = icmp eq i32 %109, i32 42;
    i1 %112 = or i1 %110, i1 %111;
    i1 %113 = icmp eq i32 %109, i32 47;
    i1 %114 = icmp eq i32 %109, i32 37;
    i1 %115 = or i1 %113, i1 %114;
    i1 %116 = or i1 %112, i1 %115;
    i1 %117 = icmp eq i32 %109, i32 94;
    i1 %118 = or i1 %116, i1 %117;
    cbr i1 %118(prob = 0.96875), ^if.then3, ^if.else1;
  ^if.then4:
    i32 %119 = sdiv i32 %91, i32 %89;
    ubr ^b7;
  ^if.then5:
    i32* %120 = getelementptr &([10000 * i32]* %17)[i64 0][i32 %104];
    i32 %121 = load i32* %120;
    i1 %122 = icmp neq i32 %121, i32 40;
    i32 %123 = add i32 %104, i32 -1;
    cbr i1 %122(prob = 0.984615), ^while.body5, ^b8;
  ^b7:
    i32 %124 = phi [^if.then3, i32 %102] [^if.then4, i32 %119];
    i1 %125 = icmp eq i32 %94, i32 37;
    cbr i1 %125(prob = 0.49), ^if.then6, ^b9;
  ^b8:
    i32 %126 = phi [^b5, i32 %20] [^if.then5, i32 %20] [^while.body5, i32 %139];
    i32 %127 = phi [^b5, i32 %104] [^if.then5, i32 %123] [^while.body5, i32 %140];
    i1 %128 = icmp eq i32 %22, i32 43;
    cbr i1 %128(prob = 0.49), ^while.header, ^b10;
  ^if.else1:
    i1 %129 = icmp neq i32 %109, i32 32;
    cbr i1 %129(prob = 0.5), ^if.then7, ^b11;
  ^if.then6:
    i32 %130 = srem i32 %91, i32 %89;
    ubr ^b9;
  ^while.body5:
    i32 %131 = phi [^if.then5, i32 %123] [^while.body5, i32 %140];
    i32 %132 = phi [^if.then5, i32 %20] [^while.body5, i32 %139];
    i32 %133 = phi [^if.then5, i32 %121] [^while.body5, i32 %137];
    i32* %134 = getelementptr &([10000 * i32]* %16)[i64 0][i32 %132];
    store i32* %134 with i32 32;
    i32* %135 = getelementptr &(i32* %134)[i64 1];
    store i32* %135 with i32 %133;
    i32* %136 = getelementptr &([10000 * i32]* %17)[i64 0][i32 %131];
    i32 %137 = load i32* %136;
    i1 %138 = icmp neq i32 %137, i32 40;
    i32 %139 = add i32 %132, i32 2;
    i32 %140 = add i32 %131, i32 -1;
    cbr i1 %138(prob = 0.984615), ^while.body5, ^b8;
  ^while.header:
    i32 %141 = phi [^b8, i32 %126] [^while.body6, i32 %186];
    i32 %142 = phi [^b8, i32 %127] [^while.body6, i32 %184];
    i32* %143 = getelementptr &([10000 * i32]* %17)[i64 0][i32 %142];
    i32 %144 = load i32* %143;
    i1 %145 = icmp eq i32 %144, i32 43;
    i1 %146 = icmp eq i32 %144, i32 45;
    i1 %147 = or i1 %145, i1 %146;
    i1 %148 = icmp eq i32 %144, i32 42;
    i1 %149 = icmp eq i32 %144, i32 47;
    i1 %150 = or i1 %148, i1 %149;
    i1 %151 = or i1 %147, i1 %150;
    i1 %152 = icmp eq i32 %144, i32 37;
    i1 %153 = icmp eq i32 %144, i32 94;
    i1 %154 = or i1 %152, i1 %153;
    i1 %155 = or i1 %151, i1 %154;
    cbr i1 %155(prob = 0.999519), ^while.body6, ^b13;
  ^if.then7:
    i32 %156 = add i32 %106, i32 1;
    i32* %157 = getelementptr &([10000 * i32]* %38)[i64 0][i32 %156];
    i32 %158 = add i32 %109, i32 -48;
    store i32* %157 with i32 %158;
    i32* %159 = getelementptr &(i32* %108)[i64 1];
    i32 %160 = load i32* %159;
    i1 %161 = icmp neq i32 %160, i32 32;
    cbr i1 %161(prob = 0.984615), ^while.body7, ^b12;
  ^b9:
    i32 %162 = phi [^b7, i32 %124] [^if.then6, i32 %130];
    i1 %163 = icmp eq i32 %94, i32 94;
    cbr i1 %163(prob = 0.49), ^if.then8, ^b14;
  ^b10:
    i32 %164 = phi [^b8, i32 %126] [^b13, i32 %176];
    i32 %165 = phi [^b8, i32 %127] [^b13, i32 %178];
    i1 %166 = icmp eq i32 %22, i32 45;
    cbr i1 %166(prob = 0.49), ^while.header1, ^b15;
  ^b11:
    i32 %167 = phi [^if.else1, i32 %106] [^b12, i32 %156] [^b14, i32 %181];
    i32 %168 = phi [^if.else1, i32 %107] [^b12, i32 %175] [^b14, i32 %86];
    i32 %169 = add i32 %168, i32 1;
    i32* %170 = getelementptr &([10000 * i32]* %16)[i64 0][i32 %169];
    i32 %171 = load i32* %170;
    i1 %172 = icmp neq i32 %171, i32 64;
    cbr i1 %172(prob = 0.984615), ^while.body8, ^b4;
  ^b12:
    i32 %173 = phi [^if.then7, i32 1] [^while.body7, i32 %197];
    i32 %174 = add i32 %107, i32 -1;
    i32 %175 = add i32 %173, i32 %174;
    ubr ^b11;
  ^b13:
    i32 %176 = phi [^while.header, i32 %141] [^while.body6, i32 %186];
    i32 %177 = phi [^while.header, i32 %142] [^while.body6, i32 %184];
    i32 %178 = add i32 %177, i32 1;
    i32* %179 = getelementptr &([10000 * i32]* %17)[i64 0][i32 %178];
    store i32* %179 with i32 43;
    ubr ^b10;
  ^b14:
    i32 %180 = phi [^b9, i32 %162] [^if.then8, i32 1] [^while.body9, i32 %224];
    store i32* %90 with i32 %180;
    i32 %181 = add i32 %87, i32 -1;
    ubr ^b11;
  ^while.body6:
    i32* %182 = getelementptr &([10000 * i32]* %16)[i64 0][i32 %141];
    store i32* %182 with i32 32;
    i32* %183 = getelementptr &(i32* %182)[i64 1];
    store i32* %183 with i32 %144;
    i32 %184 = add i32 %142, i32 -1;
    i1 %185 = icmp neq i32 %184, i32 0;
    i32 %186 = add i32 %141, i32 2;
    cbr i1 %185(prob = 0.5), ^while.header, ^b13;
  ^while.body7:
    i32 %187 = phi [^if.then7, i32 %158] [^while.body7, i32 %193];
    i32 %188 = phi [^if.then7, i32 1] [^while.body7, i32 %197];
    i32* %189 = getelementptr &(i32* %108)[i32 %188];
    i32 %190 = load i32* %189;
    i32 %191 = mul i32 %187, i32 10;
    i32 %192 = add i32 %191, i32 -48;
    i32 %193 = add i32 %190, i32 %192;
    store i32* %157 with i32 %193;
    i32* %194 = getelementptr &(i32* %189)[i64 1];
    i32 %195 = load i32* %194;
    i1 %196 = icmp neq i32 %195, i32 32;
    i32 %197 = add i32 %188, i32 1;
    cbr i1 %196(prob = 0.984615), ^while.body7, ^b12;
  ^if.then8:
    i1 %198 = icmp neq i32 %89, i32 0;
    cbr i1 %198(prob = 0.984615), ^while.body9, ^b14;
  ^while.header1:
    i32 %199 = phi [^b10, i32 %164] [^while.body10, i32 %231];
    i32 %200 = phi [^b10, i32 %165] [^while.body10, i32 %229];
    i32* %201 = getelementptr &([10000 * i32]* %17)[i64 0][i32 %200];
    i32 %202 = load i32* %201;
    i1 %203 = icmp eq i32 %202, i32 43;
    i1 %204 = icmp eq i32 %202, i32 45;
    i1 %205 = or i1 %203, i1 %204;
    i1 %206 = icmp eq i32 %202, i32 42;
    i1 %207 = icmp eq i32 %202, i32 47;
    i1 %208 = or i1 %206, i1 %207;
    i1 %209 = or i1 %205, i1 %208;
    i1 %210 = icmp eq i32 %202, i32 37;
    i1 %211 = icmp eq i32 %202, i32 94;
    i1 %212 = or i1 %210, i1 %211;
    i1 %213 = or i1 %209, i1 %212;
    cbr i1 %213(prob = 0.999519), ^while.body10, ^b16;
  ^while.body8:
    i1 %214 = icmp eq i32 %171, i32 43;
    cbr i1 %214(prob = 0.49), ^if.then3, ^b6;
  ^b15:
    i32 %215 = phi [^b10, i32 %164] [^b16, i32 %218];
    i32 %216 = phi [^b10, i32 %165] [^b16, i32 %220];
    i1 %217 = icmp eq i32 %22, i32 42;
    cbr i1 %217(prob = 0.49), ^while.header2, ^b17;
  ^b16:
    i32 %218 = phi [^while.header1, i32 %199] [^while.body10, i32 %231];
    i32 %219 = phi [^while.header1, i32 %200] [^while.body10, i32 %229];
    i32 %220 = add i32 %219, i32 1;
    i32* %221 = getelementptr &([10000 * i32]* %17)[i64 0][i32 %220];
    store i32* %221 with i32 45;
    ubr ^b15;
  ^while.body9:
    i32 %222 = phi [^if.then8, i32 %89] [^while.body9, i32 %225];
    i32 %223 = phi [^if.then8, i32 1] [^while.body9, i32 %224];
    i32 %224 = mul i32 %91, i32 %223;
    i32 %225 = add i32 %222, i32 -1;
    i1 %226 = icmp neq i32 %225, i32 0;
    cbr i1 %226(prob = 0.984615), ^while.body9, ^b14;
  ^while.body10:
    i32* %227 = getelementptr &([10000 * i32]* %16)[i64 0][i32 %199];
    store i32* %227 with i32 32;
    i32* %228 = getelementptr &(i32* %227)[i64 1];
    store i32* %228 with i32 %202;
    i32 %229 = add i32 %200, i32 -1;
    i1 %230 = icmp neq i32 %229, i32 0;
    i32 %231 = add i32 %199, i32 2;
    cbr i1 %230(prob = 0.5), ^while.header1, ^b16;
  ^while.header2:
    i32 %232 = phi [^b15, i32 %215] [^while.body11, i32 %254];
    i32 %233 = phi [^b15, i32 %216] [^while.body11, i32 %252];
    i32* %234 = getelementptr &([10000 * i32]* %17)[i64 0][i32 %233];
    i32 %235 = load i32* %234;
    i1 %236 = icmp eq i32 %235, i32 42;
    i1 %237 = icmp eq i32 %235, i32 47;
    i1 %238 = or i1 %236, i1 %237;
    i1 %239 = icmp eq i32 %235, i32 37;
    i1 %240 = icmp eq i32 %235, i32 94;
    i1 %241 = or i1 %239, i1 %240;
    i1 %242 = or i1 %238, i1 %241;
    cbr i1 %242(prob = 0.998077), ^while.body11, ^b18;
  ^b17:
    i32 %243 = phi [^b15, i32 %215] [^b18, i32 %246];
    i32 %244 = phi [^b15, i32 %216] [^b18, i32 %248];
    i1 %245 = icmp eq i32 %22, i32 47;
    cbr i1 %245(prob = 0.49), ^while.header3, ^b19;
  ^b18:
    i32 %246 = phi [^while.header2, i32 %232] [^while.body11, i32 %254];
    i32 %247 = phi [^while.header2, i32 %233] [^while.body11, i32 %252];
    i32 %248 = add i32 %247, i32 1;
    i32* %249 = getelementptr &([10000 * i32]* %17)[i64 0][i32 %248];
    store i32* %249 with i32 42;
    ubr ^b17;
  ^while.body11:
    i32* %250 = getelementptr &([10000 * i32]* %16)[i64 0][i32 %232];
    store i32* %250 with i32 32;
    i32* %251 = getelementptr &(i32* %250)[i64 1];
    store i32* %251 with i32 %235;
    i32 %252 = add i32 %233, i32 -1;
    i1 %253 = icmp neq i32 %252, i32 0;
    i32 %254 = add i32 %232, i32 2;
    cbr i1 %253(prob = 0.5), ^while.header2, ^b18;
  ^while.header3:
    i32 %255 = phi [^b17, i32 %243] [^while.body12, i32 %281];
    i32 %256 = phi [^b17, i32 %244] [^while.body12, i32 %279];
    i32* %257 = getelementptr &([10000 * i32]* %17)[i64 0][i32 %256];
    i32 %258 = load i32* %257;
    i1 %259 = icmp eq i32 %258, i32 42;
    i1 %260 = icmp eq i32 %258, i32 47;
    i1 %261 = or i1 %259, i1 %260;
    i1 %262 = icmp eq i32 %258, i32 37;
    i1 %263 = icmp eq i32 %258, i32 94;
    i1 %264 = or i1 %262, i1 %263;
    i1 %265 = or i1 %261, i1 %264;
    cbr i1 %265(prob = 0.998077), ^while.body12, ^b20;
  ^b19:
    i32 %266 = phi [^b17, i32 %243] [^b20, i32 %269];
    i32 %267 = phi [^b17, i32 %244] [^b20, i32 %271];
    i1 %268 = icmp eq i32 %22, i32 37;
    cbr i1 %268(prob = 0.49), ^while.header4, ^b21;
  ^b20:
    i32 %269 = phi [^while.header3, i32 %255] [^while.body12, i32 %281];
    i32 %270 = phi [^while.header3, i32 %256] [^while.body12, i32 %279];
    i32 %271 = add i32 %270, i32 1;
    i32* %272 = getelementptr &([10000 * i32]* %17)[i64 0][i32 %271];
    store i32* %272 with i32 47;
    ubr ^b19;
  ^b21:
    i32 %273 = phi [^b19, i32 %267] [^b22, i32 %295];
    i32 %274 = phi [^b19, i32 %266] [^b22, i32 %293];
    i32* %275 = getelementptr &([10000 * i32]* %16)[i64 0][i32 %274];
    store i32* %275 with i32 32;
    i32 %276 = add i32 %274, i32 1;
    ubr ^b2;
  ^while.body12:
    i32* %277 = getelementptr &([10000 * i32]* %16)[i64 0][i32 %255];
    store i32* %277 with i32 32;
    i32* %278 = getelementptr &(i32* %277)[i64 1];
    store i32* %278 with i32 %258;
    i32 %279 = add i32 %256, i32 -1;
    i1 %280 = icmp neq i32 %279, i32 0;
    i32 %281 = add i32 %255, i32 2;
    cbr i1 %280(prob = 0.5), ^while.header3, ^b20;
  ^while.header4:
    i32 %282 = phi [^b19, i32 %266] [^while.body13, i32 %301];
    i32 %283 = phi [^b19, i32 %267] [^while.body13, i32 %299];
    i32* %284 = getelementptr &([10000 * i32]* %17)[i64 0][i32 %283];
    i32 %285 = load i32* %284;
    i1 %286 = icmp eq i32 %285, i32 42;
    i1 %287 = icmp eq i32 %285, i32 47;
    i1 %288 = or i1 %286, i1 %287;
    i1 %289 = icmp eq i32 %285, i32 37;
    i1 %290 = icmp eq i32 %285, i32 94;
    i1 %291 = or i1 %289, i1 %290;
    i1 %292 = or i1 %288, i1 %291;
    cbr i1 %292(prob = 0.998077), ^while.body13, ^b22;
  ^b22:
    i32 %293 = phi [^while.header4, i32 %282] [^while.body13, i32 %301];
    i32 %294 = phi [^while.header4, i32 %283] [^while.body13, i32 %299];
    i32 %295 = add i32 %294, i32 1;
    i32* %296 = getelementptr &([10000 * i32]* %17)[i64 0][i32 %295];
    store i32* %296 with i32 37;
    ubr ^b21;
  ^while.body13:
    i32* %297 = getelementptr &([10000 * i32]* %16)[i64 0][i32 %282];
    store i32* %297 with i32 32;
    i32* %298 = getelementptr &(i32* %297)[i64 1];
    store i32* %298 with i32 %285;
    i32 %299 = add i32 %283, i32 -1;
    i1 %300 = icmp neq i32 %299, i32 0;
    i32 %301 = add i32 %282, i32 2;
    cbr i1 %300(prob = 0.5), ^while.header4, ^b22;
}
