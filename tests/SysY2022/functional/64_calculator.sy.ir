internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal [10000 * i32]* @ints;
internal [10000 * i32]* @chas;
internal [10000 * i32]* @get;
internal [10000 * i32]* @get2;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %0 = getelementptr &([10000 * i32]* @get)[i64 0][i64 0];
    i32 %1 = call () -> i32 @getch();
    ubr ^while.header;
^while.header:
    i32 %2 = phi [^entry, i32 0] [^while.body, i32 %8];
    i32 %3 = phi [^entry, i32 %1] [^while.body, i32 %9];
    i1 %4 = scmp neq i32 %3, i32 13;
    cbr i1 %4(prob = 0.5), ^b, ^b1;
^b:
    i1 %5 = scmp neq i32 %3, i32 10;
    ubr ^b1;
^b1:
    i1 %6 = phi [^while.header, i1 false] [^b, i1 %5];
    cbr i1 %6(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i32* %7 = getelementptr &(i32* %0)[i32 %2];
    store i32* %7 with i32 %3;
    i32 %8 = add i32 %2, i32 1;
    i32 %9 = call () -> i32 @getch();
    ubr ^while.header;
^while.header1:
    i32 %10 = phi [^b1, i32 1] [^b6, i32 %108];
    i32 %11 = phi [^b1, i32 0] [^b6, i32 %109];
    i32 %12 = phi [^b1, i32 0] [^b6, i32 %110];
    i1 %13 = scmp lt i32 %12, i32 %2;
    cbr i1 %13(prob = 0.97), ^while.body1, ^indirect;
^while.body1:
    i32* %14 = getelementptr &([10000 * i32]* @get)[i64 0][i32 %12];
    i32 %15 = load i32* %14;
    i1 %16 = scmp gt i32 %15, i32 47;
    cbr i1 %16(prob = 0.5), ^b2, ^b3;
^indirect:
    i1 %17 = scmp gt i32 %11, i32 0;
    cbr i1 %17(prob = 0.97), ^super.header, ^b4;
^b2:
    i1 %18 = scmp le i32 %15, i32 57;
    ubr ^b3;
^b3:
    i1 %19 = phi [^while.body1, i1 false] [^b2, i1 %18];
    cbr i1 %19(prob = 0.5), ^if.then, ^if.else;
^super.header:
    i32 %20 = phi [^indirect, i32 %11] [^entry1, i32 %22];
    i32 %21 = phi [^indirect, i32 %10] [^entry1, i32 %95];
    i32 %22 = add i32 %20, i32 -16;
    i1 %23 = scmp gt i32 %22, i32 0;
    cbr i1 %23(prob = 0.67), ^entry1, ^super.header1;
^b4:
    i32 %24 = phi [^indirect, i32 %10] [^entry4, i32 %187];
    i32* %25 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %24];
    store i32* %25 with i32 64;
    i32* %26 = getelementptr &([10000 * i32]* @get2)[i64 0][i64 1];
    i32 %27 = load i32* %26;
    i1 %28 = scmp neq i32 %27, i32 64;
    cbr i1 %28(prob = 0.97), ^while.body2, ^b5;
^if.then:
    i32* %29 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %10];
    store i32* %29 with i32 %15;
    i32 %30 = add i32 %10, i32 1;
    ubr ^b6;
^entry1:
    i32* %31 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %20];
    i32 %32 = load i32* %31;
    i32* %33 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %21];
    store i32* %33 with i32 32;
    i32* %34 = getelementptr &(i32* %33)[i64 1];
    store i32* %34 with i32 %32;
    i32* %35 = getelementptr &(i32* %31)[i64 -1];
    i32 %36 = load i32* %35;
    i32* %37 = getelementptr &(i32* %33)[i64 2];
    store i32* %37 with i32 32;
    i32* %38 = getelementptr &(i32* %33)[i64 3];
    store i32* %38 with i32 %36;
    i32* %39 = getelementptr &(i32* %31)[i64 -2];
    i32 %40 = load i32* %39;
    i32* %41 = getelementptr &(i32* %33)[i64 4];
    store i32* %41 with i32 32;
    i32* %42 = getelementptr &(i32* %33)[i64 5];
    store i32* %42 with i32 %40;
    i32* %43 = getelementptr &(i32* %31)[i64 -3];
    i32 %44 = load i32* %43;
    i32* %45 = getelementptr &(i32* %33)[i64 6];
    store i32* %45 with i32 32;
    i32* %46 = getelementptr &(i32* %33)[i64 7];
    store i32* %46 with i32 %44;
    i32* %47 = getelementptr &(i32* %31)[i64 -4];
    i32 %48 = load i32* %47;
    i32* %49 = getelementptr &(i32* %33)[i64 8];
    store i32* %49 with i32 32;
    i32* %50 = getelementptr &(i32* %33)[i64 9];
    store i32* %50 with i32 %48;
    i32* %51 = getelementptr &(i32* %31)[i64 -5];
    i32 %52 = load i32* %51;
    i32* %53 = getelementptr &(i32* %33)[i64 10];
    store i32* %53 with i32 32;
    i32* %54 = getelementptr &(i32* %33)[i64 11];
    store i32* %54 with i32 %52;
    i32* %55 = getelementptr &(i32* %31)[i64 -6];
    i32 %56 = load i32* %55;
    i32* %57 = getelementptr &(i32* %33)[i64 12];
    store i32* %57 with i32 32;
    i32* %58 = getelementptr &(i32* %33)[i64 13];
    store i32* %58 with i32 %56;
    i32* %59 = getelementptr &(i32* %31)[i64 -7];
    i32 %60 = load i32* %59;
    i32* %61 = getelementptr &(i32* %33)[i64 14];
    store i32* %61 with i32 32;
    i32* %62 = getelementptr &(i32* %33)[i64 15];
    store i32* %62 with i32 %60;
    i32* %63 = getelementptr &(i32* %31)[i64 -8];
    i32 %64 = load i32* %63;
    i32* %65 = getelementptr &(i32* %33)[i64 16];
    store i32* %65 with i32 32;
    i32* %66 = getelementptr &(i32* %33)[i64 17];
    store i32* %66 with i32 %64;
    i32* %67 = getelementptr &(i32* %31)[i64 -9];
    i32 %68 = load i32* %67;
    i32* %69 = getelementptr &(i32* %33)[i64 18];
    store i32* %69 with i32 32;
    i32* %70 = getelementptr &(i32* %33)[i64 19];
    store i32* %70 with i32 %68;
    i32* %71 = getelementptr &(i32* %31)[i64 -10];
    i32 %72 = load i32* %71;
    i32* %73 = getelementptr &(i32* %33)[i64 20];
    store i32* %73 with i32 32;
    i32* %74 = getelementptr &(i32* %33)[i64 21];
    store i32* %74 with i32 %72;
    i32* %75 = getelementptr &(i32* %31)[i64 -11];
    i32 %76 = load i32* %75;
    i32* %77 = getelementptr &(i32* %33)[i64 22];
    store i32* %77 with i32 32;
    i32* %78 = getelementptr &(i32* %33)[i64 23];
    store i32* %78 with i32 %76;
    i32* %79 = getelementptr &(i32* %31)[i64 -12];
    i32 %80 = load i32* %79;
    i32* %81 = getelementptr &(i32* %33)[i64 24];
    store i32* %81 with i32 32;
    i32* %82 = getelementptr &(i32* %33)[i64 25];
    store i32* %82 with i32 %80;
    i32* %83 = getelementptr &(i32* %31)[i64 -13];
    i32 %84 = load i32* %83;
    i32* %85 = getelementptr &(i32* %33)[i64 26];
    store i32* %85 with i32 32;
    i32* %86 = getelementptr &(i32* %33)[i64 27];
    store i32* %86 with i32 %84;
    i32* %87 = getelementptr &(i32* %31)[i64 -14];
    i32 %88 = load i32* %87;
    i32* %89 = getelementptr &(i32* %33)[i64 28];
    store i32* %89 with i32 32;
    i32* %90 = getelementptr &(i32* %33)[i64 29];
    store i32* %90 with i32 %88;
    i32* %91 = getelementptr &(i32* %31)[i64 -15];
    i32 %92 = load i32* %91;
    i32* %93 = getelementptr &(i32* %33)[i64 30];
    store i32* %93 with i32 32;
    i32* %94 = getelementptr &(i32* %33)[i64 31];
    store i32* %94 with i32 %92;
    i32 %95 = add i32 %21, i32 32;
    ubr ^super.header;
^if.else:
    i1 %96 = scmp eq i32 %15, i32 40;
    cbr i1 %96(prob = 0.5), ^entry3, ^b9;
^super.header1:
    i32 %97 = phi [^super.header, i32 %20] [^entry2, i32 %99];
    i32 %98 = phi [^super.header, i32 %21] [^entry2, i32 %175];
    i32 %99 = add i32 %97, i32 -16;
    i1 %100 = scmp gt i32 %99, i32 0;
    cbr i1 %100(prob = 0.67), ^entry2, ^entry4;
^while.body2:
    i32 %101 = phi [^b4, i32 0] [^b31, i32 %279];
    i32 %102 = phi [^b4, i32 1] [^b31, i32 %281];
    i32* %103 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %102];
    i32 %104 = load i32* %103;
    i1 %105 = scmp eq i32 %104, i32 43;
    cbr i1 %105(prob = 0.5), ^b8, ^b7;
^b5:
    i32* %106 = getelementptr &([10000 * i32]* @ints)[i64 0][i64 1];
    i32 %107 = load i32* %106;
    call (i32) -> void @putint(i32 %107);
    ret i32 0;
^b6:
    i32 %108 = phi [^if.then, i32 %30] [^b47, i32 %333];
    i32 %109 = phi [^if.then, i32 %11] [^b47, i32 %330];
    i32 %110 = add i32 %12, i32 1;
    ubr ^while.header1;
^entry2:
    i32* %111 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %97];
    i32 %112 = load i32* %111;
    i32* %113 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %98];
    store i32* %113 with i32 32;
    i32* %114 = getelementptr &(i32* %113)[i64 1];
    store i32* %114 with i32 %112;
    i32* %115 = getelementptr &(i32* %111)[i64 -1];
    i32 %116 = load i32* %115;
    i32* %117 = getelementptr &(i32* %113)[i64 2];
    store i32* %117 with i32 32;
    i32* %118 = getelementptr &(i32* %113)[i64 3];
    store i32* %118 with i32 %116;
    i32* %119 = getelementptr &(i32* %111)[i64 -2];
    i32 %120 = load i32* %119;
    i32* %121 = getelementptr &(i32* %113)[i64 4];
    store i32* %121 with i32 32;
    i32* %122 = getelementptr &(i32* %113)[i64 5];
    store i32* %122 with i32 %120;
    i32* %123 = getelementptr &(i32* %111)[i64 -3];
    i32 %124 = load i32* %123;
    i32* %125 = getelementptr &(i32* %113)[i64 6];
    store i32* %125 with i32 32;
    i32* %126 = getelementptr &(i32* %113)[i64 7];
    store i32* %126 with i32 %124;
    i32* %127 = getelementptr &(i32* %111)[i64 -4];
    i32 %128 = load i32* %127;
    i32* %129 = getelementptr &(i32* %113)[i64 8];
    store i32* %129 with i32 32;
    i32* %130 = getelementptr &(i32* %113)[i64 9];
    store i32* %130 with i32 %128;
    i32* %131 = getelementptr &(i32* %111)[i64 -5];
    i32 %132 = load i32* %131;
    i32* %133 = getelementptr &(i32* %113)[i64 10];
    store i32* %133 with i32 32;
    i32* %134 = getelementptr &(i32* %113)[i64 11];
    store i32* %134 with i32 %132;
    i32* %135 = getelementptr &(i32* %111)[i64 -6];
    i32 %136 = load i32* %135;
    i32* %137 = getelementptr &(i32* %113)[i64 12];
    store i32* %137 with i32 32;
    i32* %138 = getelementptr &(i32* %113)[i64 13];
    store i32* %138 with i32 %136;
    i32* %139 = getelementptr &(i32* %111)[i64 -7];
    i32 %140 = load i32* %139;
    i32* %141 = getelementptr &(i32* %113)[i64 14];
    store i32* %141 with i32 32;
    i32* %142 = getelementptr &(i32* %113)[i64 15];
    store i32* %142 with i32 %140;
    i32* %143 = getelementptr &(i32* %111)[i64 -8];
    i32 %144 = load i32* %143;
    i32* %145 = getelementptr &(i32* %113)[i64 16];
    store i32* %145 with i32 32;
    i32* %146 = getelementptr &(i32* %113)[i64 17];
    store i32* %146 with i32 %144;
    i32* %147 = getelementptr &(i32* %111)[i64 -9];
    i32 %148 = load i32* %147;
    i32* %149 = getelementptr &(i32* %113)[i64 18];
    store i32* %149 with i32 32;
    i32* %150 = getelementptr &(i32* %113)[i64 19];
    store i32* %150 with i32 %148;
    i32* %151 = getelementptr &(i32* %111)[i64 -10];
    i32 %152 = load i32* %151;
    i32* %153 = getelementptr &(i32* %113)[i64 20];
    store i32* %153 with i32 32;
    i32* %154 = getelementptr &(i32* %113)[i64 21];
    store i32* %154 with i32 %152;
    i32* %155 = getelementptr &(i32* %111)[i64 -11];
    i32 %156 = load i32* %155;
    i32* %157 = getelementptr &(i32* %113)[i64 22];
    store i32* %157 with i32 32;
    i32* %158 = getelementptr &(i32* %113)[i64 23];
    store i32* %158 with i32 %156;
    i32* %159 = getelementptr &(i32* %111)[i64 -12];
    i32 %160 = load i32* %159;
    i32* %161 = getelementptr &(i32* %113)[i64 24];
    store i32* %161 with i32 32;
    i32* %162 = getelementptr &(i32* %113)[i64 25];
    store i32* %162 with i32 %160;
    i32* %163 = getelementptr &(i32* %111)[i64 -13];
    i32 %164 = load i32* %163;
    i32* %165 = getelementptr &(i32* %113)[i64 26];
    store i32* %165 with i32 32;
    i32* %166 = getelementptr &(i32* %113)[i64 27];
    store i32* %166 with i32 %164;
    i32* %167 = getelementptr &(i32* %111)[i64 -14];
    i32 %168 = load i32* %167;
    i32* %169 = getelementptr &(i32* %113)[i64 28];
    store i32* %169 with i32 32;
    i32* %170 = getelementptr &(i32* %113)[i64 29];
    store i32* %170 with i32 %168;
    i32* %171 = getelementptr &(i32* %111)[i64 -15];
    i32 %172 = load i32* %171;
    i32* %173 = getelementptr &(i32* %113)[i64 30];
    store i32* %173 with i32 32;
    i32* %174 = getelementptr &(i32* %113)[i64 31];
    store i32* %174 with i32 %172;
    i32 %175 = add i32 %98, i32 32;
    ubr ^super.header1;
^entry3:
    i32 %176 = add i32 %11, i32 1;
    i32* %177 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %176];
    store i32* %177 with i32 40;
    ubr ^b9;
^b7:
    i1 %178 = scmp eq i32 %104, i32 45;
    ubr ^b8;
^b8:
    i1 %179 = phi [^while.body2, i1 true] [^b7, i1 %178];
    cbr i1 %179(prob = 0.5), ^b11, ^b10;
^entry4:
    i32 %180 = phi [^super.header1, i32 %97] [^entry4, i32 %182];
    i32 %181 = phi [^super.header1, i32 %98] [^entry4, i32 %187];
    i32 %182 = add i32 %180, i32 -1;
    i32* %183 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %180];
    i32 %184 = load i32* %183;
    i32* %185 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %181];
    store i32* %185 with i32 32;
    i32* %186 = getelementptr &(i32* %185)[i64 1];
    store i32* %186 with i32 %184;
    i32 %187 = add i32 %181, i32 2;
    i1 %188 = scmp gt i32 %182, i32 0;
    cbr i1 %188(prob = 0.97), ^entry4, ^b4;
^b9:
    i32 %189 = phi [^if.else, i32 %11] [^entry3, i32 %176];
    i32 %190 = load i32* %14;
    i1 %191 = scmp eq i32 %190, i32 94;
    cbr i1 %191(prob = 0.5), ^entry5, ^b12;
^entry5:
    i32 %192 = add i32 %189, i32 1;
    i32* %193 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %192];
    store i32* %193 with i32 94;
    ubr ^b12;
^b10:
    i32 %194 = load i32* %103;
    i1 %195 = scmp eq i32 %194, i32 42;
    ubr ^b11;
^b11:
    i1 %196 = phi [^b8, i1 true] [^b10, i1 %195];
    cbr i1 %196(prob = 0.5), ^b14, ^b13;
^b12:
    i32 %197 = phi [^b9, i32 %189] [^entry5, i32 %192];
    i1 %198 = scmp eq i32 %190, i32 41;
    cbr i1 %198(prob = 0.5), ^entry6, ^b15;
^b13:
    i32 %199 = load i32* %103;
    i1 %200 = scmp eq i32 %199, i32 47;
    ubr ^b14;
^entry6:
    i32 %201 = add i32 %197, i32 -1;
    i32* %202 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %197];
    i32 %203 = load i32* %202;
    ubr ^while.header2;
^b14:
    i1 %204 = phi [^b11, i1 true] [^b13, i1 %200];
    cbr i1 %204(prob = 0.5), ^b17, ^b16;
^b15:
    i32 %205 = phi [^b12, i32 %10] [^while.header2, i32 %213];
    i32 %206 = phi [^b12, i32 %197] [^while.header2, i32 %214];
    i32 %207 = load i32* %14;
    i1 %208 = scmp eq i32 %207, i32 43;
    cbr i1 %208(prob = 0.5), ^while.header3, ^b18;
^b16:
    i32 %209 = load i32* %103;
    i1 %210 = scmp eq i32 %209, i32 37;
    ubr ^b17;
^b17:
    i1 %211 = phi [^b14, i1 true] [^b16, i1 %210];
    cbr i1 %211(prob = 0.5), ^b20, ^b19;
^while.header2:
    i32 %212 = phi [^entry6, i32 %203] [^while.body3, i32 %232];
    i32 %213 = phi [^entry6, i32 %10] [^while.body3, i32 %229];
    i32 %214 = phi [^entry6, i32 %201] [^while.body3, i32 %230];
    i1 %215 = scmp neq i32 %212, i32 40;
    cbr i1 %215(prob = 0.97), ^while.body3, ^b15;
^while.header3:
    i32 %216 = phi [^b15, i32 %205] [^entry9, i32 %369];
    i32 %217 = phi [^b15, i32 %206] [^entry9, i32 %365];
    i32* %218 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %217];
    i32 %219 = load i32* %218;
    i1 %220 = scmp eq i32 %219, i32 43;
    cbr i1 %220(prob = 0.5), ^b22, ^b21;
^b18:
    i32 %221 = phi [^b15, i32 %205] [^entry8, i32 %359];
    i32 %222 = phi [^b15, i32 %206] [^entry8, i32 %361];
    i32 %223 = load i32* %14;
    i1 %224 = scmp eq i32 %223, i32 45;
    cbr i1 %224(prob = 0.5), ^while.header4, ^b23;
^b19:
    i32 %225 = load i32* %103;
    i1 %226 = scmp eq i32 %225, i32 94;
    ubr ^b20;
^while.body3:
    i32* %227 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %213];
    store i32* %227 with i32 32;
    i32* %228 = getelementptr &(i32* %227)[i64 1];
    store i32* %228 with i32 %212;
    i32 %229 = add i32 %213, i32 2;
    i32 %230 = add i32 %214, i32 -1;
    i32* %231 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %214];
    i32 %232 = load i32* %231;
    ubr ^while.header2;
^b20:
    i1 %233 = phi [^b17, i1 true] [^b19, i1 %226];
    cbr i1 %233(prob = 0.5), ^entry7, ^if.else1;
^b21:
    i1 %234 = scmp eq i32 %219, i32 45;
    ubr ^b22;
^b22:
    i1 %235 = phi [^while.header3, i1 true] [^b21, i1 %234];
    cbr i1 %235(prob = 0.5), ^b26, ^b24;
^while.header4:
    i32 %236 = phi [^b18, i32 %221] [^entry13, i32 %407];
    i32 %237 = phi [^b18, i32 %222] [^entry13, i32 %403];
    i32* %238 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %237];
    i32 %239 = load i32* %238;
    i1 %240 = scmp eq i32 %239, i32 43;
    cbr i1 %240(prob = 0.5), ^b27, ^b25;
^b23:
    i32 %241 = phi [^b18, i32 %221] [^entry12, i32 %399];
    i32 %242 = phi [^b18, i32 %222] [^entry12, i32 %401];
    i32 %243 = load i32* %14;
    i1 %244 = scmp eq i32 %243, i32 42;
    cbr i1 %244(prob = 0.5), ^while.header5, ^b28;
^entry7:
    i32* %245 = getelementptr &([10000 * i32]* @ints)[i64 0][i32 %101];
    i32 %246 = load i32* %245;
    i32* %247 = getelementptr &(i32* %245)[i64 -1];
    i32 %248 = load i32* %247;
    i32 %249 = load i32* %103;
    i1 %250 = scmp eq i32 %249, i32 43;
    cbr i1 %250(prob = 0.5), ^if.then1, ^b29;
^if.else1:
    i32 %251 = load i32* %103;
    i1 %252 = scmp neq i32 %251, i32 32;
    cbr i1 %252(prob = 0.5), ^if.then2, ^b31;
^b24:
    i32 %253 = load i32* %218;
    i1 %254 = scmp eq i32 %253, i32 42;
    ubr ^b26;
^b25:
    i1 %255 = scmp eq i32 %239, i32 45;
    ubr ^b27;
^b26:
    i1 %256 = phi [^b22, i1 true] [^b24, i1 %254];
    cbr i1 %256(prob = 0.5), ^b33, ^b30;
^b27:
    i1 %257 = phi [^while.header4, i1 true] [^b25, i1 %255];
    cbr i1 %257(prob = 0.5), ^b35, ^b32;
^while.header5:
    i32 %258 = phi [^b23, i32 %241] [^entry11, i32 %389];
    i32 %259 = phi [^b23, i32 %242] [^entry11, i32 %385];
    i32* %260 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %259];
    i32 %261 = load i32* %260;
    i1 %262 = scmp eq i32 %261, i32 42;
    cbr i1 %262(prob = 0.5), ^b36, ^b34;
^b28:
    i32 %263 = phi [^b23, i32 %243] [^entry10, i32 %382];
    i32 %264 = phi [^b23, i32 %241] [^entry10, i32 %378];
    i32 %265 = phi [^b23, i32 %242] [^entry10, i32 %380];
    i1 %266 = scmp eq i32 %263, i32 47;
    cbr i1 %266(prob = 0.5), ^while.header6, ^b37;
^if.then1:
    i32 %267 = add i32 %246, i32 %248;
    ubr ^b29;
^if.then2:
    i32 %268 = add i32 %251, i32 -48;
    i32 %269 = add i32 %101, i32 1;
    i32* %270 = getelementptr &([10000 * i32]* @ints)[i64 0][i32 %269];
    store i32* %270 with i32 %268;
    i32 %271 = add i32 %102, i32 1;
    i32* %272 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %271];
    i32 %273 = load i32* %272;
    i1 %274 = scmp neq i32 %273, i32 32;
    cbr i1 %274(prob = 0.97), ^while.body4, ^b38;
^b29:
    i32 %275 = phi [^entry7, i32 0] [^if.then1, i32 %267];
    i1 %276 = scmp eq i32 %249, i32 45;
    cbr i1 %276(prob = 0.5), ^if.then3, ^b40;
^b30:
    i32 %277 = load i32* %218;
    i1 %278 = scmp eq i32 %277, i32 47;
    ubr ^b33;
^b31:
    i32 %279 = phi [^if.else1, i32 %101] [^b38, i32 %269] [^b70, i32 %431];
    i32 %280 = phi [^if.else1, i32 %102] [^b38, i32 %303] [^b70, i32 %102];
    i32 %281 = add i32 %280, i32 1;
    i32* %282 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %281];
    i32 %283 = load i32* %282;
    i1 %284 = scmp neq i32 %283, i32 64;
    cbr i1 %284(prob = 0.97), ^while.body2, ^b5;
^b32:
    i32 %285 = load i32* %238;
    i1 %286 = scmp eq i32 %285, i32 42;
    ubr ^b35;
^b33:
    i1 %287 = phi [^b26, i1 true] [^b30, i1 %278];
    cbr i1 %287(prob = 0.5), ^b42, ^b39;
^b34:
    i1 %288 = scmp eq i32 %261, i32 47;
    ubr ^b36;
^b35:
    i1 %289 = phi [^b27, i1 true] [^b32, i1 %286];
    cbr i1 %289(prob = 0.5), ^b44, ^b41;
^b36:
    i1 %290 = phi [^while.header5, i1 true] [^b34, i1 %288];
    cbr i1 %290(prob = 0.5), ^b46, ^b43;
^while.header6:
    i32 %291 = phi [^b28, i32 %264] [^entry15, i32 %424];
    i32 %292 = phi [^b28, i32 %265] [^entry15, i32 %420];
    i32* %293 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %292];
    i32 %294 = load i32* %293;
    i1 %295 = scmp eq i32 %294, i32 42;
    cbr i1 %295(prob = 0.5), ^b48, ^b45;
^b37:
    i32 %296 = phi [^b28, i32 %264] [^entry14, i32 %414];
    i32 %297 = phi [^b28, i32 %265] [^entry14, i32 %416];
    i32 %298 = load i32* %14;
    i1 %299 = scmp eq i32 %298, i32 37;
    cbr i1 %299(prob = 0.5), ^while.header7, ^b47;
^if.then3:
    i32 %300 = sub i32 %248, i32 %246;
    ubr ^b40;
^b38:
    i32 %301 = phi [^if.then2, i32 1] [^while.body4, i32 %312];
    i32 %302 = add i32 %301, i32 -1;
    i32 %303 = add i32 %302, i32 %102;
    ubr ^b31;
^while.body4:
    i32 %304 = phi [^if.then2, i32 %268] [^indirect1, i32 %340];
    i32 %305 = phi [^if.then2, i32 1] [^indirect1, i32 %312];
    i32 %306 = add i32 %305, i32 %102;
    i32* %307 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %306];
    i32 %308 = load i32* %307;
    i32 %309 = mul i32 %304, i32 10;
    i32 %310 = add i32 %309, i32 -48;
    i32 %311 = add i32 %310, i32 %308;
    store i32* %270 with i32 %311;
    i32 %312 = add i32 %305, i32 1;
    i32 %313 = add i32 %305, i32 %271;
    i32* %314 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %313];
    i32 %315 = load i32* %314;
    i1 %316 = scmp neq i32 %315, i32 32;
    cbr i1 %316(prob = 0.97), ^indirect1, ^b38;
^b39:
    i32 %317 = load i32* %218;
    i1 %318 = scmp eq i32 %317, i32 37;
    ubr ^b42;
^b40:
    i32 %319 = phi [^b29, i32 %275] [^if.then3, i32 %300];
    i32 %320 = load i32* %103;
    i1 %321 = scmp eq i32 %320, i32 42;
    cbr i1 %321(prob = 0.5), ^if.then4, ^b52;
^b41:
    i32 %322 = load i32* %238;
    i1 %323 = scmp eq i32 %322, i32 47;
    ubr ^b44;
^b42:
    i1 %324 = phi [^b33, i1 true] [^b39, i1 %318];
    cbr i1 %324(prob = 0.5), ^b51, ^b49;
^b43:
    i32 %325 = load i32* %260;
    i1 %326 = scmp eq i32 %325, i32 37;
    ubr ^b46;
^b44:
    i1 %327 = phi [^b35, i1 true] [^b41, i1 %323];
    cbr i1 %327(prob = 0.5), ^b54, ^b50;
^b45:
    i1 %328 = scmp eq i32 %294, i32 47;
    ubr ^b48;
^b46:
    i1 %329 = phi [^b36, i1 true] [^b43, i1 %326];
    cbr i1 %329(prob = 0.5), ^b56, ^b53;
^b47:
    i32 %330 = phi [^b37, i32 %297] [^entry17, i32 %436];
    i32 %331 = phi [^b37, i32 %296] [^entry17, i32 %434];
    i32* %332 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %331];
    store i32* %332 with i32 32;
    i32 %333 = add i32 %331, i32 1;
    ubr ^b6;
^b48:
    i1 %334 = phi [^while.header6, i1 true] [^b45, i1 %328];
    cbr i1 %334(prob = 0.5), ^b58, ^b55;
^while.header7:
    i32 %335 = phi [^b37, i32 %296] [^entry18, i32 %442];
    i32 %336 = phi [^b37, i32 %297] [^entry18, i32 %438];
    i32* %337 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %336];
    i32 %338 = load i32* %337;
    i1 %339 = scmp eq i32 %338, i32 42;
    cbr i1 %339(prob = 0.5), ^b59, ^b57;
^indirect1:
    i32 %340 = load i32* %270;
    ubr ^while.body4;
^if.then4:
    i32 %341 = mul i32 %246, i32 %248;
    ubr ^b52;
^b49:
    i32 %342 = load i32* %218;
    i1 %343 = scmp eq i32 %342, i32 94;
    ubr ^b51;
^b50:
    i32 %344 = load i32* %238;
    i1 %345 = scmp eq i32 %344, i32 37;
    ubr ^b54;
^b51:
    i1 %346 = phi [^b42, i1 true] [^b49, i1 %343];
    cbr i1 %346(prob = 0.97), ^entry9, ^entry8;
^b52:
    i32 %347 = phi [^b40, i32 %319] [^if.then4, i32 %341];
    i1 %348 = scmp eq i32 %320, i32 47;
    cbr i1 %348(prob = 0.5), ^if.then5, ^b62;
^b53:
    i32 %349 = load i32* %260;
    i1 %350 = scmp eq i32 %349, i32 94;
    ubr ^b56;
^b54:
    i1 %351 = phi [^b44, i1 true] [^b50, i1 %345];
    cbr i1 %351(prob = 0.5), ^b61, ^b60;
^b55:
    i32 %352 = load i32* %293;
    i1 %353 = scmp eq i32 %352, i32 37;
    ubr ^b58;
^b56:
    i1 %354 = phi [^b46, i1 true] [^b53, i1 %350];
    cbr i1 %354(prob = 0.97), ^entry11, ^entry10;
^b57:
    i1 %355 = scmp eq i32 %338, i32 47;
    ubr ^b59;
^b58:
    i1 %356 = phi [^b48, i1 true] [^b55, i1 %353];
    cbr i1 %356(prob = 0.5), ^b65, ^b63;
^b59:
    i1 %357 = phi [^while.header7, i1 true] [^b57, i1 %355];
    cbr i1 %357(prob = 0.5), ^b66, ^b64;
^if.then5:
    i32 %358 = sdiv i32 %248, i32 %246;
    ubr ^b62;
^entry8:
    i32 %359 = phi [^b51, i32 %216] [^entry9, i32 %369];
    i32 %360 = phi [^b51, i32 %217] [^entry9, i32 %365];
    i32 %361 = add i32 %360, i32 1;
    i32* %362 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %361];
    store i32* %362 with i32 43;
    ubr ^b18;
^b60:
    i32 %363 = load i32* %238;
    i1 %364 = scmp eq i32 %363, i32 94;
    ubr ^b61;
^entry9:
    i32 %365 = add i32 %217, i32 -1;
    i32 %366 = load i32* %218;
    i32* %367 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %216];
    store i32* %367 with i32 32;
    i32* %368 = getelementptr &(i32* %367)[i64 1];
    store i32* %368 with i32 %366;
    i32 %369 = add i32 %216, i32 2;
    i1 %370 = scmp eq i32 %365, i32 0;
    i32 %371 = zext i1 %370 to i32;
    i32 %372 = sub i32 1, i32 %371;
    i1 %373 = scmp eq i32 %372, i32 0;
    cbr i1 %373(prob = 0.5), ^entry8, ^while.header3;
^b61:
    i1 %374 = phi [^b54, i1 true] [^b60, i1 %364];
    cbr i1 %374(prob = 0.97), ^entry13, ^entry12;
^b62:
    i32 %375 = phi [^b52, i32 %347] [^if.then5, i32 %358];
    i32 %376 = load i32* %103;
    i1 %377 = scmp eq i32 %376, i32 37;
    cbr i1 %377(prob = 0.5), ^if.then6, ^b67;
^entry10:
    i32 %378 = phi [^b56, i32 %258] [^entry11, i32 %389];
    i32 %379 = phi [^b56, i32 %259] [^entry11, i32 %385];
    i32 %380 = add i32 %379, i32 1;
    i32* %381 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %380];
    store i32* %381 with i32 42;
    i32 %382 = load i32* %14;
    ubr ^b28;
^b63:
    i32 %383 = load i32* %293;
    i1 %384 = scmp eq i32 %383, i32 94;
    ubr ^b65;
^entry11:
    i32 %385 = add i32 %259, i32 -1;
    i32 %386 = load i32* %260;
    i32* %387 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %258];
    store i32* %387 with i32 32;
    i32* %388 = getelementptr &(i32* %387)[i64 1];
    store i32* %388 with i32 %386;
    i32 %389 = add i32 %258, i32 2;
    i1 %390 = scmp eq i32 %385, i32 0;
    i32 %391 = zext i1 %390 to i32;
    i32 %392 = sub i32 1, i32 %391;
    i1 %393 = scmp eq i32 %392, i32 0;
    cbr i1 %393(prob = 0.5), ^entry10, ^while.header5;
^b64:
    i32 %394 = load i32* %337;
    i1 %395 = scmp eq i32 %394, i32 37;
    ubr ^b66;
^b65:
    i1 %396 = phi [^b58, i1 true] [^b63, i1 %384];
    cbr i1 %396(prob = 0.97), ^entry15, ^entry14;
^b66:
    i1 %397 = phi [^b59, i1 true] [^b64, i1 %395];
    cbr i1 %397(prob = 0.5), ^b69, ^b68;
^if.then6:
    i32 %398 = srem i32 %248, i32 %246;
    ubr ^b67;
^entry12:
    i32 %399 = phi [^b61, i32 %236] [^entry13, i32 %407];
    i32 %400 = phi [^b61, i32 %237] [^entry13, i32 %403];
    i32 %401 = add i32 %400, i32 1;
    i32* %402 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %401];
    store i32* %402 with i32 45;
    ubr ^b23;
^entry13:
    i32 %403 = add i32 %237, i32 -1;
    i32 %404 = load i32* %238;
    i32* %405 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %236];
    store i32* %405 with i32 32;
    i32* %406 = getelementptr &(i32* %405)[i64 1];
    store i32* %406 with i32 %404;
    i32 %407 = add i32 %236, i32 2;
    i1 %408 = scmp eq i32 %403, i32 0;
    i32 %409 = zext i1 %408 to i32;
    i32 %410 = sub i32 1, i32 %409;
    i1 %411 = scmp eq i32 %410, i32 0;
    cbr i1 %411(prob = 0.5), ^entry12, ^while.header4;
^b67:
    i32 %412 = phi [^b62, i32 %375] [^if.then6, i32 %398];
    i1 %413 = scmp eq i32 %376, i32 94;
    cbr i1 %413(prob = 0.5), ^entry16, ^b70;
^entry14:
    i32 %414 = phi [^b65, i32 %291] [^entry15, i32 %424];
    i32 %415 = phi [^b65, i32 %292] [^entry15, i32 %420];
    i32 %416 = add i32 %415, i32 1;
    i32* %417 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %416];
    store i32* %417 with i32 47;
    ubr ^b37;
^b68:
    i32 %418 = load i32* %337;
    i1 %419 = scmp eq i32 %418, i32 94;
    ubr ^b69;
^entry15:
    i32 %420 = add i32 %292, i32 -1;
    i32 %421 = load i32* %293;
    i32* %422 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %291];
    store i32* %422 with i32 32;
    i32* %423 = getelementptr &(i32* %422)[i64 1];
    store i32* %423 with i32 %421;
    i32 %424 = add i32 %291, i32 2;
    i1 %425 = scmp eq i32 %420, i32 0;
    i32 %426 = zext i1 %425 to i32;
    i32 %427 = sub i32 1, i32 %426;
    i1 %428 = scmp eq i32 %427, i32 0;
    cbr i1 %428(prob = 0.5), ^entry14, ^while.header6;
^b69:
    i1 %429 = phi [^b66, i1 true] [^b68, i1 %419];
    cbr i1 %429(prob = 0.97), ^entry18, ^entry17;
^b70:
    i32 %430 = phi [^b67, i32 %412] [^b71, i32 %447];
    i32 %431 = add i32 %101, i32 -1;
    i32* %432 = getelementptr &([10000 * i32]* @ints)[i64 0][i32 %431];
    store i32* %432 with i32 %430;
    ubr ^b31;
^entry16:
    i1 %433 = scmp neq i32 %246, i32 0;
    cbr i1 %433(prob = 0.97), ^while.body5, ^b71;
^entry17:
    i32 %434 = phi [^b69, i32 %335] [^entry18, i32 %442];
    i32 %435 = phi [^b69, i32 %336] [^entry18, i32 %438];
    i32 %436 = add i32 %435, i32 1;
    i32* %437 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %436];
    store i32* %437 with i32 37;
    ubr ^b47;
^entry18:
    i32 %438 = add i32 %336, i32 -1;
    i32 %439 = load i32* %337;
    i32* %440 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %335];
    store i32* %440 with i32 32;
    i32* %441 = getelementptr &(i32* %440)[i64 1];
    store i32* %441 with i32 %439;
    i32 %442 = add i32 %335, i32 2;
    i1 %443 = scmp eq i32 %438, i32 0;
    i32 %444 = zext i1 %443 to i32;
    i32 %445 = sub i32 1, i32 %444;
    i1 %446 = scmp eq i32 %445, i32 0;
    cbr i1 %446(prob = 0.5), ^entry17, ^while.header7;
^b71:
    i32 %447 = phi [^entry16, i32 1] [^while.body5, i32 %450];
    ubr ^b70;
^while.body5:
    i32 %448 = phi [^entry16, i32 1] [^while.body5, i32 %450];
    i32 %449 = phi [^entry16, i32 %246] [^while.body5, i32 %451];
    i32 %450 = mul i32 %248, i32 %448;
    i32 %451 = add i32 %449, i32 -1;
    i1 %452 = scmp neq i32 %451, i32 0;
    cbr i1 %452(prob = 0.97), ^while.body5, ^b71;
}
