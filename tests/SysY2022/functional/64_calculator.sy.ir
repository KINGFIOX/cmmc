internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal [10000 * i32]* @ints;
internal [10000 * i32]* @chas;
internal [10000 * i32]* @get;
internal [10000 * i32]* @get2;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getch();
    i1 %1 = icmp neq i32 %0, i32 13;
    i1 %2 = icmp neq i32 %0, i32 10;
    i1 %3 = and i1 %1, i1 %2;
    [10000 * i32]* %4 = ptrcast [10000 * i32]* @get to [10000 * i32]*;
    i32* %5 = getelementptr &([10000 * i32]* %4)[i64 0][i64 0];
    [10000 * i32]* %6 = ptrcast [10000 * i32]* @chas to [10000 * i32]*;
    [10000 * i32]* %7 = ptrcast [10000 * i32]* @ints to [10000 * i32]*;
    [10000 * i32]* %8 = ptrcast [10000 * i32]* @get2 to [10000 * i32]*;
    cbr i1 %3(prob = 0.97), ^while.body, ^b;
  ^b:
    i32 %9 = phi [^entry, i32 0] [^while.body, i32 %17];
    ubr ^while.header;
  ^while.body:
    i32 %10 = phi [^entry, i32 0] [^while.body, i32 %17];
    i32 %11 = phi [^entry, i32 %0] [^while.body, i32 %13];
    i32* %12 = getelementptr &(i32* %5)[i32 %10];
    store i32* %12 with i32 %11;
    i32 %13 = call () -> i32 @getch();
    i1 %14 = icmp neq i32 %13, i32 13;
    i1 %15 = icmp neq i32 %13, i32 10;
    i1 %16 = and i1 %14, i1 %15;
    i32 %17 = add i32 %10, i32 1;
    cbr i1 %16(prob = 0.97), ^while.body, ^b;
  ^while.header:
    i32 %18 = phi [^b, i32 0] [^if.then, i32 %29] [^b14, i32 %291];
    i32 %19 = phi [^b, i32 1] [^if.then, i32 %28] [^b14, i32 %290];
    i32 %20 = phi [^b, i32 0] [^if.then, i32 %20] [^b14, i32 %287];
    i1 %21 = icmp sgt i32 %9, i32 %18;
    cbr i1 %21(prob = 0.97), ^while.body1, ^indirect;
  ^while.body1:
    i32* %22 = getelementptr &([10000 * i32]* %4)[i64 0][i32 %18];
    i32 %23 = load i32* %22;
    i32 %24 = add i32 %23, i32 -48;
    i1 %25 = icmp ult i32 %24, i32 10;
    cbr i1 %25(prob = 0.5), ^if.then, ^if.else;
  ^indirect:
    i1 %26 = icmp sgt i32 %20, i32 0;
    cbr i1 %26(prob = 0.97), ^super.header, ^b1;
  ^if.then:
    i32* %27 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %19];
    store i32* %27 with i32 %23;
    i32 %28 = add i32 %19, i32 1;
    i32 %29 = add i32 %18, i32 1;
    ubr ^while.header;
  ^if.else:
    i1 %30 = icmp eq i32 %23, i32 40;
    cbr i1 %30(prob = 0.5), ^entry1, ^b2;
  ^super.header:
    i32 %31 = phi [^indirect, i32 %20] [^entry2, i32 %33];
    i32 %32 = phi [^indirect, i32 %19] [^entry2, i32 %58];
    i32 %33 = add i32 %31, i32 -4;
    i1 %34 = icmp sgt i32 %33, i32 0;
    cbr i1 %34(prob = 0.89), ^entry2, ^super.header1;
  ^b1:
    i32 %35 = phi [^indirect, i32 %19] [^entry6, i32 %120];
    i32* %36 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %35];
    store i32* %36 with i32 64;
    i32* %37 = getelementptr &([10000 * i32]* %8)[i64 0][i64 1];
    i32 %38 = load i32* %37;
    i1 %39 = icmp neq i32 %38, i32 64;
    cbr i1 %39(prob = 0.97), ^while.body2, ^b3;
  ^entry1:
    i32 %40 = add i32 %20, i32 1;
    i32* %41 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %40];
    store i32* %41 with i32 40;
    ubr ^b2;
  ^entry2:
    i32* %42 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %31];
    i32 %43 = load i32* %42;
    i32* %44 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %32];
    store i32* %44 with i32 32;
    i32* %45 = getelementptr &(i32* %44)[i64 1];
    store i32* %45 with i32 %43;
    i32* %46 = getelementptr &(i32* %42)[i64 -1];
    i32 %47 = load i32* %46;
    i32* %48 = getelementptr &(i32* %44)[i64 2];
    store i32* %48 with i32 32;
    i32* %49 = getelementptr &(i32* %44)[i64 3];
    store i32* %49 with i32 %47;
    i32* %50 = getelementptr &(i32* %42)[i64 -2];
    i32 %51 = load i32* %50;
    i32* %52 = getelementptr &(i32* %44)[i64 4];
    store i32* %52 with i32 32;
    i32* %53 = getelementptr &(i32* %44)[i64 5];
    store i32* %53 with i32 %51;
    i32* %54 = getelementptr &(i32* %42)[i64 -3];
    i32 %55 = load i32* %54;
    i32* %56 = getelementptr &(i32* %44)[i64 6];
    store i32* %56 with i32 32;
    i32* %57 = getelementptr &(i32* %44)[i64 7];
    store i32* %57 with i32 %55;
    i32 %58 = add i32 %32, i32 8;
    ubr ^super.header;
  ^b2:
    i32 %59 = phi [^if.else, i32 %20] [^entry1, i32 %40];
    i32 %60 = load i32* %22;
    i1 %61 = icmp eq i32 %60, i32 94;
    cbr i1 %61(prob = 0.5), ^entry4, ^b4;
  ^super.header1:
    i32 %62 = phi [^super.header, i32 %31] [^entry3, i32 %64];
    i32 %63 = phi [^super.header, i32 %32] [^entry3, i32 %99];
    i32 %64 = add i32 %62, i32 -4;
    i1 %65 = icmp sgt i32 %64, i32 0;
    cbr i1 %65(prob = 0.89), ^entry3, ^entry6;
  ^while.body2:
    i32 %66 = phi [^b1, i32 1] [^while.header3, i32 %177];
    i32 %67 = phi [^b1, i32 0] [^while.header3, i32 %176];
    i32* %68 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %66];
    i32 %69 = load i32* %68;
    i1 %70 = icmp eq i32 %69, i32 43;
    i1 %71 = icmp eq i32 %69, i32 45;
    i1 %72 = or i1 %70, i1 %71;
    i1 %73 = icmp eq i32 %69, i32 42;
    i1 %74 = or i1 %72, i1 %73;
    i1 %75 = icmp eq i32 %69, i32 47;
    i1 %76 = or i1 %74, i1 %75;
    i1 %77 = icmp eq i32 %69, i32 37;
    i1 %78 = or i1 %76, i1 %77;
    i1 %79 = icmp eq i32 %69, i32 94;
    i1 %80 = or i1 %78, i1 %79;
    cbr i1 %80(prob = 0.5), ^entry5, ^if.else1;
  ^b3:
    i32* %81 = getelementptr &([10000 * i32]* %7)[i64 0][i64 1];
    i32 %82 = load i32* %81;
    call (i32) -> void @putint(i32 %82);
    ret i32 0;
  ^entry3:
    i32* %83 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %62];
    i32 %84 = load i32* %83;
    i32* %85 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %63];
    store i32* %85 with i32 32;
    i32* %86 = getelementptr &(i32* %85)[i64 1];
    store i32* %86 with i32 %84;
    i32* %87 = getelementptr &(i32* %83)[i64 -1];
    i32 %88 = load i32* %87;
    i32* %89 = getelementptr &(i32* %85)[i64 2];
    store i32* %89 with i32 32;
    i32* %90 = getelementptr &(i32* %85)[i64 3];
    store i32* %90 with i32 %88;
    i32* %91 = getelementptr &(i32* %83)[i64 -2];
    i32 %92 = load i32* %91;
    i32* %93 = getelementptr &(i32* %85)[i64 4];
    store i32* %93 with i32 32;
    i32* %94 = getelementptr &(i32* %85)[i64 5];
    store i32* %94 with i32 %92;
    i32* %95 = getelementptr &(i32* %83)[i64 -3];
    i32 %96 = load i32* %95;
    i32* %97 = getelementptr &(i32* %85)[i64 6];
    store i32* %97 with i32 32;
    i32* %98 = getelementptr &(i32* %85)[i64 7];
    store i32* %98 with i32 %96;
    i32 %99 = add i32 %63, i32 8;
    ubr ^super.header1;
  ^entry4:
    i32 %100 = add i32 %59, i32 1;
    i32* %101 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %100];
    store i32* %101 with i32 94;
    ubr ^b4;
  ^entry5:
    i32* %102 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %67];
    i32 %103 = load i32* %102;
    i32* %104 = getelementptr &(i32* %102)[i64 -1];
    i32 %105 = load i32* %104;
    i32 %106 = add i32 %103, i32 %105;
    i32 %107 = select i1 %70 ? i32 %106 : i32 0;
    i32 %108 = sub i32 %105, i32 %103;
    i32 %109 = select i1 %71 ? i32 %108 : i32 %107;
    i32 %110 = mul i32 %103, i32 %105;
    i32 %111 = select i1 %73 ? i32 %110 : i32 %109;
    cbr i1 %75(prob = 0.5), ^if.then1, ^b5;
  ^entry6:
    i32 %112 = phi [^super.header1, i32 %62] [^entry6, i32 %118];
    i32 %113 = phi [^super.header1, i32 %63] [^entry6, i32 %120];
    i32* %114 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %112];
    i32 %115 = load i32* %114;
    i32* %116 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %113];
    store i32* %116 with i32 32;
    i32* %117 = getelementptr &(i32* %116)[i64 1];
    store i32* %117 with i32 %115;
    i32 %118 = add i32 %112, i32 -1;
    i1 %119 = icmp sgt i32 %118, i32 0;
    i32 %120 = add i32 %113, i32 2;
    cbr i1 %119(prob = 0.97), ^entry6, ^b1;
  ^b4:
    i32 %121 = phi [^b2, i32 %59] [^entry4, i32 %100];
    i1 %122 = icmp eq i32 %60, i32 41;
    cbr i1 %122(prob = 0.5), ^entry7, ^b6;
  ^if.else1:
    i1 %123 = icmp neq i32 %69, i32 32;
    cbr i1 %123(prob = 0.5), ^if.then2, ^indirect1;
  ^if.then1:
    i32 %124 = sdiv i32 %105, i32 %103;
    ubr ^b5;
  ^entry7:
    i32* %125 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %121];
    i32 %126 = load i32* %125;
    i32 %127 = add i32 %121, i32 -1;
    ubr ^while.header1;
  ^indirect1:
    i32 %128 = add i32 %66, i32 1;
    ubr ^while.header3;
  ^if.then2:
    i32 %129 = add i32 %67, i32 1;
    i32* %130 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %129];
    i32 %131 = add i32 %69, i32 -48;
    store i32* %130 with i32 %131;
    i32 %132 = add i32 %66, i32 1;
    i32* %133 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %132];
    i32 %134 = load i32* %133;
    i1 %135 = icmp neq i32 %134, i32 32;
    cbr i1 %135(prob = 0.97), ^while.body3, ^b7;
  ^b5:
    i32 %136 = phi [^entry5, i32 %111] [^if.then1, i32 %124];
    cbr i1 %77(prob = 0.5), ^if.then3, ^b8;
  ^b6:
    i32 %137 = phi [^b4, i32 %19] [^while.header1, i32 %145];
    i32 %138 = phi [^b4, i32 %121] [^while.header1, i32 %146];
    i32 %139 = load i32* %22;
    i1 %140 = icmp eq i32 %139, i32 43;
    cbr i1 %140(prob = 0.5), ^while.header2, ^b9;
  ^if.then3:
    i32 %141 = srem i32 %105, i32 %103;
    ubr ^b8;
  ^b7:
    i32 %142 = phi [^if.then2, i32 1] [^while.body3, i32 %160];
    i32 %143 = add i32 %66, i32 %142;
    ubr ^while.header3;
  ^while.header1:
    i32 %144 = phi [^entry7, i32 %126] [^while.body4, i32 %189];
    i32 %145 = phi [^entry7, i32 %19] [^while.body4, i32 %190];
    i32 %146 = phi [^entry7, i32 %127] [^while.body4, i32 %191];
    i1 %147 = icmp neq i32 %144, i32 40;
    cbr i1 %147(prob = 0.97), ^while.body4, ^b6;
  ^while.body3:
    i32 %148 = phi [^if.then2, i32 %131] [^while.body3, i32 %155];
    i32 %149 = phi [^if.then2, i32 1] [^while.body3, i32 %160];
    i32 %150 = add i32 %66, i32 %149;
    i32* %151 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %150];
    i32 %152 = load i32* %151;
    i32 %153 = mul i32 %148, i32 10;
    i32 %154 = add i32 %153, i32 -48;
    i32 %155 = add i32 %152, i32 %154;
    store i32* %130 with i32 %155;
    i32 %156 = add i32 %132, i32 %149;
    i32* %157 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %156];
    i32 %158 = load i32* %157;
    i1 %159 = icmp neq i32 %158, i32 32;
    i32 %160 = add i32 %149, i32 1;
    cbr i1 %159(prob = 0.97), ^while.body3, ^b7;
  ^while.header2:
    i32 %161 = phi [^b6, i32 %137] [^entry10, i32 %204];
    i32 %162 = phi [^b6, i32 %138] [^entry10, i32 %202];
    i32* %163 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %162];
    i32 %164 = load i32* %163;
    i1 %165 = icmp eq i32 %164, i32 43;
    i1 %166 = icmp eq i32 %164, i32 45;
    i1 %167 = or i1 %165, i1 %166;
    i1 %168 = icmp eq i32 %164, i32 42;
    i1 %169 = or i1 %167, i1 %168;
    i1 %170 = icmp eq i32 %164, i32 47;
    i1 %171 = or i1 %169, i1 %170;
    i1 %172 = icmp eq i32 %164, i32 37;
    i1 %173 = or i1 %171, i1 %172;
    i1 %174 = icmp eq i32 %164, i32 94;
    i1 %175 = or i1 %173, i1 %174;
    cbr i1 %175(prob = 0.97), ^entry10, ^entry9;
  ^while.header3:
    i32 %176 = phi [^indirect1, i32 %67] [^b7, i32 %129] [^entry8, i32 %192] [^b11, i32 %226];
    i32 %177 = phi [^indirect1, i32 %128] [^b7, i32 %143] [^entry8, i32 %194] [^b11, i32 %228];
    i32* %178 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %177];
    i32 %179 = load i32* %178;
    i1 %180 = icmp neq i32 %179, i32 64;
    cbr i1 %180(prob = 0.97), ^while.body2, ^b3;
  ^b8:
    i32 %181 = phi [^b5, i32 %136] [^if.then3, i32 %141];
    cbr i1 %79(prob = 0.5), ^entry11, ^entry8;
  ^b9:
    i32 %182 = phi [^b6, i32 %139] [^entry9, i32 %199];
    i32 %183 = phi [^b6, i32 %137] [^entry9, i32 %195];
    i32 %184 = phi [^b6, i32 %138] [^entry9, i32 %197];
    i1 %185 = icmp eq i32 %182, i32 45;
    cbr i1 %185(prob = 0.5), ^while.header4, ^b10;
  ^while.body4:
    i32* %186 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %145];
    store i32* %186 with i32 32;
    i32* %187 = getelementptr &(i32* %186)[i64 1];
    store i32* %187 with i32 %144;
    i32* %188 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %146];
    i32 %189 = load i32* %188;
    i32 %190 = add i32 %145, i32 2;
    i32 %191 = add i32 %146, i32 -1;
    ubr ^while.header1;
  ^entry8:
    i32 %192 = add i32 %67, i32 -1;
    i32* %193 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %192];
    store i32* %193 with i32 %181;
    i32 %194 = add i32 %66, i32 1;
    ubr ^while.header3;
  ^entry9:
    i32 %195 = phi [^while.header2, i32 %161] [^entry10, i32 %204];
    i32 %196 = phi [^while.header2, i32 %162] [^entry10, i32 %202];
    i32 %197 = add i32 %196, i32 1;
    i32* %198 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %197];
    store i32* %198 with i32 43;
    i32 %199 = load i32* %22;
    ubr ^b9;
  ^entry10:
    i32* %200 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %161];
    store i32* %200 with i32 32;
    i32* %201 = getelementptr &(i32* %200)[i64 1];
    store i32* %201 with i32 %164;
    i32 %202 = add i32 %162, i32 -1;
    i1 %203 = icmp eq i32 %202, i32 0;
    i32 %204 = add i32 %161, i32 2;
    cbr i1 %203(prob = 0.5), ^entry9, ^while.header2;
  ^entry11:
    i1 %205 = icmp neq i32 %103, i32 0;
    cbr i1 %205(prob = 0.97), ^while.body5, ^b11;
  ^while.header4:
    i32 %206 = phi [^b9, i32 %183] [^entry13, i32 %242];
    i32 %207 = phi [^b9, i32 %184] [^entry13, i32 %240];
    i32* %208 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %207];
    i32 %209 = load i32* %208;
    i1 %210 = icmp eq i32 %209, i32 43;
    i1 %211 = icmp eq i32 %209, i32 45;
    i1 %212 = or i1 %210, i1 %211;
    i1 %213 = icmp eq i32 %209, i32 42;
    i1 %214 = or i1 %212, i1 %213;
    i1 %215 = icmp eq i32 %209, i32 47;
    i1 %216 = or i1 %214, i1 %215;
    i1 %217 = icmp eq i32 %209, i32 37;
    i1 %218 = or i1 %216, i1 %217;
    i1 %219 = icmp eq i32 %209, i32 94;
    i1 %220 = or i1 %218, i1 %219;
    cbr i1 %220(prob = 0.97), ^entry13, ^entry12;
  ^b10:
    i32 %221 = phi [^b9, i32 %183] [^entry12, i32 %234];
    i32 %222 = phi [^b9, i32 %184] [^entry12, i32 %236];
    i32 %223 = load i32* %22;
    i1 %224 = icmp eq i32 %223, i32 42;
    cbr i1 %224(prob = 0.5), ^while.header5, ^b12;
  ^b11:
    i32 %225 = phi [^entry11, i32 1] [^while.body5, i32 %231];
    i32 %226 = add i32 %67, i32 -1;
    i32* %227 = getelementptr &([10000 * i32]* %7)[i64 0][i32 %226];
    store i32* %227 with i32 %225;
    i32 %228 = add i32 %66, i32 1;
    ubr ^while.header3;
  ^while.body5:
    i32 %229 = phi [^entry11, i32 1] [^while.body5, i32 %231];
    i32 %230 = phi [^entry11, i32 %103] [^while.body5, i32 %232];
    i32 %231 = mul i32 %105, i32 %229;
    i32 %232 = add i32 %230, i32 -1;
    i1 %233 = icmp neq i32 %232, i32 0;
    cbr i1 %233(prob = 0.97), ^while.body5, ^b11;
  ^entry12:
    i32 %234 = phi [^while.header4, i32 %206] [^entry13, i32 %242];
    i32 %235 = phi [^while.header4, i32 %207] [^entry13, i32 %240];
    i32 %236 = add i32 %235, i32 1;
    i32* %237 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %236];
    store i32* %237 with i32 45;
    ubr ^b10;
  ^entry13:
    i32* %238 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %206];
    store i32* %238 with i32 32;
    i32* %239 = getelementptr &(i32* %238)[i64 1];
    store i32* %239 with i32 %209;
    i32 %240 = add i32 %207, i32 -1;
    i1 %241 = icmp eq i32 %240, i32 0;
    i32 %242 = add i32 %206, i32 2;
    cbr i1 %241(prob = 0.5), ^entry12, ^while.header4;
  ^while.header5:
    i32 %243 = phi [^b10, i32 %221] [^entry15, i32 %267];
    i32 %244 = phi [^b10, i32 %222] [^entry15, i32 %265];
    i32* %245 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %244];
    i32 %246 = load i32* %245;
    i1 %247 = icmp eq i32 %246, i32 42;
    i1 %248 = icmp eq i32 %246, i32 47;
    i1 %249 = or i1 %247, i1 %248;
    i1 %250 = icmp eq i32 %246, i32 37;
    i1 %251 = or i1 %249, i1 %250;
    i1 %252 = icmp eq i32 %246, i32 94;
    i1 %253 = or i1 %251, i1 %252;
    cbr i1 %253(prob = 0.97), ^entry15, ^entry14;
  ^b12:
    i32 %254 = phi [^b10, i32 %223] [^entry14, i32 %262];
    i32 %255 = phi [^b10, i32 %221] [^entry14, i32 %258];
    i32 %256 = phi [^b10, i32 %222] [^entry14, i32 %260];
    i1 %257 = icmp eq i32 %254, i32 47;
    cbr i1 %257(prob = 0.5), ^while.header6, ^b13;
  ^entry14:
    i32 %258 = phi [^while.header5, i32 %243] [^entry15, i32 %267];
    i32 %259 = phi [^while.header5, i32 %244] [^entry15, i32 %265];
    i32 %260 = add i32 %259, i32 1;
    i32* %261 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %260];
    store i32* %261 with i32 42;
    i32 %262 = load i32* %22;
    ubr ^b12;
  ^entry15:
    i32* %263 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %243];
    store i32* %263 with i32 32;
    i32* %264 = getelementptr &(i32* %263)[i64 1];
    store i32* %264 with i32 %246;
    i32 %265 = add i32 %244, i32 -1;
    i1 %266 = icmp eq i32 %265, i32 0;
    i32 %267 = add i32 %243, i32 2;
    cbr i1 %266(prob = 0.5), ^entry14, ^while.header5;
  ^while.header6:
    i32 %268 = phi [^b12, i32 %255] [^entry17, i32 %296];
    i32 %269 = phi [^b12, i32 %256] [^entry17, i32 %294];
    i32* %270 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %269];
    i32 %271 = load i32* %270;
    i1 %272 = icmp eq i32 %271, i32 42;
    i1 %273 = icmp eq i32 %271, i32 47;
    i1 %274 = or i1 %272, i1 %273;
    i1 %275 = icmp eq i32 %271, i32 37;
    i1 %276 = or i1 %274, i1 %275;
    i1 %277 = icmp eq i32 %271, i32 94;
    i1 %278 = or i1 %276, i1 %277;
    cbr i1 %278(prob = 0.97), ^entry17, ^entry16;
  ^b13:
    i32 %279 = phi [^b12, i32 %255] [^entry16, i32 %283];
    i32 %280 = phi [^b12, i32 %256] [^entry16, i32 %285];
    i32 %281 = load i32* %22;
    i1 %282 = icmp eq i32 %281, i32 37;
    cbr i1 %282(prob = 0.5), ^while.header7, ^b14;
  ^entry16:
    i32 %283 = phi [^while.header6, i32 %268] [^entry17, i32 %296];
    i32 %284 = phi [^while.header6, i32 %269] [^entry17, i32 %294];
    i32 %285 = add i32 %284, i32 1;
    i32* %286 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %285];
    store i32* %286 with i32 47;
    ubr ^b13;
  ^b14:
    i32 %287 = phi [^b13, i32 %280] [^entry18, i32 %310];
    i32 %288 = phi [^b13, i32 %279] [^entry18, i32 %308];
    i32* %289 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %288];
    store i32* %289 with i32 32;
    i32 %290 = add i32 %288, i32 1;
    i32 %291 = add i32 %18, i32 1;
    ubr ^while.header;
  ^entry17:
    i32* %292 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %268];
    store i32* %292 with i32 32;
    i32* %293 = getelementptr &(i32* %292)[i64 1];
    store i32* %293 with i32 %271;
    i32 %294 = add i32 %269, i32 -1;
    i1 %295 = icmp eq i32 %294, i32 0;
    i32 %296 = add i32 %268, i32 2;
    cbr i1 %295(prob = 0.5), ^entry16, ^while.header6;
  ^while.header7:
    i32 %297 = phi [^b13, i32 %279] [^entry19, i32 %316];
    i32 %298 = phi [^b13, i32 %280] [^entry19, i32 %314];
    i32* %299 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %298];
    i32 %300 = load i32* %299;
    i1 %301 = icmp eq i32 %300, i32 42;
    i1 %302 = icmp eq i32 %300, i32 47;
    i1 %303 = or i1 %301, i1 %302;
    i1 %304 = icmp eq i32 %300, i32 37;
    i1 %305 = or i1 %303, i1 %304;
    i1 %306 = icmp eq i32 %300, i32 94;
    i1 %307 = or i1 %305, i1 %306;
    cbr i1 %307(prob = 0.97), ^entry19, ^entry18;
  ^entry18:
    i32 %308 = phi [^while.header7, i32 %297] [^entry19, i32 %316];
    i32 %309 = phi [^while.header7, i32 %298] [^entry19, i32 %314];
    i32 %310 = add i32 %309, i32 1;
    i32* %311 = getelementptr &([10000 * i32]* %6)[i64 0][i32 %310];
    store i32* %311 with i32 37;
    ubr ^b14;
  ^entry19:
    i32* %312 = getelementptr &([10000 * i32]* %8)[i64 0][i32 %297];
    store i32* %312 with i32 32;
    i32* %313 = getelementptr &(i32* %312)[i64 1];
    store i32* %313 with i32 %300;
    i32 %314 = add i32 %298, i32 -1;
    i1 %315 = icmp eq i32 %314, i32 0;
    i32 %316 = add i32 %297, i32 2;
    cbr i1 %315(prob = 0.5), ^entry18, ^while.header7;
}
