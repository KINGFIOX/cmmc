internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [10000 * i32]* @ints;
internal [10000 * i32]* @chas;
internal [10000 * i32]* @get;
internal [10000 * i32]* @get2;
func @main() -> i32 { NoRecurse } {
^entry():
    i32* %intt = alloc i32;
    i32* %chat = alloc i32;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    i32* %ii = alloc i32;
    store i32* %ii with i32 1;
    i32* %c = alloc i32;
    store i32* %intt with i32 0;
    store i32* %chat with i32 0;
    i32* %lengets = alloc i32;
    i32* %0 = getelementptr &([10000 * i32]* @get)[i32 0][i32 0];
    i32** %get = alloc i32*;
    store i32** %get with i32* %0;
    i32* %x = alloc i32;
    i32 %1 = call () -> i32 @getch();
    store i32* %x with i32 %1;
    i32* %length = alloc i32;
    store i32* %length with i32 0;
    i1 %2 = scmp neq i32 %1, i32 13;
    cbr i1 %2, [ ^b i32** %get, i32* %length, i32* %x, i32* %lengets, i32* %i, i32* %intt, i32* %chat, i32* %ii, i32* %c, i32 0, i32* %0, i32 %1, i32 0 ], [ ^b1 i32* %lengets, i32* %i, i32* %intt, i32* %chat, i32* %ii, i32* %c, i32 0, i32 0 ];
^b(i32** %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32* %arg10, i32 %arg11, i32 %arg12):
    i1 %0 = scmp neq i32 %arg11, i32 10;
    cbr i1 %0, [ ^while.body i32* %arg2, i32** %arg, i32* %arg1, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg10, i32 %arg11, i32 %arg12 ], [ ^b1 i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg12 ];
^b1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7):
    store i32* %arg with i32 %arg7;
    i1 %0 = scmp lt i32 %arg6, i32 %arg7;
    cbr i1 %0, [ ^indirect i32* %arg, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg1 ], [ ^while.header i32* %arg2, i32* %arg1, i32* %arg4, i32* %arg3 ];
^indirect(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = load i32* %arg5;
    ubr [ ^while.body1 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %0 ];
^while.body(i32* %arg, i32** %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11):
    i32* %0 = getelementptr &(i32* %arg9)[i32 %arg11];
    store i32* %0 with i32 %arg10;
    i32* %1 = load i32** %arg1;
    i32 %2 = load i32* %arg4;
    i32 %3 = add i32 %arg11, i32 1;
    store i32* %arg2 with i32 %3;
    i32 %4 = call () -> i32 @getch();
    store i32* %arg with i32 %4;
    i1 %5 = scmp neq i32 %4, i32 13;
    cbr i1 %5, [ ^b i32** %arg1, i32* %arg2, i32* %arg, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %2, i32* %1, i32 %4, i32 %3 ], [ ^b1 i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %2, i32 %3 ];
^while.header(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3):
    i32 %0 = load i32* %arg3;
    i1 %1 = scmp gt i32 %0, i32 0;
    cbr i1 %1, [ ^indirect2 i32* %arg3, i32* %arg2, i32* %arg, i32* %arg1, i32* %arg3, i32 %0 ], [ ^indirect1 i32* %arg, i32* %arg1, i32* %arg2 ];
^while.body1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    i32* %0 = getelementptr &([10000 * i32]* @get)[i32 0][i32 %arg6];
    i32 %1 = load i32* %0;
    i1 %2 = scmp ge i32 %1, i32 48;
    cbr i1 %2, [ ^indirect3 i32 %1, i32* %arg, i32 %arg6, i32* %arg3, i32* %arg4, i32* %arg1, i32* %arg5, i32* %arg2 ], [ ^indirect4 i32* %arg, i32 %arg6, i32* %arg4, i32* %arg3, i32* %arg5, i32* %arg2, i32* %arg1 ];
^indirect1(i32* %arg, i32* %arg1, i32* %arg2):
    i32 %0 = load i32* %arg2;
    ubr [ ^b2 i32* %arg, i32* %arg1, i32* %arg2, i32 %0 ];
^indirect2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5):
    i32 %0 = sub i32 %arg5, i32 1;
    store i32* %arg with i32 %0;
    i32* %1 = getelementptr &([10000 * i32]* @chas)[i32 0][i32 %arg5];
    i32 %2 = load i32* %1;
    i32 %3 = load i32* %arg1;
    i32* %4 = getelementptr &([10000 * i32]* @get2)[i32 0][i32 %3];
    store i32* %4 with i32 32;
    i32 %5 = add i32 %3, i32 1;
    i32* %6 = getelementptr &([10000 * i32]* @get2)[i32 0][i32 %5];
    store i32* %6 with i32 %2;
    i32 %7 = add i32 %3, i32 2;
    store i32* %arg1 with i32 %7;
    i32 %8 = load i32* %arg4;
    i1 %9 = scmp gt i32 %8, i32 0;
    cbr i1 %9, [ ^indirect2 i32* %arg4, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %8 ], [ ^b2 i32* %arg2, i32* %arg3, i32* %arg1, i32 %7 ];
^indirect3(i32 %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7):
    i1 %0 = scmp le i32 %arg, i32 57;
    i32 %1 = zext i1 %0 to i32;
    i1 %2 = scmp eq i32 %1, i32 1;
    cbr i1 %2, [ ^indirect5 i32* %arg1, i32 %arg2, i32* %arg4, i32* %arg3, i32* %arg5, i32* %arg6, i32* %arg7 ], [ ^indirect4 i32* %arg1, i32 %arg2, i32* %arg4, i32* %arg3, i32* %arg6, i32* %arg7, i32* %arg5 ];
^indirect4(i32* %arg, i32 %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    i32* %0 = getelementptr &([10000 * i32]* @get)[i32 0][i32 %arg1];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 40;
    cbr i1 %2, [ ^entry1 i32* %arg3, i32* %arg, i32* %arg3, i32* %arg2, i32* %arg5, i32* %arg6, i32* %arg4 ], [ ^b3 i32* %arg, i32* %arg2, i32* %arg3, i32* %arg5, i32* %arg6, i32* %arg4 ];
^b2(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3):
    i32* %0 = getelementptr &([10000 * i32]* @get2)[i32 0][i32 %arg3];
    store i32* %0 with i32 64;
    store i32* %arg1 with i32 1;
    i32* %1 = getelementptr &([10000 * i32]* @get2)[i32 0][i32 1];
    i32 %2 = load i32* %1;
    i1 %3 = scmp neq i32 %2, i32 64;
    cbr i1 %3, [ ^while.body2 i32* %arg2, i32* %arg, i32* %arg1, i32 1 ], [ ^b4 ];
^indirect5(i32* %arg, i32 %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    i32 %0 = load i32* %arg6;
    i32* %1 = getelementptr &([10000 * i32]* @get2)[i32 0][i32 %0];
    i32* %2 = getelementptr &([10000 * i32]* @get)[i32 0][i32 %arg1];
    i32 %3 = load i32* %2;
    store i32* %1 with i32 %3;
    i32 %4 = add i32 %0, i32 1;
    store i32* %arg6 with i32 %4;
    i32 %5 = load i32* %arg5;
    i32 %6 = add i32 %5, i32 1;
    store i32* %arg5 with i32 %6;
    i32 %7 = load i32* %arg;
    i1 %8 = scmp lt i32 %6, i32 %7;
    cbr i1 %8, [ ^while.body1 i32* %arg, i32* %arg4, i32* %arg6, i32* %arg3, i32* %arg2, i32* %arg5, i32 %6 ], [ ^while.header i32* %arg2, i32* %arg5, i32* %arg6, i32* %arg3 ];
^entry1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    i32 %0 = load i32* %arg;
    i32 %1 = add i32 %0, i32 1;
    store i32* %arg with i32 %1;
    i32* %2 = getelementptr &([10000 * i32]* @chas)[i32 0][i32 %1];
    store i32* %2 with i32 40;
    i32 %3 = load i32* %arg6;
    i32* %4 = getelementptr &([10000 * i32]* @get)[i32 0][i32 %3];
    i32 %5 = load i32* %4;
    i1 %6 = scmp eq i32 %5, i32 94;
    cbr i1 %6, [ ^entry2 i32* %arg2, i32* %arg6, i32* %arg1, i32* %arg3, i32* %arg2, i32* %arg4, i32* %arg5 ], [ ^b5 i32* %arg1, i32 %3, i32* %arg3, i32* %arg2, i32* %arg6, i32* %arg4, i32* %arg5 ];
^b3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = load i32* %arg5;
    i32* %1 = getelementptr &([10000 * i32]* @get)[i32 0][i32 %0];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %2, i32 94;
    cbr i1 %3, [ ^entry2 i32* %arg2, i32* %arg5, i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4 ], [ ^b5 i32* %arg, i32 %0, i32* %arg1, i32* %arg2, i32* %arg5, i32* %arg3, i32* %arg4 ];
^while.body2(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3):
    i32* %0 = getelementptr &([10000 * i32]* @get2)[i32 0][i32 %arg3];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 43;
    cbr i1 %2, [ ^if.then i32* %arg, i32* %arg2, i32* %arg1 ], [ ^indirect6 i32 %arg3, i32* %arg, i32* %arg2, i32* %arg1 ];
^b4():
    i32* %0 = getelementptr &([10000 * i32]* @ints)[i32 0][i32 1];
    i32 %1 = load i32* %0;
    call (i32) -> void @putint(i32 %1);
    ret i32 0;
^entry2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    i32 %0 = load i32* %arg;
    i32 %1 = add i32 %0, i32 1;
    store i32* %arg with i32 %1;
    i32* %2 = getelementptr &([10000 * i32]* @chas)[i32 0][i32 %1];
    store i32* %2 with i32 94;
    i32 %3 = load i32* %arg1;
    i32* %4 = getelementptr &([10000 * i32]* @get)[i32 0][i32 %3];
    i32 %5 = load i32* %4;
    i1 %6 = scmp eq i32 %5, i32 41;
    cbr i1 %6, [ ^entry3 i32* %arg4, i32* %arg6, i32* %arg2, i32* %arg5, i32* %arg3, i32* %arg4, i32* %arg1 ], [ ^b6 i32* %arg2, i32* %arg4, i32* %arg3, i32* %arg5, i32* %arg6, i32* %arg1, i32 %3 ];
^b5(i32* %arg, i32 %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    i32* %0 = getelementptr &([10000 * i32]* @get)[i32 0][i32 %arg1];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 41;
    cbr i1 %2, [ ^entry3 i32* %arg3, i32* %arg6, i32* %arg, i32* %arg5, i32* %arg2, i32* %arg3, i32* %arg4 ], [ ^indirect7 i32* %arg, i32* %arg3, i32* %arg2, i32* %arg5, i32* %arg6, i32* %arg4 ];
^if.then(i32* %arg, i32* %arg1, i32* %arg2):
    i32* %a = alloc i32;
    i32 %0 = load i32* %arg2;
    i32 %1 = sub i32 %0, i32 1;
    store i32* %arg2 with i32 %1;
    i32* %2 = getelementptr &([10000 * i32]* @ints)[i32 0][i32 %0];
    i32 %3 = load i32* %2;
    store i32* %a with i32 %3;
    i32* %b = alloc i32;
    i32 %4 = add i32 %0, i32 -2;
    store i32* %arg2 with i32 %4;
    i32* %5 = getelementptr &([10000 * i32]* @ints)[i32 0][i32 %1];
    i32 %6 = load i32* %5;
    store i32* %b with i32 %6;
    i32* %c = alloc i32;
    i32 %7 = load i32* %arg1;
    i32* %8 = getelementptr &([10000 * i32]* @get2)[i32 0][i32 %7];
    i32 %9 = load i32* %8;
    i1 %10 = scmp eq i32 %9, i32 43;
    cbr i1 %10, [ ^indirect8 i32* %c, i32* %b, i32* %a, i32 %6, i32 %7, i32* %arg1, i32* %arg, i32* %arg2, i32 %3, i32 %3, i32 %6 ], [ ^b7 i32* %b, i32* %a, i32* %c, i32 %7, i32* %arg2, i32* %arg, i32* %arg1, i32 %3, i32 %6 ];
^indirect6(i32 %arg, i32* %arg1, i32* %arg2, i32* %arg3):
    i32* %0 = getelementptr &([10000 * i32]* @get2)[i32 0][i32 %arg];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 45;
    cbr i1 %2, [ ^if.then i32* %arg1, i32* %arg2, i32* %arg3 ], [ ^b8 i32* %arg3, i32* %arg1, i32* %arg2 ];
^entry3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    i32 %0 = load i32* %arg;
    i32 %1 = sub i32 %0, i32 1;
    store i32* %arg with i32 %1;
    i32* %2 = getelementptr &([10000 * i32]* @chas)[i32 0][i32 %0];
    i32 %3 = load i32* %2;
    store i32* %arg1 with i32 %3;
    i1 %4 = scmp neq i32 %3, i32 40;
    cbr i1 %4, [ ^indirect9 i32* %arg2, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg1, i32* %arg3 ], [ ^indirect7 i32* %arg2, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg1, i32* %arg6 ];
^indirect7(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = load i32* %arg5;
    ubr [ ^b6 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %0 ];
^b6(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    i32* %0 = getelementptr &([10000 * i32]* @get)[i32 0][i32 %arg6];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 43;
    cbr i1 %2, [ ^while.header1 i32* %arg, i32* %arg4, i32* %arg3, i32* %arg5, i32* %arg2, i32* %arg1 ], [ ^b9 i32* %arg, i32 %arg6, i32* %arg1, i32* %arg2, i32* %arg5, i32* %arg3, i32* %arg4 ];
^indirect8(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i32 %0 = add i32 %arg8, i32 %arg3;
    store i32* %arg with i32 %0;
    i32* %1 = getelementptr &([10000 * i32]* @get2)[i32 0][i32 %arg4];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %2, i32 45;
    cbr i1 %3, [ ^if.then1 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg9, i32 %arg10 ], [ ^b10 i32* %arg2, i32* %arg1, i32* %arg, i32* %arg7, i32* %arg6, i32* %arg5, i32 %arg9, i32 %arg10, i32 %0 ];
^b7(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8):
    i32* %0 = getelementptr &([10000 * i32]* @get2)[i32 0][i32 %arg3];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 45;
    cbr i1 %2, [ ^if.then1 i32* %arg2, i32* %arg1, i32* %arg, i32* %arg6, i32* %arg5, i32* %arg4, i32 %arg7, i32 %arg8 ], [ ^b10 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 undef ];
^b8(i32* %arg, i32* %arg1, i32* %arg2):
    i32 %0 = load i32* %arg2;
    i32* %1 = getelementptr &([10000 * i32]* @get2)[i32 0][i32 %0];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %2, i32 42;
    cbr i1 %3, [ ^if.then i32* %arg1, i32* %arg2, i32* %arg ], [ ^indirect10 i32* %arg1, i32* %arg, i32* %arg2, i32 %0 ];
^indirect9(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = load i32* %arg5;
    ubr [ ^while.body3 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %0 ];
^while.header1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = load i32* %arg5;
    i32* %1 = getelementptr &([10000 * i32]* @chas)[i32 0][i32 %0];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %2, i32 43;
    cbr i1 %3, [ ^entry4 i32* %arg5, i32* %arg2, i32* %arg1, i32* %arg4, i32* %arg5, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg, i32 %0 ], [ ^indirect13 i32* %arg, i32 %0, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg5, i32* %arg4 ];
^if.then1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7):
    i32 %0 = sub i32 %arg7, i32 %arg6;
    store i32* %arg with i32 %0;
    i32 %1 = load i32* %arg3;
    i32* %2 = getelementptr &([10000 * i32]* @get2)[i32 0][i32 %1];
    i32 %3 = load i32* %2;
    i1 %4 = scmp eq i32 %3, i32 42;
    cbr i1 %4, [ ^indirect12 i32* %arg, i32* %arg2, i32* %arg1, i32 %1, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7 ], [ ^b11 i32* %arg2, i32* %arg1, i32* %arg, i32 %1, i32* %arg5, i32* %arg4, i32* %arg3, i32 %arg6, i32 %arg7, i32 %0 ];
^b9(i32* %arg, i32 %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    i32* %0 = getelementptr &([10000 * i32]* @get)[i32 0][i32 %arg1];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 45;
    cbr i1 %2, [ ^while.header2 i32* %arg, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg2 ], [ ^indirect11 i32* %arg, i32* %arg2, i32* %arg3, i32* %arg5, i32* %arg6, i32* %arg4 ];
^b10(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i32 %0 = load i32* %arg5;
    i32* %1 = getelementptr &([10000 * i32]* @get2)[i32 0][i32 %0];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %2, i32 42;
    cbr i1 %3, [ ^indirect12 i32* %arg2, i32* %arg1, i32* %arg, i32 %0, i32* %arg5, i32* %arg4, i32* %arg3, i32 %arg6, i32 %arg7 ], [ ^b11 i32* %arg1, i32* %arg, i32* %arg2, i32 %0, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8 ];
^indirect10(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3):
    i32* %0 = getelementptr &([10000 * i32]* @get2)[i32 0][i32 %arg3];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 47;
    cbr i1 %2, [ ^if.then i32* %arg, i32* %arg2, i32* %arg1 ], [ ^b12 i32* %arg1, i32* %arg, i32* %arg2 ];
^while.body3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    i32* %0 = getelementptr &([10000 * i32]* @get2)[i32 0][i32 %arg6];
    store i32* %0 with i32 32;
    i32 %1 = add i32 %arg6, i32 1;
    i32* %2 = getelementptr &([10000 * i32]* @get2)[i32 0][i32 %1];
    i32 %3 = load i32* %arg4;
    store i32* %2 with i32 %3;
    i32 %4 = add i32 %arg6, i32 2;
    store i32* %arg5 with i32 %4;
    i32 %5 = load i32* %arg2;
    i32 %6 = sub i32 %5, i32 1;
    store i32* %arg2 with i32 %6;
    i32* %7 = getelementptr &([10000 * i32]* @chas)[i32 0][i32 %5];
    i32 %8 = load i32* %7;
    store i32* %arg4 with i32 %8;
    i1 %9 = scmp neq i32 %8, i32 40;
    cbr i1 %9, [ ^while.body3 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %4 ], [ ^indirect7 i32* %arg, i32* %arg2, i32* %arg3, i32* %arg5, i32* %arg4, i32* %arg1 ];
^indirect11(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = load i32* %arg5;
    ubr [ ^b14 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %0 ];
^indirect12(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8):
    i32 %0 = mul i32 %arg7, i32 %arg8;
    store i32* %arg with i32 %0;
    i32* %1 = getelementptr &([10000 * i32]* @get2)[i32 0][i32 %arg3];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %2, i32 47;
    cbr i1 %3, [ ^if.then2 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8 ], [ ^b13 i32* %arg1, i32* %arg2, i32* %arg, i32* %arg6, i32* %arg5, i32* %arg4, i32 %arg7, i32 %arg8, i32 %0 ];
^entry4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9):
    i32 %0 = sub i32 %arg9, i32 1;
    store i32* %arg with i32 %0;
    i32* %1 = getelementptr &([10000 * i32]* @chas)[i32 0][i32 %arg9];
    i32 %2 = load i32* %1;
    store i32* %arg2 with i32 %2;
    i32 %3 = load i32* %arg1;
    i32* %4 = getelementptr &([10000 * i32]* @get2)[i32 0][i32 %3];
    store i32* %4 with i32 32;
    i32 %5 = add i32 %3, i32 1;
    i32* %6 = getelementptr &([10000 * i32]* @get2)[i32 0][i32 %5];
    store i32* %6 with i32 %2;
    i32 %7 = add i32 %3, i32 2;
    store i32* %arg1 with i32 %7;
    i1 %8 = scmp eq i32 %0, i32 0;
    i32 %9 = select i1 %8 ? i32 0 : i32 1;
    i1 %10 = scmp eq i32 %9, i32 0;
    cbr i1 %10, [ ^entry5 i32* %arg4, i32* %arg5, i32* %arg8, i32* %arg4, i32* %arg3, i32* %arg6, i32* %arg7 ], [ ^while.header1 i32* %arg8, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg3, i32* %arg4 ];
^indirect13(i32* %arg, i32 %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    i32* %0 = getelementptr &([10000 * i32]* @chas)[i32 0][i32 %arg1];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 45;
    cbr i1 %2, [ ^indirect14 i32* %arg5, i32* %arg3, i32* %arg2, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg ], [ ^b15 i32* %arg, i32* %arg6, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg5 ];
^while.header2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = load i32* %arg5;
    i32* %1 = getelementptr &([10000 * i32]* @chas)[i32 0][i32 %0];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %2, i32 43;
    cbr i1 %3, [ ^entry6 i32* %arg5, i32* %arg2, i32* %arg1, i32* %arg4, i32* %arg5, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg, i32 %0 ], [ ^indirect15 i32* %arg, i32 %0, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg5, i32* %arg4 ];
^b11(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i32* %0 = getelementptr &([10000 * i32]* @get2)[i32 0][i32 %arg3];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 47;
    cbr i1 %2, [ ^if.then2 i32* %arg2, i32* %arg1, i32* %arg, i32* %arg6, i32* %arg5, i32* %arg4, i32 %arg7, i32 %arg8 ], [ ^b13 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9 ];
^b12(i32* %arg, i32* %arg1, i32* %arg2):
    i32 %0 = load i32* %arg2;
    i32* %1 = getelementptr &([10000 * i32]* @get2)[i32 0][i32 %0];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %2, i32 37;
    cbr i1 %3, [ ^if.then i32* %arg1, i32* %arg2, i32* %arg ], [ ^indirect16 i32* %arg1, i32* %arg, i32* %arg2, i32 %0 ];
^indirect14(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8):
    i32 %0 = load i32* %arg;
    ubr [ ^entry4 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %0 ];
^if.then2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7):
    i32 %0 = sdiv i32 %arg7, i32 %arg6;
    store i32* %arg with i32 %0;
    i32 %1 = load i32* %arg3;
    i32* %2 = getelementptr &([10000 * i32]* @get2)[i32 0][i32 %1];
    i32 %3 = load i32* %2;
    i1 %4 = scmp eq i32 %3, i32 37;
    cbr i1 %4, [ ^indirect17 i32* %arg, i32* %arg1, i32* %arg2, i32 %1, i32* %arg4, i32* %arg3, i32* %arg5, i32 %arg6, i32 %arg7 ], [ ^b16 i32* %arg2, i32* %arg1, i32* %arg, i32 %1, i32* %arg5, i32* %arg3, i32* %arg4, i32 %arg6, i32 %arg7, i32 %0 ];
^entry5(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    i32 %0 = load i32* %arg;
    i32 %1 = add i32 %0, i32 1;
    store i32* %arg with i32 %1;
    i32* %2 = getelementptr &([10000 * i32]* @chas)[i32 0][i32 %1];
    store i32* %2 with i32 43;
    i32 %3 = load i32* %arg1;
    i32* %4 = getelementptr &([10000 * i32]* @get)[i32 0][i32 %3];
    i32 %5 = load i32* %4;
    i1 %6 = scmp eq i32 %5, i32 45;
    cbr i1 %6, [ ^while.header2 i32* %arg2, i32* %arg6, i32* %arg5, i32* %arg1, i32* %arg4, i32* %arg3 ], [ ^b14 i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg1, i32 %3 ];
^b13(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i32 %0 = load i32* %arg5;
    i32* %1 = getelementptr &([10000 * i32]* @get2)[i32 0][i32 %0];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %2, i32 37;
    cbr i1 %3, [ ^indirect17 i32* %arg2, i32* %arg1, i32* %arg, i32 %0, i32* %arg4, i32* %arg5, i32* %arg3, i32 %arg6, i32 %arg7 ], [ ^b16 i32* %arg, i32* %arg1, i32* %arg2, i32 %0, i32* %arg3, i32* %arg5, i32* %arg4, i32 %arg6, i32 %arg7, i32 %arg8 ];
^entry6(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9):
    i32 %0 = sub i32 %arg9, i32 1;
    store i32* %arg with i32 %0;
    i32* %1 = getelementptr &([10000 * i32]* @chas)[i32 0][i32 %arg9];
    i32 %2 = load i32* %1;
    store i32* %arg2 with i32 %2;
    i32 %3 = load i32* %arg1;
    i32* %4 = getelementptr &([10000 * i32]* @get2)[i32 0][i32 %3];
    store i32* %4 with i32 32;
    i32 %5 = add i32 %3, i32 1;
    i32* %6 = getelementptr &([10000 * i32]* @get2)[i32 0][i32 %5];
    store i32* %6 with i32 %2;
    i32 %7 = add i32 %3, i32 2;
    store i32* %arg1 with i32 %7;
    i1 %8 = scmp eq i32 %0, i32 0;
    i32 %9 = select i1 %8 ? i32 0 : i32 1;
    i1 %10 = scmp eq i32 %9, i32 0;
    cbr i1 %10, [ ^entry7 i32* %arg4, i32* %arg8, i32* %arg4, i32* %arg3, i32* %arg6, i32* %arg7, i32* %arg5 ], [ ^while.header2 i32* %arg8, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg3, i32* %arg4 ];
^b14(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    i32* %0 = getelementptr &([10000 * i32]* @get)[i32 0][i32 %arg6];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 42;
    cbr i1 %2, [ ^while.header3 i32* %arg, i32* %arg4, i32* %arg3, i32* %arg5, i32* %arg2, i32* %arg1 ], [ ^b17 i32* %arg, i32 %arg6, i32* %arg1, i32* %arg2, i32* %arg5, i32* %arg3, i32* %arg4 ];
^b15(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = load i32* %arg5;
    i32* %1 = getelementptr &([10000 * i32]* @chas)[i32 0][i32 %0];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %2, i32 42;
    cbr i1 %3, [ ^entry4 i32* %arg5, i32* %arg3, i32* %arg4, i32* %arg1, i32* %arg5, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg, i32 %0 ], [ ^indirect19 i32* %arg, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg5, i32 %0 ];
^indirect15(i32* %arg, i32 %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    i32* %0 = getelementptr &([10000 * i32]* @chas)[i32 0][i32 %arg1];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 45;
    cbr i1 %2, [ ^indirect18 i32* %arg5, i32* %arg3, i32* %arg2, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg ], [ ^b18 i32* %arg, i32* %arg6, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg5 ];
^indirect16(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3):
    i32* %0 = getelementptr &([10000 * i32]* @get2)[i32 0][i32 %arg3];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 94;
    cbr i1 %2, [ ^if.then i32* %arg, i32* %arg2, i32* %arg1 ], [ ^if.else i32* %arg1, i32* %arg, i32* %arg2 ];
^indirect17(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8):
    i32 %0 = srem i32 %arg8, i32 %arg7;
    store i32* %arg with i32 %0;
    i32* %1 = getelementptr &([10000 * i32]* @get2)[i32 0][i32 %arg3];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %2, i32 94;
    cbr i1 %3, [ ^if.then3 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8 ], [ ^entry8 i32 %0, i32* %arg6, i32* %arg, i32* %arg5, i32* %arg2, i32* %arg4, i32* %arg1, i32* %arg6 ];
^indirect18(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8):
    i32 %0 = load i32* %arg;
    ubr [ ^entry6 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %0 ];
^b16(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i32* %0 = getelementptr &([10000 * i32]* @get2)[i32 0][i32 %arg3];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 94;
    cbr i1 %2, [ ^if.then3 i32* %arg2, i32* %arg1, i32* %arg, i32* %arg6, i32* %arg5, i32* %arg4, i32 %arg7, i32 %arg8 ], [ ^entry8 i32 %arg9, i32* %arg4, i32* %arg2, i32* %arg5, i32* %arg, i32* %arg6, i32* %arg1, i32* %arg4 ];
^entry7(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    i32 %0 = load i32* %arg;
    i32 %1 = add i32 %0, i32 1;
    store i32* %arg with i32 %1;
    i32* %2 = getelementptr &([10000 * i32]* @chas)[i32 0][i32 %1];
    store i32* %2 with i32 45;
    i32 %3 = load i32* %arg6;
    i32* %4 = getelementptr &([10000 * i32]* @get)[i32 0][i32 %3];
    i32 %5 = load i32* %4;
    i1 %6 = scmp eq i32 %5, i32 42;
    cbr i1 %6, [ ^while.header3 i32* %arg1, i32* %arg5, i32* %arg4, i32* %arg6, i32* %arg3, i32* %arg2 ], [ ^b17 i32* %arg1, i32 %3, i32* %arg2, i32* %arg3, i32* %arg6, i32* %arg4, i32* %arg5 ];
^while.header3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = load i32* %arg5;
    i32* %1 = getelementptr &([10000 * i32]* @chas)[i32 0][i32 %0];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %2, i32 42;
    cbr i1 %3, [ ^entry9 i32* %arg5, i32* %arg2, i32* %arg1, i32* %arg4, i32* %arg5, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg, i32 %0 ], [ ^indirect21 i32* %arg, i32 %0, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg5, i32* %arg4 ];
^b17(i32* %arg, i32 %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    i32* %0 = getelementptr &([10000 * i32]* @get)[i32 0][i32 %arg1];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 47;
    cbr i1 %2, [ ^while.header4 i32* %arg, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg2 ], [ ^indirect20 i32* %arg, i32* %arg2, i32* %arg3, i32* %arg5, i32* %arg6, i32* %arg4 ];
^b18(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = load i32* %arg5;
    i32* %1 = getelementptr &([10000 * i32]* @chas)[i32 0][i32 %0];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %2, i32 42;
    cbr i1 %3, [ ^entry6 i32* %arg5, i32* %arg3, i32* %arg4, i32* %arg1, i32* %arg5, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg, i32 %0 ], [ ^indirect23 i32* %arg, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg5, i32 %0 ];
^indirect19(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    i32* %0 = getelementptr &([10000 * i32]* @chas)[i32 0][i32 %arg6];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 47;
    cbr i1 %2, [ ^indirect14 i32* %arg5, i32* %arg2, i32* %arg1, i32* %arg4, i32* %arg5, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg ], [ ^b19 i32* %arg, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg5 ];
^if.else(i32* %arg, i32* %arg1, i32* %arg2):
    i32 %0 = load i32* %arg2;
    i32* %1 = getelementptr &([10000 * i32]* @get2)[i32 0][i32 %0];
    i32 %2 = load i32* %1;
    i1 %3 = scmp neq i32 %2, i32 32;
    cbr i1 %3, [ ^indirect22 i32 %0, i32* %arg1, i32* %arg2, i32* %arg ], [ ^b20 i32 %0, i32* %arg1, i32* %arg, i32* %arg2 ];
^entry8(i32 %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7):
    i32 %0 = load i32* %arg1;
    i32 %1 = add i32 %0, i32 1;
    store i32* %arg1 with i32 %1;
    i32* %2 = getelementptr &([10000 * i32]* @ints)[i32 0][i32 %1];
    store i32* %2 with i32 %arg;
    free i32* %arg2;
    free i32* %arg4;
    free i32* %arg6;
    i32 %3 = load i32* %arg3;
    ubr [ ^b20 i32 %3, i32* %arg5, i32* %arg7, i32* %arg3 ];
^if.then3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7):
    i32* %a = alloc i32;
    store i32* %a with i32 %arg6;
    i32* %result = alloc i32;
    store i32* %result with i32 1;
    i1 %0 = scmp neq i32 %arg6, i32 0;
    cbr i1 %0, [ ^while.body4 i32* %a, i32* %result, i32* %arg, i32* %arg1, i32* %arg5, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg7, i32 %arg6, i32 1 ], [ ^b21 i32* %arg, i32* %arg1, i32* %arg5, i32* %arg2, i32* %arg3, i32* %arg4, i32 1 ];
^indirect20(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = load i32* %arg5;
    ubr [ ^b22 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %0 ];
^entry9(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9):
    i32 %0 = sub i32 %arg9, i32 1;
    store i32* %arg with i32 %0;
    i32* %1 = getelementptr &([10000 * i32]* @chas)[i32 0][i32 %arg9];
    i32 %2 = load i32* %1;
    store i32* %arg2 with i32 %2;
    i32 %3 = load i32* %arg1;
    i32* %4 = getelementptr &([10000 * i32]* @get2)[i32 0][i32 %3];
    store i32* %4 with i32 32;
    i32 %5 = add i32 %3, i32 1;
    i32* %6 = getelementptr &([10000 * i32]* @get2)[i32 0][i32 %5];
    store i32* %6 with i32 %2;
    i32 %7 = add i32 %3, i32 2;
    store i32* %arg1 with i32 %7;
    i1 %8 = scmp eq i32 %0, i32 0;
    i32 %9 = select i1 %8 ? i32 0 : i32 1;
    i1 %10 = scmp eq i32 %9, i32 0;
    cbr i1 %10, [ ^entry10 i32* %arg4, i32* %arg5, i32* %arg8, i32* %arg3, i32* %arg4, i32* %arg6, i32* %arg7 ], [ ^while.header3 i32* %arg8, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg3, i32* %arg4 ];
^indirect21(i32* %arg, i32 %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    i32* %0 = getelementptr &([10000 * i32]* @chas)[i32 0][i32 %arg1];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 47;
    cbr i1 %2, [ ^indirect24 i32* %arg5, i32* %arg3, i32* %arg2, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg ], [ ^b23 i32* %arg, i32* %arg6, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg5 ];
^while.header4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = load i32* %arg5;
    i32* %1 = getelementptr &([10000 * i32]* @chas)[i32 0][i32 %0];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %2, i32 42;
    cbr i1 %3, [ ^entry11 i32* %arg5, i32* %arg2, i32* %arg1, i32* %arg5, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg4, i32* %arg, i32 %0 ], [ ^indirect25 i32* %arg, i32 %0, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg5, i32* %arg4 ];
^indirect22(i32 %arg, i32* %arg1, i32* %arg2, i32* %arg3):
    i32* %0 = getelementptr &([10000 * i32]* @get2)[i32 0][i32 %arg];
    i32 %1 = load i32* %0;
    i32 %2 = sub i32 %1, i32 48;
    i32 %3 = load i32* %arg3;
    i32 %4 = add i32 %3, i32 1;
    store i32* %arg3 with i32 %4;
    i32* %5 = getelementptr &([10000 * i32]* @ints)[i32 0][i32 %4];
    store i32* %5 with i32 %2;
    store i32* %arg1 with i32 1;
    ubr [ ^while.header5 i32 1, i32* %arg1, i32* %arg3, i32* %arg2 ];
^b19(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = load i32* %arg5;
    i32* %1 = getelementptr &([10000 * i32]* @chas)[i32 0][i32 %0];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %2, i32 37;
    cbr i1 %3, [ ^entry4 i32* %arg5, i32* %arg3, i32* %arg4, i32* %arg1, i32* %arg5, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg, i32 %0 ], [ ^indirect26 i32* %arg, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg5, i32 %0 ];
^indirect23(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    i32* %0 = getelementptr &([10000 * i32]* @chas)[i32 0][i32 %arg6];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 47;
    cbr i1 %2, [ ^indirect18 i32* %arg5, i32* %arg2, i32* %arg1, i32* %arg4, i32* %arg5, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg ], [ ^b24 i32* %arg, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg5 ];
^b20(i32 %arg, i32* %arg1, i32* %arg2, i32* %arg3):
    i32 %0 = add i32 %arg, i32 1;
    store i32* %arg3 with i32 %0;
    i32* %1 = getelementptr &([10000 * i32]* @get2)[i32 0][i32 %0];
    i32 %2 = load i32* %1;
    i1 %3 = scmp neq i32 %2, i32 64;
    cbr i1 %3, [ ^while.body2 i32* %arg1, i32* %arg2, i32* %arg3, i32 %0 ], [ ^b4 ];
^b21(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    store i32* %arg with i32 %arg6;
    ubr [ ^entry8 i32 %arg6, i32* %arg2, i32* %arg, i32* %arg5, i32* %arg3, i32* %arg4, i32* %arg1, i32* %arg2 ];
^while.body4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i32 %0 = mul i32 %arg10, i32 %arg8;
    store i32* %arg1 with i32 %0;
    i32 %1 = sub i32 %arg9, i32 1;
    store i32* %arg with i32 %1;
    i1 %2 = scmp neq i32 %1, i32 0;
    cbr i1 %2, [ ^while.body4 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %1, i32 %0 ], [ ^b21 i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %0 ];
^indirect24(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8):
    i32 %0 = load i32* %arg;
    ubr [ ^entry9 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %0 ];
^entry10(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    i32 %0 = load i32* %arg;
    i32 %1 = add i32 %0, i32 1;
    store i32* %arg with i32 %1;
    i32* %2 = getelementptr &([10000 * i32]* @chas)[i32 0][i32 %1];
    store i32* %2 with i32 42;
    i32 %3 = load i32* %arg1;
    i32* %4 = getelementptr &([10000 * i32]* @get)[i32 0][i32 %3];
    i32 %5 = load i32* %4;
    i1 %6 = scmp eq i32 %5, i32 47;
    cbr i1 %6, [ ^while.header4 i32* %arg2, i32* %arg6, i32* %arg5, i32* %arg1, i32* %arg3, i32* %arg4 ], [ ^b22 i32* %arg2, i32* %arg4, i32* %arg3, i32* %arg5, i32* %arg6, i32* %arg1, i32 %3 ];
^entry11(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9):
    i32 %0 = sub i32 %arg9, i32 1;
    store i32* %arg with i32 %0;
    i32* %1 = getelementptr &([10000 * i32]* @chas)[i32 0][i32 %arg9];
    i32 %2 = load i32* %1;
    store i32* %arg2 with i32 %2;
    i32 %3 = load i32* %arg1;
    i32* %4 = getelementptr &([10000 * i32]* @get2)[i32 0][i32 %3];
    store i32* %4 with i32 32;
    i32 %5 = add i32 %3, i32 1;
    i32* %6 = getelementptr &([10000 * i32]* @get2)[i32 0][i32 %5];
    store i32* %6 with i32 %2;
    i32 %7 = add i32 %3, i32 2;
    store i32* %arg1 with i32 %7;
    i1 %8 = scmp eq i32 %0, i32 0;
    i32 %9 = select i1 %8 ? i32 0 : i32 1;
    i1 %10 = scmp eq i32 %9, i32 0;
    cbr i1 %10, [ ^entry12 i32* %arg3, i32* %arg8, i32* %arg3, i32* %arg7, i32* %arg5, i32* %arg6, i32* %arg4 ], [ ^while.header4 i32* %arg8, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg7, i32* %arg3 ];
^b22(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    i32* %0 = getelementptr &([10000 * i32]* @get)[i32 0][i32 %arg6];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 37;
    cbr i1 %2, [ ^while.header6 i32* %arg, i32* %arg4, i32* %arg3, i32* %arg5, i32* %arg2, i32* %arg1 ], [ ^b25 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg4, i32* %arg5, i32* %arg3 ];
^b23(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = load i32* %arg5;
    i32* %1 = getelementptr &([10000 * i32]* @chas)[i32 0][i32 %0];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %2, i32 37;
    cbr i1 %3, [ ^entry9 i32* %arg5, i32* %arg3, i32* %arg4, i32* %arg1, i32* %arg5, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg, i32 %0 ], [ ^indirect30 i32* %arg, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg5, i32 %0 ];
^indirect25(i32* %arg, i32 %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    i32* %0 = getelementptr &([10000 * i32]* @chas)[i32 0][i32 %arg1];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 47;
    cbr i1 %2, [ ^indirect27 i32* %arg5, i32* %arg3, i32* %arg2, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg6, i32* %arg ], [ ^b26 i32* %arg, i32* %arg6, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg5 ];
^b24(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = load i32* %arg5;
    i32* %1 = getelementptr &([10000 * i32]* @chas)[i32 0][i32 %0];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %2, i32 37;
    cbr i1 %3, [ ^entry6 i32* %arg5, i32* %arg3, i32* %arg4, i32* %arg1, i32* %arg5, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg, i32 %0 ], [ ^indirect31 i32* %arg, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg5, i32 %0 ];
^indirect26(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    i32* %0 = getelementptr &([10000 * i32]* @chas)[i32 0][i32 %arg6];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 94;
    cbr i1 %2, [ ^indirect14 i32* %arg5, i32* %arg2, i32* %arg1, i32* %arg4, i32* %arg5, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg ], [ ^entry5 i32* %arg5, i32* %arg3, i32* %arg, i32* %arg5, i32* %arg4, i32* %arg2, i32* %arg1 ];
^while.header5(i32 %arg, i32* %arg1, i32* %arg2, i32* %arg3):
    i32 %0 = load i32* %arg3;
    i32 %1 = add i32 %0, i32 %arg;
    i32* %2 = getelementptr &([10000 * i32]* @get2)[i32 0][i32 %1];
    i32 %3 = load i32* %2;
    i1 %4 = scmp neq i32 %3, i32 32;
    cbr i1 %4, [ ^indirect28 i32 %0, i32* %arg3, i32* %arg2, i32* %arg1 ], [ ^indirect29 i32 %0, i32* %arg2, i32* %arg3, i32* %arg1 ];
^indirect27(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8):
    i32 %0 = load i32* %arg;
    ubr [ ^entry11 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %0 ];
^entry12(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    i32 %0 = load i32* %arg;
    i32 %1 = add i32 %0, i32 1;
    store i32* %arg with i32 %1;
    i32* %2 = getelementptr &([10000 * i32]* @chas)[i32 0][i32 %1];
    store i32* %2 with i32 47;
    i32 %3 = load i32* %arg6;
    i32* %4 = getelementptr &([10000 * i32]* @get)[i32 0][i32 %3];
    i32 %5 = load i32* %4;
    i1 %6 = scmp eq i32 %5, i32 37;
    cbr i1 %6, [ ^while.header6 i32* %arg1, i32* %arg5, i32* %arg4, i32* %arg6, i32* %arg3, i32* %arg2 ], [ ^b25 i32* %arg1, i32* %arg3, i32* %arg2, i32* %arg5, i32* %arg6, i32* %arg4 ];
^while.header6(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = load i32* %arg5;
    i32* %1 = getelementptr &([10000 * i32]* @chas)[i32 0][i32 %0];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %2, i32 42;
    cbr i1 %3, [ ^entry13 i32* %arg5, i32* %arg2, i32* %arg1, i32* %arg5, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg4, i32* %arg, i32 %0 ], [ ^indirect32 i32* %arg, i32 %0, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg5, i32* %arg4 ];
^indirect28(i32 %arg, i32* %arg1, i32* %arg2, i32* %arg3):
    i32 %0 = load i32* %arg3;
    i32 %1 = add i32 %arg, i32 %0;
    i32* %2 = getelementptr &([10000 * i32]* @get2)[i32 0][i32 %1];
    i32 %3 = load i32* %2;
    i32 %4 = sub i32 %3, i32 48;
    i32 %5 = load i32* %arg2;
    i32* %6 = getelementptr &([10000 * i32]* @ints)[i32 0][i32 %5];
    i32 %7 = load i32* %6;
    i32 %8 = mul i32 %7, i32 10;
    i32 %9 = add i32 %8, i32 %4;
    store i32* %6 with i32 %9;
    i32 %10 = add i32 %0, i32 1;
    store i32* %arg3 with i32 %10;
    ubr [ ^while.header5 i32 %10, i32* %arg3, i32* %arg2, i32* %arg1 ];
^b25(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = load i32* %arg5;
    i32* %1 = getelementptr &([10000 * i32]* @get2)[i32 0][i32 %0];
    store i32* %1 with i32 32;
    i32 %2 = add i32 %0, i32 1;
    store i32* %arg5 with i32 %2;
    i32 %3 = load i32* %arg4;
    i32 %4 = add i32 %3, i32 1;
    store i32* %arg4 with i32 %4;
    i32 %5 = load i32* %arg;
    i1 %6 = scmp lt i32 %4, i32 %5;
    cbr i1 %6, [ ^while.body1 i32* %arg, i32* %arg3, i32* %arg5, i32* %arg2, i32* %arg1, i32* %arg4, i32 %4 ], [ ^while.header i32* %arg1, i32* %arg4, i32* %arg5, i32* %arg2 ];
^indirect29(i32 %arg, i32* %arg1, i32* %arg2, i32* %arg3):
    i32 %0 = load i32* %arg3;
    i32 %1 = add i32 %arg, i32 %0;
    i32 %2 = sub i32 %1, i32 1;
    ubr [ ^b20 i32 %2, i32* %arg3, i32* %arg1, i32* %arg2 ];
^b26(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = load i32* %arg5;
    i32* %1 = getelementptr &([10000 * i32]* @chas)[i32 0][i32 %0];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %2, i32 37;
    cbr i1 %3, [ ^entry11 i32* %arg5, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg1, i32* %arg, i32 %0 ], [ ^indirect33 i32* %arg, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg5, i32 %0 ];
^indirect30(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    i32* %0 = getelementptr &([10000 * i32]* @chas)[i32 0][i32 %arg6];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 94;
    cbr i1 %2, [ ^indirect24 i32* %arg5, i32* %arg2, i32* %arg1, i32* %arg4, i32* %arg5, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg ], [ ^entry10 i32* %arg5, i32* %arg3, i32* %arg, i32* %arg4, i32* %arg5, i32* %arg2, i32* %arg1 ];
^indirect31(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    i32* %0 = getelementptr &([10000 * i32]* @chas)[i32 0][i32 %arg6];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 94;
    cbr i1 %2, [ ^indirect18 i32* %arg5, i32* %arg2, i32* %arg1, i32* %arg4, i32* %arg5, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg ], [ ^entry7 i32* %arg5, i32* %arg, i32* %arg5, i32* %arg4, i32* %arg2, i32* %arg1, i32* %arg3 ];
^entry13(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9):
    i32 %0 = sub i32 %arg9, i32 1;
    store i32* %arg with i32 %0;
    i32* %1 = getelementptr &([10000 * i32]* @chas)[i32 0][i32 %arg9];
    i32 %2 = load i32* %1;
    store i32* %arg2 with i32 %2;
    i32 %3 = load i32* %arg1;
    i32* %4 = getelementptr &([10000 * i32]* @get2)[i32 0][i32 %3];
    store i32* %4 with i32 32;
    i32 %5 = add i32 %3, i32 1;
    i32* %6 = getelementptr &([10000 * i32]* @get2)[i32 0][i32 %5];
    store i32* %6 with i32 %2;
    i32 %7 = add i32 %3, i32 2;
    store i32* %arg1 with i32 %7;
    i1 %8 = scmp eq i32 %0, i32 0;
    i32 %9 = select i1 %8 ? i32 0 : i32 1;
    i1 %10 = scmp eq i32 %9, i32 0;
    cbr i1 %10, [ ^entry14 i32* %arg3, i32* %arg8, i32* %arg7, i32* %arg3, i32* %arg6, i32* %arg4, i32* %arg5 ], [ ^while.header6 i32* %arg8, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg7, i32* %arg3 ];
^indirect32(i32* %arg, i32 %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    i32* %0 = getelementptr &([10000 * i32]* @chas)[i32 0][i32 %arg1];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 47;
    cbr i1 %2, [ ^indirect34 i32* %arg5, i32* %arg3, i32* %arg2, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg6, i32* %arg ], [ ^b27 i32* %arg, i32* %arg6, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg5 ];
^indirect33(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    i32* %0 = getelementptr &([10000 * i32]* @chas)[i32 0][i32 %arg6];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 94;
    cbr i1 %2, [ ^indirect27 i32* %arg5, i32* %arg2, i32* %arg1, i32* %arg5, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg4, i32* %arg ], [ ^entry12 i32* %arg5, i32* %arg, i32* %arg5, i32* %arg4, i32* %arg2, i32* %arg1, i32* %arg3 ];
^entry14(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    i32 %0 = load i32* %arg;
    i32 %1 = add i32 %0, i32 1;
    store i32* %arg with i32 %1;
    i32* %2 = getelementptr &([10000 * i32]* @chas)[i32 0][i32 %1];
    store i32* %2 with i32 37;
    ubr [ ^b25 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6 ];
^indirect34(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8):
    i32 %0 = load i32* %arg;
    ubr [ ^entry13 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %0 ];
^b27(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = load i32* %arg5;
    i32* %1 = getelementptr &([10000 * i32]* @chas)[i32 0][i32 %0];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %2, i32 37;
    cbr i1 %3, [ ^entry13 i32* %arg5, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg1, i32* %arg, i32 %0 ], [ ^indirect35 i32* %arg, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg5, i32 %0 ];
^indirect35(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    i32* %0 = getelementptr &([10000 * i32]* @chas)[i32 0][i32 %arg6];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 94;
    cbr i1 %2, [ ^indirect34 i32* %arg5, i32* %arg2, i32* %arg1, i32* %arg5, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg4, i32* %arg ], [ ^entry14 i32* %arg5, i32* %arg, i32* %arg4, i32* %arg5, i32* %arg1, i32* %arg3, i32* %arg2 ];
}
