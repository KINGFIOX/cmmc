internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal [10000 * i32]* @ints;
internal [10000 * i32]* @chas;
internal [10000 * i32]* @get;
internal [10000 * i32]* @get2;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %length = alloc i32;
    i32* %ii = alloc i32;
    i32* %i = alloc i32;
    i32* %chat = alloc i32;
    i32* %intt = alloc i32;
    store i32* %i with i32 0;
    store i32* %ii with i32 1;
    store i32* %intt with i32 0;
    store i32* %chat with i32 0;
    i32* %0 = getelementptr &([10000 * i32]* @get)[i64 0][i64 0];
    i32 %1 = call () -> i32 @getch();
    store i32* %length with i32 0;
    ubr ^while.header;
^while.header:
    i32 %2 = phi [^while.body, i32 %12] [^entry, i32 0];
    i32 %3 = phi [^while.body, i32 %13] [^entry, i32 0];
    i32 %4 = phi [^while.body, i32 %14] [^entry, i32 0];
    i32 %5 = phi [^while.body, i32 %15] [^entry, i32 1];
    i32 %6 = phi [^while.body, i32 %17] [^entry, i32 0];
    i32 %7 = phi [^while.body, i32 %18] [^entry, i32 %1];
    i1 %8 = scmp neq i32 %7, i32 13;
    cbr i1 %8(prob = 0.5), ^b, ^b1;
^b:
    i1 %9 = scmp neq i32 %7, i32 10;
    ubr ^b1;
^b1:
    i1 %10 = phi [^while.header, i1 false] [^b, i1 %9];
    cbr i1 %10(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i32* %11 = getelementptr &(i32* %0)[i32 %6];
    store i32* %11 with i32 %7;
    i32 %12 = load i32* %intt;
    i32 %13 = load i32* %chat;
    i32 %14 = load i32* %i;
    i32 %15 = load i32* %ii;
    i32 %16 = load i32* %length;
    i32 %17 = add i32 %16, i32 1;
    store i32* %length with i32 %17;
    i32 %18 = call () -> i32 @getch();
    ubr ^while.header;
^while.header1:
    i32 %19 = phi [^b1, i32 %3] [^b7, i32 %51];
    i32 %20 = phi [^b1, i32 %4] [^b7, i32 %53];
    i32 %21 = phi [^b1, i32 %5] [^b7, i32 %52];
    i1 %22 = scmp lt i32 %20, i32 %6;
    cbr i1 %22(prob = 0.97), ^while.body1, ^while.header2;
^while.body1:
    i32* %23 = getelementptr &([10000 * i32]* @get)[i64 0][i32 %20];
    i32 %24 = load i32* %23;
    i1 %25 = scmp gt i32 %24, i32 47;
    cbr i1 %25(prob = 0.5), ^b2, ^b4;
^while.header2:
    i32 %26 = phi [^while.header1, i32 %19] [^entry1, i32 %30];
    i32 %27 = phi [^while.header1, i32 %21] [^entry1, i32 %35];
    i1 %28 = scmp gt i32 %26, i32 0;
    cbr i1 %28(prob = 0.97), ^entry1, ^b3;
^b2:
    i1 %29 = scmp le i32 %24, i32 57;
    ubr ^b4;
^entry1:
    i32 %30 = add i32 %26, i32 -1;
    i32* %31 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %26];
    i32 %32 = load i32* %31;
    i32* %33 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %27];
    store i32* %33 with i32 32;
    i32* %34 = getelementptr &(i32* %33)[i64 1];
    store i32* %34 with i32 %32;
    i32 %35 = add i32 %27, i32 2;
    ubr ^while.header2;
^b3:
    i32* %36 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %27];
    store i32* %36 with i32 64;
    ubr ^while.header3;
^b4:
    i1 %37 = phi [^while.body1, i1 false] [^b2, i1 %29];
    cbr i1 %37(prob = 0.5), ^while.body2, ^b5;
^b5:
    ubr ^while.body2;
^while.body2:
    i32 %38 = phi [^b4, i32 1] [^b5, i32 0];
    i1 %39 = scmp eq i32 %38, i32 1;
    cbr i1 %39(prob = 0.5), ^if.then, ^if.else;
^while.header3:
    i32 %40 = phi [^b30, i32 %140] [^b3, i32 %2];
    i32 %41 = phi [^b30, i32 %142] [^b3, i32 1];
    i32* %42 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %41];
    i32 %43 = load i32* %42;
    i1 %44 = scmp neq i32 %43, i32 64;
    cbr i1 %44(prob = 0.97), ^while.body3, ^b6;
^if.then:
    i32* %45 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %21];
    store i32* %45 with i32 %24;
    i32 %46 = add i32 %21, i32 1;
    ubr ^b7;
^if.else:
    i1 %47 = scmp eq i32 %24, i32 40;
    cbr i1 %47(prob = 0.5), ^entry2, ^b10;
^while.body3:
    i1 %48 = scmp eq i32 %43, i32 43;
    cbr i1 %48(prob = 0.5), ^b9, ^b8;
^b6:
    i32* %49 = getelementptr &([10000 * i32]* @ints)[i64 0][i64 1];
    i32 %50 = load i32* %49;
    call (i32) -> void @putint(i32 %50);
    ret i32 0;
^b7:
    i32 %51 = phi [^b47, i32 %181] [^if.then, i32 %19];
    i32 %52 = phi [^b47, i32 %184] [^if.then, i32 %46];
    i32 %53 = add i32 %20, i32 1;
    ubr ^while.header1;
^entry2:
    i32 %54 = add i32 %19, i32 1;
    i32* %55 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %54];
    store i32* %55 with i32 40;
    ubr ^b10;
^b8:
    i1 %56 = scmp eq i32 %43, i32 45;
    ubr ^b9;
^b9:
    i1 %57 = phi [^b8, i1 %56] [^while.body3, i1 true];
    cbr i1 %57(prob = 0.5), ^b12, ^b11;
^b10:
    i32 %58 = phi [^entry2, i32 %54] [^if.else, i32 %19];
    i32 %59 = load i32* %23;
    i1 %60 = scmp eq i32 %59, i32 94;
    cbr i1 %60(prob = 0.5), ^entry3, ^b13;
^entry3:
    i32 %61 = add i32 %58, i32 1;
    i32* %62 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %61];
    store i32* %62 with i32 94;
    ubr ^b13;
^b11:
    i32 %63 = load i32* %42;
    i1 %64 = scmp eq i32 %63, i32 42;
    ubr ^b12;
^b12:
    i1 %65 = phi [^b11, i1 %64] [^b9, i1 true];
    cbr i1 %65(prob = 0.5), ^b15, ^b14;
^b13:
    i32 %66 = phi [^entry3, i32 %61] [^b10, i32 %58];
    i1 %67 = scmp eq i32 %59, i32 41;
    cbr i1 %67(prob = 0.5), ^entry4, ^b16;
^b14:
    i32 %68 = load i32* %42;
    i1 %69 = scmp eq i32 %68, i32 47;
    ubr ^b15;
^entry4:
    i32 %70 = add i32 %66, i32 -1;
    i32* %71 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %66];
    i32 %72 = load i32* %71;
    ubr ^while.header4;
^b15:
    i1 %73 = phi [^b14, i1 %69] [^b12, i1 true];
    cbr i1 %73(prob = 0.5), ^b18, ^b17;
^b16:
    i32 %74 = phi [^while.header4, i32 %81] [^b13, i32 %66];
    i32 %75 = phi [^while.header4, i32 %82] [^b13, i32 %21];
    i32 %76 = load i32* %23;
    i1 %77 = scmp eq i32 %76, i32 43;
    cbr i1 %77(prob = 0.5), ^while.header5, ^b19;
^b17:
    i32 %78 = load i32* %42;
    i1 %79 = scmp eq i32 %78, i32 37;
    ubr ^b18;
^b18:
    i1 %80 = phi [^b17, i1 %79] [^b15, i1 true];
    cbr i1 %80(prob = 0.5), ^b21, ^b20;
^while.header4:
    i32 %81 = phi [^while.body4, i32 %99] [^entry4, i32 %70];
    i32 %82 = phi [^while.body4, i32 %98] [^entry4, i32 %21];
    i32 %83 = phi [^while.body4, i32 %101] [^entry4, i32 %72];
    i1 %84 = scmp neq i32 %83, i32 40;
    cbr i1 %84(prob = 0.97), ^while.body4, ^b16;
^while.header5:
    i32 %85 = phi [^while.body6, i32 %221] [^b16, i32 %74];
    i32 %86 = phi [^while.body6, i32 %225] [^b16, i32 %75];
    i32* %87 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %85];
    i32 %88 = load i32* %87;
    i1 %89 = scmp eq i32 %88, i32 43;
    cbr i1 %89(prob = 0.5), ^b23, ^b22;
^b19:
    i32 %90 = phi [^entry6, i32 %217] [^b16, i32 %74];
    i32 %91 = phi [^entry6, i32 %216] [^b16, i32 %75];
    i32 %92 = load i32* %23;
    i1 %93 = scmp eq i32 %92, i32 45;
    cbr i1 %93(prob = 0.5), ^while.header6, ^b24;
^b20:
    i32 %94 = load i32* %42;
    i1 %95 = scmp eq i32 %94, i32 94;
    ubr ^b21;
^while.body4:
    i32* %96 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %82];
    store i32* %96 with i32 32;
    i32* %97 = getelementptr &(i32* %96)[i64 1];
    store i32* %97 with i32 %83;
    i32 %98 = add i32 %82, i32 2;
    i32 %99 = add i32 %81, i32 -1;
    i32* %100 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %81];
    i32 %101 = load i32* %100;
    ubr ^while.header4;
^b21:
    i1 %102 = phi [^b20, i1 %95] [^b18, i1 true];
    cbr i1 %102(prob = 0.5), ^entry5, ^if.else1;
^b22:
    i1 %103 = scmp eq i32 %88, i32 45;
    ubr ^b23;
^b23:
    i1 %104 = phi [^b22, i1 %103] [^while.header5, i1 true];
    cbr i1 %104(prob = 0.5), ^b26, ^b25;
^while.header6:
    i32 %105 = phi [^while.body8, i32 %255] [^b19, i32 %90];
    i32 %106 = phi [^while.body8, i32 %259] [^b19, i32 %91];
    i32* %107 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %105];
    i32 %108 = load i32* %107;
    i1 %109 = scmp eq i32 %108, i32 43;
    cbr i1 %109(prob = 0.5), ^b28, ^b27;
^b24:
    i32 %110 = phi [^entry10, i32 %251] [^b19, i32 %90];
    i32 %111 = phi [^entry10, i32 %250] [^b19, i32 %91];
    i32 %112 = load i32* %23;
    i1 %113 = scmp eq i32 %112, i32 42;
    cbr i1 %113(prob = 0.5), ^while.header7, ^b29;
^entry5:
    i32* %114 = getelementptr &([10000 * i32]* @ints)[i64 0][i32 %40];
    i32 %115 = load i32* %114;
    i32* %116 = getelementptr &(i32* %114)[i64 -1];
    i32 %117 = load i32* %116;
    i32 %118 = load i32* %42;
    i1 %119 = scmp eq i32 %118, i32 43;
    cbr i1 %119(prob = 0.5), ^if.then1, ^b31;
^if.else1:
    i32 %120 = load i32* %42;
    i1 %121 = scmp neq i32 %120, i32 32;
    cbr i1 %121(prob = 0.5), ^if.then2, ^b30;
^b25:
    i32 %122 = load i32* %87;
    i1 %123 = scmp eq i32 %122, i32 42;
    ubr ^b26;
^b26:
    i1 %124 = phi [^b25, i1 %123] [^b23, i1 true];
    cbr i1 %124(prob = 0.5), ^b33, ^b32;
^b27:
    i1 %125 = scmp eq i32 %108, i32 45;
    ubr ^b28;
^b28:
    i1 %126 = phi [^b27, i1 %125] [^while.header6, i1 true];
    cbr i1 %126(prob = 0.5), ^b35, ^b34;
^while.header7:
    i32 %127 = phi [^while.body7, i32 %238] [^b24, i32 %110];
    i32 %128 = phi [^while.body7, i32 %242] [^b24, i32 %111];
    i32* %129 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %127];
    i32 %130 = load i32* %129;
    i1 %131 = scmp eq i32 %130, i32 42;
    cbr i1 %131(prob = 0.5), ^b37, ^b36;
^b29:
    i32 %132 = phi [^entry8, i32 %232] [^b24, i32 %112];
    i32 %133 = phi [^entry8, i32 %230] [^b24, i32 %110];
    i32 %134 = phi [^entry8, i32 %229] [^b24, i32 %111];
    i1 %135 = scmp eq i32 %132, i32 47;
    cbr i1 %135(prob = 0.5), ^while.header8, ^b38;
^if.then1:
    i32 %136 = add i32 %115, i32 %117;
    ubr ^b31;
^if.then2:
    i32 %137 = add i32 %120, i32 -48;
    i32 %138 = add i32 %40, i32 1;
    i32* %139 = getelementptr &([10000 * i32]* @ints)[i64 0][i32 %138];
    store i32* %139 with i32 %137;
    ubr ^while.header9;
^b30:
    i32 %140 = phi [^b74, i32 %281] [^b49, i32 %138] [^if.else1, i32 %40];
    i32 %141 = phi [^b74, i32 %41] [^b49, i32 %196] [^if.else1, i32 %41];
    i32 %142 = add i32 %141, i32 1;
    ubr ^while.header3;
^b31:
    i32 %143 = phi [^if.then1, i32 %136] [^entry5, i32 0];
    i1 %144 = scmp eq i32 %118, i32 45;
    cbr i1 %144(prob = 0.5), ^if.then3, ^b40;
^b32:
    i32 %145 = load i32* %87;
    i1 %146 = scmp eq i32 %145, i32 47;
    ubr ^b33;
^b33:
    i1 %147 = phi [^b32, i1 %146] [^b26, i1 true];
    cbr i1 %147(prob = 0.5), ^b41, ^b39;
^b34:
    i32 %148 = load i32* %107;
    i1 %149 = scmp eq i32 %148, i32 42;
    ubr ^b35;
^b35:
    i1 %150 = phi [^b34, i1 %149] [^b28, i1 true];
    cbr i1 %150(prob = 0.5), ^b43, ^b42;
^b36:
    i1 %151 = scmp eq i32 %130, i32 47;
    ubr ^b37;
^b37:
    i1 %152 = phi [^b36, i1 %151] [^while.header7, i1 true];
    cbr i1 %152(prob = 0.5), ^b45, ^b44;
^while.header8:
    i32 %153 = phi [^while.body9, i32 %271] [^b29, i32 %133];
    i32 %154 = phi [^while.body9, i32 %275] [^b29, i32 %134];
    i32* %155 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %153];
    i32 %156 = load i32* %155;
    i1 %157 = scmp eq i32 %156, i32 42;
    cbr i1 %157(prob = 0.5), ^b48, ^b46;
^b38:
    i32 %158 = phi [^entry12, i32 %263] [^b29, i32 %133];
    i32 %159 = phi [^entry12, i32 %262] [^b29, i32 %134];
    i32 %160 = load i32* %23;
    i1 %161 = scmp eq i32 %160, i32 37;
    cbr i1 %161(prob = 0.5), ^while.header10, ^b47;
^if.then3:
    i32 %162 = sub i32 %117, i32 %115;
    ubr ^b40;
^while.header9:
    i32 %163 = phi [^while.body5, i32 %195] [^if.then2, i32 1];
    i32 %164 = add i32 %163, i32 %41;
    i32* %165 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %164];
    i32 %166 = load i32* %165;
    i1 %167 = scmp neq i32 %166, i32 32;
    cbr i1 %167(prob = 0.97), ^while.body5, ^b49;
^b39:
    i32 %168 = load i32* %87;
    i1 %169 = scmp eq i32 %168, i32 37;
    ubr ^b41;
^b40:
    i32 %170 = phi [^if.then3, i32 %162] [^b31, i32 %143];
    i32 %171 = load i32* %42;
    i1 %172 = scmp eq i32 %171, i32 42;
    cbr i1 %172(prob = 0.5), ^if.then4, ^b53;
^b41:
    i1 %173 = phi [^b39, i1 %169] [^b33, i1 true];
    cbr i1 %173(prob = 0.5), ^b51, ^b50;
^b42:
    i32 %174 = load i32* %107;
    i1 %175 = scmp eq i32 %174, i32 47;
    ubr ^b43;
^b43:
    i1 %176 = phi [^b42, i1 %175] [^b35, i1 true];
    cbr i1 %176(prob = 0.5), ^b54, ^b52;
^b44:
    i32 %177 = load i32* %129;
    i1 %178 = scmp eq i32 %177, i32 37;
    ubr ^b45;
^b45:
    i1 %179 = phi [^b44, i1 %178] [^b37, i1 true];
    cbr i1 %179(prob = 0.5), ^b56, ^b55;
^b46:
    i1 %180 = scmp eq i32 %156, i32 47;
    ubr ^b48;
^b47:
    i32 %181 = phi [^entry14, i32 %288] [^b38, i32 %158];
    i32 %182 = phi [^entry14, i32 %287] [^b38, i32 %159];
    i32* %183 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %182];
    store i32* %183 with i32 32;
    i32 %184 = add i32 %182, i32 1;
    ubr ^b7;
^b48:
    i1 %185 = phi [^b46, i1 %180] [^while.header8, i1 true];
    cbr i1 %185(prob = 0.5), ^b58, ^b57;
^while.header10:
    i32 %186 = phi [^while.body11, i32 %292] [^b38, i32 %158];
    i32 %187 = phi [^while.body11, i32 %296] [^b38, i32 %159];
    i32* %188 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %186];
    i32 %189 = load i32* %188;
    i1 %190 = scmp eq i32 %189, i32 42;
    cbr i1 %190(prob = 0.5), ^b60, ^b59;
^while.body5:
    i32 %191 = load i32* %139;
    i32 %192 = mul i32 %191, i32 10;
    i32 %193 = add i32 %192, i32 -48;
    i32 %194 = add i32 %193, i32 %166;
    store i32* %139 with i32 %194;
    i32 %195 = add i32 %163, i32 1;
    ubr ^while.header9;
^b49:
    i32 %196 = add i32 %164, i32 -1;
    ubr ^b30;
^if.then4:
    i32 %197 = mul i32 %115, i32 %117;
    ubr ^b53;
^b50:
    i32 %198 = load i32* %87;
    i1 %199 = scmp eq i32 %198, i32 94;
    ubr ^b51;
^b51:
    i1 %200 = phi [^b50, i1 %199] [^b41, i1 true];
    cbr i1 %200(prob = 0.97), ^entry7, ^entry6;
^b52:
    i32 %201 = load i32* %107;
    i1 %202 = scmp eq i32 %201, i32 37;
    ubr ^b54;
^b53:
    i32 %203 = phi [^if.then4, i32 %197] [^b40, i32 %170];
    i1 %204 = scmp eq i32 %171, i32 47;
    cbr i1 %204(prob = 0.5), ^if.then5, ^b63;
^b54:
    i1 %205 = phi [^b52, i1 %202] [^b43, i1 true];
    cbr i1 %205(prob = 0.5), ^b62, ^b61;
^b55:
    i32 %206 = load i32* %129;
    i1 %207 = scmp eq i32 %206, i32 94;
    ubr ^b56;
^b56:
    i1 %208 = phi [^b55, i1 %207] [^b45, i1 true];
    cbr i1 %208(prob = 0.97), ^entry9, ^entry8;
^b57:
    i32 %209 = load i32* %155;
    i1 %210 = scmp eq i32 %209, i32 37;
    ubr ^b58;
^b58:
    i1 %211 = phi [^b57, i1 %210] [^b48, i1 true];
    cbr i1 %211(prob = 0.5), ^b65, ^b64;
^b59:
    i1 %212 = scmp eq i32 %189, i32 47;
    ubr ^b60;
^b60:
    i1 %213 = phi [^b59, i1 %212] [^while.header10, i1 true];
    cbr i1 %213(prob = 0.5), ^b67, ^b66;
^if.then5:
    i32 %214 = sdiv i32 %117, i32 %115;
    ubr ^b63;
^entry6:
    i32 %215 = phi [^while.body6, i32 %221] [^b51, i32 %85];
    i32 %216 = phi [^while.body6, i32 %225] [^b51, i32 %86];
    i32 %217 = add i32 %215, i32 1;
    i32* %218 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %217];
    store i32* %218 with i32 43;
    ubr ^b19;
^b61:
    i32 %219 = load i32* %107;
    i1 %220 = scmp eq i32 %219, i32 94;
    ubr ^b62;
^entry7:
    i32 %221 = add i32 %85, i32 -1;
    i32 %222 = load i32* %87;
    i32* %223 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %86];
    store i32* %223 with i32 32;
    i32* %224 = getelementptr &(i32* %223)[i64 1];
    store i32* %224 with i32 %222;
    i32 %225 = add i32 %86, i32 2;
    i1 %226 = scmp eq i32 %85, i32 1;
    cbr i1 %226(prob = 0.5), ^while.body6, ^b68;
^b62:
    i1 %227 = phi [^b61, i1 %220] [^b54, i1 true];
    cbr i1 %227(prob = 0.97), ^entry11, ^entry10;
^entry8:
    i32 %228 = phi [^while.body7, i32 %238] [^b56, i32 %127];
    i32 %229 = phi [^while.body7, i32 %242] [^b56, i32 %128];
    i32 %230 = add i32 %228, i32 1;
    i32* %231 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %230];
    store i32* %231 with i32 42;
    i32 %232 = load i32* %23;
    ubr ^b29;
^b63:
    i32 %233 = phi [^if.then5, i32 %214] [^b53, i32 %203];
    i32 %234 = load i32* %42;
    i1 %235 = scmp eq i32 %234, i32 37;
    cbr i1 %235(prob = 0.5), ^if.then6, ^b70;
^b64:
    i32 %236 = load i32* %155;
    i1 %237 = scmp eq i32 %236, i32 94;
    ubr ^b65;
^entry9:
    i32 %238 = add i32 %127, i32 -1;
    i32 %239 = load i32* %129;
    i32* %240 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %128];
    store i32* %240 with i32 32;
    i32* %241 = getelementptr &(i32* %240)[i64 1];
    store i32* %241 with i32 %239;
    i32 %242 = add i32 %128, i32 2;
    i1 %243 = scmp eq i32 %127, i32 1;
    cbr i1 %243(prob = 0.5), ^while.body7, ^b69;
^b65:
    i1 %244 = phi [^b64, i1 %237] [^b58, i1 true];
    cbr i1 %244(prob = 0.97), ^entry13, ^entry12;
^b66:
    i32 %245 = load i32* %188;
    i1 %246 = scmp eq i32 %245, i32 37;
    ubr ^b67;
^b67:
    i1 %247 = phi [^b66, i1 %246] [^b60, i1 true];
    cbr i1 %247(prob = 0.5), ^b72, ^b71;
^b68:
    ubr ^while.body6;
^if.then6:
    i32 %248 = srem i32 %117, i32 %115;
    ubr ^b70;
^entry10:
    i32 %249 = phi [^while.body8, i32 %255] [^b62, i32 %105];
    i32 %250 = phi [^while.body8, i32 %259] [^b62, i32 %106];
    i32 %251 = add i32 %249, i32 1;
    i32* %252 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %251];
    store i32* %252 with i32 45;
    ubr ^b24;
^while.body6:
    i32 %253 = phi [^entry7, i32 0] [^b68, i32 1];
    i1 %254 = scmp eq i32 %253, i32 0;
    cbr i1 %254(prob = 0.5), ^entry6, ^while.header5;
^entry11:
    i32 %255 = add i32 %105, i32 -1;
    i32 %256 = load i32* %107;
    i32* %257 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %106];
    store i32* %257 with i32 32;
    i32* %258 = getelementptr &(i32* %257)[i64 1];
    store i32* %258 with i32 %256;
    i32 %259 = add i32 %106, i32 2;
    i1 %260 = scmp eq i32 %105, i32 1;
    cbr i1 %260(prob = 0.5), ^while.body8, ^b73;
^b69:
    ubr ^while.body7;
^entry12:
    i32 %261 = phi [^while.body9, i32 %271] [^b65, i32 %153];
    i32 %262 = phi [^while.body9, i32 %275] [^b65, i32 %154];
    i32 %263 = add i32 %261, i32 1;
    i32* %264 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %263];
    store i32* %264 with i32 47;
    ubr ^b38;
^while.body7:
    i32 %265 = phi [^entry9, i32 0] [^b69, i32 1];
    i1 %266 = scmp eq i32 %265, i32 0;
    cbr i1 %266(prob = 0.5), ^entry8, ^while.header7;
^b70:
    i32 %267 = phi [^if.then6, i32 %248] [^b63, i32 %233];
    i1 %268 = scmp eq i32 %234, i32 94;
    cbr i1 %268(prob = 0.5), ^while.header11, ^b74;
^b71:
    i32 %269 = load i32* %188;
    i1 %270 = scmp eq i32 %269, i32 94;
    ubr ^b72;
^entry13:
    i32 %271 = add i32 %153, i32 -1;
    i32 %272 = load i32* %155;
    i32* %273 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %154];
    store i32* %273 with i32 32;
    i32* %274 = getelementptr &(i32* %273)[i64 1];
    store i32* %274 with i32 %272;
    i32 %275 = add i32 %154, i32 2;
    i1 %276 = scmp eq i32 %153, i32 1;
    cbr i1 %276(prob = 0.5), ^while.body9, ^b75;
^b72:
    i1 %277 = phi [^b71, i1 %270] [^b67, i1 true];
    cbr i1 %277(prob = 0.97), ^entry15, ^entry14;
^b73:
    ubr ^while.body8;
^while.body8:
    i32 %278 = phi [^entry11, i32 0] [^b73, i32 1];
    i1 %279 = scmp eq i32 %278, i32 0;
    cbr i1 %279(prob = 0.5), ^entry10, ^while.header6;
^b74:
    i32 %280 = phi [^while.header11, i32 %283] [^b70, i32 %267];
    i32 %281 = add i32 %40, i32 -1;
    i32* %282 = getelementptr &([10000 * i32]* @ints)[i64 0][i32 %281];
    store i32* %282 with i32 %280;
    ubr ^b30;
^b75:
    ubr ^while.body9;
^while.header11:
    i32 %283 = phi [^b70, i32 1] [^while.body10, i32 %298];
    i32 %284 = phi [^b70, i32 %115] [^while.body10, i32 %299];
    i1 %285 = scmp neq i32 %284, i32 0;
    cbr i1 %285(prob = 0.97), ^while.body10, ^b74;
^entry14:
    i32 %286 = phi [^while.body11, i32 %292] [^b72, i32 %186];
    i32 %287 = phi [^while.body11, i32 %296] [^b72, i32 %187];
    i32 %288 = add i32 %286, i32 1;
    i32* %289 = getelementptr &([10000 * i32]* @chas)[i64 0][i32 %288];
    store i32* %289 with i32 37;
    ubr ^b47;
^while.body9:
    i32 %290 = phi [^entry13, i32 0] [^b75, i32 1];
    i1 %291 = scmp eq i32 %290, i32 0;
    cbr i1 %291(prob = 0.5), ^entry12, ^while.header8;
^entry15:
    i32 %292 = add i32 %186, i32 -1;
    i32 %293 = load i32* %188;
    i32* %294 = getelementptr &([10000 * i32]* @get2)[i64 0][i32 %187];
    store i32* %294 with i32 32;
    i32* %295 = getelementptr &(i32* %294)[i64 1];
    store i32* %295 with i32 %293;
    i32 %296 = add i32 %187, i32 2;
    i1 %297 = scmp eq i32 %186, i32 1;
    cbr i1 %297(prob = 0.5), ^while.body11, ^b76;
^while.body10:
    i32 %298 = mul i32 %117, i32 %283;
    i32 %299 = add i32 %284, i32 -1;
    ubr ^while.header11;
^b76:
    ubr ^while.body11;
^while.body11:
    i32 %300 = phi [^entry15, i32 0] [^b76, i32 1];
    i1 %301 = scmp eq i32 %300, i32 0;
    cbr i1 %301(prob = 0.5), ^entry14, ^while.header10;
}
