internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @b = 5;
internal [4 * i32]* @c = [6, 7, 8, 9];
func @main() -> i32 { Entry } {
^entry:
    [7 * [1 * [5 * i32]]]* %c = alloc [7 * [1 * [5 * i32]]];
    i32* %b = alloc i32;
    [2 * [8 * i32]]* %c1 = alloc [2 * [8 * i32]];
    i32* %a = alloc i32;
    i32* %a1 = alloc i32;
    i32* %a2 = alloc i32;
    store i32* %a2 with i32 0;
    store i32* %a2 with i32 1;
    store i32* %a1 with i32 0;
    store i32* %a1 with i32 2;
    store i32* %a1 with i32 3;
    i32 %0 = load i32* %a1;
    call (i32) -> void @putint(i32 %0);
    i32 %1 = load i32* %a1;
    call (i32) -> void @putint(i32 %1);
    i32 %2 = load i32* %a2;
    call (i32) -> void @putint(i32 %2);
    call (i32) -> void @putch(i32 10);
    ubr ^while.header;
^while.header:
    i32 %3 = load i32* %a2;
    i1 %4 = scmp lt i32 %3, i32 5;
    i32 %5 = zext i1 %4 to i32;
    i1 %6 = scmp neq i32 %5, i32 0;
    cbr i1 %6(prob = 0.97), ^while.body, ^b1;
^while.body:
    store i32* %a with i32 0;
    i32 %7 = load i32* %a;
    i32 %8 = add i32 %7, i32 1;
    store i32* %a with i32 %8;
    i32 %9 = load i32* %a;
    i1 %10 = scmp neq i32 %9, i32 0;
    cbr i1 %10(prob = 0.5), ^if.then, ^b2;
^b1:
    i32 %11 = load i32* %a2;
    call (i32) -> void @putint(i32 %11);
    call (i32) -> void @putch(i32 10);
    i32* %12 = getelementptr &([4 * i32]* @c)[i64 0][i64 2];
    store i32* %12 with i32 1;
    i32* %13 = getelementptr &([2 * [8 * i32]]* %c1)[i64 0][i64 0][i64 1];
    i32* %14 = getelementptr &([2 * [8 * i32]]* %c1)[i64 0][i64 0][i64 0];
    store i32* %14 with i32 0;
    store i32* %13 with i32 9;
    i32* %15 = getelementptr &([2 * [8 * i32]]* %c1)[i64 0][i64 1][i64 0];
    i32* %16 = getelementptr &([2 * [8 * i32]]* %c1)[i64 0][i64 0][i64 2];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([2 * [8 * i32]]* %c1)[i64 0][i64 0][i64 3];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([2 * [8 * i32]]* %c1)[i64 0][i64 0][i64 4];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([2 * [8 * i32]]* %c1)[i64 0][i64 0][i64 5];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &([2 * [8 * i32]]* %c1)[i64 0][i64 0][i64 6];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &([2 * [8 * i32]]* %c1)[i64 0][i64 0][i64 7];
    store i32* %21 with i32 0;
    store i32* %15 with i32 8;
    i32* %22 = getelementptr &([2 * [8 * i32]]* %c1)[i64 0][i64 1][i64 1];
    store i32* %22 with i32 3;
    i32* %23 = getelementptr &([2 * [8 * i32]]* %c1)[i64 1][i64 0][i64 0];
    i32* %24 = getelementptr &([2 * [8 * i32]]* %c1)[i64 0][i64 1][i64 2];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &([2 * [8 * i32]]* %c1)[i64 0][i64 1][i64 3];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &([2 * [8 * i32]]* %c1)[i64 0][i64 1][i64 4];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &([2 * [8 * i32]]* %c1)[i64 0][i64 1][i64 5];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &([2 * [8 * i32]]* %c1)[i64 0][i64 1][i64 6];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &([2 * [8 * i32]]* %c1)[i64 0][i64 1][i64 7];
    store i32* %29 with i32 0;
    store i32* %b with i32 2;
    i32* %30 = getelementptr &([4 * i32]* @c)[i64 0][i64 2];
    i32 %31 = load i32* %30;
    i1 %32 = scmp neq i32 %31, i32 0;
    cbr i1 %32(prob = 0.5), ^if.then1, ^b3;
^if.then:
    ubr ^b1;
^b2:
    ubr ^while.header;
^if.then1:
    i32* %33 = getelementptr &([7 * [1 * [5 * i32]]]* %c)[i64 0][i64 2][i64 0][i64 0];
    i32* %34 = getelementptr &([7 * [1 * [5 * i32]]]* %c)[i64 0][i64 0][i64 0][i64 0];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &([7 * [1 * [5 * i32]]]* %c)[i64 0][i64 0][i64 0][i64 1];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &([7 * [1 * [5 * i32]]]* %c)[i64 0][i64 0][i64 0][i64 2];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &([7 * [1 * [5 * i32]]]* %c)[i64 0][i64 0][i64 0][i64 3];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &([7 * [1 * [5 * i32]]]* %c)[i64 0][i64 0][i64 0][i64 4];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &([7 * [1 * [5 * i32]]]* %c)[i64 0][i64 1][i64 0][i64 0];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &([7 * [1 * [5 * i32]]]* %c)[i64 0][i64 1][i64 0][i64 1];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &([7 * [1 * [5 * i32]]]* %c)[i64 0][i64 1][i64 0][i64 2];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &([7 * [1 * [5 * i32]]]* %c)[i64 0][i64 1][i64 0][i64 3];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &([7 * [1 * [5 * i32]]]* %c)[i64 0][i64 1][i64 0][i64 4];
    store i32* %43 with i32 0;
    store i32* %33 with i32 2;
    i32* %44 = getelementptr &([7 * [1 * [5 * i32]]]* %c)[i64 0][i64 2][i64 0][i64 1];
    store i32* %44 with i32 1;
    i32* %45 = getelementptr &([7 * [1 * [5 * i32]]]* %c)[i64 0][i64 2][i64 0][i64 2];
    store i32* %45 with i32 8;
    i32* %46 = getelementptr &([7 * [1 * [5 * i32]]]* %c)[i64 1][i64 0][i64 0][i64 0];
    i32* %47 = getelementptr &([7 * [1 * [5 * i32]]]* %c)[i64 0][i64 2][i64 0][i64 3];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &([7 * [1 * [5 * i32]]]* %c)[i64 0][i64 2][i64 0][i64 4];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &([7 * [1 * [5 * i32]]]* %c)[i64 0][i64 3][i64 0][i64 0];
    store i32* %49 with i32 0;
    i32* %50 = getelementptr &([7 * [1 * [5 * i32]]]* %c)[i64 0][i64 3][i64 0][i64 1];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &([7 * [1 * [5 * i32]]]* %c)[i64 0][i64 3][i64 0][i64 2];
    store i32* %51 with i32 0;
    i32* %52 = getelementptr &([7 * [1 * [5 * i32]]]* %c)[i64 0][i64 3][i64 0][i64 3];
    store i32* %52 with i32 0;
    i32* %53 = getelementptr &([7 * [1 * [5 * i32]]]* %c)[i64 0][i64 3][i64 0][i64 4];
    store i32* %53 with i32 0;
    i32* %54 = getelementptr &([7 * [1 * [5 * i32]]]* %c)[i64 0][i64 4][i64 0][i64 0];
    store i32* %54 with i32 0;
    i32* %55 = getelementptr &([7 * [1 * [5 * i32]]]* %c)[i64 0][i64 4][i64 0][i64 1];
    store i32* %55 with i32 0;
    i32* %56 = getelementptr &([7 * [1 * [5 * i32]]]* %c)[i64 0][i64 4][i64 0][i64 2];
    store i32* %56 with i32 0;
    i32* %57 = getelementptr &([7 * [1 * [5 * i32]]]* %c)[i64 0][i64 4][i64 0][i64 3];
    store i32* %57 with i32 0;
    i32* %58 = getelementptr &([7 * [1 * [5 * i32]]]* %c)[i64 0][i64 4][i64 0][i64 4];
    store i32* %58 with i32 0;
    i32* %59 = getelementptr &([7 * [1 * [5 * i32]]]* %c)[i64 0][i64 5][i64 0][i64 0];
    store i32* %59 with i32 0;
    i32* %60 = getelementptr &([7 * [1 * [5 * i32]]]* %c)[i64 0][i64 5][i64 0][i64 1];
    store i32* %60 with i32 0;
    i32* %61 = getelementptr &([7 * [1 * [5 * i32]]]* %c)[i64 0][i64 5][i64 0][i64 2];
    store i32* %61 with i32 0;
    i32* %62 = getelementptr &([7 * [1 * [5 * i32]]]* %c)[i64 0][i64 5][i64 0][i64 3];
    store i32* %62 with i32 0;
    i32* %63 = getelementptr &([7 * [1 * [5 * i32]]]* %c)[i64 0][i64 5][i64 0][i64 4];
    store i32* %63 with i32 0;
    i32* %64 = getelementptr &([7 * [1 * [5 * i32]]]* %c)[i64 0][i64 6][i64 0][i64 0];
    store i32* %64 with i32 0;
    i32* %65 = getelementptr &([7 * [1 * [5 * i32]]]* %c)[i64 0][i64 6][i64 0][i64 1];
    store i32* %65 with i32 0;
    i32* %66 = getelementptr &([7 * [1 * [5 * i32]]]* %c)[i64 0][i64 6][i64 0][i64 2];
    store i32* %66 with i32 0;
    i32* %67 = getelementptr &([7 * [1 * [5 * i32]]]* %c)[i64 0][i64 6][i64 0][i64 3];
    store i32* %67 with i32 0;
    i32* %68 = getelementptr &([7 * [1 * [5 * i32]]]* %c)[i64 0][i64 6][i64 0][i64 4];
    store i32* %68 with i32 0;
    i32 %69 = load i32* %b;
    i64 %70 = sext i32 %69 to i64;
    [1 * [5 * i32]]* %71 = getelementptr &([7 * [1 * [5 * i32]]]* %c)[i64 0][i64 %70];
    [5 * i32]* %72 = getelementptr &([1 * [5 * i32]]* %71)[i64 0][i64 0];
    i32* %73 = getelementptr &([5 * i32]* %72)[i64 0][i64 0];
    i32 %74 = load i32* %73;
    call (i32) -> void @putint(i32 %74);
    i32 %75 = load i32* %b;
    i64 %76 = sext i32 %75 to i64;
    [1 * [5 * i32]]* %77 = getelementptr &([7 * [1 * [5 * i32]]]* %c)[i64 0][i64 %76];
    [5 * i32]* %78 = getelementptr &([1 * [5 * i32]]* %77)[i64 0][i64 0];
    i32* %79 = getelementptr &([5 * i32]* %78)[i64 0][i64 1];
    i32 %80 = load i32* %79;
    call (i32) -> void @putint(i32 %80);
    i32 %81 = load i32* %b;
    i64 %82 = sext i32 %81 to i64;
    [1 * [5 * i32]]* %83 = getelementptr &([7 * [1 * [5 * i32]]]* %c)[i64 0][i64 %82];
    [5 * i32]* %84 = getelementptr &([1 * [5 * i32]]* %83)[i64 0][i64 0];
    i32* %85 = getelementptr &([5 * i32]* %84)[i64 0][i64 2];
    i32 %86 = load i32* %85;
    call (i32) -> void @putint(i32 %86);
    ubr ^b3;
^b3:
    call (i32) -> void @putch(i32 10);
    i32 %87 = load i32* @b;
    call (i32) -> void @putint(i32 %87);
    call (i32) -> void @putch(i32 10);
    i32* %88 = getelementptr &([4 * i32]* @c)[i64 0][i64 0];
    i32 %89 = load i32* %88;
    call (i32) -> void @putint(i32 %89);
    i32* %90 = getelementptr &([4 * i32]* @c)[i64 0][i64 1];
    i32 %91 = load i32* %90;
    call (i32) -> void @putint(i32 %91);
    i32* %92 = getelementptr &([4 * i32]* @c)[i64 0][i64 2];
    i32 %93 = load i32* %92;
    call (i32) -> void @putint(i32 %93);
    i32* %94 = getelementptr &([4 * i32]* @c)[i64 0][i64 3];
    i32 %95 = load i32* %94;
    call (i32) -> void @putint(i32 %95);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
internal func @cmmc::Intrinsic::memset() -> i8* { NoMemoryRead };
