internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @reverse(i32 %n) -> void {
^entry:
    i32* %next = alloc i32;
    i32* %n1 = alloc i32;
    store i32* %n1 with i32 %n;
    store i32* %next with i32 0;
    i32 %0 = load i32* %n1;
    i1 %1 = scmp le i32 %0, i32 1;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32 %4 = call () -> i32 @getint();
    store i32* %next with i32 %4;
    i32 %5 = load i32* %next;
    call (i32) -> void @putint(i32 %5);
    ubr ^b;
^if.else:
    i32 %6 = call () -> i32 @getint();
    store i32* %next with i32 %6;
    i32 %7 = load i32* %n1;
    i32 %8 = sub i32 %7, i32 1;
    call (i32) -> void @reverse(i32 %8);
    i32 %9 = load i32* %next;
    call (i32) -> void @putint(i32 %9);
    ubr ^b;
^b:
    ret;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %i = alloc i32;
    store i32* %i with i32 200;
    i32 %0 = load i32* %i;
    call (i32) -> void @reverse(i32 %0);
    ret i32 0;
}
