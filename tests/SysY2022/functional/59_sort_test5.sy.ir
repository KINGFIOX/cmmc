internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    i32* %len = alloc i32;
    i32* %i = alloc i32;
    i32* %tmp0 = alloc i32;
    i32* %son = alloc i32;
    i32* %end = alloc i32;
    i32* %son1 = alloc i32;
    i32* %end1 = alloc i32;
    i32* %n = alloc i32;
    [10 * i32]* %a = alloc [10 * i32];
    store i32* %n with i32 10;
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    store i32* %len with i32 10;
    store i32* %i with i32 4;
    ubr ^while.header;
^while.header:
    i32 %10 = phi [^while.body2, i32 %18] [^entry, i32 10];
    i32 %11 = phi [^while.body2, i32 %38] [^entry, i32 4];
    i32 %12 = phi [^while.body2, i32 %23] [^entry, i32 10];
    i1 %13 = scmp gt i32 %11, i32 -1;
    cbr i1 %13(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %14 = add i32 %12, i32 -1;
    store i32* %end with i32 %14;
    i32 %15 = mul i32 %11, i32 2;
    i32 %16 = add i32 %15, i32 1;
    store i32* %son with i32 %16;
    ubr ^while.header1;
^b:
    i32 %17 = add i32 %12, i32 -1;
    store i32* %i with i32 %17;
    ubr ^while.header2;
^while.header1:
    i32 %18 = phi [^if.else, i32 %73] [^while.body, i32 %10];
    i32 %19 = phi [^if.else, i32 %74] [^while.body, i32 %14];
    i32 %20 = phi [^if.else, i32 %75] [^while.body, i32 %11];
    i32 %21 = phi [^if.else, i32 %79] [^while.body, i32 %16];
    i32 %22 = phi [^if.else, i32 %76] [^while.body, i32 %11];
    i32 %23 = phi [^if.else, i32 %77] [^while.body, i32 %12];
    i32 %24 = add i32 %19, i32 1;
    i1 %25 = scmp lt i32 %21, i32 %24;
    cbr i1 %25(prob = 0.97), ^while.body3, ^while.body2;
^while.header2:
    i32 %26 = phi [^while.body5, i32 %51] [^b, i32 %10];
    i32 %27 = phi [^while.body5, i32 %59] [^b, i32 %17];
    i1 %28 = scmp gt i32 %27, i32 0;
    cbr i1 %28(prob = 0.97), ^while.body1, ^while.header3;
^while.body1:
    store i32* %tmp0 with i32 0;
    i32 %29 = load i32* %0;
    i32* %30 = getelementptr &(i32* %0)[i32 %27];
    i32 %31 = load i32* %30;
    store i32* %0 with i32 %31;
    store i32* %30 with i32 %29;
    i32 %32 = load i32* %n;
    i32 %33 = load i32* %tmp0;
    i32 %34 = load i32* %i;
    i32 %35 = add i32 %34, i32 -1;
    store i32* %end1 with i32 %35;
    i32 %36 = mul i32 %33, i32 2;
    i32 %37 = add i32 %36, i32 1;
    store i32* %son1 with i32 %37;
    ubr ^while.header4;
^while.body2:
    i32 %38 = add i32 %22, i32 -1;
    store i32* %i with i32 %38;
    ubr ^while.header;
^while.body3:
    i1 %39 = scmp lt i32 %21, i32 %19;
    cbr i1 %39(prob = 0.5), ^b1, ^b2;
^while.header3:
    i32 %40 = phi [^while.header2, i32 0] [^while.body4, i32 %49];
    i1 %41 = scmp lt i32 %40, i32 %26;
    cbr i1 %41(prob = 0.97), ^while.body4, ^b3;
^b1:
    i32* %42 = getelementptr &(i32* %0)[i32 %21];
    i32 %43 = load i32* %42;
    i32* %44 = getelementptr &(i32* %42)[i64 1];
    i32 %45 = load i32* %44;
    i1 %46 = scmp lt i32 %43, i32 %45;
    ubr ^b2;
^while.body4:
    i32* %47 = getelementptr &([10 * i32]* %a)[i64 0][i32 %40];
    i32 %48 = load i32* %47;
    call (i32) -> void @putint(i32 %48);
    call (i32) -> void @putch(i32 10);
    i32 %49 = add i32 %40, i32 1;
    ubr ^while.header3;
^b2:
    i1 %50 = phi [^while.body3, i1 false] [^b1, i1 %46];
    cbr i1 %50(prob = 0.5), ^if.then, ^b4;
^while.header4:
    i32 %51 = phi [^if.else1, i32 %89] [^while.body1, i32 %32];
    i32 %52 = phi [^if.else1, i32 %90] [^while.body1, i32 %35];
    i32 %53 = phi [^if.else1, i32 %91] [^while.body1, i32 %33];
    i32 %54 = phi [^if.else1, i32 %94] [^while.body1, i32 %37];
    i32 %55 = phi [^if.else1, i32 %92] [^while.body1, i32 %34];
    i32 %56 = add i32 %52, i32 1;
    i1 %57 = scmp lt i32 %54, i32 %56;
    cbr i1 %57(prob = 0.97), ^while.body6, ^while.body5;
^b3:
    ret i32 0;
^if.then:
    i32 %58 = add i32 %21, i32 1;
    store i32* %son with i32 %58;
    ubr ^b4;
^while.body5:
    i32 %59 = add i32 %55, i32 -1;
    store i32* %i with i32 %59;
    ubr ^while.header2;
^while.body6:
    i1 %60 = scmp lt i32 %54, i32 %52;
    cbr i1 %60(prob = 0.5), ^b5, ^b6;
^b4:
    i32 %61 = phi [^b2, i32 %21] [^if.then, i32 %58];
    i32* %62 = getelementptr &(i32* %0)[i32 %20];
    i32 %63 = load i32* %62;
    i32* %64 = getelementptr &(i32* %0)[i32 %61];
    i32 %65 = load i32* %64;
    i1 %66 = scmp gt i32 %63, i32 %65;
    cbr i1 %66(prob = 0.5), ^while.body2, ^if.else;
^b5:
    i32* %67 = getelementptr &(i32* %0)[i32 %54];
    i32 %68 = load i32* %67;
    i32* %69 = getelementptr &(i32* %67)[i64 1];
    i32 %70 = load i32* %69;
    i1 %71 = scmp lt i32 %68, i32 %70;
    ubr ^b6;
^if.else:
    i32 %72 = load i32* %62;
    store i32* %62 with i32 %65;
    store i32* %64 with i32 %72;
    i32 %73 = load i32* %n;
    i32 %74 = load i32* %end;
    i32 %75 = load i32* %son;
    i32 %76 = load i32* %i;
    i32 %77 = load i32* %len;
    i32 %78 = mul i32 %75, i32 2;
    i32 %79 = add i32 %78, i32 1;
    store i32* %son with i32 %79;
    ubr ^while.header1;
^b6:
    i1 %80 = phi [^b5, i1 %71] [^while.body6, i1 false];
    cbr i1 %80(prob = 0.5), ^if.then1, ^b7;
^if.then1:
    i32 %81 = add i32 %54, i32 1;
    store i32* %son1 with i32 %81;
    ubr ^b7;
^b7:
    i32 %82 = phi [^b6, i32 %54] [^if.then1, i32 %81];
    i32* %83 = getelementptr &(i32* %0)[i32 %53];
    i32 %84 = load i32* %83;
    i32* %85 = getelementptr &(i32* %0)[i32 %82];
    i32 %86 = load i32* %85;
    i1 %87 = scmp gt i32 %84, i32 %86;
    cbr i1 %87(prob = 0.5), ^while.body5, ^if.else1;
^if.else1:
    i32 %88 = load i32* %83;
    store i32* %83 with i32 %86;
    store i32* %85 with i32 %88;
    i32 %89 = load i32* %n;
    i32 %90 = load i32* %end1;
    i32 %91 = load i32* %son1;
    i32 %92 = load i32* %i;
    i32 %93 = mul i32 %91, i32 2;
    i32 %94 = add i32 %93, i32 1;
    store i32* %son1 with i32 %94;
    ubr ^while.header4;
}
