internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [10 * i32]* %a = alloc [10 * i32];
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    ubr ^while.body;
^while.body:
    i32 %10 = phi [^while.body2, i32 %21] [^entry, i32 4];
    i32 %11 = phi [^entry, i32 10] [^while.body2, i32 %20];
    i32 %12 = add i32 %11, i32 -1;
    i32 %13 = mul i32 %10, i32 2;
    i32 %14 = add i32 %13, i32 1;
    i1 %15 = scmp lt i32 %14, i32 %11;
    cbr i1 %15(prob = 0.97), ^while.body1, ^while.body2;
^while.body1:
    i32 %16 = phi [^entry1, i32 %45] [^while.body, i32 %14];
    i32 %17 = phi [^entry1, i32 10] [^while.body, i32 %11];
    i32 %18 = phi [^entry1, i32 %28] [^while.body, i32 %10];
    i1 %19 = scmp lt i32 %16, i32 %12;
    cbr i1 %19(prob = 0.5), ^b, ^b1;
^while.body2:
    i32 %20 = phi [^entry1, i32 10] [^b1, i32 %17] [^while.body, i32 %11];
    i32 %21 = add i32 %10, i32 -1;
    i1 %22 = scmp gt i32 %21, i32 -1;
    cbr i1 %22(prob = 0.8), ^while.body, ^b2;
^b:
    i32* %23 = getelementptr &(i32* %0)[i32 %16];
    i32 %24 = load i32* %23;
    i32* %25 = getelementptr &(i32* %23)[i64 1];
    i32 %26 = load i32* %25;
    i1 %27 = scmp lt i32 %24, i32 %26;
    cbr i1 %27(prob = 0.5), ^if.then, ^b1;
^b1:
    i32 %28 = phi [^if.then, i32 %36] [^b, i32 %16] [^while.body1, i32 %16];
    i32* %29 = getelementptr &(i32* %0)[i32 %18];
    i32 %30 = load i32* %29;
    i32* %31 = getelementptr &(i32* %0)[i32 %28];
    i32 %32 = load i32* %31;
    i1 %33 = scmp gt i32 %30, i32 %32;
    cbr i1 %33(prob = 0.5), ^while.body2, ^entry1;
^b2:
    i32 %34 = add i32 %20, i32 -1;
    i1 %35 = scmp gt i32 %34, i32 0;
    cbr i1 %35(prob = 0.97), ^while.body3, ^while.body4;
^if.then:
    i32 %36 = add i32 %16, i32 1;
    ubr ^b1;
^while.body3:
    i32 %37 = phi [^while.body6, i32 %41] [^b2, i32 %34];
    i32 %38 = load i32* %0;
    i32* %39 = getelementptr &(i32* %0)[i32 %37];
    i32 %40 = load i32* %39;
    store i32* %0 with i32 %40;
    store i32* %39 with i32 %38;
    i32 %41 = add i32 %37, i32 -1;
    i1 %42 = scmp gt i32 %37, i32 1;
    cbr i1 %42(prob = 0.97), ^while.body5, ^while.body6;
^entry1:
    i32 %43 = load i32* %29;
    store i32* %29 with i32 %32;
    store i32* %31 with i32 %43;
    i32 %44 = mul i32 %28, i32 2;
    i32 %45 = add i32 %44, i32 1;
    i1 %46 = scmp lt i32 %45, i32 %11;
    cbr i1 %46(prob = 0.97), ^while.body1, ^while.body2;
^while.body4:
    i32 %47 = phi [^while.body6, i32 0] [^b2, i32 0] [^while.body4, i32 %50];
    i32* %48 = getelementptr &([10 * i32]* %a)[i64 0][i32 %47];
    i32 %49 = load i32* %48;
    call (i32) -> void @putint(i32 %49);
    call (i32) -> void @putch(i32 10);
    i32 %50 = add i32 %47, i32 1;
    i1 %51 = scmp lt i32 %50, i32 10;
    cbr i1 %51(prob = 0.9), ^while.body4, ^b3;
^while.body5:
    i32 %52 = phi [^entry2, i32 %70] [^while.body3, i32 1];
    i32 %53 = phi [^entry2, i32 %61] [^while.body3, i32 0];
    i1 %54 = scmp lt i32 %52, i32 %41;
    cbr i1 %54(prob = 0.5), ^b4, ^b5;
^while.body6:
    i1 %55 = scmp gt i32 %41, i32 0;
    cbr i1 %55(prob = 0.97), ^while.body3, ^while.body4;
^b3:
    ret i32 0;
^b4:
    i32* %56 = getelementptr &(i32* %0)[i32 %52];
    i32 %57 = load i32* %56;
    i32* %58 = getelementptr &(i32* %56)[i64 1];
    i32 %59 = load i32* %58;
    i1 %60 = scmp lt i32 %57, i32 %59;
    cbr i1 %60(prob = 0.5), ^if.then1, ^b5;
^b5:
    i32 %61 = phi [^if.then1, i32 %67] [^b4, i32 %52] [^while.body5, i32 %52];
    i32* %62 = getelementptr &(i32* %0)[i32 %53];
    i32 %63 = load i32* %62;
    i32* %64 = getelementptr &(i32* %0)[i32 %61];
    i32 %65 = load i32* %64;
    i1 %66 = scmp gt i32 %63, i32 %65;
    cbr i1 %66(prob = 0.5), ^while.body6, ^entry2;
^if.then1:
    i32 %67 = add i32 %52, i32 1;
    ubr ^b5;
^entry2:
    i32 %68 = load i32* %62;
    store i32* %62 with i32 %65;
    store i32* %64 with i32 %68;
    i32 %69 = mul i32 %61, i32 2;
    i32 %70 = add i32 %69, i32 1;
    i1 %71 = scmp lt i32 %70, i32 %37;
    cbr i1 %71(prob = 0.97), ^while.body5, ^while.body6;
}
