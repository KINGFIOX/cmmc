internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [10 * i32]* %a = alloc [10 * i32];
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    ubr ^while.header;
  ^while.header:
    i32 %10 = phi [^entry, i32 4] [^entry1, i32 %24];
    i32 %11 = phi [^entry, i32 9] [^entry1, i32 %35];
    i1 %12 = scmp lt i32 %11, i32 10;
    cbr i1 %12(prob = 0.97), ^while.body, ^indirect;
  ^indirect:
    i32 %13 = phi [^while.header, i32 3] [^b1, i32 3] [^indirect1, i32 %37];
    i32 %14 = mul i32 %13, i32 2;
    i32 %15 = add i32 %14, i32 1;
    ubr ^while.header1;
  ^while.body:
    i1 %16 = scmp lt i32 %11, i32 9;
    cbr i1 %16(prob = 0.5), ^b, ^b1;
  ^b:
    i32* %17 = getelementptr &(i32* %0)[i32 %11];
    i32 %18 = load i32* %17;
    i32* %19 = getelementptr &(i32* %17)[i64 1];
    i32 %20 = load i32* %19;
    i1 %21 = scmp lt i32 %18, i32 %20;
    ubr ^b1;
  ^b1:
    i1 %22 = phi [^while.body, i1 false] [^b, i1 %21];
    i32 %23 = add i32 %11, i32 1;
    i32 %24 = select i1 %22 ? i32 %23 : i32 %11;
    i32* %25 = getelementptr &(i32* %0)[i32 %24];
    i32* %26 = getelementptr &(i32* %0)[i32 %10];
    i32 %27 = load i32* %26;
    i32 %28 = load i32* %25;
    i1 %29 = scmp gt i32 %27, i32 %28;
    cbr i1 %29(prob = 0.5), ^indirect, ^entry1;
  ^while.header1:
    i32 %30 = phi [^indirect, i32 %13] [^entry2, i32 %51];
    i32 %31 = phi [^indirect, i32 %15] [^entry2, i32 %59];
    i1 %32 = scmp lt i32 %31, i32 10;
    cbr i1 %32(prob = 0.97), ^while.body1, ^indirect1;
  ^entry1:
    i32 %33 = load i32* %26;
    store i32* %26 with i32 %28;
    store i32* %25 with i32 %33;
    i32 %34 = mul i32 %24, i32 2;
    i32 %35 = add i32 %34, i32 1;
    ubr ^while.header;
  ^while.body1:
    i1 %36 = scmp lt i32 %31, i32 9;
    cbr i1 %36(prob = 0.5), ^b2, ^b3;
  ^indirect1:
    i32 %37 = add i32 %13, i32 -1;
    i1 %38 = scmp gt i32 %37, i32 -1;
    cbr i1 %38(prob = 0.75), ^indirect, ^while.body2;
  ^b2:
    i32* %39 = getelementptr &(i32* %0)[i32 %31];
    i32 %40 = load i32* %39;
    i32* %41 = getelementptr &(i32* %39)[i64 1];
    i32 %42 = load i32* %41;
    i1 %43 = scmp lt i32 %40, i32 %42;
    ubr ^b3;
  ^while.body2:
    i32 %44 = phi [^indirect1, i32 9] [^while.body4, i32 %48];
    i32* %45 = getelementptr &(i32* %0)[i32 %44];
    i32 %46 = load i32* %0;
    i32 %47 = load i32* %45;
    store i32* %0 with i32 %47;
    store i32* %45 with i32 %46;
    i32 %48 = add i32 %44, i32 -1;
    ubr ^while.header2;
  ^b3:
    i1 %49 = phi [^while.body1, i1 false] [^b2, i1 %43];
    i32 %50 = add i32 %31, i32 1;
    i32 %51 = select i1 %49 ? i32 %50 : i32 %31;
    i32* %52 = getelementptr &(i32* %0)[i32 %51];
    i32* %53 = getelementptr &(i32* %0)[i32 %30];
    i32 %54 = load i32* %53;
    i32 %55 = load i32* %52;
    i1 %56 = scmp gt i32 %54, i32 %55;
    cbr i1 %56(prob = 0.5), ^indirect1, ^entry2;
  ^entry2:
    i32 %57 = load i32* %53;
    store i32* %53 with i32 %55;
    store i32* %52 with i32 %57;
    i32 %58 = mul i32 %51, i32 2;
    i32 %59 = add i32 %58, i32 1;
    ubr ^while.header1;
  ^while.header2:
    i32 %60 = phi [^while.body2, i32 0] [^entry3, i32 %72];
    i32 %61 = phi [^while.body2, i32 1] [^entry3, i32 %85];
    i1 %62 = scmp lt i32 %61, i32 %44;
    cbr i1 %62(prob = 0.97), ^while.body3, ^while.body4;
  ^while.body3:
    i1 %63 = scmp lt i32 %61, i32 %48;
    cbr i1 %63(prob = 0.5), ^b4, ^b5;
  ^while.body4:
    i1 %64 = scmp gt i32 %48, i32 0;
    cbr i1 %64(prob = 0.89), ^while.body2, ^while.body5;
  ^b4:
    i32* %65 = getelementptr &(i32* %0)[i32 %61];
    i32 %66 = load i32* %65;
    i32* %67 = getelementptr &(i32* %65)[i64 1];
    i32 %68 = load i32* %67;
    i1 %69 = scmp lt i32 %66, i32 %68;
    ubr ^b5;
  ^b5:
    i1 %70 = phi [^while.body3, i1 false] [^b4, i1 %69];
    i32 %71 = add i32 %61, i32 1;
    i32 %72 = select i1 %70 ? i32 %71 : i32 %61;
    i32* %73 = getelementptr &(i32* %0)[i32 %72];
    i32* %74 = getelementptr &(i32* %0)[i32 %60];
    i32 %75 = load i32* %74;
    i32 %76 = load i32* %73;
    i1 %77 = scmp gt i32 %75, i32 %76;
    cbr i1 %77(prob = 0.5), ^while.body4, ^entry3;
  ^while.body5:
    i32 %78 = phi [^while.body4, i32 0] [^while.body5, i32 %81];
    i32* %79 = getelementptr &([10 * i32]* %a)[i64 0][i32 %78];
    i32 %80 = load i32* %79;
    call (i32) -> void @putint(i32 %80);
    call (i32) -> void @putch(i32 10);
    i32 %81 = add i32 %78, i32 1;
    i1 %82 = scmp lt i32 %81, i32 10;
    cbr i1 %82(prob = 0.9), ^while.body5, ^b6;
  ^entry3:
    i32 %83 = load i32* %74;
    store i32* %74 with i32 %76;
    store i32* %73 with i32 %83;
    i32 %84 = mul i32 %72, i32 2;
    i32 %85 = add i32 %84, i32 1;
    ubr ^while.header2;
  ^b6:
    ret i32 0;
}
