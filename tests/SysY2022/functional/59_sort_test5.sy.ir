internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoRecurse } {
^entry():
    i32* %n = alloc i32;
    store i32* %n with i32 10;
    [10 * i32]* %a = alloc [10 * i32];
    i32* %0 = getelementptr &([10 * i32]* %a)[i32 0][i32 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i32 0][i32 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i32 0][i32 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i32 0][i32 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i32 0][i32 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i32 0][i32 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i32 0][i32 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i32 0][i32 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i32 0][i32 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i32 0][i32 9];
    store i32* %9 with i32 8;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    i32** %arr = alloc i32*;
    store i32** %arr with i32* %0;
    i32* %len = alloc i32;
    store i32* %len with i32 10;
    i32* %i1 = alloc i32;
    i32* %tmp = alloc i32;
    store i32* %i1 with i32 4;
    ubr [ ^while.body i32* %i1, i32** %arr, i32* %tmp, i32* %len, i32* %i, [10 * i32]* %a, i32* %n, i32 10 ];
^while.body(i32* %arg, i32** %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [10 * i32]* %arg5, i32* %arg6, i32 %arg7):
    i32 %0 = sub i32 %arg7, i32 1;
    store i32* %arg2 with i32 %0;
    i32* %1 = load i32** %arg1;
    i32 %2 = load i32* %arg;
    i32** %arr = alloc i32*;
    store i32** %arr with i32* %1;
    i32* %end = alloc i32;
    store i32* %end with i32 %0;
    i32* %dad = alloc i32;
    store i32* %dad with i32 %2;
    i32* %son = alloc i32;
    i32 %3 = mul i32 %2, i32 2;
    i32 %4 = add i32 %3, i32 1;
    store i32* %son with i32 %4;
    i1 %5 = scmp lt i32 %4, i32 %arg7;
    cbr i1 %5, [ ^while.body1 i32** %arr, i32* %dad, i32* %end, i32* %son, i32** %arg1, i32* %arg3, i32* %arg, i32* %arg2, i32* %arg4, [10 * i32]* %arg5, i32* %arg6, i32 %0, i32 %4 ], [ ^while.body2 i32** %arg1, i32* %arg3, i32* %arg, i32* %arg2, i32* %arg4, [10 * i32]* %arg5, i32* %arg6 ];
^while.body1(i32** %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32** %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, [10 * i32]* %arg9, i32* %arg10, i32 %arg11, i32 %arg12):
    i1 %0 = scmp lt i32 %arg12, i32 %arg11;
    cbr i1 %0, [ ^indirect2 i32* %arg2, i32* %arg1, i32** %arg, i32* %arg3, i32 %arg12, i32* %arg7, i32* %arg6, i32* %arg5, i32** %arg4, i32* %arg10, [10 * i32]* %arg9, i32* %arg8 ], [ ^indirect1 i32* %arg2, i32* %arg3, i32** %arg, i32* %arg1, i32* %arg7, i32* %arg6, i32* %arg5, i32** %arg4, i32* %arg10, [10 * i32]* %arg9, i32* %arg8 ];
^while.body2(i32** %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [10 * i32]* %arg5, i32* %arg6):
    store i32* %arg3 with i32 0;
    i32 %0 = load i32* %arg2;
    i32 %1 = sub i32 %0, i32 1;
    store i32* %arg2 with i32 %1;
    i1 %2 = scmp gt i32 %1, i32 -1;
    cbr i1 %2, [ ^indirect i32* %arg2, i32** %arg, i32* %arg3, i32* %arg1, i32* %arg4, [10 * i32]* %arg5, i32* %arg6 ], [ ^b i32* %arg3, i32** %arg, i32* %arg2, i32* %arg1, i32* %arg4, [10 * i32]* %arg5, i32* %arg6 ];
^indirect(i32* %arg, i32** %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [10 * i32]* %arg5, i32* %arg6):
    i32 %0 = load i32* %arg3;
    ubr [ ^while.body i32* %arg, i32** %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [10 * i32]* %arg5, i32* %arg6, i32 %0 ];
^indirect1(i32* %arg, i32* %arg1, i32** %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32** %arg7, i32* %arg8, [10 * i32]* %arg9, i32* %arg10):
    i32 %0 = load i32* %arg1;
    ubr [ ^b1 i32* %arg, i32* %arg1, i32** %arg2, i32* %arg3, i32 %0, i32** %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg10, [10 * i32]* %arg9, i32* %arg8 ];
^indirect2(i32* %arg, i32* %arg1, i32** %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32** %arg8, i32* %arg9, [10 * i32]* %arg10, i32* %arg11):
    i32* %0 = load i32** %arg2;
    i32* %1 = getelementptr &(i32* %0)[i32 %arg4];
    i32 %2 = load i32* %1;
    i32 %3 = add i32 %arg4, i32 1;
    i32* %4 = getelementptr &(i32* %0)[i32 %3];
    i32 %5 = load i32* %4;
    i1 %6 = scmp lt i32 %2, i32 %5;
    cbr i1 %6, [ ^if.then i32* %arg, i32* %arg1, i32** %arg2, i32* %arg3, i32* %arg5, i32* %arg6, i32* %arg7, i32** %arg8, i32* %arg9, [10 * i32]* %arg10, i32* %arg11 ], [ ^indirect1 i32* %arg, i32* %arg3, i32** %arg2, i32* %arg1, i32* %arg5, i32* %arg6, i32* %arg7, i32** %arg8, i32* %arg9, [10 * i32]* %arg10, i32* %arg11 ];
^b(i32* %arg, i32** %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [10 * i32]* %arg5, i32* %arg6):
    i32 %0 = load i32* %arg3;
    i32 %1 = sub i32 %0, i32 1;
    store i32* %arg2 with i32 %1;
    i1 %2 = scmp gt i32 %1, i32 0;
    cbr i1 %2, [ ^while.body3 i32* %arg, i32* %arg2, i32** %arg1, i32* %arg4, [10 * i32]* %arg5, i32* %arg6, i32 %1 ], [ ^entry1 i32* %arg6, [10 * i32]* %arg5, i32* %arg4 ];
^if.then(i32* %arg, i32* %arg1, i32** %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32** %arg7, i32* %arg8, [10 * i32]* %arg9, i32* %arg10):
    i32 %0 = load i32* %arg3;
    i32 %1 = add i32 %0, i32 1;
    store i32* %arg3 with i32 %1;
    ubr [ ^b1 i32* %arg, i32* %arg3, i32** %arg2, i32* %arg1, i32 %1, i32** %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg10, [10 * i32]* %arg9, i32* %arg8 ];
^b1(i32* %arg, i32* %arg1, i32** %arg2, i32* %arg3, i32 %arg4, i32** %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, [10 * i32]* %arg10, i32* %arg11):
    i32 %0 = load i32* %arg3;
    i32* %1 = load i32** %arg2;
    i32* %2 = getelementptr &(i32* %1)[i32 %0];
    i32 %3 = load i32* %2;
    i32* %4 = getelementptr &(i32* %1)[i32 %arg4];
    i32 %5 = load i32* %4;
    i1 %6 = scmp gt i32 %3, i32 %5;
    cbr i1 %6, [ ^while.body2 i32** %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, [10 * i32]* %arg10, i32* %arg11 ], [ ^indirect3 i32* %arg, i32* %arg1, i32* %arg3, i32** %arg2, i32 %0, i32* %1, i32* %arg8, i32* %arg7, i32* %arg6, i32** %arg5, i32* %arg11, [10 * i32]* %arg10, i32* %arg9 ];
^while.body3(i32* %arg, i32* %arg1, i32** %arg2, i32* %arg3, [10 * i32]* %arg4, i32* %arg5, i32 %arg6):
    i32* %tmp0 = alloc i32;
    store i32* %tmp0 with i32 0;
    i32* %0 = load i32** %arg2;
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &(i32* %0)[i32 %arg6];
    i32 %3 = load i32* %2;
    store i32* %0 with i32 %3;
    store i32* %2 with i32 %1;
    i32 %4 = sub i32 %arg6, i32 1;
    store i32* %arg with i32 %4;
    i32** %arr = alloc i32*;
    store i32** %arr with i32* %0;
    i32* %end = alloc i32;
    store i32* %end with i32 %4;
    i32* %dad = alloc i32;
    store i32* %dad with i32 0;
    i32* %son = alloc i32;
    store i32* %son with i32 1;
    i1 %5 = scmp lt i32 1, i32 %arg6;
    cbr i1 %5, [ ^while.body4 i32** %arr, i32* %dad, i32* %end, i32* %son, i32** %arg2, i32* %tmp0, i32* %arg1, i32* %arg, i32* %arg3, [10 * i32]* %arg4, i32* %arg5, i32 %4, i32 1 ], [ ^while.body6 i32** %arg2, i32* %tmp0, i32* %arg1, i32* %arg, i32* %arg3, [10 * i32]* %arg4, i32* %arg5 ];
^entry1(i32* %arg, [10 * i32]* %arg1, i32* %arg2):
    store i32* %arg2 with i32 0;
    i32 %0 = load i32* %arg;
    i1 %1 = scmp lt i32 0, i32 %0;
    cbr i1 %1, [ ^while.body5 [10 * i32]* %arg1, i32* %arg2, i32* %arg, i32 0 ], [ ^b2 ];
^indirect3(i32* %arg, i32* %arg1, i32* %arg2, i32** %arg3, i32 %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32** %arg9, i32* %arg10, [10 * i32]* %arg11, i32* %arg12):
    i32 %0 = load i32* %arg1;
    i32* %1 = getelementptr &(i32* %arg5)[i32 %arg4];
    i32 %2 = load i32* %1;
    i32* %3 = getelementptr &(i32* %arg5)[i32 %0];
    i32 %4 = load i32* %3;
    store i32* %1 with i32 %4;
    store i32* %3 with i32 %2;
    store i32* %arg2 with i32 %0;
    i32 %5 = mul i32 %0, i32 2;
    i32 %6 = add i32 %5, i32 1;
    store i32* %arg1 with i32 %6;
    i32 %7 = load i32* %arg;
    i32 %8 = add i32 %7, i32 1;
    i1 %9 = scmp lt i32 %6, i32 %8;
    cbr i1 %9, [ ^while.body1 i32** %arg3, i32* %arg2, i32* %arg, i32* %arg1, i32** %arg9, i32* %arg8, i32* %arg7, i32* %arg6, i32* %arg12, [10 * i32]* %arg11, i32* %arg10, i32 %7, i32 %6 ], [ ^while.body2 i32** %arg9, i32* %arg8, i32* %arg7, i32* %arg6, i32* %arg12, [10 * i32]* %arg11, i32* %arg10 ];
^while.body4(i32** %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32** %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, [10 * i32]* %arg9, i32* %arg10, i32 %arg11, i32 %arg12):
    i1 %0 = scmp lt i32 %arg12, i32 %arg11;
    cbr i1 %0, [ ^indirect5 i32* %arg2, i32* %arg1, i32** %arg, i32* %arg3, i32 %arg12, i32* %arg7, i32* %arg6, i32* %arg5, i32** %arg4, i32* %arg10, [10 * i32]* %arg9, i32* %arg8 ], [ ^indirect4 i32* %arg2, i32* %arg3, i32** %arg, i32* %arg1, i32* %arg7, i32* %arg6, i32* %arg5, i32** %arg4, i32* %arg10, [10 * i32]* %arg9, i32* %arg8 ];
^while.body5([10 * i32]* %arg, i32* %arg1, i32* %arg2, i32 %arg3):
    i32* %0 = getelementptr &([10 * i32]* %arg)[i32 0][i32 %arg3];
    i32 %1 = load i32* %0;
    call (i32) -> void @putint(i32 %1);
    call (i32) -> void @putch(i32 10);
    i32 %2 = add i32 %arg3, i32 1;
    store i32* %arg1 with i32 %2;
    i32 %3 = load i32* %arg2;
    i1 %4 = scmp lt i32 %2, i32 %3;
    cbr i1 %4, [ ^while.body5 [10 * i32]* %arg, i32* %arg1, i32* %arg2, i32 %2 ], [ ^b2 ];
^while.body6(i32** %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [10 * i32]* %arg5, i32* %arg6):
    store i32* %arg3 with i32 0;
    i32 %0 = load i32* %arg2;
    i32 %1 = sub i32 %0, i32 1;
    store i32* %arg2 with i32 %1;
    free i32* %arg1;
    i1 %2 = scmp gt i32 %1, i32 0;
    cbr i1 %2, [ ^while.body3 i32* %arg3, i32* %arg2, i32** %arg, i32* %arg4, [10 * i32]* %arg5, i32* %arg6, i32 %1 ], [ ^entry1 i32* %arg6, [10 * i32]* %arg5, i32* %arg4 ];
^b2():
    ret i32 0;
^indirect4(i32* %arg, i32* %arg1, i32** %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32** %arg7, i32* %arg8, [10 * i32]* %arg9, i32* %arg10):
    i32 %0 = load i32* %arg1;
    ubr [ ^b3 i32* %arg, i32* %arg1, i32** %arg2, i32* %arg3, i32 %0, i32** %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg10, [10 * i32]* %arg9, i32* %arg8 ];
^indirect5(i32* %arg, i32* %arg1, i32** %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32** %arg8, i32* %arg9, [10 * i32]* %arg10, i32* %arg11):
    i32* %0 = load i32** %arg2;
    i32* %1 = getelementptr &(i32* %0)[i32 %arg4];
    i32 %2 = load i32* %1;
    i32 %3 = add i32 %arg4, i32 1;
    i32* %4 = getelementptr &(i32* %0)[i32 %3];
    i32 %5 = load i32* %4;
    i1 %6 = scmp lt i32 %2, i32 %5;
    cbr i1 %6, [ ^if.then1 i32* %arg, i32* %arg1, i32** %arg2, i32* %arg3, i32* %arg5, i32* %arg6, i32* %arg7, i32** %arg8, i32* %arg9, [10 * i32]* %arg10, i32* %arg11 ], [ ^indirect4 i32* %arg, i32* %arg3, i32** %arg2, i32* %arg1, i32* %arg5, i32* %arg6, i32* %arg7, i32** %arg8, i32* %arg9, [10 * i32]* %arg10, i32* %arg11 ];
^if.then1(i32* %arg, i32* %arg1, i32** %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32** %arg7, i32* %arg8, [10 * i32]* %arg9, i32* %arg10):
    i32 %0 = load i32* %arg3;
    i32 %1 = add i32 %0, i32 1;
    store i32* %arg3 with i32 %1;
    ubr [ ^b3 i32* %arg, i32* %arg3, i32** %arg2, i32* %arg1, i32 %1, i32** %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg10, [10 * i32]* %arg9, i32* %arg8 ];
^b3(i32* %arg, i32* %arg1, i32** %arg2, i32* %arg3, i32 %arg4, i32** %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, [10 * i32]* %arg10, i32* %arg11):
    i32 %0 = load i32* %arg3;
    i32* %1 = load i32** %arg2;
    i32* %2 = getelementptr &(i32* %1)[i32 %0];
    i32 %3 = load i32* %2;
    i32* %4 = getelementptr &(i32* %1)[i32 %arg4];
    i32 %5 = load i32* %4;
    i1 %6 = scmp gt i32 %3, i32 %5;
    cbr i1 %6, [ ^while.body6 i32** %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, [10 * i32]* %arg10, i32* %arg11 ], [ ^indirect6 i32* %arg, i32* %arg1, i32* %arg3, i32** %arg2, i32 %0, i32* %1, i32* %arg8, i32* %arg7, i32* %arg6, i32** %arg5, i32* %arg11, [10 * i32]* %arg10, i32* %arg9 ];
^indirect6(i32* %arg, i32* %arg1, i32* %arg2, i32** %arg3, i32 %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32** %arg9, i32* %arg10, [10 * i32]* %arg11, i32* %arg12):
    i32 %0 = load i32* %arg1;
    i32* %1 = getelementptr &(i32* %arg5)[i32 %arg4];
    i32 %2 = load i32* %1;
    i32* %3 = getelementptr &(i32* %arg5)[i32 %0];
    i32 %4 = load i32* %3;
    store i32* %1 with i32 %4;
    store i32* %3 with i32 %2;
    store i32* %arg2 with i32 %0;
    i32 %5 = mul i32 %0, i32 2;
    i32 %6 = add i32 %5, i32 1;
    store i32* %arg1 with i32 %6;
    i32 %7 = load i32* %arg;
    i32 %8 = add i32 %7, i32 1;
    i1 %9 = scmp lt i32 %6, i32 %8;
    cbr i1 %9, [ ^while.body4 i32** %arg3, i32* %arg2, i32* %arg, i32* %arg1, i32** %arg9, i32* %arg8, i32* %arg7, i32* %arg6, i32* %arg12, [10 * i32]* %arg11, i32* %arg10, i32 %7, i32 %6 ], [ ^while.body6 i32** %arg9, i32* %arg8, i32* %arg7, i32* %arg6, i32* %arg12, [10 * i32]* %arg11, i32* %arg10 ];
}
