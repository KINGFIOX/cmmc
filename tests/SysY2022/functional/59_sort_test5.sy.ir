internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %len = alloc i32;
    i32* %i = alloc i32;
    i32* %tmp0 = alloc i32;
    i32* %son = alloc i32;
    i32* %end = alloc i32;
    i32* %son1 = alloc i32;
    i32* %end1 = alloc i32;
    i32* %n = alloc i32;
    [10 * i32]* %a = alloc [10 * i32];
    store i32* %n with i32 10;
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    store i32* %len with i32 10;
    store i32* %i with i32 4;
    ubr ^while.header;
^while.header:
    i32 %10 = phi [^while.body2, i32 %19] [^entry, i32 10];
    i32 %11 = phi [^while.body2, i32 %42] [^entry, i32 4];
    i32 %12 = phi [^while.body2, i32 %25] [^entry, i32 10];
    i32* %13 = phi [^while.body2, i32* %26] [^entry, i32* %0];
    i1 %14 = scmp gt i32 %11, i32 -1;
    cbr i1 %14(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %15 = add i32 %12, i32 -1;
    store i32* %end with i32 %15;
    i32 %16 = mul i32 %11, i32 2;
    i32 %17 = add i32 %16, i32 1;
    store i32* %son with i32 %17;
    ubr ^while.header1;
^b:
    i32 %18 = add i32 %12, i32 -1;
    store i32* %i with i32 %18;
    ubr ^while.header2;
^while.header1:
    i32 %19 = phi [^if.else, i32 %80] [^while.body, i32 %10];
    i32* %20 = phi [^if.else, i32* %20] [^while.body, i32* %13];
    i32 %21 = phi [^if.else, i32 %81] [^while.body, i32 %15];
    i32 %22 = phi [^if.else, i32 %82] [^while.body, i32 %11];
    i32 %23 = phi [^if.else, i32 %86] [^while.body, i32 %17];
    i32 %24 = phi [^if.else, i32 %83] [^while.body, i32 %11];
    i32 %25 = phi [^if.else, i32 %84] [^while.body, i32 %12];
    i32* %26 = phi [^if.else, i32* %26] [^while.body, i32* %13];
    i32 %27 = add i32 %21, i32 1;
    i1 %28 = scmp lt i32 %23, i32 %27;
    cbr i1 %28(prob = 0.97), ^while.body3, ^while.body2;
^while.header2:
    i32 %29 = phi [^while.body5, i32 %56] [^b, i32 %10];
    i32 %30 = phi [^while.body5, i32 %66] [^b, i32 %18];
    i32* %31 = phi [^while.body5, i32* %62] [^b, i32* %13];
    i1 %32 = scmp gt i32 %30, i32 0;
    cbr i1 %32(prob = 0.97), ^while.body1, ^while.header3;
^while.body1:
    store i32* %tmp0 with i32 0;
    i32 %33 = load i32* %31;
    i32* %34 = getelementptr &(i32* %31)[i32 %30];
    i32 %35 = load i32* %34;
    store i32* %31 with i32 %35;
    store i32* %34 with i32 %33;
    i32 %36 = load i32* %n;
    i32 %37 = load i32* %tmp0;
    i32 %38 = load i32* %i;
    i32 %39 = add i32 %38, i32 -1;
    store i32* %end1 with i32 %39;
    i32 %40 = mul i32 %37, i32 2;
    i32 %41 = add i32 %40, i32 1;
    store i32* %son1 with i32 %41;
    ubr ^while.header4;
^while.body2:
    i32 %42 = add i32 %24, i32 -1;
    store i32* %i with i32 %42;
    ubr ^while.header;
^while.body3:
    i1 %43 = scmp lt i32 %23, i32 %21;
    cbr i1 %43(prob = 0.5), ^b1, ^b2;
^while.header3:
    i32 %44 = phi [^while.header2, i32 0] [^while.body4, i32 %54];
    i32 %45 = phi [^while.header2, i32 %29] [^while.body4, i32 %45];
    i1 %46 = scmp lt i32 %44, i32 %45;
    cbr i1 %46(prob = 0.97), ^while.body4, ^b3;
^b1:
    i32* %47 = getelementptr &(i32* %20)[i32 %23];
    i32 %48 = load i32* %47;
    i32* %49 = getelementptr &(i32* %47)[i64 1];
    i32 %50 = load i32* %49;
    i1 %51 = scmp lt i32 %48, i32 %50;
    ubr ^b2;
^while.body4:
    i32* %52 = getelementptr &([10 * i32]* %a)[i64 0][i32 %44];
    i32 %53 = load i32* %52;
    call (i32) -> void @putint(i32 %53);
    call (i32) -> void @putch(i32 10);
    i32 %54 = add i32 %44, i32 1;
    ubr ^while.header3;
^b2:
    i1 %55 = phi [^b1, i1 %51] [^while.body3, i1 false];
    cbr i1 %55(prob = 0.5), ^if.then, ^b4;
^while.header4:
    i32 %56 = phi [^if.else1, i32 %96] [^while.body1, i32 %36];
    i32* %57 = phi [^if.else1, i32* %57] [^while.body1, i32* %31];
    i32 %58 = phi [^if.else1, i32 %97] [^while.body1, i32 %39];
    i32 %59 = phi [^if.else1, i32 %98] [^while.body1, i32 %37];
    i32 %60 = phi [^if.else1, i32 %101] [^while.body1, i32 %41];
    i32 %61 = phi [^if.else1, i32 %99] [^while.body1, i32 %38];
    i32* %62 = phi [^if.else1, i32* %62] [^while.body1, i32* %31];
    i32 %63 = add i32 %58, i32 1;
    i1 %64 = scmp lt i32 %60, i32 %63;
    cbr i1 %64(prob = 0.97), ^while.body6, ^while.body5;
^b3:
    ret i32 0;
^if.then:
    i32 %65 = add i32 %23, i32 1;
    store i32* %son with i32 %65;
    ubr ^b4;
^while.body5:
    i32 %66 = add i32 %61, i32 -1;
    store i32* %i with i32 %66;
    ubr ^while.header2;
^while.body6:
    i1 %67 = scmp lt i32 %60, i32 %58;
    cbr i1 %67(prob = 0.5), ^b5, ^b6;
^b4:
    i32 %68 = phi [^b2, i32 %23] [^if.then, i32 %65];
    i32* %69 = getelementptr &(i32* %20)[i32 %22];
    i32 %70 = load i32* %69;
    i32* %71 = getelementptr &(i32* %20)[i32 %68];
    i32 %72 = load i32* %71;
    i1 %73 = scmp gt i32 %70, i32 %72;
    cbr i1 %73(prob = 0.5), ^while.body2, ^if.else;
^b5:
    i32* %74 = getelementptr &(i32* %57)[i32 %60];
    i32 %75 = load i32* %74;
    i32* %76 = getelementptr &(i32* %74)[i64 1];
    i32 %77 = load i32* %76;
    i1 %78 = scmp lt i32 %75, i32 %77;
    ubr ^b6;
^if.else:
    i32 %79 = load i32* %69;
    store i32* %69 with i32 %72;
    store i32* %71 with i32 %79;
    i32 %80 = load i32* %n;
    i32 %81 = load i32* %end;
    i32 %82 = load i32* %son;
    i32 %83 = load i32* %i;
    i32 %84 = load i32* %len;
    i32 %85 = mul i32 %82, i32 2;
    i32 %86 = add i32 %85, i32 1;
    store i32* %son with i32 %86;
    ubr ^while.header1;
^b6:
    i1 %87 = phi [^b5, i1 %78] [^while.body6, i1 false];
    cbr i1 %87(prob = 0.5), ^if.then1, ^b7;
^if.then1:
    i32 %88 = add i32 %60, i32 1;
    store i32* %son1 with i32 %88;
    ubr ^b7;
^b7:
    i32 %89 = phi [^b6, i32 %60] [^if.then1, i32 %88];
    i32* %90 = getelementptr &(i32* %57)[i32 %59];
    i32 %91 = load i32* %90;
    i32* %92 = getelementptr &(i32* %57)[i32 %89];
    i32 %93 = load i32* %92;
    i1 %94 = scmp gt i32 %91, i32 %93;
    cbr i1 %94(prob = 0.5), ^while.body5, ^if.else1;
^if.else1:
    i32 %95 = load i32* %90;
    store i32* %90 with i32 %93;
    store i32* %92 with i32 %95;
    i32 %96 = load i32* %n;
    i32 %97 = load i32* %end1;
    i32 %98 = load i32* %son1;
    i32 %99 = load i32* %i;
    i32 %100 = mul i32 %98, i32 2;
    i32 %101 = add i32 %100, i32 1;
    store i32* %son1 with i32 %101;
    ubr ^while.header4;
}
