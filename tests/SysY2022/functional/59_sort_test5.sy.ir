internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @n;
internal func @swap(i32* %array, i32 %i, i32 %j) -> i32 {
^entry:
    i32* %temp = alloc i32;
    i32* %j1 = alloc i32;
    i32* %i1 = alloc i32;
    i32** %array1 = alloc i32*;
    store i32** %array1 with i32* %array;
    store i32* %i1 with i32 %i;
    store i32* %j1 with i32 %j;
    store i32* %temp with i32 0;
    i32 %0 = load i32* %i1;
    i64 %1 = sext i32 %0 to i64;
    i32* %2 = load i32** %array1;
    i32* %3 = getelementptr &(i32* %2)[i64 %1];
    i32 %4 = load i32* %3;
    store i32* %temp with i32 %4;
    i32 %5 = load i32* %i1;
    i64 %6 = sext i32 %5 to i64;
    i32* %7 = load i32** %array1;
    i32* %8 = getelementptr &(i32* %7)[i64 %6];
    i32 %9 = load i32* %j1;
    i64 %10 = sext i32 %9 to i64;
    i32* %11 = load i32** %array1;
    i32* %12 = getelementptr &(i32* %11)[i64 %10];
    i32 %13 = load i32* %12;
    store i32* %8 with i32 %13;
    i32 %14 = load i32* %j1;
    i64 %15 = sext i32 %14 to i64;
    i32* %16 = load i32** %array1;
    i32* %17 = getelementptr &(i32* %16)[i64 %15];
    i32 %18 = load i32* %temp;
    store i32* %17 with i32 %18;
    ret i32 0;
}
internal func @heap_ajust(i32* %arr, i32 %start, i32 %end) -> i32 {
^entry:
    i32* %son = alloc i32;
    i32* %dad = alloc i32;
    i32* %end1 = alloc i32;
    i32* %start1 = alloc i32;
    i32** %arr1 = alloc i32*;
    store i32** %arr1 with i32* %arr;
    store i32* %start1 with i32 %start;
    store i32* %end1 with i32 %end;
    store i32* %dad with i32 0;
    i32 %0 = load i32* %start1;
    store i32* %dad with i32 %0;
    store i32* %son with i32 0;
    i32 %1 = load i32* %dad;
    i32 %2 = mul i32 %1, i32 2;
    i32 %3 = add i32 %2, i32 1;
    store i32* %son with i32 %3;
    ubr ^while.header;
^while.header:
    i32 %4 = load i32* %son;
    i32 %5 = load i32* %end1;
    i32 %6 = add i32 %5, i32 1;
    i1 %7 = scmp lt i32 %4, i32 %6;
    i32 %8 = zext i1 %7 to i32;
    i1 %9 = scmp neq i32 %8, i32 0;
    cbr i1 %9(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %10 = load i32* %son;
    i32 %11 = load i32* %end1;
    i1 %12 = scmp lt i32 %10, i32 %11;
    i32 %13 = zext i1 %12 to i32;
    i1 %14 = scmp neq i32 %13, i32 0;
    cbr i1 %14(prob = 0.5), ^b1, ^b2;
^b:
    ret i32 0;
^b1:
    i32 %15 = load i32* %son;
    i64 %16 = sext i32 %15 to i64;
    i32* %17 = load i32** %arr1;
    i32* %18 = getelementptr &(i32* %17)[i64 %16];
    i32 %19 = load i32* %18;
    i32 %20 = load i32* %son;
    i32 %21 = add i32 %20, i32 1;
    i64 %22 = sext i32 %21 to i64;
    i32* %23 = load i32** %arr1;
    i32* %24 = getelementptr &(i32* %23)[i64 %22];
    i32 %25 = load i32* %24;
    i1 %26 = scmp lt i32 %19, i32 %25;
    i32 %27 = zext i1 %26 to i32;
    i1 %28 = scmp neq i32 %27, i32 0;
    ubr ^b2;
^b2:
    i1 %29 = phi [^b1, i1 %28] [^while.body, i1 false];
    i32 %30 = zext i1 %29 to i32;
    i1 %31 = scmp neq i32 %30, i32 0;
    cbr i1 %31(prob = 0.5), ^if.then, ^b3;
^if.then:
    i32 %32 = load i32* %son;
    i32 %33 = add i32 %32, i32 1;
    store i32* %son with i32 %33;
    ubr ^b3;
^b3:
    i32 %34 = load i32* %dad;
    i64 %35 = sext i32 %34 to i64;
    i32* %36 = load i32** %arr1;
    i32* %37 = getelementptr &(i32* %36)[i64 %35];
    i32 %38 = load i32* %37;
    i32 %39 = load i32* %son;
    i64 %40 = sext i32 %39 to i64;
    i32* %41 = load i32** %arr1;
    i32* %42 = getelementptr &(i32* %41)[i64 %40];
    i32 %43 = load i32* %42;
    i1 %44 = scmp gt i32 %38, i32 %43;
    i32 %45 = zext i1 %44 to i32;
    i1 %46 = scmp neq i32 %45, i32 0;
    cbr i1 %46(prob = 0.5), ^if.then1, ^if.else;
^if.else:
    i32* %47 = load i32** %arr1;
    i32 %48 = load i32* %dad;
    i32 %49 = load i32* %son;
    i32 %50 = call (i32*, i32, i32) -> i32 @swap(i32* %47, i32 %48, i32 %49);
    store i32* %dad with i32 %50;
    i32 %51 = load i32* %son;
    store i32* %dad with i32 %51;
    i32 %52 = load i32* %dad;
    i32 %53 = mul i32 %52, i32 2;
    i32 %54 = add i32 %53, i32 1;
    store i32* %son with i32 %54;
    ubr ^b4;
^if.then1:
    ret i32 0;
^b4:
    ubr ^while.header;
}
internal func @heap_sort(i32* %arr, i32 %len) -> i32 {
^entry:
    i32* %tmp0 = alloc i32;
    i32* %tmp = alloc i32;
    i32* %i = alloc i32;
    i32* %len1 = alloc i32;
    i32** %arr1 = alloc i32*;
    store i32** %arr1 with i32* %arr;
    store i32* %len1 with i32 %len;
    store i32* %i with i32 0;
    store i32* %tmp with i32 0;
    i32 %0 = load i32* %len1;
    i32 %1 = sdiv i32 %0, i32 2;
    i32 %2 = sub i32 %1, i32 1;
    store i32* %i with i32 %2;
    ubr ^while.header;
^while.header:
    i32 %3 = load i32* %i;
    i1 %4 = scmp gt i32 %3, i32 -1;
    i32 %5 = zext i1 %4 to i32;
    i1 %6 = scmp neq i32 %5, i32 0;
    cbr i1 %6(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %7 = load i32* %len1;
    i32 %8 = sub i32 %7, i32 1;
    store i32* %tmp with i32 %8;
    i32* %9 = load i32** %arr1;
    i32 %10 = load i32* %i;
    i32 %11 = load i32* %tmp;
    i32 %12 = call (i32*, i32, i32) -> i32 @heap_ajust(i32* %9, i32 %10, i32 %11);
    store i32* %tmp with i32 %12;
    i32 %13 = load i32* %i;
    i32 %14 = sub i32 %13, i32 1;
    store i32* %i with i32 %14;
    ubr ^while.header;
^b:
    i32 %15 = load i32* %len1;
    i32 %16 = sub i32 %15, i32 1;
    store i32* %i with i32 %16;
    ubr ^while.header1;
^while.header1:
    i32 %17 = load i32* %i;
    i1 %18 = scmp gt i32 %17, i32 0;
    i32 %19 = zext i1 %18 to i32;
    i1 %20 = scmp neq i32 %19, i32 0;
    cbr i1 %20(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    store i32* %tmp0 with i32 0;
    store i32* %tmp0 with i32 0;
    i32* %21 = load i32** %arr1;
    i32 %22 = load i32* %tmp0;
    i32 %23 = load i32* %i;
    i32 %24 = call (i32*, i32, i32) -> i32 @swap(i32* %21, i32 %22, i32 %23);
    store i32* %tmp with i32 %24;
    i32 %25 = load i32* %i;
    i32 %26 = sub i32 %25, i32 1;
    store i32* %tmp with i32 %26;
    i32* %27 = load i32** %arr1;
    i32 %28 = load i32* %tmp0;
    i32 %29 = load i32* %tmp;
    i32 %30 = call (i32*, i32, i32) -> i32 @heap_ajust(i32* %27, i32 %28, i32 %29);
    store i32* %tmp with i32 %30;
    i32 %31 = load i32* %i;
    i32 %32 = sub i32 %31, i32 1;
    store i32* %i with i32 %32;
    ubr ^while.header1;
^b1:
    ret i32 0;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %tmp = alloc i32;
    i32* %i = alloc i32;
    [10 * i32]* %a = alloc [10 * i32];
    store i32* @n with i32 10;
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    store i32* %i with i32 0;
    store i32* %i with i32 0;
    i32* %10 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    i32 %11 = load i32* @n;
    i32 %12 = call (i32*, i32) -> i32 @heap_sort(i32* %10, i32 %11);
    store i32* %i with i32 %12;
    ubr ^while.header;
^while.header:
    i32 %13 = load i32* %i;
    i32 %14 = load i32* @n;
    i1 %15 = scmp lt i32 %13, i32 %14;
    i32 %16 = zext i1 %15 to i32;
    i1 %17 = scmp neq i32 %16, i32 0;
    cbr i1 %17(prob = 0.97), ^while.body, ^b;
^while.body:
    store i32* %tmp with i32 0;
    i32 %18 = load i32* %i;
    i64 %19 = sext i32 %18 to i64;
    i32* %20 = getelementptr &([10 * i32]* %a)[i64 0][i64 %19];
    i32 %21 = load i32* %20;
    store i32* %tmp with i32 %21;
    i32 %22 = load i32* %tmp;
    call (i32) -> void @putint(i32 %22);
    store i32* %tmp with i32 10;
    i32 %23 = load i32* %tmp;
    call (i32) -> void @putch(i32 %23);
    i32 %24 = load i32* %i;
    i32 %25 = add i32 %24, i32 1;
    store i32* %i with i32 %25;
    ubr ^while.header;
^b:
    ret i32 0;
}
