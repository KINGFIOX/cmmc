internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [10 * i32]* %a = alloc [10 * i32], align 8;
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    ubr ^while.body;
  ^while.body:
    i32 %10 = phi [^entry, i32 4] [^b, i32 %18];
    i32 %11 = mul i32 %10, i32 2;
    i32 %12 = add i32 %11, i32 1;
    ubr ^while.header;
  ^while.header:
    i32 %13 = phi [^while.body, i32 %10] [^if.else, i32 %36];
    i32 %14 = phi [^while.body, i32 %12] [^if.else, i32 %38];
    i1 %15 = icmp slt i32 %14, i32 10;
    cbr i1 %15(prob = 0.984615), ^while.body1, ^b;
  ^while.body1:
    i32* %16 = getelementptr &(i32* %0)[i32 %14];
    i1 %17 = icmp slt i32 %14, i32 9;
    cbr i1 %17(prob = 0.5), ^b1, ^b2;
  ^b:
    i32 %18 = add i32 %10, i32 -1;
    i1 %19 = icmp sgt i32 %18, i32 -1;
    cbr i1 %19(prob = 0.8), ^while.body, ^while.body2;
  ^b1:
    i32 %20 = load i32* %16;
    i32* %21 = getelementptr &(i32* %16)[i64 1];
    i32 %22 = load i32* %21;
    i1 %23 = icmp slt i32 %20, i32 %22;
    ubr ^b2;
  ^while.body2:
    i32 %24 = phi [^b, i32 9] [^b3, i32 %28];
    i32* %25 = getelementptr &(i32* %0)[i32 %24];
    i32 %26 = load i32* %0;
    i32 %27 = load i32* %25;
    store i32* %0 with i32 %27;
    store i32* %25 with i32 %26;
    i32 %28 = add i32 %24, i32 -1;
    ubr ^while.header1;
  ^b2:
    i1 %29 = phi [^while.body1, i1 false] [^b1, i1 %23];
    i32* %30 = getelementptr &(i32* %0)[i32 %13];
    i32 %31 = load i32* %30;
    i32 %32 = zext i1 %29 to i32;
    i32* %33 = getelementptr &(i32* %16)[i32 %32];
    i32 %34 = load i32* %33;
    i1 %35 = icmp sgt i32 %31, i32 %34;
    cbr i1 %35(prob = 0.5), ^b, ^if.else;
  ^if.else:
    i32 %36 = add i32 %14, i32 %32;
    i32 %37 = mul i32 %36, i32 2;
    i32 %38 = add i32 %37, i32 1;
    store i32* %30 with i32 %34;
    store i32* %33 with i32 %31;
    ubr ^while.header;
  ^while.header1:
    i32 %39 = phi [^while.body2, i32 0] [^if.else1, i32 %61];
    i32 %40 = phi [^while.body2, i32 1] [^if.else1, i32 %63];
    i1 %41 = icmp sgt i32 %24, i32 %40;
    cbr i1 %41(prob = 0.984615), ^while.body3, ^b3;
  ^while.body3:
    i1 %42 = icmp sgt i32 %28, i32 %40;
    i32* %43 = getelementptr &(i32* %0)[i32 %40];
    cbr i1 %42(prob = 0.5), ^b4, ^b5;
  ^b3:
    i1 %44 = icmp sgt i32 %28, i32 0;
    cbr i1 %44(prob = 0.888889), ^while.body2, ^while.body4;
  ^b4:
    i32 %45 = load i32* %43;
    i32* %46 = getelementptr &(i32* %43)[i64 1];
    i32 %47 = load i32* %46;
    i1 %48 = icmp slt i32 %45, i32 %47;
    ubr ^b5;
  ^b5:
    i1 %49 = phi [^while.body3, i1 false] [^b4, i1 %48];
    i32* %50 = getelementptr &(i32* %0)[i32 %39];
    i32 %51 = load i32* %50;
    i32 %52 = zext i1 %49 to i32;
    i32* %53 = getelementptr &(i32* %43)[i32 %52];
    i32 %54 = load i32* %53;
    i1 %55 = icmp sgt i32 %51, i32 %54;
    cbr i1 %55(prob = 0.5), ^b3, ^if.else1;
  ^while.body4:
    i32 %56 = phi [^b3, i32 0] [^while.body4, i32 %59];
    i32* %57 = getelementptr &([10 * i32]* %a)[i64 0][i32 %56];
    i32 %58 = load i32* %57;
    call (i32) -> void @putint(i32 %58);
    call (i32) -> void @putch(i32 10);
    i32 %59 = add i32 %56, i32 1;
    i1 %60 = icmp slt i32 %59, i32 10;
    cbr i1 %60(prob = 0.9), ^while.body4, ^b6;
  ^if.else1:
    i32 %61 = add i32 %40, i32 %52;
    i32 %62 = mul i32 %61, i32 2;
    i32 %63 = add i32 %62, i32 1;
    store i32* %50 with i32 %54;
    store i32* %53 with i32 %51;
    ubr ^while.header1;
  ^b6:
    ret i32 0;
}
