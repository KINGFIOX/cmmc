internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [10 * i32]* %a = alloc [10 * i32], align 8;
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    ubr ^while.body;
  ^while.body:
    i32 %10 = phi [^entry, i32 8] [^while.body2, i32 %12];
    i32 %11 = phi [^entry, i32 4] [^while.body2, i32 %18];
    i32 %12 = add i32 %10, i32 -2;
    i32 %13 = add i32 %10, i32 1;
    ubr ^while.header;
  ^while.header:
    i32 %14 = phi [^while.body, i32 %11] [^entry1, i32 %32];
    i32 %15 = phi [^while.body, i32 %13] [^entry1, i32 %39];
    i1 %16 = icmp slt i32 %15, i32 10;
    cbr i1 %16(prob = 0.984615), ^while.body1, ^while.body2;
  ^while.body1:
    i1 %17 = icmp slt i32 %15, i32 9;
    cbr i1 %17(prob = 0.5), ^b, ^b1;
  ^while.body2:
    i32 %18 = add i32 %11, i32 -1;
    i1 %19 = icmp sgt i32 %18, i32 -1;
    cbr i1 %19(prob = 0.8), ^while.body, ^while.body3;
  ^b:
    i32* %20 = getelementptr &(i32* %0)[i32 %15];
    i32 %21 = load i32* %20;
    i32* %22 = getelementptr &(i32* %20)[i64 1];
    i32 %23 = load i32* %22;
    i1 %24 = icmp slt i32 %21, i32 %23;
    ubr ^b1;
  ^while.body3:
    i32 %25 = phi [^while.body2, i32 9] [^while.body5, i32 %29];
    i32* %26 = getelementptr &(i32* %0)[i32 %25];
    i32 %27 = load i32* %0;
    i32 %28 = load i32* %26;
    store i32* %0 with i32 %28;
    store i32* %26 with i32 %27;
    i32 %29 = add i32 %25, i32 -1;
    ubr ^while.header1;
  ^b1:
    i1 %30 = phi [^while.body1, i1 false] [^b, i1 %24];
    i32 %31 = zext i1 %30 to i32;
    i32 %32 = add i32 %15, i32 %31;
    i32* %33 = getelementptr &(i32* %0)[i32 %32];
    i32* %34 = getelementptr &(i32* %0)[i32 %14];
    i32 %35 = load i32* %34;
    i32 %36 = load i32* %33;
    i1 %37 = icmp sgt i32 %35, i32 %36;
    cbr i1 %37(prob = 0.5), ^while.body2, ^entry1;
  ^entry1:
    store i32* %34 with i32 %36;
    store i32* %33 with i32 %35;
    i32 %38 = mul i32 %32, i32 2;
    i32 %39 = add i32 %38, i32 1;
    ubr ^while.header;
  ^while.header1:
    i32 %40 = phi [^while.body3, i32 0] [^entry2, i32 %52];
    i32 %41 = phi [^while.body3, i32 1] [^entry2, i32 %64];
    i1 %42 = icmp sgt i32 %25, i32 %41;
    cbr i1 %42(prob = 0.984615), ^while.body4, ^while.body5;
  ^while.body4:
    i1 %43 = icmp sgt i32 %29, i32 %41;
    cbr i1 %43(prob = 0.5), ^b2, ^b3;
  ^while.body5:
    i1 %44 = icmp sgt i32 %29, i32 0;
    cbr i1 %44(prob = 0.888889), ^while.body3, ^while.body6;
  ^b2:
    i32* %45 = getelementptr &(i32* %0)[i32 %41];
    i32 %46 = load i32* %45;
    i32* %47 = getelementptr &(i32* %45)[i64 1];
    i32 %48 = load i32* %47;
    i1 %49 = icmp slt i32 %46, i32 %48;
    ubr ^b3;
  ^b3:
    i1 %50 = phi [^while.body4, i1 false] [^b2, i1 %49];
    i32 %51 = zext i1 %50 to i32;
    i32 %52 = add i32 %41, i32 %51;
    i32* %53 = getelementptr &(i32* %0)[i32 %52];
    i32* %54 = getelementptr &(i32* %0)[i32 %40];
    i32 %55 = load i32* %54;
    i32 %56 = load i32* %53;
    i1 %57 = icmp sgt i32 %55, i32 %56;
    cbr i1 %57(prob = 0.5), ^while.body5, ^entry2;
  ^while.body6:
    i32 %58 = phi [^while.body5, i32 0] [^while.body6, i32 %61];
    i32* %59 = getelementptr &([10 * i32]* %a)[i64 0][i32 %58];
    i32 %60 = load i32* %59;
    call (i32) -> void @putint(i32 %60);
    call (i32) -> void @putch(i32 10);
    i32 %61 = add i32 %58, i32 1;
    i1 %62 = icmp slt i32 %61, i32 10;
    cbr i1 %62(prob = 0.9), ^while.body6, ^b4;
  ^entry2:
    store i32* %54 with i32 %56;
    store i32* %53 with i32 %55;
    i32 %63 = mul i32 %52, i32 2;
    i32 %64 = add i32 %63, i32 1;
    ubr ^while.header1;
  ^b4:
    ret i32 0;
}
