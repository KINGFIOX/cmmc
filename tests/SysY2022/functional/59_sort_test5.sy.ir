internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [10 * i32]* %a = alloc [10 * i32];
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    ubr ^while.body;
^while.body:
    i32 %10 = phi [^entry, i32 4] [^while.body2, i32 %17];
    i32 %11 = mul i32 %10, i32 2;
    i32 %12 = add i32 %11, i32 1;
    i1 %13 = scmp lt i32 %12, i32 10;
    cbr i1 %13(prob = 0.97), ^while.body1, ^while.body2;
^while.body1:
    i32 %14 = phi [^while.body, i32 %10] [^entry1, i32 %24];
    i32 %15 = phi [^while.body, i32 %12] [^entry1, i32 %42];
    i1 %16 = scmp lt i32 %15, i32 9;
    cbr i1 %16(prob = 0.5), ^b, ^b1;
^while.body2:
    i32 %17 = add i32 %10, i32 -1;
    i1 %18 = scmp gt i32 %17, i32 -1;
    cbr i1 %18(prob = 0.8), ^while.body, ^while.body3;
^b:
    i32* %19 = getelementptr &(i32* %0)[i32 %15];
    i32 %20 = load i32* %19;
    i32* %21 = getelementptr &(i32* %19)[i64 1];
    i32 %22 = load i32* %21;
    i1 %23 = scmp lt i32 %20, i32 %22;
    cbr i1 %23(prob = 0.5), ^if.then, ^b1;
^b1:
    i32 %24 = phi [^while.body1, i32 %15] [^b, i32 %15] [^if.then, i32 %36];
    i32* %25 = getelementptr &(i32* %0)[i32 %14];
    i32 %26 = load i32* %25;
    i32* %27 = getelementptr &(i32* %0)[i32 %24];
    i32 %28 = load i32* %27;
    i1 %29 = scmp gt i32 %26, i32 %28;
    cbr i1 %29(prob = 0.5), ^while.body2, ^entry1;
^while.body3:
    i32 %30 = phi [^while.body2, i32 9] [^while.body5, i32 %34];
    i32 %31 = load i32* %0;
    i32* %32 = getelementptr &(i32* %0)[i32 %30];
    i32 %33 = load i32* %32;
    store i32* %0 with i32 %33;
    store i32* %32 with i32 %31;
    i32 %34 = add i32 %30, i32 -1;
    i1 %35 = scmp gt i32 %30, i32 1;
    cbr i1 %35(prob = 0.97), ^while.body4, ^while.body5;
^if.then:
    i32 %36 = add i32 %15, i32 1;
    ubr ^b1;
^while.body4:
    i32 %37 = phi [^while.body3, i32 0] [^entry2, i32 %50];
    i32 %38 = phi [^while.body3, i32 1] [^entry2, i32 %64];
    i1 %39 = scmp lt i32 %38, i32 %34;
    cbr i1 %39(prob = 0.5), ^b2, ^b3;
^entry1:
    i32 %40 = load i32* %25;
    store i32* %25 with i32 %28;
    store i32* %27 with i32 %40;
    i32 %41 = mul i32 %24, i32 2;
    i32 %42 = add i32 %41, i32 1;
    i1 %43 = scmp lt i32 %42, i32 10;
    cbr i1 %43(prob = 0.97), ^while.body1, ^while.body2;
^while.body5:
    i1 %44 = scmp gt i32 %34, i32 0;
    cbr i1 %44(prob = 0.89), ^while.body3, ^while.body6;
^b2:
    i32* %45 = getelementptr &(i32* %0)[i32 %38];
    i32 %46 = load i32* %45;
    i32* %47 = getelementptr &(i32* %45)[i64 1];
    i32 %48 = load i32* %47;
    i1 %49 = scmp lt i32 %46, i32 %48;
    cbr i1 %49(prob = 0.5), ^if.then1, ^b3;
^b3:
    i32 %50 = phi [^while.body4, i32 %38] [^b2, i32 %38] [^if.then1, i32 %61];
    i32* %51 = getelementptr &(i32* %0)[i32 %37];
    i32 %52 = load i32* %51;
    i32* %53 = getelementptr &(i32* %0)[i32 %50];
    i32 %54 = load i32* %53;
    i1 %55 = scmp gt i32 %52, i32 %54;
    cbr i1 %55(prob = 0.5), ^while.body5, ^entry2;
^while.body6:
    i32 %56 = phi [^while.body5, i32 0] [^while.body6, i32 %59];
    i32* %57 = getelementptr &([10 * i32]* %a)[i64 0][i32 %56];
    i32 %58 = load i32* %57;
    call (i32) -> void @putint(i32 %58);
    call (i32) -> void @putch(i32 10);
    i32 %59 = add i32 %56, i32 1;
    i1 %60 = scmp lt i32 %59, i32 10;
    cbr i1 %60(prob = 0.9), ^while.body6, ^b4;
^if.then1:
    i32 %61 = add i32 %38, i32 1;
    ubr ^b3;
^entry2:
    i32 %62 = load i32* %51;
    store i32* %51 with i32 %54;
    store i32* %53 with i32 %62;
    i32 %63 = mul i32 %50, i32 2;
    i32 %64 = add i32 %63, i32 1;
    i1 %65 = scmp lt i32 %64, i32 %30;
    cbr i1 %65(prob = 0.97), ^while.body4, ^while.body5;
^b4:
    ret i32 0;
}
