internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [10 * i32]* %a = alloc [10 * i32];
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    ubr ^while.header;
^while.header:
    i32 %10 = phi [^entry, i32 4] [^entry1, i32 %22];
    i32 %11 = phi [^entry, i32 9] [^entry1, i32 %34];
    i1 %12 = scmp lt i32 %11, i32 10;
    cbr i1 %12(prob = 0.97), ^while.body, ^indirect;
^indirect:
    i32 %13 = phi [^while.header, i32 3] [^b1, i32 3] [^indirect1, i32 %36];
    i32 %14 = shl i32 %13, i32 1;
    i32 %15 = add i32 %14, i32 1;
    ubr ^while.header1;
^while.body:
    i1 %16 = scmp lt i32 %11, i32 9;
    cbr i1 %16(prob = 0.5), ^b, ^b1;
^b:
    i32* %17 = getelementptr &(i32* %0)[i32 %11];
    i32 %18 = load i32* %17;
    i32* %19 = getelementptr &(i32* %17)[i64 1];
    i32 %20 = load i32* %19;
    i1 %21 = scmp lt i32 %18, i32 %20;
    cbr i1 %21(prob = 0.5), ^if.then, ^b1;
^b1:
    i32 %22 = phi [^while.body, i32 %11] [^b, i32 %11] [^if.then, i32 %31];
    i32* %23 = getelementptr &(i32* %0)[i32 %10];
    i32 %24 = load i32* %23;
    i32* %25 = getelementptr &(i32* %0)[i32 %22];
    i32 %26 = load i32* %25;
    i1 %27 = scmp gt i32 %24, i32 %26;
    cbr i1 %27(prob = 0.5), ^indirect, ^entry1;
^while.header1:
    i32 %28 = phi [^indirect, i32 %13] [^entry2, i32 %48];
    i32 %29 = phi [^indirect, i32 %15] [^entry2, i32 %57];
    i1 %30 = scmp lt i32 %29, i32 10;
    cbr i1 %30(prob = 0.97), ^while.body1, ^indirect1;
^if.then:
    i32 %31 = add i32 %11, i32 1;
    ubr ^b1;
^entry1:
    i32 %32 = load i32* %23;
    store i32* %23 with i32 %26;
    store i32* %25 with i32 %32;
    i32 %33 = shl i32 %22, i32 1;
    i32 %34 = add i32 %33, i32 1;
    ubr ^while.header;
^while.body1:
    i1 %35 = scmp lt i32 %29, i32 9;
    cbr i1 %35(prob = 0.5), ^b2, ^b3;
^indirect1:
    i32 %36 = add i32 %13, i32 -1;
    i1 %37 = scmp gt i32 %36, i32 -1;
    cbr i1 %37(prob = 0.75), ^indirect, ^while.body2;
^while.body2:
    i32 %38 = phi [^indirect1, i32 9] [^while.body4, i32 %42];
    i32 %39 = load i32* %0;
    i32* %40 = getelementptr &(i32* %0)[i32 %38];
    i32 %41 = load i32* %40;
    store i32* %0 with i32 %41;
    store i32* %40 with i32 %39;
    i32 %42 = add i32 %38, i32 -1;
    ubr ^while.header2;
^b2:
    i32* %43 = getelementptr &(i32* %0)[i32 %29];
    i32 %44 = load i32* %43;
    i32* %45 = getelementptr &(i32* %43)[i64 1];
    i32 %46 = load i32* %45;
    i1 %47 = scmp lt i32 %44, i32 %46;
    cbr i1 %47(prob = 0.5), ^if.then1, ^b3;
^b3:
    i32 %48 = phi [^while.body1, i32 %29] [^b2, i32 %29] [^if.then1, i32 %54];
    i32* %49 = getelementptr &(i32* %0)[i32 %28];
    i32 %50 = load i32* %49;
    i32* %51 = getelementptr &(i32* %0)[i32 %48];
    i32 %52 = load i32* %51;
    i1 %53 = scmp gt i32 %50, i32 %52;
    cbr i1 %53(prob = 0.5), ^indirect1, ^entry2;
^if.then1:
    i32 %54 = add i32 %29, i32 1;
    ubr ^b3;
^entry2:
    i32 %55 = load i32* %49;
    store i32* %49 with i32 %52;
    store i32* %51 with i32 %55;
    i32 %56 = shl i32 %48, i32 1;
    i32 %57 = add i32 %56, i32 1;
    ubr ^while.header1;
^while.header2:
    i32 %58 = phi [^while.body2, i32 0] [^entry3, i32 %68];
    i32 %59 = phi [^while.body2, i32 1] [^entry3, i32 %82];
    i1 %60 = scmp lt i32 %59, i32 %38;
    cbr i1 %60(prob = 0.97), ^while.body3, ^while.body4;
^while.body3:
    i1 %61 = scmp lt i32 %59, i32 %42;
    cbr i1 %61(prob = 0.5), ^b4, ^b5;
^while.body4:
    i1 %62 = scmp gt i32 %42, i32 0;
    cbr i1 %62(prob = 0.89), ^while.body2, ^while.body5;
^b4:
    i32* %63 = getelementptr &(i32* %0)[i32 %59];
    i32 %64 = load i32* %63;
    i32* %65 = getelementptr &(i32* %63)[i64 1];
    i32 %66 = load i32* %65;
    i1 %67 = scmp lt i32 %64, i32 %66;
    cbr i1 %67(prob = 0.5), ^if.then2, ^b5;
^b5:
    i32 %68 = phi [^while.body3, i32 %59] [^b4, i32 %59] [^if.then2, i32 %79];
    i32* %69 = getelementptr &(i32* %0)[i32 %58];
    i32 %70 = load i32* %69;
    i32* %71 = getelementptr &(i32* %0)[i32 %68];
    i32 %72 = load i32* %71;
    i1 %73 = scmp gt i32 %70, i32 %72;
    cbr i1 %73(prob = 0.5), ^while.body4, ^entry3;
^while.body5:
    i32 %74 = phi [^while.body4, i32 0] [^while.body5, i32 %77];
    i32* %75 = getelementptr &([10 * i32]* %a)[i64 0][i32 %74];
    i32 %76 = load i32* %75;
    call (i32) -> void @putint(i32 %76);
    call (i32) -> void @putch(i32 10);
    i32 %77 = add i32 %74, i32 1;
    i1 %78 = scmp lt i32 %77, i32 10;
    cbr i1 %78(prob = 0.9), ^while.body5, ^b6;
^if.then2:
    i32 %79 = add i32 %59, i32 1;
    ubr ^b5;
^entry3:
    i32 %80 = load i32* %69;
    store i32* %69 with i32 %72;
    store i32* %71 with i32 %80;
    i32 %81 = shl i32 %68, i32 1;
    i32 %82 = add i32 %81, i32 1;
    ubr ^while.header2;
^b6:
    ret i32 0;
}
