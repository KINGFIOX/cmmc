internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %len = alloc i32;
    i32* %i = alloc i32;
    i32* %tmp0 = alloc i32;
    i32* %son = alloc i32;
    i32* %end = alloc i32;
    i32* %son1 = alloc i32;
    i32* %end1 = alloc i32;
    i32* %n = alloc i32;
    [10 * i32]* %a = alloc [10 * i32];
    store i32* %n with i32 10;
    i32* %0 = getelementptr &([10 * i32]* %a)[i64 0][i64 0];
    store i32* %0 with i32 4;
    i32* %1 = getelementptr &([10 * i32]* %a)[i64 0][i64 1];
    store i32* %1 with i32 3;
    i32* %2 = getelementptr &([10 * i32]* %a)[i64 0][i64 2];
    store i32* %2 with i32 9;
    i32* %3 = getelementptr &([10 * i32]* %a)[i64 0][i64 3];
    store i32* %3 with i32 2;
    i32* %4 = getelementptr &([10 * i32]* %a)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([10 * i32]* %a)[i64 0][i64 5];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10 * i32]* %a)[i64 0][i64 6];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([10 * i32]* %a)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([10 * i32]* %a)[i64 0][i64 8];
    store i32* %8 with i32 7;
    i32* %9 = getelementptr &([10 * i32]* %a)[i64 0][i64 9];
    store i32* %9 with i32 8;
    store i32* %len with i32 10;
    store i32* %i with i32 4;
    ubr ^while.header;
^while.header:
    i32 %10 = phi [^while.body2, i32 %20] [^entry, i32 10];
    i32 %11 = phi [^while.body2, i32 %46] [^entry, i32 4];
    i32 %12 = phi [^while.body2, i32 %26] [^entry, i32 10];
    i32* %13 = phi [^while.body2, i32* %27] [^entry, i32* %0];
    i32 %14 = phi [^entry, i32 4] [^while.body2, i32 %46];
    i1 %15 = scmp gt i32 %14, i32 -1;
    cbr i1 %15(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %16 = add i32 %12, i32 -1;
    store i32* %end with i32 %16;
    i32 %17 = mul i32 %11, i32 2;
    i32 %18 = add i32 %17, i32 1;
    store i32* %son with i32 %18;
    ubr ^while.header1;
^b:
    i32 %19 = add i32 %12, i32 -1;
    store i32* %i with i32 %19;
    ubr ^while.header2;
^while.header1:
    i32 %20 = phi [^if.else, i32 %90] [^while.body, i32 %10];
    i32* %21 = phi [^if.else, i32* %21] [^while.body, i32* %13];
    i32 %22 = phi [^if.else, i32 %91] [^while.body, i32 %16];
    i32 %23 = phi [^if.else, i32 %92] [^while.body, i32 %11];
    i32 %24 = phi [^if.else, i32 %96] [^while.body, i32 %18];
    i32 %25 = phi [^if.else, i32 %93] [^while.body, i32 %11];
    i32 %26 = phi [^if.else, i32 %94] [^while.body, i32 %12];
    i32* %27 = phi [^if.else, i32* %27] [^while.body, i32* %13];
    i32 %28 = phi [^if.else, i32 %91] [^while.body, i32 %16];
    i32 %29 = phi [^if.else, i32 %96] [^while.body, i32 %18];
    i32 %30 = add i32 %28, i32 1;
    i1 %31 = scmp lt i32 %29, i32 %30;
    cbr i1 %31(prob = 0.97), ^while.body3, ^while.body2;
^while.header2:
    i32 %32 = phi [^while.body5, i32 %61] [^b, i32 %10];
    i32 %33 = phi [^while.body5, i32 %73] [^b, i32 %19];
    i32* %34 = phi [^while.body5, i32* %67] [^b, i32* %13];
    i32 %35 = phi [^while.body5, i32 %73] [^b, i32 %19];
    i1 %36 = scmp gt i32 %35, i32 0;
    cbr i1 %36(prob = 0.97), ^while.body1, ^while.header3;
^while.body1:
    store i32* %tmp0 with i32 0;
    i32 %37 = load i32* %34;
    i32* %38 = getelementptr &(i32* %34)[i32 %33];
    i32 %39 = load i32* %38;
    store i32* %34 with i32 %39;
    store i32* %38 with i32 %37;
    i32 %40 = load i32* %n;
    i32 %41 = load i32* %tmp0;
    i32 %42 = load i32* %i;
    i32 %43 = add i32 %42, i32 -1;
    store i32* %end1 with i32 %43;
    i32 %44 = mul i32 %41, i32 2;
    i32 %45 = add i32 %44, i32 1;
    store i32* %son1 with i32 %45;
    ubr ^while.header4;
^while.body2:
    i32 %46 = add i32 %25, i32 -1;
    store i32* %i with i32 %46;
    ubr ^while.header;
^while.body3:
    i1 %47 = scmp lt i32 %24, i32 %22;
    cbr i1 %47(prob = 0.5), ^b1, ^b2;
^while.header3:
    i32 %48 = phi [^while.header2, i32 0] [^while.body4, i32 %59];
    i32 %49 = phi [^while.header2, i32 %32] [^while.body4, i32 %49];
    i32 %50 = phi [^while.header2, i32 0] [^while.body4, i32 %59];
    i1 %51 = scmp lt i32 %50, i32 %49;
    cbr i1 %51(prob = 0.97), ^while.body4, ^b3;
^b1:
    i32* %52 = getelementptr &(i32* %21)[i32 %24];
    i32 %53 = load i32* %52;
    i32* %54 = getelementptr &(i32* %52)[i64 1];
    i32 %55 = load i32* %54;
    i1 %56 = scmp lt i32 %53, i32 %55;
    ubr ^b2;
^while.body4:
    i32* %57 = getelementptr &([10 * i32]* %a)[i64 0][i32 %48];
    i32 %58 = load i32* %57;
    call (i32) -> void @putint(i32 %58);
    call (i32) -> void @putch(i32 10);
    i32 %59 = add i32 %48, i32 1;
    ubr ^while.header3;
^b2:
    i1 %60 = phi [^while.body3, i1 false] [^b1, i1 %56];
    cbr i1 %60(prob = 0.5), ^if.then, ^b4;
^while.header4:
    i32 %61 = phi [^if.else1, i32 %109] [^while.body1, i32 %40];
    i32* %62 = phi [^if.else1, i32* %62] [^while.body1, i32* %34];
    i32 %63 = phi [^if.else1, i32 %110] [^while.body1, i32 %43];
    i32 %64 = phi [^if.else1, i32 %111] [^while.body1, i32 %41];
    i32 %65 = phi [^if.else1, i32 %114] [^while.body1, i32 %45];
    i32 %66 = phi [^if.else1, i32 %112] [^while.body1, i32 %42];
    i32* %67 = phi [^if.else1, i32* %67] [^while.body1, i32* %34];
    i32 %68 = phi [^if.else1, i32 %110] [^while.body1, i32 %43];
    i32 %69 = phi [^if.else1, i32 %114] [^while.body1, i32 %45];
    i32 %70 = add i32 %68, i32 1;
    i1 %71 = scmp lt i32 %69, i32 %70;
    cbr i1 %71(prob = 0.97), ^while.body6, ^while.body5;
^b3:
    ret i32 0;
^if.then:
    i32 %72 = add i32 %24, i32 1;
    store i32* %son with i32 %72;
    ubr ^b4;
^while.body5:
    i32 %73 = add i32 %66, i32 -1;
    store i32* %i with i32 %73;
    ubr ^while.header2;
^while.body6:
    i1 %74 = scmp lt i32 %65, i32 %63;
    cbr i1 %74(prob = 0.5), ^b5, ^b6;
^b4:
    i32 %75 = phi [^b2, i32 %24] [^if.then, i32 %72];
    i32 %76 = phi [^b2, i32 %24] [^if.then, i32 %72];
    i32* %77 = getelementptr &(i32* %21)[i32 %23];
    i32 %78 = load i32* %77;
    i32* %79 = getelementptr &(i32* %21)[i32 %76];
    i32 %80 = load i32* %79;
    i1 %81 = scmp gt i32 %78, i32 %80;
    cbr i1 %81(prob = 0.5), ^while.body2, ^if.else;
^b5:
    i32* %82 = getelementptr &(i32* %62)[i32 %65];
    i32 %83 = load i32* %82;
    i32* %84 = getelementptr &(i32* %82)[i64 1];
    i32 %85 = load i32* %84;
    i1 %86 = scmp lt i32 %83, i32 %85;
    ubr ^b6;
^if.else:
    i32 %87 = load i32* %77;
    i32* %88 = getelementptr &(i32* %21)[i32 %75];
    i32 %89 = load i32* %88;
    store i32* %77 with i32 %89;
    store i32* %88 with i32 %87;
    i32 %90 = load i32* %n;
    i32 %91 = load i32* %end;
    i32 %92 = load i32* %son;
    i32 %93 = load i32* %i;
    i32 %94 = load i32* %len;
    i32 %95 = mul i32 %92, i32 2;
    i32 %96 = add i32 %95, i32 1;
    store i32* %son with i32 %96;
    ubr ^while.header1;
^b6:
    i1 %97 = phi [^b5, i1 %86] [^while.body6, i1 false];
    cbr i1 %97(prob = 0.5), ^if.then1, ^b7;
^if.then1:
    i32 %98 = add i32 %65, i32 1;
    store i32* %son1 with i32 %98;
    ubr ^b7;
^b7:
    i32 %99 = phi [^b6, i32 %65] [^if.then1, i32 %98];
    i32 %100 = phi [^b6, i32 %65] [^if.then1, i32 %98];
    i32* %101 = getelementptr &(i32* %62)[i32 %64];
    i32 %102 = load i32* %101;
    i32* %103 = getelementptr &(i32* %62)[i32 %100];
    i32 %104 = load i32* %103;
    i1 %105 = scmp gt i32 %102, i32 %104;
    cbr i1 %105(prob = 0.5), ^while.body5, ^if.else1;
^if.else1:
    i32 %106 = load i32* %101;
    i32* %107 = getelementptr &(i32* %62)[i32 %99];
    i32 %108 = load i32* %107;
    store i32* %101 with i32 %108;
    store i32* %107 with i32 %106;
    i32 %109 = load i32* %n;
    i32 %110 = load i32* %end1;
    i32 %111 = load i32* %son1;
    i32 %112 = load i32* %i;
    i32 %113 = mul i32 %111, i32 2;
    i32 %114 = add i32 %113, i32 1;
    store i32* %son1 with i32 %114;
    ubr ^while.header4;
}
