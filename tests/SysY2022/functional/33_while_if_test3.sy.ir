internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @deepWhileBr(i32 %a, i32 %b) -> i32 {
^entry:
    i32* %e = alloc i32;
    i32* %d = alloc i32;
    i32* %c = alloc i32;
    i32* %b1 = alloc i32;
    i32* %a1 = alloc i32;
    store i32* %a1 with i32 %a;
    store i32* %b1 with i32 %b;
    store i32* %c with i32 0;
    i32 %0 = load i32* %a1;
    i32 %1 = load i32* %b1;
    i32 %2 = add i32 %0, i32 %1;
    store i32* %c with i32 %2;
    ubr ^while.header;
^while.header:
    i32 %3 = load i32* %c;
    i1 %4 = scmp lt i32 %3, i32 75;
    i32 %5 = zext i1 %4 to i32;
    i1 %6 = scmp neq i32 %5, i32 0;
    cbr i1 %6(prob = 0.97), ^while.body, ^b2;
^while.body:
    store i32* %d with i32 0;
    store i32* %d with i32 42;
    i32 %7 = load i32* %c;
    i1 %8 = scmp lt i32 %7, i32 100;
    i32 %9 = zext i1 %8 to i32;
    i1 %10 = scmp neq i32 %9, i32 0;
    cbr i1 %10(prob = 0.5), ^if.then, ^b3;
^b2:
    i32 %11 = load i32* %c;
    ret i32 %11;
^b3:
    ubr ^while.header;
^if.then:
    i32 %12 = load i32* %c;
    i32 %13 = load i32* %d;
    i32 %14 = add i32 %12, i32 %13;
    store i32* %c with i32 %14;
    i32 %15 = load i32* %c;
    i1 %16 = scmp gt i32 %15, i32 99;
    i32 %17 = zext i1 %16 to i32;
    i1 %18 = scmp neq i32 %17, i32 0;
    cbr i1 %18(prob = 0.5), ^if.then1, ^b4;
^b4:
    ubr ^b3;
^if.then1:
    store i32* %e with i32 0;
    i32 %19 = load i32* %d;
    i32 %20 = mul i32 %19, i32 2;
    store i32* %e with i32 %20;
    i1 %21 = scmp eq i32 1, i32 1;
    i32 %22 = zext i1 %21 to i32;
    i1 %23 = scmp neq i32 %22, i32 0;
    cbr i1 %23(prob = 0.5), ^if.then2, ^b5;
^if.then2:
    i32 %24 = load i32* %e;
    i32 %25 = mul i32 %24, i32 2;
    store i32* %c with i32 %25;
    ubr ^b5;
^b5:
    ubr ^b4;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %p = alloc i32;
    store i32* %p with i32 0;
    store i32* %p with i32 2;
    i32 %0 = load i32* %p;
    i32 %1 = load i32* %p;
    i32 %2 = call (i32, i32) -> i32 @deepWhileBr(i32 %0, i32 %1);
    ret i32 %2;
}
