internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [4096 * i32]* @a;
func @main() -> i32 { NoMemoryRead NoRecurse Entry } {
  ^entry:
    [1024 * [4 * i32]]* %0 = ptrcast [1024 * [4 * i32]]* @c to [1024 * [4 * i32]]*;
    i32* %1 = getelementptr &([1024 * [4 * i32]]* %0)[i64 0][i64 0][i64 0];
    store i32* %1 with i32 1;
    i32* %2 = getelementptr &([1024 * [4 * i32]]* %0)[i64 0][i64 0][i64 1];
    store i32* %2 with i32 2;
    i32* %3 = getelementptr &([1024 * [4 * i32]]* %0)[i64 0][i64 0][i64 2];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([1024 * [4 * i32]]* %0)[i64 0][i64 0][i64 3];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([1024 * [4 * i32]]* %0)[i64 0][i64 1][i64 0];
    store i32* %5 with i32 3;
    i32* %6 = getelementptr &([1024 * [4 * i32]]* %0)[i64 0][i64 1][i64 1];
    store i32* %6 with i32 4;
    i32* %7 = getelementptr &([1024 * [4 * i32]]* %0)[i64 0][i64 1][i64 2];
    ubr ^b;
  ^b:
    i64 %8 = phi [^entry, i64 0] [^b, i64 %25];
    i32* %9 = getelementptr &(i32* %7)[i64 %8];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &(i32* %9)[i64 1];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &(i32* %9)[i64 2];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &(i32* %9)[i64 3];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &(i32* %9)[i64 4];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &(i32* %9)[i64 5];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &(i32* %9)[i64 6];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &(i32* %9)[i64 7];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &(i32* %9)[i64 8];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &(i32* %9)[i64 9];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &(i32* %9)[i64 10];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &(i32* %9)[i64 11];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &(i32* %9)[i64 12];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &(i32* %9)[i64 13];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &(i32* %9)[i64 14];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &(i32* %9)[i64 15];
    store i32* %24 with i32 0;
    i64 %25 = add i64 %8, i64 16;
    i1 %26 = scmp lt i64 %25, i64 4080;
    cbr i1 %26(prob = 1), ^b, ^b1;
  ^b1:
    i32* %27 = getelementptr &(i32* %7)[i64 %25];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &(i32* %27)[i64 1];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &(i32* %27)[i64 2];
    store i32* %29 with i32 0;
    i32* %30 = getelementptr &(i32* %27)[i64 3];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &(i32* %27)[i64 4];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &(i32* %27)[i64 5];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &(i32* %27)[i64 6];
    store i32* %33 with i32 0;
    i32* %34 = getelementptr &(i32* %27)[i64 7];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &(i32* %27)[i64 8];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &(i32* %27)[i64 9];
    store i32* %36 with i32 0;
    [4096 * i32]* %37 = ptrcast [4096 * i32]* @a to [4096 * i32]*;
    i32* %38 = getelementptr &([4096 * i32]* %37)[i64 0][i64 5];
    store i32* %38 with i32 4000;
    i32* %39 = getelementptr &([4096 * i32]* %37)[i64 0][i64 4000];
    store i32* %39 with i32 3;
    i32* %40 = getelementptr &([4096 * i32]* %37)[i64 0][i64 4095];
    store i32* %40 with i32 7;
    call (i32) -> void @putint(i32 3);
    call (i32) -> void @putch(i32 10);
    i32* %41 = getelementptr &([1024 * [4 * i32]]* %0)[i64 0][i64 2][i64 0];
    i32 %42 = load i32* %41;
    ret i32 %42;
}
internal [1024 * [4 * i32]]* @c;
