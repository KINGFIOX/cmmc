internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [4096 * i32]* @a { Flexible };
func @main() -> i32 { NoMemoryRead NoRecurse Entry } {
  ^entry:
    [1024 * [4 * i32]]* %0 = ptrcast [1024 * [4 * i32]]* @c to [1024 * [4 * i32]]*;
    i32* %1 = getelementptr &([1024 * [4 * i32]]* %0)[i64 0][i64 0][i64 0];
    store i32* %1 with i32 1;
    i32* %2 = getelementptr &([1024 * [4 * i32]]* %0)[i64 0][i64 0][i64 1];
    store i32* %2 with i32 2;
    i32* %3 = getelementptr &([1024 * [4 * i32]]* %0)[i64 0][i64 0][i64 2];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([1024 * [4 * i32]]* %0)[i64 0][i64 0][i64 3];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([1024 * [4 * i32]]* %0)[i64 0][i64 1][i64 0];
    store i32* %5 with i32 3;
    i32* %6 = getelementptr &([1024 * [4 * i32]]* %0)[i64 0][i64 1][i64 1];
    store i32* %6 with i32 4;
    i32* %7 = getelementptr &([1024 * [4 * i32]]* %0)[i64 0][i64 1][i64 2];
    ubr ^b;
  ^b:
    i64 %8 = phi [^entry, i64 0] [^b, i64 %15];
    i32* %9 = getelementptr &(i32* %7)[i64 %8];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &(i32* %9)[i64 1];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &(i32* %9)[i64 2];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &(i32* %9)[i64 3];
    store i32* %12 with i32 0;
    i64 %13 = add i64 %8, i64 8;
    i1 %14 = icmp slt i64 %13, i64 4090;
    i64 %15 = add i64 %8, i64 4;
    cbr i1 %14(prob = 0.89), ^b, ^b1;
  ^b1:
    i64 %16 = phi [^b, i64 %15] [^b1, i64 %18];
    i32* %17 = getelementptr &(i32* %7)[i64 %16];
    store i32* %17 with i32 0;
    i64 %18 = add i64 %16, i64 1;
    i1 %19 = icmp slt i64 %18, i64 4090;
    cbr i1 %19(prob = 0.75), ^b1, ^entry1;
  ^entry1:
    [4096 * i32]* %20 = ptrcast [4096 * i32]* @a to [4096 * i32]*;
    i32* %21 = getelementptr &([4096 * i32]* %20)[i64 0][i64 5];
    store i32* %21 with i32 4000;
    i32* %22 = getelementptr &([4096 * i32]* %20)[i64 0][i64 4000];
    store i32* %22 with i32 3;
    i32* %23 = getelementptr &([4096 * i32]* %20)[i64 0][i64 4095];
    store i32* %23 with i32 7;
    call (i32) -> void @putint(i32 3);
    call (i32) -> void @putch(i32 10);
    i32* %24 = getelementptr &([1024 * [4 * i32]]* %0)[i64 0][i64 2][i64 0];
    i32 %25 = load i32* %24;
    ret i32 %25;
}
internal [1024 * [4 * i32]]* @c { Flexible };
