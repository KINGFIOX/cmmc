internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [16 * i32]* %SHIFT_TABLE = alloc [16 * i32], align 8;
    i32* %0 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 0];
    store i32* %0 with i32 1;
    i32* %1 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 1];
    store i32* %1 with i32 2;
    i32* %2 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 2];
    store i32* %2 with i32 4;
    i32* %3 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 3];
    store i32* %3 with i32 8;
    i32* %4 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 4];
    store i32* %4 with i32 16;
    i32* %5 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 5];
    store i32* %5 with i32 32;
    i32* %6 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 6];
    store i32* %6 with i32 64;
    i32* %7 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 7];
    store i32* %7 with i32 128;
    i32* %8 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 8];
    store i32* %8 with i32 256;
    i32* %9 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 9];
    store i32* %9 with i32 512;
    i32* %10 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 10];
    store i32* %10 with i32 1024;
    i32* %11 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 11];
    store i32* %11 with i32 2048;
    i32* %12 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 12];
    store i32* %12 with i32 4096;
    i32* %13 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 13];
    store i32* %13 with i32 8192;
    i32* %14 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 14];
    store i32* %14 with i32 16384;
    i32* %15 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 15];
    store i32* %15 with i32 32768;
    ubr ^while.header;
  ^while.header:
    i32 %16 = phi [^entry, i32 2] [^if.then5, i32 %70] [^if.else, i32 %70];
    i32 %17 = phi [^entry, i32 1] [^if.then5, i32 %47] [^if.else, i32 %47];
    i32 %18 = phi [^entry, i32 0] [^if.then5, i32 %116] [^if.else, i32 %118];
    i1 %19 = icmp sgt i32 %18, i32 0;
    cbr i1 %19(prob = 0.984615), ^while.body, ^b;
  ^b:
    call (i32) -> void @putint(i32 %17);
    call (i32) -> void @putch(i32 10);
    ubr ^while.header1;
  ^while.body:
    i32 %20 = phi [^while.header, i32 0] [^b1, i32 %34];
    i32 %21 = phi [^while.header, i32 0] [^b1, i32 %33];
    i32 %22 = phi [^while.header, i32 %18] [^b1, i32 %36];
    i32 %23 = phi [^while.header, i32 1] [^b1, i32 0];
    i32 %24 = and i32 %22, i32 %23;
    i1 %25 = ztrunc i32 %24 to i1;
    cbr i1 %25(prob = 0.5), ^if.then, ^b1;
  ^if.then:
    i32* %26 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %20];
    i32 %27 = load i32* %26;
    i32 %28 = add i32 %21, i32 %27;
    ubr ^b1;
  ^while.header1:
    i32 %29 = phi [^b, i32 2] [^if.then9, i32 %137] [^if.else1, i32 %137];
    i32 %30 = phi [^b, i32 1] [^if.then9, i32 %79] [^if.else1, i32 %79];
    i32 %31 = phi [^b, i32 1] [^if.then9, i32 %183] [^if.else1, i32 %190];
    i1 %32 = icmp sgt i32 %31, i32 0;
    cbr i1 %32(prob = 0.984615), ^while.body1, ^b2;
  ^b1:
    i32 %33 = phi [^while.body, i32 %21] [^if.then, i32 %28];
    i32 %34 = add i32 %20, i32 1;
    i1 %35 = icmp slt i32 %34, i32 16;
    i32 %36 = sdiv i32 %22, i32 2;
    cbr i1 %35(prob = 0.9375), ^while.body, ^b3;
  ^b2:
    call (i32) -> void @putint(i32 %30);
    call (i32) -> void @putch(i32 10);
    ubr ^while.header2;
  ^while.body1:
    i32 %37 = phi [^while.header1, i32 0] [^b5, i32 %55];
    i32 %38 = phi [^while.header1, i32 %31] [^b5, i32 %57];
    i32 %39 = phi [^while.header1, i32 1] [^b5, i32 0];
    i32 %40 = phi [^while.header1, i32 0] [^b5, i32 %54];
    i32 %41 = and i32 %38, i32 %39;
    i1 %42 = ztrunc i32 %41 to i1;
    cbr i1 %42(prob = 0.5), ^if.then1, ^b5;
  ^b3:
    i1 %43 = icmp neq i32 %33, i32 0;
    cbr i1 %43(prob = 0.5), ^while.header3, ^b4;
  ^if.then1:
    i32* %44 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %37];
    i32 %45 = load i32* %44;
    i32 %46 = add i32 %40, i32 %45;
    ubr ^b5;
  ^b4:
    i32 %47 = phi [^b3, i32 %17] [^while.header3, i32 %51];
    ubr ^while.header5;
  ^while.header2:
    i32 %48 = phi [^b2, i32 2] [^b7, i32 %78];
    i1 %49 = icmp slt i32 %48, i32 16;
    cbr i1 %49(prob = 0.984615), ^while.header4, ^while.header6;
  ^while.header3:
    i32 %50 = phi [^b3, i32 %17] [^if.then13, i32 %202] [^if.else3, i32 %202];
    i32 %51 = phi [^b3, i32 0] [^if.then13, i32 %153] [^if.else3, i32 %153];
    i32 %52 = phi [^b3, i32 %16] [^if.then13, i32 %257] [^if.else3, i32 %260];
    i1 %53 = icmp neq i32 %52, i32 0;
    cbr i1 %53(prob = 0.984615), ^while.body2, ^b4;
  ^b5:
    i32 %54 = phi [^while.body1, i32 %40] [^if.then1, i32 %46];
    i32 %55 = add i32 %37, i32 1;
    i1 %56 = icmp slt i32 %55, i32 16;
    i32 %57 = sdiv i32 %38, i32 2;
    cbr i1 %56(prob = 0.9375), ^while.body1, ^b6;
  ^while.header4:
    i32 %58 = phi [^while.header2, i32 2] [^if.then20, i32 %227] [^if.else6, i32 %227];
    i32 %59 = phi [^while.header2, i32 1] [^if.then20, i32 %178] [^if.else6, i32 %178];
    i32 %60 = phi [^while.header2, i32 %48] [^if.then20, i32 %326] [^if.else6, i32 %333];
    i1 %61 = icmp sgt i32 %60, i32 0;
    cbr i1 %61(prob = 0.984615), ^while.body3, ^b7;
  ^while.body2:
    i32 %62 = phi [^while.header3, i32 0] [^b9, i32 %95];
    i32 %63 = phi [^while.header3, i32 %52] [^b9, i32 %97];
    i32 %64 = phi [^while.header3, i32 1] [^b9, i32 0];
    i32 %65 = phi [^while.header3, i32 0] [^b9, i32 %94];
    i32 %66 = and i32 %63, i32 %64;
    i1 %67 = ztrunc i32 %66 to i1;
    cbr i1 %67(prob = 0.5), ^if.then2, ^b9;
  ^b6:
    i1 %68 = icmp neq i32 %54, i32 0;
    cbr i1 %68(prob = 0.5), ^while.header7, ^b8;
  ^while.header5:
    i32 %69 = phi [^b4, i32 %16] [^if.then21, i32 %244] [^if.else7, i32 %244];
    i32 %70 = phi [^b4, i32 0] [^if.then21, i32 %184] [^if.else7, i32 %184];
    i32 %71 = phi [^b4, i32 %16] [^if.then21, i32 %331] [^if.else7, i32 %338];
    i1 %72 = icmp neq i32 %71, i32 0;
    cbr i1 %72(prob = 0.984615), ^while.body4, ^b10;
  ^while.header6:
    i32 %73 = phi [^while.header2, i32 0] [^b17, i32 %154];
    i1 %74 = icmp slt i32 %73, i32 16;
    cbr i1 %74(prob = 0.984615), ^while.header8, ^b11;
  ^if.then2:
    i32* %75 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %62];
    i32 %76 = load i32* %75;
    i32 %77 = add i32 %65, i32 %76;
    ubr ^b9;
  ^b7:
    call (i32) -> void @putint(i32 %59);
    call (i32) -> void @putch(i32 10);
    i32 %78 = add i32 %48, i32 1;
    ubr ^while.header2;
  ^b8:
    i32 %79 = phi [^b6, i32 %30] [^while.header7, i32 %87];
    ubr ^while.header9;
  ^while.body3:
    i32 %80 = phi [^while.header4, i32 0] [^b12, i32 %120];
    i32 %81 = phi [^while.header4, i32 0] [^b12, i32 %119];
    i32 %82 = phi [^while.header4, i32 %60] [^b12, i32 %122];
    i32 %83 = phi [^while.header4, i32 1] [^b12, i32 0];
    i32 %84 = and i32 %82, i32 %83;
    i1 %85 = ztrunc i32 %84 to i1;
    cbr i1 %85(prob = 0.5), ^if.then3, ^b12;
  ^while.header7:
    i32 %86 = phi [^b6, i32 %30] [^if.then29, i32 %299] [^if.else11, i32 %299];
    i32 %87 = phi [^b6, i32 0] [^if.then29, i32 %210] [^if.else11, i32 %210];
    i32 %88 = phi [^b6, i32 %29] [^if.then29, i32 %410] [^if.else11, i32 %417];
    i1 %89 = icmp neq i32 %88, i32 0;
    cbr i1 %89(prob = 0.984615), ^while.body5, ^b8;
  ^while.header8:
    i32 %90 = phi [^while.header6, i32 2] [^if.then28, i32 %296] [^if.else10, i32 %296];
    i32 %91 = phi [^while.header6, i32 1] [^if.then28, i32 %209] [^if.else10, i32 %209];
    i32 %92 = phi [^while.header6, i32 %73] [^if.then28, i32 %405] [^if.else10, i32 %415];
    i1 %93 = icmp sgt i32 %92, i32 0;
    cbr i1 %93(prob = 0.984615), ^while.body6, ^b14;
  ^b9:
    i32 %94 = phi [^while.body2, i32 %65] [^if.then2, i32 %77];
    i32 %95 = add i32 %62, i32 1;
    i1 %96 = icmp slt i32 %95, i32 16;
    i32 %97 = sdiv i32 %63, i32 2;
    cbr i1 %96(prob = 0.9375), ^while.body2, ^b13;
  ^while.body4:
    i32 %98 = phi [^while.header5, i32 0] [^b15, i32 %144];
    i32 %99 = phi [^while.header5, i32 %71] [^b15, i32 %146];
    i32 %100 = phi [^while.header5, i32 1] [^b15, i32 0];
    i32 %101 = phi [^while.header5, i32 0] [^b15, i32 %143];
    i32 %102 = and i32 %99, i32 %100;
    i1 %103 = ztrunc i32 %102 to i1;
    cbr i1 %103(prob = 0.5), ^if.then4, ^b15;
  ^b10:
    i1 %104 = icmp sgt i32 %18, i32 32767;
    cbr i1 %104(prob = 0.5), ^if.then5, ^if.else;
  ^b11:
    i32 %105 = phi [^while.header6, i32 0] [^b14, i32 1];
    ret i32 %105;
  ^if.then3:
    i32* %106 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %80];
    i32 %107 = load i32* %106;
    i32 %108 = add i32 %81, i32 %107;
    ubr ^b12;
  ^if.then4:
    i32* %109 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %98];
    i32 %110 = load i32* %109;
    i32 %111 = add i32 %101, i32 %110;
    ubr ^b15;
  ^if.then5:
    i32 %112 = load i32* %1;
    i32 %113 = sdiv i32 %18, i32 %112;
    i32 %114 = add i32 %113, i32 65536;
    i32 %115 = load i32* %15;
    i32 %116 = sub i32 %114, i32 %115;
    ubr ^while.header;
  ^if.else:
    i32 %117 = load i32* %1;
    i32 %118 = sdiv i32 %18, i32 %117;
    ubr ^while.header;
  ^b12:
    i32 %119 = phi [^while.body3, i32 %81] [^if.then3, i32 %108];
    i32 %120 = add i32 %80, i32 1;
    i1 %121 = icmp slt i32 %120, i32 16;
    i32 %122 = sdiv i32 %82, i32 2;
    cbr i1 %121(prob = 0.9375), ^while.body3, ^b18;
  ^while.body5:
    i32 %123 = phi [^while.header7, i32 0] [^b19, i32 %160];
    i32 %124 = phi [^while.header7, i32 0] [^b19, i32 %159];
    i32 %125 = phi [^while.header7, i32 %88] [^b19, i32 %162];
    i32 %126 = phi [^while.header7, i32 1] [^b19, i32 0];
    i32 %127 = and i32 %125, i32 %126;
    i1 %128 = ztrunc i32 %127 to i1;
    cbr i1 %128(prob = 0.5), ^if.then6, ^b19;
  ^while.body6:
    i32 %129 = phi [^while.header8, i32 0] [^b20, i32 %164];
    i32 %130 = phi [^while.header8, i32 0] [^b20, i32 %163];
    i32 %131 = phi [^while.header8, i32 %92] [^b20, i32 %166];
    i32 %132 = phi [^while.header8, i32 1] [^b20, i32 0];
    i32 %133 = and i32 %131, i32 %132;
    i1 %134 = ztrunc i32 %133 to i1;
    cbr i1 %134(prob = 0.5), ^if.then7, ^b20;
  ^b13:
    i1 %135 = icmp neq i32 %94, i32 0;
    cbr i1 %135(prob = 0.5), ^while.header10, ^b16;
  ^while.header9:
    i32 %136 = phi [^b8, i32 %29] [^if.then36, i32 %384] [^if.else14, i32 %384];
    i32 %137 = phi [^b8, i32 0] [^if.then36, i32 %258] [^if.else14, i32 %258];
    i32 %138 = phi [^b8, i32 %29] [^if.then36, i32 %482] [^if.else14, i32 %499];
    i1 %139 = icmp neq i32 %138, i32 0;
    cbr i1 %139(prob = 0.984615), ^while.body7, ^b22;
  ^b14:
    i32* %140 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %73];
    i32 %141 = load i32* %140;
    i1 %142 = icmp neq i32 %91, i32 %141;
    cbr i1 %142(prob = 0.5), ^b11, ^b17;
  ^b15:
    i32 %143 = phi [^while.body4, i32 %101] [^if.then4, i32 %111];
    i32 %144 = add i32 %98, i32 1;
    i1 %145 = icmp slt i32 %144, i32 16;
    i32 %146 = sdiv i32 %99, i32 2;
    cbr i1 %145(prob = 0.9375), ^while.body4, ^b21;
  ^if.then6:
    i32* %147 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %123];
    i32 %148 = load i32* %147;
    i32 %149 = add i32 %124, i32 %148;
    ubr ^b19;
  ^if.then7:
    i32* %150 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %129];
    i32 %151 = load i32* %150;
    i32 %152 = add i32 %130, i32 %151;
    ubr ^b20;
  ^b16:
    i32 %153 = phi [^b13, i32 %51] [^while.header10, i32 %156];
    ubr ^while.header13;
  ^b17:
    i32 %154 = add i32 %73, i32 1;
    ubr ^while.header6;
  ^b18:
    i1 %155 = icmp neq i32 %119, i32 0;
    cbr i1 %155(prob = 0.5), ^while.header11, ^b23;
  ^while.header10:
    i32 %156 = phi [^b13, i32 %51] [^b74, i32 %265];
    i32 %157 = phi [^b13, i32 %50] [^b74, i32 %682];
    i1 %158 = icmp neq i32 %157, i32 0;
    cbr i1 %158(prob = 0.984615), ^while.body8, ^b16;
  ^b19:
    i32 %159 = phi [^while.body5, i32 %124] [^if.then6, i32 %149];
    i32 %160 = add i32 %123, i32 1;
    i1 %161 = icmp slt i32 %160, i32 16;
    i32 %162 = sdiv i32 %125, i32 2;
    cbr i1 %161(prob = 0.9375), ^while.body5, ^b26;
  ^b20:
    i32 %163 = phi [^while.body6, i32 %130] [^if.then7, i32 %152];
    i32 %164 = add i32 %129, i32 1;
    i1 %165 = icmp slt i32 %164, i32 16;
    i32 %166 = sdiv i32 %131, i32 2;
    cbr i1 %165(prob = 0.9375), ^while.body6, ^b25;
  ^while.body7:
    i32 %167 = phi [^while.header9, i32 0] [^b27, i32 %206];
    i32 %168 = phi [^while.header9, i32 0] [^b27, i32 %205];
    i32 %169 = phi [^while.header9, i32 %138] [^b27, i32 %208];
    i32 %170 = phi [^while.header9, i32 1] [^b27, i32 0];
    i32 %171 = and i32 %169, i32 %170;
    i1 %172 = ztrunc i32 %171 to i1;
    cbr i1 %172(prob = 0.5), ^if.then8, ^b27;
  ^b21:
    i1 %173 = icmp neq i32 %143, i32 0;
    cbr i1 %173(prob = 0.5), ^while.header12, ^b24;
  ^b22:
    i1 %174 = icmp sgt i32 %31, i32 32767;
    cbr i1 %174(prob = 0.5), ^if.then9, ^if.else1;
  ^if.then8:
    i32* %175 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %167];
    i32 %176 = load i32* %175;
    i32 %177 = add i32 %168, i32 %176;
    ubr ^b27;
  ^b23:
    i32 %178 = phi [^b18, i32 %59] [^while.header11, i32 %186];
    ubr ^while.header16;
  ^if.then9:
    i32 %179 = load i32* %1;
    i32 %180 = sdiv i32 %31, i32 %179;
    i32 %181 = add i32 %180, i32 65536;
    i32 %182 = load i32* %15;
    i32 %183 = sub i32 %181, i32 %182;
    ubr ^while.header1;
  ^b24:
    i32 %184 = phi [^b21, i32 %70] [^while.header12, i32 %199];
    ubr ^while.header17;
  ^while.header11:
    i32 %185 = phi [^b18, i32 %59] [^if.then43, i32 %495] [^if.else17, i32 %495];
    i32 %186 = phi [^b18, i32 0] [^if.then43, i32 %400] [^if.else17, i32 %400];
    i32 %187 = phi [^b18, i32 %58] [^if.then43, i32 %619] [^if.else17, i32 %632];
    i1 %188 = icmp neq i32 %187, i32 0;
    cbr i1 %188(prob = 0.984615), ^while.body9, ^b23;
  ^if.else1:
    i32 %189 = load i32* %1;
    i32 %190 = sdiv i32 %31, i32 %189;
    ubr ^while.header1;
  ^while.body8:
    i32 %191 = phi [^while.header10, i32 0] [^b34, i32 %266];
    i32 %192 = phi [^while.header10, i32 %156] [^b34, i32 %268];
    i32 %193 = phi [^while.header10, i32 %157] [^b34, i32 %269];
    i32 %194 = phi [^while.header10, i32 0] [^b34, i32 %265];
    i32* %195 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %191];
    i1 %196 = ztrunc i32 %192 to i1;
    cbr i1 %196(prob = 0.5), ^if.then10, ^if.else2;
  ^b25:
    i1 %197 = icmp neq i32 %163, i32 0;
    cbr i1 %197(prob = 0.5), ^while.header14, ^b28;
  ^b26:
    i1 %198 = icmp neq i32 %159, i32 0;
    cbr i1 %198(prob = 0.5), ^while.header15, ^b29;
  ^while.header12:
    i32 %199 = phi [^b21, i32 %70] [^b83, i32 %343];
    i32 %200 = phi [^b21, i32 %69] [^b83, i32 %791];
    i1 %201 = icmp neq i32 %200, i32 0;
    cbr i1 %201(prob = 0.984615), ^while.body10, ^b24;
  ^while.header13:
    i32 %202 = phi [^b16, i32 %50] [^b82, i32 %352];
    i32 %203 = phi [^b16, i32 %50] [^b82, i32 %786];
    i1 %204 = icmp neq i32 %203, i32 0;
    cbr i1 %204(prob = 0.984615), ^while.body11, ^b31;
  ^b27:
    i32 %205 = phi [^while.body7, i32 %168] [^if.then8, i32 %177];
    i32 %206 = add i32 %167, i32 1;
    i1 %207 = icmp slt i32 %206, i32 16;
    i32 %208 = sdiv i32 %169, i32 2;
    cbr i1 %207(prob = 0.9375), ^while.body7, ^b30;
  ^b28:
    i32 %209 = phi [^b25, i32 %91] [^while.header14, i32 %220];
    ubr ^while.header19;
  ^b29:
    i32 %210 = phi [^b26, i32 %87] [^while.header15, i32 %223];
    ubr ^while.header20;
  ^while.body9:
    i32 %211 = phi [^while.header11, i32 0] [^b33, i32 %262];
    i32 %212 = phi [^while.header11, i32 %187] [^b33, i32 %264];
    i32 %213 = phi [^while.header11, i32 1] [^b33, i32 0];
    i32 %214 = phi [^while.header11, i32 0] [^b33, i32 %261];
    i32 %215 = and i32 %212, i32 %213;
    i1 %216 = ztrunc i32 %215 to i1;
    cbr i1 %216(prob = 0.5), ^if.then11, ^b33;
  ^if.then10:
    i32 %217 = and i32 %193, i32 1;
    i1 %218 = icmp eq i32 %217, i32 0;
    cbr i1 %218(prob = 0.5), ^if.then12, ^b34;
  ^while.header14:
    i32 %219 = phi [^b25, i32 %91] [^if.then54, i32 %576] [^if.else22, i32 %576];
    i32 %220 = phi [^b25, i32 0] [^if.then54, i32 %477] [^if.else22, i32 %477];
    i32 %221 = phi [^b25, i32 %90] [^if.then54, i32 %720] [^if.else22, i32 %737];
    i1 %222 = icmp neq i32 %221, i32 0;
    cbr i1 %222(prob = 0.984615), ^while.body12, ^b28;
  ^while.header15:
    i32 %223 = phi [^b26, i32 %87] [^b89, i32 %418];
    i32 %224 = phi [^b26, i32 %86] [^b89, i32 %866];
    i1 %225 = icmp neq i32 %224, i32 0;
    cbr i1 %225(prob = 0.984615), ^while.body14, ^b29;
  ^while.header16:
    i32 %226 = phi [^b23, i32 %58] [^if.then53, i32 %573] [^if.else21, i32 %573];
    i32 %227 = phi [^b23, i32 0] [^if.then53, i32 %476] [^if.else21, i32 %476];
    i32 %228 = phi [^b23, i32 %58] [^if.then53, i32 %715] [^if.else21, i32 %735];
    i1 %229 = icmp neq i32 %228, i32 0;
    cbr i1 %229(prob = 0.984615), ^while.body13, ^b35;
  ^if.else2:
    i1 %230 = ztrunc i32 %193 to i1;
    cbr i1 %230(prob = 0.5), ^if.then12, ^b34;
  ^while.body10:
    i32 %231 = phi [^while.header12, i32 0] [^b39, i32 %344];
    i32 %232 = phi [^while.header12, i32 %199] [^b39, i32 %346];
    i32 %233 = phi [^while.header12, i32 %200] [^b39, i32 %347];
    i32 %234 = phi [^while.header12, i32 0] [^b39, i32 %343];
    i32* %235 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %231];
    i1 %236 = ztrunc i32 %232 to i1;
    cbr i1 %236(prob = 0.5), ^if.then14, ^if.else4;
  ^while.body11:
    i32 %237 = phi [^while.header13, i32 0] [^b41, i32 %353];
    i32 %238 = phi [^while.header13, i32 %202] [^b41, i32 %355];
    i32 %239 = phi [^while.header13, i32 %203] [^b41, i32 %356];
    i32 %240 = phi [^while.header13, i32 0] [^b41, i32 %352];
    i32* %241 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %237];
    i1 %242 = ztrunc i32 %238 to i1;
    cbr i1 %242(prob = 0.5), ^if.then15, ^if.else5;
  ^b30:
    i1 %243 = icmp neq i32 %205, i32 0;
    cbr i1 %243(prob = 0.5), ^while.header18, ^b32;
  ^while.header17:
    i32 %244 = phi [^b24, i32 %69] [^b90, i32 %433];
    i32 %245 = phi [^b24, i32 %69] [^b90, i32 %884];
    i1 %246 = icmp neq i32 %245, i32 0;
    cbr i1 %246(prob = 0.984615), ^while.body15, ^b36;
  ^b31:
    i1 %247 = icmp sgt i32 %52, i32 32767;
    cbr i1 %247(prob = 0.5), ^if.then13, ^if.else3;
  ^if.then11:
    i32* %248 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %211];
    i32 %249 = load i32* %248;
    i32 %250 = add i32 %214, i32 %249;
    ubr ^b33;
  ^if.then12:
    i32 %251 = load i32* %195;
    i32 %252 = add i32 %194, i32 %251;
    ubr ^b34;
  ^if.then13:
    i32 %253 = load i32* %1;
    i32 %254 = sdiv i32 %52, i32 %253;
    i32 %255 = add i32 %254, i32 65536;
    i32 %256 = load i32* %15;
    i32 %257 = sub i32 %255, i32 %256;
    ubr ^while.header3;
  ^b32:
    i32 %258 = phi [^b30, i32 %137] [^while.header18, i32 %292];
    ubr ^while.header21;
  ^if.else3:
    i32 %259 = load i32* %1;
    i32 %260 = sdiv i32 %52, i32 %259;
    ubr ^while.header3;
  ^b33:
    i32 %261 = phi [^while.body9, i32 %214] [^if.then11, i32 %250];
    i32 %262 = add i32 %211, i32 1;
    i1 %263 = icmp slt i32 %262, i32 16;
    i32 %264 = sdiv i32 %212, i32 2;
    cbr i1 %263(prob = 0.9375), ^while.body9, ^b37;
  ^b34:
    i32 %265 = phi [^if.then10, i32 %194] [^if.else2, i32 %194] [^if.then12, i32 %252];
    i32 %266 = add i32 %191, i32 1;
    i1 %267 = icmp slt i32 %266, i32 16;
    i32 %268 = sdiv i32 %192, i32 2;
    i32 %269 = sdiv i32 %193, i32 2;
    cbr i1 %267(prob = 0.9375), ^while.body8, ^while.body17;
  ^while.body12:
    i32 %270 = phi [^while.header14, i32 0] [^b38, i32 %340];
    i32 %271 = phi [^while.header14, i32 %221] [^b38, i32 %342];
    i32 %272 = phi [^while.header14, i32 1] [^b38, i32 0];
    i32 %273 = phi [^while.header14, i32 0] [^b38, i32 %339];
    i32 %274 = and i32 %271, i32 %272;
    i1 %275 = ztrunc i32 %274 to i1;
    cbr i1 %275(prob = 0.5), ^if.then16, ^b38;
  ^if.then14:
    i32 %276 = and i32 %233, i32 1;
    i1 %277 = icmp eq i32 %276, i32 0;
    cbr i1 %277(prob = 0.5), ^if.then17, ^b39;
  ^while.body13:
    i32 %278 = phi [^while.header16, i32 0] [^b40, i32 %349];
    i32 %279 = phi [^while.header16, i32 %228] [^b40, i32 %351];
    i32 %280 = phi [^while.header16, i32 1] [^b40, i32 0];
    i32 %281 = phi [^while.header16, i32 0] [^b40, i32 %348];
    i32 %282 = and i32 %279, i32 %280;
    i1 %283 = ztrunc i32 %282 to i1;
    cbr i1 %283(prob = 0.5), ^if.then18, ^b40;
  ^if.then15:
    i32 %284 = and i32 %239, i32 1;
    i1 %285 = icmp eq i32 %284, i32 0;
    cbr i1 %285(prob = 0.5), ^if.then19, ^b41;
  ^while.body14:
    i32 %286 = phi [^while.header15, i32 0] [^b45, i32 %419];
    i32 %287 = phi [^while.header15, i32 0] [^b45, i32 %418];
    i32 %288 = phi [^while.header15, i32 %223] [^b45, i32 %421];
    i32 %289 = phi [^while.header15, i32 %224] [^b45, i32 %422];
    i32* %290 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %286];
    i1 %291 = ztrunc i32 %288 to i1;
    cbr i1 %291(prob = 0.5), ^if.then22, ^if.else8;
  ^while.header18:
    i32 %292 = phi [^b30, i32 %137] [^b97, i32 %500];
    i32 %293 = phi [^b30, i32 %136] [^b97, i32 %951];
    i1 %294 = icmp neq i32 %293, i32 0;
    cbr i1 %294(prob = 0.984615), ^while.body18, ^b32;
  ^while.header19:
    i32 %295 = phi [^b28, i32 %90] [^if.then66, i32 %667] [^if.else26, i32 %667];
    i32 %296 = phi [^b28, i32 0] [^if.then66, i32 %550] [^if.else26, i32 %550];
    i32 %297 = phi [^b28, i32 %90] [^if.then66, i32 %818] [^if.else26, i32 %825];
    i1 %298 = icmp neq i32 %297, i32 0;
    cbr i1 %298(prob = 0.984615), ^while.body16, ^b42;
  ^while.header20:
    i32 %299 = phi [^b29, i32 %86] [^b96, i32 %505];
    i32 %300 = phi [^b29, i32 %86] [^b96, i32 %946];
    i1 %301 = icmp neq i32 %300, i32 0;
    cbr i1 %301(prob = 0.984615), ^while.body19, ^b43;
  ^b35:
    i1 %302 = icmp sgt i32 %60, i32 32767;
    cbr i1 %302(prob = 0.5), ^if.then20, ^if.else6;
  ^if.else4:
    i1 %303 = ztrunc i32 %233 to i1;
    cbr i1 %303(prob = 0.5), ^if.then17, ^b39;
  ^if.else5:
    i1 %304 = ztrunc i32 %239 to i1;
    cbr i1 %304(prob = 0.5), ^if.then19, ^b41;
  ^while.body15:
    i32 %305 = phi [^while.header17, i32 0] [^b49, i32 %434];
    i32 %306 = phi [^while.header17, i32 0] [^b49, i32 %433];
    i32 %307 = phi [^while.header17, i32 %244] [^b49, i32 %436];
    i32 %308 = phi [^while.header17, i32 %245] [^b49, i32 %437];
    i32* %309 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %305];
    i1 %310 = ztrunc i32 %307 to i1;
    cbr i1 %310(prob = 0.5), ^if.then23, ^if.else9;
  ^b36:
    i1 %311 = icmp sgt i32 %71, i32 32767;
    cbr i1 %311(prob = 0.5), ^if.then21, ^if.else7;
  ^if.then16:
    i32* %312 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %270];
    i32 %313 = load i32* %312;
    i32 %314 = add i32 %273, i32 %313;
    ubr ^b38;
  ^if.then17:
    i32 %315 = load i32* %235;
    i32 %316 = add i32 %234, i32 %315;
    ubr ^b39;
  ^if.then18:
    i32* %317 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %278];
    i32 %318 = load i32* %317;
    i32 %319 = add i32 %281, i32 %318;
    ubr ^b40;
  ^if.then19:
    i32 %320 = load i32* %241;
    i32 %321 = add i32 %240, i32 %320;
    ubr ^b41;
  ^if.then20:
    i32 %322 = load i32* %1;
    i32 %323 = sdiv i32 %60, i32 %322;
    i32 %324 = add i32 %323, i32 65536;
    i32 %325 = load i32* %15;
    i32 %326 = sub i32 %324, i32 %325;
    ubr ^while.header4;
  ^if.then21:
    i32 %327 = load i32* %1;
    i32 %328 = sdiv i32 %71, i32 %327;
    i32 %329 = add i32 %328, i32 65536;
    i32 %330 = load i32* %15;
    i32 %331 = sub i32 %329, i32 %330;
    ubr ^while.header5;
  ^if.else6:
    i32 %332 = load i32* %1;
    i32 %333 = sdiv i32 %60, i32 %332;
    ubr ^while.header4;
  ^if.then22:
    i32 %334 = and i32 %289, i32 1;
    i1 %335 = icmp eq i32 %334, i32 0;
    cbr i1 %335(prob = 0.5), ^if.then24, ^b45;
  ^b37:
    i1 %336 = icmp neq i32 %261, i32 0;
    cbr i1 %336(prob = 0.5), ^while.header22, ^b44;
  ^if.else7:
    i32 %337 = load i32* %1;
    i32 %338 = sdiv i32 %71, i32 %337;
    ubr ^while.header5;
  ^b38:
    i32 %339 = phi [^while.body12, i32 %273] [^if.then16, i32 %314];
    i32 %340 = add i32 %270, i32 1;
    i1 %341 = icmp slt i32 %340, i32 16;
    i32 %342 = sdiv i32 %271, i32 2;
    cbr i1 %341(prob = 0.9375), ^while.body12, ^b47;
  ^b39:
    i32 %343 = phi [^if.then14, i32 %234] [^if.else4, i32 %234] [^if.then17, i32 %316];
    i32 %344 = add i32 %231, i32 1;
    i1 %345 = icmp slt i32 %344, i32 16;
    i32 %346 = sdiv i32 %232, i32 2;
    i32 %347 = sdiv i32 %233, i32 2;
    cbr i1 %345(prob = 0.9375), ^while.body10, ^while.body20;
  ^b40:
    i32 %348 = phi [^while.body13, i32 %281] [^if.then18, i32 %319];
    i32 %349 = add i32 %278, i32 1;
    i1 %350 = icmp slt i32 %349, i32 16;
    i32 %351 = sdiv i32 %279, i32 2;
    cbr i1 %350(prob = 0.9375), ^while.body13, ^b46;
  ^b41:
    i32 %352 = phi [^if.then15, i32 %240] [^if.else5, i32 %240] [^if.then19, i32 %321];
    i32 %353 = add i32 %237, i32 1;
    i1 %354 = icmp slt i32 %353, i32 16;
    i32 %355 = sdiv i32 %238, i32 2;
    i32 %356 = sdiv i32 %239, i32 2;
    cbr i1 %354(prob = 0.9375), ^while.body11, ^while.body21;
  ^if.else8:
    i1 %357 = ztrunc i32 %289 to i1;
    cbr i1 %357(prob = 0.5), ^if.then24, ^b45;
  ^while.body16:
    i32 %358 = phi [^while.header19, i32 0] [^b48, i32 %430];
    i32 %359 = phi [^while.header19, i32 0] [^b48, i32 %429];
    i32 %360 = phi [^while.header19, i32 %297] [^b48, i32 %432];
    i32 %361 = phi [^while.header19, i32 1] [^b48, i32 0];
    i32 %362 = and i32 %360, i32 %361;
    i1 %363 = ztrunc i32 %362 to i1;
    cbr i1 %363(prob = 0.5), ^if.then25, ^b48;
  ^if.then23:
    i32 %364 = and i32 %308, i32 1;
    i1 %365 = icmp eq i32 %364, i32 0;
    cbr i1 %365(prob = 0.5), ^if.then26, ^b49;
  ^while.body17:
    i32 %366 = phi [^b34, i32 0] [^b50, i32 %439];
    i32 %367 = phi [^b34, i32 %156] [^b50, i32 %441];
    i32 %368 = phi [^b34, i32 %157] [^b50, i32 %442];
    i32 %369 = phi [^b34, i32 0] [^b50, i32 %438];
    i32 %370 = and i32 %367, i32 %368;
    i1 %371 = ztrunc i32 %370 to i1;
    cbr i1 %371(prob = 0.5), ^if.then27, ^b50;
  ^while.body18:
    i32 %372 = phi [^while.header18, i32 0] [^b55, i32 %501];
    i32 %373 = phi [^while.header18, i32 0] [^b55, i32 %500];
    i32 %374 = phi [^while.header18, i32 %292] [^b55, i32 %503];
    i32 %375 = phi [^while.header18, i32 %293] [^b55, i32 %504];
    i32* %376 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %372];
    i1 %377 = ztrunc i32 %374 to i1;
    cbr i1 %377(prob = 0.5), ^if.then30, ^if.else12;
  ^while.body19:
    i32 %378 = phi [^while.header20, i32 0] [^b56, i32 %506];
    i32 %379 = phi [^while.header20, i32 0] [^b56, i32 %505];
    i32 %380 = phi [^while.header20, i32 %299] [^b56, i32 %508];
    i32 %381 = phi [^while.header20, i32 %300] [^b56, i32 %509];
    i32* %382 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %378];
    i1 %383 = ztrunc i32 %380 to i1;
    cbr i1 %383(prob = 0.5), ^if.then31, ^if.else13;
  ^while.header21:
    i32 %384 = phi [^b32, i32 %136] [^b104, i32 %580];
    i32 %385 = phi [^b32, i32 %136] [^b104, i32 %1007];
    i1 %386 = icmp neq i32 %385, i32 0;
    cbr i1 %386(prob = 0.984615), ^while.body22, ^b51;
  ^b42:
    i1 %387 = icmp sgt i32 %92, i32 32767;
    cbr i1 %387(prob = 0.5), ^if.then28, ^if.else10;
  ^b43:
    i1 %388 = icmp sgt i32 %88, i32 32767;
    cbr i1 %388(prob = 0.5), ^if.then29, ^if.else11;
  ^if.else9:
    i1 %389 = ztrunc i32 %308 to i1;
    cbr i1 %389(prob = 0.5), ^if.then26, ^b49;
  ^if.then24:
    i32 %390 = load i32* %290;
    i32 %391 = add i32 %287, i32 %390;
    ubr ^b45;
  ^if.then25:
    i32* %392 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %358];
    i32 %393 = load i32* %392;
    i32 %394 = add i32 %359, i32 %393;
    ubr ^b48;
  ^if.then26:
    i32 %395 = load i32* %309;
    i32 %396 = add i32 %306, i32 %395;
    ubr ^b49;
  ^if.then27:
    i32* %397 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %366];
    i32 %398 = load i32* %397;
    i32 %399 = add i32 %369, i32 %398;
    ubr ^b50;
  ^b44:
    i32 %400 = phi [^b37, i32 %186] [^while.header22, i32 %411];
    ubr ^while.header25;
  ^if.then28:
    i32 %401 = load i32* %1;
    i32 %402 = sdiv i32 %92, i32 %401;
    i32 %403 = add i32 %402, i32 65536;
    i32 %404 = load i32* %15;
    i32 %405 = sub i32 %403, i32 %404;
    ubr ^while.header8;
  ^if.then29:
    i32 %406 = load i32* %1;
    i32 %407 = sdiv i32 %88, i32 %406;
    i32 %408 = add i32 %407, i32 65536;
    i32 %409 = load i32* %15;
    i32 %410 = sub i32 %408, i32 %409;
    ubr ^while.header7;
  ^while.header22:
    i32 %411 = phi [^b37, i32 %186] [^b108, i32 %633];
    i32 %412 = phi [^b37, i32 %185] [^b108, i32 %1024];
    i1 %413 = icmp neq i32 %412, i32 0;
    cbr i1 %413(prob = 0.984615), ^while.body23, ^b44;
  ^if.else10:
    i32 %414 = load i32* %1;
    i32 %415 = sdiv i32 %92, i32 %414;
    ubr ^while.header8;
  ^if.else11:
    i32 %416 = load i32* %1;
    i32 %417 = sdiv i32 %88, i32 %416;
    ubr ^while.header7;
  ^b45:
    i32 %418 = phi [^if.then22, i32 %287] [^if.else8, i32 %287] [^if.then24, i32 %391];
    i32 %419 = add i32 %286, i32 1;
    i1 %420 = icmp slt i32 %419, i32 16;
    i32 %421 = sdiv i32 %288, i32 2;
    i32 %422 = sdiv i32 %289, i32 2;
    cbr i1 %420(prob = 0.9375), ^while.body14, ^while.body24;
  ^if.then30:
    i32 %423 = and i32 %375, i32 1;
    i1 %424 = icmp eq i32 %423, i32 0;
    cbr i1 %424(prob = 0.5), ^if.then32, ^b55;
  ^if.then31:
    i32 %425 = and i32 %381, i32 1;
    i1 %426 = icmp eq i32 %425, i32 0;
    cbr i1 %426(prob = 0.5), ^if.then33, ^b56;
  ^b46:
    i1 %427 = icmp neq i32 %348, i32 0;
    cbr i1 %427(prob = 0.5), ^while.header23, ^b53;
  ^b47:
    i1 %428 = icmp neq i32 %339, i32 0;
    cbr i1 %428(prob = 0.5), ^while.header24, ^b54;
  ^b48:
    i32 %429 = phi [^while.body16, i32 %359] [^if.then25, i32 %394];
    i32 %430 = add i32 %358, i32 1;
    i1 %431 = icmp slt i32 %430, i32 16;
    i32 %432 = sdiv i32 %360, i32 2;
    cbr i1 %431(prob = 0.9375), ^while.body16, ^b57;
  ^b49:
    i32 %433 = phi [^if.then23, i32 %306] [^if.else9, i32 %306] [^if.then26, i32 %396];
    i32 %434 = add i32 %305, i32 1;
    i1 %435 = icmp slt i32 %434, i32 16;
    i32 %436 = sdiv i32 %307, i32 2;
    i32 %437 = sdiv i32 %308, i32 2;
    cbr i1 %435(prob = 0.9375), ^while.body15, ^while.body25;
  ^b50:
    i32 %438 = phi [^while.body17, i32 %369] [^if.then27, i32 %399];
    i32 %439 = add i32 %366, i32 1;
    i1 %440 = icmp slt i32 %439, i32 16;
    i32 %441 = sdiv i32 %367, i32 2;
    i32 %442 = sdiv i32 %368, i32 2;
    cbr i1 %440(prob = 0.9375), ^while.body17, ^b52;
  ^if.else12:
    i1 %443 = ztrunc i32 %375 to i1;
    cbr i1 %443(prob = 0.5), ^if.then32, ^b55;
  ^if.else13:
    i1 %444 = ztrunc i32 %381 to i1;
    cbr i1 %444(prob = 0.5), ^if.then33, ^b56;
  ^while.body20:
    i32 %445 = phi [^b39, i32 0] [^b58, i32 %520];
    i32 %446 = phi [^b39, i32 0] [^b58, i32 %519];
    i32 %447 = phi [^b39, i32 %199] [^b58, i32 %522];
    i32 %448 = phi [^b39, i32 %200] [^b58, i32 %523];
    i32 %449 = and i32 %447, i32 %448;
    i1 %450 = ztrunc i32 %449 to i1;
    cbr i1 %450(prob = 0.5), ^if.then34, ^b58;
  ^while.body21:
    i32 %451 = phi [^b41, i32 0] [^b59, i32 %525];
    i32 %452 = phi [^b41, i32 %202] [^b59, i32 %527];
    i32 %453 = phi [^b41, i32 %203] [^b59, i32 %528];
    i32 %454 = phi [^b41, i32 0] [^b59, i32 %524];
    i32 %455 = and i32 %452, i32 %453;
    i1 %456 = ztrunc i32 %455 to i1;
    cbr i1 %456(prob = 0.5), ^if.then35, ^b59;
  ^while.body22:
    i32 %457 = phi [^while.header21, i32 0] [^b64, i32 %581];
    i32 %458 = phi [^while.header21, i32 0] [^b64, i32 %580];
    i32 %459 = phi [^while.header21, i32 %384] [^b64, i32 %583];
    i32 %460 = phi [^while.header21, i32 %385] [^b64, i32 %584];
    i32* %461 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %457];
    i1 %462 = ztrunc i32 %459 to i1;
    cbr i1 %462(prob = 0.5), ^if.then37, ^if.else15;
  ^b51:
    i1 %463 = icmp sgt i32 %138, i32 32767;
    cbr i1 %463(prob = 0.5), ^if.then36, ^if.else14;
  ^if.then32:
    i32 %464 = load i32* %376;
    i32 %465 = add i32 %373, i32 %464;
    ubr ^b55;
  ^if.then33:
    i32 %466 = load i32* %382;
    i32 %467 = add i32 %379, i32 %466;
    ubr ^b56;
  ^if.then34:
    i32* %468 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %445];
    i32 %469 = load i32* %468;
    i32 %470 = add i32 %446, i32 %469;
    ubr ^b58;
  ^if.then35:
    i32* %471 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %451];
    i32 %472 = load i32* %471;
    i32 %473 = add i32 %454, i32 %472;
    ubr ^b59;
  ^b52:
    i32 %474 = load i32* %1;
    i32 %475 = mul i32 %438, i32 %474;
    ubr ^while.body31;
  ^b53:
    i32 %476 = phi [^b46, i32 %227] [^while.header23, i32 %489];
    ubr ^while.header27;
  ^b54:
    i32 %477 = phi [^b47, i32 %220] [^while.header24, i32 %492];
    ubr ^while.header28;
  ^if.then36:
    i32 %478 = load i32* %1;
    i32 %479 = sdiv i32 %138, i32 %478;
    i32 %480 = add i32 %479, i32 65536;
    i32 %481 = load i32* %15;
    i32 %482 = sub i32 %480, i32 %481;
    ubr ^while.header9;
  ^while.body23:
    i32 %483 = phi [^while.header22, i32 0] [^b68, i32 %634];
    i32 %484 = phi [^while.header22, i32 %411] [^b68, i32 %636];
    i32 %485 = phi [^while.header22, i32 %412] [^b68, i32 %637];
    i32 %486 = phi [^while.header22, i32 0] [^b68, i32 %633];
    i32* %487 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %483];
    i1 %488 = ztrunc i32 %484 to i1;
    cbr i1 %488(prob = 0.5), ^if.then41, ^if.else16;
  ^while.header23:
    i32 %489 = phi [^b46, i32 %227] [^b113, i32 %738];
    i32 %490 = phi [^b46, i32 %226] [^b113, i32 %1073];
    i1 %491 = icmp neq i32 %490, i32 0;
    cbr i1 %491(prob = 0.984615), ^while.body26, ^b53;
  ^while.header24:
    i32 %492 = phi [^b47, i32 %220] [^b112, i32 %743];
    i32 %493 = phi [^b47, i32 %219] [^b112, i32 %1068];
    i1 %494 = icmp neq i32 %493, i32 0;
    cbr i1 %494(prob = 0.984615), ^while.body27, ^b54;
  ^while.header25:
    i32 %495 = phi [^b44, i32 %185] [^b111, i32 %748];
    i32 %496 = phi [^b44, i32 %185] [^b111, i32 %1063];
    i1 %497 = icmp neq i32 %496, i32 0;
    cbr i1 %497(prob = 0.984615), ^while.body28, ^b63;
  ^if.else14:
    i32 %498 = load i32* %1;
    i32 %499 = sdiv i32 %138, i32 %498;
    ubr ^while.header9;
  ^b55:
    i32 %500 = phi [^if.then30, i32 %373] [^if.else12, i32 %373] [^if.then32, i32 %465];
    i32 %501 = add i32 %372, i32 1;
    i1 %502 = icmp slt i32 %501, i32 16;
    i32 %503 = sdiv i32 %374, i32 2;
    i32 %504 = sdiv i32 %375, i32 2;
    cbr i1 %502(prob = 0.9375), ^while.body18, ^while.body29;
  ^b56:
    i32 %505 = phi [^if.then31, i32 %379] [^if.else13, i32 %379] [^if.then33, i32 %467];
    i32 %506 = add i32 %378, i32 1;
    i1 %507 = icmp slt i32 %506, i32 16;
    i32 %508 = sdiv i32 %380, i32 2;
    i32 %509 = sdiv i32 %381, i32 2;
    cbr i1 %507(prob = 0.9375), ^while.body19, ^while.body30;
  ^if.then37:
    i32 %510 = and i32 %460, i32 1;
    i1 %511 = icmp eq i32 %510, i32 0;
    cbr i1 %511(prob = 0.5), ^if.then38, ^b64;
  ^while.body24:
    i32 %512 = phi [^b45, i32 0] [^b65, i32 %586];
    i32 %513 = phi [^b45, i32 %223] [^b65, i32 %588];
    i32 %514 = phi [^b45, i32 %224] [^b65, i32 %589];
    i32 %515 = phi [^b45, i32 0] [^b65, i32 %585];
    i32 %516 = and i32 %513, i32 %514;
    i1 %517 = ztrunc i32 %516 to i1;
    cbr i1 %517(prob = 0.5), ^if.then39, ^b65;
  ^b57:
    i1 %518 = icmp neq i32 %429, i32 0;
    cbr i1 %518(prob = 0.5), ^while.header26, ^b62;
  ^b58:
    i32 %519 = phi [^while.body20, i32 %446] [^if.then34, i32 %470];
    i32 %520 = add i32 %445, i32 1;
    i1 %521 = icmp slt i32 %520, i32 16;
    i32 %522 = sdiv i32 %447, i32 2;
    i32 %523 = sdiv i32 %448, i32 2;
    cbr i1 %521(prob = 0.9375), ^while.body20, ^b61;
  ^b59:
    i32 %524 = phi [^while.body21, i32 %454] [^if.then35, i32 %473];
    i32 %525 = add i32 %451, i32 1;
    i1 %526 = icmp slt i32 %525, i32 16;
    i32 %527 = sdiv i32 %452, i32 2;
    i32 %528 = sdiv i32 %453, i32 2;
    cbr i1 %526(prob = 0.9375), ^while.body21, ^b60;
  ^if.else15:
    i1 %529 = ztrunc i32 %460 to i1;
    cbr i1 %529(prob = 0.5), ^if.then38, ^b64;
  ^while.body25:
    i32 %530 = phi [^b49, i32 0] [^b66, i32 %609];
    i32 %531 = phi [^b49, i32 %244] [^b66, i32 %611];
    i32 %532 = phi [^b49, i32 %245] [^b66, i32 %612];
    i32 %533 = phi [^b49, i32 0] [^b66, i32 %608];
    i32 %534 = and i32 %531, i32 %532;
    i1 %535 = ztrunc i32 %534 to i1;
    cbr i1 %535(prob = 0.5), ^if.then40, ^b66;
  ^if.then38:
    i32 %536 = load i32* %461;
    i32 %537 = add i32 %458, i32 %536;
    ubr ^b64;
  ^if.then39:
    i32* %538 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %512];
    i32 %539 = load i32* %538;
    i32 %540 = add i32 %515, i32 %539;
    ubr ^b65;
  ^if.then40:
    i32* %541 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %530];
    i32 %542 = load i32* %541;
    i32 %543 = add i32 %533, i32 %542;
    ubr ^b66;
  ^if.then41:
    i32 %544 = and i32 %485, i32 1;
    i1 %545 = icmp eq i32 %544, i32 0;
    cbr i1 %545(prob = 0.5), ^if.then42, ^b68;
  ^b60:
    i32 %546 = load i32* %1;
    i32 %547 = mul i32 %524, i32 %546;
    ubr ^while.body36;
  ^b61:
    i32 %548 = load i32* %1;
    i32 %549 = mul i32 %519, i32 %548;
    ubr ^while.body37;
  ^b62:
    i32 %550 = phi [^b57, i32 %296] [^while.header26, i32 %570];
    ubr ^while.header29;
  ^if.else16:
    i1 %551 = ztrunc i32 %485 to i1;
    cbr i1 %551(prob = 0.5), ^if.then42, ^b68;
  ^while.body26:
    i32 %552 = phi [^while.header23, i32 0] [^b77, i32 %739];
    i32 %553 = phi [^while.header23, i32 %489] [^b77, i32 %741];
    i32 %554 = phi [^while.header23, i32 %490] [^b77, i32 %742];
    i32 %555 = phi [^while.header23, i32 0] [^b77, i32 %738];
    i32* %556 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %552];
    i1 %557 = ztrunc i32 %553 to i1;
    cbr i1 %557(prob = 0.5), ^if.then47, ^if.else18;
  ^while.body27:
    i32 %558 = phi [^while.header24, i32 0] [^b78, i32 %744];
    i32 %559 = phi [^while.header24, i32 0] [^b78, i32 %743];
    i32 %560 = phi [^while.header24, i32 %492] [^b78, i32 %746];
    i32 %561 = phi [^while.header24, i32 %493] [^b78, i32 %747];
    i32* %562 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %558];
    i1 %563 = ztrunc i32 %560 to i1;
    cbr i1 %563(prob = 0.5), ^if.then48, ^if.else19;
  ^while.body28:
    i32 %564 = phi [^while.header25, i32 0] [^b79, i32 %749];
    i32 %565 = phi [^while.header25, i32 0] [^b79, i32 %748];
    i32 %566 = phi [^while.header25, i32 %495] [^b79, i32 %751];
    i32 %567 = phi [^while.header25, i32 %496] [^b79, i32 %752];
    i32* %568 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %564];
    i1 %569 = ztrunc i32 %566 to i1;
    cbr i1 %569(prob = 0.5), ^if.then49, ^if.else20;
  ^while.header26:
    i32 %570 = phi [^b57, i32 %296] [^b116, i32 %826];
    i32 %571 = phi [^b57, i32 %295] [^b116, i32 %1115];
    i1 %572 = icmp neq i32 %571, i32 0;
    cbr i1 %572(prob = 0.984615), ^while.body32, ^b62;
  ^while.header27:
    i32 %573 = phi [^b53, i32 %226] [^b115, i32 %831];
    i32 %574 = phi [^b53, i32 %226] [^b115, i32 %1110];
    i1 %575 = icmp neq i32 %574, i32 0;
    cbr i1 %575(prob = 0.984615), ^while.body33, ^b70;
  ^while.header28:
    i32 %576 = phi [^b54, i32 %219] [^b114, i32 %836];
    i32 %577 = phi [^b54, i32 %219] [^b114, i32 %1105];
    i1 %578 = icmp neq i32 %577, i32 0;
    cbr i1 %578(prob = 0.984615), ^while.body34, ^b71;
  ^b63:
    i1 %579 = icmp sgt i32 %187, i32 32767;
    cbr i1 %579(prob = 0.5), ^if.then43, ^if.else17;
  ^b64:
    i32 %580 = phi [^if.then37, i32 %458] [^if.else15, i32 %458] [^if.then38, i32 %537];
    i32 %581 = add i32 %457, i32 1;
    i1 %582 = icmp slt i32 %581, i32 16;
    i32 %583 = sdiv i32 %459, i32 2;
    i32 %584 = sdiv i32 %460, i32 2;
    cbr i1 %582(prob = 0.9375), ^while.body22, ^while.body35;
  ^b65:
    i32 %585 = phi [^while.body24, i32 %515] [^if.then39, i32 %540];
    i32 %586 = add i32 %512, i32 1;
    i1 %587 = icmp slt i32 %586, i32 16;
    i32 %588 = sdiv i32 %513, i32 2;
    i32 %589 = sdiv i32 %514, i32 2;
    cbr i1 %587(prob = 0.9375), ^while.body24, ^b67;
  ^while.body29:
    i32 %590 = phi [^b55, i32 0] [^b72, i32 %673];
    i32 %591 = phi [^b55, i32 0] [^b72, i32 %672];
    i32 %592 = phi [^b55, i32 %292] [^b72, i32 %675];
    i32 %593 = phi [^b55, i32 %293] [^b72, i32 %676];
    i32 %594 = and i32 %592, i32 %593;
    i1 %595 = ztrunc i32 %594 to i1;
    cbr i1 %595(prob = 0.5), ^if.then44, ^b72;
  ^while.body30:
    i32 %596 = phi [^b56, i32 0] [^b73, i32 %678];
    i32 %597 = phi [^b56, i32 0] [^b73, i32 %677];
    i32 %598 = phi [^b56, i32 %299] [^b73, i32 %680];
    i32 %599 = phi [^b56, i32 %300] [^b73, i32 %681];
    i32 %600 = and i32 %598, i32 %599;
    i1 %601 = ztrunc i32 %600 to i1;
    cbr i1 %601(prob = 0.5), ^if.then45, ^b73;
  ^while.body31:
    i32 %602 = phi [^b52, i32 0] [^b74, i32 %683];
    i32 %603 = phi [^b52, i32 %475] [^b74, i32 %685];
    i32 %604 = phi [^b52, i32 65535] [^b74, i32 %686];
    i32 %605 = phi [^b52, i32 0] [^b74, i32 %682];
    i32 %606 = and i32 %603, i32 %604;
    i1 %607 = ztrunc i32 %606 to i1;
    cbr i1 %607(prob = 0.5), ^if.then46, ^b74;
  ^b66:
    i32 %608 = phi [^while.body25, i32 %533] [^if.then40, i32 %543];
    i32 %609 = add i32 %530, i32 1;
    i1 %610 = icmp slt i32 %609, i32 16;
    i32 %611 = sdiv i32 %531, i32 2;
    i32 %612 = sdiv i32 %532, i32 2;
    cbr i1 %610(prob = 0.9375), ^while.body25, ^b69;
  ^if.then42:
    i32 %613 = load i32* %487;
    i32 %614 = add i32 %486, i32 %613;
    ubr ^b68;
  ^if.then43:
    i32 %615 = load i32* %1;
    i32 %616 = sdiv i32 %187, i32 %615;
    i32 %617 = add i32 %616, i32 65536;
    i32 %618 = load i32* %15;
    i32 %619 = sub i32 %617, i32 %618;
    ubr ^while.header11;
  ^if.then44:
    i32* %620 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %590];
    i32 %621 = load i32* %620;
    i32 %622 = add i32 %591, i32 %621;
    ubr ^b72;
  ^if.then45:
    i32* %623 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %596];
    i32 %624 = load i32* %623;
    i32 %625 = add i32 %597, i32 %624;
    ubr ^b73;
  ^if.then46:
    i32* %626 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %602];
    i32 %627 = load i32* %626;
    i32 %628 = add i32 %605, i32 %627;
    ubr ^b74;
  ^b67:
    i32 %629 = load i32* %1;
    i32 %630 = mul i32 %585, i32 %629;
    ubr ^while.body39;
  ^if.else17:
    i32 %631 = load i32* %1;
    i32 %632 = sdiv i32 %187, i32 %631;
    ubr ^while.header11;
  ^b68:
    i32 %633 = phi [^if.then41, i32 %486] [^if.else16, i32 %486] [^if.then42, i32 %614];
    i32 %634 = add i32 %483, i32 1;
    i1 %635 = icmp slt i32 %634, i32 16;
    i32 %636 = sdiv i32 %484, i32 2;
    i32 %637 = sdiv i32 %485, i32 2;
    cbr i1 %635(prob = 0.9375), ^while.body23, ^while.body38;
  ^if.then47:
    i32 %638 = and i32 %554, i32 1;
    i1 %639 = icmp eq i32 %638, i32 0;
    cbr i1 %639(prob = 0.5), ^if.then50, ^b77;
  ^if.then48:
    i32 %640 = and i32 %561, i32 1;
    i1 %641 = icmp eq i32 %640, i32 0;
    cbr i1 %641(prob = 0.5), ^if.then51, ^b78;
  ^if.then49:
    i32 %642 = and i32 %567, i32 1;
    i1 %643 = icmp eq i32 %642, i32 0;
    cbr i1 %643(prob = 0.5), ^if.then52, ^b79;
  ^b69:
    i32 %644 = load i32* %1;
    i32 %645 = mul i32 %608, i32 %644;
    ubr ^while.body41;
  ^if.else18:
    i1 %646 = ztrunc i32 %554 to i1;
    cbr i1 %646(prob = 0.5), ^if.then50, ^b77;
  ^if.else19:
    i1 %647 = ztrunc i32 %561 to i1;
    cbr i1 %647(prob = 0.5), ^if.then51, ^b78;
  ^if.else20:
    i1 %648 = ztrunc i32 %567 to i1;
    cbr i1 %648(prob = 0.5), ^if.then52, ^b79;
  ^while.body32:
    i32 %649 = phi [^while.header26, i32 0] [^b85, i32 %827];
    i32 %650 = phi [^while.header26, i32 0] [^b85, i32 %826];
    i32 %651 = phi [^while.header26, i32 %570] [^b85, i32 %829];
    i32 %652 = phi [^while.header26, i32 %571] [^b85, i32 %830];
    i32* %653 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %649];
    i1 %654 = ztrunc i32 %651 to i1;
    cbr i1 %654(prob = 0.5), ^if.then58, ^if.else23;
  ^while.body33:
    i32 %655 = phi [^while.header27, i32 0] [^b86, i32 %832];
    i32 %656 = phi [^while.header27, i32 0] [^b86, i32 %831];
    i32 %657 = phi [^while.header27, i32 %573] [^b86, i32 %834];
    i32 %658 = phi [^while.header27, i32 %574] [^b86, i32 %835];
    i32* %659 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %655];
    i1 %660 = ztrunc i32 %657 to i1;
    cbr i1 %660(prob = 0.5), ^if.then59, ^if.else24;
  ^while.body34:
    i32 %661 = phi [^while.header28, i32 0] [^b87, i32 %837];
    i32 %662 = phi [^while.header28, i32 %576] [^b87, i32 %839];
    i32 %663 = phi [^while.header28, i32 %577] [^b87, i32 %840];
    i32 %664 = phi [^while.header28, i32 0] [^b87, i32 %836];
    i32* %665 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %661];
    i1 %666 = ztrunc i32 %662 to i1;
    cbr i1 %666(prob = 0.5), ^if.then60, ^if.else25;
  ^while.header29:
    i32 %667 = phi [^b62, i32 %295] [^b117, i32 %908];
    i32 %668 = phi [^b62, i32 %295] [^b117, i32 %1129];
    i1 %669 = icmp neq i32 %668, i32 0;
    cbr i1 %669(prob = 0.984615), ^while.body40, ^b80;
  ^b70:
    i1 %670 = icmp sgt i32 %228, i32 32767;
    cbr i1 %670(prob = 0.5), ^if.then53, ^if.else21;
  ^b71:
    i1 %671 = icmp sgt i32 %221, i32 32767;
    cbr i1 %671(prob = 0.5), ^if.then54, ^if.else22;
  ^b72:
    i32 %672 = phi [^while.body29, i32 %591] [^if.then44, i32 %622];
    i32 %673 = add i32 %590, i32 1;
    i1 %674 = icmp slt i32 %673, i32 16;
    i32 %675 = sdiv i32 %592, i32 2;
    i32 %676 = sdiv i32 %593, i32 2;
    cbr i1 %674(prob = 0.9375), ^while.body29, ^b76;
  ^b73:
    i32 %677 = phi [^while.body30, i32 %597] [^if.then45, i32 %625];
    i32 %678 = add i32 %596, i32 1;
    i1 %679 = icmp slt i32 %678, i32 16;
    i32 %680 = sdiv i32 %598, i32 2;
    i32 %681 = sdiv i32 %599, i32 2;
    cbr i1 %679(prob = 0.9375), ^while.body30, ^b75;
  ^b74:
    i32 %682 = phi [^while.body31, i32 %605] [^if.then46, i32 %628];
    i32 %683 = add i32 %602, i32 1;
    i1 %684 = icmp slt i32 %683, i32 16;
    i32 %685 = sdiv i32 %603, i32 2;
    i32 %686 = sdiv i32 %604, i32 2;
    cbr i1 %684(prob = 0.9375), ^while.body31, ^while.header10;
  ^while.body35:
    i32 %687 = phi [^b64, i32 0] [^b81, i32 %782];
    i32 %688 = phi [^b64, i32 %384] [^b81, i32 %784];
    i32 %689 = phi [^b64, i32 %385] [^b81, i32 %785];
    i32 %690 = phi [^b64, i32 0] [^b81, i32 %781];
    i32 %691 = and i32 %688, i32 %689;
    i1 %692 = ztrunc i32 %691 to i1;
    cbr i1 %692(prob = 0.5), ^if.then55, ^b81;
  ^while.body36:
    i32 %693 = phi [^b60, i32 0] [^b82, i32 %787];
    i32 %694 = phi [^b60, i32 %547] [^b82, i32 %789];
    i32 %695 = phi [^b60, i32 65535] [^b82, i32 %790];
    i32 %696 = phi [^b60, i32 0] [^b82, i32 %786];
    i32 %697 = and i32 %694, i32 %695;
    i1 %698 = ztrunc i32 %697 to i1;
    cbr i1 %698(prob = 0.5), ^if.then56, ^b82;
  ^while.body37:
    i32 %699 = phi [^b61, i32 0] [^b83, i32 %792];
    i32 %700 = phi [^b61, i32 %549] [^b83, i32 %794];
    i32 %701 = phi [^b61, i32 65535] [^b83, i32 %795];
    i32 %702 = phi [^b61, i32 0] [^b83, i32 %791];
    i32 %703 = and i32 %700, i32 %701;
    i1 %704 = ztrunc i32 %703 to i1;
    cbr i1 %704(prob = 0.5), ^if.then57, ^b83;
  ^if.then50:
    i32 %705 = load i32* %556;
    i32 %706 = add i32 %555, i32 %705;
    ubr ^b77;
  ^if.then51:
    i32 %707 = load i32* %562;
    i32 %708 = add i32 %559, i32 %707;
    ubr ^b78;
  ^if.then52:
    i32 %709 = load i32* %568;
    i32 %710 = add i32 %565, i32 %709;
    ubr ^b79;
  ^if.then53:
    i32 %711 = load i32* %1;
    i32 %712 = sdiv i32 %228, i32 %711;
    i32 %713 = add i32 %712, i32 65536;
    i32 %714 = load i32* %15;
    i32 %715 = sub i32 %713, i32 %714;
    ubr ^while.header16;
  ^if.then54:
    i32 %716 = load i32* %1;
    i32 %717 = sdiv i32 %221, i32 %716;
    i32 %718 = add i32 %717, i32 65536;
    i32 %719 = load i32* %15;
    i32 %720 = sub i32 %718, i32 %719;
    ubr ^while.header14;
  ^if.then55:
    i32* %721 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %687];
    i32 %722 = load i32* %721;
    i32 %723 = add i32 %690, i32 %722;
    ubr ^b81;
  ^if.then56:
    i32* %724 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %693];
    i32 %725 = load i32* %724;
    i32 %726 = add i32 %696, i32 %725;
    ubr ^b82;
  ^if.then57:
    i32* %727 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %699];
    i32 %728 = load i32* %727;
    i32 %729 = add i32 %702, i32 %728;
    ubr ^b83;
  ^b75:
    i32 %730 = load i32* %1;
    i32 %731 = mul i32 %677, i32 %730;
    ubr ^while.body45;
  ^b76:
    i32 %732 = load i32* %1;
    i32 %733 = mul i32 %672, i32 %732;
    ubr ^while.body46;
  ^if.else21:
    i32 %734 = load i32* %1;
    i32 %735 = sdiv i32 %228, i32 %734;
    ubr ^while.header16;
  ^if.else22:
    i32 %736 = load i32* %1;
    i32 %737 = sdiv i32 %221, i32 %736;
    ubr ^while.header14;
  ^b77:
    i32 %738 = phi [^if.then47, i32 %555] [^if.else18, i32 %555] [^if.then50, i32 %706];
    i32 %739 = add i32 %552, i32 1;
    i1 %740 = icmp slt i32 %739, i32 16;
    i32 %741 = sdiv i32 %553, i32 2;
    i32 %742 = sdiv i32 %554, i32 2;
    cbr i1 %740(prob = 0.9375), ^while.body26, ^while.body42;
  ^b78:
    i32 %743 = phi [^if.then48, i32 %559] [^if.else19, i32 %559] [^if.then51, i32 %708];
    i32 %744 = add i32 %558, i32 1;
    i1 %745 = icmp slt i32 %744, i32 16;
    i32 %746 = sdiv i32 %560, i32 2;
    i32 %747 = sdiv i32 %561, i32 2;
    cbr i1 %745(prob = 0.9375), ^while.body27, ^while.body43;
  ^b79:
    i32 %748 = phi [^if.then49, i32 %565] [^if.else20, i32 %565] [^if.then52, i32 %710];
    i32 %749 = add i32 %564, i32 1;
    i1 %750 = icmp slt i32 %749, i32 16;
    i32 %751 = sdiv i32 %566, i32 2;
    i32 %752 = sdiv i32 %567, i32 2;
    cbr i1 %750(prob = 0.9375), ^while.body28, ^while.body44;
  ^if.then58:
    i32 %753 = and i32 %652, i32 1;
    i1 %754 = icmp eq i32 %753, i32 0;
    cbr i1 %754(prob = 0.5), ^if.then61, ^b85;
  ^if.then59:
    i32 %755 = and i32 %658, i32 1;
    i1 %756 = icmp eq i32 %755, i32 0;
    cbr i1 %756(prob = 0.5), ^if.then62, ^b86;
  ^if.then60:
    i32 %757 = and i32 %663, i32 1;
    i1 %758 = icmp eq i32 %757, i32 0;
    cbr i1 %758(prob = 0.5), ^if.then63, ^b87;
  ^while.body38:
    i32 %759 = phi [^b68, i32 0] [^b88, i32 %842];
    i32 %760 = phi [^b68, i32 0] [^b88, i32 %841];
    i32 %761 = phi [^b68, i32 %411] [^b88, i32 %844];
    i32 %762 = phi [^b68, i32 %412] [^b88, i32 %845];
    i32 %763 = and i32 %761, i32 %762;
    i1 %764 = ztrunc i32 %763 to i1;
    cbr i1 %764(prob = 0.5), ^if.then64, ^b88;
  ^if.else23:
    i1 %765 = ztrunc i32 %652 to i1;
    cbr i1 %765(prob = 0.5), ^if.then61, ^b85;
  ^if.else24:
    i1 %766 = ztrunc i32 %658 to i1;
    cbr i1 %766(prob = 0.5), ^if.then62, ^b86;
  ^if.else25:
    i1 %767 = ztrunc i32 %663 to i1;
    cbr i1 %767(prob = 0.5), ^if.then63, ^b87;
  ^while.body39:
    i32 %768 = phi [^b67, i32 0] [^b89, i32 %867];
    i32 %769 = phi [^b67, i32 0] [^b89, i32 %866];
    i32 %770 = phi [^b67, i32 %630] [^b89, i32 %869];
    i32 %771 = phi [^b67, i32 65535] [^b89, i32 %870];
    i32 %772 = and i32 %770, i32 %771;
    i1 %773 = ztrunc i32 %772 to i1;
    cbr i1 %773(prob = 0.5), ^if.then65, ^b89;
  ^while.body40:
    i32 %774 = phi [^while.header29, i32 0] [^b92, i32 %909];
    i32 %775 = phi [^while.header29, i32 0] [^b92, i32 %908];
    i32 %776 = phi [^while.header29, i32 %667] [^b92, i32 %911];
    i32 %777 = phi [^while.header29, i32 %668] [^b92, i32 %912];
    i32* %778 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %774];
    i1 %779 = ztrunc i32 %776 to i1;
    cbr i1 %779(prob = 0.5), ^if.then68, ^if.else27;
  ^b80:
    i1 %780 = icmp sgt i32 %297, i32 32767;
    cbr i1 %780(prob = 0.5), ^if.then66, ^if.else26;
  ^b81:
    i32 %781 = phi [^while.body35, i32 %690] [^if.then55, i32 %723];
    i32 %782 = add i32 %687, i32 1;
    i1 %783 = icmp slt i32 %782, i32 16;
    i32 %784 = sdiv i32 %688, i32 2;
    i32 %785 = sdiv i32 %689, i32 2;
    cbr i1 %783(prob = 0.9375), ^while.body35, ^b84;
  ^b82:
    i32 %786 = phi [^while.body36, i32 %696] [^if.then56, i32 %726];
    i32 %787 = add i32 %693, i32 1;
    i1 %788 = icmp slt i32 %787, i32 16;
    i32 %789 = sdiv i32 %694, i32 2;
    i32 %790 = sdiv i32 %695, i32 2;
    cbr i1 %788(prob = 0.9375), ^while.body36, ^while.header13;
  ^b83:
    i32 %791 = phi [^while.body37, i32 %702] [^if.then57, i32 %729];
    i32 %792 = add i32 %699, i32 1;
    i1 %793 = icmp slt i32 %792, i32 16;
    i32 %794 = sdiv i32 %700, i32 2;
    i32 %795 = sdiv i32 %701, i32 2;
    cbr i1 %793(prob = 0.9375), ^while.body37, ^while.header12;
  ^while.body41:
    i32 %796 = phi [^b69, i32 0] [^b90, i32 %885];
    i32 %797 = phi [^b69, i32 0] [^b90, i32 %884];
    i32 %798 = phi [^b69, i32 %645] [^b90, i32 %887];
    i32 %799 = phi [^b69, i32 65535] [^b90, i32 %888];
    i32 %800 = and i32 %798, i32 %799;
    i1 %801 = ztrunc i32 %800 to i1;
    cbr i1 %801(prob = 0.5), ^if.then67, ^b90;
  ^if.then61:
    i32 %802 = load i32* %653;
    i32 %803 = add i32 %650, i32 %802;
    ubr ^b85;
  ^if.then62:
    i32 %804 = load i32* %659;
    i32 %805 = add i32 %656, i32 %804;
    ubr ^b86;
  ^if.then63:
    i32 %806 = load i32* %665;
    i32 %807 = add i32 %664, i32 %806;
    ubr ^b87;
  ^if.then64:
    i32* %808 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %759];
    i32 %809 = load i32* %808;
    i32 %810 = add i32 %760, i32 %809;
    ubr ^b88;
  ^if.then65:
    i32* %811 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %768];
    i32 %812 = load i32* %811;
    i32 %813 = add i32 %769, i32 %812;
    ubr ^b89;
  ^if.then66:
    i32 %814 = load i32* %1;
    i32 %815 = sdiv i32 %297, i32 %814;
    i32 %816 = add i32 %815, i32 65536;
    i32 %817 = load i32* %15;
    i32 %818 = sub i32 %816, i32 %817;
    ubr ^while.header19;
  ^if.then67:
    i32* %819 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %796];
    i32 %820 = load i32* %819;
    i32 %821 = add i32 %797, i32 %820;
    ubr ^b90;
  ^b84:
    i32 %822 = load i32* %1;
    i32 %823 = mul i32 %781, i32 %822;
    ubr ^while.body50;
  ^if.else26:
    i32 %824 = load i32* %1;
    i32 %825 = sdiv i32 %297, i32 %824;
    ubr ^while.header19;
  ^b85:
    i32 %826 = phi [^if.then58, i32 %650] [^if.else23, i32 %650] [^if.then61, i32 %803];
    i32 %827 = add i32 %649, i32 1;
    i1 %828 = icmp slt i32 %827, i32 16;
    i32 %829 = sdiv i32 %651, i32 2;
    i32 %830 = sdiv i32 %652, i32 2;
    cbr i1 %828(prob = 0.9375), ^while.body32, ^while.body47;
  ^b86:
    i32 %831 = phi [^if.then59, i32 %656] [^if.else24, i32 %656] [^if.then62, i32 %805];
    i32 %832 = add i32 %655, i32 1;
    i1 %833 = icmp slt i32 %832, i32 16;
    i32 %834 = sdiv i32 %657, i32 2;
    i32 %835 = sdiv i32 %658, i32 2;
    cbr i1 %833(prob = 0.9375), ^while.body33, ^while.body48;
  ^b87:
    i32 %836 = phi [^if.then60, i32 %664] [^if.else25, i32 %664] [^if.then63, i32 %807];
    i32 %837 = add i32 %661, i32 1;
    i1 %838 = icmp slt i32 %837, i32 16;
    i32 %839 = sdiv i32 %662, i32 2;
    i32 %840 = sdiv i32 %663, i32 2;
    cbr i1 %838(prob = 0.9375), ^while.body34, ^while.body49;
  ^b88:
    i32 %841 = phi [^while.body38, i32 %760] [^if.then64, i32 %810];
    i32 %842 = add i32 %759, i32 1;
    i1 %843 = icmp slt i32 %842, i32 16;
    i32 %844 = sdiv i32 %761, i32 2;
    i32 %845 = sdiv i32 %762, i32 2;
    cbr i1 %843(prob = 0.9375), ^while.body38, ^b91;
  ^if.then68:
    i32 %846 = and i32 %777, i32 1;
    i1 %847 = icmp eq i32 %846, i32 0;
    cbr i1 %847(prob = 0.5), ^if.then69, ^b92;
  ^while.body42:
    i32 %848 = phi [^b77, i32 0] [^b93, i32 %914];
    i32 %849 = phi [^b77, i32 %489] [^b93, i32 %916];
    i32 %850 = phi [^b77, i32 %490] [^b93, i32 %917];
    i32 %851 = phi [^b77, i32 0] [^b93, i32 %913];
    i32 %852 = and i32 %849, i32 %850;
    i1 %853 = ztrunc i32 %852 to i1;
    cbr i1 %853(prob = 0.5), ^if.then70, ^b93;
  ^while.body43:
    i32 %854 = phi [^b78, i32 0] [^b94, i32 %919];
    i32 %855 = phi [^b78, i32 0] [^b94, i32 %918];
    i32 %856 = phi [^b78, i32 %492] [^b94, i32 %921];
    i32 %857 = phi [^b78, i32 %493] [^b94, i32 %922];
    i32 %858 = and i32 %856, i32 %857;
    i1 %859 = ztrunc i32 %858 to i1;
    cbr i1 %859(prob = 0.5), ^if.then71, ^b94;
  ^while.body44:
    i32 %860 = phi [^b79, i32 0] [^b95, i32 %924];
    i32 %861 = phi [^b79, i32 0] [^b95, i32 %923];
    i32 %862 = phi [^b79, i32 %495] [^b95, i32 %926];
    i32 %863 = phi [^b79, i32 %496] [^b95, i32 %927];
    i32 %864 = and i32 %862, i32 %863;
    i1 %865 = ztrunc i32 %864 to i1;
    cbr i1 %865(prob = 0.5), ^if.then72, ^b95;
  ^b89:
    i32 %866 = phi [^while.body39, i32 %769] [^if.then65, i32 %813];
    i32 %867 = add i32 %768, i32 1;
    i1 %868 = icmp slt i32 %867, i32 16;
    i32 %869 = sdiv i32 %770, i32 2;
    i32 %870 = sdiv i32 %771, i32 2;
    cbr i1 %868(prob = 0.9375), ^while.body39, ^while.header15;
  ^if.else27:
    i1 %871 = ztrunc i32 %777 to i1;
    cbr i1 %871(prob = 0.5), ^if.then69, ^b92;
  ^while.body45:
    i32 %872 = phi [^b75, i32 0] [^b96, i32 %947];
    i32 %873 = phi [^b75, i32 %731] [^b96, i32 %949];
    i32 %874 = phi [^b75, i32 65535] [^b96, i32 %950];
    i32 %875 = phi [^b75, i32 0] [^b96, i32 %946];
    i32 %876 = and i32 %873, i32 %874;
    i1 %877 = ztrunc i32 %876 to i1;
    cbr i1 %877(prob = 0.5), ^if.then73, ^b96;
  ^while.body46:
    i32 %878 = phi [^b76, i32 0] [^b97, i32 %952];
    i32 %879 = phi [^b76, i32 0] [^b97, i32 %951];
    i32 %880 = phi [^b76, i32 %733] [^b97, i32 %954];
    i32 %881 = phi [^b76, i32 65535] [^b97, i32 %955];
    i32 %882 = and i32 %880, i32 %881;
    i1 %883 = ztrunc i32 %882 to i1;
    cbr i1 %883(prob = 0.5), ^if.then74, ^b97;
  ^b90:
    i32 %884 = phi [^while.body41, i32 %797] [^if.then67, i32 %821];
    i32 %885 = add i32 %796, i32 1;
    i1 %886 = icmp slt i32 %885, i32 16;
    i32 %887 = sdiv i32 %798, i32 2;
    i32 %888 = sdiv i32 %799, i32 2;
    cbr i1 %886(prob = 0.9375), ^while.body41, ^while.header17;
  ^if.then69:
    i32 %889 = load i32* %778;
    i32 %890 = add i32 %775, i32 %889;
    ubr ^b92;
  ^if.then70:
    i32* %891 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %848];
    i32 %892 = load i32* %891;
    i32 %893 = add i32 %851, i32 %892;
    ubr ^b93;
  ^if.then71:
    i32* %894 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %854];
    i32 %895 = load i32* %894;
    i32 %896 = add i32 %855, i32 %895;
    ubr ^b94;
  ^if.then72:
    i32* %897 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %860];
    i32 %898 = load i32* %897;
    i32 %899 = add i32 %861, i32 %898;
    ubr ^b95;
  ^b91:
    i32 %900 = load i32* %1;
    i32 %901 = mul i32 %841, i32 %900;
    ubr ^while.body51;
  ^if.then73:
    i32* %902 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %872];
    i32 %903 = load i32* %902;
    i32 %904 = add i32 %875, i32 %903;
    ubr ^b96;
  ^if.then74:
    i32* %905 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %878];
    i32 %906 = load i32* %905;
    i32 %907 = add i32 %879, i32 %906;
    ubr ^b97;
  ^b92:
    i32 %908 = phi [^if.then68, i32 %775] [^if.else27, i32 %775] [^if.then69, i32 %890];
    i32 %909 = add i32 %774, i32 1;
    i1 %910 = icmp slt i32 %909, i32 16;
    i32 %911 = sdiv i32 %776, i32 2;
    i32 %912 = sdiv i32 %777, i32 2;
    cbr i1 %910(prob = 0.9375), ^while.body40, ^while.body52;
  ^b93:
    i32 %913 = phi [^while.body42, i32 %851] [^if.then70, i32 %893];
    i32 %914 = add i32 %848, i32 1;
    i1 %915 = icmp slt i32 %914, i32 16;
    i32 %916 = sdiv i32 %849, i32 2;
    i32 %917 = sdiv i32 %850, i32 2;
    cbr i1 %915(prob = 0.9375), ^while.body42, ^b100;
  ^b94:
    i32 %918 = phi [^while.body43, i32 %855] [^if.then71, i32 %896];
    i32 %919 = add i32 %854, i32 1;
    i1 %920 = icmp slt i32 %919, i32 16;
    i32 %921 = sdiv i32 %856, i32 2;
    i32 %922 = sdiv i32 %857, i32 2;
    cbr i1 %920(prob = 0.9375), ^while.body43, ^b99;
  ^b95:
    i32 %923 = phi [^while.body44, i32 %861] [^if.then72, i32 %899];
    i32 %924 = add i32 %860, i32 1;
    i1 %925 = icmp slt i32 %924, i32 16;
    i32 %926 = sdiv i32 %862, i32 2;
    i32 %927 = sdiv i32 %863, i32 2;
    cbr i1 %925(prob = 0.9375), ^while.body44, ^b98;
  ^while.body47:
    i32 %928 = phi [^b85, i32 0] [^b101, i32 %987];
    i32 %929 = phi [^b85, i32 0] [^b101, i32 %986];
    i32 %930 = phi [^b85, i32 %570] [^b101, i32 %989];
    i32 %931 = phi [^b85, i32 %571] [^b101, i32 %990];
    i32 %932 = and i32 %930, i32 %931;
    i1 %933 = ztrunc i32 %932 to i1;
    cbr i1 %933(prob = 0.5), ^if.then75, ^b101;
  ^while.body48:
    i32 %934 = phi [^b86, i32 0] [^b102, i32 %992];
    i32 %935 = phi [^b86, i32 0] [^b102, i32 %991];
    i32 %936 = phi [^b86, i32 %573] [^b102, i32 %994];
    i32 %937 = phi [^b86, i32 %574] [^b102, i32 %995];
    i32 %938 = and i32 %936, i32 %937;
    i1 %939 = ztrunc i32 %938 to i1;
    cbr i1 %939(prob = 0.5), ^if.then76, ^b102;
  ^while.body49:
    i32 %940 = phi [^b87, i32 0] [^b103, i32 %997];
    i32 %941 = phi [^b87, i32 0] [^b103, i32 %996];
    i32 %942 = phi [^b87, i32 %576] [^b103, i32 %999];
    i32 %943 = phi [^b87, i32 %577] [^b103, i32 %1000];
    i32 %944 = and i32 %942, i32 %943;
    i1 %945 = ztrunc i32 %944 to i1;
    cbr i1 %945(prob = 0.5), ^if.then77, ^b103;
  ^b96:
    i32 %946 = phi [^while.body45, i32 %875] [^if.then73, i32 %904];
    i32 %947 = add i32 %872, i32 1;
    i1 %948 = icmp slt i32 %947, i32 16;
    i32 %949 = sdiv i32 %873, i32 2;
    i32 %950 = sdiv i32 %874, i32 2;
    cbr i1 %948(prob = 0.9375), ^while.body45, ^while.header20;
  ^b97:
    i32 %951 = phi [^while.body46, i32 %879] [^if.then74, i32 %907];
    i32 %952 = add i32 %878, i32 1;
    i1 %953 = icmp slt i32 %952, i32 16;
    i32 %954 = sdiv i32 %880, i32 2;
    i32 %955 = sdiv i32 %881, i32 2;
    cbr i1 %953(prob = 0.9375), ^while.body46, ^while.header18;
  ^while.body50:
    i32 %956 = phi [^b84, i32 0] [^b104, i32 %1008];
    i32 %957 = phi [^b84, i32 %823] [^b104, i32 %1010];
    i32 %958 = phi [^b84, i32 65535] [^b104, i32 %1011];
    i32 %959 = phi [^b84, i32 0] [^b104, i32 %1007];
    i32 %960 = and i32 %957, i32 %958;
    i1 %961 = ztrunc i32 %960 to i1;
    cbr i1 %961(prob = 0.5), ^if.then78, ^b104;
  ^if.then75:
    i32* %962 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %928];
    i32 %963 = load i32* %962;
    i32 %964 = add i32 %929, i32 %963;
    ubr ^b101;
  ^if.then76:
    i32* %965 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %934];
    i32 %966 = load i32* %965;
    i32 %967 = add i32 %935, i32 %966;
    ubr ^b102;
  ^if.then77:
    i32* %968 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %940];
    i32 %969 = load i32* %968;
    i32 %970 = add i32 %941, i32 %969;
    ubr ^b103;
  ^b98:
    i32 %971 = load i32* %1;
    i32 %972 = mul i32 %923, i32 %971;
    ubr ^while.body53;
  ^b99:
    i32 %973 = load i32* %1;
    i32 %974 = mul i32 %918, i32 %973;
    ubr ^while.body54;
  ^b100:
    i32 %975 = load i32* %1;
    i32 %976 = mul i32 %913, i32 %975;
    ubr ^while.body55;
  ^if.then78:
    i32* %977 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %956];
    i32 %978 = load i32* %977;
    i32 %979 = add i32 %959, i32 %978;
    ubr ^b104;
  ^while.body51:
    i32 %980 = phi [^b91, i32 0] [^b108, i32 %1025];
    i32 %981 = phi [^b91, i32 %901] [^b108, i32 %1027];
    i32 %982 = phi [^b91, i32 65535] [^b108, i32 %1028];
    i32 %983 = phi [^b91, i32 0] [^b108, i32 %1024];
    i32 %984 = and i32 %981, i32 %982;
    i1 %985 = ztrunc i32 %984 to i1;
    cbr i1 %985(prob = 0.5), ^if.then79, ^b108;
  ^b101:
    i32 %986 = phi [^while.body47, i32 %929] [^if.then75, i32 %964];
    i32 %987 = add i32 %928, i32 1;
    i1 %988 = icmp slt i32 %987, i32 16;
    i32 %989 = sdiv i32 %930, i32 2;
    i32 %990 = sdiv i32 %931, i32 2;
    cbr i1 %988(prob = 0.9375), ^while.body47, ^b107;
  ^b102:
    i32 %991 = phi [^while.body48, i32 %935] [^if.then76, i32 %967];
    i32 %992 = add i32 %934, i32 1;
    i1 %993 = icmp slt i32 %992, i32 16;
    i32 %994 = sdiv i32 %936, i32 2;
    i32 %995 = sdiv i32 %937, i32 2;
    cbr i1 %993(prob = 0.9375), ^while.body48, ^b106;
  ^b103:
    i32 %996 = phi [^while.body49, i32 %941] [^if.then77, i32 %970];
    i32 %997 = add i32 %940, i32 1;
    i1 %998 = icmp slt i32 %997, i32 16;
    i32 %999 = sdiv i32 %942, i32 2;
    i32 %1000 = sdiv i32 %943, i32 2;
    cbr i1 %998(prob = 0.9375), ^while.body49, ^b105;
  ^while.body52:
    i32 %1001 = phi [^b92, i32 0] [^b109, i32 %1048];
    i32 %1002 = phi [^b92, i32 0] [^b109, i32 %1047];
    i32 %1003 = phi [^b92, i32 %667] [^b109, i32 %1050];
    i32 %1004 = phi [^b92, i32 %668] [^b109, i32 %1051];
    i32 %1005 = and i32 %1003, i32 %1004;
    i1 %1006 = ztrunc i32 %1005 to i1;
    cbr i1 %1006(prob = 0.5), ^if.then80, ^b109;
  ^b104:
    i32 %1007 = phi [^while.body50, i32 %959] [^if.then78, i32 %979];
    i32 %1008 = add i32 %956, i32 1;
    i1 %1009 = icmp slt i32 %1008, i32 16;
    i32 %1010 = sdiv i32 %957, i32 2;
    i32 %1011 = sdiv i32 %958, i32 2;
    cbr i1 %1009(prob = 0.9375), ^while.body50, ^while.header21;
  ^if.then79:
    i32* %1012 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %980];
    i32 %1013 = load i32* %1012;
    i32 %1014 = add i32 %983, i32 %1013;
    ubr ^b108;
  ^if.then80:
    i32* %1015 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1001];
    i32 %1016 = load i32* %1015;
    i32 %1017 = add i32 %1002, i32 %1016;
    ubr ^b109;
  ^b105:
    i32 %1018 = load i32* %1;
    i32 %1019 = mul i32 %996, i32 %1018;
    ubr ^while.body56;
  ^b106:
    i32 %1020 = load i32* %1;
    i32 %1021 = mul i32 %991, i32 %1020;
    ubr ^while.body57;
  ^b107:
    i32 %1022 = load i32* %1;
    i32 %1023 = mul i32 %986, i32 %1022;
    ubr ^while.body58;
  ^b108:
    i32 %1024 = phi [^while.body51, i32 %983] [^if.then79, i32 %1014];
    i32 %1025 = add i32 %980, i32 1;
    i1 %1026 = icmp slt i32 %1025, i32 16;
    i32 %1027 = sdiv i32 %981, i32 2;
    i32 %1028 = sdiv i32 %982, i32 2;
    cbr i1 %1026(prob = 0.9375), ^while.body51, ^while.header22;
  ^while.body53:
    i32 %1029 = phi [^b98, i32 0] [^b111, i32 %1064];
    i32 %1030 = phi [^b98, i32 0] [^b111, i32 %1063];
    i32 %1031 = phi [^b98, i32 %972] [^b111, i32 %1066];
    i32 %1032 = phi [^b98, i32 65535] [^b111, i32 %1067];
    i32 %1033 = and i32 %1031, i32 %1032;
    i1 %1034 = ztrunc i32 %1033 to i1;
    cbr i1 %1034(prob = 0.5), ^if.then81, ^b111;
  ^while.body54:
    i32 %1035 = phi [^b99, i32 0] [^b112, i32 %1069];
    i32 %1036 = phi [^b99, i32 %974] [^b112, i32 %1071];
    i32 %1037 = phi [^b99, i32 65535] [^b112, i32 %1072];
    i32 %1038 = phi [^b99, i32 0] [^b112, i32 %1068];
    i32 %1039 = and i32 %1036, i32 %1037;
    i1 %1040 = ztrunc i32 %1039 to i1;
    cbr i1 %1040(prob = 0.5), ^if.then82, ^b112;
  ^while.body55:
    i32 %1041 = phi [^b100, i32 0] [^b113, i32 %1074];
    i32 %1042 = phi [^b100, i32 %976] [^b113, i32 %1076];
    i32 %1043 = phi [^b100, i32 65535] [^b113, i32 %1077];
    i32 %1044 = phi [^b100, i32 0] [^b113, i32 %1073];
    i32 %1045 = and i32 %1042, i32 %1043;
    i1 %1046 = ztrunc i32 %1045 to i1;
    cbr i1 %1046(prob = 0.5), ^if.then83, ^b113;
  ^b109:
    i32 %1047 = phi [^while.body52, i32 %1002] [^if.then80, i32 %1017];
    i32 %1048 = add i32 %1001, i32 1;
    i1 %1049 = icmp slt i32 %1048, i32 16;
    i32 %1050 = sdiv i32 %1003, i32 2;
    i32 %1051 = sdiv i32 %1004, i32 2;
    cbr i1 %1049(prob = 0.9375), ^while.body52, ^b110;
  ^if.then81:
    i32* %1052 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1029];
    i32 %1053 = load i32* %1052;
    i32 %1054 = add i32 %1030, i32 %1053;
    ubr ^b111;
  ^if.then82:
    i32* %1055 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1035];
    i32 %1056 = load i32* %1055;
    i32 %1057 = add i32 %1038, i32 %1056;
    ubr ^b112;
  ^if.then83:
    i32* %1058 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1041];
    i32 %1059 = load i32* %1058;
    i32 %1060 = add i32 %1044, i32 %1059;
    ubr ^b113;
  ^b110:
    i32 %1061 = load i32* %1;
    i32 %1062 = mul i32 %1047, i32 %1061;
    ubr ^while.body59;
  ^b111:
    i32 %1063 = phi [^while.body53, i32 %1030] [^if.then81, i32 %1054];
    i32 %1064 = add i32 %1029, i32 1;
    i1 %1065 = icmp slt i32 %1064, i32 16;
    i32 %1066 = sdiv i32 %1031, i32 2;
    i32 %1067 = sdiv i32 %1032, i32 2;
    cbr i1 %1065(prob = 0.9375), ^while.body53, ^while.header25;
  ^b112:
    i32 %1068 = phi [^while.body54, i32 %1038] [^if.then82, i32 %1057];
    i32 %1069 = add i32 %1035, i32 1;
    i1 %1070 = icmp slt i32 %1069, i32 16;
    i32 %1071 = sdiv i32 %1036, i32 2;
    i32 %1072 = sdiv i32 %1037, i32 2;
    cbr i1 %1070(prob = 0.9375), ^while.body54, ^while.header24;
  ^b113:
    i32 %1073 = phi [^while.body55, i32 %1044] [^if.then83, i32 %1060];
    i32 %1074 = add i32 %1041, i32 1;
    i1 %1075 = icmp slt i32 %1074, i32 16;
    i32 %1076 = sdiv i32 %1042, i32 2;
    i32 %1077 = sdiv i32 %1043, i32 2;
    cbr i1 %1075(prob = 0.9375), ^while.body55, ^while.header23;
  ^while.body56:
    i32 %1078 = phi [^b105, i32 0] [^b114, i32 %1106];
    i32 %1079 = phi [^b105, i32 %1019] [^b114, i32 %1108];
    i32 %1080 = phi [^b105, i32 65535] [^b114, i32 %1109];
    i32 %1081 = phi [^b105, i32 0] [^b114, i32 %1105];
    i32 %1082 = and i32 %1079, i32 %1080;
    i1 %1083 = ztrunc i32 %1082 to i1;
    cbr i1 %1083(prob = 0.5), ^if.then84, ^b114;
  ^while.body57:
    i32 %1084 = phi [^b106, i32 0] [^b115, i32 %1111];
    i32 %1085 = phi [^b106, i32 %1021] [^b115, i32 %1113];
    i32 %1086 = phi [^b106, i32 65535] [^b115, i32 %1114];
    i32 %1087 = phi [^b106, i32 0] [^b115, i32 %1110];
    i32 %1088 = and i32 %1085, i32 %1086;
    i1 %1089 = ztrunc i32 %1088 to i1;
    cbr i1 %1089(prob = 0.5), ^if.then85, ^b115;
  ^while.body58:
    i32 %1090 = phi [^b107, i32 0] [^b116, i32 %1116];
    i32 %1091 = phi [^b107, i32 %1023] [^b116, i32 %1118];
    i32 %1092 = phi [^b107, i32 65535] [^b116, i32 %1119];
    i32 %1093 = phi [^b107, i32 0] [^b116, i32 %1115];
    i32 %1094 = and i32 %1091, i32 %1092;
    i1 %1095 = ztrunc i32 %1094 to i1;
    cbr i1 %1095(prob = 0.5), ^if.then86, ^b116;
  ^if.then84:
    i32* %1096 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1078];
    i32 %1097 = load i32* %1096;
    i32 %1098 = add i32 %1081, i32 %1097;
    ubr ^b114;
  ^if.then85:
    i32* %1099 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1084];
    i32 %1100 = load i32* %1099;
    i32 %1101 = add i32 %1087, i32 %1100;
    ubr ^b115;
  ^if.then86:
    i32* %1102 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1090];
    i32 %1103 = load i32* %1102;
    i32 %1104 = add i32 %1093, i32 %1103;
    ubr ^b116;
  ^b114:
    i32 %1105 = phi [^while.body56, i32 %1081] [^if.then84, i32 %1098];
    i32 %1106 = add i32 %1078, i32 1;
    i1 %1107 = icmp slt i32 %1106, i32 16;
    i32 %1108 = sdiv i32 %1079, i32 2;
    i32 %1109 = sdiv i32 %1080, i32 2;
    cbr i1 %1107(prob = 0.9375), ^while.body56, ^while.header28;
  ^b115:
    i32 %1110 = phi [^while.body57, i32 %1087] [^if.then85, i32 %1101];
    i32 %1111 = add i32 %1084, i32 1;
    i1 %1112 = icmp slt i32 %1111, i32 16;
    i32 %1113 = sdiv i32 %1085, i32 2;
    i32 %1114 = sdiv i32 %1086, i32 2;
    cbr i1 %1112(prob = 0.9375), ^while.body57, ^while.header27;
  ^b116:
    i32 %1115 = phi [^while.body58, i32 %1093] [^if.then86, i32 %1104];
    i32 %1116 = add i32 %1090, i32 1;
    i1 %1117 = icmp slt i32 %1116, i32 16;
    i32 %1118 = sdiv i32 %1091, i32 2;
    i32 %1119 = sdiv i32 %1092, i32 2;
    cbr i1 %1117(prob = 0.9375), ^while.body58, ^while.header26;
  ^while.body59:
    i32 %1120 = phi [^b110, i32 0] [^b117, i32 %1130];
    i32 %1121 = phi [^b110, i32 %1062] [^b117, i32 %1132];
    i32 %1122 = phi [^b110, i32 65535] [^b117, i32 %1133];
    i32 %1123 = phi [^b110, i32 0] [^b117, i32 %1129];
    i32 %1124 = and i32 %1121, i32 %1122;
    i1 %1125 = ztrunc i32 %1124 to i1;
    cbr i1 %1125(prob = 0.5), ^if.then87, ^b117;
  ^if.then87:
    i32* %1126 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1120];
    i32 %1127 = load i32* %1126;
    i32 %1128 = add i32 %1123, i32 %1127;
    ubr ^b117;
  ^b117:
    i32 %1129 = phi [^while.body59, i32 %1123] [^if.then87, i32 %1128];
    i32 %1130 = add i32 %1120, i32 1;
    i1 %1131 = icmp slt i32 %1130, i32 16;
    i32 %1132 = sdiv i32 %1121, i32 2;
    i32 %1133 = sdiv i32 %1122, i32 2;
    cbr i1 %1131(prob = 0.9375), ^while.body59, ^while.header29;
}
