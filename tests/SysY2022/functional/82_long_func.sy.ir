internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [16 * i32]* %SHIFT_TABLE = alloc [16 * i32];
    i32* %0 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 0];
    store i32* %0 with i32 1;
    i32* %1 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 1];
    store i32* %1 with i32 2;
    i32* %2 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 2];
    store i32* %2 with i32 4;
    i32* %3 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 3];
    store i32* %3 with i32 8;
    i32* %4 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 4];
    store i32* %4 with i32 16;
    i32* %5 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 5];
    store i32* %5 with i32 32;
    i32* %6 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 6];
    store i32* %6 with i32 64;
    i32* %7 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 7];
    store i32* %7 with i32 128;
    i32* %8 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 8];
    store i32* %8 with i32 256;
    i32* %9 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 9];
    store i32* %9 with i32 512;
    i32* %10 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 10];
    store i32* %10 with i32 1024;
    i32* %11 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 11];
    store i32* %11 with i32 2048;
    i32* %12 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 12];
    store i32* %12 with i32 4096;
    i32* %13 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 13];
    store i32* %13 with i32 8192;
    i32* %14 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 14];
    store i32* %14 with i32 16384;
    i32* %15 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 15];
    store i32* %15 with i32 32768;
    ubr ^while.header;
^while.header:
    i32 %16 = phi [^entry, i32 2] [^b21, i32 %62];
    i32 %17 = phi [^entry, i32 1] [^b21, i32 %34];
    i32 %18 = phi [^entry, i32 0] [^b21, i32 %134];
    i1 %19 = scmp gt i32 %18, i32 0;
    cbr i1 %19(prob = 0.97), ^while.header1, ^b;
^b:
    call (i32) -> void @putint(i32 %17);
    call (i32) -> void @putch(i32 10);
    ubr ^while.header2;
^while.header1:
    i32 %20 = phi [^while.header, i32 0] [^b6, i32 %51];
    i32 %21 = phi [^while.header, i32 1] [^b6, i32 %50];
    i32 %22 = phi [^while.header, i32 %18] [^b6, i32 %49];
    i32 %23 = phi [^while.header, i32 0] [^b6, i32 %48];
    i1 %24 = scmp lt i32 %20, i32 16;
    cbr i1 %24(prob = 0.97), ^while.body, ^b1;
^while.body:
    i32 %25 = srem i32 %22, i32 2;
    i1 %26 = scmp neq i32 %25, i32 0;
    cbr i1 %26(prob = 0.5), ^b2, ^b5;
^while.header2:
    i32 %27 = phi [^b, i32 2] [^b42, i32 %121];
    i32 %28 = phi [^b, i32 1] [^b42, i32 %68];
    i32 %29 = phi [^b, i32 1] [^b42, i32 %235];
    i1 %30 = scmp gt i32 %29, i32 0;
    cbr i1 %30(prob = 0.97), ^while.header3, ^b3;
^b1:
    i1 %31 = scmp neq i32 %23, i32 0;
    cbr i1 %31(prob = 0.5), ^while.header4, ^b4;
^b2:
    i32 %32 = srem i32 %21, i32 2;
    i1 %33 = scmp neq i32 %32, i32 0;
    ubr ^b5;
^b3:
    call (i32) -> void @putint(i32 %28);
    call (i32) -> void @putch(i32 10);
    ubr ^while.header6;
^b4:
    i32 %34 = phi [^b1, i32 %17] [^while.header4, i32 %42];
    ubr ^while.header7;
^b5:
    i1 %35 = phi [^while.body, i1 false] [^b2, i1 %33];
    cbr i1 %35(prob = 0.5), ^if.then, ^b6;
^while.header3:
    i32 %36 = phi [^while.header2, i32 0] [^b15, i32 %100];
    i32 %37 = phi [^while.header2, i32 1] [^b15, i32 %99];
    i32 %38 = phi [^while.header2, i32 %29] [^b15, i32 %98];
    i32 %39 = phi [^while.header2, i32 0] [^b15, i32 %97];
    i1 %40 = scmp lt i32 %36, i32 16;
    cbr i1 %40(prob = 0.97), ^while.body1, ^b7;
^while.header4:
    i32 %41 = phi [^b1, i32 %17] [^b53, i32 %157];
    i32 %42 = phi [^b1, i32 0] [^b53, i32 %101];
    i32 %43 = phi [^b1, i32 %16] [^b53, i32 %317];
    i1 %44 = scmp neq i32 %43, i32 0;
    cbr i1 %44(prob = 0.97), ^while.header5, ^b4;
^if.then:
    i32* %45 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %20];
    i32 %46 = load i32* %45;
    i32 %47 = add i32 %23, i32 %46;
    ubr ^b6;
^b6:
    i32 %48 = phi [^b5, i32 %23] [^if.then, i32 %47];
    i32 %49 = sdiv i32 %22, i32 2;
    i32 %50 = sdiv i32 %21, i32 2;
    i32 %51 = add i32 %20, i32 1;
    ubr ^while.header1;
^while.body1:
    i32 %52 = srem i32 %38, i32 2;
    i1 %53 = scmp neq i32 %52, i32 0;
    cbr i1 %53(prob = 0.5), ^b8, ^b10;
^while.header5:
    i32 %54 = phi [^while.header4, i32 0] [^b22, i32 %138];
    i32 %55 = phi [^while.header4, i32 0] [^b22, i32 %135];
    i32 %56 = phi [^while.header4, i32 1] [^b22, i32 %137];
    i32 %57 = phi [^while.header4, i32 %43] [^b22, i32 %136];
    i1 %58 = scmp lt i32 %54, i32 16;
    cbr i1 %58(prob = 0.97), ^while.body2, ^b11;
^while.header6:
    i32 %59 = phi [^b3, i32 2] [^b14, i32 %94];
    i1 %60 = scmp lt i32 %59, i32 16;
    cbr i1 %60(prob = 0.97), ^while.header8, ^while.header11;
^while.header7:
    i32 %61 = phi [^b4, i32 %16] [^b67, i32 %220];
    i32 %62 = phi [^b4, i32 0] [^b67, i32 %139];
    i32 %63 = phi [^b4, i32 %16] [^b67, i32 %418];
    i1 %64 = scmp neq i32 %63, i32 0;
    cbr i1 %64(prob = 0.97), ^while.header9, ^b12;
^b7:
    i1 %65 = scmp neq i32 %39, i32 0;
    cbr i1 %65(prob = 0.5), ^while.header10, ^b9;
^b8:
    i32 %66 = srem i32 %37, i32 2;
    i1 %67 = scmp neq i32 %66, i32 0;
    ubr ^b10;
^b9:
    i32 %68 = phi [^b7, i32 %28] [^while.header10, i32 %82];
    ubr ^while.header15;
^while.body2:
    i32 %69 = srem i32 %57, i32 2;
    i1 %70 = scmp neq i32 %69, i32 0;
    cbr i1 %70(prob = 0.5), ^b13, ^b17;
^b10:
    i1 %71 = phi [^while.body1, i1 false] [^b8, i1 %67];
    cbr i1 %71(prob = 0.5), ^if.then1, ^b15;
^while.header8:
    i32 %72 = phi [^while.header6, i32 2] [^b84, i32 %273];
    i32 %73 = phi [^while.header6, i32 %59] [^b84, i32 %515];
    i32 %74 = phi [^while.header6, i32 1] [^b84, i32 %181];
    i1 %75 = scmp gt i32 %73, i32 0;
    cbr i1 %75(prob = 0.97), ^while.header12, ^b14;
^while.header9:
    i32 %76 = phi [^while.header7, i32 0] [^b32, i32 %185];
    i32 %77 = phi [^while.header7, i32 1] [^b32, i32 %184];
    i32 %78 = phi [^while.header7, i32 %63] [^b32, i32 %183];
    i32 %79 = phi [^while.header7, i32 0] [^b32, i32 %182];
    i1 %80 = scmp lt i32 %76, i32 16;
    cbr i1 %80(prob = 0.97), ^while.body3, ^b18;
^while.header10:
    i32 %81 = phi [^b7, i32 %28] [^b86, i32 %281];
    i32 %82 = phi [^b7, i32 0] [^b86, i32 %186];
    i32 %83 = phi [^b7, i32 %27] [^b86, i32 %520];
    i1 %84 = scmp neq i32 %83, i32 0;
    cbr i1 %84(prob = 0.97), ^while.header13, ^b9;
^b11:
    i1 %85 = scmp neq i32 %55, i32 0;
    cbr i1 %85(prob = 0.5), ^while.header14, ^b16;
^b12:
    i1 %86 = scmp gt i32 %18, i32 32767;
    cbr i1 %86(prob = 0.5), ^if.then2, ^if.else;
^while.header11:
    i32 %87 = phi [^while.header6, i32 0] [^b35, i32 %193];
    i1 %88 = scmp lt i32 %87, i32 16;
    cbr i1 %88(prob = 0.97), ^while.header16, ^b19;
^b13:
    i32 %89 = srem i32 %56, i32 2;
    i1 %90 = scmp neq i32 %89, i32 0;
    ubr ^b17;
^if.then1:
    i32* %91 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %36];
    i32 %92 = load i32* %91;
    i32 %93 = add i32 %39, i32 %92;
    ubr ^b15;
^b14:
    call (i32) -> void @putint(i32 %74);
    call (i32) -> void @putch(i32 10);
    i32 %94 = add i32 %59, i32 1;
    ubr ^while.header6;
^if.then2:
    i32 %95 = sdiv i32 %18, i32 2;
    i32 %96 = add i32 %95, i32 32768;
    ubr ^b21;
^b15:
    i32 %97 = phi [^b10, i32 %39] [^if.then1, i32 %93];
    i32 %98 = sdiv i32 %38, i32 2;
    i32 %99 = sdiv i32 %37, i32 2;
    i32 %100 = add i32 %36, i32 1;
    ubr ^while.header3;
^b16:
    i32 %101 = phi [^b11, i32 %42] [^while.header14, i32 %117];
    ubr ^while.header19;
^if.else:
    i32 %102 = sdiv i32 %18, i32 2;
    ubr ^b21;
^while.body3:
    i32 %103 = srem i32 %78, i32 2;
    i1 %104 = scmp neq i32 %103, i32 0;
    cbr i1 %104(prob = 0.5), ^b20, ^b24;
^while.header12:
    i32 %105 = phi [^while.header8, i32 0] [^b43, i32 %239];
    i32 %106 = phi [^while.header8, i32 1] [^b43, i32 %238];
    i32 %107 = phi [^while.header8, i32 %73] [^b43, i32 %237];
    i32 %108 = phi [^while.header8, i32 0] [^b43, i32 %236];
    i1 %109 = scmp lt i32 %105, i32 16;
    cbr i1 %109(prob = 0.97), ^while.body4, ^b25;
^b17:
    i1 %110 = phi [^while.body2, i1 false] [^b13, i1 %90];
    cbr i1 %110(prob = 0.5), ^if.then3, ^b22;
^while.header13:
    i32 %111 = phi [^while.header10, i32 0] [^b44, i32 %245];
    i32 %112 = phi [^while.header10, i32 1] [^b44, i32 %244];
    i32 %113 = phi [^while.header10, i32 %83] [^b44, i32 %243];
    i32 %114 = phi [^while.header10, i32 0] [^b44, i32 %242];
    i1 %115 = scmp lt i32 %111, i32 16;
    cbr i1 %115(prob = 0.97), ^while.body5, ^b26;
^while.header14:
    i32 %116 = phi [^b11, i32 %41] [^while.header42, i32 %378];
    i32 %117 = phi [^b11, i32 %42] [^while.header42, i32 %144];
    i1 %118 = scmp neq i32 %116, i32 0;
    cbr i1 %118(prob = 0.97), ^while.header17, ^b16;
^while.header15:
    i32 %119 = phi [^b9, i32 %27] [^b108, i32 %382];
    i32 %120 = phi [^b9, i32 %27] [^b108, i32 %642];
    i32 %121 = phi [^b9, i32 0] [^b108, i32 %249];
    i1 %122 = scmp neq i32 %120, i32 0;
    cbr i1 %122(prob = 0.97), ^while.header18, ^b27;
^b18:
    i1 %123 = scmp neq i32 %79, i32 0;
    cbr i1 %123(prob = 0.5), ^while.header20, ^b23;
^while.header16:
    i32 %124 = phi [^while.header11, i32 2] [^b110, i32 %388];
    i32 %125 = phi [^while.header11, i32 %87] [^b110, i32 %647];
    i32 %126 = phi [^while.header11, i32 1] [^b110, i32 %250];
    i1 %127 = scmp gt i32 %125, i32 0;
    cbr i1 %127(prob = 0.97), ^while.header21, ^b28;
^b19:
    i32 %128 = phi [^while.header11, i32 0] [^b28, i32 1];
    ret i32 %128;
^b20:
    i32 %129 = srem i32 %77, i32 2;
    i1 %130 = scmp neq i32 %129, i32 0;
    ubr ^b24;
^if.then3:
    i32* %131 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %54];
    i32 %132 = load i32* %131;
    i32 %133 = add i32 %55, i32 %132;
    ubr ^b22;
^b21:
    i32 %134 = phi [^if.then2, i32 %96] [^if.else, i32 %102];
    ubr ^while.header;
^b22:
    i32 %135 = phi [^b17, i32 %55] [^if.then3, i32 %133];
    i32 %136 = sdiv i32 %57, i32 2;
    i32 %137 = sdiv i32 %56, i32 2;
    i32 %138 = add i32 %54, i32 1;
    ubr ^while.header5;
^b23:
    i32 %139 = phi [^b18, i32 %62] [^while.header20, i32 %160];
    ubr ^while.header27;
^while.body4:
    i32 %140 = srem i32 %107, i32 2;
    i1 %141 = scmp neq i32 %140, i32 0;
    cbr i1 %141(prob = 0.5), ^b29, ^b34;
^while.body5:
    i32 %142 = srem i32 %113, i32 2;
    i1 %143 = scmp neq i32 %142, i32 0;
    cbr i1 %143(prob = 0.5), ^b30, ^b36;
^while.header17:
    i32 %144 = phi [^while.header14, i32 0] [^b51, i32 %305];
    i32 %145 = phi [^while.header14, i32 0] [^b51, i32 %308];
    i32 %146 = phi [^while.header14, i32 %116] [^b51, i32 %307];
    i32 %147 = phi [^while.header14, i32 %117] [^b51, i32 %306];
    i1 %148 = scmp lt i32 %145, i32 16;
    cbr i1 %148(prob = 0.97), ^while.body6, ^while.header26;
^b24:
    i1 %149 = phi [^while.body3, i1 false] [^b20, i1 %130];
    cbr i1 %149(prob = 0.5), ^if.then4, ^b32;
^while.header18:
    i32 %150 = phi [^while.header15, i32 0] [^b54, i32 %323];
    i32 %151 = phi [^while.header15, i32 1] [^b54, i32 %322];
    i32 %152 = phi [^while.header15, i32 %120] [^b54, i32 %321];
    i32 %153 = phi [^while.header15, i32 0] [^b54, i32 %320];
    i1 %154 = scmp lt i32 %150, i32 16;
    cbr i1 %154(prob = 0.97), ^while.body7, ^b37;
^b25:
    i1 %155 = scmp neq i32 %108, i32 0;
    cbr i1 %155(prob = 0.5), ^while.header22, ^b31;
^while.header19:
    i32 %156 = phi [^b16, i32 %41] [^while.header51, i32 %484];
    i32 %157 = phi [^b16, i32 %41] [^while.header51, i32 %204];
    i1 %158 = scmp neq i32 %156, i32 0;
    cbr i1 %158(prob = 0.97), ^while.header23, ^b38;
^while.header20:
    i32 %159 = phi [^b18, i32 %61] [^while.header52, i32 %487];
    i32 %160 = phi [^b18, i32 %62] [^while.header52, i32 %207];
    i1 %161 = scmp neq i32 %159, i32 0;
    cbr i1 %161(prob = 0.97), ^while.header24, ^b23;
^b26:
    i1 %162 = scmp neq i32 %114, i32 0;
    cbr i1 %162(prob = 0.5), ^while.header25, ^b33;
^while.header21:
    i32 %163 = phi [^while.header16, i32 0] [^b55, i32 %327];
    i32 %164 = phi [^while.header16, i32 0] [^b55, i32 %324];
    i32 %165 = phi [^while.header16, i32 1] [^b55, i32 %326];
    i32 %166 = phi [^while.header16, i32 %125] [^b55, i32 %325];
    i1 %167 = scmp lt i32 %163, i32 16;
    cbr i1 %167(prob = 0.97), ^while.body8, ^b39;
^b27:
    i1 %168 = scmp gt i32 %29, i32 32767;
    cbr i1 %168(prob = 0.5), ^if.then5, ^if.else1;
^b28:
    i32* %169 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %87];
    i32 %170 = load i32* %169;
    i1 %171 = scmp neq i32 %170, i32 %126;
    cbr i1 %171(prob = 0.5), ^b19, ^b35;
^b29:
    i32 %172 = srem i32 %106, i32 2;
    i1 %173 = scmp neq i32 %172, i32 0;
    ubr ^b34;
^b30:
    i32 %174 = srem i32 %112, i32 2;
    i1 %175 = scmp neq i32 %174, i32 0;
    ubr ^b36;
^if.then4:
    i32* %176 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %76];
    i32 %177 = load i32* %176;
    i32 %178 = add i32 %79, i32 %177;
    ubr ^b32;
^if.then5:
    i32 %179 = sdiv i32 %29, i32 2;
    i32 %180 = add i32 %179, i32 32768;
    ubr ^b42;
^b31:
    i32 %181 = phi [^b25, i32 %74] [^while.header22, i32 %197];
    ubr ^while.header30;
^b32:
    i32 %182 = phi [^b24, i32 %79] [^if.then4, i32 %178];
    i32 %183 = sdiv i32 %78, i32 2;
    i32 %184 = sdiv i32 %77, i32 2;
    i32 %185 = add i32 %76, i32 1;
    ubr ^while.header9;
^b33:
    i32 %186 = phi [^b26, i32 %82] [^while.header25, i32 %212];
    ubr ^while.header32;
^while.body6:
    i32 %187 = srem i32 %147, i32 2;
    i1 %188 = scmp neq i32 %187, i32 0;
    cbr i1 %188(prob = 0.5), ^if.then9, ^if.else3;
^if.else1:
    i32 %189 = sdiv i32 %29, i32 2;
    ubr ^b42;
^while.body7:
    i32 %190 = srem i32 %152, i32 2;
    i1 %191 = scmp neq i32 %190, i32 0;
    cbr i1 %191(prob = 0.5), ^b40, ^b48;
^b34:
    i1 %192 = phi [^while.body4, i1 false] [^b29, i1 %173];
    cbr i1 %192(prob = 0.5), ^if.then6, ^b43;
^b35:
    i32 %193 = add i32 %87, i32 1;
    ubr ^while.header11;
^b36:
    i1 %194 = phi [^while.body5, i1 false] [^b30, i1 %175];
    cbr i1 %194(prob = 0.5), ^if.then7, ^b44;
^while.header22:
    i32 %195 = phi [^b25, i32 %74] [^b140, i32 %567];
    i32 %196 = phi [^b25, i32 %72] [^b140, i32 %846];
    i32 %197 = phi [^b25, i32 0] [^b140, i32 %423];
    i1 %198 = scmp neq i32 %196, i32 0;
    cbr i1 %198(prob = 0.97), ^while.header28, ^b31;
^while.body8:
    i32 %199 = srem i32 %166, i32 2;
    i1 %200 = scmp neq i32 %199, i32 0;
    cbr i1 %200(prob = 0.5), ^b41, ^b49;
^while.header23:
    i32 %201 = phi [^while.header19, i32 0] [^b63, i32 %406];
    i32 %202 = phi [^while.header19, i32 %156] [^b63, i32 %405];
    i32 %203 = phi [^while.header19, i32 %157] [^b63, i32 %404];
    i32 %204 = phi [^while.header19, i32 0] [^b63, i32 %403];
    i1 %205 = scmp lt i32 %201, i32 16;
    cbr i1 %205(prob = 0.97), ^while.body9, ^while.header35;
^while.header24:
    i32 %206 = phi [^while.header20, i32 0] [^b64, i32 %410];
    i32 %207 = phi [^while.header20, i32 0] [^b64, i32 %407];
    i32 %208 = phi [^while.header20, i32 %159] [^b64, i32 %409];
    i32 %209 = phi [^while.header20, i32 %160] [^b64, i32 %408];
    i1 %210 = scmp lt i32 %206, i32 16;
    cbr i1 %210(prob = 0.97), ^while.body10, ^while.header36;
^while.header25:
    i32 %211 = phi [^b26, i32 %81] [^while.header57, i32 %591];
    i32 %212 = phi [^b26, i32 %82] [^while.header57, i32 %264];
    i1 %213 = scmp neq i32 %211, i32 0;
    cbr i1 %213(prob = 0.97), ^while.header29, ^b33;
^while.header26:
    i32 %214 = phi [^while.header17, i32 0] [^b69, i32 %429];
    i32 %215 = phi [^while.header17, i32 0] [^b69, i32 %426];
    i32 %216 = phi [^while.header17, i32 %116] [^b69, i32 %428];
    i32 %217 = phi [^while.header17, i32 %117] [^b69, i32 %427];
    i1 %218 = scmp lt i32 %214, i32 16;
    cbr i1 %218(prob = 0.97), ^while.body11, ^b45;
^while.header27:
    i32 %219 = phi [^b23, i32 %61] [^while.header59, i32 %601];
    i32 %220 = phi [^b23, i32 %61] [^while.header59, i32 %278];
    i1 %221 = scmp neq i32 %219, i32 0;
    cbr i1 %221(prob = 0.97), ^while.header31, ^b50;
^b37:
    i1 %222 = scmp neq i32 %153, i32 0;
    cbr i1 %222(prob = 0.5), ^while.header33, ^b46;
^b38:
    i1 %223 = scmp gt i32 %43, i32 32767;
    cbr i1 %223(prob = 0.5), ^if.then8, ^if.else2;
^b39:
    i1 %224 = scmp neq i32 %164, i32 0;
    cbr i1 %224(prob = 0.5), ^while.header34, ^b47;
^b40:
    i32 %225 = srem i32 %151, i32 2;
    i1 %226 = scmp neq i32 %225, i32 0;
    ubr ^b48;
^if.then6:
    i32* %227 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %105];
    i32 %228 = load i32* %227;
    i32 %229 = add i32 %108, i32 %228;
    ubr ^b43;
^if.then7:
    i32* %230 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %111];
    i32 %231 = load i32* %230;
    i32 %232 = add i32 %114, i32 %231;
    ubr ^b44;
^b41:
    i32 %233 = srem i32 %165, i32 2;
    i1 %234 = scmp neq i32 %233, i32 0;
    ubr ^b49;
^b42:
    i32 %235 = phi [^if.then5, i32 %180] [^if.else1, i32 %189];
    ubr ^while.header2;
^b43:
    i32 %236 = phi [^b34, i32 %108] [^if.then6, i32 %229];
    i32 %237 = sdiv i32 %107, i32 2;
    i32 %238 = sdiv i32 %106, i32 2;
    i32 %239 = add i32 %105, i32 1;
    ubr ^while.header12;
^if.then8:
    i32 %240 = sdiv i32 %43, i32 2;
    i32 %241 = add i32 %240, i32 32768;
    ubr ^b53;
^b44:
    i32 %242 = phi [^b36, i32 %114] [^if.then7, i32 %232];
    i32 %243 = sdiv i32 %113, i32 2;
    i32 %244 = sdiv i32 %112, i32 2;
    i32 %245 = add i32 %111, i32 1;
    ubr ^while.header13;
^if.then9:
    i32 %246 = srem i32 %146, i32 2;
    i1 %247 = scmp eq i32 %246, i32 0;
    cbr i1 %247(prob = 0.5), ^if.then10, ^b51;
^b45:
    i32 %248 = shl i32 %215, i32 1;
    ubr ^while.header42;
^b46:
    i32 %249 = phi [^b37, i32 %121] [^while.header33, i32 %284];
    ubr ^while.header43;
^b47:
    i32 %250 = phi [^b39, i32 %126] [^while.header34, i32 %288];
    ubr ^while.header44;
^if.else2:
    i32 %251 = sdiv i32 %43, i32 2;
    ubr ^b53;
^while.body9:
    i32 %252 = srem i32 %203, i32 2;
    i1 %253 = scmp neq i32 %252, i32 0;
    cbr i1 %253(prob = 0.5), ^if.then14, ^if.else5;
^while.body10:
    i32 %254 = srem i32 %209, i32 2;
    i1 %255 = scmp neq i32 %254, i32 0;
    cbr i1 %255(prob = 0.5), ^if.then15, ^if.else6;
^while.header28:
    i32 %256 = phi [^while.header22, i32 0] [^b88, i32 %526];
    i32 %257 = phi [^while.header22, i32 0] [^b88, i32 %523];
    i32 %258 = phi [^while.header22, i32 1] [^b88, i32 %525];
    i32 %259 = phi [^while.header22, i32 %196] [^b88, i32 %524];
    i1 %260 = scmp lt i32 %256, i32 16;
    cbr i1 %260(prob = 0.97), ^while.body12, ^b58;
^if.else3:
    i32 %261 = srem i32 %146, i32 2;
    i1 %262 = scmp neq i32 %261, i32 0;
    cbr i1 %262(prob = 0.5), ^if.then10, ^b51;
^while.header29:
    i32 %263 = phi [^while.header25, i32 0] [^b81, i32 %510];
    i32 %264 = phi [^while.header25, i32 0] [^b81, i32 %507];
    i32 %265 = phi [^while.header25, i32 %211] [^b81, i32 %509];
    i32 %266 = phi [^while.header25, i32 %212] [^b81, i32 %508];
    i1 %267 = scmp lt i32 %263, i32 16;
    cbr i1 %267(prob = 0.97), ^while.body13, ^while.header41;
^while.body11:
    i32 %268 = srem i32 %217, i32 2;
    i1 %269 = scmp neq i32 %268, i32 0;
    cbr i1 %269(prob = 0.5), ^b52, ^b59;
^b48:
    i1 %270 = phi [^while.body7, i1 false] [^b40, i1 %226];
    cbr i1 %270(prob = 0.5), ^if.then11, ^b54;
^while.header30:
    i32 %271 = phi [^b31, i32 %72] [^b159, i32 %697];
    i32 %272 = phi [^b31, i32 %72] [^b159, i32 %966];
    i32 %273 = phi [^b31, i32 0] [^b159, i32 %535];
    i1 %274 = scmp neq i32 %272, i32 0;
    cbr i1 %274(prob = 0.97), ^while.header37, ^b60;
^while.header31:
    i32 %275 = phi [^while.header27, i32 0] [^b85, i32 %519];
    i32 %276 = phi [^while.header27, i32 %219] [^b85, i32 %518];
    i32 %277 = phi [^while.header27, i32 %220] [^b85, i32 %517];
    i32 %278 = phi [^while.header27, i32 0] [^b85, i32 %516];
    i1 %279 = scmp lt i32 %275, i32 16;
    cbr i1 %279(prob = 0.97), ^while.body14, ^while.header45;
^while.header32:
    i32 %280 = phi [^b33, i32 %81] [^while.header67, i32 %718];
    i32 %281 = phi [^b33, i32 %81] [^while.header67, i32 %353];
    i1 %282 = scmp neq i32 %280, i32 0;
    cbr i1 %282(prob = 0.97), ^while.header38, ^b61;
^while.header33:
    i32 %283 = phi [^b37, i32 %119] [^while.header68, i32 %723];
    i32 %284 = phi [^b37, i32 %121] [^while.header68, i32 %358];
    i1 %285 = scmp neq i32 %283, i32 0;
    cbr i1 %285(prob = 0.97), ^while.header39, ^b46;
^b49:
    i1 %286 = phi [^while.body8, i1 false] [^b41, i1 %234];
    cbr i1 %286(prob = 0.5), ^if.then12, ^b55;
^while.header34:
    i32 %287 = phi [^b39, i32 %126] [^b161, i32 %708];
    i32 %288 = phi [^b39, i32 0] [^b161, i32 %550];
    i32 %289 = phi [^b39, i32 %124] [^b161, i32 %975];
    i1 %290 = scmp neq i32 %289, i32 0;
    cbr i1 %290(prob = 0.97), ^while.header40, ^b47;
^while.header35:
    i32 %291 = phi [^while.header23, i32 0] [^b90, i32 %545];
    i32 %292 = phi [^while.header23, i32 %156] [^b90, i32 %544];
    i32 %293 = phi [^while.header23, i32 %157] [^b90, i32 %543];
    i32 %294 = phi [^while.header23, i32 0] [^b90, i32 %542];
    i1 %295 = scmp lt i32 %291, i32 16;
    cbr i1 %295(prob = 0.97), ^while.body15, ^b56;
^while.header36:
    i32 %296 = phi [^while.header24, i32 0] [^b91, i32 %549];
    i32 %297 = phi [^while.header24, i32 %159] [^b91, i32 %548];
    i32 %298 = phi [^while.header24, i32 %160] [^b91, i32 %547];
    i32 %299 = phi [^while.header24, i32 0] [^b91, i32 %546];
    i1 %300 = scmp lt i32 %296, i32 16;
    cbr i1 %300(prob = 0.97), ^while.body16, ^b57;
^b50:
    i1 %301 = scmp gt i32 %63, i32 32767;
    cbr i1 %301(prob = 0.5), ^if.then13, ^if.else4;
^if.then10:
    i32* %302 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %145];
    i32 %303 = load i32* %302;
    i32 %304 = add i32 %144, i32 %303;
    ubr ^b51;
^b51:
    i32 %305 = phi [^if.then9, i32 %144] [^if.else3, i32 %144] [^if.then10, i32 %304];
    i32 %306 = sdiv i32 %147, i32 2;
    i32 %307 = sdiv i32 %146, i32 2;
    i32 %308 = add i32 %145, i32 1;
    ubr ^while.header17;
^b52:
    i32 %309 = srem i32 %216, i32 2;
    i1 %310 = scmp neq i32 %309, i32 0;
    ubr ^b59;
^if.then11:
    i32* %311 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %150];
    i32 %312 = load i32* %311;
    i32 %313 = add i32 %153, i32 %312;
    ubr ^b54;
^if.then12:
    i32* %314 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %163];
    i32 %315 = load i32* %314;
    i32 %316 = add i32 %164, i32 %315;
    ubr ^b55;
^b53:
    i32 %317 = phi [^if.then8, i32 %241] [^if.else2, i32 %251];
    ubr ^while.header4;
^if.then13:
    i32 %318 = sdiv i32 %63, i32 2;
    i32 %319 = add i32 %318, i32 32768;
    ubr ^b67;
^b54:
    i32 %320 = phi [^b48, i32 %153] [^if.then11, i32 %313];
    i32 %321 = sdiv i32 %152, i32 2;
    i32 %322 = sdiv i32 %151, i32 2;
    i32 %323 = add i32 %150, i32 1;
    ubr ^while.header18;
^b55:
    i32 %324 = phi [^b49, i32 %164] [^if.then12, i32 %316];
    i32 %325 = sdiv i32 %166, i32 2;
    i32 %326 = sdiv i32 %165, i32 2;
    i32 %327 = add i32 %163, i32 1;
    ubr ^while.header21;
^if.then14:
    i32 %328 = srem i32 %202, i32 2;
    i1 %329 = scmp eq i32 %328, i32 0;
    cbr i1 %329(prob = 0.5), ^if.then16, ^b63;
^if.then15:
    i32 %330 = srem i32 %208, i32 2;
    i1 %331 = scmp eq i32 %330, i32 0;
    cbr i1 %331(prob = 0.5), ^if.then17, ^b64;
^while.body12:
    i32 %332 = srem i32 %259, i32 2;
    i1 %333 = scmp neq i32 %332, i32 0;
    cbr i1 %333(prob = 0.5), ^b62, ^b71;
^while.body13:
    i32 %334 = srem i32 %266, i32 2;
    i1 %335 = scmp neq i32 %334, i32 0;
    cbr i1 %335(prob = 0.5), ^if.then21, ^if.else9;
^b56:
    i32 %336 = shl i32 %294, i32 1;
    ubr ^while.header51;
^b57:
    i32 %337 = shl i32 %299, i32 1;
    ubr ^while.header52;
^if.else4:
    i32 %338 = sdiv i32 %63, i32 2;
    ubr ^b67;
^while.body14:
    i32 %339 = srem i32 %277, i32 2;
    i1 %340 = scmp neq i32 %339, i32 0;
    cbr i1 %340(prob = 0.5), ^if.then22, ^if.else10;
^while.header37:
    i32 %341 = phi [^while.header30, i32 0] [^b109, i32 %646];
    i32 %342 = phi [^while.header30, i32 1] [^b109, i32 %645];
    i32 %343 = phi [^while.header30, i32 %272] [^b109, i32 %644];
    i32 %344 = phi [^while.header30, i32 0] [^b109, i32 %643];
    i1 %345 = scmp lt i32 %341, i32 16;
    cbr i1 %345(prob = 0.97), ^while.body17, ^b73;
^if.else5:
    i32 %346 = srem i32 %202, i32 2;
    i1 %347 = scmp neq i32 %346, i32 0;
    cbr i1 %347(prob = 0.5), ^if.then16, ^b63;
^if.else6:
    i32 %348 = srem i32 %208, i32 2;
    i1 %349 = scmp neq i32 %348, i32 0;
    cbr i1 %349(prob = 0.5), ^if.then17, ^b64;
^while.header38:
    i32 %350 = phi [^while.header32, i32 0] [^b102, i32 %620];
    i32 %351 = phi [^while.header32, i32 %280] [^b102, i32 %619];
    i32 %352 = phi [^while.header32, i32 %281] [^b102, i32 %618];
    i32 %353 = phi [^while.header32, i32 0] [^b102, i32 %617];
    i1 %354 = scmp lt i32 %350, i32 16;
    cbr i1 %354(prob = 0.97), ^while.body18, ^while.header49;
^while.header39:
    i32 %355 = phi [^while.header33, i32 0] [^b103, i32 %624];
    i32 %356 = phi [^while.header33, i32 %283] [^b103, i32 %623];
    i32 %357 = phi [^while.header33, i32 %284] [^b103, i32 %622];
    i32 %358 = phi [^while.header33, i32 0] [^b103, i32 %621];
    i1 %359 = scmp lt i32 %355, i32 16;
    cbr i1 %359(prob = 0.97), ^while.body19, ^while.header50;
^b58:
    i1 %360 = scmp neq i32 %257, i32 0;
    cbr i1 %360(prob = 0.5), ^while.header46, ^b68;
^while.body15:
    i32 %361 = srem i32 %293, i32 2;
    i1 %362 = scmp neq i32 %361, i32 0;
    cbr i1 %362(prob = 0.5), ^b65, ^b74;
^while.body16:
    i32 %363 = srem i32 %298, i32 2;
    i1 %364 = scmp neq i32 %363, i32 0;
    cbr i1 %364(prob = 0.5), ^b66, ^b75;
^while.header40:
    i32 %365 = phi [^while.header34, i32 0] [^b111, i32 %651];
    i32 %366 = phi [^while.header34, i32 1] [^b111, i32 %653];
    i32 %367 = phi [^while.header34, i32 %289] [^b111, i32 %652];
    i32 %368 = phi [^while.header34, i32 0] [^b111, i32 %654];
    i1 %369 = scmp lt i32 %368, i32 16;
    cbr i1 %369(prob = 0.97), ^while.body20, ^b76;
^b59:
    i1 %370 = phi [^while.body11, i1 false] [^b52, i1 %310];
    cbr i1 %370(prob = 0.5), ^if.then18, ^b69;
^while.header41:
    i32 %371 = phi [^while.header29, i32 %211] [^b112, i32 %657];
    i32 %372 = phi [^while.header29, i32 %212] [^b112, i32 %656];
    i32 %373 = phi [^while.header29, i32 0] [^b112, i32 %655];
    i32 %374 = phi [^while.header29, i32 0] [^b112, i32 %658];
    i1 %375 = scmp lt i32 %374, i32 16;
    cbr i1 %375(prob = 0.97), ^while.body21, ^b70;
^while.header42:
    i32 %376 = phi [^b45, i32 65535] [^b113, i32 %663];
    i32 %377 = phi [^b45, i32 %248] [^b113, i32 %662];
    i32 %378 = phi [^b45, i32 0] [^b113, i32 %661];
    i32 %379 = phi [^b45, i32 0] [^b113, i32 %664];
    i1 %380 = scmp lt i32 %379, i32 16;
    cbr i1 %380(prob = 0.97), ^while.body22, ^while.header14;
^while.header43:
    i32 %381 = phi [^b46, i32 %119] [^while.header76, i32 %833];
    i32 %382 = phi [^b46, i32 %119] [^while.header76, i32 %459];
    i1 %383 = scmp neq i32 %381, i32 0;
    cbr i1 %383(prob = 0.97), ^while.header47, ^b77;
^b60:
    i1 %384 = scmp gt i32 %73, i32 32767;
    cbr i1 %384(prob = 0.5), ^if.then19, ^if.else7;
^b61:
    i1 %385 = scmp gt i32 %83, i32 32767;
    cbr i1 %385(prob = 0.5), ^if.then20, ^if.else8;
^while.header44:
    i32 %386 = phi [^b47, i32 %124] [^b179, i32 %827];
    i32 %387 = phi [^b47, i32 %124] [^b179, i32 %1081];
    i32 %388 = phi [^b47, i32 0] [^b179, i32 %671];
    i1 %389 = scmp neq i32 %387, i32 0;
    cbr i1 %389(prob = 0.97), ^while.header48, ^b78;
^while.header45:
    i32 %390 = phi [^while.header31, i32 0] [^b114, i32 %670];
    i32 %391 = phi [^while.header31, i32 %219] [^b114, i32 %669];
    i32 %392 = phi [^while.header31, i32 %220] [^b114, i32 %668];
    i32 %393 = phi [^while.header31, i32 0] [^b114, i32 %667];
    i1 %394 = scmp lt i32 %390, i32 16;
    cbr i1 %394(prob = 0.97), ^while.body23, ^b72;
^if.then16:
    i32* %395 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %201];
    i32 %396 = load i32* %395;
    i32 %397 = add i32 %204, i32 %396;
    ubr ^b63;
^if.then17:
    i32* %398 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %206];
    i32 %399 = load i32* %398;
    i32 %400 = add i32 %207, i32 %399;
    ubr ^b64;
^b62:
    i32 %401 = srem i32 %258, i32 2;
    i1 %402 = scmp neq i32 %401, i32 0;
    ubr ^b71;
^b63:
    i32 %403 = phi [^if.then14, i32 %204] [^if.else5, i32 %204] [^if.then16, i32 %397];
    i32 %404 = sdiv i32 %203, i32 2;
    i32 %405 = sdiv i32 %202, i32 2;
    i32 %406 = add i32 %201, i32 1;
    ubr ^while.header23;
^b64:
    i32 %407 = phi [^if.then15, i32 %207] [^if.else6, i32 %207] [^if.then17, i32 %400];
    i32 %408 = sdiv i32 %209, i32 2;
    i32 %409 = sdiv i32 %208, i32 2;
    i32 %410 = add i32 %206, i32 1;
    ubr ^while.header24;
^b65:
    i32 %411 = srem i32 %292, i32 2;
    i1 %412 = scmp neq i32 %411, i32 0;
    ubr ^b74;
^b66:
    i32 %413 = srem i32 %297, i32 2;
    i1 %414 = scmp neq i32 %413, i32 0;
    ubr ^b75;
^if.then18:
    i32* %415 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %214];
    i32 %416 = load i32* %415;
    i32 %417 = add i32 %215, i32 %416;
    ubr ^b69;
^b67:
    i32 %418 = phi [^if.then13, i32 %319] [^if.else4, i32 %338];
    ubr ^while.header7;
^if.then19:
    i32 %419 = sdiv i32 %73, i32 2;
    i32 %420 = add i32 %419, i32 32768;
    ubr ^b84;
^if.then20:
    i32 %421 = sdiv i32 %83, i32 2;
    i32 %422 = add i32 %421, i32 32768;
    ubr ^b86;
^b68:
    i32 %423 = phi [^b58, i32 %197] [^while.header46, i32 %445];
    ubr ^while.header54;
^if.then21:
    i32 %424 = srem i32 %265, i32 2;
    i1 %425 = scmp eq i32 %424, i32 0;
    cbr i1 %425(prob = 0.5), ^if.then23, ^b81;
^b69:
    i32 %426 = phi [^b59, i32 %215] [^if.then18, i32 %417];
    i32 %427 = sdiv i32 %217, i32 2;
    i32 %428 = sdiv i32 %216, i32 2;
    i32 %429 = add i32 %214, i32 1;
    ubr ^while.header26;
^b70:
    i32 %430 = shl i32 %373, i32 1;
    ubr ^while.header57;
^if.else7:
    i32 %431 = sdiv i32 %73, i32 2;
    ubr ^b84;
^if.then22:
    i32 %432 = srem i32 %276, i32 2;
    i1 %433 = scmp eq i32 %432, i32 0;
    cbr i1 %433(prob = 0.5), ^if.then24, ^b85;
^while.body17:
    i32 %434 = srem i32 %343, i32 2;
    i1 %435 = scmp neq i32 %434, i32 0;
    cbr i1 %435(prob = 0.5), ^b79, ^b95;
^if.else8:
    i32 %436 = sdiv i32 %83, i32 2;
    ubr ^b86;
^while.body18:
    i32 %437 = srem i32 %352, i32 2;
    i1 %438 = scmp neq i32 %437, i32 0;
    cbr i1 %438(prob = 0.5), ^if.then30, ^if.else13;
^while.body19:
    i32 %439 = srem i32 %357, i32 2;
    i1 %440 = scmp neq i32 %439, i32 0;
    cbr i1 %440(prob = 0.5), ^if.then31, ^if.else14;
^b71:
    i1 %441 = phi [^while.body12, i1 false] [^b62, i1 %402];
    cbr i1 %441(prob = 0.5), ^if.then25, ^b88;
^b72:
    i32 %442 = shl i32 %393, i32 1;
    ubr ^while.header59;
^if.else9:
    i32 %443 = srem i32 %265, i32 2;
    i1 %444 = scmp neq i32 %443, i32 0;
    cbr i1 %444(prob = 0.5), ^if.then23, ^b81;
^while.header46:
    i32 %445 = phi [^b58, i32 %197] [^while.header77, i32 %555];
    i32 %446 = phi [^b58, i32 %195] [^while.header77, i32 %904];
    i1 %447 = scmp neq i32 %446, i32 0;
    cbr i1 %447(prob = 0.97), ^while.header53, ^b68;
^while.body20:
    i32 %448 = srem i32 %367, i32 2;
    i1 %449 = scmp neq i32 %448, i32 0;
    cbr i1 %449(prob = 0.5), ^b80, ^b96;
^while.body21:
    i32 %450 = srem i32 %372, i32 2;
    i1 %451 = scmp neq i32 %450, i32 0;
    cbr i1 %451(prob = 0.5), ^b82, ^b97;
^while.body22:
    i32 %452 = srem i32 %377, i32 2;
    i1 %453 = scmp neq i32 %452, i32 0;
    cbr i1 %453(prob = 0.5), ^b83, ^b98;
^if.else10:
    i32 %454 = srem i32 %276, i32 2;
    i1 %455 = scmp neq i32 %454, i32 0;
    cbr i1 %455(prob = 0.5), ^if.then24, ^b85;
^while.header47:
    i32 %456 = phi [^while.header43, i32 0] [^b124, i32 %734];
    i32 %457 = phi [^while.header43, i32 %381] [^b124, i32 %733];
    i32 %458 = phi [^while.header43, i32 %382] [^b124, i32 %732];
    i32 %459 = phi [^while.header43, i32 0] [^b124, i32 %731];
    i1 %460 = scmp lt i32 %456, i32 16;
    cbr i1 %460(prob = 0.97), ^while.body24, ^while.header58;
^b73:
    i1 %461 = scmp neq i32 %344, i32 0;
    cbr i1 %461(prob = 0.5), ^while.header55, ^b89;
^while.body23:
    i32 %462 = srem i32 %392, i32 2;
    i1 %463 = scmp neq i32 %462, i32 0;
    cbr i1 %463(prob = 0.5), ^b87, ^b99;
^while.header48:
    i32 %464 = phi [^while.header44, i32 1] [^b128, i32 %761];
    i32 %465 = phi [^while.header44, i32 %387] [^b128, i32 %760];
    i32 %466 = phi [^while.header44, i32 0] [^b128, i32 %759];
    i32 %467 = phi [^while.header44, i32 0] [^b128, i32 %762];
    i1 %468 = scmp lt i32 %467, i32 16;
    cbr i1 %468(prob = 0.97), ^while.body25, ^b100;
^b74:
    i1 %469 = phi [^while.body15, i1 false] [^b65, i1 %412];
    cbr i1 %469(prob = 0.5), ^if.then26, ^b90;
^b75:
    i1 %470 = phi [^while.body16, i1 false] [^b66, i1 %414];
    cbr i1 %470(prob = 0.5), ^if.then27, ^b91;
^while.header49:
    i32 %471 = phi [^while.header38, i32 %280] [^b129, i32 %766];
    i32 %472 = phi [^while.header38, i32 %281] [^b129, i32 %765];
    i32 %473 = phi [^while.header38, i32 0] [^b129, i32 %764];
    i32 %474 = phi [^while.header38, i32 0] [^b129, i32 %767];
    i1 %475 = scmp lt i32 %474, i32 16;
    cbr i1 %475(prob = 0.97), ^while.body26, ^b93;
^while.header50:
    i32 %476 = phi [^while.header39, i32 %283] [^b130, i32 %770];
    i32 %477 = phi [^while.header39, i32 %284] [^b130, i32 %769];
    i32 %478 = phi [^while.header39, i32 0] [^b130, i32 %768];
    i32 %479 = phi [^while.header39, i32 0] [^b130, i32 %771];
    i1 %480 = scmp lt i32 %479, i32 16;
    cbr i1 %480(prob = 0.97), ^while.body27, ^b94;
^b76:
    i1 %481 = scmp neq i32 %365, i32 0;
    cbr i1 %481(prob = 0.5), ^while.header56, ^b92;
^while.header51:
    i32 %482 = phi [^b56, i32 65535] [^b131, i32 %778];
    i32 %483 = phi [^b56, i32 %336] [^b131, i32 %777];
    i32 %484 = phi [^b56, i32 0] [^b131, i32 %776];
    i32 %485 = phi [^b56, i32 0] [^b131, i32 %779];
    i1 %486 = scmp lt i32 %485, i32 16;
    cbr i1 %486(prob = 0.97), ^while.body28, ^while.header19;
^while.header52:
    i32 %487 = phi [^b57, i32 0] [^b132, i32 %780];
    i32 %488 = phi [^b57, i32 65535] [^b132, i32 %782];
    i32 %489 = phi [^b57, i32 %337] [^b132, i32 %781];
    i32 %490 = phi [^b57, i32 0] [^b132, i32 %783];
    i1 %491 = scmp lt i32 %490, i32 16;
    cbr i1 %491(prob = 0.97), ^while.body29, ^while.header20;
^b77:
    i1 %492 = scmp gt i32 %120, i32 32767;
    cbr i1 %492(prob = 0.5), ^if.then28, ^if.else11;
^b78:
    i1 %493 = scmp gt i32 %125, i32 32767;
    cbr i1 %493(prob = 0.5), ^if.then29, ^if.else12;
^if.then23:
    i32* %494 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %263];
    i32 %495 = load i32* %494;
    i32 %496 = add i32 %264, i32 %495;
    ubr ^b81;
^if.then24:
    i32* %497 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %275];
    i32 %498 = load i32* %497;
    i32 %499 = add i32 %278, i32 %498;
    ubr ^b85;
^b79:
    i32 %500 = srem i32 %342, i32 2;
    i1 %501 = scmp neq i32 %500, i32 0;
    ubr ^b95;
^if.then25:
    i32* %502 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %256];
    i32 %503 = load i32* %502;
    i32 %504 = add i32 %257, i32 %503;
    ubr ^b88;
^b80:
    i32 %505 = srem i32 %366, i32 2;
    i1 %506 = scmp neq i32 %505, i32 0;
    ubr ^b96;
^b81:
    i32 %507 = phi [^if.then21, i32 %264] [^if.else9, i32 %264] [^if.then23, i32 %496];
    i32 %508 = sdiv i32 %266, i32 2;
    i32 %509 = sdiv i32 %265, i32 2;
    i32 %510 = add i32 %263, i32 1;
    ubr ^while.header29;
^b82:
    i32 %511 = srem i32 %371, i32 2;
    i1 %512 = scmp neq i32 %511, i32 0;
    ubr ^b97;
^b83:
    i32 %513 = srem i32 %376, i32 2;
    i1 %514 = scmp neq i32 %513, i32 0;
    ubr ^b98;
^b84:
    i32 %515 = phi [^if.then19, i32 %420] [^if.else7, i32 %431];
    ubr ^while.header8;
^b85:
    i32 %516 = phi [^if.then22, i32 %278] [^if.else10, i32 %278] [^if.then24, i32 %499];
    i32 %517 = sdiv i32 %277, i32 2;
    i32 %518 = sdiv i32 %276, i32 2;
    i32 %519 = add i32 %275, i32 1;
    ubr ^while.header31;
^b86:
    i32 %520 = phi [^if.then20, i32 %422] [^if.else8, i32 %436];
    ubr ^while.header10;
^b87:
    i32 %521 = srem i32 %391, i32 2;
    i1 %522 = scmp neq i32 %521, i32 0;
    ubr ^b99;
^b88:
    i32 %523 = phi [^b71, i32 %257] [^if.then25, i32 %504];
    i32 %524 = sdiv i32 %259, i32 2;
    i32 %525 = sdiv i32 %258, i32 2;
    i32 %526 = add i32 %256, i32 1;
    ubr ^while.header28;
^if.then26:
    i32* %527 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %291];
    i32 %528 = load i32* %527;
    i32 %529 = add i32 %294, i32 %528;
    ubr ^b90;
^if.then27:
    i32* %530 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %296];
    i32 %531 = load i32* %530;
    i32 %532 = add i32 %299, i32 %531;
    ubr ^b91;
^if.then28:
    i32 %533 = sdiv i32 %120, i32 2;
    i32 %534 = add i32 %533, i32 32768;
    ubr ^b108;
^b89:
    i32 %535 = phi [^b73, i32 %273] [^while.header55, i32 %570];
    ubr ^while.header64;
^if.then29:
    i32 %536 = sdiv i32 %125, i32 2;
    i32 %537 = add i32 %536, i32 32768;
    ubr ^b110;
^if.then30:
    i32 %538 = srem i32 %351, i32 2;
    i1 %539 = scmp eq i32 %538, i32 0;
    cbr i1 %539(prob = 0.5), ^if.then32, ^b102;
^if.then31:
    i32 %540 = srem i32 %356, i32 2;
    i1 %541 = scmp eq i32 %540, i32 0;
    cbr i1 %541(prob = 0.5), ^if.then33, ^b103;
^b90:
    i32 %542 = phi [^b74, i32 %294] [^if.then26, i32 %529];
    i32 %543 = sdiv i32 %293, i32 2;
    i32 %544 = sdiv i32 %292, i32 2;
    i32 %545 = add i32 %291, i32 1;
    ubr ^while.header35;
^b91:
    i32 %546 = phi [^b75, i32 %299] [^if.then27, i32 %532];
    i32 %547 = sdiv i32 %298, i32 2;
    i32 %548 = sdiv i32 %297, i32 2;
    i32 %549 = add i32 %296, i32 1;
    ubr ^while.header36;
^b92:
    i32 %550 = phi [^b76, i32 %288] [^while.header56, i32 %585];
    ubr ^while.header65;
^b93:
    i32 %551 = shl i32 %473, i32 1;
    ubr ^while.header67;
^b94:
    i32 %552 = shl i32 %478, i32 1;
    ubr ^while.header68;
^while.header53:
    i32 %553 = phi [^while.header46, i32 %446] [^b138, i32 %842];
    i32 %554 = phi [^while.header46, i32 %445] [^b138, i32 %841];
    i32 %555 = phi [^while.header46, i32 0] [^b138, i32 %840];
    i32 %556 = phi [^while.header46, i32 0] [^b138, i32 %843];
    i1 %557 = scmp lt i32 %556, i32 16;
    cbr i1 %557(prob = 0.97), ^while.body30, ^while.header62;
^if.else11:
    i32 %558 = sdiv i32 %120, i32 2;
    ubr ^b108;
^while.body24:
    i32 %559 = srem i32 %458, i32 2;
    i1 %560 = scmp neq i32 %559, i32 0;
    cbr i1 %560(prob = 0.5), ^if.then39, ^if.else15;
^b95:
    i1 %561 = phi [^while.body17, i1 false] [^b79, i1 %501];
    cbr i1 %561(prob = 0.5), ^if.then34, ^b109;
^if.else12:
    i32 %562 = sdiv i32 %125, i32 2;
    ubr ^b110;
^if.else13:
    i32 %563 = srem i32 %351, i32 2;
    i1 %564 = scmp neq i32 %563, i32 0;
    cbr i1 %564(prob = 0.5), ^if.then32, ^b102;
^if.else14:
    i32 %565 = srem i32 %356, i32 2;
    i1 %566 = scmp neq i32 %565, i32 0;
    cbr i1 %566(prob = 0.5), ^if.then33, ^b103;
^while.header54:
    i32 %567 = phi [^b68, i32 %195] [^while.header82, i32 %675];
    i32 %568 = phi [^b68, i32 %195] [^while.header82, i32 %1014];
    i1 %569 = scmp neq i32 %568, i32 0;
    cbr i1 %569(prob = 0.97), ^while.header60, ^b117;
^while.header55:
    i32 %570 = phi [^b73, i32 %273] [^while.header83, i32 %680];
    i32 %571 = phi [^b73, i32 %271] [^while.header83, i32 %1021];
    i1 %572 = scmp neq i32 %571, i32 0;
    cbr i1 %572(prob = 0.97), ^while.header61, ^b89;
^while.body25:
    i32 %573 = srem i32 %465, i32 2;
    i1 %574 = scmp neq i32 %573, i32 0;
    cbr i1 %574(prob = 0.5), ^b101, ^b118;
^while.body26:
    i32 %575 = srem i32 %472, i32 2;
    i1 %576 = scmp neq i32 %575, i32 0;
    cbr i1 %576(prob = 0.5), ^b104, ^b119;
^while.body27:
    i32 %577 = srem i32 %477, i32 2;
    i1 %578 = scmp neq i32 %577, i32 0;
    cbr i1 %578(prob = 0.5), ^b105, ^b120;
^b96:
    i1 %579 = phi [^while.body20, i1 false] [^b80, i1 %506];
    cbr i1 %579(prob = 0.5), ^if.then35, ^b111;
^while.body28:
    i32 %580 = srem i32 %483, i32 2;
    i1 %581 = scmp neq i32 %580, i32 0;
    cbr i1 %581(prob = 0.5), ^b106, ^b121;
^while.body29:
    i32 %582 = srem i32 %489, i32 2;
    i1 %583 = scmp neq i32 %582, i32 0;
    cbr i1 %583(prob = 0.5), ^b107, ^b122;
^b97:
    i1 %584 = phi [^while.body21, i1 false] [^b82, i1 %512];
    cbr i1 %584(prob = 0.5), ^if.then36, ^b112;
^while.header56:
    i32 %585 = phi [^b76, i32 %288] [^while.header84, i32 %690];
    i32 %586 = phi [^b76, i32 %287] [^while.header84, i32 %1031];
    i1 %587 = scmp neq i32 %586, i32 0;
    cbr i1 %587(prob = 0.97), ^while.header63, ^b92;
^b98:
    i1 %588 = phi [^while.body22, i1 false] [^b83, i1 %514];
    cbr i1 %588(prob = 0.5), ^if.then37, ^b113;
^while.header57:
    i32 %589 = phi [^b70, i32 65535] [^b145, i32 %872];
    i32 %590 = phi [^b70, i32 %430] [^b145, i32 %871];
    i32 %591 = phi [^b70, i32 0] [^b145, i32 %870];
    i32 %592 = phi [^b70, i32 0] [^b145, i32 %873];
    i1 %593 = scmp lt i32 %592, i32 16;
    cbr i1 %593(prob = 0.97), ^while.body31, ^while.header25;
^b99:
    i1 %594 = phi [^while.body23, i1 false] [^b87, i1 %522];
    cbr i1 %594(prob = 0.5), ^if.then38, ^b114;
^while.header58:
    i32 %595 = phi [^while.header47, i32 0] [^b147, i32 %878];
    i32 %596 = phi [^while.header47, i32 %381] [^b147, i32 %880];
    i32 %597 = phi [^while.header47, i32 %382] [^b147, i32 %879];
    i32 %598 = phi [^while.header47, i32 0] [^b147, i32 %881];
    i1 %599 = scmp lt i32 %598, i32 16;
    cbr i1 %599(prob = 0.97), ^while.body32, ^b116;
^b100:
    i1 %600 = scmp neq i32 %466, i32 0;
    cbr i1 %600(prob = 0.5), ^while.header66, ^b115;
^while.header59:
    i32 %601 = phi [^b72, i32 0] [^b148, i32 %884];
    i32 %602 = phi [^b72, i32 65535] [^b148, i32 %886];
    i32 %603 = phi [^b72, i32 %442] [^b148, i32 %885];
    i32 %604 = phi [^b72, i32 0] [^b148, i32 %887];
    i1 %605 = scmp lt i32 %604, i32 16;
    cbr i1 %605(prob = 0.97), ^while.body33, ^while.header27;
^if.then32:
    i32* %606 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %350];
    i32 %607 = load i32* %606;
    i32 %608 = add i32 %353, i32 %607;
    ubr ^b102;
^if.then33:
    i32* %609 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %355];
    i32 %610 = load i32* %609;
    i32 %611 = add i32 %358, i32 %610;
    ubr ^b103;
^if.then34:
    i32* %612 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %341];
    i32 %613 = load i32* %612;
    i32 %614 = add i32 %344, i32 %613;
    ubr ^b109;
^b101:
    i32 %615 = srem i32 %464, i32 2;
    i1 %616 = scmp neq i32 %615, i32 0;
    ubr ^b118;
^b102:
    i32 %617 = phi [^if.then30, i32 %353] [^if.else13, i32 %353] [^if.then32, i32 %608];
    i32 %618 = sdiv i32 %352, i32 2;
    i32 %619 = sdiv i32 %351, i32 2;
    i32 %620 = add i32 %350, i32 1;
    ubr ^while.header38;
^b103:
    i32 %621 = phi [^if.then31, i32 %358] [^if.else14, i32 %358] [^if.then33, i32 %611];
    i32 %622 = sdiv i32 %357, i32 2;
    i32 %623 = sdiv i32 %356, i32 2;
    i32 %624 = add i32 %355, i32 1;
    ubr ^while.header39;
^b104:
    i32 %625 = srem i32 %471, i32 2;
    i1 %626 = scmp neq i32 %625, i32 0;
    ubr ^b119;
^b105:
    i32 %627 = srem i32 %476, i32 2;
    i1 %628 = scmp neq i32 %627, i32 0;
    ubr ^b120;
^if.then35:
    i32* %629 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %368];
    i32 %630 = load i32* %629;
    i32 %631 = add i32 %365, i32 %630;
    ubr ^b111;
^b106:
    i32 %632 = srem i32 %482, i32 2;
    i1 %633 = scmp neq i32 %632, i32 0;
    ubr ^b121;
^b107:
    i32 %634 = srem i32 %488, i32 2;
    i1 %635 = scmp neq i32 %634, i32 0;
    ubr ^b122;
^if.then36:
    i32* %636 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %374];
    i32 %637 = load i32* %636;
    i32 %638 = add i32 %373, i32 %637;
    ubr ^b112;
^if.then37:
    i32* %639 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %379];
    i32 %640 = load i32* %639;
    i32 %641 = add i32 %378, i32 %640;
    ubr ^b113;
^b108:
    i32 %642 = phi [^if.then28, i32 %534] [^if.else11, i32 %558];
    ubr ^while.header15;
^b109:
    i32 %643 = phi [^b95, i32 %344] [^if.then34, i32 %614];
    i32 %644 = sdiv i32 %343, i32 2;
    i32 %645 = sdiv i32 %342, i32 2;
    i32 %646 = add i32 %341, i32 1;
    ubr ^while.header37;
^b110:
    i32 %647 = phi [^if.then29, i32 %537] [^if.else12, i32 %562];
    ubr ^while.header16;
^if.then38:
    i32* %648 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %390];
    i32 %649 = load i32* %648;
    i32 %650 = add i32 %393, i32 %649;
    ubr ^b114;
^b111:
    i32 %651 = phi [^b96, i32 %365] [^if.then35, i32 %631];
    i32 %652 = sdiv i32 %367, i32 2;
    i32 %653 = sdiv i32 %366, i32 2;
    i32 %654 = add i32 %368, i32 1;
    ubr ^while.header40;
^b112:
    i32 %655 = phi [^b97, i32 %373] [^if.then36, i32 %638];
    i32 %656 = sdiv i32 %372, i32 2;
    i32 %657 = sdiv i32 %371, i32 2;
    i32 %658 = add i32 %374, i32 1;
    ubr ^while.header41;
^while.body30:
    i32 %659 = srem i32 %554, i32 2;
    i1 %660 = scmp neq i32 %659, i32 0;
    cbr i1 %660(prob = 0.5), ^if.then47, ^if.else17;
^b113:
    i32 %661 = phi [^b98, i32 %378] [^if.then37, i32 %641];
    i32 %662 = sdiv i32 %377, i32 2;
    i32 %663 = sdiv i32 %376, i32 2;
    i32 %664 = add i32 %379, i32 1;
    ubr ^while.header42;
^if.then39:
    i32 %665 = srem i32 %457, i32 2;
    i1 %666 = scmp eq i32 %665, i32 0;
    cbr i1 %666(prob = 0.5), ^if.then40, ^b124;
^b114:
    i32 %667 = phi [^b99, i32 %393] [^if.then38, i32 %650];
    i32 %668 = sdiv i32 %392, i32 2;
    i32 %669 = sdiv i32 %391, i32 2;
    i32 %670 = add i32 %390, i32 1;
    ubr ^while.header45;
^b115:
    i32 %671 = phi [^b100, i32 %388] [^while.header66, i32 %711];
    ubr ^while.header75;
^b116:
    i32 %672 = shl i32 %595, i32 1;
    ubr ^while.header76;
^while.header60:
    i32 %673 = phi [^while.header54, i32 %568] [^b153, i32 %947];
    i32 %674 = phi [^while.header54, i32 %567] [^b153, i32 %946];
    i32 %675 = phi [^while.header54, i32 0] [^b153, i32 %945];
    i32 %676 = phi [^while.header54, i32 0] [^b153, i32 %948];
    i1 %677 = scmp lt i32 %676, i32 16;
    cbr i1 %677(prob = 0.97), ^while.body34, ^while.header70;
^while.header61:
    i32 %678 = phi [^while.header55, i32 %571] [^b154, i32 %951];
    i32 %679 = phi [^while.header55, i32 %570] [^b154, i32 %950];
    i32 %680 = phi [^while.header55, i32 0] [^b154, i32 %949];
    i32 %681 = phi [^while.header55, i32 0] [^b154, i32 %952];
    i1 %682 = scmp lt i32 %681, i32 16;
    cbr i1 %682(prob = 0.97), ^while.body35, ^while.header71;
^while.body31:
    i32 %683 = srem i32 %590, i32 2;
    i1 %684 = scmp neq i32 %683, i32 0;
    cbr i1 %684(prob = 0.5), ^b123, ^b133;
^while.header62:
    i32 %685 = phi [^while.header53, i32 0] [^b162, i32 %976];
    i32 %686 = phi [^while.header53, i32 %446] [^b162, i32 %978];
    i32 %687 = phi [^while.header53, i32 %445] [^b162, i32 %977];
    i32 %688 = phi [^while.header53, i32 0] [^b162, i32 %979];
    i1 %689 = scmp lt i32 %688, i32 16;
    cbr i1 %689(prob = 0.97), ^while.body36, ^b127;
^while.header63:
    i32 %690 = phi [^while.header56, i32 0] [^b157, i32 %960];
    i32 %691 = phi [^while.header56, i32 %586] [^b157, i32 %962];
    i32 %692 = phi [^while.header56, i32 %585] [^b157, i32 %961];
    i32 %693 = phi [^while.header56, i32 0] [^b157, i32 %963];
    i1 %694 = scmp lt i32 %693, i32 16;
    cbr i1 %694(prob = 0.97), ^while.body37, ^while.header74;
^if.else15:
    i32 %695 = srem i32 %457, i32 2;
    i1 %696 = scmp neq i32 %695, i32 0;
    cbr i1 %696(prob = 0.5), ^if.then40, ^b124;
^while.header64:
    i32 %697 = phi [^b89, i32 %271] [^while.header86, i32 %790];
    i32 %698 = phi [^b89, i32 %271] [^while.header86, i32 %1113];
    i1 %699 = scmp neq i32 %698, i32 0;
    cbr i1 %699(prob = 0.97), ^while.header69, ^b134;
^while.body32:
    i32 %700 = srem i32 %597, i32 2;
    i1 %701 = scmp neq i32 %700, i32 0;
    cbr i1 %701(prob = 0.5), ^b125, ^b135;
^b117:
    i1 %702 = scmp gt i32 %196, i32 32767;
    cbr i1 %702(prob = 0.5), ^if.then42, ^if.else16;
^b118:
    i1 %703 = phi [^while.body25, i1 false] [^b101, i1 %616];
    cbr i1 %703(prob = 0.5), ^if.then41, ^b128;
^while.body33:
    i32 %704 = srem i32 %603, i32 2;
    i1 %705 = scmp neq i32 %704, i32 0;
    cbr i1 %705(prob = 0.5), ^b126, ^b136;
^b119:
    i1 %706 = phi [^while.body26, i1 false] [^b104, i1 %626];
    cbr i1 %706(prob = 0.5), ^if.then43, ^b129;
^b120:
    i1 %707 = phi [^while.body27, i1 false] [^b105, i1 %628];
    cbr i1 %707(prob = 0.5), ^if.then44, ^b130;
^while.header65:
    i32 %708 = phi [^b92, i32 %287] [^while.header87, i32 %809];
    i32 %709 = phi [^b92, i32 %287] [^while.header87, i32 %1122];
    i1 %710 = scmp neq i32 %709, i32 0;
    cbr i1 %710(prob = 0.97), ^while.header72, ^b137;
^while.header66:
    i32 %711 = phi [^b100, i32 %388] [^while.header88, i32 %816];
    i32 %712 = phi [^b100, i32 %386] [^while.header88, i32 %1127];
    i1 %713 = scmp neq i32 %712, i32 0;
    cbr i1 %713(prob = 0.97), ^while.header73, ^b115;
^b121:
    i1 %714 = phi [^while.body28, i1 false] [^b106, i1 %633];
    cbr i1 %714(prob = 0.5), ^if.then45, ^b131;
^b122:
    i1 %715 = phi [^while.body29, i1 false] [^b107, i1 %635];
    cbr i1 %715(prob = 0.5), ^if.then46, ^b132;
^while.header67:
    i32 %716 = phi [^b93, i32 65535] [^b164, i32 %987];
    i32 %717 = phi [^b93, i32 %551] [^b164, i32 %986];
    i32 %718 = phi [^b93, i32 0] [^b164, i32 %985];
    i32 %719 = phi [^b93, i32 0] [^b164, i32 %988];
    i1 %720 = scmp lt i32 %719, i32 16;
    cbr i1 %720(prob = 0.97), ^while.body38, ^while.header32;
^while.header68:
    i32 %721 = phi [^b94, i32 65535] [^b165, i32 %991];
    i32 %722 = phi [^b94, i32 %552] [^b165, i32 %990];
    i32 %723 = phi [^b94, i32 0] [^b165, i32 %989];
    i32 %724 = phi [^b94, i32 0] [^b165, i32 %992];
    i1 %725 = scmp lt i32 %724, i32 16;
    cbr i1 %725(prob = 0.97), ^while.body39, ^while.header33;
^if.then40:
    i32* %726 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %456];
    i32 %727 = load i32* %726;
    i32 %728 = add i32 %459, i32 %727;
    ubr ^b124;
^b123:
    i32 %729 = srem i32 %589, i32 2;
    i1 %730 = scmp neq i32 %729, i32 0;
    ubr ^b133;
^b124:
    i32 %731 = phi [^if.then39, i32 %459] [^if.else15, i32 %459] [^if.then40, i32 %728];
    i32 %732 = sdiv i32 %458, i32 2;
    i32 %733 = sdiv i32 %457, i32 2;
    i32 %734 = add i32 %456, i32 1;
    ubr ^while.header47;
^b125:
    i32 %735 = srem i32 %596, i32 2;
    i1 %736 = scmp neq i32 %735, i32 0;
    ubr ^b135;
^if.then41:
    i32* %737 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %467];
    i32 %738 = load i32* %737;
    i32 %739 = add i32 %466, i32 %738;
    ubr ^b128;
^b126:
    i32 %740 = srem i32 %602, i32 2;
    i1 %741 = scmp neq i32 %740, i32 0;
    ubr ^b136;
^if.then42:
    i32 %742 = sdiv i32 %196, i32 2;
    i32 %743 = add i32 %742, i32 32768;
    ubr ^b140;
^if.then43:
    i32* %744 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %474];
    i32 %745 = load i32* %744;
    i32 %746 = add i32 %473, i32 %745;
    ubr ^b129;
^if.then44:
    i32* %747 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %479];
    i32 %748 = load i32* %747;
    i32 %749 = add i32 %478, i32 %748;
    ubr ^b130;
^if.then45:
    i32* %750 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %485];
    i32 %751 = load i32* %750;
    i32 %752 = add i32 %484, i32 %751;
    ubr ^b131;
^if.then46:
    i32* %753 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %490];
    i32 %754 = load i32* %753;
    i32 %755 = add i32 %487, i32 %754;
    ubr ^b132;
^if.then47:
    i32 %756 = srem i32 %553, i32 2;
    i1 %757 = scmp eq i32 %756, i32 0;
    cbr i1 %757(prob = 0.5), ^if.then48, ^b138;
^b127:
    i32 %758 = shl i32 %685, i32 1;
    ubr ^while.header77;
^b128:
    i32 %759 = phi [^b118, i32 %466] [^if.then41, i32 %739];
    i32 %760 = sdiv i32 %465, i32 2;
    i32 %761 = sdiv i32 %464, i32 2;
    i32 %762 = add i32 %467, i32 1;
    ubr ^while.header48;
^if.else16:
    i32 %763 = sdiv i32 %196, i32 2;
    ubr ^b140;
^b129:
    i32 %764 = phi [^b119, i32 %473] [^if.then43, i32 %746];
    i32 %765 = sdiv i32 %472, i32 2;
    i32 %766 = sdiv i32 %471, i32 2;
    i32 %767 = add i32 %474, i32 1;
    ubr ^while.header49;
^b130:
    i32 %768 = phi [^b120, i32 %478] [^if.then44, i32 %749];
    i32 %769 = sdiv i32 %477, i32 2;
    i32 %770 = sdiv i32 %476, i32 2;
    i32 %771 = add i32 %479, i32 1;
    ubr ^while.header50;
^while.body34:
    i32 %772 = srem i32 %674, i32 2;
    i1 %773 = scmp neq i32 %772, i32 0;
    cbr i1 %773(prob = 0.5), ^if.then53, ^if.else19;
^while.body35:
    i32 %774 = srem i32 %679, i32 2;
    i1 %775 = scmp neq i32 %774, i32 0;
    cbr i1 %775(prob = 0.5), ^if.then54, ^if.else20;
^b131:
    i32 %776 = phi [^b121, i32 %484] [^if.then45, i32 %752];
    i32 %777 = sdiv i32 %483, i32 2;
    i32 %778 = sdiv i32 %482, i32 2;
    i32 %779 = add i32 %485, i32 1;
    ubr ^while.header51;
^b132:
    i32 %780 = phi [^b122, i32 %487] [^if.then46, i32 %755];
    i32 %781 = sdiv i32 %489, i32 2;
    i32 %782 = sdiv i32 %488, i32 2;
    i32 %783 = add i32 %490, i32 1;
    ubr ^while.header52;
^if.else17:
    i32 %784 = srem i32 %553, i32 2;
    i1 %785 = scmp neq i32 %784, i32 0;
    cbr i1 %785(prob = 0.5), ^if.then48, ^b138;
^while.body36:
    i32 %786 = srem i32 %687, i32 2;
    i1 %787 = scmp neq i32 %786, i32 0;
    cbr i1 %787(prob = 0.5), ^b139, ^b149;
^while.body37:
    i32 %788 = srem i32 %692, i32 2;
    i1 %789 = scmp neq i32 %788, i32 0;
    cbr i1 %789(prob = 0.5), ^if.then56, ^if.else22;
^while.header69:
    i32 %790 = phi [^while.header64, i32 0] [^b173, i32 %1051];
    i32 %791 = phi [^while.header64, i32 %698] [^b173, i32 %1053];
    i32 %792 = phi [^while.header64, i32 %697] [^b173, i32 %1052];
    i32 %793 = phi [^while.header64, i32 0] [^b173, i32 %1054];
    i1 %794 = scmp lt i32 %793, i32 16;
    cbr i1 %794(prob = 0.97), ^while.body40, ^while.header78;
^while.body38:
    i32 %795 = srem i32 %717, i32 2;
    i1 %796 = scmp neq i32 %795, i32 0;
    cbr i1 %796(prob = 0.5), ^b141, ^b150;
^while.body39:
    i32 %797 = srem i32 %722, i32 2;
    i1 %798 = scmp neq i32 %797, i32 0;
    cbr i1 %798(prob = 0.5), ^b142, ^b151;
^while.header70:
    i32 %799 = phi [^while.header60, i32 0] [^b180, i32 %1082];
    i32 %800 = phi [^while.header60, i32 %568] [^b180, i32 %1084];
    i32 %801 = phi [^while.header60, i32 %567] [^b180, i32 %1083];
    i32 %802 = phi [^while.header60, i32 0] [^b180, i32 %1085];
    i1 %803 = scmp lt i32 %802, i32 16;
    cbr i1 %803(prob = 0.97), ^while.body41, ^b143;
^while.header71:
    i32 %804 = phi [^while.header61, i32 0] [^b181, i32 %1086];
    i32 %805 = phi [^while.header61, i32 %571] [^b181, i32 %1088];
    i32 %806 = phi [^while.header61, i32 %570] [^b181, i32 %1087];
    i32 %807 = phi [^while.header61, i32 0] [^b181, i32 %1089];
    i1 %808 = scmp lt i32 %807, i32 16;
    cbr i1 %808(prob = 0.97), ^while.body42, ^b144;
^while.header72:
    i32 %809 = phi [^while.header65, i32 0] [^b175, i32 %1063];
    i32 %810 = phi [^while.header65, i32 %709] [^b175, i32 %1065];
    i32 %811 = phi [^while.header65, i32 %708] [^b175, i32 %1064];
    i32 %812 = phi [^while.header65, i32 0] [^b175, i32 %1066];
    i1 %813 = scmp lt i32 %812, i32 16;
    cbr i1 %813(prob = 0.97), ^while.body43, ^while.header80;
^while.header73:
    i32 %814 = phi [^while.header66, i32 %712] [^b176, i32 %1069];
    i32 %815 = phi [^while.header66, i32 %711] [^b176, i32 %1068];
    i32 %816 = phi [^while.header66, i32 0] [^b176, i32 %1067];
    i32 %817 = phi [^while.header66, i32 0] [^b176, i32 %1070];
    i1 %818 = scmp lt i32 %817, i32 16;
    cbr i1 %818(prob = 0.97), ^while.body44, ^while.header81;
^b133:
    i1 %819 = phi [^while.body31, i1 false] [^b123, i1 %730];
    cbr i1 %819(prob = 0.5), ^if.then49, ^b145;
^while.header74:
    i32 %820 = phi [^while.header63, i32 %586] [^b182, i32 %1092];
    i32 %821 = phi [^while.header63, i32 %585] [^b182, i32 %1091];
    i32 %822 = phi [^while.header63, i32 0] [^b182, i32 %1090];
    i32 %823 = phi [^while.header63, i32 0] [^b182, i32 %1093];
    i1 %824 = scmp lt i32 %823, i32 16;
    cbr i1 %824(prob = 0.97), ^while.body45, ^b146;
^b134:
    i1 %825 = scmp gt i32 %272, i32 32767;
    cbr i1 %825(prob = 0.5), ^if.then50, ^if.else18;
^b135:
    i1 %826 = phi [^while.body32, i1 false] [^b125, i1 %736];
    cbr i1 %826(prob = 0.5), ^if.then51, ^b147;
^while.header75:
    i32 %827 = phi [^b115, i32 %386] [^while.header89, i32 %918];
    i32 %828 = phi [^b115, i32 %386] [^while.header89, i32 %1185];
    i1 %829 = scmp neq i32 %828, i32 0;
    cbr i1 %829(prob = 0.97), ^while.header79, ^b152;
^b136:
    i1 %830 = phi [^while.body33, i1 false] [^b126, i1 %741];
    cbr i1 %830(prob = 0.5), ^if.then52, ^b148;
^while.header76:
    i32 %831 = phi [^b116, i32 65535] [^b183, i32 %1096];
    i32 %832 = phi [^b116, i32 %672] [^b183, i32 %1095];
    i32 %833 = phi [^b116, i32 0] [^b183, i32 %1094];
    i32 %834 = phi [^b116, i32 0] [^b183, i32 %1097];
    i1 %835 = scmp lt i32 %834, i32 16;
    cbr i1 %835(prob = 0.97), ^while.body46, ^while.header43;
^b137:
    i1 %836 = scmp gt i32 %289, i32 32767;
    cbr i1 %836(prob = 0.5), ^if.then55, ^if.else21;
^if.then48:
    i32* %837 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %556];
    i32 %838 = load i32* %837;
    i32 %839 = add i32 %555, i32 %838;
    ubr ^b138;
^b138:
    i32 %840 = phi [^if.then47, i32 %555] [^if.else17, i32 %555] [^if.then48, i32 %839];
    i32 %841 = sdiv i32 %554, i32 2;
    i32 %842 = sdiv i32 %553, i32 2;
    i32 %843 = add i32 %556, i32 1;
    ubr ^while.header53;
^b139:
    i32 %844 = srem i32 %686, i32 2;
    i1 %845 = scmp neq i32 %844, i32 0;
    ubr ^b149;
^b140:
    i32 %846 = phi [^if.then42, i32 %743] [^if.else16, i32 %763];
    ubr ^while.header22;
^b141:
    i32 %847 = srem i32 %716, i32 2;
    i1 %848 = scmp neq i32 %847, i32 0;
    ubr ^b150;
^b142:
    i32 %849 = srem i32 %721, i32 2;
    i1 %850 = scmp neq i32 %849, i32 0;
    ubr ^b151;
^if.then49:
    i32* %851 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %592];
    i32 %852 = load i32* %851;
    i32 %853 = add i32 %591, i32 %852;
    ubr ^b145;
^if.then50:
    i32 %854 = sdiv i32 %272, i32 2;
    i32 %855 = add i32 %854, i32 32768;
    ubr ^b159;
^if.then51:
    i32* %856 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %598];
    i32 %857 = load i32* %856;
    i32 %858 = add i32 %595, i32 %857;
    ubr ^b147;
^if.then52:
    i32* %859 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %604];
    i32 %860 = load i32* %859;
    i32 %861 = add i32 %601, i32 %860;
    ubr ^b148;
^if.then53:
    i32 %862 = srem i32 %673, i32 2;
    i1 %863 = scmp eq i32 %862, i32 0;
    cbr i1 %863(prob = 0.5), ^if.then57, ^b153;
^if.then54:
    i32 %864 = srem i32 %678, i32 2;
    i1 %865 = scmp eq i32 %864, i32 0;
    cbr i1 %865(prob = 0.5), ^if.then58, ^b154;
^if.then55:
    i32 %866 = sdiv i32 %289, i32 2;
    i32 %867 = add i32 %866, i32 32768;
    ubr ^b161;
^b143:
    i32 %868 = shl i32 %799, i32 1;
    ubr ^while.header82;
^b144:
    i32 %869 = shl i32 %804, i32 1;
    ubr ^while.header83;
^b145:
    i32 %870 = phi [^b133, i32 %591] [^if.then49, i32 %853];
    i32 %871 = sdiv i32 %590, i32 2;
    i32 %872 = sdiv i32 %589, i32 2;
    i32 %873 = add i32 %592, i32 1;
    ubr ^while.header57;
^if.then56:
    i32 %874 = srem i32 %691, i32 2;
    i1 %875 = scmp eq i32 %874, i32 0;
    cbr i1 %875(prob = 0.5), ^if.then59, ^b157;
^b146:
    i32 %876 = shl i32 %822, i32 1;
    ubr ^while.header84;
^if.else18:
    i32 %877 = sdiv i32 %272, i32 2;
    ubr ^b159;
^b147:
    i32 %878 = phi [^b135, i32 %595] [^if.then51, i32 %858];
    i32 %879 = sdiv i32 %597, i32 2;
    i32 %880 = sdiv i32 %596, i32 2;
    i32 %881 = add i32 %598, i32 1;
    ubr ^while.header58;
^while.body40:
    i32 %882 = srem i32 %792, i32 2;
    i1 %883 = scmp neq i32 %882, i32 0;
    cbr i1 %883(prob = 0.5), ^if.then63, ^if.else23;
^b148:
    i32 %884 = phi [^b136, i32 %601] [^if.then52, i32 %861];
    i32 %885 = sdiv i32 %603, i32 2;
    i32 %886 = sdiv i32 %602, i32 2;
    i32 %887 = add i32 %604, i32 1;
    ubr ^while.header59;
^if.else19:
    i32 %888 = srem i32 %673, i32 2;
    i1 %889 = scmp neq i32 %888, i32 0;
    cbr i1 %889(prob = 0.5), ^if.then57, ^b153;
^if.else20:
    i32 %890 = srem i32 %678, i32 2;
    i1 %891 = scmp neq i32 %890, i32 0;
    cbr i1 %891(prob = 0.5), ^if.then58, ^b154;
^if.else21:
    i32 %892 = sdiv i32 %289, i32 2;
    ubr ^b161;
^while.body41:
    i32 %893 = srem i32 %801, i32 2;
    i1 %894 = scmp neq i32 %893, i32 0;
    cbr i1 %894(prob = 0.5), ^b155, ^b168;
^while.body42:
    i32 %895 = srem i32 %806, i32 2;
    i1 %896 = scmp neq i32 %895, i32 0;
    cbr i1 %896(prob = 0.5), ^b156, ^b169;
^while.body43:
    i32 %897 = srem i32 %811, i32 2;
    i1 %898 = scmp neq i32 %897, i32 0;
    cbr i1 %898(prob = 0.5), ^if.then65, ^if.else25;
^while.body44:
    i32 %899 = srem i32 %815, i32 2;
    i1 %900 = scmp neq i32 %899, i32 0;
    cbr i1 %900(prob = 0.5), ^if.then66, ^if.else26;
^b149:
    i1 %901 = phi [^while.body36, i1 false] [^b139, i1 %845];
    cbr i1 %901(prob = 0.5), ^if.then60, ^b162;
^if.else22:
    i32 %902 = srem i32 %691, i32 2;
    i1 %903 = scmp neq i32 %902, i32 0;
    cbr i1 %903(prob = 0.5), ^if.then59, ^b157;
^while.header77:
    i32 %904 = phi [^b127, i32 0] [^b194, i32 %1157];
    i32 %905 = phi [^b127, i32 65535] [^b194, i32 %1159];
    i32 %906 = phi [^b127, i32 %758] [^b194, i32 %1158];
    i32 %907 = phi [^b127, i32 0] [^b194, i32 %1160];
    i1 %908 = scmp lt i32 %907, i32 16;
    cbr i1 %908(prob = 0.97), ^while.body47, ^while.header46;
^while.body45:
    i32 %909 = srem i32 %821, i32 2;
    i1 %910 = scmp neq i32 %909, i32 0;
    cbr i1 %910(prob = 0.5), ^b158, ^b170;
^while.body46:
    i32 %911 = srem i32 %832, i32 2;
    i1 %912 = scmp neq i32 %911, i32 0;
    cbr i1 %912(prob = 0.5), ^b160, ^b171;
^while.header78:
    i32 %913 = phi [^while.header69, i32 0] [^b195, i32 %1161];
    i32 %914 = phi [^while.header69, i32 %698] [^b195, i32 %1163];
    i32 %915 = phi [^while.header69, i32 %697] [^b195, i32 %1162];
    i32 %916 = phi [^while.header69, i32 0] [^b195, i32 %1164];
    i1 %917 = scmp lt i32 %916, i32 16;
    cbr i1 %917(prob = 0.97), ^while.body48, ^b163;
^while.header79:
    i32 %918 = phi [^while.header75, i32 0] [^b192, i32 %1145];
    i32 %919 = phi [^while.header75, i32 %828] [^b192, i32 %1147];
    i32 %920 = phi [^while.header75, i32 %827] [^b192, i32 %1146];
    i32 %921 = phi [^while.header75, i32 0] [^b192, i32 %1148];
    i1 %922 = scmp lt i32 %921, i32 16;
    cbr i1 %922(prob = 0.97), ^while.body49, ^while.header85;
^b150:
    i1 %923 = phi [^while.body38, i1 false] [^b141, i1 %848];
    cbr i1 %923(prob = 0.5), ^if.then61, ^b164;
^b151:
    i1 %924 = phi [^while.body39, i1 false] [^b142, i1 %850];
    cbr i1 %924(prob = 0.5), ^if.then62, ^b165;
^while.header80:
    i32 %925 = phi [^while.header72, i32 0] [^b196, i32 %1165];
    i32 %926 = phi [^while.header72, i32 %709] [^b196, i32 %1167];
    i32 %927 = phi [^while.header72, i32 %708] [^b196, i32 %1166];
    i32 %928 = phi [^while.header72, i32 0] [^b196, i32 %1168];
    i1 %929 = scmp lt i32 %928, i32 16;
    cbr i1 %929(prob = 0.97), ^while.body50, ^b166;
^while.header81:
    i32 %930 = phi [^while.header73, i32 0] [^b197, i32 %1169];
    i32 %931 = phi [^while.header73, i32 %712] [^b197, i32 %1171];
    i32 %932 = phi [^while.header73, i32 %711] [^b197, i32 %1170];
    i32 %933 = phi [^while.header73, i32 0] [^b197, i32 %1172];
    i1 %934 = scmp lt i32 %933, i32 16;
    cbr i1 %934(prob = 0.97), ^while.body51, ^b167;
^b152:
    i1 %935 = scmp gt i32 %387, i32 32767;
    cbr i1 %935(prob = 0.5), ^if.then64, ^if.else24;
^if.then57:
    i32* %936 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %676];
    i32 %937 = load i32* %936;
    i32 %938 = add i32 %675, i32 %937;
    ubr ^b153;
^if.then58:
    i32* %939 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %681];
    i32 %940 = load i32* %939;
    i32 %941 = add i32 %680, i32 %940;
    ubr ^b154;
^if.then59:
    i32* %942 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %693];
    i32 %943 = load i32* %942;
    i32 %944 = add i32 %690, i32 %943;
    ubr ^b157;
^b153:
    i32 %945 = phi [^if.then53, i32 %675] [^if.else19, i32 %675] [^if.then57, i32 %938];
    i32 %946 = sdiv i32 %674, i32 2;
    i32 %947 = sdiv i32 %673, i32 2;
    i32 %948 = add i32 %676, i32 1;
    ubr ^while.header60;
^b154:
    i32 %949 = phi [^if.then54, i32 %680] [^if.else20, i32 %680] [^if.then58, i32 %941];
    i32 %950 = sdiv i32 %679, i32 2;
    i32 %951 = sdiv i32 %678, i32 2;
    i32 %952 = add i32 %681, i32 1;
    ubr ^while.header61;
^b155:
    i32 %953 = srem i32 %800, i32 2;
    i1 %954 = scmp neq i32 %953, i32 0;
    ubr ^b168;
^b156:
    i32 %955 = srem i32 %805, i32 2;
    i1 %956 = scmp neq i32 %955, i32 0;
    ubr ^b169;
^if.then60:
    i32* %957 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %688];
    i32 %958 = load i32* %957;
    i32 %959 = add i32 %685, i32 %958;
    ubr ^b162;
^b157:
    i32 %960 = phi [^if.then56, i32 %690] [^if.else22, i32 %690] [^if.then59, i32 %944];
    i32 %961 = sdiv i32 %692, i32 2;
    i32 %962 = sdiv i32 %691, i32 2;
    i32 %963 = add i32 %693, i32 1;
    ubr ^while.header63;
^b158:
    i32 %964 = srem i32 %820, i32 2;
    i1 %965 = scmp neq i32 %964, i32 0;
    ubr ^b170;
^b159:
    i32 %966 = phi [^if.then50, i32 %855] [^if.else18, i32 %877];
    ubr ^while.header30;
^b160:
    i32 %967 = srem i32 %831, i32 2;
    i1 %968 = scmp neq i32 %967, i32 0;
    ubr ^b171;
^if.then61:
    i32* %969 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %719];
    i32 %970 = load i32* %969;
    i32 %971 = add i32 %718, i32 %970;
    ubr ^b164;
^if.then62:
    i32* %972 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %724];
    i32 %973 = load i32* %972;
    i32 %974 = add i32 %723, i32 %973;
    ubr ^b165;
^b161:
    i32 %975 = phi [^if.then55, i32 %867] [^if.else21, i32 %892];
    ubr ^while.header34;
^b162:
    i32 %976 = phi [^b149, i32 %685] [^if.then60, i32 %959];
    i32 %977 = sdiv i32 %687, i32 2;
    i32 %978 = sdiv i32 %686, i32 2;
    i32 %979 = add i32 %688, i32 1;
    ubr ^while.header62;
^if.then63:
    i32 %980 = srem i32 %791, i32 2;
    i1 %981 = scmp eq i32 %980, i32 0;
    cbr i1 %981(prob = 0.5), ^if.then67, ^b173;
^if.then64:
    i32 %982 = sdiv i32 %387, i32 2;
    i32 %983 = add i32 %982, i32 32768;
    ubr ^b179;
^b163:
    i32 %984 = shl i32 %913, i32 1;
    ubr ^while.header86;
^b164:
    i32 %985 = phi [^b150, i32 %718] [^if.then61, i32 %971];
    i32 %986 = sdiv i32 %717, i32 2;
    i32 %987 = sdiv i32 %716, i32 2;
    i32 %988 = add i32 %719, i32 1;
    ubr ^while.header67;
^b165:
    i32 %989 = phi [^b151, i32 %723] [^if.then62, i32 %974];
    i32 %990 = sdiv i32 %722, i32 2;
    i32 %991 = sdiv i32 %721, i32 2;
    i32 %992 = add i32 %724, i32 1;
    ubr ^while.header68;
^if.then65:
    i32 %993 = srem i32 %810, i32 2;
    i1 %994 = scmp eq i32 %993, i32 0;
    cbr i1 %994(prob = 0.5), ^if.then68, ^b175;
^if.then66:
    i32 %995 = srem i32 %814, i32 2;
    i1 %996 = scmp eq i32 %995, i32 0;
    cbr i1 %996(prob = 0.5), ^if.then69, ^b176;
^b166:
    i32 %997 = shl i32 %925, i32 1;
    ubr ^while.header87;
^b167:
    i32 %998 = shl i32 %930, i32 1;
    ubr ^while.header88;
^while.body47:
    i32 %999 = srem i32 %906, i32 2;
    i1 %1000 = scmp neq i32 %999, i32 0;
    cbr i1 %1000(prob = 0.5), ^b172, ^b185;
^if.else23:
    i32 %1001 = srem i32 %791, i32 2;
    i1 %1002 = scmp neq i32 %1001, i32 0;
    cbr i1 %1002(prob = 0.5), ^if.then67, ^b173;
^if.else24:
    i32 %1003 = sdiv i32 %387, i32 2;
    ubr ^b179;
^while.body48:
    i32 %1004 = srem i32 %915, i32 2;
    i1 %1005 = scmp neq i32 %1004, i32 0;
    cbr i1 %1005(prob = 0.5), ^b174, ^b186;
^while.body49:
    i32 %1006 = srem i32 %920, i32 2;
    i1 %1007 = scmp neq i32 %1006, i32 0;
    cbr i1 %1007(prob = 0.5), ^if.then74, ^if.else27;
^b168:
    i1 %1008 = phi [^while.body41, i1 false] [^b155, i1 %954];
    cbr i1 %1008(prob = 0.5), ^if.then70, ^b180;
^b169:
    i1 %1009 = phi [^while.body42, i1 false] [^b156, i1 %956];
    cbr i1 %1009(prob = 0.5), ^if.then71, ^b181;
^if.else25:
    i32 %1010 = srem i32 %810, i32 2;
    i1 %1011 = scmp neq i32 %1010, i32 0;
    cbr i1 %1011(prob = 0.5), ^if.then68, ^b175;
^if.else26:
    i32 %1012 = srem i32 %814, i32 2;
    i1 %1013 = scmp neq i32 %1012, i32 0;
    cbr i1 %1013(prob = 0.5), ^if.then69, ^b176;
^while.header82:
    i32 %1014 = phi [^b143, i32 0] [^b205, i32 %1206];
    i32 %1015 = phi [^b143, i32 65535] [^b205, i32 %1208];
    i32 %1016 = phi [^b143, i32 %868] [^b205, i32 %1207];
    i32 %1017 = phi [^b143, i32 0] [^b205, i32 %1209];
    i1 %1018 = scmp lt i32 %1017, i32 16;
    cbr i1 %1018(prob = 0.97), ^while.body52, ^while.header54;
^while.header83:
    i32 %1019 = phi [^b144, i32 65535] [^b206, i32 %1212];
    i32 %1020 = phi [^b144, i32 %869] [^b206, i32 %1211];
    i32 %1021 = phi [^b144, i32 0] [^b206, i32 %1210];
    i32 %1022 = phi [^b144, i32 0] [^b206, i32 %1213];
    i1 %1023 = scmp lt i32 %1022, i32 16;
    cbr i1 %1023(prob = 0.97), ^while.body53, ^while.header55;
^while.body50:
    i32 %1024 = srem i32 %927, i32 2;
    i1 %1025 = scmp neq i32 %1024, i32 0;
    cbr i1 %1025(prob = 0.5), ^b177, ^b187;
^while.body51:
    i32 %1026 = srem i32 %932, i32 2;
    i1 %1027 = scmp neq i32 %1026, i32 0;
    cbr i1 %1027(prob = 0.5), ^b178, ^b188;
^b170:
    i1 %1028 = phi [^while.body45, i1 false] [^b158, i1 %965];
    cbr i1 %1028(prob = 0.5), ^if.then72, ^b182;
^while.header84:
    i32 %1029 = phi [^b146, i32 65535] [^b207, i32 %1216];
    i32 %1030 = phi [^b146, i32 %876] [^b207, i32 %1215];
    i32 %1031 = phi [^b146, i32 0] [^b207, i32 %1214];
    i32 %1032 = phi [^b146, i32 0] [^b207, i32 %1217];
    i1 %1033 = scmp lt i32 %1032, i32 16;
    cbr i1 %1033(prob = 0.97), ^while.body54, ^while.header56;
^b171:
    i1 %1034 = phi [^while.body46, i1 false] [^b160, i1 %968];
    cbr i1 %1034(prob = 0.5), ^if.then73, ^b183;
^while.header85:
    i32 %1035 = phi [^while.header79, i32 0] [^b208, i32 %1218];
    i32 %1036 = phi [^while.header79, i32 %828] [^b208, i32 %1220];
    i32 %1037 = phi [^while.header79, i32 %827] [^b208, i32 %1219];
    i32 %1038 = phi [^while.header79, i32 0] [^b208, i32 %1221];
    i1 %1039 = scmp lt i32 %1038, i32 16;
    cbr i1 %1039(prob = 0.97), ^while.body55, ^b184;
^if.then67:
    i32* %1040 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %793];
    i32 %1041 = load i32* %1040;
    i32 %1042 = add i32 %790, i32 %1041;
    ubr ^b173;
^if.then68:
    i32* %1043 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %812];
    i32 %1044 = load i32* %1043;
    i32 %1045 = add i32 %809, i32 %1044;
    ubr ^b175;
^if.then69:
    i32* %1046 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %817];
    i32 %1047 = load i32* %1046;
    i32 %1048 = add i32 %816, i32 %1047;
    ubr ^b176;
^b172:
    i32 %1049 = srem i32 %905, i32 2;
    i1 %1050 = scmp neq i32 %1049, i32 0;
    ubr ^b185;
^b173:
    i32 %1051 = phi [^if.then63, i32 %790] [^if.else23, i32 %790] [^if.then67, i32 %1042];
    i32 %1052 = sdiv i32 %792, i32 2;
    i32 %1053 = sdiv i32 %791, i32 2;
    i32 %1054 = add i32 %793, i32 1;
    ubr ^while.header69;
^b174:
    i32 %1055 = srem i32 %914, i32 2;
    i1 %1056 = scmp neq i32 %1055, i32 0;
    ubr ^b186;
^if.then70:
    i32* %1057 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %802];
    i32 %1058 = load i32* %1057;
    i32 %1059 = add i32 %799, i32 %1058;
    ubr ^b180;
^if.then71:
    i32* %1060 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %807];
    i32 %1061 = load i32* %1060;
    i32 %1062 = add i32 %804, i32 %1061;
    ubr ^b181;
^b175:
    i32 %1063 = phi [^if.then65, i32 %809] [^if.else25, i32 %809] [^if.then68, i32 %1045];
    i32 %1064 = sdiv i32 %811, i32 2;
    i32 %1065 = sdiv i32 %810, i32 2;
    i32 %1066 = add i32 %812, i32 1;
    ubr ^while.header72;
^b176:
    i32 %1067 = phi [^if.then66, i32 %816] [^if.else26, i32 %816] [^if.then69, i32 %1048];
    i32 %1068 = sdiv i32 %815, i32 2;
    i32 %1069 = sdiv i32 %814, i32 2;
    i32 %1070 = add i32 %817, i32 1;
    ubr ^while.header73;
^b177:
    i32 %1071 = srem i32 %926, i32 2;
    i1 %1072 = scmp neq i32 %1071, i32 0;
    ubr ^b187;
^b178:
    i32 %1073 = srem i32 %931, i32 2;
    i1 %1074 = scmp neq i32 %1073, i32 0;
    ubr ^b188;
^if.then72:
    i32* %1075 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %823];
    i32 %1076 = load i32* %1075;
    i32 %1077 = add i32 %822, i32 %1076;
    ubr ^b182;
^if.then73:
    i32* %1078 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %834];
    i32 %1079 = load i32* %1078;
    i32 %1080 = add i32 %833, i32 %1079;
    ubr ^b183;
^b179:
    i32 %1081 = phi [^if.then64, i32 %983] [^if.else24, i32 %1003];
    ubr ^while.header44;
^b180:
    i32 %1082 = phi [^b168, i32 %799] [^if.then70, i32 %1059];
    i32 %1083 = sdiv i32 %801, i32 2;
    i32 %1084 = sdiv i32 %800, i32 2;
    i32 %1085 = add i32 %802, i32 1;
    ubr ^while.header70;
^b181:
    i32 %1086 = phi [^b169, i32 %804] [^if.then71, i32 %1062];
    i32 %1087 = sdiv i32 %806, i32 2;
    i32 %1088 = sdiv i32 %805, i32 2;
    i32 %1089 = add i32 %807, i32 1;
    ubr ^while.header71;
^b182:
    i32 %1090 = phi [^b170, i32 %822] [^if.then72, i32 %1077];
    i32 %1091 = sdiv i32 %821, i32 2;
    i32 %1092 = sdiv i32 %820, i32 2;
    i32 %1093 = add i32 %823, i32 1;
    ubr ^while.header74;
^b183:
    i32 %1094 = phi [^b171, i32 %833] [^if.then73, i32 %1080];
    i32 %1095 = sdiv i32 %832, i32 2;
    i32 %1096 = sdiv i32 %831, i32 2;
    i32 %1097 = add i32 %834, i32 1;
    ubr ^while.header76;
^if.then74:
    i32 %1098 = srem i32 %919, i32 2;
    i1 %1099 = scmp eq i32 %1098, i32 0;
    cbr i1 %1099(prob = 0.5), ^if.then75, ^b192;
^b184:
    i32 %1100 = shl i32 %1035, i32 1;
    ubr ^while.header89;
^while.body52:
    i32 %1101 = srem i32 %1016, i32 2;
    i1 %1102 = scmp neq i32 %1101, i32 0;
    cbr i1 %1102(prob = 0.5), ^b189, ^b198;
^while.body53:
    i32 %1103 = srem i32 %1020, i32 2;
    i1 %1104 = scmp neq i32 %1103, i32 0;
    cbr i1 %1104(prob = 0.5), ^b190, ^b199;
^b185:
    i1 %1105 = phi [^while.body47, i1 false] [^b172, i1 %1050];
    cbr i1 %1105(prob = 0.5), ^if.then76, ^b194;
^while.body54:
    i32 %1106 = srem i32 %1030, i32 2;
    i1 %1107 = scmp neq i32 %1106, i32 0;
    cbr i1 %1107(prob = 0.5), ^b191, ^b200;
^b186:
    i1 %1108 = phi [^while.body48, i1 false] [^b174, i1 %1056];
    cbr i1 %1108(prob = 0.5), ^if.then77, ^b195;
^if.else27:
    i32 %1109 = srem i32 %919, i32 2;
    i1 %1110 = scmp neq i32 %1109, i32 0;
    cbr i1 %1110(prob = 0.5), ^if.then75, ^b192;
^while.header86:
    i32 %1111 = phi [^b163, i32 65535] [^b213, i32 %1240];
    i32 %1112 = phi [^b163, i32 %984] [^b213, i32 %1239];
    i32 %1113 = phi [^b163, i32 0] [^b213, i32 %1238];
    i32 %1114 = phi [^b163, i32 0] [^b213, i32 %1241];
    i1 %1115 = scmp lt i32 %1114, i32 16;
    cbr i1 %1115(prob = 0.97), ^while.body56, ^while.header64;
^while.body55:
    i32 %1116 = srem i32 %1037, i32 2;
    i1 %1117 = scmp neq i32 %1116, i32 0;
    cbr i1 %1117(prob = 0.5), ^b193, ^b201;
^b187:
    i1 %1118 = phi [^while.body50, i1 false] [^b177, i1 %1072];
    cbr i1 %1118(prob = 0.5), ^if.then78, ^b196;
^b188:
    i1 %1119 = phi [^while.body51, i1 false] [^b178, i1 %1074];
    cbr i1 %1119(prob = 0.5), ^if.then79, ^b197;
^while.header87:
    i32 %1120 = phi [^b166, i32 65535] [^b214, i32 %1244];
    i32 %1121 = phi [^b166, i32 %997] [^b214, i32 %1243];
    i32 %1122 = phi [^b166, i32 0] [^b214, i32 %1242];
    i32 %1123 = phi [^b166, i32 0] [^b214, i32 %1245];
    i1 %1124 = scmp lt i32 %1123, i32 16;
    cbr i1 %1124(prob = 0.97), ^while.body57, ^while.header65;
^while.header88:
    i32 %1125 = phi [^b167, i32 65535] [^b215, i32 %1248];
    i32 %1126 = phi [^b167, i32 %998] [^b215, i32 %1247];
    i32 %1127 = phi [^b167, i32 0] [^b215, i32 %1246];
    i32 %1128 = phi [^b167, i32 0] [^b215, i32 %1249];
    i1 %1129 = scmp lt i32 %1128, i32 16;
    cbr i1 %1129(prob = 0.97), ^while.body58, ^while.header66;
^if.then75:
    i32* %1130 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %921];
    i32 %1131 = load i32* %1130;
    i32 %1132 = add i32 %918, i32 %1131;
    ubr ^b192;
^b189:
    i32 %1133 = srem i32 %1015, i32 2;
    i1 %1134 = scmp neq i32 %1133, i32 0;
    ubr ^b198;
^b190:
    i32 %1135 = srem i32 %1019, i32 2;
    i1 %1136 = scmp neq i32 %1135, i32 0;
    ubr ^b199;
^if.then76:
    i32* %1137 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %907];
    i32 %1138 = load i32* %1137;
    i32 %1139 = add i32 %904, i32 %1138;
    ubr ^b194;
^b191:
    i32 %1140 = srem i32 %1029, i32 2;
    i1 %1141 = scmp neq i32 %1140, i32 0;
    ubr ^b200;
^if.then77:
    i32* %1142 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %916];
    i32 %1143 = load i32* %1142;
    i32 %1144 = add i32 %913, i32 %1143;
    ubr ^b195;
^b192:
    i32 %1145 = phi [^if.then74, i32 %918] [^if.else27, i32 %918] [^if.then75, i32 %1132];
    i32 %1146 = sdiv i32 %920, i32 2;
    i32 %1147 = sdiv i32 %919, i32 2;
    i32 %1148 = add i32 %921, i32 1;
    ubr ^while.header79;
^b193:
    i32 %1149 = srem i32 %1036, i32 2;
    i1 %1150 = scmp neq i32 %1149, i32 0;
    ubr ^b201;
^if.then78:
    i32* %1151 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %928];
    i32 %1152 = load i32* %1151;
    i32 %1153 = add i32 %925, i32 %1152;
    ubr ^b196;
^if.then79:
    i32* %1154 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %933];
    i32 %1155 = load i32* %1154;
    i32 %1156 = add i32 %930, i32 %1155;
    ubr ^b197;
^b194:
    i32 %1157 = phi [^b185, i32 %904] [^if.then76, i32 %1139];
    i32 %1158 = sdiv i32 %906, i32 2;
    i32 %1159 = sdiv i32 %905, i32 2;
    i32 %1160 = add i32 %907, i32 1;
    ubr ^while.header77;
^b195:
    i32 %1161 = phi [^b186, i32 %913] [^if.then77, i32 %1144];
    i32 %1162 = sdiv i32 %915, i32 2;
    i32 %1163 = sdiv i32 %914, i32 2;
    i32 %1164 = add i32 %916, i32 1;
    ubr ^while.header78;
^b196:
    i32 %1165 = phi [^b187, i32 %925] [^if.then78, i32 %1153];
    i32 %1166 = sdiv i32 %927, i32 2;
    i32 %1167 = sdiv i32 %926, i32 2;
    i32 %1168 = add i32 %928, i32 1;
    ubr ^while.header80;
^b197:
    i32 %1169 = phi [^b188, i32 %930] [^if.then79, i32 %1156];
    i32 %1170 = sdiv i32 %932, i32 2;
    i32 %1171 = sdiv i32 %931, i32 2;
    i32 %1172 = add i32 %933, i32 1;
    ubr ^while.header81;
^while.body56:
    i32 %1173 = srem i32 %1112, i32 2;
    i1 %1174 = scmp neq i32 %1173, i32 0;
    cbr i1 %1174(prob = 0.5), ^b202, ^b209;
^b198:
    i1 %1175 = phi [^while.body52, i1 false] [^b189, i1 %1134];
    cbr i1 %1175(prob = 0.5), ^if.then80, ^b205;
^b199:
    i1 %1176 = phi [^while.body53, i1 false] [^b190, i1 %1136];
    cbr i1 %1176(prob = 0.5), ^if.then81, ^b206;
^while.body57:
    i32 %1177 = srem i32 %1121, i32 2;
    i1 %1178 = scmp neq i32 %1177, i32 0;
    cbr i1 %1178(prob = 0.5), ^b203, ^b210;
^while.body58:
    i32 %1179 = srem i32 %1126, i32 2;
    i1 %1180 = scmp neq i32 %1179, i32 0;
    cbr i1 %1180(prob = 0.5), ^b204, ^b211;
^b200:
    i1 %1181 = phi [^while.body54, i1 false] [^b191, i1 %1141];
    cbr i1 %1181(prob = 0.5), ^if.then82, ^b207;
^b201:
    i1 %1182 = phi [^while.body55, i1 false] [^b193, i1 %1150];
    cbr i1 %1182(prob = 0.5), ^if.then83, ^b208;
^while.header89:
    i32 %1183 = phi [^b184, i32 65535] [^b217, i32 %1256];
    i32 %1184 = phi [^b184, i32 %1100] [^b217, i32 %1255];
    i32 %1185 = phi [^b184, i32 0] [^b217, i32 %1254];
    i32 %1186 = phi [^b184, i32 0] [^b217, i32 %1257];
    i1 %1187 = scmp lt i32 %1186, i32 16;
    cbr i1 %1187(prob = 0.97), ^while.body59, ^while.header75;
^b202:
    i32 %1188 = srem i32 %1111, i32 2;
    i1 %1189 = scmp neq i32 %1188, i32 0;
    ubr ^b209;
^if.then80:
    i32* %1190 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1017];
    i32 %1191 = load i32* %1190;
    i32 %1192 = add i32 %1014, i32 %1191;
    ubr ^b205;
^if.then81:
    i32* %1193 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1022];
    i32 %1194 = load i32* %1193;
    i32 %1195 = add i32 %1021, i32 %1194;
    ubr ^b206;
^b203:
    i32 %1196 = srem i32 %1120, i32 2;
    i1 %1197 = scmp neq i32 %1196, i32 0;
    ubr ^b210;
^b204:
    i32 %1198 = srem i32 %1125, i32 2;
    i1 %1199 = scmp neq i32 %1198, i32 0;
    ubr ^b211;
^if.then82:
    i32* %1200 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1032];
    i32 %1201 = load i32* %1200;
    i32 %1202 = add i32 %1031, i32 %1201;
    ubr ^b207;
^if.then83:
    i32* %1203 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1038];
    i32 %1204 = load i32* %1203;
    i32 %1205 = add i32 %1035, i32 %1204;
    ubr ^b208;
^b205:
    i32 %1206 = phi [^b198, i32 %1014] [^if.then80, i32 %1192];
    i32 %1207 = sdiv i32 %1016, i32 2;
    i32 %1208 = sdiv i32 %1015, i32 2;
    i32 %1209 = add i32 %1017, i32 1;
    ubr ^while.header82;
^b206:
    i32 %1210 = phi [^b199, i32 %1021] [^if.then81, i32 %1195];
    i32 %1211 = sdiv i32 %1020, i32 2;
    i32 %1212 = sdiv i32 %1019, i32 2;
    i32 %1213 = add i32 %1022, i32 1;
    ubr ^while.header83;
^b207:
    i32 %1214 = phi [^b200, i32 %1031] [^if.then82, i32 %1202];
    i32 %1215 = sdiv i32 %1030, i32 2;
    i32 %1216 = sdiv i32 %1029, i32 2;
    i32 %1217 = add i32 %1032, i32 1;
    ubr ^while.header84;
^b208:
    i32 %1218 = phi [^b201, i32 %1035] [^if.then83, i32 %1205];
    i32 %1219 = sdiv i32 %1037, i32 2;
    i32 %1220 = sdiv i32 %1036, i32 2;
    i32 %1221 = add i32 %1038, i32 1;
    ubr ^while.header85;
^b209:
    i1 %1222 = phi [^while.body56, i1 false] [^b202, i1 %1189];
    cbr i1 %1222(prob = 0.5), ^if.then84, ^b213;
^while.body59:
    i32 %1223 = srem i32 %1184, i32 2;
    i1 %1224 = scmp neq i32 %1223, i32 0;
    cbr i1 %1224(prob = 0.5), ^b212, ^b216;
^b210:
    i1 %1225 = phi [^while.body57, i1 false] [^b203, i1 %1197];
    cbr i1 %1225(prob = 0.5), ^if.then85, ^b214;
^b211:
    i1 %1226 = phi [^while.body58, i1 false] [^b204, i1 %1199];
    cbr i1 %1226(prob = 0.5), ^if.then86, ^b215;
^if.then84:
    i32* %1227 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1114];
    i32 %1228 = load i32* %1227;
    i32 %1229 = add i32 %1113, i32 %1228;
    ubr ^b213;
^b212:
    i32 %1230 = srem i32 %1183, i32 2;
    i1 %1231 = scmp neq i32 %1230, i32 0;
    ubr ^b216;
^if.then85:
    i32* %1232 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1123];
    i32 %1233 = load i32* %1232;
    i32 %1234 = add i32 %1122, i32 %1233;
    ubr ^b214;
^if.then86:
    i32* %1235 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1128];
    i32 %1236 = load i32* %1235;
    i32 %1237 = add i32 %1127, i32 %1236;
    ubr ^b215;
^b213:
    i32 %1238 = phi [^b209, i32 %1113] [^if.then84, i32 %1229];
    i32 %1239 = sdiv i32 %1112, i32 2;
    i32 %1240 = sdiv i32 %1111, i32 2;
    i32 %1241 = add i32 %1114, i32 1;
    ubr ^while.header86;
^b214:
    i32 %1242 = phi [^b210, i32 %1122] [^if.then85, i32 %1234];
    i32 %1243 = sdiv i32 %1121, i32 2;
    i32 %1244 = sdiv i32 %1120, i32 2;
    i32 %1245 = add i32 %1123, i32 1;
    ubr ^while.header87;
^b215:
    i32 %1246 = phi [^b211, i32 %1127] [^if.then86, i32 %1237];
    i32 %1247 = sdiv i32 %1126, i32 2;
    i32 %1248 = sdiv i32 %1125, i32 2;
    i32 %1249 = add i32 %1128, i32 1;
    ubr ^while.header88;
^b216:
    i1 %1250 = phi [^while.body59, i1 false] [^b212, i1 %1231];
    cbr i1 %1250(prob = 0.5), ^if.then87, ^b217;
^if.then87:
    i32* %1251 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1186];
    i32 %1252 = load i32* %1251;
    i32 %1253 = add i32 %1185, i32 %1252;
    ubr ^b217;
^b217:
    i32 %1254 = phi [^b216, i32 %1185] [^if.then87, i32 %1253];
    i32 %1255 = sdiv i32 %1184, i32 2;
    i32 %1256 = sdiv i32 %1183, i32 2;
    i32 %1257 = add i32 %1186, i32 1;
    ubr ^while.header89;
}
