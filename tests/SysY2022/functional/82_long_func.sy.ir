internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [16 * i32]* %SHIFT_TABLE = alloc [16 * i32], align 8;
    i32* %0 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 0];
    store i32* %0 with i32 1;
    i32* %1 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 1];
    store i32* %1 with i32 2;
    i32* %2 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 2];
    store i32* %2 with i32 4;
    i32* %3 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 3];
    store i32* %3 with i32 8;
    i32* %4 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 4];
    store i32* %4 with i32 16;
    i32* %5 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 5];
    store i32* %5 with i32 32;
    i32* %6 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 6];
    store i32* %6 with i32 64;
    i32* %7 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 7];
    store i32* %7 with i32 128;
    i32* %8 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 8];
    store i32* %8 with i32 256;
    i32* %9 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 9];
    store i32* %9 with i32 512;
    i32* %10 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 10];
    store i32* %10 with i32 1024;
    i32* %11 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 11];
    store i32* %11 with i32 2048;
    i32* %12 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 12];
    store i32* %12 with i32 4096;
    i32* %13 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 13];
    store i32* %13 with i32 8192;
    i32* %14 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 14];
    store i32* %14 with i32 16384;
    i32* %15 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 15];
    store i32* %15 with i32 32768;
    call (i32) -> void @putint(i32 1);
    call (i32) -> void @putch(i32 10);
    ubr ^while.body;
  ^while.body:
    i32 %16 = phi [^entry, i32 1] [^b5, i32 %72];
    i32 %17 = phi [^entry, i32 1] [^b5, i32 %34];
    i32 %18 = phi [^entry, i32 2] [^b5, i32 %41];
    ubr ^while.body1;
  ^while.body1:
    i32 %19 = phi [^while.body, i32 0] [^b, i32 %29];
    i32 %20 = phi [^while.body, i32 %16] [^b, i32 %31];
    i32 %21 = phi [^while.body, i32 1] [^b, i32 0];
    i32 %22 = phi [^while.body, i32 0] [^b, i32 %28];
    i32 %23 = and i32 %20, i32 %21;
    i1 %24 = ztrunc i32 %23 to i1;
    cbr i1 %24(prob = 0.5), ^if.then, ^b;
  ^if.then:
    i32* %25 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %19];
    i32 %26 = load i32* %25;
    i32 %27 = add i32 %22, i32 %26;
    ubr ^b;
  ^b:
    i32 %28 = phi [^while.body1, i32 %22] [^if.then, i32 %27];
    i32 %29 = add i32 %19, i32 1;
    i1 %30 = icmp slt i32 %29, i32 16;
    i32 %31 = sdiv i32 %20, i32 2;
    cbr i1 %30(prob = 0.9375), ^while.body1, ^b1;
  ^b1:
    i1 %32 = icmp neq i32 %28, i32 0;
    i1 %33 = icmp neq i32 %18, i32 0;
    cbr i1 %32(prob = 0.5), ^if.then1, ^b2;
  ^if.then1:
    cbr i1 %33(prob = 0.984615), ^while.body2, ^b2;
  ^b2:
    i32 %34 = phi [^b1, i32 %17] [^if.then1, i32 0] [^b15, i32 %83];
    cbr i1 %33(prob = 0.984615), ^while.body3, ^b3;
  ^while.body2:
    i32 %35 = phi [^if.then1, i32 %18] [^b15, i32 %158];
    i32 %36 = phi [^if.then1, i32 0] [^b15, i32 %83];
    i32 %37 = phi [^if.then1, i32 %17] [^b15, i32 %96];
    ubr ^while.body4;
  ^while.body3:
    i32 %38 = phi [^b2, i32 %18] [^b16, i32 %161];
    i32 %39 = phi [^b2, i32 0] [^b16, i32 %84];
    i32 %40 = phi [^b2, i32 %18] [^b16, i32 %98];
    ubr ^while.body5;
  ^b3:
    i32 %41 = phi [^b2, i32 0] [^b16, i32 %84];
    i1 %42 = icmp sgt i32 %16, i32 32767;
    cbr i1 %42(prob = 0.5), ^if.then2, ^if.else;
  ^while.body4:
    i32 %43 = phi [^while.body2, i32 0] [^b4, i32 %69];
    i32 %44 = phi [^while.body2, i32 0] [^b4, i32 %68];
    i32 %45 = phi [^while.body2, i32 %35] [^b4, i32 %71];
    i32 %46 = phi [^while.body2, i32 1] [^b4, i32 0];
    i32 %47 = and i32 %45, i32 %46;
    i1 %48 = ztrunc i32 %47 to i1;
    cbr i1 %48(prob = 0.5), ^if.then3, ^b4;
  ^if.then2:
    i32 %49 = load i32* %1;
    i32 %50 = sdiv i32 %16, i32 %49;
    i32 %51 = add i32 %50, i32 65536;
    i32 %52 = load i32* %15;
    i32 %53 = sub i32 %51, i32 %52;
    ubr ^b5;
  ^while.body5:
    i32 %54 = phi [^while.body3, i32 0] [^b6, i32 %75];
    i32 %55 = phi [^while.body3, i32 0] [^b6, i32 %74];
    i32 %56 = phi [^while.body3, i32 %38] [^b6, i32 %77];
    i32 %57 = phi [^while.body3, i32 1] [^b6, i32 0];
    i32 %58 = and i32 %56, i32 %57;
    i1 %59 = ztrunc i32 %58 to i1;
    cbr i1 %59(prob = 0.5), ^if.then4, ^b6;
  ^if.else:
    i32 %60 = load i32* %1;
    i32 %61 = sdiv i32 %16, i32 %60;
    ubr ^b5;
  ^if.then3:
    i32* %62 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %43];
    i32 %63 = load i32* %62;
    i32 %64 = add i32 %44, i32 %63;
    ubr ^b4;
  ^if.then4:
    i32* %65 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %54];
    i32 %66 = load i32* %65;
    i32 %67 = add i32 %55, i32 %66;
    ubr ^b6;
  ^b4:
    i32 %68 = phi [^while.body4, i32 %44] [^if.then3, i32 %64];
    i32 %69 = add i32 %43, i32 1;
    i1 %70 = icmp slt i32 %69, i32 16;
    i32 %71 = sdiv i32 %45, i32 2;
    cbr i1 %70(prob = 0.9375), ^while.body4, ^b8;
  ^b5:
    i32 %72 = phi [^if.then2, i32 %53] [^if.else, i32 %61];
    i1 %73 = icmp sgt i32 %72, i32 0;
    cbr i1 %73(prob = 0.984615), ^while.body, ^b7;
  ^b6:
    i32 %74 = phi [^while.body5, i32 %55] [^if.then4, i32 %67];
    i32 %75 = add i32 %54, i32 1;
    i1 %76 = icmp slt i32 %75, i32 16;
    i32 %77 = sdiv i32 %56, i32 2;
    cbr i1 %76(prob = 0.9375), ^while.body5, ^b9;
  ^b7:
    call (i32) -> void @putint(i32 %34);
    call (i32) -> void @putch(i32 10);
    ubr ^while.body6;
  ^b8:
    i1 %78 = icmp neq i32 %68, i32 0;
    i1 %79 = icmp neq i32 %37, i32 0;
    cbr i1 %78(prob = 0.5), ^if.then5, ^b10;
  ^b9:
    i1 %80 = icmp neq i32 %74, i32 0;
    i1 %81 = icmp neq i32 %40, i32 0;
    cbr i1 %80(prob = 0.5), ^if.then6, ^b11;
  ^while.body6:
    i32 %82 = phi [^b7, i32 2] [^b37, i32 %348];
    ubr ^while.body8;
  ^if.then5:
    cbr i1 %79(prob = 0.984615), ^while.body7, ^b10;
  ^b10:
    i32 %83 = phi [^b8, i32 %36] [^if.then5, i32 %36] [^368, i32 %175];
    cbr i1 %79(prob = 0.984615), ^while.body9, ^b12;
  ^if.then6:
    cbr i1 %81(prob = 0.984615), ^while.body10, ^b11;
  ^b11:
    i32 %84 = phi [^b9, i32 %39] [^if.then6, i32 %39] [^375, i32 %185];
    cbr i1 %81(prob = 0.984615), ^while.body11, ^b13;
  ^while.body7:
    i32 %85 = phi [^if.then5, i32 %37] [^368, i32 %343];
    i32 %86 = phi [^if.then5, i32 %36] [^368, i32 %175];
    ubr ^while.body12;
  ^while.body8:
    i32 %87 = phi [^while.body6, i32 %82] [^b33, i32 %305];
    i32 %88 = phi [^while.body6, i32 1] [^b33, i32 %215];
    i32 %89 = phi [^while.body6, i32 2] [^b33, i32 %255];
    ubr ^while.body13;
  ^while.body9:
    i32 %90 = phi [^b10, i32 %37] [^373, i32 %352];
    i32 %91 = phi [^b10, i32 %37] [^373, i32 %180];
    ubr ^while.body14;
  ^while.body10:
    i32 %92 = phi [^if.then6, i32 %40] [^375, i32 %357];
    i32 %93 = phi [^if.then6, i32 %39] [^375, i32 %185];
    ubr ^while.body15;
  ^while.body11:
    i32 %94 = phi [^b11, i32 %40] [^377, i32 %362];
    i32 %95 = phi [^b11, i32 %40] [^377, i32 %192];
    ubr ^while.body16;
  ^b12:
    i32 %96 = phi [^b10, i32 %37] [^373, i32 %180];
    i1 %97 = icmp sgt i32 %35, i32 32767;
    cbr i1 %97(prob = 0.5), ^if.then7, ^if.else1;
  ^b13:
    i32 %98 = phi [^b11, i32 %40] [^377, i32 %192];
    i1 %99 = icmp sgt i32 %38, i32 32767;
    cbr i1 %99(prob = 0.5), ^if.then8, ^if.else2;
  ^while.body12:
    i32 %100 = phi [^while.body7, i32 0] [^b17, i32 %176];
    i32 %101 = phi [^while.body7, i32 0] [^b17, i32 %175];
    i32 %102 = phi [^while.body7, i32 %86] [^b17, i32 %178];
    i32 %103 = phi [^while.body7, i32 %85] [^b17, i32 %179];
    i1 %104 = ztrunc i32 %102 to i1;
    cbr i1 %104(prob = 0.5), ^if.then10, ^if.else3;
  ^if.then7:
    i32 %105 = load i32* %1;
    i32 %106 = sdiv i32 %35, i32 %105;
    i32 %107 = add i32 %106, i32 65536;
    i32 %108 = load i32* %15;
    i32 %109 = sub i32 %107, i32 %108;
    ubr ^b15;
  ^while.body13:
    i32 %110 = phi [^while.body8, i32 0] [^b14, i32 %151];
    i32 %111 = phi [^while.body8, i32 0] [^b14, i32 %150];
    i32 %112 = phi [^while.body8, i32 %87] [^b14, i32 %153];
    i32 %113 = phi [^while.body8, i32 1] [^b14, i32 0];
    i32 %114 = and i32 %112, i32 %113;
    i1 %115 = ztrunc i32 %114 to i1;
    cbr i1 %115(prob = 0.5), ^if.then9, ^b14;
  ^while.body14:
    i32 %116 = phi [^while.body9, i32 0] [^b18, i32 %181];
    i32 %117 = phi [^while.body9, i32 0] [^b18, i32 %180];
    i32 %118 = phi [^while.body9, i32 %91] [^b18, i32 %183];
    i32 %119 = phi [^while.body9, i32 %90] [^b18, i32 %184];
    i1 %120 = ztrunc i32 %118 to i1;
    cbr i1 %120(prob = 0.5), ^if.then11, ^if.else4;
  ^while.body15:
    i32 %121 = phi [^while.body10, i32 0] [^b19, i32 %186];
    i32 %122 = phi [^while.body10, i32 0] [^b19, i32 %185];
    i32 %123 = phi [^while.body10, i32 %93] [^b19, i32 %188];
    i32 %124 = phi [^while.body10, i32 %92] [^b19, i32 %189];
    i1 %125 = ztrunc i32 %123 to i1;
    cbr i1 %125(prob = 0.5), ^if.then12, ^if.else5;
  ^if.else1:
    i32 %126 = load i32* %1;
    i32 %127 = sdiv i32 %35, i32 %126;
    ubr ^b15;
  ^if.then8:
    i32 %128 = load i32* %1;
    i32 %129 = sdiv i32 %38, i32 %128;
    i32 %130 = add i32 %129, i32 65536;
    i32 %131 = load i32* %15;
    i32 %132 = sub i32 %130, i32 %131;
    ubr ^b16;
  ^while.body16:
    i32 %133 = phi [^while.body11, i32 0] [^b21, i32 %193];
    i32 %134 = phi [^while.body11, i32 0] [^b21, i32 %192];
    i32 %135 = phi [^while.body11, i32 %95] [^b21, i32 %195];
    i32 %136 = phi [^while.body11, i32 %94] [^b21, i32 %196];
    i1 %137 = ztrunc i32 %135 to i1;
    cbr i1 %137(prob = 0.5), ^if.then13, ^if.else6;
  ^if.else2:
    i32 %138 = load i32* %1;
    i32 %139 = sdiv i32 %38, i32 %138;
    ubr ^b16;
  ^if.then9:
    i32* %140 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %110];
    i32 %141 = load i32* %140;
    i32 %142 = add i32 %111, i32 %141;
    ubr ^b14;
  ^if.then10:
    i32 %143 = and i32 %103, i32 1;
    i1 %144 = icmp eq i32 %143, i32 0;
    cbr i1 %144(prob = 0.5), ^if.then14, ^b17;
  ^if.else3:
    i1 %145 = ztrunc i32 %103 to i1;
    cbr i1 %145(prob = 0.5), ^if.then14, ^b17;
  ^if.then11:
    i32 %146 = and i32 %119, i32 1;
    i1 %147 = icmp eq i32 %146, i32 0;
    cbr i1 %147(prob = 0.5), ^if.then15, ^b18;
  ^if.then12:
    i32 %148 = and i32 %124, i32 1;
    i1 %149 = icmp eq i32 %148, i32 0;
    cbr i1 %149(prob = 0.5), ^if.then16, ^b19;
  ^b14:
    i32 %150 = phi [^while.body13, i32 %111] [^if.then9, i32 %142];
    i32 %151 = add i32 %110, i32 1;
    i1 %152 = icmp slt i32 %151, i32 16;
    i32 %153 = sdiv i32 %112, i32 2;
    cbr i1 %152(prob = 0.9375), ^while.body13, ^b20;
  ^if.else4:
    i1 %154 = ztrunc i32 %119 to i1;
    cbr i1 %154(prob = 0.5), ^if.then15, ^b18;
  ^if.else5:
    i1 %155 = ztrunc i32 %124 to i1;
    cbr i1 %155(prob = 0.5), ^if.then16, ^b19;
  ^if.then13:
    i32 %156 = and i32 %136, i32 1;
    i1 %157 = icmp eq i32 %156, i32 0;
    cbr i1 %157(prob = 0.5), ^if.then17, ^b21;
  ^b15:
    i32 %158 = phi [^if.then7, i32 %109] [^if.else1, i32 %127];
    i1 %159 = icmp neq i32 %158, i32 0;
    cbr i1 %159(prob = 0.984615), ^while.body2, ^b2;
  ^if.else6:
    i1 %160 = ztrunc i32 %136 to i1;
    cbr i1 %160(prob = 0.5), ^if.then17, ^b21;
  ^b16:
    i32 %161 = phi [^if.then8, i32 %132] [^if.else2, i32 %139];
    i1 %162 = icmp neq i32 %161, i32 0;
    cbr i1 %162(prob = 0.984615), ^while.body3, ^b3;
  ^if.then14:
    i32* %163 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %100];
    i32 %164 = load i32* %163;
    i32 %165 = add i32 %101, i32 %164;
    ubr ^b17;
  ^if.then15:
    i32* %166 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %116];
    i32 %167 = load i32* %166;
    i32 %168 = add i32 %117, i32 %167;
    ubr ^b18;
  ^if.then16:
    i32* %169 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %121];
    i32 %170 = load i32* %169;
    i32 %171 = add i32 %122, i32 %170;
    ubr ^b19;
  ^if.then17:
    i32* %172 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %133];
    i32 %173 = load i32* %172;
    i32 %174 = add i32 %134, i32 %173;
    ubr ^b21;
  ^b17:
    i32 %175 = phi [^if.then10, i32 %101] [^if.else3, i32 %101] [^if.then14, i32 %165];
    i32 %176 = add i32 %100, i32 1;
    i1 %177 = icmp slt i32 %176, i32 16;
    i32 %178 = sdiv i32 %102, i32 2;
    i32 %179 = sdiv i32 %103, i32 2;
    cbr i1 %177(prob = 0.9375), ^while.body12, ^while.body17;
  ^b18:
    i32 %180 = phi [^if.then11, i32 %117] [^if.else4, i32 %117] [^if.then15, i32 %168];
    i32 %181 = add i32 %116, i32 1;
    i1 %182 = icmp slt i32 %181, i32 16;
    i32 %183 = sdiv i32 %118, i32 2;
    i32 %184 = sdiv i32 %119, i32 2;
    cbr i1 %182(prob = 0.9375), ^while.body14, ^while.body18;
  ^b19:
    i32 %185 = phi [^if.then12, i32 %122] [^if.else5, i32 %122] [^if.then16, i32 %171];
    i32 %186 = add i32 %121, i32 1;
    i1 %187 = icmp slt i32 %186, i32 16;
    i32 %188 = sdiv i32 %123, i32 2;
    i32 %189 = sdiv i32 %124, i32 2;
    cbr i1 %187(prob = 0.9375), ^while.body15, ^while.body19;
  ^b20:
    i1 %190 = icmp neq i32 %150, i32 0;
    i1 %191 = icmp neq i32 %89, i32 0;
    cbr i1 %190(prob = 0.5), ^if.then18, ^b22;
  ^b21:
    i32 %192 = phi [^if.then13, i32 %134] [^if.else6, i32 %134] [^if.then17, i32 %174];
    i32 %193 = add i32 %133, i32 1;
    i1 %194 = icmp slt i32 %193, i32 16;
    i32 %195 = sdiv i32 %135, i32 2;
    i32 %196 = sdiv i32 %136, i32 2;
    cbr i1 %194(prob = 0.9375), ^while.body16, ^while.body20;
  ^while.body17:
    i32 %197 = phi [^b17, i32 0] [^b23, i32 %241];
    i32 %198 = phi [^b17, i32 %86] [^b23, i32 %243];
    i32 %199 = phi [^b17, i32 %85] [^b23, i32 %244];
    i32 %200 = phi [^b17, i32 0] [^b23, i32 %240];
    i32 %201 = and i32 %198, i32 %199;
    i1 %202 = ztrunc i32 %201 to i1;
    cbr i1 %202(prob = 0.5), ^if.then19, ^b23;
  ^if.then18:
    cbr i1 %191(prob = 0.984615), ^while.body21, ^b22;
  ^while.body18:
    i32 %203 = phi [^b18, i32 0] [^b24, i32 %246];
    i32 %204 = phi [^b18, i32 0] [^b24, i32 %245];
    i32 %205 = phi [^b18, i32 %91] [^b24, i32 %248];
    i32 %206 = phi [^b18, i32 %90] [^b24, i32 %249];
    i32 %207 = and i32 %205, i32 %206;
    i1 %208 = ztrunc i32 %207 to i1;
    cbr i1 %208(prob = 0.5), ^if.then20, ^b24;
  ^while.body19:
    i32 %209 = phi [^b19, i32 0] [^b25, i32 %251];
    i32 %210 = phi [^b19, i32 0] [^b25, i32 %250];
    i32 %211 = phi [^b19, i32 %93] [^b25, i32 %253];
    i32 %212 = phi [^b19, i32 %92] [^b25, i32 %254];
    i32 %213 = and i32 %211, i32 %212;
    i1 %214 = ztrunc i32 %213 to i1;
    cbr i1 %214(prob = 0.5), ^if.then21, ^b25;
  ^b22:
    i32 %215 = phi [^b20, i32 %88] [^if.then18, i32 0] [^b49, i32 %367];
    cbr i1 %191(prob = 0.984615), ^while.body22, ^b26;
  ^while.body20:
    i32 %216 = phi [^b21, i32 0] [^b27, i32 %258];
    i32 %217 = phi [^b21, i32 %95] [^b27, i32 %260];
    i32 %218 = phi [^b21, i32 %94] [^b27, i32 %261];
    i32 %219 = phi [^b21, i32 0] [^b27, i32 %257];
    i32 %220 = and i32 %217, i32 %218;
    i1 %221 = ztrunc i32 %220 to i1;
    cbr i1 %221(prob = 0.5), ^if.then22, ^b27;
  ^if.then19:
    i32* %222 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %197];
    i32 %223 = load i32* %222;
    i32 %224 = add i32 %200, i32 %223;
    ubr ^b23;
  ^while.body21:
    i32 %225 = phi [^if.then18, i32 %89] [^b49, i32 %451];
    i32 %226 = phi [^if.then18, i32 0] [^b49, i32 %367];
    i32 %227 = phi [^if.then18, i32 %88] [^b49, i32 %389];
    ubr ^while.body23;
  ^if.then20:
    i32* %228 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %203];
    i32 %229 = load i32* %228;
    i32 %230 = add i32 %204, i32 %229;
    ubr ^b24;
  ^if.then21:
    i32* %231 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %209];
    i32 %232 = load i32* %231;
    i32 %233 = add i32 %210, i32 %232;
    ubr ^b25;
  ^while.body22:
    i32 %234 = phi [^b22, i32 %89] [^b50, i32 %454];
    i32 %235 = phi [^b22, i32 0] [^b50, i32 %372];
    i32 %236 = phi [^b22, i32 %89] [^b50, i32 %391];
    ubr ^while.body24;
  ^if.then22:
    i32* %237 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %216];
    i32 %238 = load i32* %237;
    i32 %239 = add i32 %219, i32 %238;
    ubr ^b27;
  ^b23:
    i32 %240 = phi [^while.body17, i32 %200] [^if.then19, i32 %224];
    i32 %241 = add i32 %197, i32 1;
    i1 %242 = icmp slt i32 %241, i32 16;
    i32 %243 = sdiv i32 %198, i32 2;
    i32 %244 = sdiv i32 %199, i32 2;
    cbr i1 %242(prob = 0.9375), ^while.body17, ^b28;
  ^b24:
    i32 %245 = phi [^while.body18, i32 %204] [^if.then20, i32 %230];
    i32 %246 = add i32 %203, i32 1;
    i1 %247 = icmp slt i32 %246, i32 16;
    i32 %248 = sdiv i32 %205, i32 2;
    i32 %249 = sdiv i32 %206, i32 2;
    cbr i1 %247(prob = 0.9375), ^while.body18, ^b29;
  ^b25:
    i32 %250 = phi [^while.body19, i32 %210] [^if.then21, i32 %233];
    i32 %251 = add i32 %209, i32 1;
    i1 %252 = icmp slt i32 %251, i32 16;
    i32 %253 = sdiv i32 %211, i32 2;
    i32 %254 = sdiv i32 %212, i32 2;
    cbr i1 %252(prob = 0.9375), ^while.body19, ^b30;
  ^b26:
    i32 %255 = phi [^b22, i32 0] [^b50, i32 %372];
    i1 %256 = icmp sgt i32 %87, i32 32767;
    cbr i1 %256(prob = 0.5), ^if.then23, ^if.else7;
  ^b27:
    i32 %257 = phi [^while.body20, i32 %219] [^if.then22, i32 %239];
    i32 %258 = add i32 %216, i32 1;
    i1 %259 = icmp slt i32 %258, i32 16;
    i32 %260 = sdiv i32 %217, i32 2;
    i32 %261 = sdiv i32 %218, i32 2;
    cbr i1 %259(prob = 0.9375), ^while.body20, ^b31;
  ^b28:
    i32 %262 = load i32* %1;
    i32 %263 = mul i32 %240, i32 %262;
    ubr ^while.body25;
  ^while.body23:
    i32 %264 = phi [^while.body21, i32 0] [^b32, i32 %296];
    i32 %265 = phi [^while.body21, i32 %225] [^b32, i32 %298];
    i32 %266 = phi [^while.body21, i32 1] [^b32, i32 0];
    i32 %267 = phi [^while.body21, i32 0] [^b32, i32 %295];
    i32 %268 = and i32 %265, i32 %266;
    i1 %269 = ztrunc i32 %268 to i1;
    cbr i1 %269(prob = 0.5), ^if.then24, ^b32;
  ^if.then23:
    i32 %270 = load i32* %1;
    i32 %271 = sdiv i32 %87, i32 %270;
    i32 %272 = add i32 %271, i32 65536;
    i32 %273 = load i32* %15;
    i32 %274 = sub i32 %272, i32 %273;
    ubr ^b33;
  ^b29:
    i32 %275 = load i32* %1;
    i32 %276 = mul i32 %245, i32 %275;
    ubr ^while.body26;
  ^b30:
    i32 %277 = load i32* %1;
    i32 %278 = mul i32 %250, i32 %277;
    ubr ^while.body27;
  ^while.body24:
    i32 %279 = phi [^while.body22, i32 0] [^b34, i32 %308];
    i32 %280 = phi [^while.body22, i32 %234] [^b34, i32 %310];
    i32 %281 = phi [^while.body22, i32 1] [^b34, i32 0];
    i32 %282 = phi [^while.body22, i32 0] [^b34, i32 %307];
    i32 %283 = and i32 %280, i32 %281;
    i1 %284 = ztrunc i32 %283 to i1;
    cbr i1 %284(prob = 0.5), ^if.then25, ^b34;
  ^if.else7:
    i32 %285 = load i32* %1;
    i32 %286 = sdiv i32 %87, i32 %285;
    ubr ^b33;
  ^b31:
    i32 %287 = load i32* %1;
    i32 %288 = mul i32 %257, i32 %287;
    ubr ^while.body28;
  ^if.then24:
    i32* %289 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %264];
    i32 %290 = load i32* %289;
    i32 %291 = add i32 %267, i32 %290;
    ubr ^b32;
  ^if.then25:
    i32* %292 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %279];
    i32 %293 = load i32* %292;
    i32 %294 = add i32 %282, i32 %293;
    ubr ^b34;
  ^b32:
    i32 %295 = phi [^while.body23, i32 %267] [^if.then24, i32 %291];
    i32 %296 = add i32 %264, i32 1;
    i1 %297 = icmp slt i32 %296, i32 16;
    i32 %298 = sdiv i32 %265, i32 2;
    cbr i1 %297(prob = 0.9375), ^while.body23, ^b35;
  ^while.body25:
    i32 %299 = phi [^b28, i32 0] [^b36, i32 %344];
    i32 %300 = phi [^b28, i32 0] [^b36, i32 %343];
    i32 %301 = phi [^b28, i32 %263] [^b36, i32 %346];
    i32 %302 = phi [^b28, i32 65535] [^b36, i32 %347];
    i32 %303 = and i32 %301, i32 %302;
    i1 %304 = ztrunc i32 %303 to i1;
    cbr i1 %304(prob = 0.5), ^if.then26, ^b36;
  ^b33:
    i32 %305 = phi [^if.then23, i32 %274] [^if.else7, i32 %286];
    i1 %306 = icmp sgt i32 %305, i32 0;
    cbr i1 %306(prob = 0.984615), ^while.body8, ^b37;
  ^b34:
    i32 %307 = phi [^while.body24, i32 %282] [^if.then25, i32 %294];
    i32 %308 = add i32 %279, i32 1;
    i1 %309 = icmp slt i32 %308, i32 16;
    i32 %310 = sdiv i32 %280, i32 2;
    cbr i1 %309(prob = 0.9375), ^while.body24, ^b38;
  ^while.body26:
    i32 %311 = phi [^b29, i32 0] [^b39, i32 %353];
    i32 %312 = phi [^b29, i32 %276] [^b39, i32 %355];
    i32 %313 = phi [^b29, i32 65535] [^b39, i32 %356];
    i32 %314 = phi [^b29, i32 0] [^b39, i32 %352];
    i32 %315 = and i32 %312, i32 %313;
    i1 %316 = ztrunc i32 %315 to i1;
    cbr i1 %316(prob = 0.5), ^if.then27, ^b39;
  ^while.body27:
    i32 %317 = phi [^b30, i32 0] [^b40, i32 %358];
    i32 %318 = phi [^b30, i32 0] [^b40, i32 %357];
    i32 %319 = phi [^b30, i32 %278] [^b40, i32 %360];
    i32 %320 = phi [^b30, i32 65535] [^b40, i32 %361];
    i32 %321 = and i32 %319, i32 %320;
    i1 %322 = ztrunc i32 %321 to i1;
    cbr i1 %322(prob = 0.5), ^if.then28, ^b40;
  ^while.body28:
    i32 %323 = phi [^b31, i32 0] [^b41, i32 %363];
    i32 %324 = phi [^b31, i32 %288] [^b41, i32 %365];
    i32 %325 = phi [^b31, i32 65535] [^b41, i32 %366];
    i32 %326 = phi [^b31, i32 0] [^b41, i32 %362];
    i32 %327 = and i32 %324, i32 %325;
    i1 %328 = ztrunc i32 %327 to i1;
    cbr i1 %328(prob = 0.5), ^if.then29, ^b41;
  ^if.then26:
    i32* %329 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %299];
    i32 %330 = load i32* %329;
    i32 %331 = add i32 %300, i32 %330;
    ubr ^b36;
  ^if.then27:
    i32* %332 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %311];
    i32 %333 = load i32* %332;
    i32 %334 = add i32 %314, i32 %333;
    ubr ^b39;
  ^if.then28:
    i32* %335 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %317];
    i32 %336 = load i32* %335;
    i32 %337 = add i32 %318, i32 %336;
    ubr ^b40;
  ^if.then29:
    i32* %338 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %323];
    i32 %339 = load i32* %338;
    i32 %340 = add i32 %326, i32 %339;
    ubr ^b41;
  ^b35:
    i1 %341 = icmp neq i32 %295, i32 0;
    i1 %342 = icmp neq i32 %227, i32 0;
    cbr i1 %341(prob = 0.5), ^if.then30, ^b42;
  ^b36:
    i32 %343 = phi [^while.body25, i32 %300] [^if.then26, i32 %331];
    i32 %344 = add i32 %299, i32 1;
    i1 %345 = icmp slt i32 %344, i32 16;
    i32 %346 = sdiv i32 %301, i32 2;
    i32 %347 = sdiv i32 %302, i32 2;
    cbr i1 %345(prob = 0.9375), ^while.body25, ^368;
  ^b37:
    call (i32) -> void @putint(i32 %215);
    call (i32) -> void @putch(i32 10);
    i32 %348 = add i32 %82, i32 1;
    i1 %349 = icmp slt i32 %348, i32 16;
    cbr i1 %349(prob = 0.928571), ^while.body6, ^while.header;
  ^b38:
    i1 %350 = icmp neq i32 %307, i32 0;
    i1 %351 = icmp neq i32 %236, i32 0;
    cbr i1 %350(prob = 0.5), ^if.then31, ^b43;
  ^b39:
    i32 %352 = phi [^while.body26, i32 %314] [^if.then27, i32 %334];
    i32 %353 = add i32 %311, i32 1;
    i1 %354 = icmp slt i32 %353, i32 16;
    i32 %355 = sdiv i32 %312, i32 2;
    i32 %356 = sdiv i32 %313, i32 2;
    cbr i1 %354(prob = 0.9375), ^while.body26, ^373;
  ^b40:
    i32 %357 = phi [^while.body27, i32 %318] [^if.then28, i32 %337];
    i32 %358 = add i32 %317, i32 1;
    i1 %359 = icmp slt i32 %358, i32 16;
    i32 %360 = sdiv i32 %319, i32 2;
    i32 %361 = sdiv i32 %320, i32 2;
    cbr i1 %359(prob = 0.9375), ^while.body27, ^375;
  ^b41:
    i32 %362 = phi [^while.body28, i32 %326] [^if.then29, i32 %340];
    i32 %363 = add i32 %323, i32 1;
    i1 %364 = icmp slt i32 %363, i32 16;
    i32 %365 = sdiv i32 %324, i32 2;
    i32 %366 = sdiv i32 %325, i32 2;
    cbr i1 %364(prob = 0.9375), ^while.body28, ^377;
  ^if.then30:
    cbr i1 %342(prob = 0.984615), ^while.body29, ^b42;
  ^b42:
    i32 %367 = phi [^b35, i32 %226] [^if.then30, i32 %226] [^663, i32 %471];
    cbr i1 %342(prob = 0.984615), ^while.body30, ^b44;
  ^if.then31:
    cbr i1 %351(prob = 0.984615), ^while.body31, ^b43;
  ^368:
    i1 %369 = icmp neq i32 %343, i32 0;
    cbr i1 %369(prob = 0.984615), ^while.body7, ^b10;
  ^while.header:
    i32 %370 = phi [^b37, i32 0] [^b48, i32 %440];
    i1 %371 = icmp slt i32 %370, i32 16;
    cbr i1 %371(prob = 0.984615), ^while.body33, ^b46;
  ^b43:
    i32 %372 = phi [^b38, i32 %235] [^if.then31, i32 %235] [^671, i32 %481];
    cbr i1 %351(prob = 0.984615), ^while.body32, ^b45;
  ^373:
    i1 %374 = icmp neq i32 %352, i32 0;
    cbr i1 %374(prob = 0.984615), ^while.body9, ^b12;
  ^375:
    i1 %376 = icmp neq i32 %357, i32 0;
    cbr i1 %376(prob = 0.984615), ^while.body10, ^b11;
  ^377:
    i1 %378 = icmp neq i32 %362, i32 0;
    cbr i1 %378(prob = 0.984615), ^while.body11, ^b13;
  ^while.body29:
    i32 %379 = phi [^if.then30, i32 %227] [^663, i32 %635];
    i32 %380 = phi [^if.then30, i32 %226] [^663, i32 %471];
    ubr ^while.body35;
  ^while.body30:
    i32 %381 = phi [^b42, i32 %227] [^669, i32 %646];
    i32 %382 = phi [^b42, i32 %227] [^669, i32 %476];
    ubr ^while.body36;
  ^while.body31:
    i32 %383 = phi [^if.then31, i32 %236] [^671, i32 %651];
    i32 %384 = phi [^if.then31, i32 %235] [^671, i32 %481];
    ubr ^while.body37;
  ^while.body32:
    i32 %385 = phi [^b43, i32 %236] [^673, i32 %656];
    i32 %386 = phi [^b43, i32 %236] [^673, i32 %490];
    ubr ^while.body38;
  ^while.body33:
    i32* %387 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %370];
    i1 %388 = icmp sgt i32 %370, i32 0;
    cbr i1 %388(prob = 0.984615), ^while.body34, ^b47;
  ^b44:
    i32 %389 = phi [^b42, i32 %227] [^669, i32 %476];
    i1 %390 = icmp sgt i32 %225, i32 32767;
    cbr i1 %390(prob = 0.5), ^if.then32, ^if.else8;
  ^b45:
    i32 %391 = phi [^b43, i32 %236] [^673, i32 %490];
    i1 %392 = icmp sgt i32 %234, i32 32767;
    cbr i1 %392(prob = 0.5), ^if.then33, ^if.else9;
  ^b46:
    i32 %393 = phi [^while.header, i32 0] [^b47, i32 1] [^b75, i32 1];
    ret i32 %393;
  ^while.body34:
    i32 %394 = phi [^while.body33, i32 %370] [^b69, i32 %640];
    i32 %395 = phi [^while.body33, i32 1] [^b69, i32 %548];
    i32 %396 = phi [^while.body33, i32 2] [^b69, i32 %568];
    ubr ^while.body39;
  ^while.body35:
    i32 %397 = phi [^while.body29, i32 0] [^b51, i32 %472];
    i32 %398 = phi [^while.body29, i32 %380] [^b51, i32 %474];
    i32 %399 = phi [^while.body29, i32 %379] [^b51, i32 %475];
    i32 %400 = phi [^while.body29, i32 0] [^b51, i32 %471];
    i1 %401 = ztrunc i32 %398 to i1;
    cbr i1 %401(prob = 0.5), ^if.then34, ^if.else10;
  ^if.then32:
    i32 %402 = load i32* %1;
    i32 %403 = sdiv i32 %225, i32 %402;
    i32 %404 = add i32 %403, i32 65536;
    i32 %405 = load i32* %15;
    i32 %406 = sub i32 %404, i32 %405;
    ubr ^b49;
  ^while.body36:
    i32 %407 = phi [^while.body30, i32 0] [^b52, i32 %477];
    i32 %408 = phi [^while.body30, i32 0] [^b52, i32 %476];
    i32 %409 = phi [^while.body30, i32 %382] [^b52, i32 %479];
    i32 %410 = phi [^while.body30, i32 %381] [^b52, i32 %480];
    i1 %411 = ztrunc i32 %409 to i1;
    cbr i1 %411(prob = 0.5), ^if.then35, ^if.else11;
  ^while.body37:
    i32 %412 = phi [^while.body31, i32 0] [^b53, i32 %482];
    i32 %413 = phi [^while.body31, i32 %384] [^b53, i32 %484];
    i32 %414 = phi [^while.body31, i32 %383] [^b53, i32 %485];
    i32 %415 = phi [^while.body31, i32 0] [^b53, i32 %481];
    i1 %416 = ztrunc i32 %413 to i1;
    cbr i1 %416(prob = 0.5), ^if.then36, ^if.else12;
  ^if.else8:
    i32 %417 = load i32* %1;
    i32 %418 = sdiv i32 %225, i32 %417;
    ubr ^b49;
  ^if.then33:
    i32 %419 = load i32* %1;
    i32 %420 = sdiv i32 %234, i32 %419;
    i32 %421 = add i32 %420, i32 65536;
    i32 %422 = load i32* %15;
    i32 %423 = sub i32 %421, i32 %422;
    ubr ^b50;
  ^while.body38:
    i32 %424 = phi [^while.body32, i32 0] [^b55, i32 %491];
    i32 %425 = phi [^while.body32, i32 0] [^b55, i32 %490];
    i32 %426 = phi [^while.body32, i32 %386] [^b55, i32 %493];
    i32 %427 = phi [^while.body32, i32 %385] [^b55, i32 %494];
    i1 %428 = ztrunc i32 %426 to i1;
    cbr i1 %428(prob = 0.5), ^if.then37, ^if.else13;
  ^if.else9:
    i32 %429 = load i32* %1;
    i32 %430 = sdiv i32 %234, i32 %429;
    ubr ^b50;
  ^b47:
    i32 %431 = load i32* %387;
    i1 %432 = icmp neq i32 %431, i32 1;
    cbr i1 %432(prob = 0.5), ^b46, ^b48;
  ^if.then34:
    i32 %433 = and i32 %399, i32 1;
    i1 %434 = icmp eq i32 %433, i32 0;
    cbr i1 %434(prob = 0.5), ^if.then38, ^b51;
  ^if.else10:
    i1 %435 = ztrunc i32 %399 to i1;
    cbr i1 %435(prob = 0.5), ^if.then38, ^b51;
  ^if.then35:
    i32 %436 = and i32 %410, i32 1;
    i1 %437 = icmp eq i32 %436, i32 0;
    cbr i1 %437(prob = 0.5), ^if.then39, ^b52;
  ^if.then36:
    i32 %438 = and i32 %414, i32 1;
    i1 %439 = icmp eq i32 %438, i32 0;
    cbr i1 %439(prob = 0.5), ^if.then40, ^b53;
  ^b48:
    i32 %440 = add i32 %370, i32 1;
    ubr ^while.header;
  ^while.body39:
    i32 %441 = phi [^while.body34, i32 0] [^b54, i32 %487];
    i32 %442 = phi [^while.body34, i32 0] [^b54, i32 %486];
    i32 %443 = phi [^while.body34, i32 %394] [^b54, i32 %489];
    i32 %444 = phi [^while.body34, i32 1] [^b54, i32 0];
    i32 %445 = and i32 %443, i32 %444;
    i1 %446 = ztrunc i32 %445 to i1;
    cbr i1 %446(prob = 0.5), ^if.then41, ^b54;
  ^if.else11:
    i1 %447 = ztrunc i32 %410 to i1;
    cbr i1 %447(prob = 0.5), ^if.then39, ^b52;
  ^if.else12:
    i1 %448 = ztrunc i32 %414 to i1;
    cbr i1 %448(prob = 0.5), ^if.then40, ^b53;
  ^if.then37:
    i32 %449 = and i32 %427, i32 1;
    i1 %450 = icmp eq i32 %449, i32 0;
    cbr i1 %450(prob = 0.5), ^if.then42, ^b55;
  ^b49:
    i32 %451 = phi [^if.then32, i32 %406] [^if.else8, i32 %418];
    i1 %452 = icmp neq i32 %451, i32 0;
    cbr i1 %452(prob = 0.984615), ^while.body21, ^b22;
  ^if.else13:
    i1 %453 = ztrunc i32 %427 to i1;
    cbr i1 %453(prob = 0.5), ^if.then42, ^b55;
  ^b50:
    i32 %454 = phi [^if.then33, i32 %423] [^if.else9, i32 %430];
    i1 %455 = icmp neq i32 %454, i32 0;
    cbr i1 %455(prob = 0.984615), ^while.body22, ^b26;
  ^if.then38:
    i32* %456 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %397];
    i32 %457 = load i32* %456;
    i32 %458 = add i32 %400, i32 %457;
    ubr ^b51;
  ^if.then39:
    i32* %459 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %407];
    i32 %460 = load i32* %459;
    i32 %461 = add i32 %408, i32 %460;
    ubr ^b52;
  ^if.then40:
    i32* %462 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %412];
    i32 %463 = load i32* %462;
    i32 %464 = add i32 %415, i32 %463;
    ubr ^b53;
  ^if.then41:
    i32* %465 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %441];
    i32 %466 = load i32* %465;
    i32 %467 = add i32 %442, i32 %466;
    ubr ^b54;
  ^if.then42:
    i32* %468 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %424];
    i32 %469 = load i32* %468;
    i32 %470 = add i32 %425, i32 %469;
    ubr ^b55;
  ^b51:
    i32 %471 = phi [^if.then34, i32 %400] [^if.else10, i32 %400] [^if.then38, i32 %458];
    i32 %472 = add i32 %397, i32 1;
    i1 %473 = icmp slt i32 %472, i32 16;
    i32 %474 = sdiv i32 %398, i32 2;
    i32 %475 = sdiv i32 %399, i32 2;
    cbr i1 %473(prob = 0.9375), ^while.body35, ^while.body40;
  ^b52:
    i32 %476 = phi [^if.then35, i32 %408] [^if.else11, i32 %408] [^if.then39, i32 %461];
    i32 %477 = add i32 %407, i32 1;
    i1 %478 = icmp slt i32 %477, i32 16;
    i32 %479 = sdiv i32 %409, i32 2;
    i32 %480 = sdiv i32 %410, i32 2;
    cbr i1 %478(prob = 0.9375), ^while.body36, ^while.body41;
  ^b53:
    i32 %481 = phi [^if.then36, i32 %415] [^if.else12, i32 %415] [^if.then40, i32 %464];
    i32 %482 = add i32 %412, i32 1;
    i1 %483 = icmp slt i32 %482, i32 16;
    i32 %484 = sdiv i32 %413, i32 2;
    i32 %485 = sdiv i32 %414, i32 2;
    cbr i1 %483(prob = 0.9375), ^while.body37, ^while.body42;
  ^b54:
    i32 %486 = phi [^while.body39, i32 %442] [^if.then41, i32 %467];
    i32 %487 = add i32 %441, i32 1;
    i1 %488 = icmp slt i32 %487, i32 16;
    i32 %489 = sdiv i32 %443, i32 2;
    cbr i1 %488(prob = 0.9375), ^while.body39, ^b56;
  ^b55:
    i32 %490 = phi [^if.then37, i32 %425] [^if.else13, i32 %425] [^if.then42, i32 %470];
    i32 %491 = add i32 %424, i32 1;
    i1 %492 = icmp slt i32 %491, i32 16;
    i32 %493 = sdiv i32 %426, i32 2;
    i32 %494 = sdiv i32 %427, i32 2;
    cbr i1 %492(prob = 0.9375), ^while.body38, ^while.body43;
  ^while.body40:
    i32 %495 = phi [^b51, i32 0] [^b57, i32 %534];
    i32 %496 = phi [^b51, i32 0] [^b57, i32 %533];
    i32 %497 = phi [^b51, i32 %380] [^b57, i32 %536];
    i32 %498 = phi [^b51, i32 %379] [^b57, i32 %537];
    i32 %499 = and i32 %497, i32 %498;
    i1 %500 = ztrunc i32 %499 to i1;
    cbr i1 %500(prob = 0.5), ^if.then43, ^b57;
  ^while.body41:
    i32 %501 = phi [^b52, i32 0] [^b58, i32 %539];
    i32 %502 = phi [^b52, i32 0] [^b58, i32 %538];
    i32 %503 = phi [^b52, i32 %382] [^b58, i32 %541];
    i32 %504 = phi [^b52, i32 %381] [^b58, i32 %542];
    i32 %505 = and i32 %503, i32 %504;
    i1 %506 = ztrunc i32 %505 to i1;
    cbr i1 %506(prob = 0.5), ^if.then44, ^b58;
  ^while.body42:
    i32 %507 = phi [^b53, i32 0] [^b59, i32 %544];
    i32 %508 = phi [^b53, i32 %384] [^b59, i32 %546];
    i32 %509 = phi [^b53, i32 %383] [^b59, i32 %547];
    i32 %510 = phi [^b53, i32 0] [^b59, i32 %543];
    i32 %511 = and i32 %508, i32 %509;
    i1 %512 = ztrunc i32 %511 to i1;
    cbr i1 %512(prob = 0.5), ^if.then45, ^b59;
  ^b56:
    i1 %513 = icmp neq i32 %486, i32 0;
    i1 %514 = icmp neq i32 %396, i32 0;
    cbr i1 %513(prob = 0.5), ^if.then47, ^b60;
  ^while.body43:
    i32 %515 = phi [^b55, i32 0] [^b61, i32 %550];
    i32 %516 = phi [^b55, i32 0] [^b61, i32 %549];
    i32 %517 = phi [^b55, i32 %386] [^b61, i32 %552];
    i32 %518 = phi [^b55, i32 %385] [^b61, i32 %553];
    i32 %519 = and i32 %517, i32 %518;
    i1 %520 = ztrunc i32 %519 to i1;
    cbr i1 %520(prob = 0.5), ^if.then46, ^b61;
  ^if.then43:
    i32* %521 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %495];
    i32 %522 = load i32* %521;
    i32 %523 = add i32 %496, i32 %522;
    ubr ^b57;
  ^if.then44:
    i32* %524 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %501];
    i32 %525 = load i32* %524;
    i32 %526 = add i32 %502, i32 %525;
    ubr ^b58;
  ^if.then45:
    i32* %527 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %507];
    i32 %528 = load i32* %527;
    i32 %529 = add i32 %510, i32 %528;
    ubr ^b59;
  ^if.then46:
    i32* %530 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %515];
    i32 %531 = load i32* %530;
    i32 %532 = add i32 %516, i32 %531;
    ubr ^b61;
  ^b57:
    i32 %533 = phi [^while.body40, i32 %496] [^if.then43, i32 %523];
    i32 %534 = add i32 %495, i32 1;
    i1 %535 = icmp slt i32 %534, i32 16;
    i32 %536 = sdiv i32 %497, i32 2;
    i32 %537 = sdiv i32 %498, i32 2;
    cbr i1 %535(prob = 0.9375), ^while.body40, ^b62;
  ^if.then47:
    cbr i1 %514(prob = 0.984615), ^while.body44, ^b60;
  ^b58:
    i32 %538 = phi [^while.body41, i32 %502] [^if.then44, i32 %526];
    i32 %539 = add i32 %501, i32 1;
    i1 %540 = icmp slt i32 %539, i32 16;
    i32 %541 = sdiv i32 %503, i32 2;
    i32 %542 = sdiv i32 %504, i32 2;
    cbr i1 %540(prob = 0.9375), ^while.body41, ^b63;
  ^b59:
    i32 %543 = phi [^while.body42, i32 %510] [^if.then45, i32 %529];
    i32 %544 = add i32 %507, i32 1;
    i1 %545 = icmp slt i32 %544, i32 16;
    i32 %546 = sdiv i32 %508, i32 2;
    i32 %547 = sdiv i32 %509, i32 2;
    cbr i1 %545(prob = 0.9375), ^while.body42, ^b64;
  ^b60:
    i32 %548 = phi [^b56, i32 %395] [^if.then47, i32 0] [^b81, i32 %675];
    cbr i1 %514(prob = 0.984615), ^while.body45, ^b66;
  ^b61:
    i32 %549 = phi [^while.body43, i32 %516] [^if.then46, i32 %532];
    i32 %550 = add i32 %515, i32 1;
    i1 %551 = icmp slt i32 %550, i32 16;
    i32 %552 = sdiv i32 %517, i32 2;
    i32 %553 = sdiv i32 %518, i32 2;
    cbr i1 %551(prob = 0.9375), ^while.body43, ^b65;
  ^while.body44:
    i32 %554 = phi [^if.then47, i32 %396] [^b81, i32 %734];
    i32 %555 = phi [^if.then47, i32 0] [^b81, i32 %675];
    i32 %556 = phi [^if.then47, i32 %395] [^b81, i32 %685];
    ubr ^while.body46;
  ^b62:
    i32 %557 = load i32* %1;
    i32 %558 = mul i32 %533, i32 %557;
    ubr ^while.body47;
  ^while.body45:
    i32 %559 = phi [^b60, i32 %396] [^b82, i32 %737];
    i32 %560 = phi [^b60, i32 0] [^b82, i32 %676];
    i32 %561 = phi [^b60, i32 %396] [^b82, i32 %687];
    ubr ^while.body48;
  ^b63:
    i32 %562 = load i32* %1;
    i32 %563 = mul i32 %538, i32 %562;
    ubr ^while.body49;
  ^b64:
    i32 %564 = load i32* %1;
    i32 %565 = mul i32 %543, i32 %564;
    ubr ^while.body50;
  ^b65:
    i32 %566 = load i32* %1;
    i32 %567 = mul i32 %549, i32 %566;
    ubr ^while.body51;
  ^b66:
    i32 %568 = phi [^b60, i32 0] [^b82, i32 %676];
    i1 %569 = icmp sgt i32 %394, i32 32767;
    cbr i1 %569(prob = 0.5), ^if.then48, ^if.else14;
  ^while.body46:
    i32 %570 = phi [^while.body44, i32 0] [^b67, i32 %632];
    i32 %571 = phi [^while.body44, i32 %554] [^b67, i32 %634];
    i32 %572 = phi [^while.body44, i32 1] [^b67, i32 0];
    i32 %573 = phi [^while.body44, i32 0] [^b67, i32 %631];
    i32 %574 = and i32 %571, i32 %572;
    i1 %575 = ztrunc i32 %574 to i1;
    cbr i1 %575(prob = 0.5), ^if.then49, ^b67;
  ^if.then48:
    i32 %576 = load i32* %1;
    i32 %577 = sdiv i32 %394, i32 %576;
    i32 %578 = add i32 %577, i32 65536;
    i32 %579 = load i32* %15;
    i32 %580 = sub i32 %578, i32 %579;
    ubr ^b69;
  ^while.body47:
    i32 %581 = phi [^b62, i32 0] [^b68, i32 %636];
    i32 %582 = phi [^b62, i32 %558] [^b68, i32 %638];
    i32 %583 = phi [^b62, i32 65535] [^b68, i32 %639];
    i32 %584 = phi [^b62, i32 0] [^b68, i32 %635];
    i32 %585 = and i32 %582, i32 %583;
    i1 %586 = ztrunc i32 %585 to i1;
    cbr i1 %586(prob = 0.5), ^if.then50, ^b68;
  ^while.body48:
    i32 %587 = phi [^while.body45, i32 0] [^b70, i32 %643];
    i32 %588 = phi [^while.body45, i32 0] [^b70, i32 %642];
    i32 %589 = phi [^while.body45, i32 %559] [^b70, i32 %645];
    i32 %590 = phi [^while.body45, i32 1] [^b70, i32 0];
    i32 %591 = and i32 %589, i32 %590;
    i1 %592 = ztrunc i32 %591 to i1;
    cbr i1 %592(prob = 0.5), ^if.then51, ^b70;
  ^if.else14:
    i32 %593 = load i32* %1;
    i32 %594 = sdiv i32 %394, i32 %593;
    ubr ^b69;
  ^while.body49:
    i32 %595 = phi [^b63, i32 0] [^b71, i32 %647];
    i32 %596 = phi [^b63, i32 0] [^b71, i32 %646];
    i32 %597 = phi [^b63, i32 %563] [^b71, i32 %649];
    i32 %598 = phi [^b63, i32 65535] [^b71, i32 %650];
    i32 %599 = and i32 %597, i32 %598;
    i1 %600 = ztrunc i32 %599 to i1;
    cbr i1 %600(prob = 0.5), ^if.then52, ^b71;
  ^while.body50:
    i32 %601 = phi [^b64, i32 0] [^b72, i32 %652];
    i32 %602 = phi [^b64, i32 %565] [^b72, i32 %654];
    i32 %603 = phi [^b64, i32 65535] [^b72, i32 %655];
    i32 %604 = phi [^b64, i32 0] [^b72, i32 %651];
    i32 %605 = and i32 %602, i32 %603;
    i1 %606 = ztrunc i32 %605 to i1;
    cbr i1 %606(prob = 0.5), ^if.then53, ^b72;
  ^while.body51:
    i32 %607 = phi [^b65, i32 0] [^b73, i32 %657];
    i32 %608 = phi [^b65, i32 %567] [^b73, i32 %659];
    i32 %609 = phi [^b65, i32 65535] [^b73, i32 %660];
    i32 %610 = phi [^b65, i32 0] [^b73, i32 %656];
    i32 %611 = and i32 %608, i32 %609;
    i1 %612 = ztrunc i32 %611 to i1;
    cbr i1 %612(prob = 0.5), ^if.then54, ^b73;
  ^if.then49:
    i32* %613 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %570];
    i32 %614 = load i32* %613;
    i32 %615 = add i32 %573, i32 %614;
    ubr ^b67;
  ^if.then50:
    i32* %616 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %581];
    i32 %617 = load i32* %616;
    i32 %618 = add i32 %584, i32 %617;
    ubr ^b68;
  ^if.then51:
    i32* %619 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %587];
    i32 %620 = load i32* %619;
    i32 %621 = add i32 %588, i32 %620;
    ubr ^b70;
  ^if.then52:
    i32* %622 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %595];
    i32 %623 = load i32* %622;
    i32 %624 = add i32 %596, i32 %623;
    ubr ^b71;
  ^if.then53:
    i32* %625 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %601];
    i32 %626 = load i32* %625;
    i32 %627 = add i32 %604, i32 %626;
    ubr ^b72;
  ^if.then54:
    i32* %628 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %607];
    i32 %629 = load i32* %628;
    i32 %630 = add i32 %610, i32 %629;
    ubr ^b73;
  ^b67:
    i32 %631 = phi [^while.body46, i32 %573] [^if.then49, i32 %615];
    i32 %632 = add i32 %570, i32 1;
    i1 %633 = icmp slt i32 %632, i32 16;
    i32 %634 = sdiv i32 %571, i32 2;
    cbr i1 %633(prob = 0.9375), ^while.body46, ^b74;
  ^b68:
    i32 %635 = phi [^while.body47, i32 %584] [^if.then50, i32 %618];
    i32 %636 = add i32 %581, i32 1;
    i1 %637 = icmp slt i32 %636, i32 16;
    i32 %638 = sdiv i32 %582, i32 2;
    i32 %639 = sdiv i32 %583, i32 2;
    cbr i1 %637(prob = 0.9375), ^while.body47, ^663;
  ^b69:
    i32 %640 = phi [^if.then48, i32 %580] [^if.else14, i32 %594];
    i1 %641 = icmp sgt i32 %640, i32 0;
    cbr i1 %641(prob = 0.984615), ^while.body34, ^b75;
  ^b70:
    i32 %642 = phi [^while.body48, i32 %588] [^if.then51, i32 %621];
    i32 %643 = add i32 %587, i32 1;
    i1 %644 = icmp slt i32 %643, i32 16;
    i32 %645 = sdiv i32 %589, i32 2;
    cbr i1 %644(prob = 0.9375), ^while.body48, ^b76;
  ^b71:
    i32 %646 = phi [^while.body49, i32 %596] [^if.then52, i32 %624];
    i32 %647 = add i32 %595, i32 1;
    i1 %648 = icmp slt i32 %647, i32 16;
    i32 %649 = sdiv i32 %597, i32 2;
    i32 %650 = sdiv i32 %598, i32 2;
    cbr i1 %648(prob = 0.9375), ^while.body49, ^669;
  ^b72:
    i32 %651 = phi [^while.body50, i32 %604] [^if.then53, i32 %627];
    i32 %652 = add i32 %601, i32 1;
    i1 %653 = icmp slt i32 %652, i32 16;
    i32 %654 = sdiv i32 %602, i32 2;
    i32 %655 = sdiv i32 %603, i32 2;
    cbr i1 %653(prob = 0.9375), ^while.body50, ^671;
  ^b73:
    i32 %656 = phi [^while.body51, i32 %610] [^if.then54, i32 %630];
    i32 %657 = add i32 %607, i32 1;
    i1 %658 = icmp slt i32 %657, i32 16;
    i32 %659 = sdiv i32 %608, i32 2;
    i32 %660 = sdiv i32 %609, i32 2;
    cbr i1 %658(prob = 0.9375), ^while.body51, ^673;
  ^b74:
    i1 %661 = icmp neq i32 %631, i32 0;
    i1 %662 = icmp neq i32 %556, i32 0;
    cbr i1 %661(prob = 0.5), ^if.then55, ^b77;
  ^663:
    i1 %664 = icmp neq i32 %635, i32 0;
    cbr i1 %664(prob = 0.984615), ^while.body29, ^b42;
  ^b75:
    i32 %665 = load i32* %387;
    i1 %666 = icmp neq i32 %548, i32 %665;
    cbr i1 %666(prob = 0.5), ^b46, ^b48;
  ^b76:
    i1 %667 = icmp neq i32 %642, i32 0;
    i1 %668 = icmp neq i32 %561, i32 0;
    cbr i1 %667(prob = 0.5), ^if.then56, ^b78;
  ^669:
    i1 %670 = icmp neq i32 %646, i32 0;
    cbr i1 %670(prob = 0.984615), ^while.body30, ^b44;
  ^671:
    i1 %672 = icmp neq i32 %651, i32 0;
    cbr i1 %672(prob = 0.984615), ^while.body31, ^b43;
  ^673:
    i1 %674 = icmp neq i32 %656, i32 0;
    cbr i1 %674(prob = 0.984615), ^while.body32, ^b45;
  ^if.then55:
    cbr i1 %662(prob = 0.984615), ^while.body52, ^b77;
  ^b77:
    i32 %675 = phi [^b74, i32 %555] [^if.then55, i32 %555] [^891, i32 %751];
    cbr i1 %662(prob = 0.984615), ^while.body53, ^b79;
  ^if.then56:
    cbr i1 %668(prob = 0.984615), ^while.body54, ^b78;
  ^b78:
    i32 %676 = phi [^b76, i32 %560] [^if.then56, i32 %560] [^895, i32 %761];
    cbr i1 %668(prob = 0.984615), ^while.body55, ^b80;
  ^while.body52:
    i32 %677 = phi [^if.then55, i32 %556] [^891, i32 %871];
    i32 %678 = phi [^if.then55, i32 %555] [^891, i32 %751];
    ubr ^while.body56;
  ^while.body53:
    i32 %679 = phi [^b77, i32 %556] [^893, i32 %876];
    i32 %680 = phi [^b77, i32 %556] [^893, i32 %756];
    ubr ^while.body57;
  ^while.body54:
    i32 %681 = phi [^if.then56, i32 %561] [^895, i32 %881];
    i32 %682 = phi [^if.then56, i32 %560] [^895, i32 %761];
    ubr ^while.body58;
  ^while.body55:
    i32 %683 = phi [^b78, i32 %561] [^897, i32 %886];
    i32 %684 = phi [^b78, i32 %561] [^897, i32 %766];
    ubr ^while.body59;
  ^b79:
    i32 %685 = phi [^b77, i32 %556] [^893, i32 %756];
    i1 %686 = icmp sgt i32 %554, i32 32767;
    cbr i1 %686(prob = 0.5), ^if.then57, ^if.else15;
  ^b80:
    i32 %687 = phi [^b78, i32 %561] [^897, i32 %766];
    i1 %688 = icmp sgt i32 %559, i32 32767;
    cbr i1 %688(prob = 0.5), ^if.then58, ^if.else16;
  ^while.body56:
    i32 %689 = phi [^while.body52, i32 0] [^b83, i32 %752];
    i32 %690 = phi [^while.body52, i32 0] [^b83, i32 %751];
    i32 %691 = phi [^while.body52, i32 %678] [^b83, i32 %754];
    i32 %692 = phi [^while.body52, i32 %677] [^b83, i32 %755];
    i1 %693 = ztrunc i32 %691 to i1;
    cbr i1 %693(prob = 0.5), ^if.then59, ^if.else17;
  ^if.then57:
    i32 %694 = load i32* %1;
    i32 %695 = sdiv i32 %554, i32 %694;
    i32 %696 = add i32 %695, i32 65536;
    i32 %697 = load i32* %15;
    i32 %698 = sub i32 %696, i32 %697;
    ubr ^b81;
  ^while.body57:
    i32 %699 = phi [^while.body53, i32 0] [^b84, i32 %757];
    i32 %700 = phi [^while.body53, i32 %680] [^b84, i32 %759];
    i32 %701 = phi [^while.body53, i32 %679] [^b84, i32 %760];
    i32 %702 = phi [^while.body53, i32 0] [^b84, i32 %756];
    i1 %703 = ztrunc i32 %700 to i1;
    cbr i1 %703(prob = 0.5), ^if.then60, ^if.else18;
  ^while.body58:
    i32 %704 = phi [^while.body54, i32 0] [^b85, i32 %762];
    i32 %705 = phi [^while.body54, i32 0] [^b85, i32 %761];
    i32 %706 = phi [^while.body54, i32 %682] [^b85, i32 %764];
    i32 %707 = phi [^while.body54, i32 %681] [^b85, i32 %765];
    i1 %708 = ztrunc i32 %706 to i1;
    cbr i1 %708(prob = 0.5), ^if.then61, ^if.else19;
  ^if.else15:
    i32 %709 = load i32* %1;
    i32 %710 = sdiv i32 %554, i32 %709;
    ubr ^b81;
  ^if.then58:
    i32 %711 = load i32* %1;
    i32 %712 = sdiv i32 %559, i32 %711;
    i32 %713 = add i32 %712, i32 65536;
    i32 %714 = load i32* %15;
    i32 %715 = sub i32 %713, i32 %714;
    ubr ^b82;
  ^while.body59:
    i32 %716 = phi [^while.body55, i32 0] [^b86, i32 %767];
    i32 %717 = phi [^while.body55, i32 0] [^b86, i32 %766];
    i32 %718 = phi [^while.body55, i32 %684] [^b86, i32 %769];
    i32 %719 = phi [^while.body55, i32 %683] [^b86, i32 %770];
    i1 %720 = ztrunc i32 %718 to i1;
    cbr i1 %720(prob = 0.5), ^if.then62, ^if.else20;
  ^if.else16:
    i32 %721 = load i32* %1;
    i32 %722 = sdiv i32 %559, i32 %721;
    ubr ^b82;
  ^if.then59:
    i32 %723 = and i32 %692, i32 1;
    i1 %724 = icmp eq i32 %723, i32 0;
    cbr i1 %724(prob = 0.5), ^if.then63, ^b83;
  ^if.else17:
    i1 %725 = ztrunc i32 %692 to i1;
    cbr i1 %725(prob = 0.5), ^if.then63, ^b83;
  ^if.then60:
    i32 %726 = and i32 %701, i32 1;
    i1 %727 = icmp eq i32 %726, i32 0;
    cbr i1 %727(prob = 0.5), ^if.then64, ^b84;
  ^if.then61:
    i32 %728 = and i32 %707, i32 1;
    i1 %729 = icmp eq i32 %728, i32 0;
    cbr i1 %729(prob = 0.5), ^if.then65, ^b85;
  ^if.else18:
    i1 %730 = ztrunc i32 %701 to i1;
    cbr i1 %730(prob = 0.5), ^if.then64, ^b84;
  ^if.else19:
    i1 %731 = ztrunc i32 %707 to i1;
    cbr i1 %731(prob = 0.5), ^if.then65, ^b85;
  ^if.then62:
    i32 %732 = and i32 %719, i32 1;
    i1 %733 = icmp eq i32 %732, i32 0;
    cbr i1 %733(prob = 0.5), ^if.then66, ^b86;
  ^b81:
    i32 %734 = phi [^if.then57, i32 %698] [^if.else15, i32 %710];
    i1 %735 = icmp neq i32 %734, i32 0;
    cbr i1 %735(prob = 0.984615), ^while.body44, ^b60;
  ^if.else20:
    i1 %736 = ztrunc i32 %719 to i1;
    cbr i1 %736(prob = 0.5), ^if.then66, ^b86;
  ^b82:
    i32 %737 = phi [^if.then58, i32 %715] [^if.else16, i32 %722];
    i1 %738 = icmp neq i32 %737, i32 0;
    cbr i1 %738(prob = 0.984615), ^while.body45, ^b66;
  ^if.then63:
    i32* %739 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %689];
    i32 %740 = load i32* %739;
    i32 %741 = add i32 %690, i32 %740;
    ubr ^b83;
  ^if.then64:
    i32* %742 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %699];
    i32 %743 = load i32* %742;
    i32 %744 = add i32 %702, i32 %743;
    ubr ^b84;
  ^if.then65:
    i32* %745 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %704];
    i32 %746 = load i32* %745;
    i32 %747 = add i32 %705, i32 %746;
    ubr ^b85;
  ^if.then66:
    i32* %748 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %716];
    i32 %749 = load i32* %748;
    i32 %750 = add i32 %717, i32 %749;
    ubr ^b86;
  ^b83:
    i32 %751 = phi [^if.then59, i32 %690] [^if.else17, i32 %690] [^if.then63, i32 %741];
    i32 %752 = add i32 %689, i32 1;
    i1 %753 = icmp slt i32 %752, i32 16;
    i32 %754 = sdiv i32 %691, i32 2;
    i32 %755 = sdiv i32 %692, i32 2;
    cbr i1 %753(prob = 0.9375), ^while.body56, ^while.body60;
  ^b84:
    i32 %756 = phi [^if.then60, i32 %702] [^if.else18, i32 %702] [^if.then64, i32 %744];
    i32 %757 = add i32 %699, i32 1;
    i1 %758 = icmp slt i32 %757, i32 16;
    i32 %759 = sdiv i32 %700, i32 2;
    i32 %760 = sdiv i32 %701, i32 2;
    cbr i1 %758(prob = 0.9375), ^while.body57, ^while.body61;
  ^b85:
    i32 %761 = phi [^if.then61, i32 %705] [^if.else19, i32 %705] [^if.then65, i32 %747];
    i32 %762 = add i32 %704, i32 1;
    i1 %763 = icmp slt i32 %762, i32 16;
    i32 %764 = sdiv i32 %706, i32 2;
    i32 %765 = sdiv i32 %707, i32 2;
    cbr i1 %763(prob = 0.9375), ^while.body58, ^while.body62;
  ^b86:
    i32 %766 = phi [^if.then62, i32 %717] [^if.else20, i32 %717] [^if.then66, i32 %750];
    i32 %767 = add i32 %716, i32 1;
    i1 %768 = icmp slt i32 %767, i32 16;
    i32 %769 = sdiv i32 %718, i32 2;
    i32 %770 = sdiv i32 %719, i32 2;
    cbr i1 %768(prob = 0.9375), ^while.body59, ^while.body63;
  ^while.body60:
    i32 %771 = phi [^b83, i32 0] [^b87, i32 %808];
    i32 %772 = phi [^b83, i32 0] [^b87, i32 %807];
    i32 %773 = phi [^b83, i32 %678] [^b87, i32 %810];
    i32 %774 = phi [^b83, i32 %677] [^b87, i32 %811];
    i32 %775 = and i32 %773, i32 %774;
    i1 %776 = ztrunc i32 %775 to i1;
    cbr i1 %776(prob = 0.5), ^if.then67, ^b87;
  ^while.body61:
    i32 %777 = phi [^b84, i32 0] [^b88, i32 %813];
    i32 %778 = phi [^b84, i32 0] [^b88, i32 %812];
    i32 %779 = phi [^b84, i32 %680] [^b88, i32 %815];
    i32 %780 = phi [^b84, i32 %679] [^b88, i32 %816];
    i32 %781 = and i32 %779, i32 %780;
    i1 %782 = ztrunc i32 %781 to i1;
    cbr i1 %782(prob = 0.5), ^if.then68, ^b88;
  ^while.body62:
    i32 %783 = phi [^b85, i32 0] [^b89, i32 %818];
    i32 %784 = phi [^b85, i32 0] [^b89, i32 %817];
    i32 %785 = phi [^b85, i32 %682] [^b89, i32 %820];
    i32 %786 = phi [^b85, i32 %681] [^b89, i32 %821];
    i32 %787 = and i32 %785, i32 %786;
    i1 %788 = ztrunc i32 %787 to i1;
    cbr i1 %788(prob = 0.5), ^if.then69, ^b89;
  ^while.body63:
    i32 %789 = phi [^b86, i32 0] [^b90, i32 %823];
    i32 %790 = phi [^b86, i32 0] [^b90, i32 %822];
    i32 %791 = phi [^b86, i32 %684] [^b90, i32 %825];
    i32 %792 = phi [^b86, i32 %683] [^b90, i32 %826];
    i32 %793 = and i32 %791, i32 %792;
    i1 %794 = ztrunc i32 %793 to i1;
    cbr i1 %794(prob = 0.5), ^if.then70, ^b90;
  ^if.then67:
    i32* %795 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %771];
    i32 %796 = load i32* %795;
    i32 %797 = add i32 %772, i32 %796;
    ubr ^b87;
  ^if.then68:
    i32* %798 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %777];
    i32 %799 = load i32* %798;
    i32 %800 = add i32 %778, i32 %799;
    ubr ^b88;
  ^if.then69:
    i32* %801 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %783];
    i32 %802 = load i32* %801;
    i32 %803 = add i32 %784, i32 %802;
    ubr ^b89;
  ^if.then70:
    i32* %804 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %789];
    i32 %805 = load i32* %804;
    i32 %806 = add i32 %790, i32 %805;
    ubr ^b90;
  ^b87:
    i32 %807 = phi [^while.body60, i32 %772] [^if.then67, i32 %797];
    i32 %808 = add i32 %771, i32 1;
    i1 %809 = icmp slt i32 %808, i32 16;
    i32 %810 = sdiv i32 %773, i32 2;
    i32 %811 = sdiv i32 %774, i32 2;
    cbr i1 %809(prob = 0.9375), ^while.body60, ^b91;
  ^b88:
    i32 %812 = phi [^while.body61, i32 %778] [^if.then68, i32 %800];
    i32 %813 = add i32 %777, i32 1;
    i1 %814 = icmp slt i32 %813, i32 16;
    i32 %815 = sdiv i32 %779, i32 2;
    i32 %816 = sdiv i32 %780, i32 2;
    cbr i1 %814(prob = 0.9375), ^while.body61, ^b92;
  ^b89:
    i32 %817 = phi [^while.body62, i32 %784] [^if.then69, i32 %803];
    i32 %818 = add i32 %783, i32 1;
    i1 %819 = icmp slt i32 %818, i32 16;
    i32 %820 = sdiv i32 %785, i32 2;
    i32 %821 = sdiv i32 %786, i32 2;
    cbr i1 %819(prob = 0.9375), ^while.body62, ^b93;
  ^b90:
    i32 %822 = phi [^while.body63, i32 %790] [^if.then70, i32 %806];
    i32 %823 = add i32 %789, i32 1;
    i1 %824 = icmp slt i32 %823, i32 16;
    i32 %825 = sdiv i32 %791, i32 2;
    i32 %826 = sdiv i32 %792, i32 2;
    cbr i1 %824(prob = 0.9375), ^while.body63, ^b94;
  ^b91:
    i32 %827 = load i32* %1;
    i32 %828 = mul i32 %807, i32 %827;
    ubr ^while.body64;
  ^b92:
    i32 %829 = load i32* %1;
    i32 %830 = mul i32 %812, i32 %829;
    ubr ^while.body65;
  ^b93:
    i32 %831 = load i32* %1;
    i32 %832 = mul i32 %817, i32 %831;
    ubr ^while.body66;
  ^b94:
    i32 %833 = load i32* %1;
    i32 %834 = mul i32 %822, i32 %833;
    ubr ^while.body67;
  ^while.body64:
    i32 %835 = phi [^b91, i32 0] [^b95, i32 %872];
    i32 %836 = phi [^b91, i32 %828] [^b95, i32 %874];
    i32 %837 = phi [^b91, i32 65535] [^b95, i32 %875];
    i32 %838 = phi [^b91, i32 0] [^b95, i32 %871];
    i32 %839 = and i32 %836, i32 %837;
    i1 %840 = ztrunc i32 %839 to i1;
    cbr i1 %840(prob = 0.5), ^if.then71, ^b95;
  ^while.body65:
    i32 %841 = phi [^b92, i32 0] [^b96, i32 %877];
    i32 %842 = phi [^b92, i32 %830] [^b96, i32 %879];
    i32 %843 = phi [^b92, i32 65535] [^b96, i32 %880];
    i32 %844 = phi [^b92, i32 0] [^b96, i32 %876];
    i32 %845 = and i32 %842, i32 %843;
    i1 %846 = ztrunc i32 %845 to i1;
    cbr i1 %846(prob = 0.5), ^if.then72, ^b96;
  ^while.body66:
    i32 %847 = phi [^b93, i32 0] [^b97, i32 %882];
    i32 %848 = phi [^b93, i32 %832] [^b97, i32 %884];
    i32 %849 = phi [^b93, i32 65535] [^b97, i32 %885];
    i32 %850 = phi [^b93, i32 0] [^b97, i32 %881];
    i32 %851 = and i32 %848, i32 %849;
    i1 %852 = ztrunc i32 %851 to i1;
    cbr i1 %852(prob = 0.5), ^if.then73, ^b97;
  ^while.body67:
    i32 %853 = phi [^b94, i32 0] [^b98, i32 %887];
    i32 %854 = phi [^b94, i32 %834] [^b98, i32 %889];
    i32 %855 = phi [^b94, i32 65535] [^b98, i32 %890];
    i32 %856 = phi [^b94, i32 0] [^b98, i32 %886];
    i32 %857 = and i32 %854, i32 %855;
    i1 %858 = ztrunc i32 %857 to i1;
    cbr i1 %858(prob = 0.5), ^if.then74, ^b98;
  ^if.then71:
    i32* %859 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %835];
    i32 %860 = load i32* %859;
    i32 %861 = add i32 %838, i32 %860;
    ubr ^b95;
  ^if.then72:
    i32* %862 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %841];
    i32 %863 = load i32* %862;
    i32 %864 = add i32 %844, i32 %863;
    ubr ^b96;
  ^if.then73:
    i32* %865 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %847];
    i32 %866 = load i32* %865;
    i32 %867 = add i32 %850, i32 %866;
    ubr ^b97;
  ^if.then74:
    i32* %868 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %853];
    i32 %869 = load i32* %868;
    i32 %870 = add i32 %856, i32 %869;
    ubr ^b98;
  ^b95:
    i32 %871 = phi [^while.body64, i32 %838] [^if.then71, i32 %861];
    i32 %872 = add i32 %835, i32 1;
    i1 %873 = icmp slt i32 %872, i32 16;
    i32 %874 = sdiv i32 %836, i32 2;
    i32 %875 = sdiv i32 %837, i32 2;
    cbr i1 %873(prob = 0.9375), ^while.body64, ^891;
  ^b96:
    i32 %876 = phi [^while.body65, i32 %844] [^if.then72, i32 %864];
    i32 %877 = add i32 %841, i32 1;
    i1 %878 = icmp slt i32 %877, i32 16;
    i32 %879 = sdiv i32 %842, i32 2;
    i32 %880 = sdiv i32 %843, i32 2;
    cbr i1 %878(prob = 0.9375), ^while.body65, ^893;
  ^b97:
    i32 %881 = phi [^while.body66, i32 %850] [^if.then73, i32 %867];
    i32 %882 = add i32 %847, i32 1;
    i1 %883 = icmp slt i32 %882, i32 16;
    i32 %884 = sdiv i32 %848, i32 2;
    i32 %885 = sdiv i32 %849, i32 2;
    cbr i1 %883(prob = 0.9375), ^while.body66, ^895;
  ^b98:
    i32 %886 = phi [^while.body67, i32 %856] [^if.then74, i32 %870];
    i32 %887 = add i32 %853, i32 1;
    i1 %888 = icmp slt i32 %887, i32 16;
    i32 %889 = sdiv i32 %854, i32 2;
    i32 %890 = sdiv i32 %855, i32 2;
    cbr i1 %888(prob = 0.9375), ^while.body67, ^897;
  ^891:
    i1 %892 = icmp neq i32 %871, i32 0;
    cbr i1 %892(prob = 0.984615), ^while.body52, ^b77;
  ^893:
    i1 %894 = icmp neq i32 %876, i32 0;
    cbr i1 %894(prob = 0.984615), ^while.body53, ^b79;
  ^895:
    i1 %896 = icmp neq i32 %881, i32 0;
    cbr i1 %896(prob = 0.984615), ^while.body54, ^b78;
  ^897:
    i1 %898 = icmp neq i32 %886, i32 0;
    cbr i1 %898(prob = 0.984615), ^while.body55, ^b80;
}
