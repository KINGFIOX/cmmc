internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [16 * i32]* %SHIFT_TABLE = alloc [16 * i32];
    i32* %0 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 0];
    store i32* %0 with i32 1;
    i32* %1 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 1];
    store i32* %1 with i32 2;
    i32* %2 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 2];
    store i32* %2 with i32 4;
    i32* %3 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 3];
    store i32* %3 with i32 8;
    i32* %4 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 4];
    store i32* %4 with i32 16;
    i32* %5 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 5];
    store i32* %5 with i32 32;
    i32* %6 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 6];
    store i32* %6 with i32 64;
    i32* %7 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 7];
    store i32* %7 with i32 128;
    i32* %8 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 8];
    store i32* %8 with i32 256;
    i32* %9 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 9];
    store i32* %9 with i32 512;
    i32* %10 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 10];
    store i32* %10 with i32 1024;
    i32* %11 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 11];
    store i32* %11 with i32 2048;
    i32* %12 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 12];
    store i32* %12 with i32 4096;
    i32* %13 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 13];
    store i32* %13 with i32 8192;
    i32* %14 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 14];
    store i32* %14 with i32 16384;
    i32* %15 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 15];
    store i32* %15 with i32 32768;
    ubr ^while.header;
^while.header:
    i32 %16 = phi [^b20, i32 %34] [^entry, i32 1];
    i32 %17 = phi [^b20, i32 %135] [^entry, i32 0];
    i32 %18 = phi [^b20, i32 %61] [^entry, i32 2];
    i1 %19 = scmp gt i32 %17, i32 0;
    cbr i1 %19(prob = 0.97), ^while.header1, ^b;
^b:
    call (i32) -> void @putint(i32 %16);
    call (i32) -> void @putch(i32 10);
    ubr ^while.header2;
^while.header1:
    i32 %20 = phi [^while.header, i32 1] [^b6, i32 %50];
    i32 %21 = phi [^while.header, i32 %17] [^b6, i32 %49];
    i32 %22 = phi [^while.header, i32 0] [^b6, i32 %51];
    i32 %23 = phi [^while.header, i32 0] [^b6, i32 %48];
    i1 %24 = scmp lt i32 %22, i32 16;
    cbr i1 %24(prob = 0.97), ^while.body, ^b1;
^while.body:
    i32 %25 = srem i32 %21, i32 2;
    i1 %26 = scmp neq i32 %25, i32 0;
    cbr i1 %26(prob = 0.5), ^b2, ^b5;
^while.header2:
    i32 %27 = phi [^b41, i32 %68] [^b, i32 1];
    i32 %28 = phi [^b41, i32 %240] [^b, i32 1];
    i32 %29 = phi [^b41, i32 %120] [^b, i32 2];
    i1 %30 = scmp gt i32 %28, i32 0;
    cbr i1 %30(prob = 0.97), ^while.header3, ^b3;
^b1:
    i1 %31 = scmp neq i32 %23, i32 0;
    cbr i1 %31(prob = 0.5), ^while.header4, ^b4;
^b2:
    i32 %32 = srem i32 %20, i32 2;
    i1 %33 = scmp neq i32 %32, i32 0;
    ubr ^b5;
^b3:
    call (i32) -> void @putint(i32 %27);
    call (i32) -> void @putch(i32 10);
    ubr ^while.header6;
^b4:
    i32 %34 = phi [^while.header4, i32 %41] [^b1, i32 %16];
    ubr ^while.header7;
^b5:
    i1 %35 = phi [^b2, i1 %33] [^while.body, i1 false];
    cbr i1 %35(prob = 0.5), ^if.then, ^b6;
^while.header3:
    i32 %36 = phi [^while.header2, i32 1] [^b15, i32 %99];
    i32 %37 = phi [^while.header2, i32 %28] [^b15, i32 %98];
    i32 %38 = phi [^while.header2, i32 0] [^b15, i32 %100];
    i32 %39 = phi [^while.header2, i32 0] [^b15, i32 %97];
    i1 %40 = scmp lt i32 %38, i32 16;
    cbr i1 %40(prob = 0.97), ^while.body1, ^b7;
^while.header4:
    i32 %41 = phi [^b1, i32 0] [^b52, i32 %101];
    i32 %42 = phi [^b1, i32 %18] [^b52, i32 %326];
    i32 %43 = phi [^b1, i32 %16] [^b52, i32 %158];
    i1 %44 = scmp neq i32 %42, i32 0;
    cbr i1 %44(prob = 0.97), ^while.header5, ^b4;
^if.then:
    i32* %45 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %22];
    i32 %46 = load i32* %45;
    i32 %47 = add i32 %46, i32 %23;
    ubr ^b6;
^b6:
    i32 %48 = phi [^b5, i32 %23] [^if.then, i32 %47];
    i32 %49 = sdiv i32 %21, i32 2;
    i32 %50 = sdiv i32 %20, i32 2;
    i32 %51 = add i32 %22, i32 1;
    ubr ^while.header1;
^while.body1:
    i32 %52 = srem i32 %37, i32 2;
    i1 %53 = scmp neq i32 %52, i32 0;
    cbr i1 %53(prob = 0.5), ^b8, ^b10;
^while.header5:
    i32 %54 = phi [^while.header4, i32 1] [^b21, i32 %138];
    i32 %55 = phi [^while.header4, i32 %42] [^b21, i32 %137];
    i32 %56 = phi [^while.header4, i32 0] [^b21, i32 %139];
    i32 %57 = phi [^while.header4, i32 0] [^b21, i32 %136];
    i1 %58 = scmp lt i32 %56, i32 16;
    cbr i1 %58(prob = 0.97), ^while.body2, ^b11;
^while.header6:
    i32 %59 = phi [^b14, i32 %94] [^b3, i32 2];
    i1 %60 = scmp lt i32 %59, i32 16;
    cbr i1 %60(prob = 0.97), ^while.header8, ^while.header11;
^while.header7:
    i32 %61 = phi [^b66, i32 %140] [^b4, i32 0];
    i32 %62 = phi [^b66, i32 %431] [^b4, i32 %18];
    i32 %63 = phi [^b66, i32 %225] [^b4, i32 %18];
    i1 %64 = scmp neq i32 %62, i32 0;
    cbr i1 %64(prob = 0.97), ^while.header9, ^b12;
^b7:
    i1 %65 = scmp neq i32 %39, i32 0;
    cbr i1 %65(prob = 0.5), ^while.header10, ^b9;
^b8:
    i32 %66 = srem i32 %36, i32 2;
    i1 %67 = scmp neq i32 %66, i32 0;
    ubr ^b10;
^b9:
    i32 %68 = phi [^while.header10, i32 %81] [^b7, i32 %27];
    ubr ^while.header15;
^while.body2:
    i32 %69 = srem i32 %55, i32 2;
    i1 %70 = scmp neq i32 %69, i32 0;
    cbr i1 %70(prob = 0.5), ^b13, ^b17;
^b10:
    i1 %71 = phi [^while.body1, i1 false] [^b8, i1 %67];
    cbr i1 %71(prob = 0.5), ^if.then1, ^b15;
^while.header8:
    i32 %72 = phi [^while.header6, i32 1] [^b83, i32 %185];
    i32 %73 = phi [^while.header6, i32 %59] [^b83, i32 %536];
    i32 %74 = phi [^while.header6, i32 2] [^b83, i32 %280];
    i1 %75 = scmp gt i32 %73, i32 0;
    cbr i1 %75(prob = 0.97), ^while.header12, ^b14;
^while.header9:
    i32 %76 = phi [^while.header7, i32 1] [^b31, i32 %188];
    i32 %77 = phi [^while.header7, i32 %62] [^b31, i32 %187];
    i32 %78 = phi [^while.header7, i32 0] [^b31, i32 %189];
    i32 %79 = phi [^while.header7, i32 0] [^b31, i32 %186];
    i1 %80 = scmp lt i32 %78, i32 16;
    cbr i1 %80(prob = 0.97), ^while.body3, ^b18;
^while.header10:
    i32 %81 = phi [^b7, i32 0] [^b85, i32 %190];
    i32 %82 = phi [^b7, i32 %29] [^b85, i32 %541];
    i32 %83 = phi [^b7, i32 %27] [^b85, i32 %290];
    i1 %84 = scmp neq i32 %82, i32 0;
    cbr i1 %84(prob = 0.97), ^while.header13, ^b9;
^b11:
    i1 %85 = scmp neq i32 %57, i32 0;
    cbr i1 %85(prob = 0.5), ^while.header14, ^b16;
^b12:
    i1 %86 = scmp gt i32 %17, i32 32767;
    cbr i1 %86(prob = 0.5), ^if.then2, ^if.else;
^while.header11:
    i32 %87 = phi [^while.header6, i32 0] [^b34, i32 %198];
    i1 %88 = scmp lt i32 %87, i32 16;
    cbr i1 %88(prob = 0.97), ^while.header16, ^entry1;
^b13:
    i32 %89 = srem i32 %54, i32 2;
    i1 %90 = scmp neq i32 %89, i32 0;
    ubr ^b17;
^if.then1:
    i32* %91 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %38];
    i32 %92 = load i32* %91;
    i32 %93 = add i32 %92, i32 %39;
    ubr ^b15;
^b14:
    call (i32) -> void @putint(i32 %72);
    call (i32) -> void @putch(i32 10);
    i32 %94 = add i32 %59, i32 1;
    ubr ^while.header6;
^if.then2:
    i32 %95 = sdiv i32 %17, i32 2;
    i32 %96 = add i32 %95, i32 32768;
    ubr ^b20;
^b15:
    i32 %97 = phi [^b10, i32 %39] [^if.then1, i32 %93];
    i32 %98 = sdiv i32 %37, i32 2;
    i32 %99 = sdiv i32 %36, i32 2;
    i32 %100 = add i32 %38, i32 1;
    ubr ^while.header3;
^b16:
    i32 %101 = phi [^while.header14, i32 %118] [^b11, i32 %41];
    ubr ^while.header19;
^if.else:
    i32 %102 = load i32* %1;
    i32 %103 = sdiv i32 %17, i32 %102;
    ubr ^b20;
^while.body3:
    i32 %104 = srem i32 %77, i32 2;
    i1 %105 = scmp neq i32 %104, i32 0;
    cbr i1 %105(prob = 0.5), ^b19, ^b23;
^while.header12:
    i32 %106 = phi [^while.header8, i32 1] [^b42, i32 %243];
    i32 %107 = phi [^while.header8, i32 %73] [^b42, i32 %242];
    i32 %108 = phi [^while.header8, i32 0] [^b42, i32 %244];
    i32 %109 = phi [^while.header8, i32 0] [^b42, i32 %241];
    i1 %110 = scmp lt i32 %108, i32 16;
    cbr i1 %110(prob = 0.97), ^while.body4, ^b24;
^b17:
    i1 %111 = phi [^while.body2, i1 false] [^b13, i1 %90];
    cbr i1 %111(prob = 0.5), ^if.then3, ^b21;
^while.header13:
    i32 %112 = phi [^while.header10, i32 1] [^b43, i32 %247];
    i32 %113 = phi [^while.header10, i32 %82] [^b43, i32 %246];
    i32 %114 = phi [^while.header10, i32 0] [^b43, i32 %248];
    i32 %115 = phi [^while.header10, i32 0] [^b43, i32 %245];
    i1 %116 = scmp lt i32 %114, i32 16;
    cbr i1 %116(prob = 0.97), ^while.body5, ^b25;
^while.header14:
    i32 %117 = phi [^while.header42, i32 %392] [^b11, i32 %43];
    i32 %118 = phi [^while.header42, i32 %148] [^b11, i32 %41];
    i1 %119 = scmp neq i32 %117, i32 0;
    cbr i1 %119(prob = 0.97), ^while.header17, ^b16;
^while.header15:
    i32 %120 = phi [^b107, i32 %257] [^b9, i32 0];
    i32 %121 = phi [^b107, i32 %671] [^b9, i32 %29];
    i32 %122 = phi [^b107, i32 %395] [^b9, i32 %29];
    i1 %123 = scmp neq i32 %121, i32 0;
    cbr i1 %123(prob = 0.97), ^while.header18, ^b26;
^b18:
    i1 %124 = scmp neq i32 %79, i32 0;
    cbr i1 %124(prob = 0.5), ^while.header20, ^b22;
^while.header16:
    i32 %125 = phi [^while.header11, i32 1] [^b109, i32 %258];
    i32 %126 = phi [^while.header11, i32 %87] [^b109, i32 %676];
    i32 %127 = phi [^while.header11, i32 2] [^b109, i32 %399];
    i1 %128 = scmp gt i32 %126, i32 0;
    cbr i1 %128(prob = 0.97), ^while.header21, ^b27;
^entry1:
    i32 %129 = phi [^b27, i32 1] [^while.header11, i32 0];
    ret i32 %129;
^b19:
    i32 %130 = srem i32 %76, i32 2;
    i1 %131 = scmp neq i32 %130, i32 0;
    ubr ^b23;
^if.then3:
    i32* %132 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %56];
    i32 %133 = load i32* %132;
    i32 %134 = add i32 %133, i32 %57;
    ubr ^b21;
^b20:
    i32 %135 = phi [^if.else, i32 %103] [^if.then2, i32 %96];
    ubr ^while.header;
^b21:
    i32 %136 = phi [^b17, i32 %57] [^if.then3, i32 %134];
    i32 %137 = sdiv i32 %55, i32 2;
    i32 %138 = sdiv i32 %54, i32 2;
    i32 %139 = add i32 %56, i32 1;
    ubr ^while.header5;
^b22:
    i32 %140 = phi [^while.header20, i32 %161] [^b18, i32 %61];
    ubr ^while.header27;
^while.body4:
    i32 %141 = srem i32 %107, i32 2;
    i1 %142 = scmp neq i32 %141, i32 0;
    cbr i1 %142(prob = 0.5), ^b28, ^b33;
^while.body5:
    i32 %143 = srem i32 %113, i32 2;
    i1 %144 = scmp neq i32 %143, i32 0;
    cbr i1 %144(prob = 0.5), ^b29, ^b35;
^while.header17:
    i32 %145 = phi [^while.header14, i32 %117] [^b50, i32 %316];
    i32 %146 = phi [^while.header14, i32 %118] [^b50, i32 %315];
    i32 %147 = phi [^while.header14, i32 0] [^b50, i32 %317];
    i32 %148 = phi [^while.header14, i32 0] [^b50, i32 %314];
    i1 %149 = scmp lt i32 %147, i32 16;
    cbr i1 %149(prob = 0.97), ^while.body6, ^while.header26;
^b23:
    i1 %150 = phi [^b19, i1 %131] [^while.body3, i1 false];
    cbr i1 %150(prob = 0.5), ^if.then4, ^b31;
^while.header18:
    i32 %151 = phi [^while.header15, i32 1] [^b53, i32 %329];
    i32 %152 = phi [^while.header15, i32 %121] [^b53, i32 %328];
    i32 %153 = phi [^while.header15, i32 0] [^b53, i32 %330];
    i32 %154 = phi [^while.header15, i32 0] [^b53, i32 %327];
    i1 %155 = scmp lt i32 %153, i32 16;
    cbr i1 %155(prob = 0.97), ^while.body7, ^b36;
^b24:
    i1 %156 = scmp neq i32 %109, i32 0;
    cbr i1 %156(prob = 0.5), ^while.header22, ^b30;
^while.header19:
    i32 %157 = phi [^while.header51, i32 %506] [^b16, i32 %43];
    i32 %158 = phi [^while.header51, i32 %209] [^b16, i32 %43];
    i1 %159 = scmp neq i32 %157, i32 0;
    cbr i1 %159(prob = 0.97), ^while.header23, ^b37;
^while.header20:
    i32 %160 = phi [^while.header52, i32 %511] [^b18, i32 %63];
    i32 %161 = phi [^while.header52, i32 %214] [^b18, i32 %61];
    i1 %162 = scmp neq i32 %160, i32 0;
    cbr i1 %162(prob = 0.97), ^while.header24, ^b22;
^b25:
    i1 %163 = scmp neq i32 %115, i32 0;
    cbr i1 %163(prob = 0.5), ^while.header25, ^b32;
^while.header21:
    i32 %164 = phi [^b54, i32 %338] [^while.header16, i32 1];
    i32 %165 = phi [^b54, i32 %337] [^while.header16, i32 %126];
    i32 %166 = phi [^b54, i32 %339] [^while.header16, i32 0];
    i32 %167 = phi [^b54, i32 %336] [^while.header16, i32 0];
    i1 %168 = scmp lt i32 %166, i32 16;
    cbr i1 %168(prob = 0.97), ^while.body8, ^b38;
^b26:
    i1 %169 = scmp gt i32 %28, i32 32767;
    cbr i1 %169(prob = 0.5), ^if.then5, ^if.else1;
^b27:
    i32* %170 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %87];
    i32 %171 = load i32* %170;
    i1 %172 = scmp neq i32 %171, i32 %125;
    cbr i1 %172(prob = 0.5), ^entry1, ^b34;
^b28:
    i32 %173 = srem i32 %106, i32 2;
    i1 %174 = scmp neq i32 %173, i32 0;
    ubr ^b33;
^b29:
    i32 %175 = srem i32 %112, i32 2;
    i1 %176 = scmp neq i32 %175, i32 0;
    ubr ^b35;
^if.then4:
    i32* %177 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %78];
    i32 %178 = load i32* %177;
    i32 %179 = add i32 %178, i32 %79;
    ubr ^b31;
^if.then5:
    i32 %180 = load i32* %1;
    i32 %181 = sdiv i32 %28, i32 %180;
    i32 %182 = add i32 %181, i32 65536;
    i32 %183 = load i32* %15;
    i32 %184 = sub i32 %182, i32 %183;
    ubr ^b41;
^b30:
    i32 %185 = phi [^while.header22, i32 %200] [^b24, i32 %72];
    ubr ^while.header30;
^b31:
    i32 %186 = phi [^b23, i32 %79] [^if.then4, i32 %179];
    i32 %187 = sdiv i32 %77, i32 2;
    i32 %188 = sdiv i32 %76, i32 2;
    i32 %189 = add i32 %78, i32 1;
    ubr ^while.header9;
^b32:
    i32 %190 = phi [^while.header25, i32 %217] [^b25, i32 %81];
    ubr ^while.header32;
^while.body6:
    i32 %191 = srem i32 %146, i32 2;
    i1 %192 = scmp neq i32 %191, i32 0;
    cbr i1 %192(prob = 0.5), ^if.then9, ^if.else3;
^if.else1:
    i32 %193 = load i32* %1;
    i32 %194 = sdiv i32 %28, i32 %193;
    ubr ^b41;
^while.body7:
    i32 %195 = srem i32 %152, i32 2;
    i1 %196 = scmp neq i32 %195, i32 0;
    cbr i1 %196(prob = 0.5), ^b39, ^b47;
^b33:
    i1 %197 = phi [^b28, i1 %174] [^while.body4, i1 false];
    cbr i1 %197(prob = 0.5), ^if.then6, ^b42;
^b34:
    i32 %198 = add i32 %87, i32 1;
    ubr ^while.header11;
^b35:
    i1 %199 = phi [^b29, i1 %176] [^while.body5, i1 false];
    cbr i1 %199(prob = 0.5), ^if.then7, ^b43;
^while.header22:
    i32 %200 = phi [^b24, i32 0] [^b139, i32 %442];
    i32 %201 = phi [^b24, i32 %74] [^b139, i32 %879];
    i32 %202 = phi [^b24, i32 %72] [^b139, i32 %597];
    i1 %203 = scmp neq i32 %201, i32 0;
    cbr i1 %203(prob = 0.97), ^while.header28, ^b30;
^while.body8:
    i32 %204 = srem i32 %165, i32 2;
    i1 %205 = scmp neq i32 %204, i32 0;
    cbr i1 %205(prob = 0.5), ^b40, ^b48;
^while.header23:
    i32 %206 = phi [^while.header19, i32 %157] [^b62, i32 %418];
    i32 %207 = phi [^while.header19, i32 %158] [^b62, i32 %417];
    i32 %208 = phi [^while.header19, i32 0] [^b62, i32 %419];
    i32 %209 = phi [^while.header19, i32 0] [^b62, i32 %416];
    i1 %210 = scmp lt i32 %208, i32 16;
    cbr i1 %210(prob = 0.97), ^while.body9, ^while.header35;
^while.header24:
    i32 %211 = phi [^while.header20, i32 %160] [^b63, i32 %422];
    i32 %212 = phi [^while.header20, i32 %161] [^b63, i32 %421];
    i32 %213 = phi [^while.header20, i32 0] [^b63, i32 %423];
    i32 %214 = phi [^while.header20, i32 0] [^b63, i32 %420];
    i1 %215 = scmp lt i32 %213, i32 16;
    cbr i1 %215(prob = 0.97), ^while.body10, ^while.header36;
^while.header25:
    i32 %216 = phi [^while.header57, i32 %621] [^b25, i32 %83];
    i32 %217 = phi [^while.header57, i32 %275] [^b25, i32 %81];
    i1 %218 = scmp neq i32 %216, i32 0;
    cbr i1 %218(prob = 0.97), ^while.header29, ^b32;
^while.header26:
    i32 %219 = phi [^while.header17, i32 %117] [^b68, i32 %447];
    i32 %220 = phi [^while.header17, i32 %118] [^b68, i32 %446];
    i32 %221 = phi [^while.header17, i32 0] [^b68, i32 %448];
    i32 %222 = phi [^while.header17, i32 0] [^b68, i32 %445];
    i1 %223 = scmp lt i32 %221, i32 16;
    cbr i1 %223(prob = 0.97), ^while.body11, ^b44;
^while.header27:
    i32 %224 = phi [^while.header59, i32 %633] [^b22, i32 %63];
    i32 %225 = phi [^while.header59, i32 %287] [^b22, i32 %63];
    i1 %226 = scmp neq i32 %224, i32 0;
    cbr i1 %226(prob = 0.97), ^while.header31, ^b49;
^b36:
    i1 %227 = scmp neq i32 %154, i32 0;
    cbr i1 %227(prob = 0.5), ^while.header33, ^b45;
^b37:
    i1 %228 = scmp gt i32 %42, i32 32767;
    cbr i1 %228(prob = 0.5), ^if.then8, ^if.else2;
^b38:
    i1 %229 = scmp neq i32 %167, i32 0;
    cbr i1 %229(prob = 0.5), ^while.header34, ^b46;
^b39:
    i32 %230 = srem i32 %151, i32 2;
    i1 %231 = scmp neq i32 %230, i32 0;
    ubr ^b47;
^if.then6:
    i32* %232 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %108];
    i32 %233 = load i32* %232;
    i32 %234 = add i32 %233, i32 %109;
    ubr ^b42;
^if.then7:
    i32* %235 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %114];
    i32 %236 = load i32* %235;
    i32 %237 = add i32 %236, i32 %115;
    ubr ^b43;
^b40:
    i32 %238 = srem i32 %164, i32 2;
    i1 %239 = scmp neq i32 %238, i32 0;
    ubr ^b48;
^b41:
    i32 %240 = phi [^if.else1, i32 %194] [^if.then5, i32 %184];
    ubr ^while.header2;
^b42:
    i32 %241 = phi [^if.then6, i32 %234] [^b33, i32 %109];
    i32 %242 = sdiv i32 %107, i32 2;
    i32 %243 = sdiv i32 %106, i32 2;
    i32 %244 = add i32 %108, i32 1;
    ubr ^while.header12;
^b43:
    i32 %245 = phi [^if.then7, i32 %237] [^b35, i32 %115];
    i32 %246 = sdiv i32 %113, i32 2;
    i32 %247 = sdiv i32 %112, i32 2;
    i32 %248 = add i32 %114, i32 1;
    ubr ^while.header13;
^if.then8:
    i32 %249 = load i32* %1;
    i32 %250 = sdiv i32 %42, i32 %249;
    i32 %251 = add i32 %250, i32 65536;
    i32 %252 = load i32* %15;
    i32 %253 = sub i32 %251, i32 %252;
    ubr ^b52;
^if.then9:
    i32 %254 = srem i32 %145, i32 2;
    i1 %255 = scmp eq i32 %254, i32 0;
    cbr i1 %255(prob = 0.5), ^if.then10, ^b50;
^b44:
    i32 %256 = mul i32 %222, i32 2;
    ubr ^while.header42;
^b45:
    i32 %257 = phi [^while.header33, i32 %293] [^b36, i32 %120];
    ubr ^while.header43;
^b46:
    i32 %258 = phi [^while.header34, i32 %296] [^b38, i32 %125];
    ubr ^while.header44;
^if.else2:
    i32 %259 = load i32* %1;
    i32 %260 = sdiv i32 %42, i32 %259;
    ubr ^b52;
^while.body9:
    i32 %261 = srem i32 %207, i32 2;
    i1 %262 = scmp neq i32 %261, i32 0;
    cbr i1 %262(prob = 0.5), ^if.then14, ^if.else5;
^while.body10:
    i32 %263 = srem i32 %212, i32 2;
    i1 %264 = scmp neq i32 %263, i32 0;
    cbr i1 %264(prob = 0.5), ^if.then15, ^if.else6;
^while.header28:
    i32 %265 = phi [^while.header22, i32 1] [^b87, i32 %546];
    i32 %266 = phi [^while.header22, i32 %201] [^b87, i32 %545];
    i32 %267 = phi [^while.header22, i32 0] [^b87, i32 %547];
    i32 %268 = phi [^while.header22, i32 0] [^b87, i32 %544];
    i1 %269 = scmp lt i32 %267, i32 16;
    cbr i1 %269(prob = 0.97), ^while.body12, ^b57;
^if.else3:
    i32 %270 = srem i32 %145, i32 2;
    i1 %271 = scmp neq i32 %270, i32 0;
    cbr i1 %271(prob = 0.5), ^if.then10, ^b50;
^while.header29:
    i32 %272 = phi [^while.header25, i32 %216] [^b80, i32 %530];
    i32 %273 = phi [^while.header25, i32 %217] [^b80, i32 %529];
    i32 %274 = phi [^while.header25, i32 0] [^b80, i32 %531];
    i32 %275 = phi [^while.header25, i32 0] [^b80, i32 %528];
    i1 %276 = scmp lt i32 %274, i32 16;
    cbr i1 %276(prob = 0.97), ^while.body13, ^while.header41;
^while.body11:
    i32 %277 = srem i32 %220, i32 2;
    i1 %278 = scmp neq i32 %277, i32 0;
    cbr i1 %278(prob = 0.5), ^b51, ^b58;
^b47:
    i1 %279 = phi [^while.body7, i1 false] [^b39, i1 %231];
    cbr i1 %279(prob = 0.5), ^if.then11, ^b53;
^while.header30:
    i32 %280 = phi [^b158, i32 %559] [^b30, i32 0];
    i32 %281 = phi [^b158, i32 %1007] [^b30, i32 %74];
    i32 %282 = phi [^b158, i32 %727] [^b30, i32 %74];
    i1 %283 = scmp neq i32 %281, i32 0;
    cbr i1 %283(prob = 0.97), ^while.header37, ^b59;
^while.header31:
    i32 %284 = phi [^while.header27, i32 %224] [^b84, i32 %539];
    i32 %285 = phi [^while.header27, i32 %225] [^b84, i32 %538];
    i32 %286 = phi [^while.header27, i32 0] [^b84, i32 %540];
    i32 %287 = phi [^while.header27, i32 0] [^b84, i32 %537];
    i1 %288 = scmp lt i32 %286, i32 16;
    cbr i1 %288(prob = 0.97), ^while.body14, ^while.header45;
^while.header32:
    i32 %289 = phi [^while.header67, i32 %748] [^b32, i32 %83];
    i32 %290 = phi [^while.header67, i32 %366] [^b32, i32 %83];
    i1 %291 = scmp neq i32 %289, i32 0;
    cbr i1 %291(prob = 0.97), ^while.header38, ^b60;
^while.header33:
    i32 %292 = phi [^while.header68, i32 %753] [^b36, i32 %122];
    i32 %293 = phi [^while.header68, i32 %371] [^b36, i32 %120];
    i1 %294 = scmp neq i32 %292, i32 0;
    cbr i1 %294(prob = 0.97), ^while.header39, ^b45;
^b48:
    i1 %295 = phi [^b40, i1 %239] [^while.body8, i1 false];
    cbr i1 %295(prob = 0.5), ^if.then12, ^b54;
^while.header34:
    i32 %296 = phi [^b38, i32 0] [^b160, i32 %577];
    i32 %297 = phi [^b38, i32 %127] [^b160, i32 %1016];
    i32 %298 = phi [^b38, i32 %125] [^b160, i32 %738];
    i1 %299 = scmp neq i32 %297, i32 0;
    cbr i1 %299(prob = 0.97), ^while.header40, ^b46;
^while.header35:
    i32 %300 = phi [^while.header23, i32 %157] [^b89, i32 %571];
    i32 %301 = phi [^while.header23, i32 %158] [^b89, i32 %570];
    i32 %302 = phi [^while.header23, i32 0] [^b89, i32 %572];
    i32 %303 = phi [^while.header23, i32 0] [^b89, i32 %569];
    i1 %304 = scmp lt i32 %302, i32 16;
    cbr i1 %304(prob = 0.97), ^while.body15, ^b55;
^while.header36:
    i32 %305 = phi [^while.header24, i32 %160] [^b90, i32 %575];
    i32 %306 = phi [^while.header24, i32 %161] [^b90, i32 %574];
    i32 %307 = phi [^while.header24, i32 0] [^b90, i32 %576];
    i32 %308 = phi [^while.header24, i32 0] [^b90, i32 %573];
    i1 %309 = scmp lt i32 %307, i32 16;
    cbr i1 %309(prob = 0.97), ^while.body16, ^b56;
^b49:
    i1 %310 = scmp gt i32 %62, i32 32767;
    cbr i1 %310(prob = 0.5), ^if.then13, ^if.else4;
^if.then10:
    i32* %311 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %147];
    i32 %312 = load i32* %311;
    i32 %313 = add i32 %312, i32 %148;
    ubr ^b50;
^b50:
    i32 %314 = phi [^if.then10, i32 %313] [^if.else3, i32 %148] [^if.then9, i32 %148];
    i32 %315 = sdiv i32 %146, i32 2;
    i32 %316 = sdiv i32 %145, i32 2;
    i32 %317 = add i32 %147, i32 1;
    ubr ^while.header17;
^b51:
    i32 %318 = srem i32 %219, i32 2;
    i1 %319 = scmp neq i32 %318, i32 0;
    ubr ^b58;
^if.then11:
    i32* %320 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %153];
    i32 %321 = load i32* %320;
    i32 %322 = add i32 %321, i32 %154;
    ubr ^b53;
^if.then12:
    i32* %323 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %166];
    i32 %324 = load i32* %323;
    i32 %325 = add i32 %324, i32 %167;
    ubr ^b54;
^b52:
    i32 %326 = phi [^if.else2, i32 %260] [^if.then8, i32 %253];
    ubr ^while.header4;
^b53:
    i32 %327 = phi [^if.then11, i32 %322] [^b47, i32 %154];
    i32 %328 = sdiv i32 %152, i32 2;
    i32 %329 = sdiv i32 %151, i32 2;
    i32 %330 = add i32 %153, i32 1;
    ubr ^while.header18;
^if.then13:
    i32 %331 = load i32* %1;
    i32 %332 = sdiv i32 %62, i32 %331;
    i32 %333 = add i32 %332, i32 65536;
    i32 %334 = load i32* %15;
    i32 %335 = sub i32 %333, i32 %334;
    ubr ^b66;
^b54:
    i32 %336 = phi [^if.then12, i32 %325] [^b48, i32 %167];
    i32 %337 = sdiv i32 %165, i32 2;
    i32 %338 = sdiv i32 %164, i32 2;
    i32 %339 = add i32 %166, i32 1;
    ubr ^while.header21;
^if.then14:
    i32 %340 = srem i32 %206, i32 2;
    i1 %341 = scmp eq i32 %340, i32 0;
    cbr i1 %341(prob = 0.5), ^if.then16, ^b62;
^if.then15:
    i32 %342 = srem i32 %211, i32 2;
    i1 %343 = scmp eq i32 %342, i32 0;
    cbr i1 %343(prob = 0.5), ^if.then17, ^b63;
^while.body12:
    i32 %344 = srem i32 %266, i32 2;
    i1 %345 = scmp neq i32 %344, i32 0;
    cbr i1 %345(prob = 0.5), ^b61, ^b70;
^while.body13:
    i32 %346 = srem i32 %273, i32 2;
    i1 %347 = scmp neq i32 %346, i32 0;
    cbr i1 %347(prob = 0.5), ^if.then21, ^if.else9;
^b55:
    i32 %348 = mul i32 %303, i32 2;
    ubr ^while.header51;
^b56:
    i32 %349 = mul i32 %308, i32 2;
    ubr ^while.header52;
^if.else4:
    i32 %350 = load i32* %1;
    i32 %351 = sdiv i32 %62, i32 %350;
    ubr ^b66;
^while.body14:
    i32 %352 = srem i32 %285, i32 2;
    i1 %353 = scmp neq i32 %352, i32 0;
    cbr i1 %353(prob = 0.5), ^if.then22, ^if.else10;
^while.header37:
    i32 %354 = phi [^b108, i32 %674] [^while.header30, i32 1];
    i32 %355 = phi [^b108, i32 %673] [^while.header30, i32 %281];
    i32 %356 = phi [^b108, i32 %675] [^while.header30, i32 0];
    i32 %357 = phi [^b108, i32 %672] [^while.header30, i32 0];
    i1 %358 = scmp lt i32 %356, i32 16;
    cbr i1 %358(prob = 0.97), ^while.body17, ^b72;
^if.else5:
    i32 %359 = srem i32 %206, i32 2;
    i1 %360 = scmp neq i32 %359, i32 0;
    cbr i1 %360(prob = 0.5), ^if.then16, ^b62;
^if.else6:
    i32 %361 = srem i32 %211, i32 2;
    i1 %362 = scmp neq i32 %361, i32 0;
    cbr i1 %362(prob = 0.5), ^if.then17, ^b63;
^while.header38:
    i32 %363 = phi [^while.header32, i32 %289] [^b101, i32 %648];
    i32 %364 = phi [^while.header32, i32 %290] [^b101, i32 %647];
    i32 %365 = phi [^while.header32, i32 0] [^b101, i32 %649];
    i32 %366 = phi [^while.header32, i32 0] [^b101, i32 %646];
    i1 %367 = scmp lt i32 %365, i32 16;
    cbr i1 %367(prob = 0.97), ^while.body18, ^while.header49;
^while.header39:
    i32 %368 = phi [^while.header33, i32 %292] [^b102, i32 %652];
    i32 %369 = phi [^while.header33, i32 %293] [^b102, i32 %651];
    i32 %370 = phi [^while.header33, i32 0] [^b102, i32 %653];
    i32 %371 = phi [^while.header33, i32 0] [^b102, i32 %650];
    i1 %372 = scmp lt i32 %370, i32 16;
    cbr i1 %372(prob = 0.97), ^while.body19, ^while.header50;
^b57:
    i1 %373 = scmp neq i32 %268, i32 0;
    cbr i1 %373(prob = 0.5), ^while.header46, ^b67;
^while.body15:
    i32 %374 = srem i32 %301, i32 2;
    i1 %375 = scmp neq i32 %374, i32 0;
    cbr i1 %375(prob = 0.5), ^b64, ^b73;
^while.body16:
    i32 %376 = srem i32 %306, i32 2;
    i1 %377 = scmp neq i32 %376, i32 0;
    cbr i1 %377(prob = 0.5), ^b65, ^b74;
^while.header40:
    i32 %378 = phi [^while.header34, i32 1] [^b110, i32 %682];
    i32 %379 = phi [^while.header34, i32 %297] [^b110, i32 %681];
    i32 %380 = phi [^while.header34, i32 0] [^b110, i32 %683];
    i32 %381 = phi [^while.header34, i32 0] [^b110, i32 %680];
    i1 %382 = scmp lt i32 %380, i32 16;
    cbr i1 %382(prob = 0.97), ^while.body20, ^b75;
^b58:
    i1 %383 = phi [^b51, i1 %319] [^while.body11, i1 false];
    cbr i1 %383(prob = 0.5), ^if.then18, ^b68;
^while.header41:
    i32 %384 = phi [^while.header29, i32 %216] [^b111, i32 %686];
    i32 %385 = phi [^while.header29, i32 %217] [^b111, i32 %685];
    i32 %386 = phi [^while.header29, i32 0] [^b111, i32 %687];
    i32 %387 = phi [^while.header29, i32 0] [^b111, i32 %684];
    i1 %388 = scmp lt i32 %386, i32 16;
    cbr i1 %388(prob = 0.97), ^while.body21, ^b69;
^while.header42:
    i32 %389 = phi [^b112, i32 %692] [^b44, i32 65535];
    i32 %390 = phi [^b112, i32 %691] [^b44, i32 %256];
    i32 %391 = phi [^b112, i32 %693] [^b44, i32 0];
    i32 %392 = phi [^b112, i32 %690] [^b44, i32 0];
    i1 %393 = scmp lt i32 %391, i32 16;
    cbr i1 %393(prob = 0.97), ^while.body22, ^while.header14;
^while.header43:
    i32 %394 = phi [^while.header76, i32 %867] [^b45, i32 %122];
    i32 %395 = phi [^while.header76, i32 %480] [^b45, i32 %122];
    i1 %396 = scmp neq i32 %394, i32 0;
    cbr i1 %396(prob = 0.97), ^while.header47, ^b76;
^b59:
    i1 %397 = scmp gt i32 %73, i32 32767;
    cbr i1 %397(prob = 0.5), ^if.then19, ^if.else7;
^b60:
    i1 %398 = scmp gt i32 %82, i32 32767;
    cbr i1 %398(prob = 0.5), ^if.then20, ^if.else8;
^while.header44:
    i32 %399 = phi [^b178, i32 %700] [^b46, i32 0];
    i32 %400 = phi [^b178, i32 %1126] [^b46, i32 %127];
    i32 %401 = phi [^b178, i32 %861] [^b46, i32 %127];
    i1 %402 = scmp neq i32 %400, i32 0;
    cbr i1 %402(prob = 0.97), ^while.header48, ^b77;
^while.header45:
    i32 %403 = phi [^while.header31, i32 %224] [^b113, i32 %698];
    i32 %404 = phi [^while.header31, i32 %225] [^b113, i32 %697];
    i32 %405 = phi [^while.header31, i32 0] [^b113, i32 %699];
    i32 %406 = phi [^while.header31, i32 0] [^b113, i32 %696];
    i1 %407 = scmp lt i32 %405, i32 16;
    cbr i1 %407(prob = 0.97), ^while.body23, ^b71;
^if.then16:
    i32* %408 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %208];
    i32 %409 = load i32* %408;
    i32 %410 = add i32 %409, i32 %209;
    ubr ^b62;
^if.then17:
    i32* %411 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %213];
    i32 %412 = load i32* %411;
    i32 %413 = add i32 %412, i32 %214;
    ubr ^b63;
^b61:
    i32 %414 = srem i32 %265, i32 2;
    i1 %415 = scmp neq i32 %414, i32 0;
    ubr ^b70;
^b62:
    i32 %416 = phi [^if.then16, i32 %410] [^if.else5, i32 %209] [^if.then14, i32 %209];
    i32 %417 = sdiv i32 %207, i32 2;
    i32 %418 = sdiv i32 %206, i32 2;
    i32 %419 = add i32 %208, i32 1;
    ubr ^while.header23;
^b63:
    i32 %420 = phi [^if.then17, i32 %413] [^if.else6, i32 %214] [^if.then15, i32 %214];
    i32 %421 = sdiv i32 %212, i32 2;
    i32 %422 = sdiv i32 %211, i32 2;
    i32 %423 = add i32 %213, i32 1;
    ubr ^while.header24;
^b64:
    i32 %424 = srem i32 %300, i32 2;
    i1 %425 = scmp neq i32 %424, i32 0;
    ubr ^b73;
^b65:
    i32 %426 = srem i32 %305, i32 2;
    i1 %427 = scmp neq i32 %426, i32 0;
    ubr ^b74;
^if.then18:
    i32* %428 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %221];
    i32 %429 = load i32* %428;
    i32 %430 = add i32 %429, i32 %222;
    ubr ^b68;
^b66:
    i32 %431 = phi [^if.else4, i32 %351] [^if.then13, i32 %335];
    ubr ^while.header7;
^if.then19:
    i32 %432 = load i32* %1;
    i32 %433 = sdiv i32 %73, i32 %432;
    i32 %434 = add i32 %433, i32 65536;
    i32 %435 = load i32* %15;
    i32 %436 = sub i32 %434, i32 %435;
    ubr ^b83;
^if.then20:
    i32 %437 = load i32* %1;
    i32 %438 = sdiv i32 %82, i32 %437;
    i32 %439 = add i32 %438, i32 65536;
    i32 %440 = load i32* %15;
    i32 %441 = sub i32 %439, i32 %440;
    ubr ^b85;
^b67:
    i32 %442 = phi [^while.header46, i32 %467] [^b57, i32 %200];
    ubr ^while.header54;
^if.then21:
    i32 %443 = srem i32 %272, i32 2;
    i1 %444 = scmp eq i32 %443, i32 0;
    cbr i1 %444(prob = 0.5), ^if.then23, ^b80;
^b68:
    i32 %445 = phi [^if.then18, i32 %430] [^b58, i32 %222];
    i32 %446 = sdiv i32 %220, i32 2;
    i32 %447 = sdiv i32 %219, i32 2;
    i32 %448 = add i32 %221, i32 1;
    ubr ^while.header26;
^b69:
    i32 %449 = mul i32 %387, i32 2;
    ubr ^while.header57;
^if.else7:
    i32 %450 = load i32* %1;
    i32 %451 = sdiv i32 %73, i32 %450;
    ubr ^b83;
^if.then22:
    i32 %452 = srem i32 %284, i32 2;
    i1 %453 = scmp eq i32 %452, i32 0;
    cbr i1 %453(prob = 0.5), ^if.then24, ^b84;
^while.body17:
    i32 %454 = srem i32 %355, i32 2;
    i1 %455 = scmp neq i32 %454, i32 0;
    cbr i1 %455(prob = 0.5), ^b78, ^b94;
^if.else8:
    i32 %456 = load i32* %1;
    i32 %457 = sdiv i32 %82, i32 %456;
    ubr ^b85;
^while.body18:
    i32 %458 = srem i32 %364, i32 2;
    i1 %459 = scmp neq i32 %458, i32 0;
    cbr i1 %459(prob = 0.5), ^if.then30, ^if.else13;
^while.body19:
    i32 %460 = srem i32 %369, i32 2;
    i1 %461 = scmp neq i32 %460, i32 0;
    cbr i1 %461(prob = 0.5), ^if.then31, ^if.else14;
^b70:
    i1 %462 = phi [^while.body12, i1 false] [^b61, i1 %415];
    cbr i1 %462(prob = 0.5), ^if.then25, ^b87;
^b71:
    i32 %463 = mul i32 %406, i32 2;
    ubr ^while.header59;
^if.else9:
    i32 %464 = srem i32 %272, i32 2;
    i1 %465 = scmp neq i32 %464, i32 0;
    cbr i1 %465(prob = 0.5), ^if.then23, ^b80;
^while.header46:
    i32 %466 = phi [^while.header77, i32 %948] [^b57, i32 %202];
    i32 %467 = phi [^while.header77, i32 %583] [^b57, i32 %200];
    i1 %468 = scmp neq i32 %466, i32 0;
    cbr i1 %468(prob = 0.97), ^while.header53, ^b67;
^while.body20:
    i32 %469 = srem i32 %379, i32 2;
    i1 %470 = scmp neq i32 %469, i32 0;
    cbr i1 %470(prob = 0.5), ^b79, ^b95;
^while.body21:
    i32 %471 = srem i32 %385, i32 2;
    i1 %472 = scmp neq i32 %471, i32 0;
    cbr i1 %472(prob = 0.5), ^b81, ^b96;
^while.body22:
    i32 %473 = srem i32 %390, i32 2;
    i1 %474 = scmp neq i32 %473, i32 0;
    cbr i1 %474(prob = 0.5), ^b82, ^b97;
^if.else10:
    i32 %475 = srem i32 %284, i32 2;
    i1 %476 = scmp neq i32 %475, i32 0;
    cbr i1 %476(prob = 0.5), ^if.then24, ^b84;
^while.header47:
    i32 %477 = phi [^while.header43, i32 %394] [^b123, i32 %762];
    i32 %478 = phi [^while.header43, i32 %395] [^b123, i32 %761];
    i32 %479 = phi [^while.header43, i32 0] [^b123, i32 %763];
    i32 %480 = phi [^while.header43, i32 0] [^b123, i32 %760];
    i1 %481 = scmp lt i32 %479, i32 16;
    cbr i1 %481(prob = 0.97), ^while.body24, ^while.header58;
^b72:
    i1 %482 = scmp neq i32 %357, i32 0;
    cbr i1 %482(prob = 0.5), ^while.header55, ^b88;
^while.body23:
    i32 %483 = srem i32 %404, i32 2;
    i1 %484 = scmp neq i32 %483, i32 0;
    cbr i1 %484(prob = 0.5), ^b86, ^b98;
^while.header48:
    i32 %485 = phi [^while.header44, i32 1] [^b127, i32 %793];
    i32 %486 = phi [^while.header44, i32 %400] [^b127, i32 %792];
    i32 %487 = phi [^while.header44, i32 0] [^b127, i32 %794];
    i32 %488 = phi [^while.header44, i32 0] [^b127, i32 %791];
    i1 %489 = scmp lt i32 %487, i32 16;
    cbr i1 %489(prob = 0.97), ^while.body25, ^b99;
^b73:
    i1 %490 = phi [^b64, i1 %425] [^while.body15, i1 false];
    cbr i1 %490(prob = 0.5), ^if.then26, ^b89;
^b74:
    i1 %491 = phi [^b65, i1 %427] [^while.body16, i1 false];
    cbr i1 %491(prob = 0.5), ^if.then27, ^b90;
^while.header49:
    i32 %492 = phi [^while.header38, i32 %289] [^b128, i32 %799];
    i32 %493 = phi [^while.header38, i32 %290] [^b128, i32 %798];
    i32 %494 = phi [^while.header38, i32 0] [^b128, i32 %800];
    i32 %495 = phi [^while.header38, i32 0] [^b128, i32 %797];
    i1 %496 = scmp lt i32 %494, i32 16;
    cbr i1 %496(prob = 0.97), ^while.body26, ^b92;
^while.header50:
    i32 %497 = phi [^while.header39, i32 %292] [^b129, i32 %803];
    i32 %498 = phi [^while.header39, i32 %293] [^b129, i32 %802];
    i32 %499 = phi [^while.header39, i32 0] [^b129, i32 %804];
    i32 %500 = phi [^while.header39, i32 0] [^b129, i32 %801];
    i1 %501 = scmp lt i32 %499, i32 16;
    cbr i1 %501(prob = 0.97), ^while.body27, ^b93;
^b75:
    i1 %502 = scmp neq i32 %381, i32 0;
    cbr i1 %502(prob = 0.5), ^while.header56, ^b91;
^while.header51:
    i32 %503 = phi [^b130, i32 %811] [^b55, i32 65535];
    i32 %504 = phi [^b130, i32 %810] [^b55, i32 %348];
    i32 %505 = phi [^b130, i32 %812] [^b55, i32 0];
    i32 %506 = phi [^b130, i32 %809] [^b55, i32 0];
    i1 %507 = scmp lt i32 %505, i32 16;
    cbr i1 %507(prob = 0.97), ^while.body28, ^while.header19;
^while.header52:
    i32 %508 = phi [^b131, i32 %815] [^b56, i32 65535];
    i32 %509 = phi [^b131, i32 %814] [^b56, i32 %349];
    i32 %510 = phi [^b131, i32 %816] [^b56, i32 0];
    i32 %511 = phi [^b131, i32 %813] [^b56, i32 0];
    i1 %512 = scmp lt i32 %510, i32 16;
    cbr i1 %512(prob = 0.97), ^while.body29, ^while.header20;
^b76:
    i1 %513 = scmp gt i32 %121, i32 32767;
    cbr i1 %513(prob = 0.5), ^if.then28, ^if.else11;
^b77:
    i1 %514 = scmp gt i32 %126, i32 32767;
    cbr i1 %514(prob = 0.5), ^if.then29, ^if.else12;
^if.then23:
    i32* %515 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %274];
    i32 %516 = load i32* %515;
    i32 %517 = add i32 %516, i32 %275;
    ubr ^b80;
^if.then24:
    i32* %518 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %286];
    i32 %519 = load i32* %518;
    i32 %520 = add i32 %519, i32 %287;
    ubr ^b84;
^b78:
    i32 %521 = srem i32 %354, i32 2;
    i1 %522 = scmp neq i32 %521, i32 0;
    ubr ^b94;
^if.then25:
    i32* %523 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %267];
    i32 %524 = load i32* %523;
    i32 %525 = add i32 %524, i32 %268;
    ubr ^b87;
^b79:
    i32 %526 = srem i32 %378, i32 2;
    i1 %527 = scmp neq i32 %526, i32 0;
    ubr ^b95;
^b80:
    i32 %528 = phi [^if.then23, i32 %517] [^if.else9, i32 %275] [^if.then21, i32 %275];
    i32 %529 = sdiv i32 %273, i32 2;
    i32 %530 = sdiv i32 %272, i32 2;
    i32 %531 = add i32 %274, i32 1;
    ubr ^while.header29;
^b81:
    i32 %532 = srem i32 %384, i32 2;
    i1 %533 = scmp neq i32 %532, i32 0;
    ubr ^b96;
^b82:
    i32 %534 = srem i32 %389, i32 2;
    i1 %535 = scmp neq i32 %534, i32 0;
    ubr ^b97;
^b83:
    i32 %536 = phi [^if.else7, i32 %451] [^if.then19, i32 %436];
    ubr ^while.header8;
^b84:
    i32 %537 = phi [^if.then24, i32 %520] [^if.else10, i32 %287] [^if.then22, i32 %287];
    i32 %538 = sdiv i32 %285, i32 2;
    i32 %539 = sdiv i32 %284, i32 2;
    i32 %540 = add i32 %286, i32 1;
    ubr ^while.header31;
^b85:
    i32 %541 = phi [^if.else8, i32 %457] [^if.then20, i32 %441];
    ubr ^while.header10;
^b86:
    i32 %542 = srem i32 %403, i32 2;
    i1 %543 = scmp neq i32 %542, i32 0;
    ubr ^b98;
^b87:
    i32 %544 = phi [^if.then25, i32 %525] [^b70, i32 %268];
    i32 %545 = sdiv i32 %266, i32 2;
    i32 %546 = sdiv i32 %265, i32 2;
    i32 %547 = add i32 %267, i32 1;
    ubr ^while.header28;
^if.then26:
    i32* %548 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %302];
    i32 %549 = load i32* %548;
    i32 %550 = add i32 %549, i32 %303;
    ubr ^b89;
^if.then27:
    i32* %551 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %307];
    i32 %552 = load i32* %551;
    i32 %553 = add i32 %552, i32 %308;
    ubr ^b90;
^if.then28:
    i32 %554 = load i32* %1;
    i32 %555 = sdiv i32 %121, i32 %554;
    i32 %556 = add i32 %555, i32 65536;
    i32 %557 = load i32* %15;
    i32 %558 = sub i32 %556, i32 %557;
    ubr ^b107;
^b88:
    i32 %559 = phi [^while.header55, i32 %600] [^b72, i32 %280];
    ubr ^while.header64;
^if.then29:
    i32 %560 = load i32* %1;
    i32 %561 = sdiv i32 %126, i32 %560;
    i32 %562 = add i32 %561, i32 65536;
    i32 %563 = load i32* %15;
    i32 %564 = sub i32 %562, i32 %563;
    ubr ^b109;
^if.then30:
    i32 %565 = srem i32 %363, i32 2;
    i1 %566 = scmp eq i32 %565, i32 0;
    cbr i1 %566(prob = 0.5), ^if.then32, ^b101;
^if.then31:
    i32 %567 = srem i32 %368, i32 2;
    i1 %568 = scmp eq i32 %567, i32 0;
    cbr i1 %568(prob = 0.5), ^if.then33, ^b102;
^b89:
    i32 %569 = phi [^if.then26, i32 %550] [^b73, i32 %303];
    i32 %570 = sdiv i32 %301, i32 2;
    i32 %571 = sdiv i32 %300, i32 2;
    i32 %572 = add i32 %302, i32 1;
    ubr ^while.header35;
^b90:
    i32 %573 = phi [^if.then27, i32 %553] [^b74, i32 %308];
    i32 %574 = sdiv i32 %306, i32 2;
    i32 %575 = sdiv i32 %305, i32 2;
    i32 %576 = add i32 %307, i32 1;
    ubr ^while.header36;
^b91:
    i32 %577 = phi [^while.header56, i32 %615] [^b75, i32 %296];
    ubr ^while.header65;
^b92:
    i32 %578 = mul i32 %495, i32 2;
    ubr ^while.header67;
^b93:
    i32 %579 = mul i32 %500, i32 2;
    ubr ^while.header68;
^while.header53:
    i32 %580 = phi [^while.header46, i32 %466] [^b137, i32 %875];
    i32 %581 = phi [^while.header46, i32 %467] [^b137, i32 %874];
    i32 %582 = phi [^while.header46, i32 0] [^b137, i32 %876];
    i32 %583 = phi [^while.header46, i32 0] [^b137, i32 %873];
    i1 %584 = scmp lt i32 %582, i32 16;
    cbr i1 %584(prob = 0.97), ^while.body30, ^while.header62;
^if.else11:
    i32 %585 = load i32* %1;
    i32 %586 = sdiv i32 %121, i32 %585;
    ubr ^b107;
^while.body24:
    i32 %587 = srem i32 %478, i32 2;
    i1 %588 = scmp neq i32 %587, i32 0;
    cbr i1 %588(prob = 0.5), ^if.then39, ^if.else15;
^b94:
    i1 %589 = phi [^while.body17, i1 false] [^b78, i1 %522];
    cbr i1 %589(prob = 0.5), ^if.then34, ^b108;
^if.else12:
    i32 %590 = load i32* %1;
    i32 %591 = sdiv i32 %126, i32 %590;
    ubr ^b109;
^if.else13:
    i32 %592 = srem i32 %363, i32 2;
    i1 %593 = scmp neq i32 %592, i32 0;
    cbr i1 %593(prob = 0.5), ^if.then32, ^b101;
^if.else14:
    i32 %594 = srem i32 %368, i32 2;
    i1 %595 = scmp neq i32 %594, i32 0;
    cbr i1 %595(prob = 0.5), ^if.then33, ^b102;
^while.header54:
    i32 %596 = phi [^while.header82, i32 %1062] [^b67, i32 %202];
    i32 %597 = phi [^while.header82, i32 %705] [^b67, i32 %202];
    i1 %598 = scmp neq i32 %596, i32 0;
    cbr i1 %598(prob = 0.97), ^while.header60, ^b116;
^while.header55:
    i32 %599 = phi [^while.header83, i32 %1067] [^b72, i32 %282];
    i32 %600 = phi [^while.header83, i32 %710] [^b72, i32 %280];
    i1 %601 = scmp neq i32 %599, i32 0;
    cbr i1 %601(prob = 0.97), ^while.header61, ^b88;
^while.body25:
    i32 %602 = srem i32 %486, i32 2;
    i1 %603 = scmp neq i32 %602, i32 0;
    cbr i1 %603(prob = 0.5), ^b100, ^b117;
^while.body26:
    i32 %604 = srem i32 %493, i32 2;
    i1 %605 = scmp neq i32 %604, i32 0;
    cbr i1 %605(prob = 0.5), ^b103, ^b118;
^while.body27:
    i32 %606 = srem i32 %498, i32 2;
    i1 %607 = scmp neq i32 %606, i32 0;
    cbr i1 %607(prob = 0.5), ^b104, ^b119;
^b95:
    i1 %608 = phi [^b79, i1 %527] [^while.body20, i1 false];
    cbr i1 %608(prob = 0.5), ^if.then35, ^b110;
^while.body28:
    i32 %609 = srem i32 %504, i32 2;
    i1 %610 = scmp neq i32 %609, i32 0;
    cbr i1 %610(prob = 0.5), ^b105, ^b120;
^while.body29:
    i32 %611 = srem i32 %509, i32 2;
    i1 %612 = scmp neq i32 %611, i32 0;
    cbr i1 %612(prob = 0.5), ^b106, ^b121;
^b96:
    i1 %613 = phi [^b81, i1 %533] [^while.body21, i1 false];
    cbr i1 %613(prob = 0.5), ^if.then36, ^b111;
^while.header56:
    i32 %614 = phi [^while.header84, i32 %1077] [^b75, i32 %298];
    i32 %615 = phi [^while.header84, i32 %722] [^b75, i32 %296];
    i1 %616 = scmp neq i32 %614, i32 0;
    cbr i1 %616(prob = 0.97), ^while.header63, ^b91;
^b97:
    i1 %617 = phi [^while.body22, i1 false] [^b82, i1 %535];
    cbr i1 %617(prob = 0.5), ^if.then37, ^b112;
^while.header57:
    i32 %618 = phi [^b144, i32 %911] [^b69, i32 65535];
    i32 %619 = phi [^b144, i32 %910] [^b69, i32 %449];
    i32 %620 = phi [^b144, i32 %912] [^b69, i32 0];
    i32 %621 = phi [^b144, i32 %909] [^b69, i32 0];
    i1 %622 = scmp lt i32 %620, i32 16;
    cbr i1 %622(prob = 0.97), ^while.body31, ^while.header25;
^b98:
    i1 %623 = phi [^b86, i1 %543] [^while.body23, i1 false];
    cbr i1 %623(prob = 0.5), ^if.then38, ^b113;
^while.header58:
    i32 %624 = phi [^while.header47, i32 %394] [^b146, i32 %920];
    i32 %625 = phi [^while.header47, i32 %395] [^b146, i32 %919];
    i32 %626 = phi [^while.header47, i32 0] [^b146, i32 %921];
    i32 %627 = phi [^while.header47, i32 0] [^b146, i32 %918];
    i1 %628 = scmp lt i32 %626, i32 16;
    cbr i1 %628(prob = 0.97), ^while.body32, ^b115;
^b99:
    i1 %629 = scmp neq i32 %488, i32 0;
    cbr i1 %629(prob = 0.5), ^while.header66, ^b114;
^while.header59:
    i32 %630 = phi [^b147, i32 %926] [^b71, i32 65535];
    i32 %631 = phi [^b147, i32 %925] [^b71, i32 %463];
    i32 %632 = phi [^b147, i32 %927] [^b71, i32 0];
    i32 %633 = phi [^b147, i32 %924] [^b71, i32 0];
    i1 %634 = scmp lt i32 %632, i32 16;
    cbr i1 %634(prob = 0.97), ^while.body33, ^while.header27;
^if.then32:
    i32* %635 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %365];
    i32 %636 = load i32* %635;
    i32 %637 = add i32 %636, i32 %366;
    ubr ^b101;
^if.then33:
    i32* %638 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %370];
    i32 %639 = load i32* %638;
    i32 %640 = add i32 %639, i32 %371;
    ubr ^b102;
^if.then34:
    i32* %641 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %356];
    i32 %642 = load i32* %641;
    i32 %643 = add i32 %642, i32 %357;
    ubr ^b108;
^b100:
    i32 %644 = srem i32 %485, i32 2;
    i1 %645 = scmp neq i32 %644, i32 0;
    ubr ^b117;
^b101:
    i32 %646 = phi [^if.then32, i32 %637] [^if.else13, i32 %366] [^if.then30, i32 %366];
    i32 %647 = sdiv i32 %364, i32 2;
    i32 %648 = sdiv i32 %363, i32 2;
    i32 %649 = add i32 %365, i32 1;
    ubr ^while.header38;
^b102:
    i32 %650 = phi [^if.then33, i32 %640] [^if.else14, i32 %371] [^if.then31, i32 %371];
    i32 %651 = sdiv i32 %369, i32 2;
    i32 %652 = sdiv i32 %368, i32 2;
    i32 %653 = add i32 %370, i32 1;
    ubr ^while.header39;
^b103:
    i32 %654 = srem i32 %492, i32 2;
    i1 %655 = scmp neq i32 %654, i32 0;
    ubr ^b118;
^b104:
    i32 %656 = srem i32 %497, i32 2;
    i1 %657 = scmp neq i32 %656, i32 0;
    ubr ^b119;
^if.then35:
    i32* %658 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %380];
    i32 %659 = load i32* %658;
    i32 %660 = add i32 %659, i32 %381;
    ubr ^b110;
^b105:
    i32 %661 = srem i32 %503, i32 2;
    i1 %662 = scmp neq i32 %661, i32 0;
    ubr ^b120;
^b106:
    i32 %663 = srem i32 %508, i32 2;
    i1 %664 = scmp neq i32 %663, i32 0;
    ubr ^b121;
^if.then36:
    i32* %665 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %386];
    i32 %666 = load i32* %665;
    i32 %667 = add i32 %666, i32 %387;
    ubr ^b111;
^if.then37:
    i32* %668 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %391];
    i32 %669 = load i32* %668;
    i32 %670 = add i32 %669, i32 %392;
    ubr ^b112;
^b107:
    i32 %671 = phi [^if.else11, i32 %586] [^if.then28, i32 %558];
    ubr ^while.header15;
^b108:
    i32 %672 = phi [^if.then34, i32 %643] [^b94, i32 %357];
    i32 %673 = sdiv i32 %355, i32 2;
    i32 %674 = sdiv i32 %354, i32 2;
    i32 %675 = add i32 %356, i32 1;
    ubr ^while.header37;
^b109:
    i32 %676 = phi [^if.else12, i32 %591] [^if.then29, i32 %564];
    ubr ^while.header16;
^if.then38:
    i32* %677 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %405];
    i32 %678 = load i32* %677;
    i32 %679 = add i32 %678, i32 %406;
    ubr ^b113;
^b110:
    i32 %680 = phi [^if.then35, i32 %660] [^b95, i32 %381];
    i32 %681 = sdiv i32 %379, i32 2;
    i32 %682 = sdiv i32 %378, i32 2;
    i32 %683 = add i32 %380, i32 1;
    ubr ^while.header40;
^b111:
    i32 %684 = phi [^if.then36, i32 %667] [^b96, i32 %387];
    i32 %685 = sdiv i32 %385, i32 2;
    i32 %686 = sdiv i32 %384, i32 2;
    i32 %687 = add i32 %386, i32 1;
    ubr ^while.header41;
^while.body30:
    i32 %688 = srem i32 %581, i32 2;
    i1 %689 = scmp neq i32 %688, i32 0;
    cbr i1 %689(prob = 0.5), ^if.then47, ^if.else17;
^b112:
    i32 %690 = phi [^if.then37, i32 %670] [^b97, i32 %392];
    i32 %691 = sdiv i32 %390, i32 2;
    i32 %692 = sdiv i32 %389, i32 2;
    i32 %693 = add i32 %391, i32 1;
    ubr ^while.header42;
^if.then39:
    i32 %694 = srem i32 %477, i32 2;
    i1 %695 = scmp eq i32 %694, i32 0;
    cbr i1 %695(prob = 0.5), ^if.then40, ^b123;
^b113:
    i32 %696 = phi [^if.then38, i32 %679] [^b98, i32 %406];
    i32 %697 = sdiv i32 %404, i32 2;
    i32 %698 = sdiv i32 %403, i32 2;
    i32 %699 = add i32 %405, i32 1;
    ubr ^while.header45;
^b114:
    i32 %700 = phi [^while.header66, i32 %741] [^b99, i32 %399];
    ubr ^while.header75;
^b115:
    i32 %701 = mul i32 %627, i32 2;
    ubr ^while.header76;
^while.header60:
    i32 %702 = phi [^while.header54, i32 %596] [^b152, i32 %988];
    i32 %703 = phi [^while.header54, i32 %597] [^b152, i32 %987];
    i32 %704 = phi [^while.header54, i32 0] [^b152, i32 %989];
    i32 %705 = phi [^while.header54, i32 0] [^b152, i32 %986];
    i1 %706 = scmp lt i32 %704, i32 16;
    cbr i1 %706(prob = 0.97), ^while.body34, ^while.header70;
^while.header61:
    i32 %707 = phi [^while.header55, i32 %599] [^b153, i32 %992];
    i32 %708 = phi [^while.header55, i32 %600] [^b153, i32 %991];
    i32 %709 = phi [^while.header55, i32 0] [^b153, i32 %993];
    i32 %710 = phi [^while.header55, i32 0] [^b153, i32 %990];
    i1 %711 = scmp lt i32 %709, i32 16;
    cbr i1 %711(prob = 0.97), ^while.body35, ^while.header71;
^while.body31:
    i32 %712 = srem i32 %619, i32 2;
    i1 %713 = scmp neq i32 %712, i32 0;
    cbr i1 %713(prob = 0.5), ^b122, ^b132;
^while.header62:
    i32 %714 = phi [^while.header53, i32 %466] [^b161, i32 %1019];
    i32 %715 = phi [^while.header53, i32 %467] [^b161, i32 %1018];
    i32 %716 = phi [^while.header53, i32 0] [^b161, i32 %1020];
    i32 %717 = phi [^while.header53, i32 0] [^b161, i32 %1017];
    i1 %718 = scmp lt i32 %716, i32 16;
    cbr i1 %718(prob = 0.97), ^while.body36, ^b126;
^while.header63:
    i32 %719 = phi [^while.header56, i32 %614] [^b156, i32 %1003];
    i32 %720 = phi [^while.header56, i32 %615] [^b156, i32 %1002];
    i32 %721 = phi [^while.header56, i32 0] [^b156, i32 %1004];
    i32 %722 = phi [^while.header56, i32 0] [^b156, i32 %1001];
    i1 %723 = scmp lt i32 %721, i32 16;
    cbr i1 %723(prob = 0.97), ^while.body37, ^while.header74;
^if.else15:
    i32 %724 = srem i32 %477, i32 2;
    i1 %725 = scmp neq i32 %724, i32 0;
    cbr i1 %725(prob = 0.5), ^if.then40, ^b123;
^while.header64:
    i32 %726 = phi [^while.header86, i32 %1159] [^b88, i32 %282];
    i32 %727 = phi [^while.header86, i32 %826] [^b88, i32 %282];
    i1 %728 = scmp neq i32 %726, i32 0;
    cbr i1 %728(prob = 0.97), ^while.header69, ^b133;
^while.body32:
    i32 %729 = srem i32 %625, i32 2;
    i1 %730 = scmp neq i32 %729, i32 0;
    cbr i1 %730(prob = 0.5), ^b124, ^b134;
^b116:
    i1 %731 = scmp gt i32 %201, i32 32767;
    cbr i1 %731(prob = 0.5), ^if.then42, ^if.else16;
^b117:
    i1 %732 = phi [^while.body25, i1 false] [^b100, i1 %645];
    cbr i1 %732(prob = 0.5), ^if.then41, ^b127;
^while.body33:
    i32 %733 = srem i32 %631, i32 2;
    i1 %734 = scmp neq i32 %733, i32 0;
    cbr i1 %734(prob = 0.5), ^b125, ^b135;
^b118:
    i1 %735 = phi [^while.body26, i1 false] [^b103, i1 %655];
    cbr i1 %735(prob = 0.5), ^if.then43, ^b128;
^b119:
    i1 %736 = phi [^b104, i1 %657] [^while.body27, i1 false];
    cbr i1 %736(prob = 0.5), ^if.then44, ^b129;
^while.header65:
    i32 %737 = phi [^while.header87, i32 %1168] [^b91, i32 %298];
    i32 %738 = phi [^while.header87, i32 %845] [^b91, i32 %298];
    i1 %739 = scmp neq i32 %737, i32 0;
    cbr i1 %739(prob = 0.97), ^while.header72, ^b136;
^while.header66:
    i32 %740 = phi [^b99, i32 %401] [^while.header88, i32 %1173];
    i32 %741 = phi [^b99, i32 %399] [^while.header88, i32 %850];
    i1 %742 = scmp neq i32 %740, i32 0;
    cbr i1 %742(prob = 0.97), ^while.header73, ^b114;
^b120:
    i1 %743 = phi [^while.body28, i1 false] [^b105, i1 %662];
    cbr i1 %743(prob = 0.5), ^if.then45, ^b130;
^b121:
    i1 %744 = phi [^b106, i1 %664] [^while.body29, i1 false];
    cbr i1 %744(prob = 0.5), ^if.then46, ^b131;
^while.header67:
    i32 %745 = phi [^b163, i32 %1031] [^b92, i32 65535];
    i32 %746 = phi [^b163, i32 %1030] [^b92, i32 %578];
    i32 %747 = phi [^b163, i32 %1032] [^b92, i32 0];
    i32 %748 = phi [^b163, i32 %1029] [^b92, i32 0];
    i1 %749 = scmp lt i32 %747, i32 16;
    cbr i1 %749(prob = 0.97), ^while.body38, ^while.header32;
^while.header68:
    i32 %750 = phi [^b164, i32 %1035] [^b93, i32 65535];
    i32 %751 = phi [^b164, i32 %1034] [^b93, i32 %579];
    i32 %752 = phi [^b164, i32 %1036] [^b93, i32 0];
    i32 %753 = phi [^b164, i32 %1033] [^b93, i32 0];
    i1 %754 = scmp lt i32 %752, i32 16;
    cbr i1 %754(prob = 0.97), ^while.body39, ^while.header33;
^if.then40:
    i32* %755 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %479];
    i32 %756 = load i32* %755;
    i32 %757 = add i32 %756, i32 %480;
    ubr ^b123;
^b122:
    i32 %758 = srem i32 %618, i32 2;
    i1 %759 = scmp neq i32 %758, i32 0;
    ubr ^b132;
^b123:
    i32 %760 = phi [^if.then40, i32 %757] [^if.else15, i32 %480] [^if.then39, i32 %480];
    i32 %761 = sdiv i32 %478, i32 2;
    i32 %762 = sdiv i32 %477, i32 2;
    i32 %763 = add i32 %479, i32 1;
    ubr ^while.header47;
^b124:
    i32 %764 = srem i32 %624, i32 2;
    i1 %765 = scmp neq i32 %764, i32 0;
    ubr ^b134;
^if.then41:
    i32* %766 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %487];
    i32 %767 = load i32* %766;
    i32 %768 = add i32 %767, i32 %488;
    ubr ^b127;
^b125:
    i32 %769 = srem i32 %630, i32 2;
    i1 %770 = scmp neq i32 %769, i32 0;
    ubr ^b135;
^if.then42:
    i32 %771 = load i32* %1;
    i32 %772 = sdiv i32 %201, i32 %771;
    i32 %773 = add i32 %772, i32 65536;
    i32 %774 = load i32* %15;
    i32 %775 = sub i32 %773, i32 %774;
    ubr ^b139;
^if.then43:
    i32* %776 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %494];
    i32 %777 = load i32* %776;
    i32 %778 = add i32 %777, i32 %495;
    ubr ^b128;
^if.then44:
    i32* %779 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %499];
    i32 %780 = load i32* %779;
    i32 %781 = add i32 %780, i32 %500;
    ubr ^b129;
^if.then45:
    i32* %782 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %505];
    i32 %783 = load i32* %782;
    i32 %784 = add i32 %783, i32 %506;
    ubr ^b130;
^if.then46:
    i32* %785 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %510];
    i32 %786 = load i32* %785;
    i32 %787 = add i32 %786, i32 %511;
    ubr ^b131;
^if.then47:
    i32 %788 = srem i32 %580, i32 2;
    i1 %789 = scmp eq i32 %788, i32 0;
    cbr i1 %789(prob = 0.5), ^if.then48, ^b137;
^b126:
    i32 %790 = mul i32 %717, i32 2;
    ubr ^while.header77;
^b127:
    i32 %791 = phi [^if.then41, i32 %768] [^b117, i32 %488];
    i32 %792 = sdiv i32 %486, i32 2;
    i32 %793 = sdiv i32 %485, i32 2;
    i32 %794 = add i32 %487, i32 1;
    ubr ^while.header48;
^if.else16:
    i32 %795 = load i32* %1;
    i32 %796 = sdiv i32 %201, i32 %795;
    ubr ^b139;
^b128:
    i32 %797 = phi [^if.then43, i32 %778] [^b118, i32 %495];
    i32 %798 = sdiv i32 %493, i32 2;
    i32 %799 = sdiv i32 %492, i32 2;
    i32 %800 = add i32 %494, i32 1;
    ubr ^while.header49;
^b129:
    i32 %801 = phi [^if.then44, i32 %781] [^b119, i32 %500];
    i32 %802 = sdiv i32 %498, i32 2;
    i32 %803 = sdiv i32 %497, i32 2;
    i32 %804 = add i32 %499, i32 1;
    ubr ^while.header50;
^while.body34:
    i32 %805 = srem i32 %703, i32 2;
    i1 %806 = scmp neq i32 %805, i32 0;
    cbr i1 %806(prob = 0.5), ^if.then53, ^if.else19;
^while.body35:
    i32 %807 = srem i32 %708, i32 2;
    i1 %808 = scmp neq i32 %807, i32 0;
    cbr i1 %808(prob = 0.5), ^if.then54, ^if.else20;
^b130:
    i32 %809 = phi [^if.then45, i32 %784] [^b120, i32 %506];
    i32 %810 = sdiv i32 %504, i32 2;
    i32 %811 = sdiv i32 %503, i32 2;
    i32 %812 = add i32 %505, i32 1;
    ubr ^while.header51;
^b131:
    i32 %813 = phi [^if.then46, i32 %787] [^b121, i32 %511];
    i32 %814 = sdiv i32 %509, i32 2;
    i32 %815 = sdiv i32 %508, i32 2;
    i32 %816 = add i32 %510, i32 1;
    ubr ^while.header52;
^if.else17:
    i32 %817 = srem i32 %580, i32 2;
    i1 %818 = scmp neq i32 %817, i32 0;
    cbr i1 %818(prob = 0.5), ^if.then48, ^b137;
^while.body36:
    i32 %819 = srem i32 %715, i32 2;
    i1 %820 = scmp neq i32 %819, i32 0;
    cbr i1 %820(prob = 0.5), ^b138, ^b148;
^while.body37:
    i32 %821 = srem i32 %720, i32 2;
    i1 %822 = scmp neq i32 %821, i32 0;
    cbr i1 %822(prob = 0.5), ^if.then56, ^if.else22;
^while.header69:
    i32 %823 = phi [^b172, i32 %1098] [^while.header64, i32 %726];
    i32 %824 = phi [^b172, i32 %1097] [^while.header64, i32 %727];
    i32 %825 = phi [^b172, i32 %1099] [^while.header64, i32 0];
    i32 %826 = phi [^b172, i32 %1096] [^while.header64, i32 0];
    i1 %827 = scmp lt i32 %825, i32 16;
    cbr i1 %827(prob = 0.97), ^while.body40, ^while.header78;
^while.body38:
    i32 %828 = srem i32 %746, i32 2;
    i1 %829 = scmp neq i32 %828, i32 0;
    cbr i1 %829(prob = 0.5), ^b140, ^b149;
^while.body39:
    i32 %830 = srem i32 %751, i32 2;
    i1 %831 = scmp neq i32 %830, i32 0;
    cbr i1 %831(prob = 0.5), ^b141, ^b150;
^while.header70:
    i32 %832 = phi [^while.header60, i32 %596] [^b179, i32 %1129];
    i32 %833 = phi [^while.header60, i32 %597] [^b179, i32 %1128];
    i32 %834 = phi [^while.header60, i32 0] [^b179, i32 %1130];
    i32 %835 = phi [^while.header60, i32 0] [^b179, i32 %1127];
    i1 %836 = scmp lt i32 %834, i32 16;
    cbr i1 %836(prob = 0.97), ^while.body41, ^b142;
^while.header71:
    i32 %837 = phi [^while.header61, i32 %599] [^b180, i32 %1133];
    i32 %838 = phi [^while.header61, i32 %600] [^b180, i32 %1132];
    i32 %839 = phi [^while.header61, i32 0] [^b180, i32 %1134];
    i32 %840 = phi [^while.header61, i32 0] [^b180, i32 %1131];
    i1 %841 = scmp lt i32 %839, i32 16;
    cbr i1 %841(prob = 0.97), ^while.body42, ^b143;
^while.header72:
    i32 %842 = phi [^while.header65, i32 %737] [^b174, i32 %1110];
    i32 %843 = phi [^while.header65, i32 %738] [^b174, i32 %1109];
    i32 %844 = phi [^while.header65, i32 0] [^b174, i32 %1111];
    i32 %845 = phi [^while.header65, i32 0] [^b174, i32 %1108];
    i1 %846 = scmp lt i32 %844, i32 16;
    cbr i1 %846(prob = 0.97), ^while.body43, ^while.header80;
^while.header73:
    i32 %847 = phi [^while.header66, i32 %740] [^b175, i32 %1114];
    i32 %848 = phi [^while.header66, i32 %741] [^b175, i32 %1113];
    i32 %849 = phi [^while.header66, i32 0] [^b175, i32 %1115];
    i32 %850 = phi [^while.header66, i32 0] [^b175, i32 %1112];
    i1 %851 = scmp lt i32 %849, i32 16;
    cbr i1 %851(prob = 0.97), ^while.body44, ^while.header81;
^b132:
    i1 %852 = phi [^while.body31, i1 false] [^b122, i1 %759];
    cbr i1 %852(prob = 0.5), ^if.then49, ^b144;
^while.header74:
    i32 %853 = phi [^while.header63, i32 %614] [^b181, i32 %1137];
    i32 %854 = phi [^while.header63, i32 %615] [^b181, i32 %1136];
    i32 %855 = phi [^while.header63, i32 0] [^b181, i32 %1138];
    i32 %856 = phi [^while.header63, i32 0] [^b181, i32 %1135];
    i1 %857 = scmp lt i32 %855, i32 16;
    cbr i1 %857(prob = 0.97), ^while.body45, ^b145;
^b133:
    i1 %858 = scmp gt i32 %281, i32 32767;
    cbr i1 %858(prob = 0.5), ^if.then50, ^if.else18;
^b134:
    i1 %859 = phi [^b124, i1 %765] [^while.body32, i1 false];
    cbr i1 %859(prob = 0.5), ^if.then51, ^b146;
^while.header75:
    i32 %860 = phi [^while.header89, i32 %1231] [^b114, i32 %401];
    i32 %861 = phi [^while.header89, i32 %962] [^b114, i32 %401];
    i1 %862 = scmp neq i32 %860, i32 0;
    cbr i1 %862(prob = 0.97), ^while.header79, ^b151;
^b135:
    i1 %863 = phi [^while.body33, i1 false] [^b125, i1 %770];
    cbr i1 %863(prob = 0.5), ^if.then52, ^b147;
^while.header76:
    i32 %864 = phi [^b182, i32 %1141] [^b115, i32 65535];
    i32 %865 = phi [^b182, i32 %1140] [^b115, i32 %701];
    i32 %866 = phi [^b182, i32 %1142] [^b115, i32 0];
    i32 %867 = phi [^b182, i32 %1139] [^b115, i32 0];
    i1 %868 = scmp lt i32 %866, i32 16;
    cbr i1 %868(prob = 0.97), ^while.body46, ^while.header43;
^b136:
    i1 %869 = scmp gt i32 %297, i32 32767;
    cbr i1 %869(prob = 0.5), ^if.then55, ^if.else21;
^if.then48:
    i32* %870 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %582];
    i32 %871 = load i32* %870;
    i32 %872 = add i32 %871, i32 %583;
    ubr ^b137;
^b137:
    i32 %873 = phi [^if.then48, i32 %872] [^if.else17, i32 %583] [^if.then47, i32 %583];
    i32 %874 = sdiv i32 %581, i32 2;
    i32 %875 = sdiv i32 %580, i32 2;
    i32 %876 = add i32 %582, i32 1;
    ubr ^while.header53;
^b138:
    i32 %877 = srem i32 %714, i32 2;
    i1 %878 = scmp neq i32 %877, i32 0;
    ubr ^b148;
^b139:
    i32 %879 = phi [^if.else16, i32 %796] [^if.then42, i32 %775];
    ubr ^while.header22;
^b140:
    i32 %880 = srem i32 %745, i32 2;
    i1 %881 = scmp neq i32 %880, i32 0;
    ubr ^b149;
^b141:
    i32 %882 = srem i32 %750, i32 2;
    i1 %883 = scmp neq i32 %882, i32 0;
    ubr ^b150;
^if.then49:
    i32* %884 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %620];
    i32 %885 = load i32* %884;
    i32 %886 = add i32 %885, i32 %621;
    ubr ^b144;
^if.then50:
    i32 %887 = load i32* %1;
    i32 %888 = sdiv i32 %281, i32 %887;
    i32 %889 = add i32 %888, i32 65536;
    i32 %890 = load i32* %15;
    i32 %891 = sub i32 %889, i32 %890;
    ubr ^b158;
^if.then51:
    i32* %892 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %626];
    i32 %893 = load i32* %892;
    i32 %894 = add i32 %893, i32 %627;
    ubr ^b146;
^if.then52:
    i32* %895 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %632];
    i32 %896 = load i32* %895;
    i32 %897 = add i32 %896, i32 %633;
    ubr ^b147;
^if.then53:
    i32 %898 = srem i32 %702, i32 2;
    i1 %899 = scmp eq i32 %898, i32 0;
    cbr i1 %899(prob = 0.5), ^if.then57, ^b152;
^if.then54:
    i32 %900 = srem i32 %707, i32 2;
    i1 %901 = scmp eq i32 %900, i32 0;
    cbr i1 %901(prob = 0.5), ^if.then58, ^b153;
^if.then55:
    i32 %902 = load i32* %1;
    i32 %903 = sdiv i32 %297, i32 %902;
    i32 %904 = add i32 %903, i32 65536;
    i32 %905 = load i32* %15;
    i32 %906 = sub i32 %904, i32 %905;
    ubr ^b160;
^b142:
    i32 %907 = mul i32 %835, i32 2;
    ubr ^while.header82;
^b143:
    i32 %908 = mul i32 %840, i32 2;
    ubr ^while.header83;
^b144:
    i32 %909 = phi [^if.then49, i32 %886] [^b132, i32 %621];
    i32 %910 = sdiv i32 %619, i32 2;
    i32 %911 = sdiv i32 %618, i32 2;
    i32 %912 = add i32 %620, i32 1;
    ubr ^while.header57;
^if.then56:
    i32 %913 = srem i32 %719, i32 2;
    i1 %914 = scmp eq i32 %913, i32 0;
    cbr i1 %914(prob = 0.5), ^if.then59, ^b156;
^b145:
    i32 %915 = mul i32 %856, i32 2;
    ubr ^while.header84;
^if.else18:
    i32 %916 = load i32* %1;
    i32 %917 = sdiv i32 %281, i32 %916;
    ubr ^b158;
^b146:
    i32 %918 = phi [^if.then51, i32 %894] [^b134, i32 %627];
    i32 %919 = sdiv i32 %625, i32 2;
    i32 %920 = sdiv i32 %624, i32 2;
    i32 %921 = add i32 %626, i32 1;
    ubr ^while.header58;
^while.body40:
    i32 %922 = srem i32 %824, i32 2;
    i1 %923 = scmp neq i32 %922, i32 0;
    cbr i1 %923(prob = 0.5), ^if.then63, ^if.else23;
^b147:
    i32 %924 = phi [^if.then52, i32 %897] [^b135, i32 %633];
    i32 %925 = sdiv i32 %631, i32 2;
    i32 %926 = sdiv i32 %630, i32 2;
    i32 %927 = add i32 %632, i32 1;
    ubr ^while.header59;
^if.else19:
    i32 %928 = srem i32 %702, i32 2;
    i1 %929 = scmp neq i32 %928, i32 0;
    cbr i1 %929(prob = 0.5), ^if.then57, ^b152;
^if.else20:
    i32 %930 = srem i32 %707, i32 2;
    i1 %931 = scmp neq i32 %930, i32 0;
    cbr i1 %931(prob = 0.5), ^if.then58, ^b153;
^if.else21:
    i32 %932 = load i32* %1;
    i32 %933 = sdiv i32 %297, i32 %932;
    ubr ^b160;
^while.body41:
    i32 %934 = srem i32 %833, i32 2;
    i1 %935 = scmp neq i32 %934, i32 0;
    cbr i1 %935(prob = 0.5), ^b154, ^b167;
^while.body42:
    i32 %936 = srem i32 %838, i32 2;
    i1 %937 = scmp neq i32 %936, i32 0;
    cbr i1 %937(prob = 0.5), ^b155, ^b168;
^while.body43:
    i32 %938 = srem i32 %843, i32 2;
    i1 %939 = scmp neq i32 %938, i32 0;
    cbr i1 %939(prob = 0.5), ^if.then65, ^if.else25;
^while.body44:
    i32 %940 = srem i32 %848, i32 2;
    i1 %941 = scmp neq i32 %940, i32 0;
    cbr i1 %941(prob = 0.5), ^if.then66, ^if.else26;
^b148:
    i1 %942 = phi [^b138, i1 %878] [^while.body36, i1 false];
    cbr i1 %942(prob = 0.5), ^if.then60, ^b161;
^if.else22:
    i32 %943 = srem i32 %719, i32 2;
    i1 %944 = scmp neq i32 %943, i32 0;
    cbr i1 %944(prob = 0.5), ^if.then59, ^b156;
^while.header77:
    i32 %945 = phi [^b193, i32 %1204] [^b126, i32 65535];
    i32 %946 = phi [^b193, i32 %1203] [^b126, i32 %790];
    i32 %947 = phi [^b193, i32 %1205] [^b126, i32 0];
    i32 %948 = phi [^b193, i32 %1202] [^b126, i32 0];
    i1 %949 = scmp lt i32 %947, i32 16;
    cbr i1 %949(prob = 0.97), ^while.body47, ^while.header46;
^while.body45:
    i32 %950 = srem i32 %854, i32 2;
    i1 %951 = scmp neq i32 %950, i32 0;
    cbr i1 %951(prob = 0.5), ^b157, ^b169;
^while.body46:
    i32 %952 = srem i32 %865, i32 2;
    i1 %953 = scmp neq i32 %952, i32 0;
    cbr i1 %953(prob = 0.5), ^b159, ^b170;
^while.header78:
    i32 %954 = phi [^while.header69, i32 %726] [^b194, i32 %1208];
    i32 %955 = phi [^while.header69, i32 %727] [^b194, i32 %1207];
    i32 %956 = phi [^while.header69, i32 0] [^b194, i32 %1209];
    i32 %957 = phi [^while.header69, i32 0] [^b194, i32 %1206];
    i1 %958 = scmp lt i32 %956, i32 16;
    cbr i1 %958(prob = 0.97), ^while.body48, ^b162;
^while.header79:
    i32 %959 = phi [^b191, i32 %1192] [^while.header75, i32 %860];
    i32 %960 = phi [^b191, i32 %1191] [^while.header75, i32 %861];
    i32 %961 = phi [^b191, i32 %1193] [^while.header75, i32 0];
    i32 %962 = phi [^b191, i32 %1190] [^while.header75, i32 0];
    i1 %963 = scmp lt i32 %961, i32 16;
    cbr i1 %963(prob = 0.97), ^while.body49, ^while.header85;
^b149:
    i1 %964 = phi [^while.body38, i1 false] [^b140, i1 %881];
    cbr i1 %964(prob = 0.5), ^if.then61, ^b163;
^b150:
    i1 %965 = phi [^while.body39, i1 false] [^b141, i1 %883];
    cbr i1 %965(prob = 0.5), ^if.then62, ^b164;
^while.header80:
    i32 %966 = phi [^while.header72, i32 %737] [^b195, i32 %1212];
    i32 %967 = phi [^while.header72, i32 %738] [^b195, i32 %1211];
    i32 %968 = phi [^while.header72, i32 0] [^b195, i32 %1213];
    i32 %969 = phi [^while.header72, i32 0] [^b195, i32 %1210];
    i1 %970 = scmp lt i32 %968, i32 16;
    cbr i1 %970(prob = 0.97), ^while.body50, ^b165;
^while.header81:
    i32 %971 = phi [^while.header73, i32 %740] [^b196, i32 %1216];
    i32 %972 = phi [^while.header73, i32 %741] [^b196, i32 %1215];
    i32 %973 = phi [^while.header73, i32 0] [^b196, i32 %1217];
    i32 %974 = phi [^while.header73, i32 0] [^b196, i32 %1214];
    i1 %975 = scmp lt i32 %973, i32 16;
    cbr i1 %975(prob = 0.97), ^while.body51, ^b166;
^b151:
    i1 %976 = scmp gt i32 %400, i32 32767;
    cbr i1 %976(prob = 0.5), ^if.then64, ^if.else24;
^if.then57:
    i32* %977 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %704];
    i32 %978 = load i32* %977;
    i32 %979 = add i32 %978, i32 %705;
    ubr ^b152;
^if.then58:
    i32* %980 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %709];
    i32 %981 = load i32* %980;
    i32 %982 = add i32 %981, i32 %710;
    ubr ^b153;
^if.then59:
    i32* %983 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %721];
    i32 %984 = load i32* %983;
    i32 %985 = add i32 %984, i32 %722;
    ubr ^b156;
^b152:
    i32 %986 = phi [^if.then57, i32 %979] [^if.else19, i32 %705] [^if.then53, i32 %705];
    i32 %987 = sdiv i32 %703, i32 2;
    i32 %988 = sdiv i32 %702, i32 2;
    i32 %989 = add i32 %704, i32 1;
    ubr ^while.header60;
^b153:
    i32 %990 = phi [^if.then58, i32 %982] [^if.else20, i32 %710] [^if.then54, i32 %710];
    i32 %991 = sdiv i32 %708, i32 2;
    i32 %992 = sdiv i32 %707, i32 2;
    i32 %993 = add i32 %709, i32 1;
    ubr ^while.header61;
^b154:
    i32 %994 = srem i32 %832, i32 2;
    i1 %995 = scmp neq i32 %994, i32 0;
    ubr ^b167;
^b155:
    i32 %996 = srem i32 %837, i32 2;
    i1 %997 = scmp neq i32 %996, i32 0;
    ubr ^b168;
^if.then60:
    i32* %998 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %716];
    i32 %999 = load i32* %998;
    i32 %1000 = add i32 %999, i32 %717;
    ubr ^b161;
^b156:
    i32 %1001 = phi [^if.then59, i32 %985] [^if.else22, i32 %722] [^if.then56, i32 %722];
    i32 %1002 = sdiv i32 %720, i32 2;
    i32 %1003 = sdiv i32 %719, i32 2;
    i32 %1004 = add i32 %721, i32 1;
    ubr ^while.header63;
^b157:
    i32 %1005 = srem i32 %853, i32 2;
    i1 %1006 = scmp neq i32 %1005, i32 0;
    ubr ^b169;
^b158:
    i32 %1007 = phi [^if.else18, i32 %917] [^if.then50, i32 %891];
    ubr ^while.header30;
^b159:
    i32 %1008 = srem i32 %864, i32 2;
    i1 %1009 = scmp neq i32 %1008, i32 0;
    ubr ^b170;
^if.then61:
    i32* %1010 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %747];
    i32 %1011 = load i32* %1010;
    i32 %1012 = add i32 %1011, i32 %748;
    ubr ^b163;
^if.then62:
    i32* %1013 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %752];
    i32 %1014 = load i32* %1013;
    i32 %1015 = add i32 %1014, i32 %753;
    ubr ^b164;
^b160:
    i32 %1016 = phi [^if.else21, i32 %933] [^if.then55, i32 %906];
    ubr ^while.header34;
^b161:
    i32 %1017 = phi [^if.then60, i32 %1000] [^b148, i32 %717];
    i32 %1018 = sdiv i32 %715, i32 2;
    i32 %1019 = sdiv i32 %714, i32 2;
    i32 %1020 = add i32 %716, i32 1;
    ubr ^while.header62;
^if.then63:
    i32 %1021 = srem i32 %823, i32 2;
    i1 %1022 = scmp eq i32 %1021, i32 0;
    cbr i1 %1022(prob = 0.5), ^if.then67, ^b172;
^if.then64:
    i32 %1023 = load i32* %1;
    i32 %1024 = sdiv i32 %400, i32 %1023;
    i32 %1025 = add i32 %1024, i32 65536;
    i32 %1026 = load i32* %15;
    i32 %1027 = sub i32 %1025, i32 %1026;
    ubr ^b178;
^b162:
    i32 %1028 = mul i32 %957, i32 2;
    ubr ^while.header86;
^b163:
    i32 %1029 = phi [^if.then61, i32 %1012] [^b149, i32 %748];
    i32 %1030 = sdiv i32 %746, i32 2;
    i32 %1031 = sdiv i32 %745, i32 2;
    i32 %1032 = add i32 %747, i32 1;
    ubr ^while.header67;
^b164:
    i32 %1033 = phi [^if.then62, i32 %1015] [^b150, i32 %753];
    i32 %1034 = sdiv i32 %751, i32 2;
    i32 %1035 = sdiv i32 %750, i32 2;
    i32 %1036 = add i32 %752, i32 1;
    ubr ^while.header68;
^if.then65:
    i32 %1037 = srem i32 %842, i32 2;
    i1 %1038 = scmp eq i32 %1037, i32 0;
    cbr i1 %1038(prob = 0.5), ^if.then68, ^b174;
^if.then66:
    i32 %1039 = srem i32 %847, i32 2;
    i1 %1040 = scmp eq i32 %1039, i32 0;
    cbr i1 %1040(prob = 0.5), ^if.then69, ^b175;
^b165:
    i32 %1041 = mul i32 %969, i32 2;
    ubr ^while.header87;
^b166:
    i32 %1042 = mul i32 %974, i32 2;
    ubr ^while.header88;
^while.body47:
    i32 %1043 = srem i32 %946, i32 2;
    i1 %1044 = scmp neq i32 %1043, i32 0;
    cbr i1 %1044(prob = 0.5), ^b171, ^b184;
^if.else23:
    i32 %1045 = srem i32 %823, i32 2;
    i1 %1046 = scmp neq i32 %1045, i32 0;
    cbr i1 %1046(prob = 0.5), ^if.then67, ^b172;
^if.else24:
    i32 %1047 = load i32* %1;
    i32 %1048 = sdiv i32 %400, i32 %1047;
    ubr ^b178;
^while.body48:
    i32 %1049 = srem i32 %955, i32 2;
    i1 %1050 = scmp neq i32 %1049, i32 0;
    cbr i1 %1050(prob = 0.5), ^b173, ^b185;
^while.body49:
    i32 %1051 = srem i32 %960, i32 2;
    i1 %1052 = scmp neq i32 %1051, i32 0;
    cbr i1 %1052(prob = 0.5), ^if.then74, ^if.else27;
^b167:
    i1 %1053 = phi [^b154, i1 %995] [^while.body41, i1 false];
    cbr i1 %1053(prob = 0.5), ^if.then70, ^b179;
^b168:
    i1 %1054 = phi [^while.body42, i1 false] [^b155, i1 %997];
    cbr i1 %1054(prob = 0.5), ^if.then71, ^b180;
^if.else25:
    i32 %1055 = srem i32 %842, i32 2;
    i1 %1056 = scmp neq i32 %1055, i32 0;
    cbr i1 %1056(prob = 0.5), ^if.then68, ^b174;
^if.else26:
    i32 %1057 = srem i32 %847, i32 2;
    i1 %1058 = scmp neq i32 %1057, i32 0;
    cbr i1 %1058(prob = 0.5), ^if.then69, ^b175;
^while.header82:
    i32 %1059 = phi [^b204, i32 %1253] [^b142, i32 65535];
    i32 %1060 = phi [^b204, i32 %1252] [^b142, i32 %907];
    i32 %1061 = phi [^b204, i32 %1254] [^b142, i32 0];
    i32 %1062 = phi [^b204, i32 %1251] [^b142, i32 0];
    i1 %1063 = scmp lt i32 %1061, i32 16;
    cbr i1 %1063(prob = 0.97), ^while.body52, ^while.header54;
^while.header83:
    i32 %1064 = phi [^b205, i32 %1257] [^b143, i32 65535];
    i32 %1065 = phi [^b205, i32 %1256] [^b143, i32 %908];
    i32 %1066 = phi [^b205, i32 %1258] [^b143, i32 0];
    i32 %1067 = phi [^b205, i32 %1255] [^b143, i32 0];
    i1 %1068 = scmp lt i32 %1066, i32 16;
    cbr i1 %1068(prob = 0.97), ^while.body53, ^while.header55;
^while.body50:
    i32 %1069 = srem i32 %967, i32 2;
    i1 %1070 = scmp neq i32 %1069, i32 0;
    cbr i1 %1070(prob = 0.5), ^b176, ^b186;
^while.body51:
    i32 %1071 = srem i32 %972, i32 2;
    i1 %1072 = scmp neq i32 %1071, i32 0;
    cbr i1 %1072(prob = 0.5), ^b177, ^b187;
^b169:
    i1 %1073 = phi [^while.body45, i1 false] [^b157, i1 %1006];
    cbr i1 %1073(prob = 0.5), ^if.then72, ^b181;
^while.header84:
    i32 %1074 = phi [^b206, i32 %1261] [^b145, i32 65535];
    i32 %1075 = phi [^b206, i32 %1260] [^b145, i32 %915];
    i32 %1076 = phi [^b206, i32 %1262] [^b145, i32 0];
    i32 %1077 = phi [^b206, i32 %1259] [^b145, i32 0];
    i1 %1078 = scmp lt i32 %1076, i32 16;
    cbr i1 %1078(prob = 0.97), ^while.body54, ^while.header56;
^b170:
    i1 %1079 = phi [^b159, i1 %1009] [^while.body46, i1 false];
    cbr i1 %1079(prob = 0.5), ^if.then73, ^b182;
^while.header85:
    i32 %1080 = phi [^while.header79, i32 %860] [^b207, i32 %1265];
    i32 %1081 = phi [^while.header79, i32 %861] [^b207, i32 %1264];
    i32 %1082 = phi [^while.header79, i32 0] [^b207, i32 %1266];
    i32 %1083 = phi [^while.header79, i32 0] [^b207, i32 %1263];
    i1 %1084 = scmp lt i32 %1082, i32 16;
    cbr i1 %1084(prob = 0.97), ^while.body55, ^b183;
^if.then67:
    i32* %1085 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %825];
    i32 %1086 = load i32* %1085;
    i32 %1087 = add i32 %1086, i32 %826;
    ubr ^b172;
^if.then68:
    i32* %1088 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %844];
    i32 %1089 = load i32* %1088;
    i32 %1090 = add i32 %1089, i32 %845;
    ubr ^b174;
^if.then69:
    i32* %1091 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %849];
    i32 %1092 = load i32* %1091;
    i32 %1093 = add i32 %1092, i32 %850;
    ubr ^b175;
^b171:
    i32 %1094 = srem i32 %945, i32 2;
    i1 %1095 = scmp neq i32 %1094, i32 0;
    ubr ^b184;
^b172:
    i32 %1096 = phi [^if.then67, i32 %1087] [^if.else23, i32 %826] [^if.then63, i32 %826];
    i32 %1097 = sdiv i32 %824, i32 2;
    i32 %1098 = sdiv i32 %823, i32 2;
    i32 %1099 = add i32 %825, i32 1;
    ubr ^while.header69;
^b173:
    i32 %1100 = srem i32 %954, i32 2;
    i1 %1101 = scmp neq i32 %1100, i32 0;
    ubr ^b185;
^if.then70:
    i32* %1102 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %834];
    i32 %1103 = load i32* %1102;
    i32 %1104 = add i32 %1103, i32 %835;
    ubr ^b179;
^if.then71:
    i32* %1105 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %839];
    i32 %1106 = load i32* %1105;
    i32 %1107 = add i32 %1106, i32 %840;
    ubr ^b180;
^b174:
    i32 %1108 = phi [^if.then68, i32 %1090] [^if.else25, i32 %845] [^if.then65, i32 %845];
    i32 %1109 = sdiv i32 %843, i32 2;
    i32 %1110 = sdiv i32 %842, i32 2;
    i32 %1111 = add i32 %844, i32 1;
    ubr ^while.header72;
^b175:
    i32 %1112 = phi [^if.then69, i32 %1093] [^if.else26, i32 %850] [^if.then66, i32 %850];
    i32 %1113 = sdiv i32 %848, i32 2;
    i32 %1114 = sdiv i32 %847, i32 2;
    i32 %1115 = add i32 %849, i32 1;
    ubr ^while.header73;
^b176:
    i32 %1116 = srem i32 %966, i32 2;
    i1 %1117 = scmp neq i32 %1116, i32 0;
    ubr ^b186;
^b177:
    i32 %1118 = srem i32 %971, i32 2;
    i1 %1119 = scmp neq i32 %1118, i32 0;
    ubr ^b187;
^if.then72:
    i32* %1120 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %855];
    i32 %1121 = load i32* %1120;
    i32 %1122 = add i32 %1121, i32 %856;
    ubr ^b181;
^if.then73:
    i32* %1123 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %866];
    i32 %1124 = load i32* %1123;
    i32 %1125 = add i32 %1124, i32 %867;
    ubr ^b182;
^b178:
    i32 %1126 = phi [^if.else24, i32 %1048] [^if.then64, i32 %1027];
    ubr ^while.header44;
^b179:
    i32 %1127 = phi [^if.then70, i32 %1104] [^b167, i32 %835];
    i32 %1128 = sdiv i32 %833, i32 2;
    i32 %1129 = sdiv i32 %832, i32 2;
    i32 %1130 = add i32 %834, i32 1;
    ubr ^while.header70;
^b180:
    i32 %1131 = phi [^if.then71, i32 %1107] [^b168, i32 %840];
    i32 %1132 = sdiv i32 %838, i32 2;
    i32 %1133 = sdiv i32 %837, i32 2;
    i32 %1134 = add i32 %839, i32 1;
    ubr ^while.header71;
^b181:
    i32 %1135 = phi [^if.then72, i32 %1122] [^b169, i32 %856];
    i32 %1136 = sdiv i32 %854, i32 2;
    i32 %1137 = sdiv i32 %853, i32 2;
    i32 %1138 = add i32 %855, i32 1;
    ubr ^while.header74;
^b182:
    i32 %1139 = phi [^if.then73, i32 %1125] [^b170, i32 %867];
    i32 %1140 = sdiv i32 %865, i32 2;
    i32 %1141 = sdiv i32 %864, i32 2;
    i32 %1142 = add i32 %866, i32 1;
    ubr ^while.header76;
^if.then74:
    i32 %1143 = srem i32 %959, i32 2;
    i1 %1144 = scmp eq i32 %1143, i32 0;
    cbr i1 %1144(prob = 0.5), ^if.then75, ^b191;
^b183:
    i32 %1145 = mul i32 %1083, i32 2;
    ubr ^while.header89;
^while.body52:
    i32 %1146 = srem i32 %1060, i32 2;
    i1 %1147 = scmp neq i32 %1146, i32 0;
    cbr i1 %1147(prob = 0.5), ^b188, ^b197;
^while.body53:
    i32 %1148 = srem i32 %1065, i32 2;
    i1 %1149 = scmp neq i32 %1148, i32 0;
    cbr i1 %1149(prob = 0.5), ^b189, ^b198;
^b184:
    i1 %1150 = phi [^b171, i1 %1095] [^while.body47, i1 false];
    cbr i1 %1150(prob = 0.5), ^if.then76, ^b193;
^while.body54:
    i32 %1151 = srem i32 %1075, i32 2;
    i1 %1152 = scmp neq i32 %1151, i32 0;
    cbr i1 %1152(prob = 0.5), ^b190, ^b199;
^b185:
    i1 %1153 = phi [^while.body48, i1 false] [^b173, i1 %1101];
    cbr i1 %1153(prob = 0.5), ^if.then77, ^b194;
^if.else27:
    i32 %1154 = srem i32 %959, i32 2;
    i1 %1155 = scmp neq i32 %1154, i32 0;
    cbr i1 %1155(prob = 0.5), ^if.then75, ^b191;
^while.header86:
    i32 %1156 = phi [^b212, i32 %1285] [^b162, i32 65535];
    i32 %1157 = phi [^b212, i32 %1284] [^b162, i32 %1028];
    i32 %1158 = phi [^b212, i32 %1286] [^b162, i32 0];
    i32 %1159 = phi [^b212, i32 %1283] [^b162, i32 0];
    i1 %1160 = scmp lt i32 %1158, i32 16;
    cbr i1 %1160(prob = 0.97), ^while.body56, ^while.header64;
^while.body55:
    i32 %1161 = srem i32 %1081, i32 2;
    i1 %1162 = scmp neq i32 %1161, i32 0;
    cbr i1 %1162(prob = 0.5), ^b192, ^b200;
^b186:
    i1 %1163 = phi [^while.body50, i1 false] [^b176, i1 %1117];
    cbr i1 %1163(prob = 0.5), ^if.then78, ^b195;
^b187:
    i1 %1164 = phi [^while.body51, i1 false] [^b177, i1 %1119];
    cbr i1 %1164(prob = 0.5), ^if.then79, ^b196;
^while.header87:
    i32 %1165 = phi [^b213, i32 %1289] [^b165, i32 65535];
    i32 %1166 = phi [^b213, i32 %1288] [^b165, i32 %1041];
    i32 %1167 = phi [^b213, i32 %1290] [^b165, i32 0];
    i32 %1168 = phi [^b213, i32 %1287] [^b165, i32 0];
    i1 %1169 = scmp lt i32 %1167, i32 16;
    cbr i1 %1169(prob = 0.97), ^while.body57, ^while.header65;
^while.header88:
    i32 %1170 = phi [^b214, i32 %1293] [^b166, i32 65535];
    i32 %1171 = phi [^b214, i32 %1292] [^b166, i32 %1042];
    i32 %1172 = phi [^b214, i32 %1294] [^b166, i32 0];
    i32 %1173 = phi [^b214, i32 %1291] [^b166, i32 0];
    i1 %1174 = scmp lt i32 %1172, i32 16;
    cbr i1 %1174(prob = 0.97), ^while.body58, ^while.header66;
^if.then75:
    i32* %1175 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %961];
    i32 %1176 = load i32* %1175;
    i32 %1177 = add i32 %1176, i32 %962;
    ubr ^b191;
^b188:
    i32 %1178 = srem i32 %1059, i32 2;
    i1 %1179 = scmp neq i32 %1178, i32 0;
    ubr ^b197;
^b189:
    i32 %1180 = srem i32 %1064, i32 2;
    i1 %1181 = scmp neq i32 %1180, i32 0;
    ubr ^b198;
^if.then76:
    i32* %1182 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %947];
    i32 %1183 = load i32* %1182;
    i32 %1184 = add i32 %1183, i32 %948;
    ubr ^b193;
^b190:
    i32 %1185 = srem i32 %1074, i32 2;
    i1 %1186 = scmp neq i32 %1185, i32 0;
    ubr ^b199;
^if.then77:
    i32* %1187 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %956];
    i32 %1188 = load i32* %1187;
    i32 %1189 = add i32 %1188, i32 %957;
    ubr ^b194;
^b191:
    i32 %1190 = phi [^if.then75, i32 %1177] [^if.else27, i32 %962] [^if.then74, i32 %962];
    i32 %1191 = sdiv i32 %960, i32 2;
    i32 %1192 = sdiv i32 %959, i32 2;
    i32 %1193 = add i32 %961, i32 1;
    ubr ^while.header79;
^b192:
    i32 %1194 = srem i32 %1080, i32 2;
    i1 %1195 = scmp neq i32 %1194, i32 0;
    ubr ^b200;
^if.then78:
    i32* %1196 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %968];
    i32 %1197 = load i32* %1196;
    i32 %1198 = add i32 %1197, i32 %969;
    ubr ^b195;
^if.then79:
    i32* %1199 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %973];
    i32 %1200 = load i32* %1199;
    i32 %1201 = add i32 %1200, i32 %974;
    ubr ^b196;
^b193:
    i32 %1202 = phi [^if.then76, i32 %1184] [^b184, i32 %948];
    i32 %1203 = sdiv i32 %946, i32 2;
    i32 %1204 = sdiv i32 %945, i32 2;
    i32 %1205 = add i32 %947, i32 1;
    ubr ^while.header77;
^b194:
    i32 %1206 = phi [^if.then77, i32 %1189] [^b185, i32 %957];
    i32 %1207 = sdiv i32 %955, i32 2;
    i32 %1208 = sdiv i32 %954, i32 2;
    i32 %1209 = add i32 %956, i32 1;
    ubr ^while.header78;
^b195:
    i32 %1210 = phi [^if.then78, i32 %1198] [^b186, i32 %969];
    i32 %1211 = sdiv i32 %967, i32 2;
    i32 %1212 = sdiv i32 %966, i32 2;
    i32 %1213 = add i32 %968, i32 1;
    ubr ^while.header80;
^b196:
    i32 %1214 = phi [^if.then79, i32 %1201] [^b187, i32 %974];
    i32 %1215 = sdiv i32 %972, i32 2;
    i32 %1216 = sdiv i32 %971, i32 2;
    i32 %1217 = add i32 %973, i32 1;
    ubr ^while.header81;
^while.body56:
    i32 %1218 = srem i32 %1157, i32 2;
    i1 %1219 = scmp neq i32 %1218, i32 0;
    cbr i1 %1219(prob = 0.5), ^b201, ^b208;
^b197:
    i1 %1220 = phi [^while.body52, i1 false] [^b188, i1 %1179];
    cbr i1 %1220(prob = 0.5), ^if.then80, ^b204;
^b198:
    i1 %1221 = phi [^b189, i1 %1181] [^while.body53, i1 false];
    cbr i1 %1221(prob = 0.5), ^if.then81, ^b205;
^while.body57:
    i32 %1222 = srem i32 %1166, i32 2;
    i1 %1223 = scmp neq i32 %1222, i32 0;
    cbr i1 %1223(prob = 0.5), ^b202, ^b209;
^while.body58:
    i32 %1224 = srem i32 %1171, i32 2;
    i1 %1225 = scmp neq i32 %1224, i32 0;
    cbr i1 %1225(prob = 0.5), ^b203, ^b210;
^b199:
    i1 %1226 = phi [^while.body54, i1 false] [^b190, i1 %1186];
    cbr i1 %1226(prob = 0.5), ^if.then82, ^b206;
^b200:
    i1 %1227 = phi [^while.body55, i1 false] [^b192, i1 %1195];
    cbr i1 %1227(prob = 0.5), ^if.then83, ^b207;
^while.header89:
    i32 %1228 = phi [^b216, i32 %1301] [^b183, i32 65535];
    i32 %1229 = phi [^b216, i32 %1300] [^b183, i32 %1145];
    i32 %1230 = phi [^b216, i32 %1302] [^b183, i32 0];
    i32 %1231 = phi [^b216, i32 %1299] [^b183, i32 0];
    i1 %1232 = scmp lt i32 %1230, i32 16;
    cbr i1 %1232(prob = 0.97), ^while.body59, ^while.header75;
^b201:
    i32 %1233 = srem i32 %1156, i32 2;
    i1 %1234 = scmp neq i32 %1233, i32 0;
    ubr ^b208;
^if.then80:
    i32* %1235 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1061];
    i32 %1236 = load i32* %1235;
    i32 %1237 = add i32 %1236, i32 %1062;
    ubr ^b204;
^if.then81:
    i32* %1238 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1066];
    i32 %1239 = load i32* %1238;
    i32 %1240 = add i32 %1239, i32 %1067;
    ubr ^b205;
^b202:
    i32 %1241 = srem i32 %1165, i32 2;
    i1 %1242 = scmp neq i32 %1241, i32 0;
    ubr ^b209;
^b203:
    i32 %1243 = srem i32 %1170, i32 2;
    i1 %1244 = scmp neq i32 %1243, i32 0;
    ubr ^b210;
^if.then82:
    i32* %1245 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1076];
    i32 %1246 = load i32* %1245;
    i32 %1247 = add i32 %1246, i32 %1077;
    ubr ^b206;
^if.then83:
    i32* %1248 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1082];
    i32 %1249 = load i32* %1248;
    i32 %1250 = add i32 %1249, i32 %1083;
    ubr ^b207;
^b204:
    i32 %1251 = phi [^if.then80, i32 %1237] [^b197, i32 %1062];
    i32 %1252 = sdiv i32 %1060, i32 2;
    i32 %1253 = sdiv i32 %1059, i32 2;
    i32 %1254 = add i32 %1061, i32 1;
    ubr ^while.header82;
^b205:
    i32 %1255 = phi [^if.then81, i32 %1240] [^b198, i32 %1067];
    i32 %1256 = sdiv i32 %1065, i32 2;
    i32 %1257 = sdiv i32 %1064, i32 2;
    i32 %1258 = add i32 %1066, i32 1;
    ubr ^while.header83;
^b206:
    i32 %1259 = phi [^if.then82, i32 %1247] [^b199, i32 %1077];
    i32 %1260 = sdiv i32 %1075, i32 2;
    i32 %1261 = sdiv i32 %1074, i32 2;
    i32 %1262 = add i32 %1076, i32 1;
    ubr ^while.header84;
^b207:
    i32 %1263 = phi [^if.then83, i32 %1250] [^b200, i32 %1083];
    i32 %1264 = sdiv i32 %1081, i32 2;
    i32 %1265 = sdiv i32 %1080, i32 2;
    i32 %1266 = add i32 %1082, i32 1;
    ubr ^while.header85;
^b208:
    i1 %1267 = phi [^while.body56, i1 false] [^b201, i1 %1234];
    cbr i1 %1267(prob = 0.5), ^if.then84, ^b212;
^while.body59:
    i32 %1268 = srem i32 %1229, i32 2;
    i1 %1269 = scmp neq i32 %1268, i32 0;
    cbr i1 %1269(prob = 0.5), ^b211, ^b215;
^b209:
    i1 %1270 = phi [^while.body57, i1 false] [^b202, i1 %1242];
    cbr i1 %1270(prob = 0.5), ^if.then85, ^b213;
^b210:
    i1 %1271 = phi [^while.body58, i1 false] [^b203, i1 %1244];
    cbr i1 %1271(prob = 0.5), ^if.then86, ^b214;
^if.then84:
    i32* %1272 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1158];
    i32 %1273 = load i32* %1272;
    i32 %1274 = add i32 %1273, i32 %1159;
    ubr ^b212;
^b211:
    i32 %1275 = srem i32 %1228, i32 2;
    i1 %1276 = scmp neq i32 %1275, i32 0;
    ubr ^b215;
^if.then85:
    i32* %1277 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1167];
    i32 %1278 = load i32* %1277;
    i32 %1279 = add i32 %1278, i32 %1168;
    ubr ^b213;
^if.then86:
    i32* %1280 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1172];
    i32 %1281 = load i32* %1280;
    i32 %1282 = add i32 %1281, i32 %1173;
    ubr ^b214;
^b212:
    i32 %1283 = phi [^if.then84, i32 %1274] [^b208, i32 %1159];
    i32 %1284 = sdiv i32 %1157, i32 2;
    i32 %1285 = sdiv i32 %1156, i32 2;
    i32 %1286 = add i32 %1158, i32 1;
    ubr ^while.header86;
^b213:
    i32 %1287 = phi [^if.then85, i32 %1279] [^b209, i32 %1168];
    i32 %1288 = sdiv i32 %1166, i32 2;
    i32 %1289 = sdiv i32 %1165, i32 2;
    i32 %1290 = add i32 %1167, i32 1;
    ubr ^while.header87;
^b214:
    i32 %1291 = phi [^if.then86, i32 %1282] [^b210, i32 %1173];
    i32 %1292 = sdiv i32 %1171, i32 2;
    i32 %1293 = sdiv i32 %1170, i32 2;
    i32 %1294 = add i32 %1172, i32 1;
    ubr ^while.header88;
^b215:
    i1 %1295 = phi [^b211, i1 %1276] [^while.body59, i1 false];
    cbr i1 %1295(prob = 0.5), ^if.then87, ^b216;
^if.then87:
    i32* %1296 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1230];
    i32 %1297 = load i32* %1296;
    i32 %1298 = add i32 %1297, i32 %1231;
    ubr ^b216;
^b216:
    i32 %1299 = phi [^if.then87, i32 %1298] [^b215, i32 %1231];
    i32 %1300 = sdiv i32 %1229, i32 2;
    i32 %1301 = sdiv i32 %1228, i32 2;
    i32 %1302 = add i32 %1230, i32 1;
    ubr ^while.header89;
}
