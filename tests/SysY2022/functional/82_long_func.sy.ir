internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [16 * i32]* %SHIFT_TABLE = alloc [16 * i32];
    i32* %0 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 0];
    store i32* %0 with i32 1;
    i32* %1 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 1];
    store i32* %1 with i32 2;
    i32* %2 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 2];
    store i32* %2 with i32 4;
    i32* %3 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 3];
    store i32* %3 with i32 8;
    i32* %4 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 4];
    store i32* %4 with i32 16;
    i32* %5 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 5];
    store i32* %5 with i32 32;
    i32* %6 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 6];
    store i32* %6 with i32 64;
    i32* %7 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 7];
    store i32* %7 with i32 128;
    i32* %8 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 8];
    store i32* %8 with i32 256;
    i32* %9 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 9];
    store i32* %9 with i32 512;
    i32* %10 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 10];
    store i32* %10 with i32 1024;
    i32* %11 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 11];
    store i32* %11 with i32 2048;
    i32* %12 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 12];
    store i32* %12 with i32 4096;
    i32* %13 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 13];
    store i32* %13 with i32 8192;
    i32* %14 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 14];
    store i32* %14 with i32 16384;
    i32* %15 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 15];
    store i32* %15 with i32 32768;
    ubr ^while.header;
  ^while.header:
    i32 %16 = phi [^entry, i32 2] [^b21, i32 %62];
    i32 %17 = phi [^entry, i32 1] [^b21, i32 %34];
    i32 %18 = phi [^entry, i32 0] [^b21, i32 %138];
    i1 %19 = scmp gt i32 %18, i32 0;
    cbr i1 %19(prob = 0.97), ^while.header1, ^b;
  ^b:
    call (i32) -> void @putint(i32 %17);
    call (i32) -> void @putch(i32 10);
    ubr ^while.header2;
  ^while.header1:
    i32 %20 = phi [^while.header, i32 0] [^b6, i32 %51];
    i32 %21 = phi [^while.header, i32 1] [^b6, i32 %50];
    i32 %22 = phi [^while.header, i32 %18] [^b6, i32 %49];
    i32 %23 = phi [^while.header, i32 0] [^b6, i32 %48];
    i1 %24 = scmp lt i32 %20, i32 16;
    cbr i1 %24(prob = 0.97), ^while.body, ^b1;
  ^while.body:
    i32 %25 = srem i32 %22, i32 2;
    i1 %26 = scmp neq i32 %25, i32 0;
    cbr i1 %26(prob = 0.5), ^b2, ^b5;
  ^while.header2:
    i32 %27 = phi [^b, i32 2] [^b42, i32 %125];
    i32 %28 = phi [^b, i32 1] [^b42, i32 %243];
    i32 %29 = phi [^b, i32 1] [^b42, i32 %68];
    i1 %30 = scmp gt i32 %28, i32 0;
    cbr i1 %30(prob = 0.97), ^while.header3, ^b3;
  ^b1:
    i1 %31 = scmp neq i32 %23, i32 0;
    cbr i1 %31(prob = 0.5), ^while.header4, ^b4;
  ^b2:
    i32 %32 = srem i32 %21, i32 2;
    i1 %33 = scmp neq i32 %32, i32 0;
    ubr ^b5;
  ^b3:
    call (i32) -> void @putint(i32 %29);
    call (i32) -> void @putch(i32 10);
    ubr ^while.header6;
  ^b4:
    i32 %34 = phi [^b1, i32 %17] [^while.header4, i32 %42];
    ubr ^while.header7;
  ^b5:
    i1 %35 = phi [^while.body, i1 false] [^b2, i1 %33];
    cbr i1 %35(prob = 0.5), ^if.then, ^b6;
  ^while.header3:
    i32 %36 = phi [^while.header2, i32 0] [^b15, i32 %103];
    i32 %37 = phi [^while.header2, i32 1] [^b15, i32 %102];
    i32 %38 = phi [^while.header2, i32 %28] [^b15, i32 %101];
    i32 %39 = phi [^while.header2, i32 0] [^b15, i32 %100];
    i1 %40 = scmp lt i32 %36, i32 16;
    cbr i1 %40(prob = 0.97), ^while.body1, ^b7;
  ^while.header4:
    i32 %41 = phi [^b1, i32 %17] [^b53, i32 %161];
    i32 %42 = phi [^b1, i32 0] [^b53, i32 %104];
    i32 %43 = phi [^b1, i32 %16] [^b53, i32 %330];
    i1 %44 = scmp neq i32 %43, i32 0;
    cbr i1 %44(prob = 0.97), ^while.header5, ^b4;
  ^if.then:
    i32* %45 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %20];
    i32 %46 = load i32* %45;
    i32 %47 = add i32 %23, i32 %46;
    ubr ^b6;
  ^b6:
    i32 %48 = phi [^b5, i32 %23] [^if.then, i32 %47];
    i32 %49 = sdiv i32 %22, i32 2;
    i32 %50 = sdiv i32 %21, i32 2;
    i32 %51 = add i32 %20, i32 1;
    ubr ^while.header1;
  ^while.body1:
    i32 %52 = srem i32 %38, i32 2;
    i1 %53 = scmp neq i32 %52, i32 0;
    cbr i1 %53(prob = 0.5), ^b8, ^b10;
  ^while.header5:
    i32 %54 = phi [^while.header4, i32 0] [^b22, i32 %142];
    i32 %55 = phi [^while.header4, i32 1] [^b22, i32 %141];
    i32 %56 = phi [^while.header4, i32 %43] [^b22, i32 %140];
    i32 %57 = phi [^while.header4, i32 0] [^b22, i32 %139];
    i1 %58 = scmp lt i32 %54, i32 16;
    cbr i1 %58(prob = 0.97), ^while.body2, ^b11;
  ^while.header6:
    i32 %59 = phi [^b3, i32 2] [^b14, i32 %94];
    i1 %60 = scmp lt i32 %59, i32 16;
    cbr i1 %60(prob = 0.97), ^while.header8, ^while.header11;
  ^while.header7:
    i32 %61 = phi [^b4, i32 %16] [^b67, i32 %228];
    i32 %62 = phi [^b4, i32 0] [^b67, i32 %143];
    i32 %63 = phi [^b4, i32 %16] [^b67, i32 %437];
    i1 %64 = scmp neq i32 %63, i32 0;
    cbr i1 %64(prob = 0.97), ^while.header9, ^b12;
  ^b7:
    i1 %65 = scmp neq i32 %39, i32 0;
    cbr i1 %65(prob = 0.5), ^while.header10, ^b9;
  ^b8:
    i32 %66 = srem i32 %37, i32 2;
    i1 %67 = scmp neq i32 %66, i32 0;
    ubr ^b10;
  ^b9:
    i32 %68 = phi [^b7, i32 %29] [^while.header10, i32 %83];
    ubr ^while.header15;
  ^while.body2:
    i32 %69 = srem i32 %56, i32 2;
    i1 %70 = scmp neq i32 %69, i32 0;
    cbr i1 %70(prob = 0.5), ^b13, ^b17;
  ^b10:
    i1 %71 = phi [^while.body1, i1 false] [^b8, i1 %67];
    cbr i1 %71(prob = 0.5), ^if.then1, ^b15;
  ^while.header8:
    i32 %72 = phi [^while.header6, i32 2] [^b84, i32 %286];
    i32 %73 = phi [^while.header6, i32 1] [^b84, i32 %188];
    i32 %74 = phi [^while.header6, i32 %59] [^b84, i32 %544];
    i1 %75 = scmp gt i32 %74, i32 0;
    cbr i1 %75(prob = 0.97), ^while.header12, ^b14;
  ^while.header9:
    i32 %76 = phi [^while.header7, i32 0] [^b32, i32 %192];
    i32 %77 = phi [^while.header7, i32 0] [^b32, i32 %189];
    i32 %78 = phi [^while.header7, i32 1] [^b32, i32 %191];
    i32 %79 = phi [^while.header7, i32 %63] [^b32, i32 %190];
    i1 %80 = scmp lt i32 %76, i32 16;
    cbr i1 %80(prob = 0.97), ^while.body3, ^b18;
  ^while.header10:
    i32 %81 = phi [^b7, i32 %29] [^b86, i32 %294];
    i32 %82 = phi [^b7, i32 %27] [^b86, i32 %549];
    i32 %83 = phi [^b7, i32 0] [^b86, i32 %193];
    i1 %84 = scmp neq i32 %82, i32 0;
    cbr i1 %84(prob = 0.97), ^while.header13, ^b9;
  ^b11:
    i1 %85 = scmp neq i32 %57, i32 0;
    cbr i1 %85(prob = 0.5), ^while.header14, ^b16;
  ^b12:
    i1 %86 = scmp gt i32 %18, i32 32767;
    cbr i1 %86(prob = 0.5), ^if.then2, ^if.else;
  ^while.header11:
    i32 %87 = phi [^while.header6, i32 0] [^b35, i32 %201];
    i1 %88 = scmp lt i32 %87, i32 16;
    cbr i1 %88(prob = 0.97), ^while.header16, ^b19;
  ^b13:
    i32 %89 = srem i32 %55, i32 2;
    i1 %90 = scmp neq i32 %89, i32 0;
    ubr ^b17;
  ^if.then1:
    i32* %91 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %36];
    i32 %92 = load i32* %91;
    i32 %93 = add i32 %39, i32 %92;
    ubr ^b15;
  ^b14:
    call (i32) -> void @putint(i32 %73);
    call (i32) -> void @putch(i32 10);
    i32 %94 = add i32 %59, i32 1;
    ubr ^while.header6;
  ^if.then2:
    i32 %95 = load i32* %1;
    i32 %96 = sdiv i32 %18, i32 %95;
    i32 %97 = add i32 %96, i32 65536;
    i32 %98 = load i32* %15;
    i32 %99 = sub i32 %97, i32 %98;
    ubr ^b21;
  ^b15:
    i32 %100 = phi [^b10, i32 %39] [^if.then1, i32 %93];
    i32 %101 = sdiv i32 %38, i32 2;
    i32 %102 = sdiv i32 %37, i32 2;
    i32 %103 = add i32 %36, i32 1;
    ubr ^while.header3;
  ^b16:
    i32 %104 = phi [^b11, i32 %42] [^while.header14, i32 %121];
    ubr ^while.header19;
  ^if.else:
    i32 %105 = load i32* %1;
    i32 %106 = sdiv i32 %18, i32 %105;
    ubr ^b21;
  ^while.body3:
    i32 %107 = srem i32 %79, i32 2;
    i1 %108 = scmp neq i32 %107, i32 0;
    cbr i1 %108(prob = 0.5), ^b20, ^b24;
  ^while.header12:
    i32 %109 = phi [^while.header8, i32 0] [^b43, i32 %244];
    i32 %110 = phi [^while.header8, i32 0] [^b43, i32 %247];
    i32 %111 = phi [^while.header8, i32 1] [^b43, i32 %246];
    i32 %112 = phi [^while.header8, i32 %74] [^b43, i32 %245];
    i1 %113 = scmp lt i32 %110, i32 16;
    cbr i1 %113(prob = 0.97), ^while.body4, ^b25;
  ^b17:
    i1 %114 = phi [^while.body2, i1 false] [^b13, i1 %90];
    cbr i1 %114(prob = 0.5), ^if.then3, ^b22;
  ^while.header13:
    i32 %115 = phi [^while.header10, i32 0] [^b44, i32 %256];
    i32 %116 = phi [^while.header10, i32 1] [^b44, i32 %255];
    i32 %117 = phi [^while.header10, i32 %82] [^b44, i32 %254];
    i32 %118 = phi [^while.header10, i32 0] [^b44, i32 %253];
    i1 %119 = scmp lt i32 %115, i32 16;
    cbr i1 %119(prob = 0.97), ^while.body5, ^b26;
  ^while.header14:
    i32 %120 = phi [^b11, i32 %41] [^while.header42, i32 %397];
    i32 %121 = phi [^b11, i32 %42] [^while.header42, i32 %149];
    i1 %122 = scmp neq i32 %120, i32 0;
    cbr i1 %122(prob = 0.97), ^while.header17, ^b16;
  ^while.header15:
    i32 %123 = phi [^b9, i32 %27] [^b108, i32 %401];
    i32 %124 = phi [^b9, i32 %27] [^b108, i32 %681];
    i32 %125 = phi [^b9, i32 0] [^b108, i32 %261];
    i1 %126 = scmp neq i32 %124, i32 0;
    cbr i1 %126(prob = 0.97), ^while.header18, ^b27;
  ^b18:
    i1 %127 = scmp neq i32 %77, i32 0;
    cbr i1 %127(prob = 0.5), ^while.header20, ^b23;
  ^while.header16:
    i32 %128 = phi [^while.header11, i32 2] [^b110, i32 %407];
    i32 %129 = phi [^while.header11, i32 1] [^b110, i32 %262];
    i32 %130 = phi [^while.header11, i32 %87] [^b110, i32 %686];
    i1 %131 = scmp gt i32 %130, i32 0;
    cbr i1 %131(prob = 0.97), ^while.header21, ^b28;
  ^b19:
    i32 %132 = phi [^while.header11, i32 0] [^b28, i32 1];
    ret i32 %132;
  ^b20:
    i32 %133 = srem i32 %78, i32 2;
    i1 %134 = scmp neq i32 %133, i32 0;
    ubr ^b24;
  ^if.then3:
    i32* %135 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %54];
    i32 %136 = load i32* %135;
    i32 %137 = add i32 %57, i32 %136;
    ubr ^b22;
  ^b21:
    i32 %138 = phi [^if.then2, i32 %99] [^if.else, i32 %106];
    ubr ^while.header;
  ^b22:
    i32 %139 = phi [^b17, i32 %57] [^if.then3, i32 %137];
    i32 %140 = sdiv i32 %56, i32 2;
    i32 %141 = sdiv i32 %55, i32 2;
    i32 %142 = add i32 %54, i32 1;
    ubr ^while.header5;
  ^b23:
    i32 %143 = phi [^b18, i32 %62] [^while.header20, i32 %164];
    ubr ^while.header27;
  ^while.body4:
    i32 %144 = srem i32 %112, i32 2;
    i1 %145 = scmp neq i32 %144, i32 0;
    cbr i1 %145(prob = 0.5), ^b29, ^b34;
  ^while.body5:
    i32 %146 = srem i32 %117, i32 2;
    i1 %147 = scmp neq i32 %146, i32 0;
    cbr i1 %147(prob = 0.5), ^b30, ^b36;
  ^while.header17:
    i32 %148 = phi [^while.header14, i32 0] [^b51, i32 %321];
    i32 %149 = phi [^while.header14, i32 0] [^b51, i32 %318];
    i32 %150 = phi [^while.header14, i32 %120] [^b51, i32 %320];
    i32 %151 = phi [^while.header14, i32 %121] [^b51, i32 %319];
    i1 %152 = scmp lt i32 %148, i32 16;
    cbr i1 %152(prob = 0.97), ^while.body6, ^while.header26;
  ^b24:
    i1 %153 = phi [^while.body3, i1 false] [^b20, i1 %134];
    cbr i1 %153(prob = 0.5), ^if.then4, ^b32;
  ^while.header18:
    i32 %154 = phi [^while.header15, i32 0] [^b54, i32 %339];
    i32 %155 = phi [^while.header15, i32 0] [^b54, i32 %336];
    i32 %156 = phi [^while.header15, i32 1] [^b54, i32 %338];
    i32 %157 = phi [^while.header15, i32 %124] [^b54, i32 %337];
    i1 %158 = scmp lt i32 %154, i32 16;
    cbr i1 %158(prob = 0.97), ^while.body7, ^b37;
  ^b25:
    i1 %159 = scmp neq i32 %109, i32 0;
    cbr i1 %159(prob = 0.5), ^while.header22, ^b31;
  ^while.header19:
    i32 %160 = phi [^b16, i32 %41] [^while.header51, i32 %511];
    i32 %161 = phi [^b16, i32 %41] [^while.header51, i32 %210];
    i1 %162 = scmp neq i32 %160, i32 0;
    cbr i1 %162(prob = 0.97), ^while.header23, ^b38;
  ^while.header20:
    i32 %163 = phi [^b18, i32 %61] [^while.header52, i32 %518];
    i32 %164 = phi [^b18, i32 %62] [^while.header52, i32 %215];
    i1 %165 = scmp neq i32 %163, i32 0;
    cbr i1 %165(prob = 0.97), ^while.header24, ^b23;
  ^b26:
    i1 %166 = scmp neq i32 %118, i32 0;
    cbr i1 %166(prob = 0.5), ^while.header25, ^b33;
  ^while.header21:
    i32 %167 = phi [^while.header16, i32 0] [^b55, i32 %340];
    i32 %168 = phi [^while.header16, i32 0] [^b55, i32 %343];
    i32 %169 = phi [^while.header16, i32 1] [^b55, i32 %342];
    i32 %170 = phi [^while.header16, i32 %130] [^b55, i32 %341];
    i1 %171 = scmp lt i32 %168, i32 16;
    cbr i1 %171(prob = 0.97), ^while.body8, ^b39;
  ^b27:
    i1 %172 = scmp gt i32 %28, i32 32767;
    cbr i1 %172(prob = 0.5), ^if.then5, ^if.else1;
  ^b28:
    i32* %173 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %87];
    i32 %174 = load i32* %173;
    i1 %175 = scmp neq i32 %174, i32 %129;
    cbr i1 %175(prob = 0.5), ^b19, ^b35;
  ^b29:
    i32 %176 = srem i32 %111, i32 2;
    i1 %177 = scmp neq i32 %176, i32 0;
    ubr ^b34;
  ^b30:
    i32 %178 = srem i32 %116, i32 2;
    i1 %179 = scmp neq i32 %178, i32 0;
    ubr ^b36;
  ^if.then4:
    i32* %180 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %76];
    i32 %181 = load i32* %180;
    i32 %182 = add i32 %77, i32 %181;
    ubr ^b32;
  ^if.then5:
    i32 %183 = load i32* %1;
    i32 %184 = sdiv i32 %28, i32 %183;
    i32 %185 = add i32 %184, i32 65536;
    i32 %186 = load i32* %15;
    i32 %187 = sub i32 %185, i32 %186;
    ubr ^b42;
  ^b31:
    i32 %188 = phi [^b25, i32 %73] [^while.header22, i32 %204];
    ubr ^while.header30;
  ^b32:
    i32 %189 = phi [^b24, i32 %77] [^if.then4, i32 %182];
    i32 %190 = sdiv i32 %79, i32 2;
    i32 %191 = sdiv i32 %78, i32 2;
    i32 %192 = add i32 %76, i32 1;
    ubr ^while.header9;
  ^b33:
    i32 %193 = phi [^b26, i32 %83] [^while.header25, i32 %220];
    ubr ^while.header32;
  ^while.body6:
    i32 %194 = srem i32 %151, i32 2;
    i1 %195 = scmp neq i32 %194, i32 0;
    cbr i1 %195(prob = 0.5), ^if.then9, ^if.else3;
  ^if.else1:
    i32 %196 = load i32* %1;
    i32 %197 = sdiv i32 %28, i32 %196;
    ubr ^b42;
  ^while.body7:
    i32 %198 = srem i32 %157, i32 2;
    i1 %199 = scmp neq i32 %198, i32 0;
    cbr i1 %199(prob = 0.5), ^b40, ^b48;
  ^b34:
    i1 %200 = phi [^while.body4, i1 false] [^b29, i1 %177];
    cbr i1 %200(prob = 0.5), ^if.then6, ^b43;
  ^b35:
    i32 %201 = add i32 %87, i32 1;
    ubr ^while.header11;
  ^b36:
    i1 %202 = phi [^while.body5, i1 false] [^b30, i1 %179];
    cbr i1 %202(prob = 0.5), ^if.then7, ^b44;
  ^while.header22:
    i32 %203 = phi [^b25, i32 %73] [^b140, i32 %606];
    i32 %204 = phi [^b25, i32 0] [^b140, i32 %448];
    i32 %205 = phi [^b25, i32 %72] [^b140, i32 %891];
    i1 %206 = scmp neq i32 %205, i32 0;
    cbr i1 %206(prob = 0.97), ^while.header28, ^b31;
  ^while.body8:
    i32 %207 = srem i32 %170, i32 2;
    i1 %208 = scmp neq i32 %207, i32 0;
    cbr i1 %208(prob = 0.5), ^b41, ^b49;
  ^while.header23:
    i32 %209 = phi [^while.header19, i32 0] [^b63, i32 %425];
    i32 %210 = phi [^while.header19, i32 0] [^b63, i32 %422];
    i32 %211 = phi [^while.header19, i32 %160] [^b63, i32 %424];
    i32 %212 = phi [^while.header19, i32 %161] [^b63, i32 %423];
    i1 %213 = scmp lt i32 %209, i32 16;
    cbr i1 %213(prob = 0.97), ^while.body9, ^while.header35;
  ^while.header24:
    i32 %214 = phi [^while.header20, i32 0] [^b64, i32 %429];
    i32 %215 = phi [^while.header20, i32 0] [^b64, i32 %426];
    i32 %216 = phi [^while.header20, i32 %163] [^b64, i32 %428];
    i32 %217 = phi [^while.header20, i32 %164] [^b64, i32 %427];
    i1 %218 = scmp lt i32 %214, i32 16;
    cbr i1 %218(prob = 0.97), ^while.body10, ^while.header36;
  ^while.header25:
    i32 %219 = phi [^b26, i32 %81] [^while.header57, i32 %630];
    i32 %220 = phi [^b26, i32 %83] [^while.header57, i32 %279];
    i1 %221 = scmp neq i32 %219, i32 0;
    cbr i1 %221(prob = 0.97), ^while.header29, ^b33;
  ^while.header26:
    i32 %222 = phi [^while.header17, i32 0] [^b69, i32 %454];
    i32 %223 = phi [^while.header17, i32 0] [^b69, i32 %451];
    i32 %224 = phi [^while.header17, i32 %120] [^b69, i32 %453];
    i32 %225 = phi [^while.header17, i32 %121] [^b69, i32 %452];
    i1 %226 = scmp lt i32 %222, i32 16;
    cbr i1 %226(prob = 0.97), ^while.body11, ^b45;
  ^while.header27:
    i32 %227 = phi [^b23, i32 %61] [^while.header59, i32 %642];
    i32 %228 = phi [^b23, i32 %61] [^while.header59, i32 %289];
    i1 %229 = scmp neq i32 %227, i32 0;
    cbr i1 %229(prob = 0.97), ^while.header31, ^b50;
  ^b37:
    i1 %230 = scmp neq i32 %155, i32 0;
    cbr i1 %230(prob = 0.5), ^while.header33, ^b46;
  ^b38:
    i1 %231 = scmp gt i32 %43, i32 32767;
    cbr i1 %231(prob = 0.5), ^if.then8, ^if.else2;
  ^b39:
    i1 %232 = scmp neq i32 %167, i32 0;
    cbr i1 %232(prob = 0.5), ^while.header34, ^b47;
  ^b40:
    i32 %233 = srem i32 %156, i32 2;
    i1 %234 = scmp neq i32 %233, i32 0;
    ubr ^b48;
  ^if.then6:
    i32* %235 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %110];
    i32 %236 = load i32* %235;
    i32 %237 = add i32 %109, i32 %236;
    ubr ^b43;
  ^if.then7:
    i32* %238 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %115];
    i32 %239 = load i32* %238;
    i32 %240 = add i32 %118, i32 %239;
    ubr ^b44;
  ^b41:
    i32 %241 = srem i32 %169, i32 2;
    i1 %242 = scmp neq i32 %241, i32 0;
    ubr ^b49;
  ^b42:
    i32 %243 = phi [^if.then5, i32 %187] [^if.else1, i32 %197];
    ubr ^while.header2;
  ^b43:
    i32 %244 = phi [^b34, i32 %109] [^if.then6, i32 %237];
    i32 %245 = sdiv i32 %112, i32 2;
    i32 %246 = sdiv i32 %111, i32 2;
    i32 %247 = add i32 %110, i32 1;
    ubr ^while.header12;
  ^if.then8:
    i32 %248 = load i32* %1;
    i32 %249 = sdiv i32 %43, i32 %248;
    i32 %250 = add i32 %249, i32 65536;
    i32 %251 = load i32* %15;
    i32 %252 = sub i32 %250, i32 %251;
    ubr ^b53;
  ^b44:
    i32 %253 = phi [^b36, i32 %118] [^if.then7, i32 %240];
    i32 %254 = sdiv i32 %117, i32 2;
    i32 %255 = sdiv i32 %116, i32 2;
    i32 %256 = add i32 %115, i32 1;
    ubr ^while.header13;
  ^if.then9:
    i32 %257 = srem i32 %150, i32 2;
    i1 %258 = scmp eq i32 %257, i32 0;
    cbr i1 %258(prob = 0.5), ^if.then10, ^b51;
  ^b45:
    i32 %259 = load i32* %1;
    i32 %260 = mul i32 %223, i32 %259;
    ubr ^while.header42;
  ^b46:
    i32 %261 = phi [^b37, i32 %125] [^while.header33, i32 %297];
    ubr ^while.header43;
  ^b47:
    i32 %262 = phi [^b39, i32 %129] [^while.header34, i32 %301];
    ubr ^while.header44;
  ^if.else2:
    i32 %263 = load i32* %1;
    i32 %264 = sdiv i32 %43, i32 %263;
    ubr ^b53;
  ^while.body9:
    i32 %265 = srem i32 %212, i32 2;
    i1 %266 = scmp neq i32 %265, i32 0;
    cbr i1 %266(prob = 0.5), ^if.then14, ^if.else5;
  ^while.body10:
    i32 %267 = srem i32 %217, i32 2;
    i1 %268 = scmp neq i32 %267, i32 0;
    cbr i1 %268(prob = 0.5), ^if.then15, ^if.else6;
  ^while.header28:
    i32 %269 = phi [^while.header22, i32 0] [^b88, i32 %555];
    i32 %270 = phi [^while.header22, i32 0] [^b88, i32 %552];
    i32 %271 = phi [^while.header22, i32 1] [^b88, i32 %554];
    i32 %272 = phi [^while.header22, i32 %205] [^b88, i32 %553];
    i1 %273 = scmp lt i32 %269, i32 16;
    cbr i1 %273(prob = 0.97), ^while.body12, ^b58;
  ^if.else3:
    i32 %274 = srem i32 %150, i32 2;
    i1 %275 = scmp neq i32 %274, i32 0;
    cbr i1 %275(prob = 0.5), ^if.then10, ^b51;
  ^while.header29:
    i32 %276 = phi [^while.header25, i32 0] [^b81, i32 %539];
    i32 %277 = phi [^while.header25, i32 %219] [^b81, i32 %538];
    i32 %278 = phi [^while.header25, i32 %220] [^b81, i32 %537];
    i32 %279 = phi [^while.header25, i32 0] [^b81, i32 %536];
    i1 %280 = scmp lt i32 %276, i32 16;
    cbr i1 %280(prob = 0.97), ^while.body13, ^while.header41;
  ^while.body11:
    i32 %281 = srem i32 %225, i32 2;
    i1 %282 = scmp neq i32 %281, i32 0;
    cbr i1 %282(prob = 0.5), ^b52, ^b59;
  ^b48:
    i1 %283 = phi [^while.body7, i1 false] [^b40, i1 %234];
    cbr i1 %283(prob = 0.5), ^if.then11, ^b54;
  ^while.header30:
    i32 %284 = phi [^b31, i32 %72] [^b159, i32 %737];
    i32 %285 = phi [^b31, i32 %72] [^b159, i32 %1022];
    i32 %286 = phi [^b31, i32 0] [^b159, i32 %567];
    i1 %287 = scmp neq i32 %285, i32 0;
    cbr i1 %287(prob = 0.97), ^while.header37, ^b60;
  ^while.header31:
    i32 %288 = phi [^while.header27, i32 0] [^b85, i32 %548];
    i32 %289 = phi [^while.header27, i32 0] [^b85, i32 %545];
    i32 %290 = phi [^while.header27, i32 %227] [^b85, i32 %547];
    i32 %291 = phi [^while.header27, i32 %228] [^b85, i32 %546];
    i1 %292 = scmp lt i32 %288, i32 16;
    cbr i1 %292(prob = 0.97), ^while.body14, ^while.header45;
  ^while.header32:
    i32 %293 = phi [^b33, i32 %81] [^while.header67, i32 %756];
    i32 %294 = phi [^b33, i32 %81] [^while.header67, i32 %369];
    i1 %295 = scmp neq i32 %293, i32 0;
    cbr i1 %295(prob = 0.97), ^while.header38, ^b61;
  ^while.header33:
    i32 %296 = phi [^b37, i32 %123] [^while.header68, i32 %761];
    i32 %297 = phi [^b37, i32 %125] [^while.header68, i32 %376];
    i1 %298 = scmp neq i32 %296, i32 0;
    cbr i1 %298(prob = 0.97), ^while.header39, ^b46;
  ^b49:
    i1 %299 = phi [^while.body8, i1 false] [^b41, i1 %242];
    cbr i1 %299(prob = 0.5), ^if.then12, ^b55;
  ^while.header34:
    i32 %300 = phi [^b39, i32 %129] [^b161, i32 %748];
    i32 %301 = phi [^b39, i32 0] [^b161, i32 %585];
    i32 %302 = phi [^b39, i32 %128] [^b161, i32 %1031];
    i1 %303 = scmp neq i32 %302, i32 0;
    cbr i1 %303(prob = 0.97), ^while.header40, ^b47;
  ^while.header35:
    i32 %304 = phi [^while.header23, i32 0] [^b90, i32 %580];
    i32 %305 = phi [^while.header23, i32 0] [^b90, i32 %577];
    i32 %306 = phi [^while.header23, i32 %160] [^b90, i32 %579];
    i32 %307 = phi [^while.header23, i32 %161] [^b90, i32 %578];
    i1 %308 = scmp lt i32 %304, i32 16;
    cbr i1 %308(prob = 0.97), ^while.body15, ^b56;
  ^while.header36:
    i32 %309 = phi [^while.header24, i32 0] [^b91, i32 %584];
    i32 %310 = phi [^while.header24, i32 %163] [^b91, i32 %583];
    i32 %311 = phi [^while.header24, i32 %164] [^b91, i32 %582];
    i32 %312 = phi [^while.header24, i32 0] [^b91, i32 %581];
    i1 %313 = scmp lt i32 %309, i32 16;
    cbr i1 %313(prob = 0.97), ^while.body16, ^b57;
  ^b50:
    i1 %314 = scmp gt i32 %63, i32 32767;
    cbr i1 %314(prob = 0.5), ^if.then13, ^if.else4;
  ^if.then10:
    i32* %315 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %148];
    i32 %316 = load i32* %315;
    i32 %317 = add i32 %149, i32 %316;
    ubr ^b51;
  ^b51:
    i32 %318 = phi [^if.then9, i32 %149] [^if.else3, i32 %149] [^if.then10, i32 %317];
    i32 %319 = sdiv i32 %151, i32 2;
    i32 %320 = sdiv i32 %150, i32 2;
    i32 %321 = add i32 %148, i32 1;
    ubr ^while.header17;
  ^b52:
    i32 %322 = srem i32 %224, i32 2;
    i1 %323 = scmp neq i32 %322, i32 0;
    ubr ^b59;
  ^if.then11:
    i32* %324 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %154];
    i32 %325 = load i32* %324;
    i32 %326 = add i32 %155, i32 %325;
    ubr ^b54;
  ^if.then12:
    i32* %327 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %168];
    i32 %328 = load i32* %327;
    i32 %329 = add i32 %167, i32 %328;
    ubr ^b55;
  ^b53:
    i32 %330 = phi [^if.then8, i32 %252] [^if.else2, i32 %264];
    ubr ^while.header4;
  ^if.then13:
    i32 %331 = load i32* %1;
    i32 %332 = sdiv i32 %63, i32 %331;
    i32 %333 = add i32 %332, i32 65536;
    i32 %334 = load i32* %15;
    i32 %335 = sub i32 %333, i32 %334;
    ubr ^b67;
  ^b54:
    i32 %336 = phi [^b48, i32 %155] [^if.then11, i32 %326];
    i32 %337 = sdiv i32 %157, i32 2;
    i32 %338 = sdiv i32 %156, i32 2;
    i32 %339 = add i32 %154, i32 1;
    ubr ^while.header18;
  ^b55:
    i32 %340 = phi [^b49, i32 %167] [^if.then12, i32 %329];
    i32 %341 = sdiv i32 %170, i32 2;
    i32 %342 = sdiv i32 %169, i32 2;
    i32 %343 = add i32 %168, i32 1;
    ubr ^while.header21;
  ^if.then14:
    i32 %344 = srem i32 %211, i32 2;
    i1 %345 = scmp eq i32 %344, i32 0;
    cbr i1 %345(prob = 0.5), ^if.then16, ^b63;
  ^if.then15:
    i32 %346 = srem i32 %216, i32 2;
    i1 %347 = scmp eq i32 %346, i32 0;
    cbr i1 %347(prob = 0.5), ^if.then17, ^b64;
  ^while.body12:
    i32 %348 = srem i32 %272, i32 2;
    i1 %349 = scmp neq i32 %348, i32 0;
    cbr i1 %349(prob = 0.5), ^b62, ^b71;
  ^while.body13:
    i32 %350 = srem i32 %278, i32 2;
    i1 %351 = scmp neq i32 %350, i32 0;
    cbr i1 %351(prob = 0.5), ^if.then21, ^if.else9;
  ^b56:
    i32 %352 = load i32* %1;
    i32 %353 = mul i32 %305, i32 %352;
    ubr ^while.header51;
  ^b57:
    i32 %354 = load i32* %1;
    i32 %355 = mul i32 %312, i32 %354;
    ubr ^while.header52;
  ^if.else4:
    i32 %356 = load i32* %1;
    i32 %357 = sdiv i32 %63, i32 %356;
    ubr ^b67;
  ^while.body14:
    i32 %358 = srem i32 %291, i32 2;
    i1 %359 = scmp neq i32 %358, i32 0;
    cbr i1 %359(prob = 0.5), ^if.then22, ^if.else10;
  ^while.header37:
    i32 %360 = phi [^while.header30, i32 0] [^b109, i32 %685];
    i32 %361 = phi [^while.header30, i32 1] [^b109, i32 %684];
    i32 %362 = phi [^while.header30, i32 %285] [^b109, i32 %683];
    i32 %363 = phi [^while.header30, i32 0] [^b109, i32 %682];
    i1 %364 = scmp lt i32 %360, i32 16;
    cbr i1 %364(prob = 0.97), ^while.body17, ^b73;
  ^if.else5:
    i32 %365 = srem i32 %211, i32 2;
    i1 %366 = scmp neq i32 %365, i32 0;
    cbr i1 %366(prob = 0.5), ^if.then16, ^b63;
  ^if.else6:
    i32 %367 = srem i32 %216, i32 2;
    i1 %368 = scmp neq i32 %367, i32 0;
    cbr i1 %368(prob = 0.5), ^if.then17, ^b64;
  ^while.header38:
    i32 %369 = phi [^while.header32, i32 0] [^b102, i32 %656];
    i32 %370 = phi [^while.header32, i32 %293] [^b102, i32 %658];
    i32 %371 = phi [^while.header32, i32 %294] [^b102, i32 %657];
    i32 %372 = phi [^while.header32, i32 0] [^b102, i32 %659];
    i1 %373 = scmp lt i32 %372, i32 16;
    cbr i1 %373(prob = 0.97), ^while.body18, ^while.header49;
  ^while.header39:
    i32 %374 = phi [^while.header33, i32 %296] [^b103, i32 %662];
    i32 %375 = phi [^while.header33, i32 %297] [^b103, i32 %661];
    i32 %376 = phi [^while.header33, i32 0] [^b103, i32 %660];
    i32 %377 = phi [^while.header33, i32 0] [^b103, i32 %663];
    i1 %378 = scmp lt i32 %377, i32 16;
    cbr i1 %378(prob = 0.97), ^while.body19, ^while.header50;
  ^b58:
    i1 %379 = scmp neq i32 %270, i32 0;
    cbr i1 %379(prob = 0.5), ^while.header46, ^b68;
  ^while.body15:
    i32 %380 = srem i32 %307, i32 2;
    i1 %381 = scmp neq i32 %380, i32 0;
    cbr i1 %381(prob = 0.5), ^b65, ^b74;
  ^while.body16:
    i32 %382 = srem i32 %311, i32 2;
    i1 %383 = scmp neq i32 %382, i32 0;
    cbr i1 %383(prob = 0.5), ^b66, ^b75;
  ^while.header40:
    i32 %384 = phi [^while.header34, i32 0] [^b111, i32 %690];
    i32 %385 = phi [^while.header34, i32 1] [^b111, i32 %692];
    i32 %386 = phi [^while.header34, i32 %302] [^b111, i32 %691];
    i32 %387 = phi [^while.header34, i32 0] [^b111, i32 %693];
    i1 %388 = scmp lt i32 %387, i32 16;
    cbr i1 %388(prob = 0.97), ^while.body20, ^b76;
  ^b59:
    i1 %389 = phi [^while.body11, i1 false] [^b52, i1 %323];
    cbr i1 %389(prob = 0.5), ^if.then18, ^b69;
  ^while.header41:
    i32 %390 = phi [^while.header29, i32 0] [^b112, i32 %694];
    i32 %391 = phi [^while.header29, i32 %219] [^b112, i32 %696];
    i32 %392 = phi [^while.header29, i32 %220] [^b112, i32 %695];
    i32 %393 = phi [^while.header29, i32 0] [^b112, i32 %697];
    i1 %394 = scmp lt i32 %393, i32 16;
    cbr i1 %394(prob = 0.97), ^while.body21, ^b70;
  ^while.header42:
    i32 %395 = phi [^b45, i32 65535] [^b113, i32 %702];
    i32 %396 = phi [^b45, i32 %260] [^b113, i32 %701];
    i32 %397 = phi [^b45, i32 0] [^b113, i32 %700];
    i32 %398 = phi [^b45, i32 0] [^b113, i32 %703];
    i1 %399 = scmp lt i32 %398, i32 16;
    cbr i1 %399(prob = 0.97), ^while.body22, ^while.header14;
  ^while.header43:
    i32 %400 = phi [^b46, i32 %123] [^while.header76, i32 %876];
    i32 %401 = phi [^b46, i32 %123] [^while.header76, i32 %487];
    i1 %402 = scmp neq i32 %400, i32 0;
    cbr i1 %402(prob = 0.97), ^while.header47, ^b77;
  ^b60:
    i1 %403 = scmp gt i32 %74, i32 32767;
    cbr i1 %403(prob = 0.5), ^if.then19, ^if.else7;
  ^b61:
    i1 %404 = scmp gt i32 %82, i32 32767;
    cbr i1 %404(prob = 0.5), ^if.then20, ^if.else8;
  ^while.header44:
    i32 %405 = phi [^b47, i32 %128] [^b179, i32 %872];
    i32 %406 = phi [^b47, i32 %128] [^b179, i32 %1144];
    i32 %407 = phi [^b47, i32 0] [^b179, i32 %710];
    i1 %408 = scmp neq i32 %406, i32 0;
    cbr i1 %408(prob = 0.97), ^while.header48, ^b78;
  ^while.header45:
    i32 %409 = phi [^while.header31, i32 0] [^b114, i32 %706];
    i32 %410 = phi [^while.header31, i32 %227] [^b114, i32 %708];
    i32 %411 = phi [^while.header31, i32 %228] [^b114, i32 %707];
    i32 %412 = phi [^while.header31, i32 0] [^b114, i32 %709];
    i1 %413 = scmp lt i32 %412, i32 16;
    cbr i1 %413(prob = 0.97), ^while.body23, ^b72;
  ^if.then16:
    i32* %414 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %209];
    i32 %415 = load i32* %414;
    i32 %416 = add i32 %210, i32 %415;
    ubr ^b63;
  ^if.then17:
    i32* %417 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %214];
    i32 %418 = load i32* %417;
    i32 %419 = add i32 %215, i32 %418;
    ubr ^b64;
  ^b62:
    i32 %420 = srem i32 %271, i32 2;
    i1 %421 = scmp neq i32 %420, i32 0;
    ubr ^b71;
  ^b63:
    i32 %422 = phi [^if.then14, i32 %210] [^if.else5, i32 %210] [^if.then16, i32 %416];
    i32 %423 = sdiv i32 %212, i32 2;
    i32 %424 = sdiv i32 %211, i32 2;
    i32 %425 = add i32 %209, i32 1;
    ubr ^while.header23;
  ^b64:
    i32 %426 = phi [^if.then15, i32 %215] [^if.else6, i32 %215] [^if.then17, i32 %419];
    i32 %427 = sdiv i32 %217, i32 2;
    i32 %428 = sdiv i32 %216, i32 2;
    i32 %429 = add i32 %214, i32 1;
    ubr ^while.header24;
  ^b65:
    i32 %430 = srem i32 %306, i32 2;
    i1 %431 = scmp neq i32 %430, i32 0;
    ubr ^b74;
  ^b66:
    i32 %432 = srem i32 %310, i32 2;
    i1 %433 = scmp neq i32 %432, i32 0;
    ubr ^b75;
  ^if.then18:
    i32* %434 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %222];
    i32 %435 = load i32* %434;
    i32 %436 = add i32 %223, i32 %435;
    ubr ^b69;
  ^b67:
    i32 %437 = phi [^if.then13, i32 %335] [^if.else4, i32 %357];
    ubr ^while.header7;
  ^if.then19:
    i32 %438 = load i32* %1;
    i32 %439 = sdiv i32 %74, i32 %438;
    i32 %440 = add i32 %439, i32 65536;
    i32 %441 = load i32* %15;
    i32 %442 = sub i32 %440, i32 %441;
    ubr ^b84;
  ^if.then20:
    i32 %443 = load i32* %1;
    i32 %444 = sdiv i32 %82, i32 %443;
    i32 %445 = add i32 %444, i32 65536;
    i32 %446 = load i32* %15;
    i32 %447 = sub i32 %445, i32 %446;
    ubr ^b86;
  ^b68:
    i32 %448 = phi [^b58, i32 %204] [^while.header46, i32 %474];
    ubr ^while.header54;
  ^if.then21:
    i32 %449 = srem i32 %277, i32 2;
    i1 %450 = scmp eq i32 %449, i32 0;
    cbr i1 %450(prob = 0.5), ^if.then23, ^b81;
  ^b69:
    i32 %451 = phi [^b59, i32 %223] [^if.then18, i32 %436];
    i32 %452 = sdiv i32 %225, i32 2;
    i32 %453 = sdiv i32 %224, i32 2;
    i32 %454 = add i32 %222, i32 1;
    ubr ^while.header26;
  ^b70:
    i32 %455 = load i32* %1;
    i32 %456 = mul i32 %390, i32 %455;
    ubr ^while.header57;
  ^if.else7:
    i32 %457 = load i32* %1;
    i32 %458 = sdiv i32 %74, i32 %457;
    ubr ^b84;
  ^if.then22:
    i32 %459 = srem i32 %290, i32 2;
    i1 %460 = scmp eq i32 %459, i32 0;
    cbr i1 %460(prob = 0.5), ^if.then24, ^b85;
  ^while.body17:
    i32 %461 = srem i32 %362, i32 2;
    i1 %462 = scmp neq i32 %461, i32 0;
    cbr i1 %462(prob = 0.5), ^b79, ^b95;
  ^if.else8:
    i32 %463 = load i32* %1;
    i32 %464 = sdiv i32 %82, i32 %463;
    ubr ^b86;
  ^while.body18:
    i32 %465 = srem i32 %371, i32 2;
    i1 %466 = scmp neq i32 %465, i32 0;
    cbr i1 %466(prob = 0.5), ^if.then30, ^if.else13;
  ^while.body19:
    i32 %467 = srem i32 %375, i32 2;
    i1 %468 = scmp neq i32 %467, i32 0;
    cbr i1 %468(prob = 0.5), ^if.then31, ^if.else14;
  ^b71:
    i1 %469 = phi [^while.body12, i1 false] [^b62, i1 %421];
    cbr i1 %469(prob = 0.5), ^if.then25, ^b88;
  ^b72:
    i32 %470 = load i32* %1;
    i32 %471 = mul i32 %409, i32 %470;
    ubr ^while.header59;
  ^if.else9:
    i32 %472 = srem i32 %277, i32 2;
    i1 %473 = scmp neq i32 %472, i32 0;
    cbr i1 %473(prob = 0.5), ^if.then23, ^b81;
  ^while.header46:
    i32 %474 = phi [^b58, i32 %204] [^while.header77, i32 %592];
    i32 %475 = phi [^b58, i32 %203] [^while.header77, i32 %960];
    i1 %476 = scmp neq i32 %475, i32 0;
    cbr i1 %476(prob = 0.97), ^while.header53, ^b68;
  ^while.body20:
    i32 %477 = srem i32 %386, i32 2;
    i1 %478 = scmp neq i32 %477, i32 0;
    cbr i1 %478(prob = 0.5), ^b80, ^b96;
  ^while.body21:
    i32 %479 = srem i32 %392, i32 2;
    i1 %480 = scmp neq i32 %479, i32 0;
    cbr i1 %480(prob = 0.5), ^b82, ^b97;
  ^while.body22:
    i32 %481 = srem i32 %396, i32 2;
    i1 %482 = scmp neq i32 %481, i32 0;
    cbr i1 %482(prob = 0.5), ^b83, ^b98;
  ^if.else10:
    i32 %483 = srem i32 %290, i32 2;
    i1 %484 = scmp neq i32 %483, i32 0;
    cbr i1 %484(prob = 0.5), ^if.then24, ^b85;
  ^while.header47:
    i32 %485 = phi [^while.header43, i32 %400] [^b124, i32 %773];
    i32 %486 = phi [^while.header43, i32 %401] [^b124, i32 %772];
    i32 %487 = phi [^while.header43, i32 0] [^b124, i32 %771];
    i32 %488 = phi [^while.header43, i32 0] [^b124, i32 %774];
    i1 %489 = scmp lt i32 %488, i32 16;
    cbr i1 %489(prob = 0.97), ^while.body24, ^while.header58;
  ^b73:
    i1 %490 = scmp neq i32 %363, i32 0;
    cbr i1 %490(prob = 0.5), ^while.header55, ^b89;
  ^while.body23:
    i32 %491 = srem i32 %411, i32 2;
    i1 %492 = scmp neq i32 %491, i32 0;
    cbr i1 %492(prob = 0.5), ^b87, ^b99;
  ^while.header48:
    i32 %493 = phi [^while.header44, i32 1] [^b128, i32 %805];
    i32 %494 = phi [^while.header44, i32 %406] [^b128, i32 %804];
    i32 %495 = phi [^while.header44, i32 0] [^b128, i32 %803];
    i32 %496 = phi [^while.header44, i32 0] [^b128, i32 %806];
    i1 %497 = scmp lt i32 %496, i32 16;
    cbr i1 %497(prob = 0.97), ^while.body25, ^b100;
  ^b74:
    i1 %498 = phi [^while.body15, i1 false] [^b65, i1 %431];
    cbr i1 %498(prob = 0.5), ^if.then26, ^b90;
  ^b75:
    i1 %499 = phi [^while.body16, i1 false] [^b66, i1 %433];
    cbr i1 %499(prob = 0.5), ^if.then27, ^b91;
  ^while.header49:
    i32 %500 = phi [^while.header38, i32 0] [^b129, i32 %809];
    i32 %501 = phi [^while.header38, i32 %293] [^b129, i32 %811];
    i32 %502 = phi [^while.header38, i32 %294] [^b129, i32 %810];
    i32 %503 = phi [^while.header38, i32 0] [^b129, i32 %812];
    i1 %504 = scmp lt i32 %503, i32 16;
    cbr i1 %504(prob = 0.97), ^while.body26, ^b93;
  ^while.header50:
    i32 %505 = phi [^while.header39, i32 %296] [^b130, i32 %815];
    i32 %506 = phi [^while.header39, i32 %297] [^b130, i32 %814];
    i32 %507 = phi [^while.header39, i32 0] [^b130, i32 %813];
    i32 %508 = phi [^while.header39, i32 0] [^b130, i32 %816];
    i1 %509 = scmp lt i32 %508, i32 16;
    cbr i1 %509(prob = 0.97), ^while.body27, ^b94;
  ^b76:
    i1 %510 = scmp neq i32 %384, i32 0;
    cbr i1 %510(prob = 0.5), ^while.header56, ^b92;
  ^while.header51:
    i32 %511 = phi [^b56, i32 0] [^b131, i32 %821];
    i32 %512 = phi [^b56, i32 65535] [^b131, i32 %823];
    i32 %513 = phi [^b56, i32 %353] [^b131, i32 %822];
    i32 %514 = phi [^b56, i32 0] [^b131, i32 %824];
    i1 %515 = scmp lt i32 %514, i32 16;
    cbr i1 %515(prob = 0.97), ^while.body28, ^while.header19;
  ^while.header52:
    i32 %516 = phi [^b57, i32 65535] [^b132, i32 %827];
    i32 %517 = phi [^b57, i32 %355] [^b132, i32 %826];
    i32 %518 = phi [^b57, i32 0] [^b132, i32 %825];
    i32 %519 = phi [^b57, i32 0] [^b132, i32 %828];
    i1 %520 = scmp lt i32 %519, i32 16;
    cbr i1 %520(prob = 0.97), ^while.body29, ^while.header20;
  ^b77:
    i1 %521 = scmp gt i32 %124, i32 32767;
    cbr i1 %521(prob = 0.5), ^if.then28, ^if.else11;
  ^b78:
    i1 %522 = scmp gt i32 %130, i32 32767;
    cbr i1 %522(prob = 0.5), ^if.then29, ^if.else12;
  ^if.then23:
    i32* %523 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %276];
    i32 %524 = load i32* %523;
    i32 %525 = add i32 %279, i32 %524;
    ubr ^b81;
  ^if.then24:
    i32* %526 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %288];
    i32 %527 = load i32* %526;
    i32 %528 = add i32 %289, i32 %527;
    ubr ^b85;
  ^b79:
    i32 %529 = srem i32 %361, i32 2;
    i1 %530 = scmp neq i32 %529, i32 0;
    ubr ^b95;
  ^if.then25:
    i32* %531 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %269];
    i32 %532 = load i32* %531;
    i32 %533 = add i32 %270, i32 %532;
    ubr ^b88;
  ^b80:
    i32 %534 = srem i32 %385, i32 2;
    i1 %535 = scmp neq i32 %534, i32 0;
    ubr ^b96;
  ^b81:
    i32 %536 = phi [^if.then21, i32 %279] [^if.else9, i32 %279] [^if.then23, i32 %525];
    i32 %537 = sdiv i32 %278, i32 2;
    i32 %538 = sdiv i32 %277, i32 2;
    i32 %539 = add i32 %276, i32 1;
    ubr ^while.header29;
  ^b82:
    i32 %540 = srem i32 %391, i32 2;
    i1 %541 = scmp neq i32 %540, i32 0;
    ubr ^b97;
  ^b83:
    i32 %542 = srem i32 %395, i32 2;
    i1 %543 = scmp neq i32 %542, i32 0;
    ubr ^b98;
  ^b84:
    i32 %544 = phi [^if.then19, i32 %442] [^if.else7, i32 %458];
    ubr ^while.header8;
  ^b85:
    i32 %545 = phi [^if.then22, i32 %289] [^if.else10, i32 %289] [^if.then24, i32 %528];
    i32 %546 = sdiv i32 %291, i32 2;
    i32 %547 = sdiv i32 %290, i32 2;
    i32 %548 = add i32 %288, i32 1;
    ubr ^while.header31;
  ^b86:
    i32 %549 = phi [^if.then20, i32 %447] [^if.else8, i32 %464];
    ubr ^while.header10;
  ^b87:
    i32 %550 = srem i32 %410, i32 2;
    i1 %551 = scmp neq i32 %550, i32 0;
    ubr ^b99;
  ^b88:
    i32 %552 = phi [^b71, i32 %270] [^if.then25, i32 %533];
    i32 %553 = sdiv i32 %272, i32 2;
    i32 %554 = sdiv i32 %271, i32 2;
    i32 %555 = add i32 %269, i32 1;
    ubr ^while.header28;
  ^if.then26:
    i32* %556 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %304];
    i32 %557 = load i32* %556;
    i32 %558 = add i32 %305, i32 %557;
    ubr ^b90;
  ^if.then27:
    i32* %559 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %309];
    i32 %560 = load i32* %559;
    i32 %561 = add i32 %312, i32 %560;
    ubr ^b91;
  ^if.then28:
    i32 %562 = load i32* %1;
    i32 %563 = sdiv i32 %124, i32 %562;
    i32 %564 = add i32 %563, i32 65536;
    i32 %565 = load i32* %15;
    i32 %566 = sub i32 %564, i32 %565;
    ubr ^b108;
  ^b89:
    i32 %567 = phi [^b73, i32 %286] [^while.header55, i32 %609];
    ubr ^while.header64;
  ^if.then29:
    i32 %568 = load i32* %1;
    i32 %569 = sdiv i32 %130, i32 %568;
    i32 %570 = add i32 %569, i32 65536;
    i32 %571 = load i32* %15;
    i32 %572 = sub i32 %570, i32 %571;
    ubr ^b110;
  ^if.then30:
    i32 %573 = srem i32 %370, i32 2;
    i1 %574 = scmp eq i32 %573, i32 0;
    cbr i1 %574(prob = 0.5), ^if.then32, ^b102;
  ^if.then31:
    i32 %575 = srem i32 %374, i32 2;
    i1 %576 = scmp eq i32 %575, i32 0;
    cbr i1 %576(prob = 0.5), ^if.then33, ^b103;
  ^b90:
    i32 %577 = phi [^b74, i32 %305] [^if.then26, i32 %558];
    i32 %578 = sdiv i32 %307, i32 2;
    i32 %579 = sdiv i32 %306, i32 2;
    i32 %580 = add i32 %304, i32 1;
    ubr ^while.header35;
  ^b91:
    i32 %581 = phi [^b75, i32 %312] [^if.then27, i32 %561];
    i32 %582 = sdiv i32 %311, i32 2;
    i32 %583 = sdiv i32 %310, i32 2;
    i32 %584 = add i32 %309, i32 1;
    ubr ^while.header36;
  ^b92:
    i32 %585 = phi [^b76, i32 %301] [^while.header56, i32 %624];
    ubr ^while.header65;
  ^b93:
    i32 %586 = load i32* %1;
    i32 %587 = mul i32 %500, i32 %586;
    ubr ^while.header67;
  ^b94:
    i32 %588 = load i32* %1;
    i32 %589 = mul i32 %507, i32 %588;
    ubr ^while.header68;
  ^while.header53:
    i32 %590 = phi [^while.header46, i32 %475] [^b138, i32 %887];
    i32 %591 = phi [^while.header46, i32 %474] [^b138, i32 %886];
    i32 %592 = phi [^while.header46, i32 0] [^b138, i32 %885];
    i32 %593 = phi [^while.header46, i32 0] [^b138, i32 %888];
    i1 %594 = scmp lt i32 %593, i32 16;
    cbr i1 %594(prob = 0.97), ^while.body30, ^while.header62;
  ^if.else11:
    i32 %595 = load i32* %1;
    i32 %596 = sdiv i32 %124, i32 %595;
    ubr ^b108;
  ^while.body24:
    i32 %597 = srem i32 %486, i32 2;
    i1 %598 = scmp neq i32 %597, i32 0;
    cbr i1 %598(prob = 0.5), ^if.then39, ^if.else15;
  ^b95:
    i1 %599 = phi [^while.body17, i1 false] [^b79, i1 %530];
    cbr i1 %599(prob = 0.5), ^if.then34, ^b109;
  ^if.else12:
    i32 %600 = load i32* %1;
    i32 %601 = sdiv i32 %130, i32 %600;
    ubr ^b110;
  ^if.else13:
    i32 %602 = srem i32 %370, i32 2;
    i1 %603 = scmp neq i32 %602, i32 0;
    cbr i1 %603(prob = 0.5), ^if.then32, ^b102;
  ^if.else14:
    i32 %604 = srem i32 %374, i32 2;
    i1 %605 = scmp neq i32 %604, i32 0;
    cbr i1 %605(prob = 0.5), ^if.then33, ^b103;
  ^while.header54:
    i32 %606 = phi [^b68, i32 %203] [^while.header82, i32 %715];
    i32 %607 = phi [^b68, i32 %203] [^while.header82, i32 %1079];
    i1 %608 = scmp neq i32 %607, i32 0;
    cbr i1 %608(prob = 0.97), ^while.header60, ^b117;
  ^while.header55:
    i32 %609 = phi [^b73, i32 %286] [^while.header83, i32 %718];
    i32 %610 = phi [^b73, i32 %284] [^while.header83, i32 %1082];
    i1 %611 = scmp neq i32 %610, i32 0;
    cbr i1 %611(prob = 0.97), ^while.header61, ^b89;
  ^while.body25:
    i32 %612 = srem i32 %494, i32 2;
    i1 %613 = scmp neq i32 %612, i32 0;
    cbr i1 %613(prob = 0.5), ^b101, ^b118;
  ^while.body26:
    i32 %614 = srem i32 %502, i32 2;
    i1 %615 = scmp neq i32 %614, i32 0;
    cbr i1 %615(prob = 0.5), ^b104, ^b119;
  ^while.body27:
    i32 %616 = srem i32 %506, i32 2;
    i1 %617 = scmp neq i32 %616, i32 0;
    cbr i1 %617(prob = 0.5), ^b105, ^b120;
  ^b96:
    i1 %618 = phi [^while.body20, i1 false] [^b80, i1 %535];
    cbr i1 %618(prob = 0.5), ^if.then35, ^b111;
  ^while.body28:
    i32 %619 = srem i32 %513, i32 2;
    i1 %620 = scmp neq i32 %619, i32 0;
    cbr i1 %620(prob = 0.5), ^b106, ^b121;
  ^while.body29:
    i32 %621 = srem i32 %517, i32 2;
    i1 %622 = scmp neq i32 %621, i32 0;
    cbr i1 %622(prob = 0.5), ^b107, ^b122;
  ^b97:
    i1 %623 = phi [^while.body21, i1 false] [^b82, i1 %541];
    cbr i1 %623(prob = 0.5), ^if.then36, ^b112;
  ^while.header56:
    i32 %624 = phi [^b76, i32 %301] [^while.header84, i32 %732];
    i32 %625 = phi [^b76, i32 %300] [^while.header84, i32 %1094];
    i1 %626 = scmp neq i32 %625, i32 0;
    cbr i1 %626(prob = 0.97), ^while.header63, ^b92;
  ^b98:
    i1 %627 = phi [^while.body22, i1 false] [^b83, i1 %543];
    cbr i1 %627(prob = 0.5), ^if.then37, ^b113;
  ^while.header57:
    i32 %628 = phi [^b70, i32 65535] [^b145, i32 %925];
    i32 %629 = phi [^b70, i32 %456] [^b145, i32 %924];
    i32 %630 = phi [^b70, i32 0] [^b145, i32 %923];
    i32 %631 = phi [^b70, i32 0] [^b145, i32 %926];
    i1 %632 = scmp lt i32 %631, i32 16;
    cbr i1 %632(prob = 0.97), ^while.body31, ^while.header25;
  ^b99:
    i1 %633 = phi [^while.body23, i1 false] [^b87, i1 %551];
    cbr i1 %633(prob = 0.5), ^if.then38, ^b114;
  ^while.header58:
    i32 %634 = phi [^while.header47, i32 0] [^b147, i32 %933];
    i32 %635 = phi [^while.header47, i32 %400] [^b147, i32 %935];
    i32 %636 = phi [^while.header47, i32 %401] [^b147, i32 %934];
    i32 %637 = phi [^while.header47, i32 0] [^b147, i32 %936];
    i1 %638 = scmp lt i32 %637, i32 16;
    cbr i1 %638(prob = 0.97), ^while.body32, ^b116;
  ^b100:
    i1 %639 = scmp neq i32 %495, i32 0;
    cbr i1 %639(prob = 0.5), ^while.header66, ^b115;
  ^while.header59:
    i32 %640 = phi [^b72, i32 65535] [^b148, i32 %941];
    i32 %641 = phi [^b72, i32 %471] [^b148, i32 %940];
    i32 %642 = phi [^b72, i32 0] [^b148, i32 %939];
    i32 %643 = phi [^b72, i32 0] [^b148, i32 %942];
    i1 %644 = scmp lt i32 %643, i32 16;
    cbr i1 %644(prob = 0.97), ^while.body33, ^while.header27;
  ^if.then32:
    i32* %645 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %372];
    i32 %646 = load i32* %645;
    i32 %647 = add i32 %369, i32 %646;
    ubr ^b102;
  ^if.then33:
    i32* %648 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %377];
    i32 %649 = load i32* %648;
    i32 %650 = add i32 %376, i32 %649;
    ubr ^b103;
  ^if.then34:
    i32* %651 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %360];
    i32 %652 = load i32* %651;
    i32 %653 = add i32 %363, i32 %652;
    ubr ^b109;
  ^b101:
    i32 %654 = srem i32 %493, i32 2;
    i1 %655 = scmp neq i32 %654, i32 0;
    ubr ^b118;
  ^b102:
    i32 %656 = phi [^if.then30, i32 %369] [^if.else13, i32 %369] [^if.then32, i32 %647];
    i32 %657 = sdiv i32 %371, i32 2;
    i32 %658 = sdiv i32 %370, i32 2;
    i32 %659 = add i32 %372, i32 1;
    ubr ^while.header38;
  ^b103:
    i32 %660 = phi [^if.then31, i32 %376] [^if.else14, i32 %376] [^if.then33, i32 %650];
    i32 %661 = sdiv i32 %375, i32 2;
    i32 %662 = sdiv i32 %374, i32 2;
    i32 %663 = add i32 %377, i32 1;
    ubr ^while.header39;
  ^b104:
    i32 %664 = srem i32 %501, i32 2;
    i1 %665 = scmp neq i32 %664, i32 0;
    ubr ^b119;
  ^b105:
    i32 %666 = srem i32 %505, i32 2;
    i1 %667 = scmp neq i32 %666, i32 0;
    ubr ^b120;
  ^if.then35:
    i32* %668 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %387];
    i32 %669 = load i32* %668;
    i32 %670 = add i32 %384, i32 %669;
    ubr ^b111;
  ^b106:
    i32 %671 = srem i32 %512, i32 2;
    i1 %672 = scmp neq i32 %671, i32 0;
    ubr ^b121;
  ^b107:
    i32 %673 = srem i32 %516, i32 2;
    i1 %674 = scmp neq i32 %673, i32 0;
    ubr ^b122;
  ^if.then36:
    i32* %675 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %393];
    i32 %676 = load i32* %675;
    i32 %677 = add i32 %390, i32 %676;
    ubr ^b112;
  ^if.then37:
    i32* %678 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %398];
    i32 %679 = load i32* %678;
    i32 %680 = add i32 %397, i32 %679;
    ubr ^b113;
  ^b108:
    i32 %681 = phi [^if.then28, i32 %566] [^if.else11, i32 %596];
    ubr ^while.header15;
  ^b109:
    i32 %682 = phi [^b95, i32 %363] [^if.then34, i32 %653];
    i32 %683 = sdiv i32 %362, i32 2;
    i32 %684 = sdiv i32 %361, i32 2;
    i32 %685 = add i32 %360, i32 1;
    ubr ^while.header37;
  ^b110:
    i32 %686 = phi [^if.then29, i32 %572] [^if.else12, i32 %601];
    ubr ^while.header16;
  ^if.then38:
    i32* %687 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %412];
    i32 %688 = load i32* %687;
    i32 %689 = add i32 %409, i32 %688;
    ubr ^b114;
  ^b111:
    i32 %690 = phi [^b96, i32 %384] [^if.then35, i32 %670];
    i32 %691 = sdiv i32 %386, i32 2;
    i32 %692 = sdiv i32 %385, i32 2;
    i32 %693 = add i32 %387, i32 1;
    ubr ^while.header40;
  ^b112:
    i32 %694 = phi [^b97, i32 %390] [^if.then36, i32 %677];
    i32 %695 = sdiv i32 %392, i32 2;
    i32 %696 = sdiv i32 %391, i32 2;
    i32 %697 = add i32 %393, i32 1;
    ubr ^while.header41;
  ^while.body30:
    i32 %698 = srem i32 %591, i32 2;
    i1 %699 = scmp neq i32 %698, i32 0;
    cbr i1 %699(prob = 0.5), ^if.then47, ^if.else17;
  ^b113:
    i32 %700 = phi [^b98, i32 %397] [^if.then37, i32 %680];
    i32 %701 = sdiv i32 %396, i32 2;
    i32 %702 = sdiv i32 %395, i32 2;
    i32 %703 = add i32 %398, i32 1;
    ubr ^while.header42;
  ^if.then39:
    i32 %704 = srem i32 %485, i32 2;
    i1 %705 = scmp eq i32 %704, i32 0;
    cbr i1 %705(prob = 0.5), ^if.then40, ^b124;
  ^b114:
    i32 %706 = phi [^b99, i32 %409] [^if.then38, i32 %689];
    i32 %707 = sdiv i32 %411, i32 2;
    i32 %708 = sdiv i32 %410, i32 2;
    i32 %709 = add i32 %412, i32 1;
    ubr ^while.header45;
  ^b115:
    i32 %710 = phi [^b100, i32 %407] [^while.header66, i32 %751];
    ubr ^while.header75;
  ^b116:
    i32 %711 = load i32* %1;
    i32 %712 = mul i32 %634, i32 %711;
    ubr ^while.header76;
  ^while.header60:
    i32 %713 = phi [^while.header54, i32 %607] [^b153, i32 %1003];
    i32 %714 = phi [^while.header54, i32 %606] [^b153, i32 %1002];
    i32 %715 = phi [^while.header54, i32 0] [^b153, i32 %1001];
    i32 %716 = phi [^while.header54, i32 0] [^b153, i32 %1004];
    i1 %717 = scmp lt i32 %716, i32 16;
    cbr i1 %717(prob = 0.97), ^while.body34, ^while.header70;
  ^while.header61:
    i32 %718 = phi [^while.header55, i32 0] [^b154, i32 %1005];
    i32 %719 = phi [^while.header55, i32 %610] [^b154, i32 %1007];
    i32 %720 = phi [^while.header55, i32 %609] [^b154, i32 %1006];
    i32 %721 = phi [^while.header55, i32 0] [^b154, i32 %1008];
    i1 %722 = scmp lt i32 %721, i32 16;
    cbr i1 %722(prob = 0.97), ^while.body35, ^while.header71;
  ^while.body31:
    i32 %723 = srem i32 %629, i32 2;
    i1 %724 = scmp neq i32 %723, i32 0;
    cbr i1 %724(prob = 0.5), ^b123, ^b133;
  ^while.header62:
    i32 %725 = phi [^while.header53, i32 0] [^b162, i32 %1032];
    i32 %726 = phi [^while.header53, i32 %475] [^b162, i32 %1034];
    i32 %727 = phi [^while.header53, i32 %474] [^b162, i32 %1033];
    i32 %728 = phi [^while.header53, i32 0] [^b162, i32 %1035];
    i1 %729 = scmp lt i32 %728, i32 16;
    cbr i1 %729(prob = 0.97), ^while.body36, ^b127;
  ^while.header63:
    i32 %730 = phi [^while.header56, i32 %625] [^b157, i32 %1018];
    i32 %731 = phi [^while.header56, i32 %624] [^b157, i32 %1017];
    i32 %732 = phi [^while.header56, i32 0] [^b157, i32 %1016];
    i32 %733 = phi [^while.header56, i32 0] [^b157, i32 %1019];
    i1 %734 = scmp lt i32 %733, i32 16;
    cbr i1 %734(prob = 0.97), ^while.body37, ^while.header74;
  ^if.else15:
    i32 %735 = srem i32 %485, i32 2;
    i1 %736 = scmp neq i32 %735, i32 0;
    cbr i1 %736(prob = 0.5), ^if.then40, ^b124;
  ^while.header64:
    i32 %737 = phi [^b89, i32 %284] [^while.header86, i32 %837];
    i32 %738 = phi [^b89, i32 %284] [^while.header86, i32 %1177];
    i1 %739 = scmp neq i32 %738, i32 0;
    cbr i1 %739(prob = 0.97), ^while.header69, ^b134;
  ^while.body32:
    i32 %740 = srem i32 %636, i32 2;
    i1 %741 = scmp neq i32 %740, i32 0;
    cbr i1 %741(prob = 0.5), ^b125, ^b135;
  ^b117:
    i1 %742 = scmp gt i32 %205, i32 32767;
    cbr i1 %742(prob = 0.5), ^if.then42, ^if.else16;
  ^b118:
    i1 %743 = phi [^while.body25, i1 false] [^b101, i1 %655];
    cbr i1 %743(prob = 0.5), ^if.then41, ^b128;
  ^while.body33:
    i32 %744 = srem i32 %641, i32 2;
    i1 %745 = scmp neq i32 %744, i32 0;
    cbr i1 %745(prob = 0.5), ^b126, ^b136;
  ^b119:
    i1 %746 = phi [^while.body26, i1 false] [^b104, i1 %665];
    cbr i1 %746(prob = 0.5), ^if.then43, ^b129;
  ^b120:
    i1 %747 = phi [^while.body27, i1 false] [^b105, i1 %667];
    cbr i1 %747(prob = 0.5), ^if.then44, ^b130;
  ^while.header65:
    i32 %748 = phi [^b92, i32 %300] [^while.header87, i32 %854];
    i32 %749 = phi [^b92, i32 %300] [^while.header87, i32 %1184];
    i1 %750 = scmp neq i32 %749, i32 0;
    cbr i1 %750(prob = 0.97), ^while.header72, ^b137;
  ^while.header66:
    i32 %751 = phi [^b100, i32 %407] [^while.header88, i32 %859];
    i32 %752 = phi [^b100, i32 %405] [^while.header88, i32 %1189];
    i1 %753 = scmp neq i32 %752, i32 0;
    cbr i1 %753(prob = 0.97), ^while.header73, ^b115;
  ^b121:
    i1 %754 = phi [^while.body28, i1 false] [^b106, i1 %672];
    cbr i1 %754(prob = 0.5), ^if.then45, ^b131;
  ^b122:
    i1 %755 = phi [^while.body29, i1 false] [^b107, i1 %674];
    cbr i1 %755(prob = 0.5), ^if.then46, ^b132;
  ^while.header67:
    i32 %756 = phi [^b93, i32 0] [^b164, i32 %1045];
    i32 %757 = phi [^b93, i32 65535] [^b164, i32 %1047];
    i32 %758 = phi [^b93, i32 %587] [^b164, i32 %1046];
    i32 %759 = phi [^b93, i32 0] [^b164, i32 %1048];
    i1 %760 = scmp lt i32 %759, i32 16;
    cbr i1 %760(prob = 0.97), ^while.body38, ^while.header32;
  ^while.header68:
    i32 %761 = phi [^b94, i32 0] [^b165, i32 %1049];
    i32 %762 = phi [^b94, i32 65535] [^b165, i32 %1051];
    i32 %763 = phi [^b94, i32 %589] [^b165, i32 %1050];
    i32 %764 = phi [^b94, i32 0] [^b165, i32 %1052];
    i1 %765 = scmp lt i32 %764, i32 16;
    cbr i1 %765(prob = 0.97), ^while.body39, ^while.header33;
  ^if.then40:
    i32* %766 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %488];
    i32 %767 = load i32* %766;
    i32 %768 = add i32 %487, i32 %767;
    ubr ^b124;
  ^b123:
    i32 %769 = srem i32 %628, i32 2;
    i1 %770 = scmp neq i32 %769, i32 0;
    ubr ^b133;
  ^b124:
    i32 %771 = phi [^if.then39, i32 %487] [^if.else15, i32 %487] [^if.then40, i32 %768];
    i32 %772 = sdiv i32 %486, i32 2;
    i32 %773 = sdiv i32 %485, i32 2;
    i32 %774 = add i32 %488, i32 1;
    ubr ^while.header47;
  ^b125:
    i32 %775 = srem i32 %635, i32 2;
    i1 %776 = scmp neq i32 %775, i32 0;
    ubr ^b135;
  ^if.then41:
    i32* %777 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %496];
    i32 %778 = load i32* %777;
    i32 %779 = add i32 %495, i32 %778;
    ubr ^b128;
  ^b126:
    i32 %780 = srem i32 %640, i32 2;
    i1 %781 = scmp neq i32 %780, i32 0;
    ubr ^b136;
  ^if.then42:
    i32 %782 = load i32* %1;
    i32 %783 = sdiv i32 %205, i32 %782;
    i32 %784 = add i32 %783, i32 65536;
    i32 %785 = load i32* %15;
    i32 %786 = sub i32 %784, i32 %785;
    ubr ^b140;
  ^if.then43:
    i32* %787 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %503];
    i32 %788 = load i32* %787;
    i32 %789 = add i32 %500, i32 %788;
    ubr ^b129;
  ^if.then44:
    i32* %790 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %508];
    i32 %791 = load i32* %790;
    i32 %792 = add i32 %507, i32 %791;
    ubr ^b130;
  ^if.then45:
    i32* %793 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %514];
    i32 %794 = load i32* %793;
    i32 %795 = add i32 %511, i32 %794;
    ubr ^b131;
  ^if.then46:
    i32* %796 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %519];
    i32 %797 = load i32* %796;
    i32 %798 = add i32 %518, i32 %797;
    ubr ^b132;
  ^if.then47:
    i32 %799 = srem i32 %590, i32 2;
    i1 %800 = scmp eq i32 %799, i32 0;
    cbr i1 %800(prob = 0.5), ^if.then48, ^b138;
  ^b127:
    i32 %801 = load i32* %1;
    i32 %802 = mul i32 %725, i32 %801;
    ubr ^while.header77;
  ^b128:
    i32 %803 = phi [^b118, i32 %495] [^if.then41, i32 %779];
    i32 %804 = sdiv i32 %494, i32 2;
    i32 %805 = sdiv i32 %493, i32 2;
    i32 %806 = add i32 %496, i32 1;
    ubr ^while.header48;
  ^if.else16:
    i32 %807 = load i32* %1;
    i32 %808 = sdiv i32 %205, i32 %807;
    ubr ^b140;
  ^b129:
    i32 %809 = phi [^b119, i32 %500] [^if.then43, i32 %789];
    i32 %810 = sdiv i32 %502, i32 2;
    i32 %811 = sdiv i32 %501, i32 2;
    i32 %812 = add i32 %503, i32 1;
    ubr ^while.header49;
  ^b130:
    i32 %813 = phi [^b120, i32 %507] [^if.then44, i32 %792];
    i32 %814 = sdiv i32 %506, i32 2;
    i32 %815 = sdiv i32 %505, i32 2;
    i32 %816 = add i32 %508, i32 1;
    ubr ^while.header50;
  ^while.body34:
    i32 %817 = srem i32 %714, i32 2;
    i1 %818 = scmp neq i32 %817, i32 0;
    cbr i1 %818(prob = 0.5), ^if.then53, ^if.else19;
  ^while.body35:
    i32 %819 = srem i32 %720, i32 2;
    i1 %820 = scmp neq i32 %819, i32 0;
    cbr i1 %820(prob = 0.5), ^if.then54, ^if.else20;
  ^b131:
    i32 %821 = phi [^b121, i32 %511] [^if.then45, i32 %795];
    i32 %822 = sdiv i32 %513, i32 2;
    i32 %823 = sdiv i32 %512, i32 2;
    i32 %824 = add i32 %514, i32 1;
    ubr ^while.header51;
  ^b132:
    i32 %825 = phi [^b122, i32 %518] [^if.then46, i32 %798];
    i32 %826 = sdiv i32 %517, i32 2;
    i32 %827 = sdiv i32 %516, i32 2;
    i32 %828 = add i32 %519, i32 1;
    ubr ^while.header52;
  ^if.else17:
    i32 %829 = srem i32 %590, i32 2;
    i1 %830 = scmp neq i32 %829, i32 0;
    cbr i1 %830(prob = 0.5), ^if.then48, ^b138;
  ^while.body36:
    i32 %831 = srem i32 %727, i32 2;
    i1 %832 = scmp neq i32 %831, i32 0;
    cbr i1 %832(prob = 0.5), ^b139, ^b149;
  ^while.body37:
    i32 %833 = srem i32 %731, i32 2;
    i1 %834 = scmp neq i32 %833, i32 0;
    cbr i1 %834(prob = 0.5), ^if.then56, ^if.else22;
  ^while.header69:
    i32 %835 = phi [^while.header64, i32 %738] [^b173, i32 %1116];
    i32 %836 = phi [^while.header64, i32 %737] [^b173, i32 %1115];
    i32 %837 = phi [^while.header64, i32 0] [^b173, i32 %1114];
    i32 %838 = phi [^while.header64, i32 0] [^b173, i32 %1117];
    i1 %839 = scmp lt i32 %838, i32 16;
    cbr i1 %839(prob = 0.97), ^while.body40, ^while.header78;
  ^while.body38:
    i32 %840 = srem i32 %758, i32 2;
    i1 %841 = scmp neq i32 %840, i32 0;
    cbr i1 %841(prob = 0.5), ^b141, ^b150;
  ^while.body39:
    i32 %842 = srem i32 %763, i32 2;
    i1 %843 = scmp neq i32 %842, i32 0;
    cbr i1 %843(prob = 0.5), ^b142, ^b151;
  ^while.header70:
    i32 %844 = phi [^while.header60, i32 %607] [^b180, i32 %1147];
    i32 %845 = phi [^while.header60, i32 %606] [^b180, i32 %1146];
    i32 %846 = phi [^while.header60, i32 0] [^b180, i32 %1145];
    i32 %847 = phi [^while.header60, i32 0] [^b180, i32 %1148];
    i1 %848 = scmp lt i32 %847, i32 16;
    cbr i1 %848(prob = 0.97), ^while.body41, ^b143;
  ^while.header71:
    i32 %849 = phi [^while.header61, i32 %610] [^b181, i32 %1151];
    i32 %850 = phi [^while.header61, i32 %609] [^b181, i32 %1150];
    i32 %851 = phi [^while.header61, i32 0] [^b181, i32 %1149];
    i32 %852 = phi [^while.header61, i32 0] [^b181, i32 %1152];
    i1 %853 = scmp lt i32 %852, i32 16;
    cbr i1 %853(prob = 0.97), ^while.body42, ^b144;
  ^while.header72:
    i32 %854 = phi [^while.header65, i32 0] [^b175, i32 %1126];
    i32 %855 = phi [^while.header65, i32 %749] [^b175, i32 %1128];
    i32 %856 = phi [^while.header65, i32 %748] [^b175, i32 %1127];
    i32 %857 = phi [^while.header65, i32 0] [^b175, i32 %1129];
    i1 %858 = scmp lt i32 %857, i32 16;
    cbr i1 %858(prob = 0.97), ^while.body43, ^while.header80;
  ^while.header73:
    i32 %859 = phi [^while.header66, i32 0] [^b176, i32 %1130];
    i32 %860 = phi [^while.header66, i32 %752] [^b176, i32 %1132];
    i32 %861 = phi [^while.header66, i32 %751] [^b176, i32 %1131];
    i32 %862 = phi [^while.header66, i32 0] [^b176, i32 %1133];
    i1 %863 = scmp lt i32 %862, i32 16;
    cbr i1 %863(prob = 0.97), ^while.body44, ^while.header81;
  ^b133:
    i1 %864 = phi [^while.body31, i1 false] [^b123, i1 %770];
    cbr i1 %864(prob = 0.5), ^if.then49, ^b145;
  ^while.header74:
    i32 %865 = phi [^while.header63, i32 %625] [^b182, i32 %1155];
    i32 %866 = phi [^while.header63, i32 %624] [^b182, i32 %1154];
    i32 %867 = phi [^while.header63, i32 0] [^b182, i32 %1153];
    i32 %868 = phi [^while.header63, i32 0] [^b182, i32 %1156];
    i1 %869 = scmp lt i32 %868, i32 16;
    cbr i1 %869(prob = 0.97), ^while.body45, ^b146;
  ^b134:
    i1 %870 = scmp gt i32 %285, i32 32767;
    cbr i1 %870(prob = 0.5), ^if.then50, ^if.else18;
  ^b135:
    i1 %871 = phi [^while.body32, i1 false] [^b125, i1 %776];
    cbr i1 %871(prob = 0.5), ^if.then51, ^b147;
  ^while.header75:
    i32 %872 = phi [^b115, i32 %405] [^while.header89, i32 %974];
    i32 %873 = phi [^b115, i32 %405] [^while.header89, i32 %1249];
    i1 %874 = scmp neq i32 %873, i32 0;
    cbr i1 %874(prob = 0.97), ^while.header79, ^b152;
  ^b136:
    i1 %875 = phi [^while.body33, i1 false] [^b126, i1 %781];
    cbr i1 %875(prob = 0.5), ^if.then52, ^b148;
  ^while.header76:
    i32 %876 = phi [^b116, i32 0] [^b183, i32 %1157];
    i32 %877 = phi [^b116, i32 65535] [^b183, i32 %1159];
    i32 %878 = phi [^b116, i32 %712] [^b183, i32 %1158];
    i32 %879 = phi [^b116, i32 0] [^b183, i32 %1160];
    i1 %880 = scmp lt i32 %879, i32 16;
    cbr i1 %880(prob = 0.97), ^while.body46, ^while.header43;
  ^b137:
    i1 %881 = scmp gt i32 %302, i32 32767;
    cbr i1 %881(prob = 0.5), ^if.then55, ^if.else21;
  ^if.then48:
    i32* %882 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %593];
    i32 %883 = load i32* %882;
    i32 %884 = add i32 %592, i32 %883;
    ubr ^b138;
  ^b138:
    i32 %885 = phi [^if.then47, i32 %592] [^if.else17, i32 %592] [^if.then48, i32 %884];
    i32 %886 = sdiv i32 %591, i32 2;
    i32 %887 = sdiv i32 %590, i32 2;
    i32 %888 = add i32 %593, i32 1;
    ubr ^while.header53;
  ^b139:
    i32 %889 = srem i32 %726, i32 2;
    i1 %890 = scmp neq i32 %889, i32 0;
    ubr ^b149;
  ^b140:
    i32 %891 = phi [^if.then42, i32 %786] [^if.else16, i32 %808];
    ubr ^while.header22;
  ^b141:
    i32 %892 = srem i32 %757, i32 2;
    i1 %893 = scmp neq i32 %892, i32 0;
    ubr ^b150;
  ^b142:
    i32 %894 = srem i32 %762, i32 2;
    i1 %895 = scmp neq i32 %894, i32 0;
    ubr ^b151;
  ^if.then49:
    i32* %896 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %631];
    i32 %897 = load i32* %896;
    i32 %898 = add i32 %630, i32 %897;
    ubr ^b145;
  ^if.then50:
    i32 %899 = load i32* %1;
    i32 %900 = sdiv i32 %285, i32 %899;
    i32 %901 = add i32 %900, i32 65536;
    i32 %902 = load i32* %15;
    i32 %903 = sub i32 %901, i32 %902;
    ubr ^b159;
  ^if.then51:
    i32* %904 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %637];
    i32 %905 = load i32* %904;
    i32 %906 = add i32 %634, i32 %905;
    ubr ^b147;
  ^if.then52:
    i32* %907 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %643];
    i32 %908 = load i32* %907;
    i32 %909 = add i32 %642, i32 %908;
    ubr ^b148;
  ^if.then53:
    i32 %910 = srem i32 %713, i32 2;
    i1 %911 = scmp eq i32 %910, i32 0;
    cbr i1 %911(prob = 0.5), ^if.then57, ^b153;
  ^if.then54:
    i32 %912 = srem i32 %719, i32 2;
    i1 %913 = scmp eq i32 %912, i32 0;
    cbr i1 %913(prob = 0.5), ^if.then58, ^b154;
  ^if.then55:
    i32 %914 = load i32* %1;
    i32 %915 = sdiv i32 %302, i32 %914;
    i32 %916 = add i32 %915, i32 65536;
    i32 %917 = load i32* %15;
    i32 %918 = sub i32 %916, i32 %917;
    ubr ^b161;
  ^b143:
    i32 %919 = load i32* %1;
    i32 %920 = mul i32 %846, i32 %919;
    ubr ^while.header82;
  ^b144:
    i32 %921 = load i32* %1;
    i32 %922 = mul i32 %851, i32 %921;
    ubr ^while.header83;
  ^b145:
    i32 %923 = phi [^b133, i32 %630] [^if.then49, i32 %898];
    i32 %924 = sdiv i32 %629, i32 2;
    i32 %925 = sdiv i32 %628, i32 2;
    i32 %926 = add i32 %631, i32 1;
    ubr ^while.header57;
  ^if.then56:
    i32 %927 = srem i32 %730, i32 2;
    i1 %928 = scmp eq i32 %927, i32 0;
    cbr i1 %928(prob = 0.5), ^if.then59, ^b157;
  ^b146:
    i32 %929 = load i32* %1;
    i32 %930 = mul i32 %867, i32 %929;
    ubr ^while.header84;
  ^if.else18:
    i32 %931 = load i32* %1;
    i32 %932 = sdiv i32 %285, i32 %931;
    ubr ^b159;
  ^b147:
    i32 %933 = phi [^b135, i32 %634] [^if.then51, i32 %906];
    i32 %934 = sdiv i32 %636, i32 2;
    i32 %935 = sdiv i32 %635, i32 2;
    i32 %936 = add i32 %637, i32 1;
    ubr ^while.header58;
  ^while.body40:
    i32 %937 = srem i32 %836, i32 2;
    i1 %938 = scmp neq i32 %937, i32 0;
    cbr i1 %938(prob = 0.5), ^if.then63, ^if.else23;
  ^b148:
    i32 %939 = phi [^b136, i32 %642] [^if.then52, i32 %909];
    i32 %940 = sdiv i32 %641, i32 2;
    i32 %941 = sdiv i32 %640, i32 2;
    i32 %942 = add i32 %643, i32 1;
    ubr ^while.header59;
  ^if.else19:
    i32 %943 = srem i32 %713, i32 2;
    i1 %944 = scmp neq i32 %943, i32 0;
    cbr i1 %944(prob = 0.5), ^if.then57, ^b153;
  ^if.else20:
    i32 %945 = srem i32 %719, i32 2;
    i1 %946 = scmp neq i32 %945, i32 0;
    cbr i1 %946(prob = 0.5), ^if.then58, ^b154;
  ^if.else21:
    i32 %947 = load i32* %1;
    i32 %948 = sdiv i32 %302, i32 %947;
    ubr ^b161;
  ^while.body41:
    i32 %949 = srem i32 %845, i32 2;
    i1 %950 = scmp neq i32 %949, i32 0;
    cbr i1 %950(prob = 0.5), ^b155, ^b168;
  ^while.body42:
    i32 %951 = srem i32 %850, i32 2;
    i1 %952 = scmp neq i32 %951, i32 0;
    cbr i1 %952(prob = 0.5), ^b156, ^b169;
  ^while.body43:
    i32 %953 = srem i32 %856, i32 2;
    i1 %954 = scmp neq i32 %953, i32 0;
    cbr i1 %954(prob = 0.5), ^if.then65, ^if.else25;
  ^while.body44:
    i32 %955 = srem i32 %861, i32 2;
    i1 %956 = scmp neq i32 %955, i32 0;
    cbr i1 %956(prob = 0.5), ^if.then66, ^if.else26;
  ^b149:
    i1 %957 = phi [^while.body36, i1 false] [^b139, i1 %890];
    cbr i1 %957(prob = 0.5), ^if.then60, ^b162;
  ^if.else22:
    i32 %958 = srem i32 %730, i32 2;
    i1 %959 = scmp neq i32 %958, i32 0;
    cbr i1 %959(prob = 0.5), ^if.then59, ^b157;
  ^while.header77:
    i32 %960 = phi [^b127, i32 0] [^b194, i32 %1221];
    i32 %961 = phi [^b127, i32 65535] [^b194, i32 %1223];
    i32 %962 = phi [^b127, i32 %802] [^b194, i32 %1222];
    i32 %963 = phi [^b127, i32 0] [^b194, i32 %1224];
    i1 %964 = scmp lt i32 %963, i32 16;
    cbr i1 %964(prob = 0.97), ^while.body47, ^while.header46;
  ^while.body45:
    i32 %965 = srem i32 %866, i32 2;
    i1 %966 = scmp neq i32 %965, i32 0;
    cbr i1 %966(prob = 0.5), ^b158, ^b170;
  ^while.body46:
    i32 %967 = srem i32 %878, i32 2;
    i1 %968 = scmp neq i32 %967, i32 0;
    cbr i1 %968(prob = 0.5), ^b160, ^b171;
  ^while.header78:
    i32 %969 = phi [^while.header69, i32 %738] [^b195, i32 %1227];
    i32 %970 = phi [^while.header69, i32 %737] [^b195, i32 %1226];
    i32 %971 = phi [^while.header69, i32 0] [^b195, i32 %1225];
    i32 %972 = phi [^while.header69, i32 0] [^b195, i32 %1228];
    i1 %973 = scmp lt i32 %972, i32 16;
    cbr i1 %973(prob = 0.97), ^while.body48, ^b163;
  ^while.header79:
    i32 %974 = phi [^while.header75, i32 0] [^b192, i32 %1209];
    i32 %975 = phi [^while.header75, i32 %873] [^b192, i32 %1211];
    i32 %976 = phi [^while.header75, i32 %872] [^b192, i32 %1210];
    i32 %977 = phi [^while.header75, i32 0] [^b192, i32 %1212];
    i1 %978 = scmp lt i32 %977, i32 16;
    cbr i1 %978(prob = 0.97), ^while.body49, ^while.header85;
  ^b150:
    i1 %979 = phi [^while.body38, i1 false] [^b141, i1 %893];
    cbr i1 %979(prob = 0.5), ^if.then61, ^b164;
  ^b151:
    i1 %980 = phi [^while.body39, i1 false] [^b142, i1 %895];
    cbr i1 %980(prob = 0.5), ^if.then62, ^b165;
  ^while.header80:
    i32 %981 = phi [^while.header72, i32 0] [^b196, i32 %1229];
    i32 %982 = phi [^while.header72, i32 %749] [^b196, i32 %1231];
    i32 %983 = phi [^while.header72, i32 %748] [^b196, i32 %1230];
    i32 %984 = phi [^while.header72, i32 0] [^b196, i32 %1232];
    i1 %985 = scmp lt i32 %984, i32 16;
    cbr i1 %985(prob = 0.97), ^while.body50, ^b166;
  ^while.header81:
    i32 %986 = phi [^while.header73, i32 0] [^b197, i32 %1233];
    i32 %987 = phi [^while.header73, i32 %752] [^b197, i32 %1235];
    i32 %988 = phi [^while.header73, i32 %751] [^b197, i32 %1234];
    i32 %989 = phi [^while.header73, i32 0] [^b197, i32 %1236];
    i1 %990 = scmp lt i32 %989, i32 16;
    cbr i1 %990(prob = 0.97), ^while.body51, ^b167;
  ^b152:
    i1 %991 = scmp gt i32 %406, i32 32767;
    cbr i1 %991(prob = 0.5), ^if.then64, ^if.else24;
  ^if.then57:
    i32* %992 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %716];
    i32 %993 = load i32* %992;
    i32 %994 = add i32 %715, i32 %993;
    ubr ^b153;
  ^if.then58:
    i32* %995 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %721];
    i32 %996 = load i32* %995;
    i32 %997 = add i32 %718, i32 %996;
    ubr ^b154;
  ^if.then59:
    i32* %998 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %733];
    i32 %999 = load i32* %998;
    i32 %1000 = add i32 %732, i32 %999;
    ubr ^b157;
  ^b153:
    i32 %1001 = phi [^if.then53, i32 %715] [^if.else19, i32 %715] [^if.then57, i32 %994];
    i32 %1002 = sdiv i32 %714, i32 2;
    i32 %1003 = sdiv i32 %713, i32 2;
    i32 %1004 = add i32 %716, i32 1;
    ubr ^while.header60;
  ^b154:
    i32 %1005 = phi [^if.then54, i32 %718] [^if.else20, i32 %718] [^if.then58, i32 %997];
    i32 %1006 = sdiv i32 %720, i32 2;
    i32 %1007 = sdiv i32 %719, i32 2;
    i32 %1008 = add i32 %721, i32 1;
    ubr ^while.header61;
  ^b155:
    i32 %1009 = srem i32 %844, i32 2;
    i1 %1010 = scmp neq i32 %1009, i32 0;
    ubr ^b168;
  ^b156:
    i32 %1011 = srem i32 %849, i32 2;
    i1 %1012 = scmp neq i32 %1011, i32 0;
    ubr ^b169;
  ^if.then60:
    i32* %1013 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %728];
    i32 %1014 = load i32* %1013;
    i32 %1015 = add i32 %725, i32 %1014;
    ubr ^b162;
  ^b157:
    i32 %1016 = phi [^if.then56, i32 %732] [^if.else22, i32 %732] [^if.then59, i32 %1000];
    i32 %1017 = sdiv i32 %731, i32 2;
    i32 %1018 = sdiv i32 %730, i32 2;
    i32 %1019 = add i32 %733, i32 1;
    ubr ^while.header63;
  ^b158:
    i32 %1020 = srem i32 %865, i32 2;
    i1 %1021 = scmp neq i32 %1020, i32 0;
    ubr ^b170;
  ^b159:
    i32 %1022 = phi [^if.then50, i32 %903] [^if.else18, i32 %932];
    ubr ^while.header30;
  ^b160:
    i32 %1023 = srem i32 %877, i32 2;
    i1 %1024 = scmp neq i32 %1023, i32 0;
    ubr ^b171;
  ^if.then61:
    i32* %1025 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %759];
    i32 %1026 = load i32* %1025;
    i32 %1027 = add i32 %756, i32 %1026;
    ubr ^b164;
  ^if.then62:
    i32* %1028 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %764];
    i32 %1029 = load i32* %1028;
    i32 %1030 = add i32 %761, i32 %1029;
    ubr ^b165;
  ^b161:
    i32 %1031 = phi [^if.then55, i32 %918] [^if.else21, i32 %948];
    ubr ^while.header34;
  ^b162:
    i32 %1032 = phi [^b149, i32 %725] [^if.then60, i32 %1015];
    i32 %1033 = sdiv i32 %727, i32 2;
    i32 %1034 = sdiv i32 %726, i32 2;
    i32 %1035 = add i32 %728, i32 1;
    ubr ^while.header62;
  ^if.then63:
    i32 %1036 = srem i32 %835, i32 2;
    i1 %1037 = scmp eq i32 %1036, i32 0;
    cbr i1 %1037(prob = 0.5), ^if.then67, ^b173;
  ^if.then64:
    i32 %1038 = load i32* %1;
    i32 %1039 = sdiv i32 %406, i32 %1038;
    i32 %1040 = add i32 %1039, i32 65536;
    i32 %1041 = load i32* %15;
    i32 %1042 = sub i32 %1040, i32 %1041;
    ubr ^b179;
  ^b163:
    i32 %1043 = load i32* %1;
    i32 %1044 = mul i32 %971, i32 %1043;
    ubr ^while.header86;
  ^b164:
    i32 %1045 = phi [^b150, i32 %756] [^if.then61, i32 %1027];
    i32 %1046 = sdiv i32 %758, i32 2;
    i32 %1047 = sdiv i32 %757, i32 2;
    i32 %1048 = add i32 %759, i32 1;
    ubr ^while.header67;
  ^b165:
    i32 %1049 = phi [^b151, i32 %761] [^if.then62, i32 %1030];
    i32 %1050 = sdiv i32 %763, i32 2;
    i32 %1051 = sdiv i32 %762, i32 2;
    i32 %1052 = add i32 %764, i32 1;
    ubr ^while.header68;
  ^if.then65:
    i32 %1053 = srem i32 %855, i32 2;
    i1 %1054 = scmp eq i32 %1053, i32 0;
    cbr i1 %1054(prob = 0.5), ^if.then68, ^b175;
  ^if.then66:
    i32 %1055 = srem i32 %860, i32 2;
    i1 %1056 = scmp eq i32 %1055, i32 0;
    cbr i1 %1056(prob = 0.5), ^if.then69, ^b176;
  ^b166:
    i32 %1057 = load i32* %1;
    i32 %1058 = mul i32 %981, i32 %1057;
    ubr ^while.header87;
  ^b167:
    i32 %1059 = load i32* %1;
    i32 %1060 = mul i32 %986, i32 %1059;
    ubr ^while.header88;
  ^while.body47:
    i32 %1061 = srem i32 %962, i32 2;
    i1 %1062 = scmp neq i32 %1061, i32 0;
    cbr i1 %1062(prob = 0.5), ^b172, ^b185;
  ^if.else23:
    i32 %1063 = srem i32 %835, i32 2;
    i1 %1064 = scmp neq i32 %1063, i32 0;
    cbr i1 %1064(prob = 0.5), ^if.then67, ^b173;
  ^if.else24:
    i32 %1065 = load i32* %1;
    i32 %1066 = sdiv i32 %406, i32 %1065;
    ubr ^b179;
  ^while.body48:
    i32 %1067 = srem i32 %970, i32 2;
    i1 %1068 = scmp neq i32 %1067, i32 0;
    cbr i1 %1068(prob = 0.5), ^b174, ^b186;
  ^while.body49:
    i32 %1069 = srem i32 %976, i32 2;
    i1 %1070 = scmp neq i32 %1069, i32 0;
    cbr i1 %1070(prob = 0.5), ^if.then74, ^if.else27;
  ^b168:
    i1 %1071 = phi [^while.body41, i1 false] [^b155, i1 %1010];
    cbr i1 %1071(prob = 0.5), ^if.then70, ^b180;
  ^b169:
    i1 %1072 = phi [^while.body42, i1 false] [^b156, i1 %1012];
    cbr i1 %1072(prob = 0.5), ^if.then71, ^b181;
  ^if.else25:
    i32 %1073 = srem i32 %855, i32 2;
    i1 %1074 = scmp neq i32 %1073, i32 0;
    cbr i1 %1074(prob = 0.5), ^if.then68, ^b175;
  ^if.else26:
    i32 %1075 = srem i32 %860, i32 2;
    i1 %1076 = scmp neq i32 %1075, i32 0;
    cbr i1 %1076(prob = 0.5), ^if.then69, ^b176;
  ^while.header82:
    i32 %1077 = phi [^b143, i32 65535] [^b205, i32 %1272];
    i32 %1078 = phi [^b143, i32 %920] [^b205, i32 %1271];
    i32 %1079 = phi [^b143, i32 0] [^b205, i32 %1270];
    i32 %1080 = phi [^b143, i32 0] [^b205, i32 %1273];
    i1 %1081 = scmp lt i32 %1080, i32 16;
    cbr i1 %1081(prob = 0.97), ^while.body52, ^while.header54;
  ^while.header83:
    i32 %1082 = phi [^b144, i32 0] [^b206, i32 %1274];
    i32 %1083 = phi [^b144, i32 65535] [^b206, i32 %1276];
    i32 %1084 = phi [^b144, i32 %922] [^b206, i32 %1275];
    i32 %1085 = phi [^b144, i32 0] [^b206, i32 %1277];
    i1 %1086 = scmp lt i32 %1085, i32 16;
    cbr i1 %1086(prob = 0.97), ^while.body53, ^while.header55;
  ^while.body50:
    i32 %1087 = srem i32 %983, i32 2;
    i1 %1088 = scmp neq i32 %1087, i32 0;
    cbr i1 %1088(prob = 0.5), ^b177, ^b187;
  ^while.body51:
    i32 %1089 = srem i32 %988, i32 2;
    i1 %1090 = scmp neq i32 %1089, i32 0;
    cbr i1 %1090(prob = 0.5), ^b178, ^b188;
  ^b170:
    i1 %1091 = phi [^while.body45, i1 false] [^b158, i1 %1021];
    cbr i1 %1091(prob = 0.5), ^if.then72, ^b182;
  ^while.header84:
    i32 %1092 = phi [^b146, i32 65535] [^b207, i32 %1280];
    i32 %1093 = phi [^b146, i32 %930] [^b207, i32 %1279];
    i32 %1094 = phi [^b146, i32 0] [^b207, i32 %1278];
    i32 %1095 = phi [^b146, i32 0] [^b207, i32 %1281];
    i1 %1096 = scmp lt i32 %1095, i32 16;
    cbr i1 %1096(prob = 0.97), ^while.body54, ^while.header56;
  ^b171:
    i1 %1097 = phi [^while.body46, i1 false] [^b160, i1 %1024];
    cbr i1 %1097(prob = 0.5), ^if.then73, ^b183;
  ^while.header85:
    i32 %1098 = phi [^while.header79, i32 0] [^b208, i32 %1282];
    i32 %1099 = phi [^while.header79, i32 %873] [^b208, i32 %1284];
    i32 %1100 = phi [^while.header79, i32 %872] [^b208, i32 %1283];
    i32 %1101 = phi [^while.header79, i32 0] [^b208, i32 %1285];
    i1 %1102 = scmp lt i32 %1101, i32 16;
    cbr i1 %1102(prob = 0.97), ^while.body55, ^b184;
  ^if.then67:
    i32* %1103 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %838];
    i32 %1104 = load i32* %1103;
    i32 %1105 = add i32 %837, i32 %1104;
    ubr ^b173;
  ^if.then68:
    i32* %1106 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %857];
    i32 %1107 = load i32* %1106;
    i32 %1108 = add i32 %854, i32 %1107;
    ubr ^b175;
  ^if.then69:
    i32* %1109 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %862];
    i32 %1110 = load i32* %1109;
    i32 %1111 = add i32 %859, i32 %1110;
    ubr ^b176;
  ^b172:
    i32 %1112 = srem i32 %961, i32 2;
    i1 %1113 = scmp neq i32 %1112, i32 0;
    ubr ^b185;
  ^b173:
    i32 %1114 = phi [^if.then63, i32 %837] [^if.else23, i32 %837] [^if.then67, i32 %1105];
    i32 %1115 = sdiv i32 %836, i32 2;
    i32 %1116 = sdiv i32 %835, i32 2;
    i32 %1117 = add i32 %838, i32 1;
    ubr ^while.header69;
  ^b174:
    i32 %1118 = srem i32 %969, i32 2;
    i1 %1119 = scmp neq i32 %1118, i32 0;
    ubr ^b186;
  ^if.then70:
    i32* %1120 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %847];
    i32 %1121 = load i32* %1120;
    i32 %1122 = add i32 %846, i32 %1121;
    ubr ^b180;
  ^if.then71:
    i32* %1123 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %852];
    i32 %1124 = load i32* %1123;
    i32 %1125 = add i32 %851, i32 %1124;
    ubr ^b181;
  ^b175:
    i32 %1126 = phi [^if.then65, i32 %854] [^if.else25, i32 %854] [^if.then68, i32 %1108];
    i32 %1127 = sdiv i32 %856, i32 2;
    i32 %1128 = sdiv i32 %855, i32 2;
    i32 %1129 = add i32 %857, i32 1;
    ubr ^while.header72;
  ^b176:
    i32 %1130 = phi [^if.then66, i32 %859] [^if.else26, i32 %859] [^if.then69, i32 %1111];
    i32 %1131 = sdiv i32 %861, i32 2;
    i32 %1132 = sdiv i32 %860, i32 2;
    i32 %1133 = add i32 %862, i32 1;
    ubr ^while.header73;
  ^b177:
    i32 %1134 = srem i32 %982, i32 2;
    i1 %1135 = scmp neq i32 %1134, i32 0;
    ubr ^b187;
  ^b178:
    i32 %1136 = srem i32 %987, i32 2;
    i1 %1137 = scmp neq i32 %1136, i32 0;
    ubr ^b188;
  ^if.then72:
    i32* %1138 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %868];
    i32 %1139 = load i32* %1138;
    i32 %1140 = add i32 %867, i32 %1139;
    ubr ^b182;
  ^if.then73:
    i32* %1141 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %879];
    i32 %1142 = load i32* %1141;
    i32 %1143 = add i32 %876, i32 %1142;
    ubr ^b183;
  ^b179:
    i32 %1144 = phi [^if.then64, i32 %1042] [^if.else24, i32 %1066];
    ubr ^while.header44;
  ^b180:
    i32 %1145 = phi [^b168, i32 %846] [^if.then70, i32 %1122];
    i32 %1146 = sdiv i32 %845, i32 2;
    i32 %1147 = sdiv i32 %844, i32 2;
    i32 %1148 = add i32 %847, i32 1;
    ubr ^while.header70;
  ^b181:
    i32 %1149 = phi [^b169, i32 %851] [^if.then71, i32 %1125];
    i32 %1150 = sdiv i32 %850, i32 2;
    i32 %1151 = sdiv i32 %849, i32 2;
    i32 %1152 = add i32 %852, i32 1;
    ubr ^while.header71;
  ^b182:
    i32 %1153 = phi [^b170, i32 %867] [^if.then72, i32 %1140];
    i32 %1154 = sdiv i32 %866, i32 2;
    i32 %1155 = sdiv i32 %865, i32 2;
    i32 %1156 = add i32 %868, i32 1;
    ubr ^while.header74;
  ^b183:
    i32 %1157 = phi [^b171, i32 %876] [^if.then73, i32 %1143];
    i32 %1158 = sdiv i32 %878, i32 2;
    i32 %1159 = sdiv i32 %877, i32 2;
    i32 %1160 = add i32 %879, i32 1;
    ubr ^while.header76;
  ^if.then74:
    i32 %1161 = srem i32 %975, i32 2;
    i1 %1162 = scmp eq i32 %1161, i32 0;
    cbr i1 %1162(prob = 0.5), ^if.then75, ^b192;
  ^b184:
    i32 %1163 = load i32* %1;
    i32 %1164 = mul i32 %1098, i32 %1163;
    ubr ^while.header89;
  ^while.body52:
    i32 %1165 = srem i32 %1078, i32 2;
    i1 %1166 = scmp neq i32 %1165, i32 0;
    cbr i1 %1166(prob = 0.5), ^b189, ^b198;
  ^while.body53:
    i32 %1167 = srem i32 %1084, i32 2;
    i1 %1168 = scmp neq i32 %1167, i32 0;
    cbr i1 %1168(prob = 0.5), ^b190, ^b199;
  ^b185:
    i1 %1169 = phi [^while.body47, i1 false] [^b172, i1 %1113];
    cbr i1 %1169(prob = 0.5), ^if.then76, ^b194;
  ^while.body54:
    i32 %1170 = srem i32 %1093, i32 2;
    i1 %1171 = scmp neq i32 %1170, i32 0;
    cbr i1 %1171(prob = 0.5), ^b191, ^b200;
  ^b186:
    i1 %1172 = phi [^while.body48, i1 false] [^b174, i1 %1119];
    cbr i1 %1172(prob = 0.5), ^if.then77, ^b195;
  ^if.else27:
    i32 %1173 = srem i32 %975, i32 2;
    i1 %1174 = scmp neq i32 %1173, i32 0;
    cbr i1 %1174(prob = 0.5), ^if.then75, ^b192;
  ^while.header86:
    i32 %1175 = phi [^b163, i32 65535] [^b213, i32 %1304];
    i32 %1176 = phi [^b163, i32 %1044] [^b213, i32 %1303];
    i32 %1177 = phi [^b163, i32 0] [^b213, i32 %1302];
    i32 %1178 = phi [^b163, i32 0] [^b213, i32 %1305];
    i1 %1179 = scmp lt i32 %1178, i32 16;
    cbr i1 %1179(prob = 0.97), ^while.body56, ^while.header64;
  ^while.body55:
    i32 %1180 = srem i32 %1100, i32 2;
    i1 %1181 = scmp neq i32 %1180, i32 0;
    cbr i1 %1181(prob = 0.5), ^b193, ^b201;
  ^b187:
    i1 %1182 = phi [^while.body50, i1 false] [^b177, i1 %1135];
    cbr i1 %1182(prob = 0.5), ^if.then78, ^b196;
  ^b188:
    i1 %1183 = phi [^while.body51, i1 false] [^b178, i1 %1137];
    cbr i1 %1183(prob = 0.5), ^if.then79, ^b197;
  ^while.header87:
    i32 %1184 = phi [^b166, i32 0] [^b214, i32 %1306];
    i32 %1185 = phi [^b166, i32 65535] [^b214, i32 %1308];
    i32 %1186 = phi [^b166, i32 %1058] [^b214, i32 %1307];
    i32 %1187 = phi [^b166, i32 0] [^b214, i32 %1309];
    i1 %1188 = scmp lt i32 %1187, i32 16;
    cbr i1 %1188(prob = 0.97), ^while.body57, ^while.header65;
  ^while.header88:
    i32 %1189 = phi [^b167, i32 0] [^b215, i32 %1310];
    i32 %1190 = phi [^b167, i32 65535] [^b215, i32 %1312];
    i32 %1191 = phi [^b167, i32 %1060] [^b215, i32 %1311];
    i32 %1192 = phi [^b167, i32 0] [^b215, i32 %1313];
    i1 %1193 = scmp lt i32 %1192, i32 16;
    cbr i1 %1193(prob = 0.97), ^while.body58, ^while.header66;
  ^if.then75:
    i32* %1194 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %977];
    i32 %1195 = load i32* %1194;
    i32 %1196 = add i32 %974, i32 %1195;
    ubr ^b192;
  ^b189:
    i32 %1197 = srem i32 %1077, i32 2;
    i1 %1198 = scmp neq i32 %1197, i32 0;
    ubr ^b198;
  ^b190:
    i32 %1199 = srem i32 %1083, i32 2;
    i1 %1200 = scmp neq i32 %1199, i32 0;
    ubr ^b199;
  ^if.then76:
    i32* %1201 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %963];
    i32 %1202 = load i32* %1201;
    i32 %1203 = add i32 %960, i32 %1202;
    ubr ^b194;
  ^b191:
    i32 %1204 = srem i32 %1092, i32 2;
    i1 %1205 = scmp neq i32 %1204, i32 0;
    ubr ^b200;
  ^if.then77:
    i32* %1206 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %972];
    i32 %1207 = load i32* %1206;
    i32 %1208 = add i32 %971, i32 %1207;
    ubr ^b195;
  ^b192:
    i32 %1209 = phi [^if.then74, i32 %974] [^if.else27, i32 %974] [^if.then75, i32 %1196];
    i32 %1210 = sdiv i32 %976, i32 2;
    i32 %1211 = sdiv i32 %975, i32 2;
    i32 %1212 = add i32 %977, i32 1;
    ubr ^while.header79;
  ^b193:
    i32 %1213 = srem i32 %1099, i32 2;
    i1 %1214 = scmp neq i32 %1213, i32 0;
    ubr ^b201;
  ^if.then78:
    i32* %1215 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %984];
    i32 %1216 = load i32* %1215;
    i32 %1217 = add i32 %981, i32 %1216;
    ubr ^b196;
  ^if.then79:
    i32* %1218 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %989];
    i32 %1219 = load i32* %1218;
    i32 %1220 = add i32 %986, i32 %1219;
    ubr ^b197;
  ^b194:
    i32 %1221 = phi [^b185, i32 %960] [^if.then76, i32 %1203];
    i32 %1222 = sdiv i32 %962, i32 2;
    i32 %1223 = sdiv i32 %961, i32 2;
    i32 %1224 = add i32 %963, i32 1;
    ubr ^while.header77;
  ^b195:
    i32 %1225 = phi [^b186, i32 %971] [^if.then77, i32 %1208];
    i32 %1226 = sdiv i32 %970, i32 2;
    i32 %1227 = sdiv i32 %969, i32 2;
    i32 %1228 = add i32 %972, i32 1;
    ubr ^while.header78;
  ^b196:
    i32 %1229 = phi [^b187, i32 %981] [^if.then78, i32 %1217];
    i32 %1230 = sdiv i32 %983, i32 2;
    i32 %1231 = sdiv i32 %982, i32 2;
    i32 %1232 = add i32 %984, i32 1;
    ubr ^while.header80;
  ^b197:
    i32 %1233 = phi [^b188, i32 %986] [^if.then79, i32 %1220];
    i32 %1234 = sdiv i32 %988, i32 2;
    i32 %1235 = sdiv i32 %987, i32 2;
    i32 %1236 = add i32 %989, i32 1;
    ubr ^while.header81;
  ^while.body56:
    i32 %1237 = srem i32 %1176, i32 2;
    i1 %1238 = scmp neq i32 %1237, i32 0;
    cbr i1 %1238(prob = 0.5), ^b202, ^b209;
  ^b198:
    i1 %1239 = phi [^while.body52, i1 false] [^b189, i1 %1198];
    cbr i1 %1239(prob = 0.5), ^if.then80, ^b205;
  ^b199:
    i1 %1240 = phi [^while.body53, i1 false] [^b190, i1 %1200];
    cbr i1 %1240(prob = 0.5), ^if.then81, ^b206;
  ^while.body57:
    i32 %1241 = srem i32 %1186, i32 2;
    i1 %1242 = scmp neq i32 %1241, i32 0;
    cbr i1 %1242(prob = 0.5), ^b203, ^b210;
  ^while.body58:
    i32 %1243 = srem i32 %1191, i32 2;
    i1 %1244 = scmp neq i32 %1243, i32 0;
    cbr i1 %1244(prob = 0.5), ^b204, ^b211;
  ^b200:
    i1 %1245 = phi [^while.body54, i1 false] [^b191, i1 %1205];
    cbr i1 %1245(prob = 0.5), ^if.then82, ^b207;
  ^b201:
    i1 %1246 = phi [^while.body55, i1 false] [^b193, i1 %1214];
    cbr i1 %1246(prob = 0.5), ^if.then83, ^b208;
  ^while.header89:
    i32 %1247 = phi [^b184, i32 65535] [^b217, i32 %1320];
    i32 %1248 = phi [^b184, i32 %1164] [^b217, i32 %1319];
    i32 %1249 = phi [^b184, i32 0] [^b217, i32 %1318];
    i32 %1250 = phi [^b184, i32 0] [^b217, i32 %1321];
    i1 %1251 = scmp lt i32 %1250, i32 16;
    cbr i1 %1251(prob = 0.97), ^while.body59, ^while.header75;
  ^b202:
    i32 %1252 = srem i32 %1175, i32 2;
    i1 %1253 = scmp neq i32 %1252, i32 0;
    ubr ^b209;
  ^if.then80:
    i32* %1254 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1080];
    i32 %1255 = load i32* %1254;
    i32 %1256 = add i32 %1079, i32 %1255;
    ubr ^b205;
  ^if.then81:
    i32* %1257 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1085];
    i32 %1258 = load i32* %1257;
    i32 %1259 = add i32 %1082, i32 %1258;
    ubr ^b206;
  ^b203:
    i32 %1260 = srem i32 %1185, i32 2;
    i1 %1261 = scmp neq i32 %1260, i32 0;
    ubr ^b210;
  ^b204:
    i32 %1262 = srem i32 %1190, i32 2;
    i1 %1263 = scmp neq i32 %1262, i32 0;
    ubr ^b211;
  ^if.then82:
    i32* %1264 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1095];
    i32 %1265 = load i32* %1264;
    i32 %1266 = add i32 %1094, i32 %1265;
    ubr ^b207;
  ^if.then83:
    i32* %1267 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1101];
    i32 %1268 = load i32* %1267;
    i32 %1269 = add i32 %1098, i32 %1268;
    ubr ^b208;
  ^b205:
    i32 %1270 = phi [^b198, i32 %1079] [^if.then80, i32 %1256];
    i32 %1271 = sdiv i32 %1078, i32 2;
    i32 %1272 = sdiv i32 %1077, i32 2;
    i32 %1273 = add i32 %1080, i32 1;
    ubr ^while.header82;
  ^b206:
    i32 %1274 = phi [^b199, i32 %1082] [^if.then81, i32 %1259];
    i32 %1275 = sdiv i32 %1084, i32 2;
    i32 %1276 = sdiv i32 %1083, i32 2;
    i32 %1277 = add i32 %1085, i32 1;
    ubr ^while.header83;
  ^b207:
    i32 %1278 = phi [^b200, i32 %1094] [^if.then82, i32 %1266];
    i32 %1279 = sdiv i32 %1093, i32 2;
    i32 %1280 = sdiv i32 %1092, i32 2;
    i32 %1281 = add i32 %1095, i32 1;
    ubr ^while.header84;
  ^b208:
    i32 %1282 = phi [^b201, i32 %1098] [^if.then83, i32 %1269];
    i32 %1283 = sdiv i32 %1100, i32 2;
    i32 %1284 = sdiv i32 %1099, i32 2;
    i32 %1285 = add i32 %1101, i32 1;
    ubr ^while.header85;
  ^b209:
    i1 %1286 = phi [^while.body56, i1 false] [^b202, i1 %1253];
    cbr i1 %1286(prob = 0.5), ^if.then84, ^b213;
  ^while.body59:
    i32 %1287 = srem i32 %1248, i32 2;
    i1 %1288 = scmp neq i32 %1287, i32 0;
    cbr i1 %1288(prob = 0.5), ^b212, ^b216;
  ^b210:
    i1 %1289 = phi [^while.body57, i1 false] [^b203, i1 %1261];
    cbr i1 %1289(prob = 0.5), ^if.then85, ^b214;
  ^b211:
    i1 %1290 = phi [^while.body58, i1 false] [^b204, i1 %1263];
    cbr i1 %1290(prob = 0.5), ^if.then86, ^b215;
  ^if.then84:
    i32* %1291 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1178];
    i32 %1292 = load i32* %1291;
    i32 %1293 = add i32 %1177, i32 %1292;
    ubr ^b213;
  ^b212:
    i32 %1294 = srem i32 %1247, i32 2;
    i1 %1295 = scmp neq i32 %1294, i32 0;
    ubr ^b216;
  ^if.then85:
    i32* %1296 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1187];
    i32 %1297 = load i32* %1296;
    i32 %1298 = add i32 %1184, i32 %1297;
    ubr ^b214;
  ^if.then86:
    i32* %1299 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1192];
    i32 %1300 = load i32* %1299;
    i32 %1301 = add i32 %1189, i32 %1300;
    ubr ^b215;
  ^b213:
    i32 %1302 = phi [^b209, i32 %1177] [^if.then84, i32 %1293];
    i32 %1303 = sdiv i32 %1176, i32 2;
    i32 %1304 = sdiv i32 %1175, i32 2;
    i32 %1305 = add i32 %1178, i32 1;
    ubr ^while.header86;
  ^b214:
    i32 %1306 = phi [^b210, i32 %1184] [^if.then85, i32 %1298];
    i32 %1307 = sdiv i32 %1186, i32 2;
    i32 %1308 = sdiv i32 %1185, i32 2;
    i32 %1309 = add i32 %1187, i32 1;
    ubr ^while.header87;
  ^b215:
    i32 %1310 = phi [^b211, i32 %1189] [^if.then86, i32 %1301];
    i32 %1311 = sdiv i32 %1191, i32 2;
    i32 %1312 = sdiv i32 %1190, i32 2;
    i32 %1313 = add i32 %1192, i32 1;
    ubr ^while.header88;
  ^b216:
    i1 %1314 = phi [^while.body59, i1 false] [^b212, i1 %1295];
    cbr i1 %1314(prob = 0.5), ^if.then87, ^b217;
  ^if.then87:
    i32* %1315 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1250];
    i32 %1316 = load i32* %1315;
    i32 %1317 = add i32 %1249, i32 %1316;
    ubr ^b217;
  ^b217:
    i32 %1318 = phi [^b216, i32 %1249] [^if.then87, i32 %1317];
    i32 %1319 = sdiv i32 %1248, i32 2;
    i32 %1320 = sdiv i32 %1247, i32 2;
    i32 %1321 = add i32 %1250, i32 1;
    ubr ^while.header89;
}
