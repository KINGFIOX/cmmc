internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [16 * i32]* %SHIFT_TABLE = alloc [16 * i32];
    i32* %0 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 0];
    store i32* %0 with i32 1;
    i32* %1 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 1];
    store i32* %1 with i32 2;
    i32* %2 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 2];
    store i32* %2 with i32 4;
    i32* %3 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 3];
    store i32* %3 with i32 8;
    i32* %4 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 4];
    store i32* %4 with i32 16;
    i32* %5 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 5];
    store i32* %5 with i32 32;
    i32* %6 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 6];
    store i32* %6 with i32 64;
    i32* %7 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 7];
    store i32* %7 with i32 128;
    i32* %8 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 8];
    store i32* %8 with i32 256;
    i32* %9 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 9];
    store i32* %9 with i32 512;
    i32* %10 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 10];
    store i32* %10 with i32 1024;
    i32* %11 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 11];
    store i32* %11 with i32 2048;
    i32* %12 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 12];
    store i32* %12 with i32 4096;
    i32* %13 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 13];
    store i32* %13 with i32 8192;
    i32* %14 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 14];
    store i32* %14 with i32 16384;
    i32* %15 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 15];
    store i32* %15 with i32 32768;
    ubr ^while.header;
  ^while.header:
    i32 %16 = phi [^entry, i32 2] [^b15, i32 %60];
    i32 %17 = phi [^entry, i32 0] [^b15, i32 %134];
    i32 %18 = phi [^entry, i32 1] [^b15, i32 %39];
    i1 %19 = scmp gt i32 %17, i32 0;
    cbr i1 %19(prob = 0.97), ^while.header1, ^b;
  ^b:
    call (i32) -> void @putint(i32 %18);
    call (i32) -> void @putch(i32 10);
    ubr ^while.header2;
  ^while.header1:
    i32 %20 = phi [^while.header, i32 0] [^b2, i32 %38];
    i32 %21 = phi [^while.header, i32 0] [^b2, i32 %35];
    i32 %22 = phi [^while.header, i32 1] [^b2, i32 %37];
    i32 %23 = phi [^while.header, i32 %17] [^b2, i32 %36];
    i1 %24 = scmp lt i32 %20, i32 16;
    cbr i1 %24(prob = 0.97), ^while.body, ^b1;
  ^while.body:
    i32 %25 = and i32 %22, i32 %23;
    i1 %26 = ztrunc i32 %25 to i1;
    cbr i1 %26(prob = 0.5), ^if.then, ^b2;
  ^while.header2:
    i32 %27 = phi [^b, i32 2] [^b30, i32 %122];
    i32 %28 = phi [^b, i32 1] [^b30, i32 %70];
    i32 %29 = phi [^b, i32 1] [^b30, i32 %234];
    i1 %30 = scmp gt i32 %29, i32 0;
    cbr i1 %30(prob = 0.97), ^while.header3, ^b3;
  ^b1:
    i1 %31 = scmp neq i32 %21, i32 0;
    cbr i1 %31(prob = 0.5), ^while.header4, ^b4;
  ^if.then:
    i32* %32 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %20];
    i32 %33 = load i32* %32;
    i32 %34 = add i32 %21, i32 %33;
    ubr ^b2;
  ^b2:
    i32 %35 = phi [^while.body, i32 %21] [^if.then, i32 %34];
    i32 %36 = sdiv i32 %23, i32 2;
    i32 %37 = sdiv i32 %22, i32 2;
    i32 %38 = add i32 %20, i32 1;
    ubr ^while.header1;
  ^b3:
    call (i32) -> void @putint(i32 %28);
    call (i32) -> void @putch(i32 10);
    ubr ^while.header6;
  ^b4:
    i32 %39 = phi [^b1, i32 %18] [^while.header4, i32 %47];
    ubr ^while.header7;
  ^while.header3:
    i32 %40 = phi [^while.header2, i32 0] [^b6, i32 %66];
    i32 %41 = phi [^while.header2, i32 0] [^b6, i32 %69];
    i32 %42 = phi [^while.header2, i32 1] [^b6, i32 %68];
    i32 %43 = phi [^while.header2, i32 %29] [^b6, i32 %67];
    i1 %44 = scmp lt i32 %41, i32 16;
    cbr i1 %44(prob = 0.97), ^while.body1, ^b5;
  ^while.header4:
    i32 %45 = phi [^b1, i32 %18] [^b38, i32 %156];
    i32 %46 = phi [^b1, i32 %16] [^b38, i32 %311];
    i32 %47 = phi [^b1, i32 0] [^b38, i32 %103];
    i1 %48 = scmp neq i32 %46, i32 0;
    cbr i1 %48(prob = 0.97), ^while.header5, ^b4;
  ^while.body1:
    i32 %49 = and i32 %42, i32 %43;
    i1 %50 = ztrunc i32 %49 to i1;
    cbr i1 %50(prob = 0.5), ^if.then1, ^b6;
  ^while.header5:
    i32 %51 = phi [^while.header4, i32 0] [^b10, i32 %96];
    i32 %52 = phi [^while.header4, i32 1] [^b10, i32 %95];
    i32 %53 = phi [^while.header4, i32 %46] [^b10, i32 %94];
    i32 %54 = phi [^while.header4, i32 0] [^b10, i32 %93];
    i1 %55 = scmp lt i32 %51, i32 16;
    cbr i1 %55(prob = 0.97), ^while.body2, ^b8;
  ^while.header6:
    i32 %56 = phi [^b3, i32 2] [^b11, i32 %97];
    i1 %57 = scmp lt i32 %56, i32 16;
    cbr i1 %57(prob = 0.97), ^while.header8, ^while.header11;
  ^while.header7:
    i32 %58 = phi [^b4, i32 %16] [^b48, i32 %223];
    i32 %59 = phi [^b4, i32 %16] [^b48, i32 %413];
    i32 %60 = phi [^b4, i32 0] [^b48, i32 %141];
    i1 %61 = scmp neq i32 %59, i32 0;
    cbr i1 %61(prob = 0.97), ^while.header9, ^b9;
  ^b5:
    i1 %62 = scmp neq i32 %40, i32 0;
    cbr i1 %62(prob = 0.5), ^while.header10, ^b7;
  ^if.then1:
    i32* %63 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %41];
    i32 %64 = load i32* %63;
    i32 %65 = add i32 %40, i32 %64;
    ubr ^b6;
  ^b6:
    i32 %66 = phi [^while.body1, i32 %40] [^if.then1, i32 %65];
    i32 %67 = sdiv i32 %43, i32 2;
    i32 %68 = sdiv i32 %42, i32 2;
    i32 %69 = add i32 %41, i32 1;
    ubr ^while.header3;
  ^b7:
    i32 %70 = phi [^b5, i32 %28] [^while.header10, i32 %83];
    ubr ^while.header15;
  ^while.body2:
    i32 %71 = and i32 %52, i32 %53;
    i1 %72 = ztrunc i32 %71 to i1;
    cbr i1 %72(prob = 0.5), ^if.then2, ^b10;
  ^while.header8:
    i32 %73 = phi [^while.header6, i32 2] [^b59, i32 %273];
    i32 %74 = phi [^while.header6, i32 %56] [^b59, i32 %518];
    i32 %75 = phi [^while.header6, i32 1] [^b59, i32 %190];
    i1 %76 = scmp gt i32 %74, i32 0;
    cbr i1 %76(prob = 0.97), ^while.header12, ^b11;
  ^while.header9:
    i32 %77 = phi [^while.header7, i32 0] [^b16, i32 %138];
    i32 %78 = phi [^while.header7, i32 1] [^b16, i32 %137];
    i32 %79 = phi [^while.header7, i32 %59] [^b16, i32 %136];
    i32 %80 = phi [^while.header7, i32 0] [^b16, i32 %135];
    i1 %81 = scmp lt i32 %77, i32 16;
    cbr i1 %81(prob = 0.97), ^while.body3, ^b13;
  ^while.header10:
    i32 %82 = phi [^b5, i32 %28] [^b62, i32 %281];
    i32 %83 = phi [^b5, i32 0] [^b62, i32 %191];
    i32 %84 = phi [^b5, i32 %27] [^b62, i32 %527];
    i1 %85 = scmp neq i32 %84, i32 0;
    cbr i1 %85(prob = 0.97), ^while.header13, ^b7;
  ^b8:
    i1 %86 = scmp neq i32 %54, i32 0;
    cbr i1 %86(prob = 0.5), ^while.header14, ^b12;
  ^b9:
    i1 %87 = scmp gt i32 %17, i32 32767;
    cbr i1 %87(prob = 0.5), ^if.then3, ^if.else;
  ^while.header11:
    i32 %88 = phi [^while.header6, i32 0] [^b26, i32 %197];
    i1 %89 = scmp lt i32 %88, i32 16;
    cbr i1 %89(prob = 0.97), ^while.header16, ^b14;
  ^if.then2:
    i32* %90 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %51];
    i32 %91 = load i32* %90;
    i32 %92 = add i32 %54, i32 %91;
    ubr ^b10;
  ^b10:
    i32 %93 = phi [^while.body2, i32 %54] [^if.then2, i32 %92];
    i32 %94 = sdiv i32 %53, i32 2;
    i32 %95 = sdiv i32 %52, i32 2;
    i32 %96 = add i32 %51, i32 1;
    ubr ^while.header5;
  ^b11:
    call (i32) -> void @putint(i32 %75);
    call (i32) -> void @putch(i32 10);
    i32 %97 = add i32 %56, i32 1;
    ubr ^while.header6;
  ^if.then3:
    i32 %98 = load i32* %1;
    i32 %99 = sdiv i32 %17, i32 %98;
    i32 %100 = add i32 %99, i32 65536;
    i32 %101 = load i32* %15;
    i32 %102 = sub i32 %100, i32 %101;
    ubr ^b15;
  ^b12:
    i32 %103 = phi [^b8, i32 %47] [^while.header14, i32 %119];
    ubr ^while.header19;
  ^if.else:
    i32 %104 = load i32* %1;
    i32 %105 = sdiv i32 %17, i32 %104;
    ubr ^b15;
  ^while.body3:
    i32 %106 = and i32 %78, i32 %79;
    i1 %107 = ztrunc i32 %106 to i1;
    cbr i1 %107(prob = 0.5), ^if.then4, ^b16;
  ^while.header12:
    i32 %108 = phi [^while.header8, i32 0] [^b22, i32 %180];
    i32 %109 = phi [^while.header8, i32 1] [^b22, i32 %179];
    i32 %110 = phi [^while.header8, i32 %74] [^b22, i32 %178];
    i32 %111 = phi [^while.header8, i32 0] [^b22, i32 %177];
    i1 %112 = scmp lt i32 %108, i32 16;
    cbr i1 %112(prob = 0.97), ^while.body4, ^b18;
  ^while.header13:
    i32 %113 = phi [^while.header10, i32 0] [^b23, i32 %184];
    i32 %114 = phi [^while.header10, i32 0] [^b23, i32 %181];
    i32 %115 = phi [^while.header10, i32 1] [^b23, i32 %183];
    i32 %116 = phi [^while.header10, i32 %84] [^b23, i32 %182];
    i1 %117 = scmp lt i32 %113, i32 16;
    cbr i1 %117(prob = 0.97), ^while.body5, ^b19;
  ^while.header14:
    i32 %118 = phi [^b8, i32 %45] [^while.header42, i32 %367];
    i32 %119 = phi [^b8, i32 %47] [^while.header42, i32 %144];
    i1 %120 = scmp neq i32 %118, i32 0;
    cbr i1 %120(prob = 0.97), ^while.header17, ^b12;
  ^while.header15:
    i32 %121 = phi [^b7, i32 %27] [^b74, i32 %373];
    i32 %122 = phi [^b7, i32 0] [^b74, i32 %252];
    i32 %123 = phi [^b7, i32 %27] [^b74, i32 %643];
    i1 %124 = scmp neq i32 %123, i32 0;
    cbr i1 %124(prob = 0.97), ^while.header18, ^b20;
  ^b13:
    i1 %125 = scmp neq i32 %80, i32 0;
    cbr i1 %125(prob = 0.5), ^while.header20, ^b17;
  ^while.header16:
    i32 %126 = phi [^while.header11, i32 2] [^b75, i32 %379];
    i32 %127 = phi [^while.header11, i32 %88] [^b75, i32 %644];
    i32 %128 = phi [^while.header11, i32 1] [^b75, i32 %253];
    i1 %129 = scmp gt i32 %127, i32 0;
    cbr i1 %129(prob = 0.97), ^while.header21, ^b21;
  ^b14:
    i32 %130 = phi [^while.header11, i32 0] [^b21, i32 1];
    ret i32 %130;
  ^if.then4:
    i32* %131 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %77];
    i32 %132 = load i32* %131;
    i32 %133 = add i32 %80, i32 %132;
    ubr ^b16;
  ^b15:
    i32 %134 = phi [^if.then3, i32 %102] [^if.else, i32 %105];
    ubr ^while.header;
  ^b16:
    i32 %135 = phi [^while.body3, i32 %80] [^if.then4, i32 %133];
    i32 %136 = sdiv i32 %79, i32 2;
    i32 %137 = sdiv i32 %78, i32 2;
    i32 %138 = add i32 %77, i32 1;
    ubr ^while.header9;
  ^while.body4:
    i32 %139 = and i32 %109, i32 %110;
    i1 %140 = ztrunc i32 %139 to i1;
    cbr i1 %140(prob = 0.5), ^if.then5, ^b22;
  ^b17:
    i32 %141 = phi [^b13, i32 %60] [^while.header20, i32 %159];
    ubr ^while.header27;
  ^while.body5:
    i32 %142 = and i32 %115, i32 %116;
    i1 %143 = ztrunc i32 %142 to i1;
    cbr i1 %143(prob = 0.5), ^if.then6, ^b23;
  ^while.header17:
    i32 %144 = phi [^while.header14, i32 0] [^b37, i32 %304];
    i32 %145 = phi [^while.header14, i32 0] [^b37, i32 %307];
    i32 %146 = phi [^while.header14, i32 %118] [^b37, i32 %306];
    i32 %147 = phi [^while.header14, i32 %119] [^b37, i32 %305];
    i1 %148 = scmp lt i32 %145, i32 16;
    cbr i1 %148(prob = 0.97), ^while.body6, ^while.header26;
  ^while.header18:
    i32 %149 = phi [^while.header15, i32 0] [^b31, i32 %238];
    i32 %150 = phi [^while.header15, i32 1] [^b31, i32 %237];
    i32 %151 = phi [^while.header15, i32 %123] [^b31, i32 %236];
    i32 %152 = phi [^while.header15, i32 0] [^b31, i32 %235];
    i1 %153 = scmp lt i32 %149, i32 16;
    cbr i1 %153(prob = 0.97), ^while.body7, ^b27;
  ^b18:
    i1 %154 = scmp neq i32 %111, i32 0;
    cbr i1 %154(prob = 0.5), ^while.header22, ^b24;
  ^while.header19:
    i32 %155 = phi [^b12, i32 %45] [^while.header51, i32 %486];
    i32 %156 = phi [^b12, i32 %45] [^while.header51, i32 %207];
    i1 %157 = scmp neq i32 %155, i32 0;
    cbr i1 %157(prob = 0.97), ^while.header23, ^b28;
  ^while.header20:
    i32 %158 = phi [^b13, i32 %58] [^while.header52, i32 %489];
    i32 %159 = phi [^b13, i32 %60] [^while.header52, i32 %210];
    i1 %160 = scmp neq i32 %158, i32 0;
    cbr i1 %160(prob = 0.97), ^while.header24, ^b17;
  ^b19:
    i1 %161 = scmp neq i32 %114, i32 0;
    cbr i1 %161(prob = 0.5), ^while.header25, ^b25;
  ^while.header21:
    i32 %162 = phi [^while.header16, i32 0] [^b32, i32 %247];
    i32 %163 = phi [^while.header16, i32 0] [^b32, i32 %244];
    i32 %164 = phi [^while.header16, i32 1] [^b32, i32 %246];
    i32 %165 = phi [^while.header16, i32 %127] [^b32, i32 %245];
    i1 %166 = scmp lt i32 %162, i32 16;
    cbr i1 %166(prob = 0.97), ^while.body8, ^b29;
  ^b20:
    i1 %167 = scmp gt i32 %29, i32 32767;
    cbr i1 %167(prob = 0.5), ^if.then7, ^if.else1;
  ^b21:
    i32* %168 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %88];
    i32 %169 = load i32* %168;
    i1 %170 = scmp neq i32 %128, i32 %169;
    cbr i1 %170(prob = 0.5), ^b14, ^b26;
  ^if.then5:
    i32* %171 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %108];
    i32 %172 = load i32* %171;
    i32 %173 = add i32 %111, i32 %172;
    ubr ^b22;
  ^if.then6:
    i32* %174 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %113];
    i32 %175 = load i32* %174;
    i32 %176 = add i32 %114, i32 %175;
    ubr ^b23;
  ^b22:
    i32 %177 = phi [^while.body4, i32 %111] [^if.then5, i32 %173];
    i32 %178 = sdiv i32 %110, i32 2;
    i32 %179 = sdiv i32 %109, i32 2;
    i32 %180 = add i32 %108, i32 1;
    ubr ^while.header12;
  ^b23:
    i32 %181 = phi [^while.body5, i32 %114] [^if.then6, i32 %176];
    i32 %182 = sdiv i32 %116, i32 2;
    i32 %183 = sdiv i32 %115, i32 2;
    i32 %184 = add i32 %113, i32 1;
    ubr ^while.header13;
  ^if.then7:
    i32 %185 = load i32* %1;
    i32 %186 = sdiv i32 %29, i32 %185;
    i32 %187 = add i32 %186, i32 65536;
    i32 %188 = load i32* %15;
    i32 %189 = sub i32 %187, i32 %188;
    ubr ^b30;
  ^b24:
    i32 %190 = phi [^b18, i32 %75] [^while.header22, i32 %201];
    ubr ^while.header30;
  ^b25:
    i32 %191 = phi [^b19, i32 %83] [^while.header25, i32 %215];
    ubr ^while.header32;
  ^while.body6:
    i1 %192 = ztrunc i32 %147 to i1;
    cbr i1 %192(prob = 0.5), ^if.then11, ^if.else3;
  ^if.else1:
    i32 %193 = load i32* %1;
    i32 %194 = sdiv i32 %29, i32 %193;
    ubr ^b30;
  ^while.body7:
    i32 %195 = and i32 %150, i32 %151;
    i1 %196 = ztrunc i32 %195 to i1;
    cbr i1 %196(prob = 0.5), ^if.then8, ^b31;
  ^b26:
    i32 %197 = add i32 %88, i32 1;
    ubr ^while.header11;
  ^while.body8:
    i32 %198 = and i32 %164, i32 %165;
    i1 %199 = ztrunc i32 %198 to i1;
    cbr i1 %199(prob = 0.5), ^if.then9, ^b32;
  ^while.header22:
    i32 %200 = phi [^b18, i32 %75] [^b92, i32 %581];
    i32 %201 = phi [^b18, i32 0] [^b92, i32 %424];
    i32 %202 = phi [^b18, i32 %73] [^b92, i32 %817];
    i1 %203 = scmp neq i32 %202, i32 0;
    cbr i1 %203(prob = 0.97), ^while.header28, ^b24;
  ^while.header23:
    i32 %204 = phi [^while.header19, i32 0] [^b47, i32 %406];
    i32 %205 = phi [^while.header19, i32 %155] [^b47, i32 %405];
    i32 %206 = phi [^while.header19, i32 %156] [^b47, i32 %404];
    i32 %207 = phi [^while.header19, i32 0] [^b47, i32 %403];
    i1 %208 = scmp lt i32 %204, i32 16;
    cbr i1 %208(prob = 0.97), ^while.body9, ^while.header35;
  ^while.header24:
    i32 %209 = phi [^while.header20, i32 0] [^b45, i32 %398];
    i32 %210 = phi [^while.header20, i32 0] [^b45, i32 %395];
    i32 %211 = phi [^while.header20, i32 %158] [^b45, i32 %397];
    i32 %212 = phi [^while.header20, i32 %159] [^b45, i32 %396];
    i1 %213 = scmp lt i32 %209, i32 16;
    cbr i1 %213(prob = 0.97), ^while.body10, ^while.header36;
  ^while.header25:
    i32 %214 = phi [^b19, i32 %82] [^while.header57, i32 %598];
    i32 %215 = phi [^b19, i32 %83] [^while.header57, i32 %265];
    i1 %216 = scmp neq i32 %214, i32 0;
    cbr i1 %216(prob = 0.97), ^while.header29, ^b25;
  ^while.header26:
    i32 %217 = phi [^while.header17, i32 0] [^b39, i32 %315];
    i32 %218 = phi [^while.header17, i32 0] [^b39, i32 %312];
    i32 %219 = phi [^while.header17, i32 %118] [^b39, i32 %314];
    i32 %220 = phi [^while.header17, i32 %119] [^b39, i32 %313];
    i1 %221 = scmp lt i32 %217, i32 16;
    cbr i1 %221(prob = 0.97), ^while.body11, ^b33;
  ^while.header27:
    i32 %222 = phi [^b17, i32 %58] [^while.header59, i32 %609];
    i32 %223 = phi [^b17, i32 %58] [^while.header59, i32 %278];
    i1 %224 = scmp neq i32 %222, i32 0;
    cbr i1 %224(prob = 0.97), ^while.header31, ^b36;
  ^b27:
    i1 %225 = scmp neq i32 %152, i32 0;
    cbr i1 %225(prob = 0.5), ^while.header33, ^b34;
  ^b28:
    i1 %226 = scmp gt i32 %46, i32 32767;
    cbr i1 %226(prob = 0.5), ^if.then10, ^if.else2;
  ^b29:
    i1 %227 = scmp neq i32 %163, i32 0;
    cbr i1 %227(prob = 0.5), ^while.header34, ^b35;
  ^if.then8:
    i32* %228 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %149];
    i32 %229 = load i32* %228;
    i32 %230 = add i32 %152, i32 %229;
    ubr ^b31;
  ^if.then9:
    i32* %231 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %162];
    i32 %232 = load i32* %231;
    i32 %233 = add i32 %163, i32 %232;
    ubr ^b32;
  ^b30:
    i32 %234 = phi [^if.then7, i32 %189] [^if.else1, i32 %194];
    ubr ^while.header2;
  ^b31:
    i32 %235 = phi [^while.body7, i32 %152] [^if.then8, i32 %230];
    i32 %236 = sdiv i32 %151, i32 2;
    i32 %237 = sdiv i32 %150, i32 2;
    i32 %238 = add i32 %149, i32 1;
    ubr ^while.header18;
  ^if.then10:
    i32 %239 = load i32* %1;
    i32 %240 = sdiv i32 %46, i32 %239;
    i32 %241 = add i32 %240, i32 65536;
    i32 %242 = load i32* %15;
    i32 %243 = sub i32 %241, i32 %242;
    ubr ^b38;
  ^b32:
    i32 %244 = phi [^while.body8, i32 %163] [^if.then9, i32 %233];
    i32 %245 = sdiv i32 %165, i32 2;
    i32 %246 = sdiv i32 %164, i32 2;
    i32 %247 = add i32 %162, i32 1;
    ubr ^while.header21;
  ^if.then11:
    i32 %248 = and i32 %146, i32 1;
    i1 %249 = scmp eq i32 %248, i32 0;
    cbr i1 %249(prob = 0.5), ^if.then12, ^b37;
  ^b33:
    i32 %250 = load i32* %1;
    i32 %251 = mul i32 %218, i32 %250;
    ubr ^while.header42;
  ^b34:
    i32 %252 = phi [^b27, i32 %122] [^while.header33, i32 %284];
    ubr ^while.header43;
  ^b35:
    i32 %253 = phi [^b29, i32 %128] [^while.header34, i32 %287];
    ubr ^while.header44;
  ^if.else2:
    i32 %254 = load i32* %1;
    i32 %255 = sdiv i32 %46, i32 %254;
    ubr ^b38;
  ^while.body9:
    i1 %256 = ztrunc i32 %206 to i1;
    cbr i1 %256(prob = 0.5), ^if.then15, ^if.else5;
  ^while.body10:
    i1 %257 = ztrunc i32 %212 to i1;
    cbr i1 %257(prob = 0.5), ^if.then16, ^if.else6;
  ^while.header28:
    i32 %258 = phi [^while.header22, i32 0] [^b46, i32 %402];
    i32 %259 = phi [^while.header22, i32 0] [^b46, i32 %399];
    i32 %260 = phi [^while.header22, i32 1] [^b46, i32 %401];
    i32 %261 = phi [^while.header22, i32 %202] [^b46, i32 %400];
    i1 %262 = scmp lt i32 %258, i32 16;
    cbr i1 %262(prob = 0.97), ^while.body12, ^b42;
  ^if.else3:
    i1 %263 = ztrunc i32 %146 to i1;
    cbr i1 %263(prob = 0.5), ^if.then12, ^b37;
  ^while.header29:
    i32 %264 = phi [^while.header25, i32 0] [^b58, i32 %508];
    i32 %265 = phi [^while.header25, i32 0] [^b58, i32 %505];
    i32 %266 = phi [^while.header25, i32 %214] [^b58, i32 %507];
    i32 %267 = phi [^while.header25, i32 %215] [^b58, i32 %506];
    i1 %268 = scmp lt i32 %264, i32 16;
    cbr i1 %268(prob = 0.97), ^while.body13, ^while.header41;
  ^while.body11:
    i32 %269 = and i32 %219, i32 %220;
    i1 %270 = ztrunc i32 %269 to i1;
    cbr i1 %270(prob = 0.5), ^if.then13, ^b39;
  ^while.header30:
    i32 %271 = phi [^b24, i32 %73] [^b103, i32 %694];
    i32 %272 = phi [^b24, i32 %73] [^b103, i32 %932];
    i32 %273 = phi [^b24, i32 0] [^b103, i32 %548];
    i1 %274 = scmp neq i32 %272, i32 0;
    cbr i1 %274(prob = 0.97), ^while.header37, ^b43;
  ^while.header31:
    i32 %275 = phi [^while.header27, i32 0] [^b60, i32 %522];
    i32 %276 = phi [^while.header27, i32 %222] [^b60, i32 %521];
    i32 %277 = phi [^while.header27, i32 %223] [^b60, i32 %520];
    i32 %278 = phi [^while.header27, i32 0] [^b60, i32 %519];
    i1 %279 = scmp lt i32 %275, i32 16;
    cbr i1 %279(prob = 0.97), ^while.body14, ^while.header45;
  ^while.header32:
    i32 %280 = phi [^b25, i32 %82] [^while.header67, i32 %708];
    i32 %281 = phi [^b25, i32 %82] [^while.header67, i32 %345];
    i1 %282 = scmp neq i32 %280, i32 0;
    cbr i1 %282(prob = 0.97), ^while.header38, ^b44;
  ^while.header33:
    i32 %283 = phi [^b27, i32 %121] [^while.header68, i32 %713];
    i32 %284 = phi [^b27, i32 %122] [^while.header68, i32 %348];
    i1 %285 = scmp neq i32 %283, i32 0;
    cbr i1 %285(prob = 0.97), ^while.header39, ^b34;
  ^while.header34:
    i32 %286 = phi [^b29, i32 %128] [^b104, i32 %702];
    i32 %287 = phi [^b29, i32 0] [^b104, i32 %562];
    i32 %288 = phi [^b29, i32 %126] [^b104, i32 %936];
    i1 %289 = scmp neq i32 %288, i32 0;
    cbr i1 %289(prob = 0.97), ^while.header40, ^b35;
  ^while.header35:
    i32 %290 = phi [^while.header23, i32 0] [^b50, i32 %430];
    i32 %291 = phi [^while.header23, i32 %155] [^b50, i32 %429];
    i32 %292 = phi [^while.header23, i32 %156] [^b50, i32 %428];
    i32 %293 = phi [^while.header23, i32 0] [^b50, i32 %427];
    i1 %294 = scmp lt i32 %290, i32 16;
    cbr i1 %294(prob = 0.97), ^while.body15, ^b40;
  ^while.header36:
    i32 %295 = phi [^while.header24, i32 0] [^b51, i32 %434];
    i32 %296 = phi [^while.header24, i32 0] [^b51, i32 %431];
    i32 %297 = phi [^while.header24, i32 %158] [^b51, i32 %433];
    i32 %298 = phi [^while.header24, i32 %159] [^b51, i32 %432];
    i1 %299 = scmp lt i32 %295, i32 16;
    cbr i1 %299(prob = 0.97), ^while.body16, ^b41;
  ^b36:
    i1 %300 = scmp gt i32 %59, i32 32767;
    cbr i1 %300(prob = 0.5), ^if.then14, ^if.else4;
  ^if.then12:
    i32* %301 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %145];
    i32 %302 = load i32* %301;
    i32 %303 = add i32 %144, i32 %302;
    ubr ^b37;
  ^b37:
    i32 %304 = phi [^if.then11, i32 %144] [^if.else3, i32 %144] [^if.then12, i32 %303];
    i32 %305 = sdiv i32 %147, i32 2;
    i32 %306 = sdiv i32 %146, i32 2;
    i32 %307 = add i32 %145, i32 1;
    ubr ^while.header17;
  ^if.then13:
    i32* %308 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %217];
    i32 %309 = load i32* %308;
    i32 %310 = add i32 %218, i32 %309;
    ubr ^b39;
  ^b38:
    i32 %311 = phi [^if.then10, i32 %243] [^if.else2, i32 %255];
    ubr ^while.header4;
  ^b39:
    i32 %312 = phi [^while.body11, i32 %218] [^if.then13, i32 %310];
    i32 %313 = sdiv i32 %220, i32 2;
    i32 %314 = sdiv i32 %219, i32 2;
    i32 %315 = add i32 %217, i32 1;
    ubr ^while.header26;
  ^if.then14:
    i32 %316 = load i32* %1;
    i32 %317 = sdiv i32 %59, i32 %316;
    i32 %318 = add i32 %317, i32 65536;
    i32 %319 = load i32* %15;
    i32 %320 = sub i32 %318, i32 %319;
    ubr ^b48;
  ^while.body12:
    i32 %321 = and i32 %260, i32 %261;
    i1 %322 = ztrunc i32 %321 to i1;
    cbr i1 %322(prob = 0.5), ^if.then19, ^b46;
  ^if.then15:
    i32 %323 = and i32 %205, i32 1;
    i1 %324 = scmp eq i32 %323, i32 0;
    cbr i1 %324(prob = 0.5), ^if.then17, ^b47;
  ^if.then16:
    i32 %325 = and i32 %211, i32 1;
    i1 %326 = scmp eq i32 %325, i32 0;
    cbr i1 %326(prob = 0.5), ^if.then18, ^b45;
  ^while.body13:
    i1 %327 = ztrunc i32 %267 to i1;
    cbr i1 %327(prob = 0.5), ^if.then24, ^if.else9;
  ^b40:
    i32 %328 = load i32* %1;
    i32 %329 = mul i32 %293, i32 %328;
    ubr ^while.header51;
  ^b41:
    i32 %330 = load i32* %1;
    i32 %331 = mul i32 %296, i32 %330;
    ubr ^while.header52;
  ^if.else4:
    i32 %332 = load i32* %1;
    i32 %333 = sdiv i32 %59, i32 %332;
    ubr ^b48;
  ^while.body14:
    i1 %334 = ztrunc i32 %277 to i1;
    cbr i1 %334(prob = 0.5), ^if.then25, ^if.else10;
  ^while.header37:
    i32 %335 = phi [^while.header30, i32 0] [^b61, i32 %526];
    i32 %336 = phi [^while.header30, i32 0] [^b61, i32 %523];
    i32 %337 = phi [^while.header30, i32 1] [^b61, i32 %525];
    i32 %338 = phi [^while.header30, i32 %272] [^b61, i32 %524];
    i1 %339 = scmp lt i32 %335, i32 16;
    cbr i1 %339(prob = 0.97), ^while.body17, ^b54;
  ^if.else5:
    i1 %340 = ztrunc i32 %205 to i1;
    cbr i1 %340(prob = 0.5), ^if.then17, ^b47;
  ^if.else6:
    i1 %341 = ztrunc i32 %211 to i1;
    cbr i1 %341(prob = 0.5), ^if.then18, ^b45;
  ^while.header38:
    i32 %342 = phi [^while.header32, i32 0] [^b72, i32 %623];
    i32 %343 = phi [^while.header32, i32 %280] [^b72, i32 %622];
    i32 %344 = phi [^while.header32, i32 %281] [^b72, i32 %621];
    i32 %345 = phi [^while.header32, i32 0] [^b72, i32 %620];
    i1 %346 = scmp lt i32 %342, i32 16;
    cbr i1 %346(prob = 0.97), ^while.body18, ^while.header49;
  ^while.header39:
    i32 %347 = phi [^while.header33, i32 0] [^b73, i32 %627];
    i32 %348 = phi [^while.header33, i32 0] [^b73, i32 %624];
    i32 %349 = phi [^while.header33, i32 %283] [^b73, i32 %626];
    i32 %350 = phi [^while.header33, i32 %284] [^b73, i32 %625];
    i1 %351 = scmp lt i32 %347, i32 16;
    cbr i1 %351(prob = 0.97), ^while.body19, ^while.header50;
  ^b42:
    i1 %352 = scmp neq i32 %259, i32 0;
    cbr i1 %352(prob = 0.5), ^while.header46, ^b49;
  ^while.body15:
    i32 %353 = and i32 %291, i32 %292;
    i1 %354 = ztrunc i32 %353 to i1;
    cbr i1 %354(prob = 0.5), ^if.then20, ^b50;
  ^while.body16:
    i32 %355 = and i32 %297, i32 %298;
    i1 %356 = ztrunc i32 %355 to i1;
    cbr i1 %356(prob = 0.5), ^if.then21, ^b51;
  ^while.header40:
    i32 %357 = phi [^while.header34, i32 0] [^b63, i32 %531];
    i32 %358 = phi [^while.header34, i32 1] [^b63, i32 %533];
    i32 %359 = phi [^while.header34, i32 %288] [^b63, i32 %532];
    i32 %360 = phi [^while.header34, i32 0] [^b63, i32 %534];
    i1 %361 = scmp lt i32 %360, i32 16;
    cbr i1 %361(prob = 0.97), ^while.body20, ^b55;
  ^while.header41:
    i32 %362 = phi [^while.header29, i32 %214] [^b64, i32 %537];
    i32 %363 = phi [^while.header29, i32 %215] [^b64, i32 %536];
    i32 %364 = phi [^while.header29, i32 0] [^b64, i32 %535];
    i32 %365 = phi [^while.header29, i32 0] [^b64, i32 %538];
    i1 %366 = scmp lt i32 %365, i32 16;
    cbr i1 %366(prob = 0.97), ^while.body21, ^b52;
  ^while.header42:
    i32 %367 = phi [^b33, i32 0] [^b65, i32 %539];
    i32 %368 = phi [^b33, i32 65535] [^b65, i32 %541];
    i32 %369 = phi [^b33, i32 %251] [^b65, i32 %540];
    i32 %370 = phi [^b33, i32 0] [^b65, i32 %542];
    i1 %371 = scmp lt i32 %370, i32 16;
    cbr i1 %371(prob = 0.97), ^while.body22, ^while.header14;
  ^while.header43:
    i32 %372 = phi [^b34, i32 %121] [^while.header76, i32 %801];
    i32 %373 = phi [^b34, i32 %121] [^while.header76, i32 %461];
    i1 %374 = scmp neq i32 %372, i32 0;
    cbr i1 %374(prob = 0.97), ^while.header47, ^b56;
  ^b43:
    i1 %375 = scmp gt i32 %74, i32 32767;
    cbr i1 %375(prob = 0.5), ^if.then22, ^if.else7;
  ^b44:
    i1 %376 = scmp gt i32 %84, i32 32767;
    cbr i1 %376(prob = 0.5), ^if.then23, ^if.else8;
  ^while.header44:
    i32 %377 = phi [^b35, i32 %126] [^b116, i32 %798];
    i32 %378 = phi [^b35, i32 %126] [^b116, i32 %1041];
    i32 %379 = phi [^b35, i32 0] [^b116, i32 %668];
    i1 %380 = scmp neq i32 %378, i32 0;
    cbr i1 %380(prob = 0.97), ^while.header48, ^b57;
  ^while.header45:
    i32 %381 = phi [^while.header31, i32 0] [^b67, i32 %561];
    i32 %382 = phi [^while.header31, i32 %222] [^b67, i32 %560];
    i32 %383 = phi [^while.header31, i32 %223] [^b67, i32 %559];
    i32 %384 = phi [^while.header31, i32 0] [^b67, i32 %558];
    i1 %385 = scmp lt i32 %381, i32 16;
    cbr i1 %385(prob = 0.97), ^while.body23, ^b53;
  ^if.then17:
    i32* %386 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %204];
    i32 %387 = load i32* %386;
    i32 %388 = add i32 %207, i32 %387;
    ubr ^b47;
  ^if.then18:
    i32* %389 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %209];
    i32 %390 = load i32* %389;
    i32 %391 = add i32 %210, i32 %390;
    ubr ^b45;
  ^if.then19:
    i32* %392 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %258];
    i32 %393 = load i32* %392;
    i32 %394 = add i32 %259, i32 %393;
    ubr ^b46;
  ^b45:
    i32 %395 = phi [^if.then16, i32 %210] [^if.else6, i32 %210] [^if.then18, i32 %391];
    i32 %396 = sdiv i32 %212, i32 2;
    i32 %397 = sdiv i32 %211, i32 2;
    i32 %398 = add i32 %209, i32 1;
    ubr ^while.header24;
  ^b46:
    i32 %399 = phi [^while.body12, i32 %259] [^if.then19, i32 %394];
    i32 %400 = sdiv i32 %261, i32 2;
    i32 %401 = sdiv i32 %260, i32 2;
    i32 %402 = add i32 %258, i32 1;
    ubr ^while.header28;
  ^b47:
    i32 %403 = phi [^if.then15, i32 %207] [^if.else5, i32 %207] [^if.then17, i32 %388];
    i32 %404 = sdiv i32 %206, i32 2;
    i32 %405 = sdiv i32 %205, i32 2;
    i32 %406 = add i32 %204, i32 1;
    ubr ^while.header23;
  ^if.then20:
    i32* %407 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %290];
    i32 %408 = load i32* %407;
    i32 %409 = add i32 %293, i32 %408;
    ubr ^b50;
  ^if.then21:
    i32* %410 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %295];
    i32 %411 = load i32* %410;
    i32 %412 = add i32 %296, i32 %411;
    ubr ^b51;
  ^b48:
    i32 %413 = phi [^if.then14, i32 %320] [^if.else4, i32 %333];
    ubr ^while.header7;
  ^if.then22:
    i32 %414 = load i32* %1;
    i32 %415 = sdiv i32 %74, i32 %414;
    i32 %416 = add i32 %415, i32 65536;
    i32 %417 = load i32* %15;
    i32 %418 = sub i32 %416, i32 %417;
    ubr ^b59;
  ^if.then23:
    i32 %419 = load i32* %1;
    i32 %420 = sdiv i32 %84, i32 %419;
    i32 %421 = add i32 %420, i32 65536;
    i32 %422 = load i32* %15;
    i32 %423 = sub i32 %421, i32 %422;
    ubr ^b62;
  ^b49:
    i32 %424 = phi [^b42, i32 %201] [^while.header46, i32 %452];
    ubr ^while.header54;
  ^if.then24:
    i32 %425 = and i32 %266, i32 1;
    i1 %426 = scmp eq i32 %425, i32 0;
    cbr i1 %426(prob = 0.5), ^if.then26, ^b58;
  ^b50:
    i32 %427 = phi [^while.body15, i32 %293] [^if.then20, i32 %409];
    i32 %428 = sdiv i32 %292, i32 2;
    i32 %429 = sdiv i32 %291, i32 2;
    i32 %430 = add i32 %290, i32 1;
    ubr ^while.header35;
  ^b51:
    i32 %431 = phi [^while.body16, i32 %296] [^if.then21, i32 %412];
    i32 %432 = sdiv i32 %298, i32 2;
    i32 %433 = sdiv i32 %297, i32 2;
    i32 %434 = add i32 %295, i32 1;
    ubr ^while.header36;
  ^b52:
    i32 %435 = load i32* %1;
    i32 %436 = mul i32 %364, i32 %435;
    ubr ^while.header57;
  ^if.else7:
    i32 %437 = load i32* %1;
    i32 %438 = sdiv i32 %74, i32 %437;
    ubr ^b59;
  ^while.body17:
    i32 %439 = and i32 %337, i32 %338;
    i1 %440 = ztrunc i32 %439 to i1;
    cbr i1 %440(prob = 0.5), ^if.then28, ^b61;
  ^if.then25:
    i32 %441 = and i32 %276, i32 1;
    i1 %442 = scmp eq i32 %441, i32 0;
    cbr i1 %442(prob = 0.5), ^if.then27, ^b60;
  ^if.else8:
    i32 %443 = load i32* %1;
    i32 %444 = sdiv i32 %84, i32 %443;
    ubr ^b62;
  ^while.body18:
    i1 %445 = ztrunc i32 %344 to i1;
    cbr i1 %445(prob = 0.5), ^if.then35, ^if.else13;
  ^while.body19:
    i1 %446 = ztrunc i32 %350 to i1;
    cbr i1 %446(prob = 0.5), ^if.then36, ^if.else14;
  ^b53:
    i32 %447 = load i32* %1;
    i32 %448 = mul i32 %384, i32 %447;
    ubr ^while.header59;
  ^while.body20:
    i32 %449 = and i32 %358, i32 %359;
    i1 %450 = ztrunc i32 %449 to i1;
    cbr i1 %450(prob = 0.5), ^if.then29, ^b63;
  ^if.else9:
    i1 %451 = ztrunc i32 %266 to i1;
    cbr i1 %451(prob = 0.5), ^if.then26, ^b58;
  ^while.header46:
    i32 %452 = phi [^b42, i32 %201] [^while.header77, i32 %569];
    i32 %453 = phi [^b42, i32 %200] [^while.header77, i32 %874];
    i1 %454 = scmp neq i32 %453, i32 0;
    cbr i1 %454(prob = 0.97), ^while.header53, ^b49;
  ^while.body21:
    i32 %455 = and i32 %362, i32 %363;
    i1 %456 = ztrunc i32 %455 to i1;
    cbr i1 %456(prob = 0.5), ^if.then30, ^b64;
  ^while.body22:
    i32 %457 = and i32 %368, i32 %369;
    i1 %458 = ztrunc i32 %457 to i1;
    cbr i1 %458(prob = 0.5), ^if.then31, ^b65;
  ^if.else10:
    i1 %459 = ztrunc i32 %276 to i1;
    cbr i1 %459(prob = 0.5), ^if.then27, ^b60;
  ^while.header47:
    i32 %460 = phi [^while.header43, i32 0] [^b84, i32 %727];
    i32 %461 = phi [^while.header43, i32 0] [^b84, i32 %724];
    i32 %462 = phi [^while.header43, i32 %372] [^b84, i32 %726];
    i32 %463 = phi [^while.header43, i32 %373] [^b84, i32 %725];
    i1 %464 = scmp lt i32 %460, i32 16;
    cbr i1 %464(prob = 0.97), ^while.body24, ^while.header58;
  ^b54:
    i1 %465 = scmp neq i32 %336, i32 0;
    cbr i1 %465(prob = 0.5), ^while.header55, ^b66;
  ^while.body23:
    i32 %466 = and i32 %382, i32 %383;
    i1 %467 = ztrunc i32 %466 to i1;
    cbr i1 %467(prob = 0.5), ^if.then32, ^b67;
  ^while.header48:
    i32 %468 = phi [^while.header44, i32 1] [^b76, i32 %647];
    i32 %469 = phi [^while.header44, i32 %378] [^b76, i32 %646];
    i32 %470 = phi [^while.header44, i32 0] [^b76, i32 %645];
    i32 %471 = phi [^while.header44, i32 0] [^b76, i32 %648];
    i1 %472 = scmp lt i32 %471, i32 16;
    cbr i1 %472(prob = 0.97), ^while.body25, ^b71;
  ^while.header49:
    i32 %473 = phi [^while.header38, i32 %280] [^b77, i32 %651];
    i32 %474 = phi [^while.header38, i32 %281] [^b77, i32 %650];
    i32 %475 = phi [^while.header38, i32 0] [^b77, i32 %649];
    i32 %476 = phi [^while.header38, i32 0] [^b77, i32 %652];
    i1 %477 = scmp lt i32 %476, i32 16;
    cbr i1 %477(prob = 0.97), ^while.body26, ^b69;
  ^while.header50:
    i32 %478 = phi [^while.header39, i32 0] [^b78, i32 %653];
    i32 %479 = phi [^while.header39, i32 %283] [^b78, i32 %655];
    i32 %480 = phi [^while.header39, i32 %284] [^b78, i32 %654];
    i32 %481 = phi [^while.header39, i32 0] [^b78, i32 %656];
    i1 %482 = scmp lt i32 %481, i32 16;
    cbr i1 %482(prob = 0.97), ^while.body27, ^b70;
  ^b55:
    i1 %483 = scmp neq i32 %357, i32 0;
    cbr i1 %483(prob = 0.5), ^while.header56, ^b68;
  ^while.header51:
    i32 %484 = phi [^b40, i32 65535] [^b79, i32 %659];
    i32 %485 = phi [^b40, i32 %329] [^b79, i32 %658];
    i32 %486 = phi [^b40, i32 0] [^b79, i32 %657];
    i32 %487 = phi [^b40, i32 0] [^b79, i32 %660];
    i1 %488 = scmp lt i32 %487, i32 16;
    cbr i1 %488(prob = 0.97), ^while.body28, ^while.header19;
  ^while.header52:
    i32 %489 = phi [^b41, i32 0] [^b80, i32 %661];
    i32 %490 = phi [^b41, i32 65535] [^b80, i32 %663];
    i32 %491 = phi [^b41, i32 %331] [^b80, i32 %662];
    i32 %492 = phi [^b41, i32 0] [^b80, i32 %664];
    i1 %493 = scmp lt i32 %492, i32 16;
    cbr i1 %493(prob = 0.97), ^while.body29, ^while.header20;
  ^b56:
    i1 %494 = scmp gt i32 %123, i32 32767;
    cbr i1 %494(prob = 0.5), ^if.then33, ^if.else11;
  ^b57:
    i1 %495 = scmp gt i32 %127, i32 32767;
    cbr i1 %495(prob = 0.5), ^if.then34, ^if.else12;
  ^if.then26:
    i32* %496 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %264];
    i32 %497 = load i32* %496;
    i32 %498 = add i32 %265, i32 %497;
    ubr ^b58;
  ^if.then27:
    i32* %499 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %275];
    i32 %500 = load i32* %499;
    i32 %501 = add i32 %278, i32 %500;
    ubr ^b60;
  ^if.then28:
    i32* %502 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %335];
    i32 %503 = load i32* %502;
    i32 %504 = add i32 %336, i32 %503;
    ubr ^b61;
  ^b58:
    i32 %505 = phi [^if.then24, i32 %265] [^if.else9, i32 %265] [^if.then26, i32 %498];
    i32 %506 = sdiv i32 %267, i32 2;
    i32 %507 = sdiv i32 %266, i32 2;
    i32 %508 = add i32 %264, i32 1;
    ubr ^while.header29;
  ^if.then29:
    i32* %509 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %360];
    i32 %510 = load i32* %509;
    i32 %511 = add i32 %357, i32 %510;
    ubr ^b63;
  ^if.then30:
    i32* %512 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %365];
    i32 %513 = load i32* %512;
    i32 %514 = add i32 %364, i32 %513;
    ubr ^b64;
  ^if.then31:
    i32* %515 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %370];
    i32 %516 = load i32* %515;
    i32 %517 = add i32 %367, i32 %516;
    ubr ^b65;
  ^b59:
    i32 %518 = phi [^if.then22, i32 %418] [^if.else7, i32 %438];
    ubr ^while.header8;
  ^b60:
    i32 %519 = phi [^if.then25, i32 %278] [^if.else10, i32 %278] [^if.then27, i32 %501];
    i32 %520 = sdiv i32 %277, i32 2;
    i32 %521 = sdiv i32 %276, i32 2;
    i32 %522 = add i32 %275, i32 1;
    ubr ^while.header31;
  ^b61:
    i32 %523 = phi [^while.body17, i32 %336] [^if.then28, i32 %504];
    i32 %524 = sdiv i32 %338, i32 2;
    i32 %525 = sdiv i32 %337, i32 2;
    i32 %526 = add i32 %335, i32 1;
    ubr ^while.header37;
  ^b62:
    i32 %527 = phi [^if.then23, i32 %423] [^if.else8, i32 %444];
    ubr ^while.header10;
  ^if.then32:
    i32* %528 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %381];
    i32 %529 = load i32* %528;
    i32 %530 = add i32 %384, i32 %529;
    ubr ^b67;
  ^b63:
    i32 %531 = phi [^while.body20, i32 %357] [^if.then29, i32 %511];
    i32 %532 = sdiv i32 %359, i32 2;
    i32 %533 = sdiv i32 %358, i32 2;
    i32 %534 = add i32 %360, i32 1;
    ubr ^while.header40;
  ^b64:
    i32 %535 = phi [^while.body21, i32 %364] [^if.then30, i32 %514];
    i32 %536 = sdiv i32 %363, i32 2;
    i32 %537 = sdiv i32 %362, i32 2;
    i32 %538 = add i32 %365, i32 1;
    ubr ^while.header41;
  ^b65:
    i32 %539 = phi [^while.body22, i32 %367] [^if.then31, i32 %517];
    i32 %540 = sdiv i32 %369, i32 2;
    i32 %541 = sdiv i32 %368, i32 2;
    i32 %542 = add i32 %370, i32 1;
    ubr ^while.header42;
  ^if.then33:
    i32 %543 = load i32* %1;
    i32 %544 = sdiv i32 %123, i32 %543;
    i32 %545 = add i32 %544, i32 65536;
    i32 %546 = load i32* %15;
    i32 %547 = sub i32 %545, i32 %546;
    ubr ^b74;
  ^b66:
    i32 %548 = phi [^b54, i32 %273] [^while.header55, i32 %584];
    ubr ^while.header64;
  ^if.then34:
    i32 %549 = load i32* %1;
    i32 %550 = sdiv i32 %127, i32 %549;
    i32 %551 = add i32 %550, i32 65536;
    i32 %552 = load i32* %15;
    i32 %553 = sub i32 %551, i32 %552;
    ubr ^b75;
  ^if.then35:
    i32 %554 = and i32 %343, i32 1;
    i1 %555 = scmp eq i32 %554, i32 0;
    cbr i1 %555(prob = 0.5), ^if.then37, ^b72;
  ^if.then36:
    i32 %556 = and i32 %349, i32 1;
    i1 %557 = scmp eq i32 %556, i32 0;
    cbr i1 %557(prob = 0.5), ^if.then38, ^b73;
  ^b67:
    i32 %558 = phi [^while.body23, i32 %384] [^if.then32, i32 %530];
    i32 %559 = sdiv i32 %383, i32 2;
    i32 %560 = sdiv i32 %382, i32 2;
    i32 %561 = add i32 %381, i32 1;
    ubr ^while.header45;
  ^b68:
    i32 %562 = phi [^b55, i32 %287] [^while.header56, i32 %595];
    ubr ^while.header65;
  ^b69:
    i32 %563 = load i32* %1;
    i32 %564 = mul i32 %475, i32 %563;
    ubr ^while.header67;
  ^b70:
    i32 %565 = load i32* %1;
    i32 %566 = mul i32 %478, i32 %565;
    ubr ^while.header68;
  ^while.header53:
    i32 %567 = phi [^while.header46, i32 %453] [^b91, i32 %812];
    i32 %568 = phi [^while.header46, i32 %452] [^b91, i32 %811];
    i32 %569 = phi [^while.header46, i32 0] [^b91, i32 %810];
    i32 %570 = phi [^while.header46, i32 0] [^b91, i32 %813];
    i1 %571 = scmp lt i32 %570, i32 16;
    cbr i1 %571(prob = 0.97), ^while.body30, ^while.header62;
  ^if.else11:
    i32 %572 = load i32* %1;
    i32 %573 = sdiv i32 %123, i32 %572;
    ubr ^b74;
  ^while.body24:
    i1 %574 = ztrunc i32 %463 to i1;
    cbr i1 %574(prob = 0.5), ^if.then44, ^if.else15;
  ^if.else12:
    i32 %575 = load i32* %1;
    i32 %576 = sdiv i32 %127, i32 %575;
    ubr ^b75;
  ^while.body25:
    i32 %577 = and i32 %468, i32 %469;
    i1 %578 = ztrunc i32 %577 to i1;
    cbr i1 %578(prob = 0.5), ^if.then39, ^b76;
  ^if.else13:
    i1 %579 = ztrunc i32 %343 to i1;
    cbr i1 %579(prob = 0.5), ^if.then37, ^b72;
  ^if.else14:
    i1 %580 = ztrunc i32 %349 to i1;
    cbr i1 %580(prob = 0.5), ^if.then38, ^b73;
  ^while.header54:
    i32 %581 = phi [^b49, i32 %200] [^while.header82, i32 %673];
    i32 %582 = phi [^b49, i32 %200] [^while.header82, i32 %980];
    i1 %583 = scmp neq i32 %582, i32 0;
    cbr i1 %583(prob = 0.97), ^while.header60, ^b83;
  ^while.header55:
    i32 %584 = phi [^b54, i32 %273] [^while.header83, i32 %678];
    i32 %585 = phi [^b54, i32 %271] [^while.header83, i32 %987];
    i1 %586 = scmp neq i32 %585, i32 0;
    cbr i1 %586(prob = 0.97), ^while.header61, ^b66;
  ^while.body26:
    i32 %587 = and i32 %473, i32 %474;
    i1 %588 = ztrunc i32 %587 to i1;
    cbr i1 %588(prob = 0.5), ^if.then40, ^b77;
  ^while.body27:
    i32 %589 = and i32 %479, i32 %480;
    i1 %590 = ztrunc i32 %589 to i1;
    cbr i1 %590(prob = 0.5), ^if.then41, ^b78;
  ^while.body28:
    i32 %591 = and i32 %484, i32 %485;
    i1 %592 = ztrunc i32 %591 to i1;
    cbr i1 %592(prob = 0.5), ^if.then42, ^b79;
  ^while.body29:
    i32 %593 = and i32 %490, i32 %491;
    i1 %594 = ztrunc i32 %593 to i1;
    cbr i1 %594(prob = 0.5), ^if.then43, ^b80;
  ^while.header56:
    i32 %595 = phi [^b55, i32 %287] [^while.header84, i32 %688];
    i32 %596 = phi [^b55, i32 %286] [^while.header84, i32 %994];
    i1 %597 = scmp neq i32 %596, i32 0;
    cbr i1 %597(prob = 0.97), ^while.header63, ^b68;
  ^while.header57:
    i32 %598 = phi [^b52, i32 0] [^b85, i32 %741];
    i32 %599 = phi [^b52, i32 65535] [^b85, i32 %743];
    i32 %600 = phi [^b52, i32 %436] [^b85, i32 %742];
    i32 %601 = phi [^b52, i32 0] [^b85, i32 %744];
    i1 %602 = scmp lt i32 %601, i32 16;
    cbr i1 %602(prob = 0.97), ^while.body31, ^while.header25;
  ^while.header58:
    i32 %603 = phi [^while.header47, i32 0] [^b87, i32 %747];
    i32 %604 = phi [^while.header47, i32 %372] [^b87, i32 %749];
    i32 %605 = phi [^while.header47, i32 %373] [^b87, i32 %748];
    i32 %606 = phi [^while.header47, i32 0] [^b87, i32 %750];
    i1 %607 = scmp lt i32 %606, i32 16;
    cbr i1 %607(prob = 0.97), ^while.body32, ^b82;
  ^b71:
    i1 %608 = scmp neq i32 %470, i32 0;
    cbr i1 %608(prob = 0.5), ^while.header66, ^b81;
  ^while.header59:
    i32 %609 = phi [^b53, i32 0] [^b88, i32 %751];
    i32 %610 = phi [^b53, i32 65535] [^b88, i32 %753];
    i32 %611 = phi [^b53, i32 %448] [^b88, i32 %752];
    i32 %612 = phi [^b53, i32 0] [^b88, i32 %754];
    i1 %613 = scmp lt i32 %612, i32 16;
    cbr i1 %613(prob = 0.97), ^while.body33, ^while.header27;
  ^if.then37:
    i32* %614 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %342];
    i32 %615 = load i32* %614;
    i32 %616 = add i32 %345, i32 %615;
    ubr ^b72;
  ^if.then38:
    i32* %617 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %347];
    i32 %618 = load i32* %617;
    i32 %619 = add i32 %348, i32 %618;
    ubr ^b73;
  ^b72:
    i32 %620 = phi [^if.then35, i32 %345] [^if.else13, i32 %345] [^if.then37, i32 %616];
    i32 %621 = sdiv i32 %344, i32 2;
    i32 %622 = sdiv i32 %343, i32 2;
    i32 %623 = add i32 %342, i32 1;
    ubr ^while.header38;
  ^b73:
    i32 %624 = phi [^if.then36, i32 %348] [^if.else14, i32 %348] [^if.then38, i32 %619];
    i32 %625 = sdiv i32 %350, i32 2;
    i32 %626 = sdiv i32 %349, i32 2;
    i32 %627 = add i32 %347, i32 1;
    ubr ^while.header39;
  ^if.then39:
    i32* %628 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %471];
    i32 %629 = load i32* %628;
    i32 %630 = add i32 %470, i32 %629;
    ubr ^b76;
  ^if.then40:
    i32* %631 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %476];
    i32 %632 = load i32* %631;
    i32 %633 = add i32 %475, i32 %632;
    ubr ^b77;
  ^if.then41:
    i32* %634 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %481];
    i32 %635 = load i32* %634;
    i32 %636 = add i32 %478, i32 %635;
    ubr ^b78;
  ^if.then42:
    i32* %637 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %487];
    i32 %638 = load i32* %637;
    i32 %639 = add i32 %486, i32 %638;
    ubr ^b79;
  ^if.then43:
    i32* %640 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %492];
    i32 %641 = load i32* %640;
    i32 %642 = add i32 %489, i32 %641;
    ubr ^b80;
  ^b74:
    i32 %643 = phi [^if.then33, i32 %547] [^if.else11, i32 %573];
    ubr ^while.header15;
  ^b75:
    i32 %644 = phi [^if.then34, i32 %553] [^if.else12, i32 %576];
    ubr ^while.header16;
  ^b76:
    i32 %645 = phi [^while.body25, i32 %470] [^if.then39, i32 %630];
    i32 %646 = sdiv i32 %469, i32 2;
    i32 %647 = sdiv i32 %468, i32 2;
    i32 %648 = add i32 %471, i32 1;
    ubr ^while.header48;
  ^b77:
    i32 %649 = phi [^while.body26, i32 %475] [^if.then40, i32 %633];
    i32 %650 = sdiv i32 %474, i32 2;
    i32 %651 = sdiv i32 %473, i32 2;
    i32 %652 = add i32 %476, i32 1;
    ubr ^while.header49;
  ^b78:
    i32 %653 = phi [^while.body27, i32 %478] [^if.then41, i32 %636];
    i32 %654 = sdiv i32 %480, i32 2;
    i32 %655 = sdiv i32 %479, i32 2;
    i32 %656 = add i32 %481, i32 1;
    ubr ^while.header50;
  ^b79:
    i32 %657 = phi [^while.body28, i32 %486] [^if.then42, i32 %639];
    i32 %658 = sdiv i32 %485, i32 2;
    i32 %659 = sdiv i32 %484, i32 2;
    i32 %660 = add i32 %487, i32 1;
    ubr ^while.header51;
  ^b80:
    i32 %661 = phi [^while.body29, i32 %489] [^if.then43, i32 %642];
    i32 %662 = sdiv i32 %491, i32 2;
    i32 %663 = sdiv i32 %490, i32 2;
    i32 %664 = add i32 %492, i32 1;
    ubr ^while.header52;
  ^while.body30:
    i1 %665 = ztrunc i32 %568 to i1;
    cbr i1 %665(prob = 0.5), ^if.then50, ^if.else17;
  ^if.then44:
    i32 %666 = and i32 %462, i32 1;
    i1 %667 = scmp eq i32 %666, i32 0;
    cbr i1 %667(prob = 0.5), ^if.then45, ^b84;
  ^b81:
    i32 %668 = phi [^b71, i32 %379] [^while.header66, i32 %705];
    ubr ^while.header75;
  ^b82:
    i32 %669 = load i32* %1;
    i32 %670 = mul i32 %603, i32 %669;
    ubr ^while.header76;
  ^while.header60:
    i32 %671 = phi [^while.header54, i32 %582] [^b100, i32 %913];
    i32 %672 = phi [^while.header54, i32 %581] [^b100, i32 %912];
    i32 %673 = phi [^while.header54, i32 0] [^b100, i32 %911];
    i32 %674 = phi [^while.header54, i32 0] [^b100, i32 %914];
    i1 %675 = scmp lt i32 %674, i32 16;
    cbr i1 %675(prob = 0.97), ^while.body34, ^while.header70;
  ^while.header61:
    i32 %676 = phi [^while.header55, i32 %585] [^b101, i32 %917];
    i32 %677 = phi [^while.header55, i32 %584] [^b101, i32 %916];
    i32 %678 = phi [^while.header55, i32 0] [^b101, i32 %915];
    i32 %679 = phi [^while.header55, i32 0] [^b101, i32 %918];
    i1 %680 = scmp lt i32 %679, i32 16;
    cbr i1 %680(prob = 0.97), ^while.body35, ^while.header71;
  ^while.body31:
    i32 %681 = and i32 %599, i32 %600;
    i1 %682 = ztrunc i32 %681 to i1;
    cbr i1 %682(prob = 0.5), ^if.then46, ^b85;
  ^while.header62:
    i32 %683 = phi [^while.header53, i32 %453] [^b93, i32 %826];
    i32 %684 = phi [^while.header53, i32 %452] [^b93, i32 %825];
    i32 %685 = phi [^while.header53, i32 0] [^b93, i32 %824];
    i32 %686 = phi [^while.header53, i32 0] [^b93, i32 %827];
    i1 %687 = scmp lt i32 %686, i32 16;
    cbr i1 %687(prob = 0.97), ^while.body36, ^b86;
  ^while.header63:
    i32 %688 = phi [^while.header56, i32 0] [^b102, i32 %925];
    i32 %689 = phi [^while.header56, i32 %596] [^b102, i32 %927];
    i32 %690 = phi [^while.header56, i32 %595] [^b102, i32 %926];
    i32 %691 = phi [^while.header56, i32 0] [^b102, i32 %928];
    i1 %692 = scmp lt i32 %691, i32 16;
    cbr i1 %692(prob = 0.97), ^while.body37, ^while.header74;
  ^if.else15:
    i1 %693 = ztrunc i32 %462 to i1;
    cbr i1 %693(prob = 0.5), ^if.then45, ^b84;
  ^while.header64:
    i32 %694 = phi [^b66, i32 %271] [^while.header86, i32 %763];
    i32 %695 = phi [^b66, i32 %271] [^while.header86, i32 %1065];
    i1 %696 = scmp neq i32 %695, i32 0;
    cbr i1 %696(prob = 0.97), ^while.header69, ^b89;
  ^while.body32:
    i32 %697 = and i32 %604, i32 %605;
    i1 %698 = ztrunc i32 %697 to i1;
    cbr i1 %698(prob = 0.5), ^if.then47, ^b87;
  ^while.body33:
    i32 %699 = and i32 %610, i32 %611;
    i1 %700 = ztrunc i32 %699 to i1;
    cbr i1 %700(prob = 0.5), ^if.then48, ^b88;
  ^b83:
    i1 %701 = scmp gt i32 %202, i32 32767;
    cbr i1 %701(prob = 0.5), ^if.then49, ^if.else16;
  ^while.header65:
    i32 %702 = phi [^b68, i32 %286] [^while.header87, i32 %782];
    i32 %703 = phi [^b68, i32 %286] [^while.header87, i32 %1072];
    i1 %704 = scmp neq i32 %703, i32 0;
    cbr i1 %704(prob = 0.97), ^while.header72, ^b90;
  ^while.header66:
    i32 %705 = phi [^b71, i32 %379] [^while.header88, i32 %789];
    i32 %706 = phi [^b71, i32 %377] [^while.header88, i32 %1077];
    i1 %707 = scmp neq i32 %706, i32 0;
    cbr i1 %707(prob = 0.97), ^while.header73, ^b81;
  ^while.header67:
    i32 %708 = phi [^b69, i32 0] [^b94, i32 %837];
    i32 %709 = phi [^b69, i32 65535] [^b94, i32 %839];
    i32 %710 = phi [^b69, i32 %564] [^b94, i32 %838];
    i32 %711 = phi [^b69, i32 0] [^b94, i32 %840];
    i1 %712 = scmp lt i32 %711, i32 16;
    cbr i1 %712(prob = 0.97), ^while.body38, ^while.header32;
  ^while.header68:
    i32 %713 = phi [^b70, i32 0] [^b95, i32 %841];
    i32 %714 = phi [^b70, i32 65535] [^b95, i32 %843];
    i32 %715 = phi [^b70, i32 %566] [^b95, i32 %842];
    i32 %716 = phi [^b70, i32 0] [^b95, i32 %844];
    i1 %717 = scmp lt i32 %716, i32 16;
    cbr i1 %717(prob = 0.97), ^while.body39, ^while.header33;
  ^if.then45:
    i32* %718 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %460];
    i32 %719 = load i32* %718;
    i32 %720 = add i32 %461, i32 %719;
    ubr ^b84;
  ^if.then46:
    i32* %721 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %601];
    i32 %722 = load i32* %721;
    i32 %723 = add i32 %598, i32 %722;
    ubr ^b85;
  ^b84:
    i32 %724 = phi [^if.then44, i32 %461] [^if.else15, i32 %461] [^if.then45, i32 %720];
    i32 %725 = sdiv i32 %463, i32 2;
    i32 %726 = sdiv i32 %462, i32 2;
    i32 %727 = add i32 %460, i32 1;
    ubr ^while.header47;
  ^if.then47:
    i32* %728 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %606];
    i32 %729 = load i32* %728;
    i32 %730 = add i32 %603, i32 %729;
    ubr ^b87;
  ^if.then48:
    i32* %731 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %612];
    i32 %732 = load i32* %731;
    i32 %733 = add i32 %609, i32 %732;
    ubr ^b88;
  ^if.then49:
    i32 %734 = load i32* %1;
    i32 %735 = sdiv i32 %202, i32 %734;
    i32 %736 = add i32 %735, i32 65536;
    i32 %737 = load i32* %15;
    i32 %738 = sub i32 %736, i32 %737;
    ubr ^b92;
  ^if.then50:
    i32 %739 = and i32 %567, i32 1;
    i1 %740 = scmp eq i32 %739, i32 0;
    cbr i1 %740(prob = 0.5), ^if.then51, ^b91;
  ^b85:
    i32 %741 = phi [^while.body31, i32 %598] [^if.then46, i32 %723];
    i32 %742 = sdiv i32 %600, i32 2;
    i32 %743 = sdiv i32 %599, i32 2;
    i32 %744 = add i32 %601, i32 1;
    ubr ^while.header57;
  ^b86:
    i32 %745 = load i32* %1;
    i32 %746 = mul i32 %685, i32 %745;
    ubr ^while.header77;
  ^b87:
    i32 %747 = phi [^while.body32, i32 %603] [^if.then47, i32 %730];
    i32 %748 = sdiv i32 %605, i32 2;
    i32 %749 = sdiv i32 %604, i32 2;
    i32 %750 = add i32 %606, i32 1;
    ubr ^while.header58;
  ^b88:
    i32 %751 = phi [^while.body33, i32 %609] [^if.then48, i32 %733];
    i32 %752 = sdiv i32 %611, i32 2;
    i32 %753 = sdiv i32 %610, i32 2;
    i32 %754 = add i32 %612, i32 1;
    ubr ^while.header59;
  ^if.else16:
    i32 %755 = load i32* %1;
    i32 %756 = sdiv i32 %202, i32 %755;
    ubr ^b92;
  ^while.body34:
    i1 %757 = ztrunc i32 %672 to i1;
    cbr i1 %757(prob = 0.5), ^if.then56, ^if.else19;
  ^while.body35:
    i1 %758 = ztrunc i32 %677 to i1;
    cbr i1 %758(prob = 0.5), ^if.then57, ^if.else20;
  ^if.else17:
    i1 %759 = ztrunc i32 %567 to i1;
    cbr i1 %759(prob = 0.5), ^if.then51, ^b91;
  ^while.body36:
    i32 %760 = and i32 %683, i32 %684;
    i1 %761 = ztrunc i32 %760 to i1;
    cbr i1 %761(prob = 0.5), ^if.then52, ^b93;
  ^while.body37:
    i1 %762 = ztrunc i32 %690 to i1;
    cbr i1 %762(prob = 0.5), ^if.then59, ^if.else22;
  ^while.header69:
    i32 %763 = phi [^while.header64, i32 0] [^b112, i32 %1016];
    i32 %764 = phi [^while.header64, i32 %695] [^b112, i32 %1018];
    i32 %765 = phi [^while.header64, i32 %694] [^b112, i32 %1017];
    i32 %766 = phi [^while.header64, i32 0] [^b112, i32 %1019];
    i1 %767 = scmp lt i32 %766, i32 16;
    cbr i1 %767(prob = 0.97), ^while.body40, ^while.header78;
  ^while.body38:
    i32 %768 = and i32 %709, i32 %710;
    i1 %769 = ztrunc i32 %768 to i1;
    cbr i1 %769(prob = 0.5), ^if.then53, ^b94;
  ^while.body39:
    i32 %770 = and i32 %714, i32 %715;
    i1 %771 = ztrunc i32 %770 to i1;
    cbr i1 %771(prob = 0.5), ^if.then54, ^b95;
  ^while.header70:
    i32 %772 = phi [^while.header60, i32 0] [^b105, i32 %937];
    i32 %773 = phi [^while.header60, i32 %582] [^b105, i32 %939];
    i32 %774 = phi [^while.header60, i32 %581] [^b105, i32 %938];
    i32 %775 = phi [^while.header60, i32 0] [^b105, i32 %940];
    i1 %776 = scmp lt i32 %775, i32 16;
    cbr i1 %776(prob = 0.97), ^while.body41, ^b96;
  ^while.header71:
    i32 %777 = phi [^while.header61, i32 %585] [^b106, i32 %943];
    i32 %778 = phi [^while.header61, i32 %584] [^b106, i32 %942];
    i32 %779 = phi [^while.header61, i32 0] [^b106, i32 %941];
    i32 %780 = phi [^while.header61, i32 0] [^b106, i32 %944];
    i1 %781 = scmp lt i32 %780, i32 16;
    cbr i1 %781(prob = 0.97), ^while.body42, ^b97;
  ^while.header72:
    i32 %782 = phi [^while.header65, i32 0] [^b113, i32 %1023];
    i32 %783 = phi [^while.header65, i32 %703] [^b113, i32 %1025];
    i32 %784 = phi [^while.header65, i32 %702] [^b113, i32 %1024];
    i32 %785 = phi [^while.header65, i32 0] [^b113, i32 %1026];
    i1 %786 = scmp lt i32 %785, i32 16;
    cbr i1 %786(prob = 0.97), ^while.body43, ^while.header80;
  ^while.header73:
    i32 %787 = phi [^while.header66, i32 %706] [^b114, i32 %1029];
    i32 %788 = phi [^while.header66, i32 %705] [^b114, i32 %1028];
    i32 %789 = phi [^while.header66, i32 0] [^b114, i32 %1027];
    i32 %790 = phi [^while.header66, i32 0] [^b114, i32 %1030];
    i1 %791 = scmp lt i32 %790, i32 16;
    cbr i1 %791(prob = 0.97), ^while.body44, ^while.header81;
  ^while.header74:
    i32 %792 = phi [^while.header63, i32 0] [^b107, i32 %945];
    i32 %793 = phi [^while.header63, i32 %596] [^b107, i32 %947];
    i32 %794 = phi [^while.header63, i32 %595] [^b107, i32 %946];
    i32 %795 = phi [^while.header63, i32 0] [^b107, i32 %948];
    i1 %796 = scmp lt i32 %795, i32 16;
    cbr i1 %796(prob = 0.97), ^while.body45, ^b98;
  ^b89:
    i1 %797 = scmp gt i32 %272, i32 32767;
    cbr i1 %797(prob = 0.5), ^if.then55, ^if.else18;
  ^while.header75:
    i32 %798 = phi [^b81, i32 %377] [^while.header89, i32 %886];
    i32 %799 = phi [^b81, i32 %377] [^while.header89, i32 %1123];
    i1 %800 = scmp neq i32 %799, i32 0;
    cbr i1 %800(prob = 0.97), ^while.header79, ^b99;
  ^while.header76:
    i32 %801 = phi [^b82, i32 0] [^b108, i32 %951];
    i32 %802 = phi [^b82, i32 65535] [^b108, i32 %953];
    i32 %803 = phi [^b82, i32 %670] [^b108, i32 %952];
    i32 %804 = phi [^b82, i32 0] [^b108, i32 %954];
    i1 %805 = scmp lt i32 %804, i32 16;
    cbr i1 %805(prob = 0.97), ^while.body46, ^while.header43;
  ^b90:
    i1 %806 = scmp gt i32 %288, i32 32767;
    cbr i1 %806(prob = 0.5), ^if.then58, ^if.else21;
  ^if.then51:
    i32* %807 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %570];
    i32 %808 = load i32* %807;
    i32 %809 = add i32 %569, i32 %808;
    ubr ^b91;
  ^b91:
    i32 %810 = phi [^if.then50, i32 %569] [^if.else17, i32 %569] [^if.then51, i32 %809];
    i32 %811 = sdiv i32 %568, i32 2;
    i32 %812 = sdiv i32 %567, i32 2;
    i32 %813 = add i32 %570, i32 1;
    ubr ^while.header53;
  ^if.then52:
    i32* %814 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %686];
    i32 %815 = load i32* %814;
    i32 %816 = add i32 %685, i32 %815;
    ubr ^b93;
  ^b92:
    i32 %817 = phi [^if.then49, i32 %738] [^if.else16, i32 %756];
    ubr ^while.header22;
  ^if.then53:
    i32* %818 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %711];
    i32 %819 = load i32* %818;
    i32 %820 = add i32 %708, i32 %819;
    ubr ^b94;
  ^if.then54:
    i32* %821 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %716];
    i32 %822 = load i32* %821;
    i32 %823 = add i32 %713, i32 %822;
    ubr ^b95;
  ^b93:
    i32 %824 = phi [^while.body36, i32 %685] [^if.then52, i32 %816];
    i32 %825 = sdiv i32 %684, i32 2;
    i32 %826 = sdiv i32 %683, i32 2;
    i32 %827 = add i32 %686, i32 1;
    ubr ^while.header62;
  ^if.then55:
    i32 %828 = load i32* %1;
    i32 %829 = sdiv i32 %272, i32 %828;
    i32 %830 = add i32 %829, i32 65536;
    i32 %831 = load i32* %15;
    i32 %832 = sub i32 %830, i32 %831;
    ubr ^b103;
  ^if.then56:
    i32 %833 = and i32 %671, i32 1;
    i1 %834 = scmp eq i32 %833, i32 0;
    cbr i1 %834(prob = 0.5), ^if.then60, ^b100;
  ^if.then57:
    i32 %835 = and i32 %676, i32 1;
    i1 %836 = scmp eq i32 %835, i32 0;
    cbr i1 %836(prob = 0.5), ^if.then61, ^b101;
  ^b94:
    i32 %837 = phi [^while.body38, i32 %708] [^if.then53, i32 %820];
    i32 %838 = sdiv i32 %710, i32 2;
    i32 %839 = sdiv i32 %709, i32 2;
    i32 %840 = add i32 %711, i32 1;
    ubr ^while.header67;
  ^b95:
    i32 %841 = phi [^while.body39, i32 %713] [^if.then54, i32 %823];
    i32 %842 = sdiv i32 %715, i32 2;
    i32 %843 = sdiv i32 %714, i32 2;
    i32 %844 = add i32 %716, i32 1;
    ubr ^while.header68;
  ^if.then58:
    i32 %845 = load i32* %1;
    i32 %846 = sdiv i32 %288, i32 %845;
    i32 %847 = add i32 %846, i32 65536;
    i32 %848 = load i32* %15;
    i32 %849 = sub i32 %847, i32 %848;
    ubr ^b104;
  ^b96:
    i32 %850 = load i32* %1;
    i32 %851 = mul i32 %772, i32 %850;
    ubr ^while.header82;
  ^b97:
    i32 %852 = load i32* %1;
    i32 %853 = mul i32 %779, i32 %852;
    ubr ^while.header83;
  ^if.then59:
    i32 %854 = and i32 %689, i32 1;
    i1 %855 = scmp eq i32 %854, i32 0;
    cbr i1 %855(prob = 0.5), ^if.then62, ^b102;
  ^b98:
    i32 %856 = load i32* %1;
    i32 %857 = mul i32 %792, i32 %856;
    ubr ^while.header84;
  ^if.else18:
    i32 %858 = load i32* %1;
    i32 %859 = sdiv i32 %272, i32 %858;
    ubr ^b103;
  ^while.body40:
    i1 %860 = ztrunc i32 %765 to i1;
    cbr i1 %860(prob = 0.5), ^if.then67, ^if.else23;
  ^if.else19:
    i1 %861 = ztrunc i32 %671 to i1;
    cbr i1 %861(prob = 0.5), ^if.then60, ^b100;
  ^if.else20:
    i1 %862 = ztrunc i32 %676 to i1;
    cbr i1 %862(prob = 0.5), ^if.then61, ^b101;
  ^if.else21:
    i32 %863 = load i32* %1;
    i32 %864 = sdiv i32 %288, i32 %863;
    ubr ^b104;
  ^while.body41:
    i32 %865 = and i32 %773, i32 %774;
    i1 %866 = ztrunc i32 %865 to i1;
    cbr i1 %866(prob = 0.5), ^if.then63, ^b105;
  ^while.body42:
    i32 %867 = and i32 %777, i32 %778;
    i1 %868 = ztrunc i32 %867 to i1;
    cbr i1 %868(prob = 0.5), ^if.then64, ^b106;
  ^while.body43:
    i1 %869 = ztrunc i32 %784 to i1;
    cbr i1 %869(prob = 0.5), ^if.then69, ^if.else25;
  ^while.body44:
    i1 %870 = ztrunc i32 %788 to i1;
    cbr i1 %870(prob = 0.5), ^if.then70, ^if.else26;
  ^if.else22:
    i1 %871 = ztrunc i32 %689 to i1;
    cbr i1 %871(prob = 0.5), ^if.then62, ^b102;
  ^while.header77:
    i32 %872 = phi [^b86, i32 65535] [^b115, i32 %1039];
    i32 %873 = phi [^b86, i32 %746] [^b115, i32 %1038];
    i32 %874 = phi [^b86, i32 0] [^b115, i32 %1037];
    i32 %875 = phi [^b86, i32 0] [^b115, i32 %1040];
    i1 %876 = scmp lt i32 %875, i32 16;
    cbr i1 %876(prob = 0.97), ^while.body47, ^while.header46;
  ^while.body45:
    i32 %877 = and i32 %793, i32 %794;
    i1 %878 = ztrunc i32 %877 to i1;
    cbr i1 %878(prob = 0.5), ^if.then65, ^b107;
  ^while.body46:
    i32 %879 = and i32 %802, i32 %803;
    i1 %880 = ztrunc i32 %879 to i1;
    cbr i1 %880(prob = 0.5), ^if.then66, ^b108;
  ^while.header78:
    i32 %881 = phi [^while.header69, i32 0] [^b117, i32 %1042];
    i32 %882 = phi [^while.header69, i32 %695] [^b117, i32 %1044];
    i32 %883 = phi [^while.header69, i32 %694] [^b117, i32 %1043];
    i32 %884 = phi [^while.header69, i32 0] [^b117, i32 %1045];
    i1 %885 = scmp lt i32 %884, i32 16;
    cbr i1 %885(prob = 0.97), ^while.body48, ^b109;
  ^while.header79:
    i32 %886 = phi [^while.header75, i32 0] [^b121, i32 %1094];
    i32 %887 = phi [^while.header75, i32 %799] [^b121, i32 %1096];
    i32 %888 = phi [^while.header75, i32 %798] [^b121, i32 %1095];
    i32 %889 = phi [^while.header75, i32 0] [^b121, i32 %1097];
    i1 %890 = scmp lt i32 %889, i32 16;
    cbr i1 %890(prob = 0.97), ^while.body49, ^while.header85;
  ^while.header80:
    i32 %891 = phi [^while.header72, i32 0] [^b118, i32 %1046];
    i32 %892 = phi [^while.header72, i32 %703] [^b118, i32 %1048];
    i32 %893 = phi [^while.header72, i32 %702] [^b118, i32 %1047];
    i32 %894 = phi [^while.header72, i32 0] [^b118, i32 %1049];
    i1 %895 = scmp lt i32 %894, i32 16;
    cbr i1 %895(prob = 0.97), ^while.body50, ^b110;
  ^while.header81:
    i32 %896 = phi [^while.header73, i32 %706] [^b119, i32 %1052];
    i32 %897 = phi [^while.header73, i32 %705] [^b119, i32 %1051];
    i32 %898 = phi [^while.header73, i32 0] [^b119, i32 %1050];
    i32 %899 = phi [^while.header73, i32 0] [^b119, i32 %1053];
    i1 %900 = scmp lt i32 %899, i32 16;
    cbr i1 %900(prob = 0.97), ^while.body51, ^b111;
  ^b99:
    i1 %901 = scmp gt i32 %378, i32 32767;
    cbr i1 %901(prob = 0.5), ^if.then68, ^if.else24;
  ^if.then60:
    i32* %902 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %674];
    i32 %903 = load i32* %902;
    i32 %904 = add i32 %673, i32 %903;
    ubr ^b100;
  ^if.then61:
    i32* %905 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %679];
    i32 %906 = load i32* %905;
    i32 %907 = add i32 %678, i32 %906;
    ubr ^b101;
  ^if.then62:
    i32* %908 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %691];
    i32 %909 = load i32* %908;
    i32 %910 = add i32 %688, i32 %909;
    ubr ^b102;
  ^b100:
    i32 %911 = phi [^if.then56, i32 %673] [^if.else19, i32 %673] [^if.then60, i32 %904];
    i32 %912 = sdiv i32 %672, i32 2;
    i32 %913 = sdiv i32 %671, i32 2;
    i32 %914 = add i32 %674, i32 1;
    ubr ^while.header60;
  ^b101:
    i32 %915 = phi [^if.then57, i32 %678] [^if.else20, i32 %678] [^if.then61, i32 %907];
    i32 %916 = sdiv i32 %677, i32 2;
    i32 %917 = sdiv i32 %676, i32 2;
    i32 %918 = add i32 %679, i32 1;
    ubr ^while.header61;
  ^if.then63:
    i32* %919 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %775];
    i32 %920 = load i32* %919;
    i32 %921 = add i32 %772, i32 %920;
    ubr ^b105;
  ^if.then64:
    i32* %922 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %780];
    i32 %923 = load i32* %922;
    i32 %924 = add i32 %779, i32 %923;
    ubr ^b106;
  ^b102:
    i32 %925 = phi [^if.then59, i32 %688] [^if.else22, i32 %688] [^if.then62, i32 %910];
    i32 %926 = sdiv i32 %690, i32 2;
    i32 %927 = sdiv i32 %689, i32 2;
    i32 %928 = add i32 %691, i32 1;
    ubr ^while.header63;
  ^if.then65:
    i32* %929 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %795];
    i32 %930 = load i32* %929;
    i32 %931 = add i32 %792, i32 %930;
    ubr ^b107;
  ^b103:
    i32 %932 = phi [^if.then55, i32 %832] [^if.else18, i32 %859];
    ubr ^while.header30;
  ^if.then66:
    i32* %933 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %804];
    i32 %934 = load i32* %933;
    i32 %935 = add i32 %801, i32 %934;
    ubr ^b108;
  ^b104:
    i32 %936 = phi [^if.then58, i32 %849] [^if.else21, i32 %864];
    ubr ^while.header34;
  ^b105:
    i32 %937 = phi [^while.body41, i32 %772] [^if.then63, i32 %921];
    i32 %938 = sdiv i32 %774, i32 2;
    i32 %939 = sdiv i32 %773, i32 2;
    i32 %940 = add i32 %775, i32 1;
    ubr ^while.header70;
  ^b106:
    i32 %941 = phi [^while.body42, i32 %779] [^if.then64, i32 %924];
    i32 %942 = sdiv i32 %778, i32 2;
    i32 %943 = sdiv i32 %777, i32 2;
    i32 %944 = add i32 %780, i32 1;
    ubr ^while.header71;
  ^b107:
    i32 %945 = phi [^while.body45, i32 %792] [^if.then65, i32 %931];
    i32 %946 = sdiv i32 %794, i32 2;
    i32 %947 = sdiv i32 %793, i32 2;
    i32 %948 = add i32 %795, i32 1;
    ubr ^while.header74;
  ^if.then67:
    i32 %949 = and i32 %764, i32 1;
    i1 %950 = scmp eq i32 %949, i32 0;
    cbr i1 %950(prob = 0.5), ^if.then71, ^b112;
  ^b108:
    i32 %951 = phi [^while.body46, i32 %801] [^if.then66, i32 %935];
    i32 %952 = sdiv i32 %803, i32 2;
    i32 %953 = sdiv i32 %802, i32 2;
    i32 %954 = add i32 %804, i32 1;
    ubr ^while.header76;
  ^if.then68:
    i32 %955 = load i32* %1;
    i32 %956 = sdiv i32 %378, i32 %955;
    i32 %957 = add i32 %956, i32 65536;
    i32 %958 = load i32* %15;
    i32 %959 = sub i32 %957, i32 %958;
    ubr ^b116;
  ^b109:
    i32 %960 = load i32* %1;
    i32 %961 = mul i32 %881, i32 %960;
    ubr ^while.header86;
  ^if.then69:
    i32 %962 = and i32 %783, i32 1;
    i1 %963 = scmp eq i32 %962, i32 0;
    cbr i1 %963(prob = 0.5), ^if.then72, ^b113;
  ^if.then70:
    i32 %964 = and i32 %787, i32 1;
    i1 %965 = scmp eq i32 %964, i32 0;
    cbr i1 %965(prob = 0.5), ^if.then73, ^b114;
  ^while.body47:
    i32 %966 = and i32 %872, i32 %873;
    i1 %967 = ztrunc i32 %966 to i1;
    cbr i1 %967(prob = 0.5), ^if.then74, ^b115;
  ^b110:
    i32 %968 = load i32* %1;
    i32 %969 = mul i32 %891, i32 %968;
    ubr ^while.header87;
  ^b111:
    i32 %970 = load i32* %1;
    i32 %971 = mul i32 %898, i32 %970;
    ubr ^while.header88;
  ^if.else23:
    i1 %972 = ztrunc i32 %764 to i1;
    cbr i1 %972(prob = 0.5), ^if.then71, ^b112;
  ^if.else24:
    i32 %973 = load i32* %1;
    i32 %974 = sdiv i32 %378, i32 %973;
    ubr ^b116;
  ^while.body48:
    i32 %975 = and i32 %882, i32 %883;
    i1 %976 = ztrunc i32 %975 to i1;
    cbr i1 %976(prob = 0.5), ^if.then75, ^b117;
  ^while.body49:
    i1 %977 = ztrunc i32 %888 to i1;
    cbr i1 %977(prob = 0.5), ^if.then78, ^if.else27;
  ^if.else25:
    i1 %978 = ztrunc i32 %783 to i1;
    cbr i1 %978(prob = 0.5), ^if.then72, ^b113;
  ^if.else26:
    i1 %979 = ztrunc i32 %787 to i1;
    cbr i1 %979(prob = 0.5), ^if.then73, ^b114;
  ^while.header82:
    i32 %980 = phi [^b96, i32 0] [^b122, i32 %1101];
    i32 %981 = phi [^b96, i32 65535] [^b122, i32 %1103];
    i32 %982 = phi [^b96, i32 %851] [^b122, i32 %1102];
    i32 %983 = phi [^b96, i32 0] [^b122, i32 %1104];
    i1 %984 = scmp lt i32 %983, i32 16;
    cbr i1 %984(prob = 0.97), ^while.body52, ^while.header54;
  ^while.header83:
    i32 %985 = phi [^b97, i32 65535] [^b123, i32 %1107];
    i32 %986 = phi [^b97, i32 %853] [^b123, i32 %1106];
    i32 %987 = phi [^b97, i32 0] [^b123, i32 %1105];
    i32 %988 = phi [^b97, i32 0] [^b123, i32 %1108];
    i1 %989 = scmp lt i32 %988, i32 16;
    cbr i1 %989(prob = 0.97), ^while.body53, ^while.header55;
  ^while.body50:
    i32 %990 = and i32 %892, i32 %893;
    i1 %991 = ztrunc i32 %990 to i1;
    cbr i1 %991(prob = 0.5), ^if.then76, ^b118;
  ^while.body51:
    i32 %992 = and i32 %896, i32 %897;
    i1 %993 = ztrunc i32 %992 to i1;
    cbr i1 %993(prob = 0.5), ^if.then77, ^b119;
  ^while.header84:
    i32 %994 = phi [^b98, i32 0] [^b124, i32 %1109];
    i32 %995 = phi [^b98, i32 65535] [^b124, i32 %1111];
    i32 %996 = phi [^b98, i32 %857] [^b124, i32 %1110];
    i32 %997 = phi [^b98, i32 0] [^b124, i32 %1112];
    i1 %998 = scmp lt i32 %997, i32 16;
    cbr i1 %998(prob = 0.97), ^while.body54, ^while.header56;
  ^while.header85:
    i32 %999 = phi [^while.header79, i32 %799] [^b125, i32 %1115];
    i32 %1000 = phi [^while.header79, i32 %798] [^b125, i32 %1114];
    i32 %1001 = phi [^while.header79, i32 0] [^b125, i32 %1113];
    i32 %1002 = phi [^while.header79, i32 0] [^b125, i32 %1116];
    i1 %1003 = scmp lt i32 %1002, i32 16;
    cbr i1 %1003(prob = 0.97), ^while.body55, ^b120;
  ^if.then71:
    i32* %1004 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %766];
    i32 %1005 = load i32* %1004;
    i32 %1006 = add i32 %763, i32 %1005;
    ubr ^b112;
  ^if.then72:
    i32* %1007 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %785];
    i32 %1008 = load i32* %1007;
    i32 %1009 = add i32 %782, i32 %1008;
    ubr ^b113;
  ^if.then73:
    i32* %1010 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %790];
    i32 %1011 = load i32* %1010;
    i32 %1012 = add i32 %789, i32 %1011;
    ubr ^b114;
  ^if.then74:
    i32* %1013 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %875];
    i32 %1014 = load i32* %1013;
    i32 %1015 = add i32 %874, i32 %1014;
    ubr ^b115;
  ^b112:
    i32 %1016 = phi [^if.then67, i32 %763] [^if.else23, i32 %763] [^if.then71, i32 %1006];
    i32 %1017 = sdiv i32 %765, i32 2;
    i32 %1018 = sdiv i32 %764, i32 2;
    i32 %1019 = add i32 %766, i32 1;
    ubr ^while.header69;
  ^if.then75:
    i32* %1020 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %884];
    i32 %1021 = load i32* %1020;
    i32 %1022 = add i32 %881, i32 %1021;
    ubr ^b117;
  ^b113:
    i32 %1023 = phi [^if.then69, i32 %782] [^if.else25, i32 %782] [^if.then72, i32 %1009];
    i32 %1024 = sdiv i32 %784, i32 2;
    i32 %1025 = sdiv i32 %783, i32 2;
    i32 %1026 = add i32 %785, i32 1;
    ubr ^while.header72;
  ^b114:
    i32 %1027 = phi [^if.then70, i32 %789] [^if.else26, i32 %789] [^if.then73, i32 %1012];
    i32 %1028 = sdiv i32 %788, i32 2;
    i32 %1029 = sdiv i32 %787, i32 2;
    i32 %1030 = add i32 %790, i32 1;
    ubr ^while.header73;
  ^if.then76:
    i32* %1031 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %894];
    i32 %1032 = load i32* %1031;
    i32 %1033 = add i32 %891, i32 %1032;
    ubr ^b118;
  ^if.then77:
    i32* %1034 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %899];
    i32 %1035 = load i32* %1034;
    i32 %1036 = add i32 %898, i32 %1035;
    ubr ^b119;
  ^b115:
    i32 %1037 = phi [^while.body47, i32 %874] [^if.then74, i32 %1015];
    i32 %1038 = sdiv i32 %873, i32 2;
    i32 %1039 = sdiv i32 %872, i32 2;
    i32 %1040 = add i32 %875, i32 1;
    ubr ^while.header77;
  ^b116:
    i32 %1041 = phi [^if.then68, i32 %959] [^if.else24, i32 %974];
    ubr ^while.header44;
  ^b117:
    i32 %1042 = phi [^while.body48, i32 %881] [^if.then75, i32 %1022];
    i32 %1043 = sdiv i32 %883, i32 2;
    i32 %1044 = sdiv i32 %882, i32 2;
    i32 %1045 = add i32 %884, i32 1;
    ubr ^while.header78;
  ^b118:
    i32 %1046 = phi [^while.body50, i32 %891] [^if.then76, i32 %1033];
    i32 %1047 = sdiv i32 %893, i32 2;
    i32 %1048 = sdiv i32 %892, i32 2;
    i32 %1049 = add i32 %894, i32 1;
    ubr ^while.header80;
  ^b119:
    i32 %1050 = phi [^while.body51, i32 %898] [^if.then77, i32 %1036];
    i32 %1051 = sdiv i32 %897, i32 2;
    i32 %1052 = sdiv i32 %896, i32 2;
    i32 %1053 = add i32 %899, i32 1;
    ubr ^while.header81;
  ^if.then78:
    i32 %1054 = and i32 %887, i32 1;
    i1 %1055 = scmp eq i32 %1054, i32 0;
    cbr i1 %1055(prob = 0.5), ^if.then79, ^b121;
  ^while.body52:
    i32 %1056 = and i32 %981, i32 %982;
    i1 %1057 = ztrunc i32 %1056 to i1;
    cbr i1 %1057(prob = 0.5), ^if.then80, ^b122;
  ^while.body53:
    i32 %1058 = and i32 %985, i32 %986;
    i1 %1059 = ztrunc i32 %1058 to i1;
    cbr i1 %1059(prob = 0.5), ^if.then81, ^b123;
  ^b120:
    i32 %1060 = load i32* %1;
    i32 %1061 = mul i32 %1001, i32 %1060;
    ubr ^while.header89;
  ^while.body54:
    i32 %1062 = and i32 %995, i32 %996;
    i1 %1063 = ztrunc i32 %1062 to i1;
    cbr i1 %1063(prob = 0.5), ^if.then82, ^b124;
  ^if.else27:
    i1 %1064 = ztrunc i32 %887 to i1;
    cbr i1 %1064(prob = 0.5), ^if.then79, ^b121;
  ^while.header86:
    i32 %1065 = phi [^b109, i32 0] [^b126, i32 %1137];
    i32 %1066 = phi [^b109, i32 65535] [^b126, i32 %1139];
    i32 %1067 = phi [^b109, i32 %961] [^b126, i32 %1138];
    i32 %1068 = phi [^b109, i32 0] [^b126, i32 %1140];
    i1 %1069 = scmp lt i32 %1068, i32 16;
    cbr i1 %1069(prob = 0.97), ^while.body56, ^while.header64;
  ^while.body55:
    i32 %1070 = and i32 %999, i32 %1000;
    i1 %1071 = ztrunc i32 %1070 to i1;
    cbr i1 %1071(prob = 0.5), ^if.then83, ^b125;
  ^while.header87:
    i32 %1072 = phi [^b110, i32 0] [^b127, i32 %1141];
    i32 %1073 = phi [^b110, i32 65535] [^b127, i32 %1143];
    i32 %1074 = phi [^b110, i32 %969] [^b127, i32 %1142];
    i32 %1075 = phi [^b110, i32 0] [^b127, i32 %1144];
    i1 %1076 = scmp lt i32 %1075, i32 16;
    cbr i1 %1076(prob = 0.97), ^while.body57, ^while.header65;
  ^while.header88:
    i32 %1077 = phi [^b111, i32 0] [^b128, i32 %1145];
    i32 %1078 = phi [^b111, i32 65535] [^b128, i32 %1147];
    i32 %1079 = phi [^b111, i32 %971] [^b128, i32 %1146];
    i32 %1080 = phi [^b111, i32 0] [^b128, i32 %1148];
    i1 %1081 = scmp lt i32 %1080, i32 16;
    cbr i1 %1081(prob = 0.97), ^while.body58, ^while.header66;
  ^if.then79:
    i32* %1082 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %889];
    i32 %1083 = load i32* %1082;
    i32 %1084 = add i32 %886, i32 %1083;
    ubr ^b121;
  ^if.then80:
    i32* %1085 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %983];
    i32 %1086 = load i32* %1085;
    i32 %1087 = add i32 %980, i32 %1086;
    ubr ^b122;
  ^if.then81:
    i32* %1088 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %988];
    i32 %1089 = load i32* %1088;
    i32 %1090 = add i32 %987, i32 %1089;
    ubr ^b123;
  ^if.then82:
    i32* %1091 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %997];
    i32 %1092 = load i32* %1091;
    i32 %1093 = add i32 %994, i32 %1092;
    ubr ^b124;
  ^b121:
    i32 %1094 = phi [^if.then78, i32 %886] [^if.else27, i32 %886] [^if.then79, i32 %1084];
    i32 %1095 = sdiv i32 %888, i32 2;
    i32 %1096 = sdiv i32 %887, i32 2;
    i32 %1097 = add i32 %889, i32 1;
    ubr ^while.header79;
  ^if.then83:
    i32* %1098 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1002];
    i32 %1099 = load i32* %1098;
    i32 %1100 = add i32 %1001, i32 %1099;
    ubr ^b125;
  ^b122:
    i32 %1101 = phi [^while.body52, i32 %980] [^if.then80, i32 %1087];
    i32 %1102 = sdiv i32 %982, i32 2;
    i32 %1103 = sdiv i32 %981, i32 2;
    i32 %1104 = add i32 %983, i32 1;
    ubr ^while.header82;
  ^b123:
    i32 %1105 = phi [^while.body53, i32 %987] [^if.then81, i32 %1090];
    i32 %1106 = sdiv i32 %986, i32 2;
    i32 %1107 = sdiv i32 %985, i32 2;
    i32 %1108 = add i32 %988, i32 1;
    ubr ^while.header83;
  ^b124:
    i32 %1109 = phi [^while.body54, i32 %994] [^if.then82, i32 %1093];
    i32 %1110 = sdiv i32 %996, i32 2;
    i32 %1111 = sdiv i32 %995, i32 2;
    i32 %1112 = add i32 %997, i32 1;
    ubr ^while.header84;
  ^b125:
    i32 %1113 = phi [^while.body55, i32 %1001] [^if.then83, i32 %1100];
    i32 %1114 = sdiv i32 %1000, i32 2;
    i32 %1115 = sdiv i32 %999, i32 2;
    i32 %1116 = add i32 %1002, i32 1;
    ubr ^while.header85;
  ^while.body56:
    i32 %1117 = and i32 %1066, i32 %1067;
    i1 %1118 = ztrunc i32 %1117 to i1;
    cbr i1 %1118(prob = 0.5), ^if.then84, ^b126;
  ^while.body57:
    i32 %1119 = and i32 %1073, i32 %1074;
    i1 %1120 = ztrunc i32 %1119 to i1;
    cbr i1 %1120(prob = 0.5), ^if.then85, ^b127;
  ^while.body58:
    i32 %1121 = and i32 %1078, i32 %1079;
    i1 %1122 = ztrunc i32 %1121 to i1;
    cbr i1 %1122(prob = 0.5), ^if.then86, ^b128;
  ^while.header89:
    i32 %1123 = phi [^b120, i32 0] [^b129, i32 %1154];
    i32 %1124 = phi [^b120, i32 65535] [^b129, i32 %1156];
    i32 %1125 = phi [^b120, i32 %1061] [^b129, i32 %1155];
    i32 %1126 = phi [^b120, i32 0] [^b129, i32 %1157];
    i1 %1127 = scmp lt i32 %1126, i32 16;
    cbr i1 %1127(prob = 0.97), ^while.body59, ^while.header75;
  ^if.then84:
    i32* %1128 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1068];
    i32 %1129 = load i32* %1128;
    i32 %1130 = add i32 %1065, i32 %1129;
    ubr ^b126;
  ^if.then85:
    i32* %1131 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1075];
    i32 %1132 = load i32* %1131;
    i32 %1133 = add i32 %1072, i32 %1132;
    ubr ^b127;
  ^if.then86:
    i32* %1134 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1080];
    i32 %1135 = load i32* %1134;
    i32 %1136 = add i32 %1077, i32 %1135;
    ubr ^b128;
  ^b126:
    i32 %1137 = phi [^while.body56, i32 %1065] [^if.then84, i32 %1130];
    i32 %1138 = sdiv i32 %1067, i32 2;
    i32 %1139 = sdiv i32 %1066, i32 2;
    i32 %1140 = add i32 %1068, i32 1;
    ubr ^while.header86;
  ^b127:
    i32 %1141 = phi [^while.body57, i32 %1072] [^if.then85, i32 %1133];
    i32 %1142 = sdiv i32 %1074, i32 2;
    i32 %1143 = sdiv i32 %1073, i32 2;
    i32 %1144 = add i32 %1075, i32 1;
    ubr ^while.header87;
  ^b128:
    i32 %1145 = phi [^while.body58, i32 %1077] [^if.then86, i32 %1136];
    i32 %1146 = sdiv i32 %1079, i32 2;
    i32 %1147 = sdiv i32 %1078, i32 2;
    i32 %1148 = add i32 %1080, i32 1;
    ubr ^while.header88;
  ^while.body59:
    i32 %1149 = and i32 %1124, i32 %1125;
    i1 %1150 = ztrunc i32 %1149 to i1;
    cbr i1 %1150(prob = 0.5), ^if.then87, ^b129;
  ^if.then87:
    i32* %1151 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1126];
    i32 %1152 = load i32* %1151;
    i32 %1153 = add i32 %1123, i32 %1152;
    ubr ^b129;
  ^b129:
    i32 %1154 = phi [^while.body59, i32 %1123] [^if.then87, i32 %1153];
    i32 %1155 = sdiv i32 %1125, i32 2;
    i32 %1156 = sdiv i32 %1124, i32 2;
    i32 %1157 = add i32 %1126, i32 1;
    ubr ^while.header89;
}
