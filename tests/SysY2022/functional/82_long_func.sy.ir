internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [16 * i32]* %SHIFT_TABLE = alloc [16 * i32];
    i32* %0 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 0];
    store i32* %0 with i32 1;
    i32* %1 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 1];
    store i32* %1 with i32 2;
    i32* %2 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 2];
    store i32* %2 with i32 4;
    i32* %3 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 3];
    store i32* %3 with i32 8;
    i32* %4 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 4];
    store i32* %4 with i32 16;
    i32* %5 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 5];
    store i32* %5 with i32 32;
    i32* %6 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 6];
    store i32* %6 with i32 64;
    i32* %7 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 7];
    store i32* %7 with i32 128;
    i32* %8 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 8];
    store i32* %8 with i32 256;
    i32* %9 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 9];
    store i32* %9 with i32 512;
    i32* %10 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 10];
    store i32* %10 with i32 1024;
    i32* %11 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 11];
    store i32* %11 with i32 2048;
    i32* %12 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 12];
    store i32* %12 with i32 4096;
    i32* %13 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 13];
    store i32* %13 with i32 8192;
    i32* %14 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 14];
    store i32* %14 with i32 16384;
    i32* %15 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 15];
    store i32* %15 with i32 32768;
    ubr ^while.header;
  ^while.header:
    i32 %16 = phi [^entry, i32 2] [^if.then3, i32 %58] [^if.else1, i32 %58];
    i32 %17 = phi [^entry, i32 1] [^if.then3, i32 %38] [^if.else1, i32 %38];
    i32 %18 = phi [^entry, i32 0] [^if.then3, i32 %100] [^if.else1, i32 %114];
    i1 %19 = icmp sgt i32 %18, i32 0;
    cbr i1 %19(prob = 0.97), ^while.header1, ^b;
  ^b:
    call (i32) -> void @putint(i32 %17);
    call (i32) -> void @putch(i32 10);
    ubr ^while.header2;
  ^while.header1:
    i32 %20 = phi [^while.header, i32 0] [^b2, i32 %35];
    i32 %21 = phi [^while.header, i32 1] [^b2, i32 0];
    i32 %22 = phi [^while.header, i32 %18] [^b2, i32 %36];
    i32 %23 = phi [^while.header, i32 0] [^b2, i32 %37];
    i1 %24 = icmp slt i32 %23, i32 16;
    cbr i1 %24(prob = 0.97), ^while.body, ^b1;
  ^while.body:
    i32 %25 = and i32 %21, i32 %22;
    i1 %26 = ztrunc i32 %25 to i1;
    cbr i1 %26(prob = 0.5), ^if.then, ^b2;
  ^while.header2:
    i32 %27 = phi [^b, i32 2] [^if.then7, i32 %119] [^if.else3, i32 %119];
    i32 %28 = phi [^b, i32 1] [^if.then7, i32 %70] [^if.else3, i32 %70];
    i32 %29 = phi [^b, i32 1] [^if.then7, i32 %184] [^if.else3, i32 %196];
    i1 %30 = icmp sgt i32 %29, i32 0;
    cbr i1 %30(prob = 0.97), ^while.header3, ^b3;
  ^b1:
    i1 %31 = icmp neq i32 %20, i32 0;
    cbr i1 %31(prob = 0.5), ^while.header4, ^b4;
  ^if.then:
    i32* %32 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %23];
    i32 %33 = load i32* %32;
    i32 %34 = add i32 %20, i32 %33;
    ubr ^b2;
  ^b2:
    i32 %35 = phi [^while.body, i32 %20] [^if.then, i32 %34];
    i32 %36 = sdiv i32 %22, i32 2;
    i32 %37 = add i32 %23, i32 1;
    ubr ^while.header1;
  ^b3:
    call (i32) -> void @putint(i32 %28);
    call (i32) -> void @putch(i32 10);
    ubr ^while.header6;
  ^b4:
    i32 %38 = phi [^b1, i32 %17] [^while.header4, i32 %45];
    ubr ^while.header7;
  ^while.header3:
    i32 %39 = phi [^while.header2, i32 1] [^b6, i32 0];
    i32 %40 = phi [^while.header2, i32 %29] [^b6, i32 %66];
    i32 %41 = phi [^while.header2, i32 0] [^b6, i32 %65];
    i32 %42 = phi [^while.header2, i32 0] [^b6, i32 %67];
    i1 %43 = icmp slt i32 %42, i32 16;
    cbr i1 %43(prob = 0.97), ^while.body1, ^b5;
  ^while.header4:
    i32 %44 = phi [^b1, i32 %17] [^if.then11, i32 %150] [^if.else7, i32 %150];
    i32 %45 = phi [^b1, i32 0] [^if.then11, i32 %95] [^if.else7, i32 %95];
    i32 %46 = phi [^b1, i32 %16] [^if.then11, i32 %233] [^if.else7, i32 %260];
    i1 %47 = icmp neq i32 %46, i32 0;
    cbr i1 %47(prob = 0.97), ^while.header5, ^b4;
  ^while.body1:
    i32 %48 = and i32 %39, i32 %40;
    i1 %49 = ztrunc i32 %48 to i1;
    cbr i1 %49(prob = 0.5), ^if.then1, ^b6;
  ^while.header5:
    i32 %50 = phi [^while.header4, i32 0] [^b9, i32 %91];
    i32 %51 = phi [^while.header4, i32 1] [^b9, i32 0];
    i32 %52 = phi [^while.header4, i32 %46] [^b9, i32 %92];
    i32 %53 = phi [^while.header4, i32 0] [^b9, i32 %93];
    i1 %54 = icmp slt i32 %53, i32 16;
    cbr i1 %54(prob = 0.97), ^while.body2, ^b8;
  ^while.header6:
    i32 %55 = phi [^b3, i32 2] [^b10, i32 %94];
    i1 %56 = icmp slt i32 %55, i32 16;
    cbr i1 %56(prob = 0.97), ^while.header8, ^while.header11;
  ^while.header7:
    i32 %57 = phi [^b4, i32 %16] [^if.then16, i32 %215] [^if.else13, i32 %215];
    i32 %58 = phi [^b4, i32 0] [^if.then16, i32 %138] [^if.else13, i32 %138];
    i32 %59 = phi [^b4, i32 %16] [^if.then16, i32 %315] [^if.else13, i32 %345];
    i1 %60 = icmp neq i32 %59, i32 0;
    cbr i1 %60(prob = 0.97), ^while.header9, ^if.else;
  ^b5:
    i1 %61 = icmp neq i32 %41, i32 0;
    cbr i1 %61(prob = 0.5), ^while.header10, ^b7;
  ^if.then1:
    i32* %62 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %42];
    i32 %63 = load i32* %62;
    i32 %64 = add i32 %41, i32 %63;
    ubr ^b6;
  ^b6:
    i32 %65 = phi [^while.body1, i32 %41] [^if.then1, i32 %64];
    i32 %66 = sdiv i32 %40, i32 2;
    i32 %67 = add i32 %42, i32 1;
    ubr ^while.header3;
  ^while.body2:
    i32 %68 = and i32 %51, i32 %52;
    i1 %69 = ztrunc i32 %68 to i1;
    cbr i1 %69(prob = 0.5), ^if.then2, ^b9;
  ^b7:
    i32 %70 = phi [^b5, i32 %28] [^while.header10, i32 %81];
    ubr ^while.header15;
  ^while.header8:
    i32 %71 = phi [^while.header6, i32 2] [^if.then22, i32 %262] [^if.else17, i32 %262];
    i32 %72 = phi [^while.header6, i32 1] [^if.then22, i32 %178] [^if.else17, i32 %178];
    i32 %73 = phi [^while.header6, i32 %55] [^if.then22, i32 %406] [^if.else17, i32 %437];
    i1 %74 = icmp sgt i32 %73, i32 0;
    cbr i1 %74(prob = 0.97), ^while.header12, ^b10;
  ^while.header9:
    i32 %75 = phi [^while.header7, i32 0] [^b14, i32 %131];
    i32 %76 = phi [^while.header7, i32 1] [^b14, i32 0];
    i32 %77 = phi [^while.header7, i32 %59] [^b14, i32 %132];
    i32 %78 = phi [^while.header7, i32 0] [^b14, i32 %133];
    i1 %79 = icmp slt i32 %78, i32 16;
    cbr i1 %79(prob = 0.97), ^while.body3, ^b12;
  ^while.header10:
    i32 %80 = phi [^b5, i32 %28] [^if.then24, i32 %270] [^if.else20, i32 %270];
    i32 %81 = phi [^b5, i32 0] [^if.then24, i32 %179] [^if.else20, i32 %179];
    i32 %82 = phi [^b5, i32 %27] [^if.then24, i32 %413] [^if.else20, i32 %445];
    i1 %83 = icmp neq i32 %82, i32 0;
    cbr i1 %83(prob = 0.97), ^while.header13, ^b7;
  ^b8:
    i1 %84 = icmp neq i32 %50, i32 0;
    cbr i1 %84(prob = 0.5), ^while.header14, ^b11;
  ^while.header11:
    i32 %85 = phi [^while.header6, i32 0] [^b23, i32 %190];
    i1 %86 = icmp slt i32 %85, i32 16;
    cbr i1 %86(prob = 0.97), ^while.header16, ^b13;
  ^if.else:
    i1 %87 = icmp sgt i32 %18, i32 32767;
    cbr i1 %87(prob = 0.5), ^if.then3, ^if.else1;
  ^if.then2:
    i32* %88 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %53];
    i32 %89 = load i32* %88;
    i32 %90 = add i32 %50, i32 %89;
    ubr ^b9;
  ^b9:
    i32 %91 = phi [^while.body2, i32 %50] [^if.then2, i32 %90];
    i32 %92 = sdiv i32 %52, i32 2;
    i32 %93 = add i32 %53, i32 1;
    ubr ^while.header5;
  ^b10:
    call (i32) -> void @putint(i32 %72);
    call (i32) -> void @putch(i32 10);
    i32 %94 = add i32 %55, i32 1;
    ubr ^while.header6;
  ^b11:
    i32 %95 = phi [^b8, i32 %45] [^while.header14, i32 %115];
    ubr ^while.header19;
  ^if.then3:
    i32 %96 = load i32* %1;
    i32 %97 = sdiv i32 %18, i32 %96;
    i32 %98 = add i32 %97, i32 65536;
    i32 %99 = load i32* %15;
    i32 %100 = sub i32 %98, i32 %99;
    ubr ^while.header;
  ^while.body3:
    i32 %101 = and i32 %76, i32 %77;
    i1 %102 = ztrunc i32 %101 to i1;
    cbr i1 %102(prob = 0.5), ^if.then4, ^b14;
  ^while.header12:
    i32 %103 = phi [^while.header8, i32 1] [^b19, i32 0];
    i32 %104 = phi [^while.header8, i32 %73] [^b19, i32 %173];
    i32 %105 = phi [^while.header8, i32 0] [^b19, i32 %172];
    i32 %106 = phi [^while.header8, i32 0] [^b19, i32 %174];
    i1 %107 = icmp slt i32 %106, i32 16;
    cbr i1 %107(prob = 0.97), ^while.body4, ^b16;
  ^while.header13:
    i32 %108 = phi [^while.header10, i32 1] [^b20, i32 0];
    i32 %109 = phi [^while.header10, i32 %82] [^b20, i32 %176];
    i32 %110 = phi [^while.header10, i32 0] [^b20, i32 %175];
    i32 %111 = phi [^while.header10, i32 0] [^b20, i32 %177];
    i1 %112 = icmp slt i32 %111, i32 16;
    cbr i1 %112(prob = 0.97), ^while.body5, ^b17;
  ^if.else1:
    i32 %113 = load i32* %1;
    i32 %114 = sdiv i32 %18, i32 %113;
    ubr ^while.header;
  ^while.header14:
    i32 %115 = phi [^b8, i32 %45] [^while.header42, i32 %139];
    i32 %116 = phi [^b8, i32 %44] [^while.header42, i32 %356];
    i1 %117 = icmp neq i32 %116, i32 0;
    cbr i1 %117(prob = 0.97), ^while.header17, ^b11;
  ^while.header15:
    i32 %118 = phi [^b7, i32 %27] [^if.then35, i32 %361] [^if.else28, i32 %361];
    i32 %119 = phi [^b7, i32 0] [^if.then35, i32 %244] [^if.else28, i32 %244];
    i32 %120 = phi [^b7, i32 %27] [^if.then35, i32 %535] [^if.else28, i32 %575];
    i1 %121 = icmp neq i32 %120, i32 0;
    cbr i1 %121(prob = 0.97), ^while.header18, ^if.else2;
  ^b12:
    i1 %122 = icmp neq i32 %75, i32 0;
    cbr i1 %122(prob = 0.5), ^while.header20, ^b15;
  ^while.header16:
    i32 %123 = phi [^while.header11, i32 2] [^if.then36, i32 %365] [^if.else29, i32 %365];
    i32 %124 = phi [^while.header11, i32 1] [^if.then36, i32 %245] [^if.else29, i32 %245];
    i32 %125 = phi [^while.header11, i32 %85] [^if.then36, i32 %541] [^if.else29, i32 %577];
    i1 %126 = icmp sgt i32 %125, i32 0;
    cbr i1 %126(prob = 0.97), ^while.header21, ^b18;
  ^b13:
    i32 %127 = phi [^while.header11, i32 0] [^b18, i32 1];
    ret i32 %127;
  ^if.then4:
    i32* %128 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %78];
    i32 %129 = load i32* %128;
    i32 %130 = add i32 %75, i32 %129;
    ubr ^b14;
  ^b14:
    i32 %131 = phi [^while.body3, i32 %75] [^if.then4, i32 %130];
    i32 %132 = sdiv i32 %77, i32 2;
    i32 %133 = add i32 %78, i32 1;
    ubr ^while.header9;
  ^while.body4:
    i32 %134 = and i32 %103, i32 %104;
    i1 %135 = ztrunc i32 %134 to i1;
    cbr i1 %135(prob = 0.5), ^if.then5, ^b19;
  ^while.body5:
    i32 %136 = and i32 %108, i32 %109;
    i1 %137 = ztrunc i32 %136 to i1;
    cbr i1 %137(prob = 0.5), ^if.then6, ^b20;
  ^b15:
    i32 %138 = phi [^b12, i32 %58] [^while.header20, i32 %153];
    ubr ^while.header27;
  ^while.header17:
    i32 %139 = phi [^while.header14, i32 0] [^b30, i32 %294];
    i32 %140 = phi [^while.header14, i32 %116] [^b30, i32 %296];
    i32 %141 = phi [^while.header14, i32 %115] [^b30, i32 %295];
    i32 %142 = phi [^while.header14, i32 0] [^b30, i32 %297];
    i1 %143 = icmp slt i32 %142, i32 16;
    cbr i1 %143(prob = 0.97), ^while.body6, ^while.header26;
  ^while.header18:
    i32 %144 = phi [^while.header15, i32 0] [^b26, i32 %236];
    i32 %145 = phi [^while.header15, i32 1] [^b26, i32 0];
    i32 %146 = phi [^while.header15, i32 %120] [^b26, i32 %237];
    i32 %147 = phi [^while.header15, i32 0] [^b26, i32 %238];
    i1 %148 = icmp slt i32 %147, i32 16;
    cbr i1 %148(prob = 0.97), ^while.body7, ^b24;
  ^b16:
    i1 %149 = icmp neq i32 %105, i32 0;
    cbr i1 %149(prob = 0.5), ^while.header22, ^b21;
  ^while.header19:
    i32 %150 = phi [^b11, i32 %44] [^while.header51, i32 %197];
    i32 %151 = phi [^b11, i32 %44] [^while.header51, i32 %471];
    i1 %152 = icmp neq i32 %151, i32 0;
    cbr i1 %152(prob = 0.97), ^while.header23, ^if.else4;
  ^while.header20:
    i32 %153 = phi [^b12, i32 %58] [^while.header52, i32 %202];
    i32 %154 = phi [^b12, i32 %57] [^while.header52, i32 %478];
    i1 %155 = icmp neq i32 %154, i32 0;
    cbr i1 %155(prob = 0.97), ^while.header24, ^b15;
  ^b17:
    i1 %156 = icmp neq i32 %110, i32 0;
    cbr i1 %156(prob = 0.5), ^while.header25, ^b22;
  ^while.header21:
    i32 %157 = phi [^while.header16, i32 1] [^b27, i32 0];
    i32 %158 = phi [^while.header16, i32 %125] [^b27, i32 %240];
    i32 %159 = phi [^while.header16, i32 0] [^b27, i32 %239];
    i32 %160 = phi [^while.header16, i32 0] [^b27, i32 %241];
    i1 %161 = icmp slt i32 %160, i32 16;
    cbr i1 %161(prob = 0.97), ^while.body8, ^b25;
  ^b18:
    i32* %162 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %85];
    i32 %163 = load i32* %162;
    i1 %164 = icmp neq i32 %124, i32 %163;
    cbr i1 %164(prob = 0.5), ^b13, ^b23;
  ^if.else2:
    i1 %165 = icmp sgt i32 %29, i32 32767;
    cbr i1 %165(prob = 0.5), ^if.then7, ^if.else3;
  ^if.then5:
    i32* %166 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %106];
    i32 %167 = load i32* %166;
    i32 %168 = add i32 %105, i32 %167;
    ubr ^b19;
  ^if.then6:
    i32* %169 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %111];
    i32 %170 = load i32* %169;
    i32 %171 = add i32 %110, i32 %170;
    ubr ^b20;
  ^b19:
    i32 %172 = phi [^while.body4, i32 %105] [^if.then5, i32 %168];
    i32 %173 = sdiv i32 %104, i32 2;
    i32 %174 = add i32 %106, i32 1;
    ubr ^while.header12;
  ^b20:
    i32 %175 = phi [^while.body5, i32 %110] [^if.then6, i32 %171];
    i32 %176 = sdiv i32 %109, i32 2;
    i32 %177 = add i32 %111, i32 1;
    ubr ^while.header13;
  ^b21:
    i32 %178 = phi [^b16, i32 %72] [^while.header22, i32 %192];
    ubr ^while.header30;
  ^b22:
    i32 %179 = phi [^b17, i32 %81] [^while.header25, i32 %207];
    ubr ^while.header32;
  ^if.then7:
    i32 %180 = load i32* %1;
    i32 %181 = sdiv i32 %29, i32 %180;
    i32 %182 = add i32 %181, i32 65536;
    i32 %183 = load i32* %15;
    i32 %184 = sub i32 %182, i32 %183;
    ubr ^while.header2;
  ^while.body6:
    i1 %185 = ztrunc i32 %141 to i1;
    cbr i1 %185(prob = 0.5), ^if.then10, ^if.else6;
  ^while.body7:
    i32 %186 = and i32 %145, i32 %146;
    i1 %187 = ztrunc i32 %186 to i1;
    cbr i1 %187(prob = 0.5), ^if.then8, ^b26;
  ^while.body8:
    i32 %188 = and i32 %157, i32 %158;
    i1 %189 = ztrunc i32 %188 to i1;
    cbr i1 %189(prob = 0.5), ^if.then9, ^b27;
  ^b23:
    i32 %190 = add i32 %85, i32 1;
    ubr ^while.header11;
  ^while.header22:
    i32 %191 = phi [^b16, i32 %72] [^if.then48, i32 %568] [^if.else35, i32 %568];
    i32 %192 = phi [^b16, i32 0] [^if.then48, i32 %401] [^if.else35, i32 %401];
    i32 %193 = phi [^b16, i32 %71] [^if.then48, i32 %714] [^if.else35, i32 %733];
    i1 %194 = icmp neq i32 %193, i32 0;
    cbr i1 %194(prob = 0.97), ^while.header28, ^b21;
  ^if.else3:
    i32 %195 = load i32* %1;
    i32 %196 = sdiv i32 %29, i32 %195;
    ubr ^while.header2;
  ^while.header23:
    i32 %197 = phi [^while.header19, i32 0] [^b33, i32 %384];
    i32 %198 = phi [^while.header19, i32 %151] [^b33, i32 %386];
    i32 %199 = phi [^while.header19, i32 %150] [^b33, i32 %385];
    i32 %200 = phi [^while.header19, i32 0] [^b33, i32 %387];
    i1 %201 = icmp slt i32 %200, i32 16;
    cbr i1 %201(prob = 0.97), ^while.body10, ^while.header35;
  ^while.header24:
    i32 %202 = phi [^while.header20, i32 0] [^b34, i32 %388];
    i32 %203 = phi [^while.header20, i32 %154] [^b34, i32 %390];
    i32 %204 = phi [^while.header20, i32 %153] [^b34, i32 %389];
    i32 %205 = phi [^while.header20, i32 0] [^b34, i32 %391];
    i1 %206 = icmp slt i32 %205, i32 16;
    cbr i1 %206(prob = 0.97), ^while.body11, ^while.header36;
  ^while.header25:
    i32 %207 = phi [^b17, i32 %81] [^while.header57, i32 %256];
    i32 %208 = phi [^b17, i32 %80] [^while.header57, i32 %581];
    i1 %209 = icmp neq i32 %208, i32 0;
    cbr i1 %209(prob = 0.97), ^while.header29, ^b22;
  ^while.header26:
    i32 %210 = phi [^while.header17, i32 0] [^b31, i32 %301];
    i32 %211 = phi [^while.header17, i32 %116] [^b31, i32 %303];
    i32 %212 = phi [^while.header17, i32 %115] [^b31, i32 %302];
    i32 %213 = phi [^while.header17, i32 0] [^b31, i32 %304];
    i1 %214 = icmp slt i32 %213, i32 16;
    cbr i1 %214(prob = 0.97), ^while.body9, ^if.else5;
  ^while.header27:
    i32 %215 = phi [^b15, i32 %57] [^while.header59, i32 %265];
    i32 %216 = phi [^b15, i32 %57] [^while.header59, i32 %594];
    i1 %217 = icmp neq i32 %216, i32 0;
    cbr i1 %217(prob = 0.97), ^while.header31, ^if.else8;
  ^b24:
    i1 %218 = icmp neq i32 %144, i32 0;
    cbr i1 %218(prob = 0.5), ^while.header33, ^b28;
  ^b25:
    i1 %219 = icmp neq i32 %159, i32 0;
    cbr i1 %219(prob = 0.5), ^while.header34, ^b29;
  ^if.else4:
    i1 %220 = icmp sgt i32 %46, i32 32767;
    cbr i1 %220(prob = 0.5), ^if.then11, ^if.else7;
  ^if.then8:
    i32* %221 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %147];
    i32 %222 = load i32* %221;
    i32 %223 = add i32 %144, i32 %222;
    ubr ^b26;
  ^if.then9:
    i32* %224 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %160];
    i32 %225 = load i32* %224;
    i32 %226 = add i32 %159, i32 %225;
    ubr ^b27;
  ^if.then10:
    i32 %227 = and i32 %140, i32 1;
    i1 %228 = icmp eq i32 %227, i32 0;
    cbr i1 %228(prob = 0.5), ^if.then12, ^b30;
  ^if.then11:
    i32 %229 = load i32* %1;
    i32 %230 = sdiv i32 %46, i32 %229;
    i32 %231 = add i32 %230, i32 65536;
    i32 %232 = load i32* %15;
    i32 %233 = sub i32 %231, i32 %232;
    ubr ^while.header4;
  ^if.else5:
    i32 %234 = load i32* %1;
    i32 %235 = mul i32 %210, i32 %234;
    ubr ^while.header42;
  ^b26:
    i32 %236 = phi [^while.body7, i32 %144] [^if.then8, i32 %223];
    i32 %237 = sdiv i32 %146, i32 2;
    i32 %238 = add i32 %147, i32 1;
    ubr ^while.header18;
  ^b27:
    i32 %239 = phi [^while.body8, i32 %159] [^if.then9, i32 %226];
    i32 %240 = sdiv i32 %158, i32 2;
    i32 %241 = add i32 %160, i32 1;
    ubr ^while.header21;
  ^while.body9:
    i32 %242 = and i32 %211, i32 %212;
    i1 %243 = ztrunc i32 %242 to i1;
    cbr i1 %243(prob = 0.5), ^if.then13, ^b31;
  ^b28:
    i32 %244 = phi [^b24, i32 %119] [^while.header33, i32 %273];
    ubr ^while.header43;
  ^b29:
    i32 %245 = phi [^b25, i32 %124] [^while.header34, i32 %277];
    ubr ^while.header44;
  ^while.body10:
    i1 %246 = ztrunc i32 %199 to i1;
    cbr i1 %246(prob = 0.5), ^if.then14, ^if.else11;
  ^while.body11:
    i1 %247 = ztrunc i32 %204 to i1;
    cbr i1 %247(prob = 0.5), ^if.then15, ^if.else12;
  ^while.header28:
    i32 %248 = phi [^while.header22, i32 1] [^b35, i32 0];
    i32 %249 = phi [^while.header22, i32 %193] [^b35, i32 %393];
    i32 %250 = phi [^while.header22, i32 0] [^b35, i32 %392];
    i32 %251 = phi [^while.header22, i32 0] [^b35, i32 %394];
    i1 %252 = icmp slt i32 %251, i32 16;
    cbr i1 %252(prob = 0.97), ^while.body12, ^b32;
  ^if.else6:
    i1 %253 = ztrunc i32 %140 to i1;
    cbr i1 %253(prob = 0.5), ^if.then12, ^b30;
  ^while.header29:
    i32 %254 = phi [^while.header25, i32 %208] [^b41, i32 %491];
    i32 %255 = phi [^while.header25, i32 %207] [^b41, i32 %490];
    i32 %256 = phi [^while.header25, i32 0] [^b41, i32 %489];
    i32 %257 = phi [^while.header25, i32 0] [^b41, i32 %492];
    i1 %258 = icmp slt i32 %257, i32 16;
    cbr i1 %258(prob = 0.97), ^while.body13, ^while.header41;
  ^if.else7:
    i32 %259 = load i32* %1;
    i32 %260 = sdiv i32 %46, i32 %259;
    ubr ^while.header4;
  ^while.header30:
    i32 %261 = phi [^b21, i32 %71] [^if.then57, i32 %678] [^if.else43, i32 %678];
    i32 %262 = phi [^b21, i32 0] [^if.then57, i32 %526] [^if.else43, i32 %526];
    i32 %263 = phi [^b21, i32 %71] [^if.then57, i32 %815] [^if.else43, i32 %847];
    i1 %264 = icmp neq i32 %263, i32 0;
    cbr i1 %264(prob = 0.97), ^while.header37, ^if.else14;
  ^while.header31:
    i32 %265 = phi [^while.header27, i32 0] [^b42, i32 %505];
    i32 %266 = phi [^while.header27, i32 %216] [^b42, i32 %507];
    i32 %267 = phi [^while.header27, i32 %215] [^b42, i32 %506];
    i32 %268 = phi [^while.header27, i32 0] [^b42, i32 %508];
    i1 %269 = icmp slt i32 %268, i32 16;
    cbr i1 %269(prob = 0.97), ^while.body16, ^while.header45;
  ^while.header32:
    i32 %270 = phi [^b22, i32 %80] [^while.header67, i32 %335];
    i32 %271 = phi [^b22, i32 %80] [^while.header67, i32 %688];
    i1 %272 = icmp neq i32 %271, i32 0;
    cbr i1 %272(prob = 0.97), ^while.header38, ^if.else15;
  ^while.header33:
    i32 %273 = phi [^b24, i32 %119] [^while.header68, i32 %340];
    i32 %274 = phi [^b24, i32 %118] [^while.header68, i32 %693];
    i1 %275 = icmp neq i32 %274, i32 0;
    cbr i1 %275(prob = 0.97), ^while.header39, ^b28;
  ^while.header34:
    i32 %276 = phi [^b25, i32 %124] [^if.then59, i32 %681] [^if.else45, i32 %681];
    i32 %277 = phi [^b25, i32 0] [^if.then59, i32 %536] [^if.else45, i32 %536];
    i32 %278 = phi [^b25, i32 %123] [^if.then59, i32 %826] [^if.else45, i32 %852];
    i1 %279 = icmp neq i32 %278, i32 0;
    cbr i1 %279(prob = 0.97), ^while.header40, ^b29;
  ^while.header35:
    i32 %280 = phi [^while.header23, i32 0] [^b37, i32 %416];
    i32 %281 = phi [^while.header23, i32 %151] [^b37, i32 %418];
    i32 %282 = phi [^while.header23, i32 %150] [^b37, i32 %417];
    i32 %283 = phi [^while.header23, i32 0] [^b37, i32 %419];
    i1 %284 = icmp slt i32 %283, i32 16;
    cbr i1 %284(prob = 0.97), ^while.body14, ^if.else9;
  ^while.header36:
    i32 %285 = phi [^while.header24, i32 0] [^b38, i32 %420];
    i32 %286 = phi [^while.header24, i32 %154] [^b38, i32 %422];
    i32 %287 = phi [^while.header24, i32 %153] [^b38, i32 %421];
    i32 %288 = phi [^while.header24, i32 0] [^b38, i32 %423];
    i1 %289 = icmp slt i32 %288, i32 16;
    cbr i1 %289(prob = 0.97), ^while.body15, ^if.else10;
  ^if.else8:
    i1 %290 = icmp sgt i32 %59, i32 32767;
    cbr i1 %290(prob = 0.5), ^if.then16, ^if.else13;
  ^if.then12:
    i32* %291 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %142];
    i32 %292 = load i32* %291;
    i32 %293 = add i32 %139, i32 %292;
    ubr ^b30;
  ^b30:
    i32 %294 = phi [^if.then10, i32 %139] [^if.else6, i32 %139] [^if.then12, i32 %293];
    i32 %295 = sdiv i32 %141, i32 2;
    i32 %296 = sdiv i32 %140, i32 2;
    i32 %297 = add i32 %142, i32 1;
    ubr ^while.header17;
  ^if.then13:
    i32* %298 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %213];
    i32 %299 = load i32* %298;
    i32 %300 = add i32 %210, i32 %299;
    ubr ^b31;
  ^b31:
    i32 %301 = phi [^while.body9, i32 %210] [^if.then13, i32 %300];
    i32 %302 = sdiv i32 %212, i32 2;
    i32 %303 = sdiv i32 %211, i32 2;
    i32 %304 = add i32 %213, i32 1;
    ubr ^while.header26;
  ^while.body12:
    i32 %305 = and i32 %248, i32 %249;
    i1 %306 = ztrunc i32 %305 to i1;
    cbr i1 %306(prob = 0.5), ^if.then19, ^b35;
  ^if.then14:
    i32 %307 = and i32 %198, i32 1;
    i1 %308 = icmp eq i32 %307, i32 0;
    cbr i1 %308(prob = 0.5), ^if.then17, ^b33;
  ^if.then15:
    i32 %309 = and i32 %203, i32 1;
    i1 %310 = icmp eq i32 %309, i32 0;
    cbr i1 %310(prob = 0.5), ^if.then18, ^b34;
  ^if.then16:
    i32 %311 = load i32* %1;
    i32 %312 = sdiv i32 %59, i32 %311;
    i32 %313 = add i32 %312, i32 65536;
    i32 %314 = load i32* %15;
    i32 %315 = sub i32 %313, i32 %314;
    ubr ^while.header7;
  ^while.body13:
    i1 %316 = ztrunc i32 %255 to i1;
    cbr i1 %316(prob = 0.5), ^if.then23, ^if.else18;
  ^if.else9:
    i32 %317 = load i32* %1;
    i32 %318 = mul i32 %280, i32 %317;
    ubr ^while.header51;
  ^if.else10:
    i32 %319 = load i32* %1;
    i32 %320 = mul i32 %285, i32 %319;
    ubr ^while.header52;
  ^while.body14:
    i32 %321 = and i32 %281, i32 %282;
    i1 %322 = ztrunc i32 %321 to i1;
    cbr i1 %322(prob = 0.5), ^if.then20, ^b37;
  ^while.body15:
    i32 %323 = and i32 %286, i32 %287;
    i1 %324 = ztrunc i32 %323 to i1;
    cbr i1 %324(prob = 0.5), ^if.then21, ^b38;
  ^while.body16:
    i1 %325 = ztrunc i32 %267 to i1;
    cbr i1 %325(prob = 0.5), ^if.then25, ^if.else21;
  ^while.header37:
    i32 %326 = phi [^while.header30, i32 1] [^b43, i32 0];
    i32 %327 = phi [^while.header30, i32 %263] [^b43, i32 %510];
    i32 %328 = phi [^while.header30, i32 0] [^b43, i32 %509];
    i32 %329 = phi [^while.header30, i32 0] [^b43, i32 %511];
    i1 %330 = icmp slt i32 %329, i32 16;
    cbr i1 %330(prob = 0.97), ^while.body17, ^b39;
  ^if.else11:
    i1 %331 = ztrunc i32 %198 to i1;
    cbr i1 %331(prob = 0.5), ^if.then17, ^b33;
  ^if.else12:
    i1 %332 = ztrunc i32 %203 to i1;
    cbr i1 %332(prob = 0.5), ^if.then18, ^b34;
  ^while.header38:
    i32 %333 = phi [^while.header32, i32 %271] [^b51, i32 %605];
    i32 %334 = phi [^while.header32, i32 %270] [^b51, i32 %604];
    i32 %335 = phi [^while.header32, i32 0] [^b51, i32 %603];
    i32 %336 = phi [^while.header32, i32 0] [^b51, i32 %606];
    i1 %337 = icmp slt i32 %336, i32 16;
    cbr i1 %337(prob = 0.97), ^while.body21, ^while.header49;
  ^while.header39:
    i32 %338 = phi [^while.header33, i32 %274] [^b52, i32 %609];
    i32 %339 = phi [^while.header33, i32 %273] [^b52, i32 %608];
    i32 %340 = phi [^while.header33, i32 0] [^b52, i32 %607];
    i32 %341 = phi [^while.header33, i32 0] [^b52, i32 %610];
    i1 %342 = icmp slt i32 %341, i32 16;
    cbr i1 %342(prob = 0.97), ^while.body22, ^while.header50;
  ^b32:
    i1 %343 = icmp neq i32 %250, i32 0;
    cbr i1 %343(prob = 0.5), ^while.header46, ^b36;
  ^if.else13:
    i32 %344 = load i32* %1;
    i32 %345 = sdiv i32 %59, i32 %344;
    ubr ^while.header7;
  ^while.header40:
    i32 %346 = phi [^while.header34, i32 1] [^b44, i32 0];
    i32 %347 = phi [^while.header34, i32 %278] [^b44, i32 %516];
    i32 %348 = phi [^while.header34, i32 0] [^b44, i32 %515];
    i32 %349 = phi [^while.header34, i32 0] [^b44, i32 %517];
    i1 %350 = icmp slt i32 %349, i32 16;
    cbr i1 %350(prob = 0.97), ^while.body18, ^b40;
  ^while.header41:
    i32 %351 = phi [^while.header29, i32 %208] [^b45, i32 %520];
    i32 %352 = phi [^while.header29, i32 %207] [^b45, i32 %519];
    i32 %353 = phi [^while.header29, i32 0] [^b45, i32 %518];
    i32 %354 = phi [^while.header29, i32 0] [^b45, i32 %521];
    i1 %355 = icmp slt i32 %354, i32 16;
    cbr i1 %355(prob = 0.97), ^while.body19, ^if.else16;
  ^while.header42:
    i32 %356 = phi [^if.else5, i32 0] [^b46, i32 %522];
    i32 %357 = phi [^if.else5, i32 65535] [^b46, i32 %524];
    i32 %358 = phi [^if.else5, i32 %235] [^b46, i32 %523];
    i32 %359 = phi [^if.else5, i32 0] [^b46, i32 %525];
    i1 %360 = icmp slt i32 %359, i32 16;
    cbr i1 %360(prob = 0.97), ^while.body20, ^while.header14;
  ^while.header43:
    i32 %361 = phi [^b28, i32 %118] [^while.header76, i32 %451];
    i32 %362 = phi [^b28, i32 %118] [^while.header76, i32 %781];
    i1 %363 = icmp neq i32 %362, i32 0;
    cbr i1 %363(prob = 0.97), ^while.header47, ^if.else22;
  ^while.header44:
    i32 %364 = phi [^b29, i32 %123] [^if.then70, i32 %777] [^if.else53, i32 %777];
    i32 %365 = phi [^b29, i32 0] [^if.then70, i32 %650] [^if.else53, i32 %650];
    i32 %366 = phi [^b29, i32 %123] [^if.then70, i32 %940] [^if.else53, i32 %960];
    i1 %367 = icmp neq i32 %366, i32 0;
    cbr i1 %367(prob = 0.97), ^while.header48, ^if.else23;
  ^if.else14:
    i1 %368 = icmp sgt i32 %73, i32 32767;
    cbr i1 %368(prob = 0.5), ^if.then22, ^if.else17;
  ^while.header45:
    i32 %369 = phi [^while.header31, i32 %216] [^b49, i32 %553];
    i32 %370 = phi [^while.header31, i32 %215] [^b49, i32 %552];
    i32 %371 = phi [^while.header31, i32 0] [^b49, i32 %551];
    i32 %372 = phi [^while.header31, i32 0] [^b49, i32 %554];
    i1 %373 = icmp slt i32 %372, i32 16;
    cbr i1 %373(prob = 0.97), ^while.body23, ^if.else19;
  ^if.else15:
    i1 %374 = icmp sgt i32 %82, i32 32767;
    cbr i1 %374(prob = 0.5), ^if.then24, ^if.else20;
  ^if.then17:
    i32* %375 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %200];
    i32 %376 = load i32* %375;
    i32 %377 = add i32 %197, i32 %376;
    ubr ^b33;
  ^if.then18:
    i32* %378 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %205];
    i32 %379 = load i32* %378;
    i32 %380 = add i32 %202, i32 %379;
    ubr ^b34;
  ^if.then19:
    i32* %381 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %251];
    i32 %382 = load i32* %381;
    i32 %383 = add i32 %250, i32 %382;
    ubr ^b35;
  ^b33:
    i32 %384 = phi [^if.then14, i32 %197] [^if.else11, i32 %197] [^if.then17, i32 %377];
    i32 %385 = sdiv i32 %199, i32 2;
    i32 %386 = sdiv i32 %198, i32 2;
    i32 %387 = add i32 %200, i32 1;
    ubr ^while.header23;
  ^b34:
    i32 %388 = phi [^if.then15, i32 %202] [^if.else12, i32 %202] [^if.then18, i32 %380];
    i32 %389 = sdiv i32 %204, i32 2;
    i32 %390 = sdiv i32 %203, i32 2;
    i32 %391 = add i32 %205, i32 1;
    ubr ^while.header24;
  ^b35:
    i32 %392 = phi [^while.body12, i32 %250] [^if.then19, i32 %383];
    i32 %393 = sdiv i32 %249, i32 2;
    i32 %394 = add i32 %251, i32 1;
    ubr ^while.header28;
  ^if.then20:
    i32* %395 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %283];
    i32 %396 = load i32* %395;
    i32 %397 = add i32 %280, i32 %396;
    ubr ^b37;
  ^if.then21:
    i32* %398 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %288];
    i32 %399 = load i32* %398;
    i32 %400 = add i32 %285, i32 %399;
    ubr ^b38;
  ^b36:
    i32 %401 = phi [^b32, i32 %192] [^while.header46, i32 %439];
    ubr ^while.header54;
  ^if.then22:
    i32 %402 = load i32* %1;
    i32 %403 = sdiv i32 %73, i32 %402;
    i32 %404 = add i32 %403, i32 65536;
    i32 %405 = load i32* %15;
    i32 %406 = sub i32 %404, i32 %405;
    ubr ^while.header8;
  ^if.then23:
    i32 %407 = and i32 %254, i32 1;
    i1 %408 = icmp eq i32 %407, i32 0;
    cbr i1 %408(prob = 0.5), ^if.then26, ^b41;
  ^if.then24:
    i32 %409 = load i32* %1;
    i32 %410 = sdiv i32 %82, i32 %409;
    i32 %411 = add i32 %410, i32 65536;
    i32 %412 = load i32* %15;
    i32 %413 = sub i32 %411, i32 %412;
    ubr ^while.header10;
  ^if.else16:
    i32 %414 = load i32* %1;
    i32 %415 = mul i32 %353, i32 %414;
    ubr ^while.header57;
  ^b37:
    i32 %416 = phi [^while.body14, i32 %280] [^if.then20, i32 %397];
    i32 %417 = sdiv i32 %282, i32 2;
    i32 %418 = sdiv i32 %281, i32 2;
    i32 %419 = add i32 %283, i32 1;
    ubr ^while.header35;
  ^b38:
    i32 %420 = phi [^while.body15, i32 %285] [^if.then21, i32 %400];
    i32 %421 = sdiv i32 %287, i32 2;
    i32 %422 = sdiv i32 %286, i32 2;
    i32 %423 = add i32 %288, i32 1;
    ubr ^while.header36;
  ^while.body17:
    i32 %424 = and i32 %326, i32 %327;
    i1 %425 = ztrunc i32 %424 to i1;
    cbr i1 %425(prob = 0.5), ^if.then28, ^b43;
  ^while.body18:
    i32 %426 = and i32 %346, i32 %347;
    i1 %427 = ztrunc i32 %426 to i1;
    cbr i1 %427(prob = 0.5), ^if.then29, ^b44;
  ^while.body19:
    i32 %428 = and i32 %351, i32 %352;
    i1 %429 = ztrunc i32 %428 to i1;
    cbr i1 %429(prob = 0.5), ^if.then30, ^b45;
  ^while.body20:
    i32 %430 = and i32 %357, i32 %358;
    i1 %431 = ztrunc i32 %430 to i1;
    cbr i1 %431(prob = 0.5), ^if.then31, ^b46;
  ^if.then25:
    i32 %432 = and i32 %266, i32 1;
    i1 %433 = icmp eq i32 %432, i32 0;
    cbr i1 %433(prob = 0.5), ^if.then27, ^b42;
  ^while.body21:
    i1 %434 = ztrunc i32 %334 to i1;
    cbr i1 %434(prob = 0.5), ^if.then33, ^if.else26;
  ^while.body22:
    i1 %435 = ztrunc i32 %339 to i1;
    cbr i1 %435(prob = 0.5), ^if.then34, ^if.else27;
  ^if.else17:
    i32 %436 = load i32* %1;
    i32 %437 = sdiv i32 %73, i32 %436;
    ubr ^while.header8;
  ^if.else18:
    i1 %438 = ztrunc i32 %254 to i1;
    cbr i1 %438(prob = 0.5), ^if.then26, ^b41;
  ^while.header46:
    i32 %439 = phi [^b32, i32 %192] [^while.header77, i32 %544];
    i32 %440 = phi [^b32, i32 %191] [^while.header77, i32 %853];
    i1 %441 = icmp neq i32 %440, i32 0;
    cbr i1 %441(prob = 0.97), ^while.header53, ^b36;
  ^if.else19:
    i32 %442 = load i32* %1;
    i32 %443 = mul i32 %371, i32 %442;
    ubr ^while.header59;
  ^if.else20:
    i32 %444 = load i32* %1;
    i32 %445 = sdiv i32 %82, i32 %444;
    ubr ^while.header10;
  ^while.body23:
    i32 %446 = and i32 %369, i32 %370;
    i1 %447 = ztrunc i32 %446 to i1;
    cbr i1 %447(prob = 0.5), ^if.then32, ^b49;
  ^if.else21:
    i1 %448 = ztrunc i32 %266 to i1;
    cbr i1 %448(prob = 0.5), ^if.then27, ^b42;
  ^while.header47:
    i32 %449 = phi [^while.header43, i32 %362] [^b59, i32 %706];
    i32 %450 = phi [^while.header43, i32 %361] [^b59, i32 %705];
    i32 %451 = phi [^while.header43, i32 0] [^b59, i32 %704];
    i32 %452 = phi [^while.header43, i32 0] [^b59, i32 %707];
    i1 %453 = icmp slt i32 %452, i32 16;
    cbr i1 %453(prob = 0.97), ^while.body29, ^while.header58;
  ^b39:
    i1 %454 = icmp neq i32 %328, i32 0;
    cbr i1 %454(prob = 0.5), ^while.header55, ^b47;
  ^while.header48:
    i32 %455 = phi [^while.header44, i32 1] [^b53, i32 0];
    i32 %456 = phi [^while.header44, i32 %366] [^b53, i32 %628];
    i32 %457 = phi [^while.header44, i32 0] [^b53, i32 %627];
    i32 %458 = phi [^while.header44, i32 0] [^b53, i32 %629];
    i1 %459 = icmp slt i32 %458, i32 16;
    cbr i1 %459(prob = 0.97), ^while.body24, ^b50;
  ^while.header49:
    i32 %460 = phi [^while.header38, i32 0] [^b54, i32 %630];
    i32 %461 = phi [^while.header38, i32 %271] [^b54, i32 %632];
    i32 %462 = phi [^while.header38, i32 %270] [^b54, i32 %631];
    i32 %463 = phi [^while.header38, i32 0] [^b54, i32 %633];
    i1 %464 = icmp slt i32 %463, i32 16;
    cbr i1 %464(prob = 0.97), ^while.body25, ^if.else24;
  ^while.header50:
    i32 %465 = phi [^while.header39, i32 0] [^b55, i32 %634];
    i32 %466 = phi [^while.header39, i32 %274] [^b55, i32 %636];
    i32 %467 = phi [^while.header39, i32 %273] [^b55, i32 %635];
    i32 %468 = phi [^while.header39, i32 0] [^b55, i32 %637];
    i1 %469 = icmp slt i32 %468, i32 16;
    cbr i1 %469(prob = 0.97), ^while.body26, ^if.else25;
  ^b40:
    i1 %470 = icmp neq i32 %348, i32 0;
    cbr i1 %470(prob = 0.5), ^while.header56, ^b48;
  ^while.header51:
    i32 %471 = phi [^if.else9, i32 0] [^b56, i32 %638];
    i32 %472 = phi [^if.else9, i32 65535] [^b56, i32 %640];
    i32 %473 = phi [^if.else9, i32 %318] [^b56, i32 %639];
    i32 %474 = phi [^if.else9, i32 0] [^b56, i32 %641];
    i1 %475 = icmp slt i32 %474, i32 16;
    cbr i1 %475(prob = 0.97), ^while.body27, ^while.header19;
  ^while.header52:
    i32 %476 = phi [^if.else10, i32 65535] [^b57, i32 %644];
    i32 %477 = phi [^if.else10, i32 %320] [^b57, i32 %643];
    i32 %478 = phi [^if.else10, i32 0] [^b57, i32 %642];
    i32 %479 = phi [^if.else10, i32 0] [^b57, i32 %645];
    i1 %480 = icmp slt i32 %479, i32 16;
    cbr i1 %480(prob = 0.97), ^while.body28, ^while.header20;
  ^if.else22:
    i1 %481 = icmp sgt i32 %120, i32 32767;
    cbr i1 %481(prob = 0.5), ^if.then35, ^if.else28;
  ^if.else23:
    i1 %482 = icmp sgt i32 %125, i32 32767;
    cbr i1 %482(prob = 0.5), ^if.then36, ^if.else29;
  ^if.then26:
    i32* %483 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %257];
    i32 %484 = load i32* %483;
    i32 %485 = add i32 %256, i32 %484;
    ubr ^b41;
  ^if.then27:
    i32* %486 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %268];
    i32 %487 = load i32* %486;
    i32 %488 = add i32 %265, i32 %487;
    ubr ^b42;
  ^b41:
    i32 %489 = phi [^if.then23, i32 %256] [^if.else18, i32 %256] [^if.then26, i32 %485];
    i32 %490 = sdiv i32 %255, i32 2;
    i32 %491 = sdiv i32 %254, i32 2;
    i32 %492 = add i32 %257, i32 1;
    ubr ^while.header29;
  ^if.then28:
    i32* %493 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %329];
    i32 %494 = load i32* %493;
    i32 %495 = add i32 %328, i32 %494;
    ubr ^b43;
  ^if.then29:
    i32* %496 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %349];
    i32 %497 = load i32* %496;
    i32 %498 = add i32 %348, i32 %497;
    ubr ^b44;
  ^if.then30:
    i32* %499 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %354];
    i32 %500 = load i32* %499;
    i32 %501 = add i32 %353, i32 %500;
    ubr ^b45;
  ^if.then31:
    i32* %502 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %359];
    i32 %503 = load i32* %502;
    i32 %504 = add i32 %356, i32 %503;
    ubr ^b46;
  ^b42:
    i32 %505 = phi [^if.then25, i32 %265] [^if.else21, i32 %265] [^if.then27, i32 %488];
    i32 %506 = sdiv i32 %267, i32 2;
    i32 %507 = sdiv i32 %266, i32 2;
    i32 %508 = add i32 %268, i32 1;
    ubr ^while.header31;
  ^b43:
    i32 %509 = phi [^while.body17, i32 %328] [^if.then28, i32 %495];
    i32 %510 = sdiv i32 %327, i32 2;
    i32 %511 = add i32 %329, i32 1;
    ubr ^while.header37;
  ^if.then32:
    i32* %512 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %372];
    i32 %513 = load i32* %512;
    i32 %514 = add i32 %371, i32 %513;
    ubr ^b49;
  ^b44:
    i32 %515 = phi [^while.body18, i32 %348] [^if.then29, i32 %498];
    i32 %516 = sdiv i32 %347, i32 2;
    i32 %517 = add i32 %349, i32 1;
    ubr ^while.header40;
  ^b45:
    i32 %518 = phi [^while.body19, i32 %353] [^if.then30, i32 %501];
    i32 %519 = sdiv i32 %352, i32 2;
    i32 %520 = sdiv i32 %351, i32 2;
    i32 %521 = add i32 %354, i32 1;
    ubr ^while.header41;
  ^b46:
    i32 %522 = phi [^while.body20, i32 %356] [^if.then31, i32 %504];
    i32 %523 = sdiv i32 %358, i32 2;
    i32 %524 = sdiv i32 %357, i32 2;
    i32 %525 = add i32 %359, i32 1;
    ubr ^while.header42;
  ^b47:
    i32 %526 = phi [^b39, i32 %262] [^while.header55, i32 %571];
    ubr ^while.header64;
  ^if.then33:
    i32 %527 = and i32 %333, i32 1;
    i1 %528 = icmp eq i32 %527, i32 0;
    cbr i1 %528(prob = 0.5), ^if.then37, ^b51;
  ^if.then34:
    i32 %529 = and i32 %338, i32 1;
    i1 %530 = icmp eq i32 %529, i32 0;
    cbr i1 %530(prob = 0.5), ^if.then38, ^b52;
  ^if.then35:
    i32 %531 = load i32* %1;
    i32 %532 = sdiv i32 %120, i32 %531;
    i32 %533 = add i32 %532, i32 65536;
    i32 %534 = load i32* %15;
    i32 %535 = sub i32 %533, i32 %534;
    ubr ^while.header15;
  ^b48:
    i32 %536 = phi [^b40, i32 %277] [^while.header56, i32 %578];
    ubr ^while.header65;
  ^if.then36:
    i32 %537 = load i32* %1;
    i32 %538 = sdiv i32 %125, i32 %537;
    i32 %539 = add i32 %538, i32 65536;
    i32 %540 = load i32* %15;
    i32 %541 = sub i32 %539, i32 %540;
    ubr ^while.header16;
  ^while.header53:
    i32 %542 = phi [^while.header46, i32 %440] [^b63, i32 %792];
    i32 %543 = phi [^while.header46, i32 %439] [^b63, i32 %791];
    i32 %544 = phi [^while.header46, i32 0] [^b63, i32 %790];
    i32 %545 = phi [^while.header46, i32 0] [^b63, i32 %793];
    i1 %546 = icmp slt i32 %545, i32 16;
    cbr i1 %546(prob = 0.97), ^while.body30, ^while.header62;
  ^if.else24:
    i32 %547 = load i32* %1;
    i32 %548 = mul i32 %460, i32 %547;
    ubr ^while.header67;
  ^if.else25:
    i32 %549 = load i32* %1;
    i32 %550 = mul i32 %465, i32 %549;
    ubr ^while.header68;
  ^b49:
    i32 %551 = phi [^while.body23, i32 %371] [^if.then32, i32 %514];
    i32 %552 = sdiv i32 %370, i32 2;
    i32 %553 = sdiv i32 %369, i32 2;
    i32 %554 = add i32 %372, i32 1;
    ubr ^while.header45;
  ^while.body24:
    i32 %555 = and i32 %455, i32 %456;
    i1 %556 = ztrunc i32 %555 to i1;
    cbr i1 %556(prob = 0.5), ^if.then39, ^b53;
  ^while.body25:
    i32 %557 = and i32 %461, i32 %462;
    i1 %558 = ztrunc i32 %557 to i1;
    cbr i1 %558(prob = 0.5), ^if.then40, ^b54;
  ^while.body26:
    i32 %559 = and i32 %466, i32 %467;
    i1 %560 = ztrunc i32 %559 to i1;
    cbr i1 %560(prob = 0.5), ^if.then41, ^b55;
  ^while.body27:
    i32 %561 = and i32 %472, i32 %473;
    i1 %562 = ztrunc i32 %561 to i1;
    cbr i1 %562(prob = 0.5), ^if.then42, ^b56;
  ^while.body28:
    i32 %563 = and i32 %476, i32 %477;
    i1 %564 = ztrunc i32 %563 to i1;
    cbr i1 %564(prob = 0.5), ^if.then43, ^b57;
  ^while.body29:
    i1 %565 = ztrunc i32 %450 to i1;
    cbr i1 %565(prob = 0.5), ^if.then44, ^if.else31;
  ^if.else26:
    i1 %566 = ztrunc i32 %333 to i1;
    cbr i1 %566(prob = 0.5), ^if.then37, ^b51;
  ^if.else27:
    i1 %567 = ztrunc i32 %338 to i1;
    cbr i1 %567(prob = 0.5), ^if.then38, ^b52;
  ^while.header54:
    i32 %568 = phi [^b36, i32 %191] [^while.header82, i32 %653];
    i32 %569 = phi [^b36, i32 %191] [^while.header82, i32 %963];
    i1 %570 = icmp neq i32 %569, i32 0;
    cbr i1 %570(prob = 0.97), ^while.header60, ^if.else32;
  ^while.header55:
    i32 %571 = phi [^b39, i32 %262] [^while.header83, i32 %658];
    i32 %572 = phi [^b39, i32 %261] [^while.header83, i32 %966];
    i1 %573 = icmp neq i32 %572, i32 0;
    cbr i1 %573(prob = 0.97), ^while.header61, ^b47;
  ^if.else28:
    i32 %574 = load i32* %1;
    i32 %575 = sdiv i32 %120, i32 %574;
    ubr ^while.header15;
  ^if.else29:
    i32 %576 = load i32* %1;
    i32 %577 = sdiv i32 %125, i32 %576;
    ubr ^while.header16;
  ^while.header56:
    i32 %578 = phi [^b40, i32 %277] [^while.header84, i32 %670];
    i32 %579 = phi [^b40, i32 %276] [^while.header84, i32 %973];
    i1 %580 = icmp neq i32 %579, i32 0;
    cbr i1 %580(prob = 0.97), ^while.header63, ^b48;
  ^while.header57:
    i32 %581 = phi [^if.else16, i32 0] [^b60, i32 %723];
    i32 %582 = phi [^if.else16, i32 65535] [^b60, i32 %725];
    i32 %583 = phi [^if.else16, i32 %415] [^b60, i32 %724];
    i32 %584 = phi [^if.else16, i32 0] [^b60, i32 %726];
    i1 %585 = icmp slt i32 %584, i32 16;
    cbr i1 %585(prob = 0.97), ^while.body31, ^while.header25;
  ^while.header58:
    i32 %586 = phi [^while.header47, i32 0] [^b61, i32 %735];
    i32 %587 = phi [^while.header47, i32 %362] [^b61, i32 %737];
    i32 %588 = phi [^while.header47, i32 %361] [^b61, i32 %736];
    i32 %589 = phi [^while.header47, i32 0] [^b61, i32 %738];
    i1 %590 = icmp slt i32 %589, i32 16;
    cbr i1 %590(prob = 0.97), ^while.body32, ^if.else30;
  ^b50:
    i1 %591 = icmp neq i32 %457, i32 0;
    cbr i1 %591(prob = 0.5), ^while.header66, ^b58;
  ^while.header59:
    i32 %592 = phi [^if.else19, i32 65535] [^b62, i32 %741];
    i32 %593 = phi [^if.else19, i32 %443] [^b62, i32 %740];
    i32 %594 = phi [^if.else19, i32 0] [^b62, i32 %739];
    i32 %595 = phi [^if.else19, i32 0] [^b62, i32 %742];
    i1 %596 = icmp slt i32 %595, i32 16;
    cbr i1 %596(prob = 0.97), ^while.body33, ^while.header27;
  ^if.then37:
    i32* %597 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %336];
    i32 %598 = load i32* %597;
    i32 %599 = add i32 %335, i32 %598;
    ubr ^b51;
  ^if.then38:
    i32* %600 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %341];
    i32 %601 = load i32* %600;
    i32 %602 = add i32 %340, i32 %601;
    ubr ^b52;
  ^b51:
    i32 %603 = phi [^if.then33, i32 %335] [^if.else26, i32 %335] [^if.then37, i32 %599];
    i32 %604 = sdiv i32 %334, i32 2;
    i32 %605 = sdiv i32 %333, i32 2;
    i32 %606 = add i32 %336, i32 1;
    ubr ^while.header38;
  ^b52:
    i32 %607 = phi [^if.then34, i32 %340] [^if.else27, i32 %340] [^if.then38, i32 %602];
    i32 %608 = sdiv i32 %339, i32 2;
    i32 %609 = sdiv i32 %338, i32 2;
    i32 %610 = add i32 %341, i32 1;
    ubr ^while.header39;
  ^if.then39:
    i32* %611 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %458];
    i32 %612 = load i32* %611;
    i32 %613 = add i32 %457, i32 %612;
    ubr ^b53;
  ^if.then40:
    i32* %614 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %463];
    i32 %615 = load i32* %614;
    i32 %616 = add i32 %460, i32 %615;
    ubr ^b54;
  ^if.then41:
    i32* %617 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %468];
    i32 %618 = load i32* %617;
    i32 %619 = add i32 %465, i32 %618;
    ubr ^b55;
  ^if.then42:
    i32* %620 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %474];
    i32 %621 = load i32* %620;
    i32 %622 = add i32 %471, i32 %621;
    ubr ^b56;
  ^if.then43:
    i32* %623 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %479];
    i32 %624 = load i32* %623;
    i32 %625 = add i32 %478, i32 %624;
    ubr ^b57;
  ^while.body30:
    i1 %626 = ztrunc i32 %543 to i1;
    cbr i1 %626(prob = 0.5), ^if.then47, ^if.else34;
  ^b53:
    i32 %627 = phi [^while.body24, i32 %457] [^if.then39, i32 %613];
    i32 %628 = sdiv i32 %456, i32 2;
    i32 %629 = add i32 %458, i32 1;
    ubr ^while.header48;
  ^b54:
    i32 %630 = phi [^while.body25, i32 %460] [^if.then40, i32 %616];
    i32 %631 = sdiv i32 %462, i32 2;
    i32 %632 = sdiv i32 %461, i32 2;
    i32 %633 = add i32 %463, i32 1;
    ubr ^while.header49;
  ^b55:
    i32 %634 = phi [^while.body26, i32 %465] [^if.then41, i32 %619];
    i32 %635 = sdiv i32 %467, i32 2;
    i32 %636 = sdiv i32 %466, i32 2;
    i32 %637 = add i32 %468, i32 1;
    ubr ^while.header50;
  ^b56:
    i32 %638 = phi [^while.body27, i32 %471] [^if.then42, i32 %622];
    i32 %639 = sdiv i32 %473, i32 2;
    i32 %640 = sdiv i32 %472, i32 2;
    i32 %641 = add i32 %474, i32 1;
    ubr ^while.header51;
  ^b57:
    i32 %642 = phi [^while.body28, i32 %478] [^if.then43, i32 %625];
    i32 %643 = sdiv i32 %477, i32 2;
    i32 %644 = sdiv i32 %476, i32 2;
    i32 %645 = add i32 %479, i32 1;
    ubr ^while.header52;
  ^while.body31:
    i32 %646 = and i32 %582, i32 %583;
    i1 %647 = ztrunc i32 %646 to i1;
    cbr i1 %647(prob = 0.5), ^if.then46, ^b60;
  ^if.then44:
    i32 %648 = and i32 %449, i32 1;
    i1 %649 = icmp eq i32 %648, i32 0;
    cbr i1 %649(prob = 0.5), ^if.then45, ^b59;
  ^b58:
    i32 %650 = phi [^b50, i32 %365] [^while.header66, i32 %684];
    ubr ^while.header75;
  ^while.header60:
    i32 %651 = phi [^while.header54, i32 %569] [^b67, i32 %892];
    i32 %652 = phi [^while.header54, i32 %568] [^b67, i32 %891];
    i32 %653 = phi [^while.header54, i32 0] [^b67, i32 %890];
    i32 %654 = phi [^while.header54, i32 0] [^b67, i32 %893];
    i1 %655 = icmp slt i32 %654, i32 16;
    cbr i1 %655(prob = 0.97), ^while.body35, ^while.header70;
  ^while.header61:
    i32 %656 = phi [^while.header55, i32 %572] [^b68, i32 %896];
    i32 %657 = phi [^while.header55, i32 %571] [^b68, i32 %895];
    i32 %658 = phi [^while.header55, i32 0] [^b68, i32 %894];
    i32 %659 = phi [^while.header55, i32 0] [^b68, i32 %897];
    i1 %660 = icmp slt i32 %659, i32 16;
    cbr i1 %660(prob = 0.97), ^while.body36, ^while.header71;
  ^if.else30:
    i32 %661 = load i32* %1;
    i32 %662 = mul i32 %586, i32 %661;
    ubr ^while.header76;
  ^while.header62:
    i32 %663 = phi [^while.header53, i32 %440] [^b64, i32 %805];
    i32 %664 = phi [^while.header53, i32 %439] [^b64, i32 %804];
    i32 %665 = phi [^while.header53, i32 0] [^b64, i32 %803];
    i32 %666 = phi [^while.header53, i32 0] [^b64, i32 %806];
    i1 %667 = icmp slt i32 %666, i32 16;
    cbr i1 %667(prob = 0.97), ^while.body34, ^if.else33;
  ^while.header63:
    i32 %668 = phi [^while.header56, i32 %579] [^b69, i32 %900];
    i32 %669 = phi [^while.header56, i32 %578] [^b69, i32 %899];
    i32 %670 = phi [^while.header56, i32 0] [^b69, i32 %898];
    i32 %671 = phi [^while.header56, i32 0] [^b69, i32 %901];
    i1 %672 = icmp slt i32 %671, i32 16;
    cbr i1 %672(prob = 0.97), ^while.body37, ^while.header74;
  ^while.body32:
    i32 %673 = and i32 %587, i32 %588;
    i1 %674 = ztrunc i32 %673 to i1;
    cbr i1 %674(prob = 0.5), ^if.then49, ^b61;
  ^while.body33:
    i32 %675 = and i32 %592, i32 %593;
    i1 %676 = ztrunc i32 %675 to i1;
    cbr i1 %676(prob = 0.5), ^if.then50, ^b62;
  ^if.else31:
    i1 %677 = ztrunc i32 %449 to i1;
    cbr i1 %677(prob = 0.5), ^if.then45, ^b59;
  ^while.header64:
    i32 %678 = phi [^b47, i32 %261] [^while.header86, i32 %749];
    i32 %679 = phi [^b47, i32 %261] [^while.header86, i32 %1043];
    i1 %680 = icmp neq i32 %679, i32 0;
    cbr i1 %680(prob = 0.97), ^while.header69, ^if.else36;
  ^while.header65:
    i32 %681 = phi [^b48, i32 %276] [^while.header87, i32 %764];
    i32 %682 = phi [^b48, i32 %276] [^while.header87, i32 %1048];
    i1 %683 = icmp neq i32 %682, i32 0;
    cbr i1 %683(prob = 0.97), ^while.header72, ^if.else37;
  ^while.header66:
    i32 %684 = phi [^b50, i32 %365] [^while.header88, i32 %769];
    i32 %685 = phi [^b50, i32 %364] [^while.header88, i32 %1053];
    i1 %686 = icmp neq i32 %685, i32 0;
    cbr i1 %686(prob = 0.97), ^while.header73, ^b58;
  ^if.else32:
    i1 %687 = icmp sgt i32 %193, i32 32767;
    cbr i1 %687(prob = 0.5), ^if.then48, ^if.else35;
  ^while.header67:
    i32 %688 = phi [^if.else24, i32 0] [^b65, i32 %829];
    i32 %689 = phi [^if.else24, i32 65535] [^b65, i32 %831];
    i32 %690 = phi [^if.else24, i32 %548] [^b65, i32 %830];
    i32 %691 = phi [^if.else24, i32 0] [^b65, i32 %832];
    i1 %692 = icmp slt i32 %691, i32 16;
    cbr i1 %692(prob = 0.97), ^while.body38, ^while.header32;
  ^while.header68:
    i32 %693 = phi [^if.else25, i32 0] [^b66, i32 %833];
    i32 %694 = phi [^if.else25, i32 65535] [^b66, i32 %835];
    i32 %695 = phi [^if.else25, i32 %550] [^b66, i32 %834];
    i32 %696 = phi [^if.else25, i32 0] [^b66, i32 %836];
    i1 %697 = icmp slt i32 %696, i32 16;
    cbr i1 %697(prob = 0.97), ^while.body39, ^while.header33;
  ^if.then45:
    i32* %698 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %452];
    i32 %699 = load i32* %698;
    i32 %700 = add i32 %451, i32 %699;
    ubr ^b59;
  ^if.then46:
    i32* %701 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %584];
    i32 %702 = load i32* %701;
    i32 %703 = add i32 %581, i32 %702;
    ubr ^b60;
  ^b59:
    i32 %704 = phi [^if.then44, i32 %451] [^if.else31, i32 %451] [^if.then45, i32 %700];
    i32 %705 = sdiv i32 %450, i32 2;
    i32 %706 = sdiv i32 %449, i32 2;
    i32 %707 = add i32 %452, i32 1;
    ubr ^while.header47;
  ^if.then47:
    i32 %708 = and i32 %542, i32 1;
    i1 %709 = icmp eq i32 %708, i32 0;
    cbr i1 %709(prob = 0.5), ^if.then51, ^b63;
  ^if.then48:
    i32 %710 = load i32* %1;
    i32 %711 = sdiv i32 %193, i32 %710;
    i32 %712 = add i32 %711, i32 65536;
    i32 %713 = load i32* %15;
    i32 %714 = sub i32 %712, i32 %713;
    ubr ^while.header22;
  ^if.else33:
    i32 %715 = load i32* %1;
    i32 %716 = mul i32 %665, i32 %715;
    ubr ^while.header77;
  ^if.then49:
    i32* %717 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %589];
    i32 %718 = load i32* %717;
    i32 %719 = add i32 %586, i32 %718;
    ubr ^b61;
  ^if.then50:
    i32* %720 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %595];
    i32 %721 = load i32* %720;
    i32 %722 = add i32 %594, i32 %721;
    ubr ^b62;
  ^b60:
    i32 %723 = phi [^while.body31, i32 %581] [^if.then46, i32 %703];
    i32 %724 = sdiv i32 %583, i32 2;
    i32 %725 = sdiv i32 %582, i32 2;
    i32 %726 = add i32 %584, i32 1;
    ubr ^while.header57;
  ^while.body34:
    i32 %727 = and i32 %663, i32 %664;
    i1 %728 = ztrunc i32 %727 to i1;
    cbr i1 %728(prob = 0.5), ^if.then52, ^b64;
  ^while.body35:
    i1 %729 = ztrunc i32 %652 to i1;
    cbr i1 %729(prob = 0.5), ^if.then55, ^if.else41;
  ^while.body36:
    i1 %730 = ztrunc i32 %657 to i1;
    cbr i1 %730(prob = 0.5), ^if.then56, ^if.else42;
  ^if.else34:
    i1 %731 = ztrunc i32 %542 to i1;
    cbr i1 %731(prob = 0.5), ^if.then51, ^b63;
  ^if.else35:
    i32 %732 = load i32* %1;
    i32 %733 = sdiv i32 %193, i32 %732;
    ubr ^while.header22;
  ^while.body37:
    i1 %734 = ztrunc i32 %669 to i1;
    cbr i1 %734(prob = 0.5), ^if.then58, ^if.else44;
  ^b61:
    i32 %735 = phi [^while.body32, i32 %586] [^if.then49, i32 %719];
    i32 %736 = sdiv i32 %588, i32 2;
    i32 %737 = sdiv i32 %587, i32 2;
    i32 %738 = add i32 %589, i32 1;
    ubr ^while.header58;
  ^b62:
    i32 %739 = phi [^while.body33, i32 %594] [^if.then50, i32 %722];
    i32 %740 = sdiv i32 %593, i32 2;
    i32 %741 = sdiv i32 %592, i32 2;
    i32 %742 = add i32 %595, i32 1;
    ubr ^while.header59;
  ^while.body38:
    i32 %743 = and i32 %689, i32 %690;
    i1 %744 = ztrunc i32 %743 to i1;
    cbr i1 %744(prob = 0.5), ^if.then53, ^b65;
  ^while.body39:
    i32 %745 = and i32 %694, i32 %695;
    i1 %746 = ztrunc i32 %745 to i1;
    cbr i1 %746(prob = 0.5), ^if.then54, ^b66;
  ^while.header69:
    i32 %747 = phi [^while.header64, i32 %679] [^b74, i32 %995];
    i32 %748 = phi [^while.header64, i32 %678] [^b74, i32 %994];
    i32 %749 = phi [^while.header64, i32 0] [^b74, i32 %993];
    i32 %750 = phi [^while.header64, i32 0] [^b74, i32 %996];
    i1 %751 = icmp slt i32 %750, i32 16;
    cbr i1 %751(prob = 0.97), ^while.body43, ^while.header78;
  ^while.header70:
    i32 %752 = phi [^while.header60, i32 0] [^b70, i32 %914];
    i32 %753 = phi [^while.header60, i32 %569] [^b70, i32 %916];
    i32 %754 = phi [^while.header60, i32 %568] [^b70, i32 %915];
    i32 %755 = phi [^while.header60, i32 0] [^b70, i32 %917];
    i1 %756 = icmp slt i32 %755, i32 16;
    cbr i1 %756(prob = 0.97), ^while.body40, ^if.else38;
  ^while.header71:
    i32 %757 = phi [^while.header61, i32 %572] [^b71, i32 %920];
    i32 %758 = phi [^while.header61, i32 %571] [^b71, i32 %919];
    i32 %759 = phi [^while.header61, i32 0] [^b71, i32 %918];
    i32 %760 = phi [^while.header61, i32 0] [^b71, i32 %921];
    i1 %761 = icmp slt i32 %760, i32 16;
    cbr i1 %761(prob = 0.97), ^while.body41, ^if.else39;
  ^while.header72:
    i32 %762 = phi [^while.header65, i32 %682] [^b75, i32 %999];
    i32 %763 = phi [^while.header65, i32 %681] [^b75, i32 %998];
    i32 %764 = phi [^while.header65, i32 0] [^b75, i32 %997];
    i32 %765 = phi [^while.header65, i32 0] [^b75, i32 %1000];
    i1 %766 = icmp slt i32 %765, i32 16;
    cbr i1 %766(prob = 0.97), ^while.body44, ^while.header80;
  ^while.header73:
    i32 %767 = phi [^while.header66, i32 %685] [^b76, i32 %1003];
    i32 %768 = phi [^while.header66, i32 %684] [^b76, i32 %1002];
    i32 %769 = phi [^while.header66, i32 0] [^b76, i32 %1001];
    i32 %770 = phi [^while.header66, i32 0] [^b76, i32 %1004];
    i1 %771 = icmp slt i32 %770, i32 16;
    cbr i1 %771(prob = 0.97), ^while.body45, ^while.header81;
  ^while.header74:
    i32 %772 = phi [^while.header63, i32 0] [^b72, i32 %922];
    i32 %773 = phi [^while.header63, i32 %579] [^b72, i32 %924];
    i32 %774 = phi [^while.header63, i32 %578] [^b72, i32 %923];
    i32 %775 = phi [^while.header63, i32 0] [^b72, i32 %925];
    i1 %776 = icmp slt i32 %775, i32 16;
    cbr i1 %776(prob = 0.97), ^while.body42, ^if.else40;
  ^while.header75:
    i32 %777 = phi [^b58, i32 %364] [^while.header89, i32 %865];
    i32 %778 = phi [^b58, i32 %364] [^while.header89, i32 %1101];
    i1 %779 = icmp neq i32 %778, i32 0;
    cbr i1 %779(prob = 0.97), ^while.header79, ^if.else46;
  ^if.else36:
    i1 %780 = icmp sgt i32 %263, i32 32767;
    cbr i1 %780(prob = 0.5), ^if.then57, ^if.else43;
  ^while.header76:
    i32 %781 = phi [^if.else30, i32 0] [^b73, i32 %945];
    i32 %782 = phi [^if.else30, i32 65535] [^b73, i32 %947];
    i32 %783 = phi [^if.else30, i32 %662] [^b73, i32 %946];
    i32 %784 = phi [^if.else30, i32 0] [^b73, i32 %948];
    i1 %785 = icmp slt i32 %784, i32 16;
    cbr i1 %785(prob = 0.97), ^while.body46, ^while.header43;
  ^if.else37:
    i1 %786 = icmp sgt i32 %278, i32 32767;
    cbr i1 %786(prob = 0.5), ^if.then59, ^if.else45;
  ^if.then51:
    i32* %787 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %545];
    i32 %788 = load i32* %787;
    i32 %789 = add i32 %544, i32 %788;
    ubr ^b63;
  ^b63:
    i32 %790 = phi [^if.then47, i32 %544] [^if.else34, i32 %544] [^if.then51, i32 %789];
    i32 %791 = sdiv i32 %543, i32 2;
    i32 %792 = sdiv i32 %542, i32 2;
    i32 %793 = add i32 %545, i32 1;
    ubr ^while.header53;
  ^if.then52:
    i32* %794 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %666];
    i32 %795 = load i32* %794;
    i32 %796 = add i32 %665, i32 %795;
    ubr ^b64;
  ^if.then53:
    i32* %797 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %691];
    i32 %798 = load i32* %797;
    i32 %799 = add i32 %688, i32 %798;
    ubr ^b65;
  ^if.then54:
    i32* %800 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %696];
    i32 %801 = load i32* %800;
    i32 %802 = add i32 %693, i32 %801;
    ubr ^b66;
  ^b64:
    i32 %803 = phi [^while.body34, i32 %665] [^if.then52, i32 %796];
    i32 %804 = sdiv i32 %664, i32 2;
    i32 %805 = sdiv i32 %663, i32 2;
    i32 %806 = add i32 %666, i32 1;
    ubr ^while.header62;
  ^if.then55:
    i32 %807 = and i32 %651, i32 1;
    i1 %808 = icmp eq i32 %807, i32 0;
    cbr i1 %808(prob = 0.5), ^if.then60, ^b67;
  ^if.then56:
    i32 %809 = and i32 %656, i32 1;
    i1 %810 = icmp eq i32 %809, i32 0;
    cbr i1 %810(prob = 0.5), ^if.then61, ^b68;
  ^if.then57:
    i32 %811 = load i32* %1;
    i32 %812 = sdiv i32 %263, i32 %811;
    i32 %813 = add i32 %812, i32 65536;
    i32 %814 = load i32* %15;
    i32 %815 = sub i32 %813, i32 %814;
    ubr ^while.header30;
  ^if.then58:
    i32 %816 = and i32 %668, i32 1;
    i1 %817 = icmp eq i32 %816, i32 0;
    cbr i1 %817(prob = 0.5), ^if.then62, ^b69;
  ^if.else38:
    i32 %818 = load i32* %1;
    i32 %819 = mul i32 %752, i32 %818;
    ubr ^while.header82;
  ^if.else39:
    i32 %820 = load i32* %1;
    i32 %821 = mul i32 %759, i32 %820;
    ubr ^while.header83;
  ^if.then59:
    i32 %822 = load i32* %1;
    i32 %823 = sdiv i32 %278, i32 %822;
    i32 %824 = add i32 %823, i32 65536;
    i32 %825 = load i32* %15;
    i32 %826 = sub i32 %824, i32 %825;
    ubr ^while.header34;
  ^if.else40:
    i32 %827 = load i32* %1;
    i32 %828 = mul i32 %772, i32 %827;
    ubr ^while.header84;
  ^b65:
    i32 %829 = phi [^while.body38, i32 %688] [^if.then53, i32 %799];
    i32 %830 = sdiv i32 %690, i32 2;
    i32 %831 = sdiv i32 %689, i32 2;
    i32 %832 = add i32 %691, i32 1;
    ubr ^while.header67;
  ^b66:
    i32 %833 = phi [^while.body39, i32 %693] [^if.then54, i32 %802];
    i32 %834 = sdiv i32 %695, i32 2;
    i32 %835 = sdiv i32 %694, i32 2;
    i32 %836 = add i32 %696, i32 1;
    ubr ^while.header68;
  ^while.body40:
    i32 %837 = and i32 %753, i32 %754;
    i1 %838 = ztrunc i32 %837 to i1;
    cbr i1 %838(prob = 0.5), ^if.then63, ^b70;
  ^while.body41:
    i32 %839 = and i32 %757, i32 %758;
    i1 %840 = ztrunc i32 %839 to i1;
    cbr i1 %840(prob = 0.5), ^if.then64, ^b71;
  ^while.body42:
    i32 %841 = and i32 %773, i32 %774;
    i1 %842 = ztrunc i32 %841 to i1;
    cbr i1 %842(prob = 0.5), ^if.then65, ^b72;
  ^while.body43:
    i1 %843 = ztrunc i32 %748 to i1;
    cbr i1 %843(prob = 0.5), ^if.then67, ^if.else50;
  ^if.else41:
    i1 %844 = ztrunc i32 %651 to i1;
    cbr i1 %844(prob = 0.5), ^if.then60, ^b67;
  ^if.else42:
    i1 %845 = ztrunc i32 %656 to i1;
    cbr i1 %845(prob = 0.5), ^if.then61, ^b68;
  ^if.else43:
    i32 %846 = load i32* %1;
    i32 %847 = sdiv i32 %263, i32 %846;
    ubr ^while.header30;
  ^while.body44:
    i1 %848 = ztrunc i32 %763 to i1;
    cbr i1 %848(prob = 0.5), ^if.then68, ^if.else51;
  ^while.body45:
    i1 %849 = ztrunc i32 %768 to i1;
    cbr i1 %849(prob = 0.5), ^if.then69, ^if.else52;
  ^if.else44:
    i1 %850 = ztrunc i32 %668 to i1;
    cbr i1 %850(prob = 0.5), ^if.then62, ^b69;
  ^if.else45:
    i32 %851 = load i32* %1;
    i32 %852 = sdiv i32 %278, i32 %851;
    ubr ^while.header34;
  ^while.header77:
    i32 %853 = phi [^if.else33, i32 0] [^b77, i32 %1014];
    i32 %854 = phi [^if.else33, i32 65535] [^b77, i32 %1016];
    i32 %855 = phi [^if.else33, i32 %716] [^b77, i32 %1015];
    i32 %856 = phi [^if.else33, i32 0] [^b77, i32 %1017];
    i1 %857 = icmp slt i32 %856, i32 16;
    cbr i1 %857(prob = 0.97), ^while.body47, ^while.header46;
  ^while.body46:
    i32 %858 = and i32 %782, i32 %783;
    i1 %859 = ztrunc i32 %858 to i1;
    cbr i1 %859(prob = 0.5), ^if.then66, ^b73;
  ^while.header78:
    i32 %860 = phi [^while.header69, i32 %679] [^b78, i32 %1020];
    i32 %861 = phi [^while.header69, i32 %678] [^b78, i32 %1019];
    i32 %862 = phi [^while.header69, i32 0] [^b78, i32 %1018];
    i32 %863 = phi [^while.header69, i32 0] [^b78, i32 %1021];
    i1 %864 = icmp slt i32 %863, i32 16;
    cbr i1 %864(prob = 0.97), ^while.body48, ^if.else47;
  ^while.header79:
    i32 %865 = phi [^while.header75, i32 0] [^b81, i32 %1070];
    i32 %866 = phi [^while.header75, i32 %778] [^b81, i32 %1072];
    i32 %867 = phi [^while.header75, i32 %777] [^b81, i32 %1071];
    i32 %868 = phi [^while.header75, i32 0] [^b81, i32 %1073];
    i1 %869 = icmp slt i32 %868, i32 16;
    cbr i1 %869(prob = 0.97), ^while.body51, ^while.header85;
  ^while.header80:
    i32 %870 = phi [^while.header72, i32 %682] [^b79, i32 %1024];
    i32 %871 = phi [^while.header72, i32 %681] [^b79, i32 %1023];
    i32 %872 = phi [^while.header72, i32 0] [^b79, i32 %1022];
    i32 %873 = phi [^while.header72, i32 0] [^b79, i32 %1025];
    i1 %874 = icmp slt i32 %873, i32 16;
    cbr i1 %874(prob = 0.97), ^while.body49, ^if.else48;
  ^while.header81:
    i32 %875 = phi [^while.header73, i32 %685] [^b80, i32 %1028];
    i32 %876 = phi [^while.header73, i32 %684] [^b80, i32 %1027];
    i32 %877 = phi [^while.header73, i32 0] [^b80, i32 %1026];
    i32 %878 = phi [^while.header73, i32 0] [^b80, i32 %1029];
    i1 %879 = icmp slt i32 %878, i32 16;
    cbr i1 %879(prob = 0.97), ^while.body50, ^if.else49;
  ^if.else46:
    i1 %880 = icmp sgt i32 %366, i32 32767;
    cbr i1 %880(prob = 0.5), ^if.then70, ^if.else53;
  ^if.then60:
    i32* %881 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %654];
    i32 %882 = load i32* %881;
    i32 %883 = add i32 %653, i32 %882;
    ubr ^b67;
  ^if.then61:
    i32* %884 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %659];
    i32 %885 = load i32* %884;
    i32 %886 = add i32 %658, i32 %885;
    ubr ^b68;
  ^if.then62:
    i32* %887 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %671];
    i32 %888 = load i32* %887;
    i32 %889 = add i32 %670, i32 %888;
    ubr ^b69;
  ^b67:
    i32 %890 = phi [^if.then55, i32 %653] [^if.else41, i32 %653] [^if.then60, i32 %883];
    i32 %891 = sdiv i32 %652, i32 2;
    i32 %892 = sdiv i32 %651, i32 2;
    i32 %893 = add i32 %654, i32 1;
    ubr ^while.header60;
  ^b68:
    i32 %894 = phi [^if.then56, i32 %658] [^if.else42, i32 %658] [^if.then61, i32 %886];
    i32 %895 = sdiv i32 %657, i32 2;
    i32 %896 = sdiv i32 %656, i32 2;
    i32 %897 = add i32 %659, i32 1;
    ubr ^while.header61;
  ^b69:
    i32 %898 = phi [^if.then58, i32 %670] [^if.else44, i32 %670] [^if.then62, i32 %889];
    i32 %899 = sdiv i32 %669, i32 2;
    i32 %900 = sdiv i32 %668, i32 2;
    i32 %901 = add i32 %671, i32 1;
    ubr ^while.header63;
  ^if.then63:
    i32* %902 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %755];
    i32 %903 = load i32* %902;
    i32 %904 = add i32 %752, i32 %903;
    ubr ^b70;
  ^if.then64:
    i32* %905 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %760];
    i32 %906 = load i32* %905;
    i32 %907 = add i32 %759, i32 %906;
    ubr ^b71;
  ^if.then65:
    i32* %908 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %775];
    i32 %909 = load i32* %908;
    i32 %910 = add i32 %772, i32 %909;
    ubr ^b72;
  ^if.then66:
    i32* %911 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %784];
    i32 %912 = load i32* %911;
    i32 %913 = add i32 %781, i32 %912;
    ubr ^b73;
  ^b70:
    i32 %914 = phi [^while.body40, i32 %752] [^if.then63, i32 %904];
    i32 %915 = sdiv i32 %754, i32 2;
    i32 %916 = sdiv i32 %753, i32 2;
    i32 %917 = add i32 %755, i32 1;
    ubr ^while.header70;
  ^b71:
    i32 %918 = phi [^while.body41, i32 %759] [^if.then64, i32 %907];
    i32 %919 = sdiv i32 %758, i32 2;
    i32 %920 = sdiv i32 %757, i32 2;
    i32 %921 = add i32 %760, i32 1;
    ubr ^while.header71;
  ^b72:
    i32 %922 = phi [^while.body42, i32 %772] [^if.then65, i32 %910];
    i32 %923 = sdiv i32 %774, i32 2;
    i32 %924 = sdiv i32 %773, i32 2;
    i32 %925 = add i32 %775, i32 1;
    ubr ^while.header74;
  ^while.body47:
    i32 %926 = and i32 %854, i32 %855;
    i1 %927 = ztrunc i32 %926 to i1;
    cbr i1 %927(prob = 0.5), ^if.then74, ^b77;
  ^if.then67:
    i32 %928 = and i32 %747, i32 1;
    i1 %929 = icmp eq i32 %928, i32 0;
    cbr i1 %929(prob = 0.5), ^if.then71, ^b74;
  ^if.then68:
    i32 %930 = and i32 %762, i32 1;
    i1 %931 = icmp eq i32 %930, i32 0;
    cbr i1 %931(prob = 0.5), ^if.then72, ^b75;
  ^if.then69:
    i32 %932 = and i32 %767, i32 1;
    i1 %933 = icmp eq i32 %932, i32 0;
    cbr i1 %933(prob = 0.5), ^if.then73, ^b76;
  ^if.else47:
    i32 %934 = load i32* %1;
    i32 %935 = mul i32 %862, i32 %934;
    ubr ^while.header86;
  ^if.then70:
    i32 %936 = load i32* %1;
    i32 %937 = sdiv i32 %366, i32 %936;
    i32 %938 = add i32 %937, i32 65536;
    i32 %939 = load i32* %15;
    i32 %940 = sub i32 %938, i32 %939;
    ubr ^while.header44;
  ^if.else48:
    i32 %941 = load i32* %1;
    i32 %942 = mul i32 %872, i32 %941;
    ubr ^while.header87;
  ^if.else49:
    i32 %943 = load i32* %1;
    i32 %944 = mul i32 %877, i32 %943;
    ubr ^while.header88;
  ^b73:
    i32 %945 = phi [^while.body46, i32 %781] [^if.then66, i32 %913];
    i32 %946 = sdiv i32 %783, i32 2;
    i32 %947 = sdiv i32 %782, i32 2;
    i32 %948 = add i32 %784, i32 1;
    ubr ^while.header76;
  ^while.body48:
    i32 %949 = and i32 %860, i32 %861;
    i1 %950 = ztrunc i32 %949 to i1;
    cbr i1 %950(prob = 0.5), ^if.then75, ^b78;
  ^while.body49:
    i32 %951 = and i32 %870, i32 %871;
    i1 %952 = ztrunc i32 %951 to i1;
    cbr i1 %952(prob = 0.5), ^if.then76, ^b79;
  ^while.body50:
    i32 %953 = and i32 %875, i32 %876;
    i1 %954 = ztrunc i32 %953 to i1;
    cbr i1 %954(prob = 0.5), ^if.then77, ^b80;
  ^if.else50:
    i1 %955 = ztrunc i32 %747 to i1;
    cbr i1 %955(prob = 0.5), ^if.then71, ^b74;
  ^while.body51:
    i1 %956 = ztrunc i32 %867 to i1;
    cbr i1 %956(prob = 0.5), ^if.then78, ^if.else55;
  ^if.else51:
    i1 %957 = ztrunc i32 %762 to i1;
    cbr i1 %957(prob = 0.5), ^if.then72, ^b75;
  ^if.else52:
    i1 %958 = ztrunc i32 %767 to i1;
    cbr i1 %958(prob = 0.5), ^if.then73, ^b76;
  ^if.else53:
    i32 %959 = load i32* %1;
    i32 %960 = sdiv i32 %366, i32 %959;
    ubr ^while.header44;
  ^while.header82:
    i32 %961 = phi [^if.else38, i32 65535] [^b82, i32 %1079];
    i32 %962 = phi [^if.else38, i32 %819] [^b82, i32 %1078];
    i32 %963 = phi [^if.else38, i32 0] [^b82, i32 %1077];
    i32 %964 = phi [^if.else38, i32 0] [^b82, i32 %1080];
    i1 %965 = icmp slt i32 %964, i32 16;
    cbr i1 %965(prob = 0.97), ^while.body52, ^while.header54;
  ^while.header83:
    i32 %966 = phi [^if.else39, i32 0] [^b83, i32 %1081];
    i32 %967 = phi [^if.else39, i32 65535] [^b83, i32 %1083];
    i32 %968 = phi [^if.else39, i32 %821] [^b83, i32 %1082];
    i32 %969 = phi [^if.else39, i32 0] [^b83, i32 %1084];
    i1 %970 = icmp slt i32 %969, i32 16;
    cbr i1 %970(prob = 0.97), ^while.body53, ^while.header55;
  ^while.header84:
    i32 %971 = phi [^if.else40, i32 65535] [^b84, i32 %1087];
    i32 %972 = phi [^if.else40, i32 %828] [^b84, i32 %1086];
    i32 %973 = phi [^if.else40, i32 0] [^b84, i32 %1085];
    i32 %974 = phi [^if.else40, i32 0] [^b84, i32 %1088];
    i1 %975 = icmp slt i32 %974, i32 16;
    cbr i1 %975(prob = 0.97), ^while.body54, ^while.header56;
  ^while.header85:
    i32 %976 = phi [^while.header79, i32 0] [^b85, i32 %1089];
    i32 %977 = phi [^while.header79, i32 %778] [^b85, i32 %1091];
    i32 %978 = phi [^while.header79, i32 %777] [^b85, i32 %1090];
    i32 %979 = phi [^while.header79, i32 0] [^b85, i32 %1092];
    i1 %980 = icmp slt i32 %979, i32 16;
    cbr i1 %980(prob = 0.97), ^while.body55, ^if.else54;
  ^if.then71:
    i32* %981 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %750];
    i32 %982 = load i32* %981;
    i32 %983 = add i32 %749, i32 %982;
    ubr ^b74;
  ^if.then72:
    i32* %984 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %765];
    i32 %985 = load i32* %984;
    i32 %986 = add i32 %764, i32 %985;
    ubr ^b75;
  ^if.then73:
    i32* %987 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %770];
    i32 %988 = load i32* %987;
    i32 %989 = add i32 %769, i32 %988;
    ubr ^b76;
  ^if.then74:
    i32* %990 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %856];
    i32 %991 = load i32* %990;
    i32 %992 = add i32 %853, i32 %991;
    ubr ^b77;
  ^b74:
    i32 %993 = phi [^if.then67, i32 %749] [^if.else50, i32 %749] [^if.then71, i32 %983];
    i32 %994 = sdiv i32 %748, i32 2;
    i32 %995 = sdiv i32 %747, i32 2;
    i32 %996 = add i32 %750, i32 1;
    ubr ^while.header69;
  ^b75:
    i32 %997 = phi [^if.then68, i32 %764] [^if.else51, i32 %764] [^if.then72, i32 %986];
    i32 %998 = sdiv i32 %763, i32 2;
    i32 %999 = sdiv i32 %762, i32 2;
    i32 %1000 = add i32 %765, i32 1;
    ubr ^while.header72;
  ^b76:
    i32 %1001 = phi [^if.then69, i32 %769] [^if.else52, i32 %769] [^if.then73, i32 %989];
    i32 %1002 = sdiv i32 %768, i32 2;
    i32 %1003 = sdiv i32 %767, i32 2;
    i32 %1004 = add i32 %770, i32 1;
    ubr ^while.header73;
  ^if.then75:
    i32* %1005 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %863];
    i32 %1006 = load i32* %1005;
    i32 %1007 = add i32 %862, i32 %1006;
    ubr ^b78;
  ^if.then76:
    i32* %1008 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %873];
    i32 %1009 = load i32* %1008;
    i32 %1010 = add i32 %872, i32 %1009;
    ubr ^b79;
  ^if.then77:
    i32* %1011 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %878];
    i32 %1012 = load i32* %1011;
    i32 %1013 = add i32 %877, i32 %1012;
    ubr ^b80;
  ^b77:
    i32 %1014 = phi [^while.body47, i32 %853] [^if.then74, i32 %992];
    i32 %1015 = sdiv i32 %855, i32 2;
    i32 %1016 = sdiv i32 %854, i32 2;
    i32 %1017 = add i32 %856, i32 1;
    ubr ^while.header77;
  ^b78:
    i32 %1018 = phi [^while.body48, i32 %862] [^if.then75, i32 %1007];
    i32 %1019 = sdiv i32 %861, i32 2;
    i32 %1020 = sdiv i32 %860, i32 2;
    i32 %1021 = add i32 %863, i32 1;
    ubr ^while.header78;
  ^b79:
    i32 %1022 = phi [^while.body49, i32 %872] [^if.then76, i32 %1010];
    i32 %1023 = sdiv i32 %871, i32 2;
    i32 %1024 = sdiv i32 %870, i32 2;
    i32 %1025 = add i32 %873, i32 1;
    ubr ^while.header80;
  ^b80:
    i32 %1026 = phi [^while.body50, i32 %877] [^if.then77, i32 %1013];
    i32 %1027 = sdiv i32 %876, i32 2;
    i32 %1028 = sdiv i32 %875, i32 2;
    i32 %1029 = add i32 %878, i32 1;
    ubr ^while.header81;
  ^while.body52:
    i32 %1030 = and i32 %961, i32 %962;
    i1 %1031 = ztrunc i32 %1030 to i1;
    cbr i1 %1031(prob = 0.5), ^if.then80, ^b82;
  ^while.body53:
    i32 %1032 = and i32 %967, i32 %968;
    i1 %1033 = ztrunc i32 %1032 to i1;
    cbr i1 %1033(prob = 0.5), ^if.then81, ^b83;
  ^while.body54:
    i32 %1034 = and i32 %971, i32 %972;
    i1 %1035 = ztrunc i32 %1034 to i1;
    cbr i1 %1035(prob = 0.5), ^if.then82, ^b84;
  ^if.then78:
    i32 %1036 = and i32 %866, i32 1;
    i1 %1037 = icmp eq i32 %1036, i32 0;
    cbr i1 %1037(prob = 0.5), ^if.then79, ^b81;
  ^if.else54:
    i32 %1038 = load i32* %1;
    i32 %1039 = mul i32 %976, i32 %1038;
    ubr ^while.header89;
  ^while.body55:
    i32 %1040 = and i32 %977, i32 %978;
    i1 %1041 = ztrunc i32 %1040 to i1;
    cbr i1 %1041(prob = 0.5), ^if.then83, ^b85;
  ^if.else55:
    i1 %1042 = ztrunc i32 %866 to i1;
    cbr i1 %1042(prob = 0.5), ^if.then79, ^b81;
  ^while.header86:
    i32 %1043 = phi [^if.else47, i32 0] [^b86, i32 %1113];
    i32 %1044 = phi [^if.else47, i32 65535] [^b86, i32 %1115];
    i32 %1045 = phi [^if.else47, i32 %935] [^b86, i32 %1114];
    i32 %1046 = phi [^if.else47, i32 0] [^b86, i32 %1116];
    i1 %1047 = icmp slt i32 %1046, i32 16;
    cbr i1 %1047(prob = 0.97), ^while.body56, ^while.header64;
  ^while.header87:
    i32 %1048 = phi [^if.else48, i32 0] [^b87, i32 %1117];
    i32 %1049 = phi [^if.else48, i32 65535] [^b87, i32 %1119];
    i32 %1050 = phi [^if.else48, i32 %942] [^b87, i32 %1118];
    i32 %1051 = phi [^if.else48, i32 0] [^b87, i32 %1120];
    i1 %1052 = icmp slt i32 %1051, i32 16;
    cbr i1 %1052(prob = 0.97), ^while.body57, ^while.header65;
  ^while.header88:
    i32 %1053 = phi [^if.else49, i32 0] [^b88, i32 %1121];
    i32 %1054 = phi [^if.else49, i32 65535] [^b88, i32 %1123];
    i32 %1055 = phi [^if.else49, i32 %944] [^b88, i32 %1122];
    i32 %1056 = phi [^if.else49, i32 0] [^b88, i32 %1124];
    i1 %1057 = icmp slt i32 %1056, i32 16;
    cbr i1 %1057(prob = 0.97), ^while.body58, ^while.header66;
  ^if.then79:
    i32* %1058 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %868];
    i32 %1059 = load i32* %1058;
    i32 %1060 = add i32 %865, i32 %1059;
    ubr ^b81;
  ^if.then80:
    i32* %1061 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %964];
    i32 %1062 = load i32* %1061;
    i32 %1063 = add i32 %963, i32 %1062;
    ubr ^b82;
  ^if.then81:
    i32* %1064 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %969];
    i32 %1065 = load i32* %1064;
    i32 %1066 = add i32 %966, i32 %1065;
    ubr ^b83;
  ^if.then82:
    i32* %1067 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %974];
    i32 %1068 = load i32* %1067;
    i32 %1069 = add i32 %973, i32 %1068;
    ubr ^b84;
  ^b81:
    i32 %1070 = phi [^if.then78, i32 %865] [^if.else55, i32 %865] [^if.then79, i32 %1060];
    i32 %1071 = sdiv i32 %867, i32 2;
    i32 %1072 = sdiv i32 %866, i32 2;
    i32 %1073 = add i32 %868, i32 1;
    ubr ^while.header79;
  ^if.then83:
    i32* %1074 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %979];
    i32 %1075 = load i32* %1074;
    i32 %1076 = add i32 %976, i32 %1075;
    ubr ^b85;
  ^b82:
    i32 %1077 = phi [^while.body52, i32 %963] [^if.then80, i32 %1063];
    i32 %1078 = sdiv i32 %962, i32 2;
    i32 %1079 = sdiv i32 %961, i32 2;
    i32 %1080 = add i32 %964, i32 1;
    ubr ^while.header82;
  ^b83:
    i32 %1081 = phi [^while.body53, i32 %966] [^if.then81, i32 %1066];
    i32 %1082 = sdiv i32 %968, i32 2;
    i32 %1083 = sdiv i32 %967, i32 2;
    i32 %1084 = add i32 %969, i32 1;
    ubr ^while.header83;
  ^b84:
    i32 %1085 = phi [^while.body54, i32 %973] [^if.then82, i32 %1069];
    i32 %1086 = sdiv i32 %972, i32 2;
    i32 %1087 = sdiv i32 %971, i32 2;
    i32 %1088 = add i32 %974, i32 1;
    ubr ^while.header84;
  ^b85:
    i32 %1089 = phi [^while.body55, i32 %976] [^if.then83, i32 %1076];
    i32 %1090 = sdiv i32 %978, i32 2;
    i32 %1091 = sdiv i32 %977, i32 2;
    i32 %1092 = add i32 %979, i32 1;
    ubr ^while.header85;
  ^while.body56:
    i32 %1093 = and i32 %1044, i32 %1045;
    i1 %1094 = ztrunc i32 %1093 to i1;
    cbr i1 %1094(prob = 0.5), ^if.then84, ^b86;
  ^while.body57:
    i32 %1095 = and i32 %1049, i32 %1050;
    i1 %1096 = ztrunc i32 %1095 to i1;
    cbr i1 %1096(prob = 0.5), ^if.then85, ^b87;
  ^while.body58:
    i32 %1097 = and i32 %1054, i32 %1055;
    i1 %1098 = ztrunc i32 %1097 to i1;
    cbr i1 %1098(prob = 0.5), ^if.then86, ^b88;
  ^while.header89:
    i32 %1099 = phi [^if.else54, i32 65535] [^b89, i32 %1132];
    i32 %1100 = phi [^if.else54, i32 %1039] [^b89, i32 %1131];
    i32 %1101 = phi [^if.else54, i32 0] [^b89, i32 %1130];
    i32 %1102 = phi [^if.else54, i32 0] [^b89, i32 %1133];
    i1 %1103 = icmp slt i32 %1102, i32 16;
    cbr i1 %1103(prob = 0.97), ^while.body59, ^while.header75;
  ^if.then84:
    i32* %1104 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1046];
    i32 %1105 = load i32* %1104;
    i32 %1106 = add i32 %1043, i32 %1105;
    ubr ^b86;
  ^if.then85:
    i32* %1107 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1051];
    i32 %1108 = load i32* %1107;
    i32 %1109 = add i32 %1048, i32 %1108;
    ubr ^b87;
  ^if.then86:
    i32* %1110 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1056];
    i32 %1111 = load i32* %1110;
    i32 %1112 = add i32 %1053, i32 %1111;
    ubr ^b88;
  ^b86:
    i32 %1113 = phi [^while.body56, i32 %1043] [^if.then84, i32 %1106];
    i32 %1114 = sdiv i32 %1045, i32 2;
    i32 %1115 = sdiv i32 %1044, i32 2;
    i32 %1116 = add i32 %1046, i32 1;
    ubr ^while.header86;
  ^b87:
    i32 %1117 = phi [^while.body57, i32 %1048] [^if.then85, i32 %1109];
    i32 %1118 = sdiv i32 %1050, i32 2;
    i32 %1119 = sdiv i32 %1049, i32 2;
    i32 %1120 = add i32 %1051, i32 1;
    ubr ^while.header87;
  ^b88:
    i32 %1121 = phi [^while.body58, i32 %1053] [^if.then86, i32 %1112];
    i32 %1122 = sdiv i32 %1055, i32 2;
    i32 %1123 = sdiv i32 %1054, i32 2;
    i32 %1124 = add i32 %1056, i32 1;
    ubr ^while.header88;
  ^while.body59:
    i32 %1125 = and i32 %1099, i32 %1100;
    i1 %1126 = ztrunc i32 %1125 to i1;
    cbr i1 %1126(prob = 0.5), ^if.then87, ^b89;
  ^if.then87:
    i32* %1127 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1102];
    i32 %1128 = load i32* %1127;
    i32 %1129 = add i32 %1101, i32 %1128;
    ubr ^b89;
  ^b89:
    i32 %1130 = phi [^while.body59, i32 %1101] [^if.then87, i32 %1129];
    i32 %1131 = sdiv i32 %1100, i32 2;
    i32 %1132 = sdiv i32 %1099, i32 2;
    i32 %1133 = add i32 %1102, i32 1;
    ubr ^while.header89;
}
