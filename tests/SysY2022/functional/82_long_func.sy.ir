internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [16 * i32]* %SHIFT_TABLE = alloc [16 * i32], align 8;
    i32* %0 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 0];
    store i32* %0 with i32 1;
    i32* %1 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 1];
    store i32* %1 with i32 2;
    i32* %2 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 2];
    store i32* %2 with i32 4;
    i32* %3 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 3];
    store i32* %3 with i32 8;
    i32* %4 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 4];
    store i32* %4 with i32 16;
    i32* %5 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 5];
    store i32* %5 with i32 32;
    i32* %6 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 6];
    store i32* %6 with i32 64;
    i32* %7 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 7];
    store i32* %7 with i32 128;
    i32* %8 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 8];
    store i32* %8 with i32 256;
    i32* %9 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 9];
    store i32* %9 with i32 512;
    i32* %10 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 10];
    store i32* %10 with i32 1024;
    i32* %11 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 11];
    store i32* %11 with i32 2048;
    i32* %12 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 12];
    store i32* %12 with i32 4096;
    i32* %13 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 13];
    store i32* %13 with i32 8192;
    i32* %14 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 14];
    store i32* %14 with i32 16384;
    i32* %15 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 15];
    store i32* %15 with i32 32768;
    ubr ^while.header;
  ^while.header:
    i32 %16 = phi [^entry, i32 2] [^if.then5, i32 %72] [^if.else1, i32 %72];
    i32 %17 = phi [^entry, i32 1] [^if.then5, i32 %47] [^if.else1, i32 %47];
    i32 %18 = phi [^entry, i32 0] [^if.then5, i32 %116] [^if.else1, i32 %118];
    i1 %19 = icmp sgt i32 %18, i32 0;
    cbr i1 %19(prob = 0.984615), ^while.body, ^b;
  ^b:
    call (i32) -> void @putint(i32 %17);
    call (i32) -> void @putch(i32 10);
    ubr ^while.header1;
  ^while.body:
    i32 %20 = phi [^while.header, i32 0] [^b1, i32 %34];
    i32 %21 = phi [^while.header, i32 0] [^b1, i32 %33];
    i32 %22 = phi [^while.header, i32 %18] [^b1, i32 %36];
    i32 %23 = phi [^while.header, i32 1] [^b1, i32 0];
    i32 %24 = and i32 %22, i32 %23;
    i1 %25 = ztrunc i32 %24 to i1;
    cbr i1 %25(prob = 0.5), ^if.then, ^b1;
  ^if.then:
    i32* %26 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %20];
    i32 %27 = load i32* %26;
    i32 %28 = add i32 %21, i32 %27;
    ubr ^b1;
  ^while.header1:
    i32 %29 = phi [^b, i32 2] [^if.then9, i32 %137] [^if.else3, i32 %137];
    i32 %30 = phi [^b, i32 1] [^if.then9, i32 %79] [^if.else3, i32 %79];
    i32 %31 = phi [^b, i32 1] [^if.then9, i32 %183] [^if.else3, i32 %190];
    i1 %32 = icmp sgt i32 %31, i32 0;
    cbr i1 %32(prob = 0.984615), ^while.body1, ^b2;
  ^b1:
    i32 %33 = phi [^while.body, i32 %21] [^if.then, i32 %28];
    i32 %34 = add i32 %20, i32 1;
    i1 %35 = icmp slt i32 %34, i32 16;
    i32 %36 = sdiv i32 %22, i32 2;
    cbr i1 %35(prob = 0.9375), ^while.body, ^b3;
  ^b2:
    call (i32) -> void @putint(i32 %30);
    call (i32) -> void @putch(i32 10);
    ubr ^while.header2;
  ^while.body1:
    i32 %37 = phi [^while.header1, i32 0] [^b5, i32 %51];
    i32 %38 = phi [^while.header1, i32 %31] [^b5, i32 %53];
    i32 %39 = phi [^while.header1, i32 1] [^b5, i32 0];
    i32 %40 = phi [^while.header1, i32 0] [^b5, i32 %50];
    i32 %41 = and i32 %38, i32 %39;
    i1 %42 = ztrunc i32 %41 to i1;
    cbr i1 %42(prob = 0.5), ^if.then1, ^b5;
  ^b3:
    i1 %43 = icmp neq i32 %33, i32 0;
    cbr i1 %43(prob = 0.5), ^while.header3, ^b4;
  ^if.then1:
    i32* %44 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %37];
    i32 %45 = load i32* %44;
    i32 %46 = add i32 %40, i32 %45;
    ubr ^b5;
  ^b4:
    i32 %47 = phi [^b3, i32 %17] [^while.header3, i32 %55];
    ubr ^while.header6;
  ^while.header2:
    i32 %48 = phi [^b2, i32 2] [^b7, i32 %78];
    i1 %49 = icmp slt i32 %48, i32 16;
    cbr i1 %49(prob = 0.984615), ^while.header4, ^while.header5;
  ^b5:
    i32 %50 = phi [^while.body1, i32 %40] [^if.then1, i32 %46];
    i32 %51 = add i32 %37, i32 1;
    i1 %52 = icmp slt i32 %51, i32 16;
    i32 %53 = sdiv i32 %38, i32 2;
    cbr i1 %52(prob = 0.9375), ^while.body1, ^b6;
  ^while.header3:
    i32 %54 = phi [^b3, i32 %17] [^if.then13, i32 %201] [^if.else6, i32 %201];
    i32 %55 = phi [^b3, i32 0] [^if.then13, i32 %153] [^if.else6, i32 %153];
    i32 %56 = phi [^b3, i32 %16] [^if.then13, i32 %255] [^if.else6, i32 %258];
    i1 %57 = icmp neq i32 %56, i32 0;
    cbr i1 %57(prob = 0.984615), ^while.body2, ^b4;
  ^while.header4:
    i32 %58 = phi [^while.header2, i32 2] [^if.then20, i32 %226] [^if.else11, i32 %226];
    i32 %59 = phi [^while.header2, i32 1] [^if.then20, i32 %178] [^if.else11, i32 %178];
    i32 %60 = phi [^while.header2, i32 %48] [^if.then20, i32 %324] [^if.else11, i32 %331];
    i1 %61 = icmp sgt i32 %60, i32 0;
    cbr i1 %61(prob = 0.984615), ^while.body3, ^b7;
  ^while.body2:
    i32 %62 = phi [^while.header3, i32 0] [^b9, i32 %95];
    i32 %63 = phi [^while.header3, i32 %56] [^b9, i32 %97];
    i32 %64 = phi [^while.header3, i32 1] [^b9, i32 0];
    i32 %65 = phi [^while.header3, i32 0] [^b9, i32 %94];
    i32 %66 = and i32 %63, i32 %64;
    i1 %67 = ztrunc i32 %66 to i1;
    cbr i1 %67(prob = 0.5), ^if.then2, ^b9;
  ^b6:
    i1 %68 = icmp neq i32 %50, i32 0;
    cbr i1 %68(prob = 0.5), ^while.header7, ^b8;
  ^while.header5:
    i32 %69 = phi [^while.header2, i32 0] [^b16, i32 %154];
    i1 %70 = icmp slt i32 %69, i32 16;
    cbr i1 %70(prob = 0.984615), ^while.header8, ^b10;
  ^while.header6:
    i32 %71 = phi [^b4, i32 %16] [^if.then21, i32 %241] [^if.else12, i32 %241];
    i32 %72 = phi [^b4, i32 0] [^if.then21, i32 %184] [^if.else12, i32 %184];
    i32 %73 = phi [^b4, i32 %16] [^if.then21, i32 %329] [^if.else12, i32 %336];
    i1 %74 = icmp neq i32 %73, i32 0;
    cbr i1 %74(prob = 0.984615), ^while.body4, ^if.else;
  ^if.then2:
    i32* %75 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %62];
    i32 %76 = load i32* %75;
    i32 %77 = add i32 %65, i32 %76;
    ubr ^b9;
  ^b7:
    call (i32) -> void @putint(i32 %59);
    call (i32) -> void @putch(i32 10);
    i32 %78 = add i32 %48, i32 1;
    ubr ^while.header2;
  ^b8:
    i32 %79 = phi [^b6, i32 %30] [^while.header7, i32 %87];
    ubr ^while.header9;
  ^while.body3:
    i32 %80 = phi [^while.header4, i32 0] [^b11, i32 %120];
    i32 %81 = phi [^while.header4, i32 0] [^b11, i32 %119];
    i32 %82 = phi [^while.header4, i32 %60] [^b11, i32 %122];
    i32 %83 = phi [^while.header4, i32 1] [^b11, i32 0];
    i32 %84 = and i32 %82, i32 %83;
    i1 %85 = ztrunc i32 %84 to i1;
    cbr i1 %85(prob = 0.5), ^if.then3, ^b11;
  ^while.header7:
    i32 %86 = phi [^b6, i32 %30] [^if.then29, i32 %296] [^if.else18, i32 %296];
    i32 %87 = phi [^b6, i32 0] [^if.then29, i32 %209] [^if.else18, i32 %209];
    i32 %88 = phi [^b6, i32 %29] [^if.then29, i32 %408] [^if.else18, i32 %415];
    i1 %89 = icmp neq i32 %88, i32 0;
    cbr i1 %89(prob = 0.984615), ^while.body5, ^b8;
  ^while.header8:
    i32 %90 = phi [^while.header5, i32 2] [^if.then28, i32 %293] [^if.else17, i32 %293];
    i32 %91 = phi [^while.header5, i32 1] [^if.then28, i32 %208] [^if.else17, i32 %208];
    i32 %92 = phi [^while.header5, i32 %69] [^if.then28, i32 %403] [^if.else17, i32 %413];
    i1 %93 = icmp sgt i32 %92, i32 0;
    cbr i1 %93(prob = 0.984615), ^while.body6, ^b13;
  ^b9:
    i32 %94 = phi [^while.body2, i32 %65] [^if.then2, i32 %77];
    i32 %95 = add i32 %62, i32 1;
    i1 %96 = icmp slt i32 %95, i32 16;
    i32 %97 = sdiv i32 %63, i32 2;
    cbr i1 %96(prob = 0.9375), ^while.body2, ^b12;
  ^while.body4:
    i32 %98 = phi [^while.header6, i32 0] [^b14, i32 %144];
    i32 %99 = phi [^while.header6, i32 %73] [^b14, i32 %146];
    i32 %100 = phi [^while.header6, i32 1] [^b14, i32 0];
    i32 %101 = phi [^while.header6, i32 0] [^b14, i32 %143];
    i32 %102 = and i32 %99, i32 %100;
    i1 %103 = ztrunc i32 %102 to i1;
    cbr i1 %103(prob = 0.5), ^if.then4, ^b14;
  ^if.else:
    i1 %104 = icmp sgt i32 %18, i32 32767;
    cbr i1 %104(prob = 0.5), ^if.then5, ^if.else1;
  ^b10:
    i32 %105 = phi [^while.header5, i32 0] [^b13, i32 1];
    ret i32 %105;
  ^if.then3:
    i32* %106 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %80];
    i32 %107 = load i32* %106;
    i32 %108 = add i32 %81, i32 %107;
    ubr ^b11;
  ^if.then4:
    i32* %109 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %98];
    i32 %110 = load i32* %109;
    i32 %111 = add i32 %101, i32 %110;
    ubr ^b14;
  ^if.then5:
    i32 %112 = load i32* %1;
    i32 %113 = sdiv i32 %18, i32 %112;
    i32 %114 = add i32 %113, i32 65536;
    i32 %115 = load i32* %15;
    i32 %116 = sub i32 %114, i32 %115;
    ubr ^while.header;
  ^if.else1:
    i32 %117 = load i32* %1;
    i32 %118 = sdiv i32 %18, i32 %117;
    ubr ^while.header;
  ^b11:
    i32 %119 = phi [^while.body3, i32 %81] [^if.then3, i32 %108];
    i32 %120 = add i32 %80, i32 1;
    i1 %121 = icmp slt i32 %120, i32 16;
    i32 %122 = sdiv i32 %82, i32 2;
    cbr i1 %121(prob = 0.9375), ^while.body3, ^b17;
  ^while.body5:
    i32 %123 = phi [^while.header7, i32 0] [^b18, i32 %160];
    i32 %124 = phi [^while.header7, i32 0] [^b18, i32 %159];
    i32 %125 = phi [^while.header7, i32 %88] [^b18, i32 %162];
    i32 %126 = phi [^while.header7, i32 1] [^b18, i32 0];
    i32 %127 = and i32 %125, i32 %126;
    i1 %128 = ztrunc i32 %127 to i1;
    cbr i1 %128(prob = 0.5), ^if.then6, ^b18;
  ^while.body6:
    i32 %129 = phi [^while.header8, i32 0] [^b19, i32 %164];
    i32 %130 = phi [^while.header8, i32 0] [^b19, i32 %163];
    i32 %131 = phi [^while.header8, i32 %92] [^b19, i32 %166];
    i32 %132 = phi [^while.header8, i32 1] [^b19, i32 0];
    i32 %133 = and i32 %131, i32 %132;
    i1 %134 = ztrunc i32 %133 to i1;
    cbr i1 %134(prob = 0.5), ^if.then7, ^b19;
  ^b12:
    i1 %135 = icmp neq i32 %94, i32 0;
    cbr i1 %135(prob = 0.5), ^while.header10, ^b15;
  ^while.header9:
    i32 %136 = phi [^b8, i32 %29] [^if.then36, i32 %380] [^if.else23, i32 %380];
    i32 %137 = phi [^b8, i32 0] [^if.then36, i32 %256] [^if.else23, i32 %256];
    i32 %138 = phi [^b8, i32 %29] [^if.then36, i32 %481] [^if.else23, i32 %497];
    i1 %139 = icmp neq i32 %138, i32 0;
    cbr i1 %139(prob = 0.984615), ^while.body7, ^if.else2;
  ^b13:
    i32* %140 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %69];
    i32 %141 = load i32* %140;
    i1 %142 = icmp neq i32 %91, i32 %141;
    cbr i1 %142(prob = 0.5), ^b10, ^b16;
  ^b14:
    i32 %143 = phi [^while.body4, i32 %101] [^if.then4, i32 %111];
    i32 %144 = add i32 %98, i32 1;
    i1 %145 = icmp slt i32 %144, i32 16;
    i32 %146 = sdiv i32 %99, i32 2;
    cbr i1 %145(prob = 0.9375), ^while.body4, ^b20;
  ^if.then6:
    i32* %147 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %123];
    i32 %148 = load i32* %147;
    i32 %149 = add i32 %124, i32 %148;
    ubr ^b18;
  ^if.then7:
    i32* %150 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %129];
    i32 %151 = load i32* %150;
    i32 %152 = add i32 %130, i32 %151;
    ubr ^b19;
  ^b15:
    i32 %153 = phi [^b12, i32 %55] [^while.header10, i32 %156];
    ubr ^while.header13;
  ^b16:
    i32 %154 = add i32 %69, i32 1;
    ubr ^while.header5;
  ^b17:
    i1 %155 = icmp neq i32 %119, i32 0;
    cbr i1 %155(prob = 0.5), ^while.header11, ^b21;
  ^while.header10:
    i32 %156 = phi [^b12, i32 %55] [^b56, i32 %263];
    i32 %157 = phi [^b12, i32 %54] [^b56, i32 %666];
    i1 %158 = icmp neq i32 %157, i32 0;
    cbr i1 %158(prob = 0.984615), ^while.body8, ^b15;
  ^b18:
    i32 %159 = phi [^while.body5, i32 %124] [^if.then6, i32 %149];
    i32 %160 = add i32 %123, i32 1;
    i1 %161 = icmp slt i32 %160, i32 16;
    i32 %162 = sdiv i32 %125, i32 2;
    cbr i1 %161(prob = 0.9375), ^while.body5, ^b24;
  ^b19:
    i32 %163 = phi [^while.body6, i32 %130] [^if.then7, i32 %152];
    i32 %164 = add i32 %129, i32 1;
    i1 %165 = icmp slt i32 %164, i32 16;
    i32 %166 = sdiv i32 %131, i32 2;
    cbr i1 %165(prob = 0.9375), ^while.body6, ^b23;
  ^while.body7:
    i32 %167 = phi [^while.header9, i32 0] [^b25, i32 %205];
    i32 %168 = phi [^while.header9, i32 0] [^b25, i32 %204];
    i32 %169 = phi [^while.header9, i32 %138] [^b25, i32 %207];
    i32 %170 = phi [^while.header9, i32 1] [^b25, i32 0];
    i32 %171 = and i32 %169, i32 %170;
    i1 %172 = ztrunc i32 %171 to i1;
    cbr i1 %172(prob = 0.5), ^if.then8, ^b25;
  ^b20:
    i1 %173 = icmp neq i32 %143, i32 0;
    cbr i1 %173(prob = 0.5), ^while.header12, ^b22;
  ^if.else2:
    i1 %174 = icmp sgt i32 %31, i32 32767;
    cbr i1 %174(prob = 0.5), ^if.then9, ^if.else3;
  ^if.then8:
    i32* %175 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %167];
    i32 %176 = load i32* %175;
    i32 %177 = add i32 %168, i32 %176;
    ubr ^b25;
  ^b21:
    i32 %178 = phi [^b17, i32 %59] [^while.header11, i32 %186];
    ubr ^while.header16;
  ^if.then9:
    i32 %179 = load i32* %1;
    i32 %180 = sdiv i32 %31, i32 %179;
    i32 %181 = add i32 %180, i32 65536;
    i32 %182 = load i32* %15;
    i32 %183 = sub i32 %181, i32 %182;
    ubr ^while.header1;
  ^b22:
    i32 %184 = phi [^b20, i32 %72] [^while.header12, i32 %198];
    ubr ^while.header17;
  ^while.header11:
    i32 %185 = phi [^b17, i32 %59] [^if.then43, i32 %493] [^if.else30, i32 %493];
    i32 %186 = phi [^b17, i32 0] [^if.then43, i32 %398] [^if.else30, i32 %398];
    i32 %187 = phi [^b17, i32 %58] [^if.then43, i32 %616] [^if.else30, i32 %629];
    i1 %188 = icmp neq i32 %187, i32 0;
    cbr i1 %188(prob = 0.984615), ^while.body9, ^b21;
  ^if.else3:
    i32 %189 = load i32* %1;
    i32 %190 = sdiv i32 %31, i32 %189;
    ubr ^while.header1;
  ^while.body8:
    i32 %191 = phi [^while.header10, i32 0] [^b31, i32 %264];
    i32 %192 = phi [^while.header10, i32 %156] [^b31, i32 %266];
    i32 %193 = phi [^while.header10, i32 %157] [^b31, i32 %267];
    i32 %194 = phi [^while.header10, i32 0] [^b31, i32 %263];
    i1 %195 = ztrunc i32 %192 to i1;
    cbr i1 %195(prob = 0.5), ^if.then10, ^if.else4;
  ^b23:
    i1 %196 = icmp neq i32 %163, i32 0;
    cbr i1 %196(prob = 0.5), ^while.header14, ^b26;
  ^b24:
    i1 %197 = icmp neq i32 %159, i32 0;
    cbr i1 %197(prob = 0.5), ^while.header15, ^b27;
  ^while.header12:
    i32 %198 = phi [^b20, i32 %72] [^b63, i32 %341];
    i32 %199 = phi [^b20, i32 %71] [^b63, i32 %782];
    i1 %200 = icmp neq i32 %199, i32 0;
    cbr i1 %200(prob = 0.984615), ^while.body10, ^b22;
  ^while.header13:
    i32 %201 = phi [^b15, i32 %54] [^b62, i32 %350];
    i32 %202 = phi [^b15, i32 %54] [^b62, i32 %777];
    i1 %203 = icmp neq i32 %202, i32 0;
    cbr i1 %203(prob = 0.984615), ^while.body11, ^if.else5;
  ^b25:
    i32 %204 = phi [^while.body7, i32 %168] [^if.then8, i32 %177];
    i32 %205 = add i32 %167, i32 1;
    i1 %206 = icmp slt i32 %205, i32 16;
    i32 %207 = sdiv i32 %169, i32 2;
    cbr i1 %206(prob = 0.9375), ^while.body7, ^b28;
  ^b26:
    i32 %208 = phi [^b23, i32 %91] [^while.header14, i32 %219];
    ubr ^while.header19;
  ^b27:
    i32 %209 = phi [^b24, i32 %87] [^while.header15, i32 %222];
    ubr ^while.header20;
  ^while.body9:
    i32 %210 = phi [^while.header11, i32 0] [^b30, i32 %260];
    i32 %211 = phi [^while.header11, i32 %187] [^b30, i32 %262];
    i32 %212 = phi [^while.header11, i32 1] [^b30, i32 0];
    i32 %213 = phi [^while.header11, i32 0] [^b30, i32 %259];
    i32 %214 = and i32 %211, i32 %212;
    i1 %215 = ztrunc i32 %214 to i1;
    cbr i1 %215(prob = 0.5), ^if.then11, ^b30;
  ^if.then10:
    i32 %216 = and i32 %193, i32 1;
    i1 %217 = icmp eq i32 %216, i32 0;
    cbr i1 %217(prob = 0.5), ^if.then12, ^b31;
  ^while.header14:
    i32 %218 = phi [^b23, i32 %91] [^if.then54, i32 %572] [^if.else40, i32 %572];
    i32 %219 = phi [^b23, i32 0] [^if.then54, i32 %476] [^if.else40, i32 %476];
    i32 %220 = phi [^b23, i32 %90] [^if.then54, i32 %717] [^if.else40, i32 %734];
    i1 %221 = icmp neq i32 %220, i32 0;
    cbr i1 %221(prob = 0.984615), ^while.body12, ^b26;
  ^while.header15:
    i32 %222 = phi [^b24, i32 %87] [^b69, i32 %416];
    i32 %223 = phi [^b24, i32 %86] [^b69, i32 %865];
    i1 %224 = icmp neq i32 %223, i32 0;
    cbr i1 %224(prob = 0.984615), ^while.body14, ^b27;
  ^while.header16:
    i32 %225 = phi [^b21, i32 %58] [^if.then53, i32 %569] [^if.else39, i32 %569];
    i32 %226 = phi [^b21, i32 0] [^if.then53, i32 %475] [^if.else39, i32 %475];
    i32 %227 = phi [^b21, i32 %58] [^if.then53, i32 %712] [^if.else39, i32 %732];
    i1 %228 = icmp neq i32 %227, i32 0;
    cbr i1 %228(prob = 0.984615), ^while.body13, ^if.else7;
  ^if.else4:
    i1 %229 = ztrunc i32 %193 to i1;
    cbr i1 %229(prob = 0.5), ^if.then12, ^b31;
  ^while.body10:
    i32 %230 = phi [^while.header12, i32 0] [^b34, i32 %342];
    i32 %231 = phi [^while.header12, i32 %198] [^b34, i32 %344];
    i32 %232 = phi [^while.header12, i32 %199] [^b34, i32 %345];
    i32 %233 = phi [^while.header12, i32 0] [^b34, i32 %341];
    i1 %234 = ztrunc i32 %231 to i1;
    cbr i1 %234(prob = 0.5), ^if.then14, ^if.else8;
  ^while.body11:
    i32 %235 = phi [^while.header13, i32 0] [^b36, i32 %351];
    i32 %236 = phi [^while.header13, i32 %201] [^b36, i32 %353];
    i32 %237 = phi [^while.header13, i32 %202] [^b36, i32 %354];
    i32 %238 = phi [^while.header13, i32 0] [^b36, i32 %350];
    i1 %239 = ztrunc i32 %236 to i1;
    cbr i1 %239(prob = 0.5), ^if.then15, ^if.else9;
  ^b28:
    i1 %240 = icmp neq i32 %204, i32 0;
    cbr i1 %240(prob = 0.5), ^while.header18, ^b29;
  ^while.header17:
    i32 %241 = phi [^b22, i32 %71] [^b70, i32 %431];
    i32 %242 = phi [^b22, i32 %71] [^b70, i32 %883];
    i1 %243 = icmp neq i32 %242, i32 0;
    cbr i1 %243(prob = 0.984615), ^while.body15, ^if.else10;
  ^if.else5:
    i1 %244 = icmp sgt i32 %56, i32 32767;
    cbr i1 %244(prob = 0.5), ^if.then13, ^if.else6;
  ^if.then11:
    i32* %245 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %210];
    i32 %246 = load i32* %245;
    i32 %247 = add i32 %213, i32 %246;
    ubr ^b30;
  ^if.then12:
    i32* %248 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %191];
    i32 %249 = load i32* %248;
    i32 %250 = add i32 %194, i32 %249;
    ubr ^b31;
  ^if.then13:
    i32 %251 = load i32* %1;
    i32 %252 = sdiv i32 %56, i32 %251;
    i32 %253 = add i32 %252, i32 65536;
    i32 %254 = load i32* %15;
    i32 %255 = sub i32 %253, i32 %254;
    ubr ^while.header3;
  ^b29:
    i32 %256 = phi [^b28, i32 %137] [^while.header18, i32 %289];
    ubr ^while.header21;
  ^if.else6:
    i32 %257 = load i32* %1;
    i32 %258 = sdiv i32 %56, i32 %257;
    ubr ^while.header3;
  ^b30:
    i32 %259 = phi [^while.body9, i32 %213] [^if.then11, i32 %247];
    i32 %260 = add i32 %210, i32 1;
    i1 %261 = icmp slt i32 %260, i32 16;
    i32 %262 = sdiv i32 %211, i32 2;
    cbr i1 %261(prob = 0.9375), ^while.body9, ^b32;
  ^b31:
    i32 %263 = phi [^if.then10, i32 %194] [^if.else4, i32 %194] [^if.then12, i32 %250];
    i32 %264 = add i32 %191, i32 1;
    i1 %265 = icmp slt i32 %264, i32 16;
    i32 %266 = sdiv i32 %192, i32 2;
    i32 %267 = sdiv i32 %193, i32 2;
    cbr i1 %265(prob = 0.9375), ^while.body8, ^while.body17;
  ^while.body12:
    i32 %268 = phi [^while.header14, i32 0] [^b33, i32 %338];
    i32 %269 = phi [^while.header14, i32 %220] [^b33, i32 %340];
    i32 %270 = phi [^while.header14, i32 1] [^b33, i32 0];
    i32 %271 = phi [^while.header14, i32 0] [^b33, i32 %337];
    i32 %272 = and i32 %269, i32 %270;
    i1 %273 = ztrunc i32 %272 to i1;
    cbr i1 %273(prob = 0.5), ^if.then16, ^b33;
  ^if.then14:
    i32 %274 = and i32 %232, i32 1;
    i1 %275 = icmp eq i32 %274, i32 0;
    cbr i1 %275(prob = 0.5), ^if.then17, ^b34;
  ^while.body13:
    i32 %276 = phi [^while.header16, i32 0] [^b35, i32 %347];
    i32 %277 = phi [^while.header16, i32 %227] [^b35, i32 %349];
    i32 %278 = phi [^while.header16, i32 1] [^b35, i32 0];
    i32 %279 = phi [^while.header16, i32 0] [^b35, i32 %346];
    i32 %280 = and i32 %277, i32 %278;
    i1 %281 = ztrunc i32 %280 to i1;
    cbr i1 %281(prob = 0.5), ^if.then18, ^b35;
  ^if.then15:
    i32 %282 = and i32 %237, i32 1;
    i1 %283 = icmp eq i32 %282, i32 0;
    cbr i1 %283(prob = 0.5), ^if.then19, ^b36;
  ^while.body14:
    i32 %284 = phi [^while.header15, i32 0] [^b38, i32 %417];
    i32 %285 = phi [^while.header15, i32 0] [^b38, i32 %416];
    i32 %286 = phi [^while.header15, i32 %222] [^b38, i32 %419];
    i32 %287 = phi [^while.header15, i32 %223] [^b38, i32 %420];
    i1 %288 = ztrunc i32 %286 to i1;
    cbr i1 %288(prob = 0.5), ^if.then22, ^if.else13;
  ^while.header18:
    i32 %289 = phi [^b28, i32 %137] [^b76, i32 %498];
    i32 %290 = phi [^b28, i32 %136] [^b76, i32 %951];
    i1 %291 = icmp neq i32 %290, i32 0;
    cbr i1 %291(prob = 0.984615), ^while.body18, ^b29;
  ^while.header19:
    i32 %292 = phi [^b26, i32 %90] [^if.then66, i32 %661] [^if.else46, i32 %661];
    i32 %293 = phi [^b26, i32 0] [^if.then66, i32 %549] [^if.else46, i32 %549];
    i32 %294 = phi [^b26, i32 %90] [^if.then66, i32 %817] [^if.else46, i32 %824];
    i1 %295 = icmp neq i32 %294, i32 0;
    cbr i1 %295(prob = 0.984615), ^while.body16, ^if.else14;
  ^while.header20:
    i32 %296 = phi [^b27, i32 %86] [^b75, i32 %503];
    i32 %297 = phi [^b27, i32 %86] [^b75, i32 %946];
    i1 %298 = icmp neq i32 %297, i32 0;
    cbr i1 %298(prob = 0.984615), ^while.body19, ^if.else15;
  ^if.else7:
    i1 %299 = icmp sgt i32 %60, i32 32767;
    cbr i1 %299(prob = 0.5), ^if.then20, ^if.else11;
  ^if.else8:
    i1 %300 = ztrunc i32 %232 to i1;
    cbr i1 %300(prob = 0.5), ^if.then17, ^b34;
  ^if.else9:
    i1 %301 = ztrunc i32 %237 to i1;
    cbr i1 %301(prob = 0.5), ^if.then19, ^b36;
  ^while.body15:
    i32 %302 = phi [^while.header17, i32 0] [^b42, i32 %432];
    i32 %303 = phi [^while.header17, i32 0] [^b42, i32 %431];
    i32 %304 = phi [^while.header17, i32 %241] [^b42, i32 %434];
    i32 %305 = phi [^while.header17, i32 %242] [^b42, i32 %435];
    i1 %306 = ztrunc i32 %304 to i1;
    cbr i1 %306(prob = 0.5), ^if.then23, ^if.else16;
  ^if.else10:
    i1 %307 = icmp sgt i32 %73, i32 32767;
    cbr i1 %307(prob = 0.5), ^if.then21, ^if.else12;
  ^if.then16:
    i32* %308 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %268];
    i32 %309 = load i32* %308;
    i32 %310 = add i32 %271, i32 %309;
    ubr ^b33;
  ^if.then17:
    i32* %311 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %230];
    i32 %312 = load i32* %311;
    i32 %313 = add i32 %233, i32 %312;
    ubr ^b34;
  ^if.then18:
    i32* %314 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %276];
    i32 %315 = load i32* %314;
    i32 %316 = add i32 %279, i32 %315;
    ubr ^b35;
  ^if.then19:
    i32* %317 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %235];
    i32 %318 = load i32* %317;
    i32 %319 = add i32 %238, i32 %318;
    ubr ^b36;
  ^if.then20:
    i32 %320 = load i32* %1;
    i32 %321 = sdiv i32 %60, i32 %320;
    i32 %322 = add i32 %321, i32 65536;
    i32 %323 = load i32* %15;
    i32 %324 = sub i32 %322, i32 %323;
    ubr ^while.header4;
  ^if.then21:
    i32 %325 = load i32* %1;
    i32 %326 = sdiv i32 %73, i32 %325;
    i32 %327 = add i32 %326, i32 65536;
    i32 %328 = load i32* %15;
    i32 %329 = sub i32 %327, i32 %328;
    ubr ^while.header6;
  ^if.else11:
    i32 %330 = load i32* %1;
    i32 %331 = sdiv i32 %60, i32 %330;
    ubr ^while.header4;
  ^if.then22:
    i32 %332 = and i32 %287, i32 1;
    i1 %333 = icmp eq i32 %332, i32 0;
    cbr i1 %333(prob = 0.5), ^if.then24, ^b38;
  ^b32:
    i1 %334 = icmp neq i32 %259, i32 0;
    cbr i1 %334(prob = 0.5), ^while.header22, ^b37;
  ^if.else12:
    i32 %335 = load i32* %1;
    i32 %336 = sdiv i32 %73, i32 %335;
    ubr ^while.header6;
  ^b33:
    i32 %337 = phi [^while.body12, i32 %271] [^if.then16, i32 %310];
    i32 %338 = add i32 %268, i32 1;
    i1 %339 = icmp slt i32 %338, i32 16;
    i32 %340 = sdiv i32 %269, i32 2;
    cbr i1 %339(prob = 0.9375), ^while.body12, ^b40;
  ^b34:
    i32 %341 = phi [^if.then14, i32 %233] [^if.else8, i32 %233] [^if.then17, i32 %313];
    i32 %342 = add i32 %230, i32 1;
    i1 %343 = icmp slt i32 %342, i32 16;
    i32 %344 = sdiv i32 %231, i32 2;
    i32 %345 = sdiv i32 %232, i32 2;
    cbr i1 %343(prob = 0.9375), ^while.body10, ^while.body20;
  ^b35:
    i32 %346 = phi [^while.body13, i32 %279] [^if.then18, i32 %316];
    i32 %347 = add i32 %276, i32 1;
    i1 %348 = icmp slt i32 %347, i32 16;
    i32 %349 = sdiv i32 %277, i32 2;
    cbr i1 %348(prob = 0.9375), ^while.body13, ^b39;
  ^b36:
    i32 %350 = phi [^if.then15, i32 %238] [^if.else9, i32 %238] [^if.then19, i32 %319];
    i32 %351 = add i32 %235, i32 1;
    i1 %352 = icmp slt i32 %351, i32 16;
    i32 %353 = sdiv i32 %236, i32 2;
    i32 %354 = sdiv i32 %237, i32 2;
    cbr i1 %352(prob = 0.9375), ^while.body11, ^while.body21;
  ^if.else13:
    i1 %355 = ztrunc i32 %287 to i1;
    cbr i1 %355(prob = 0.5), ^if.then24, ^b38;
  ^while.body16:
    i32 %356 = phi [^while.header19, i32 0] [^b41, i32 %428];
    i32 %357 = phi [^while.header19, i32 0] [^b41, i32 %427];
    i32 %358 = phi [^while.header19, i32 %294] [^b41, i32 %430];
    i32 %359 = phi [^while.header19, i32 1] [^b41, i32 0];
    i32 %360 = and i32 %358, i32 %359;
    i1 %361 = ztrunc i32 %360 to i1;
    cbr i1 %361(prob = 0.5), ^if.then25, ^b41;
  ^if.then23:
    i32 %362 = and i32 %305, i32 1;
    i1 %363 = icmp eq i32 %362, i32 0;
    cbr i1 %363(prob = 0.5), ^if.then26, ^b42;
  ^while.body17:
    i32 %364 = phi [^b31, i32 0] [^b43, i32 %437];
    i32 %365 = phi [^b31, i32 %156] [^b43, i32 %439];
    i32 %366 = phi [^b31, i32 %157] [^b43, i32 %440];
    i32 %367 = phi [^b31, i32 0] [^b43, i32 %436];
    i32 %368 = and i32 %365, i32 %366;
    i1 %369 = ztrunc i32 %368 to i1;
    cbr i1 %369(prob = 0.5), ^if.then27, ^b43;
  ^while.body18:
    i32 %370 = phi [^while.header18, i32 0] [^b46, i32 %499];
    i32 %371 = phi [^while.header18, i32 0] [^b46, i32 %498];
    i32 %372 = phi [^while.header18, i32 %289] [^b46, i32 %501];
    i32 %373 = phi [^while.header18, i32 %290] [^b46, i32 %502];
    i1 %374 = ztrunc i32 %372 to i1;
    cbr i1 %374(prob = 0.5), ^if.then30, ^if.else19;
  ^while.body19:
    i32 %375 = phi [^while.header20, i32 0] [^b47, i32 %504];
    i32 %376 = phi [^while.header20, i32 0] [^b47, i32 %503];
    i32 %377 = phi [^while.header20, i32 %296] [^b47, i32 %506];
    i32 %378 = phi [^while.header20, i32 %297] [^b47, i32 %507];
    i1 %379 = ztrunc i32 %377 to i1;
    cbr i1 %379(prob = 0.5), ^if.then31, ^if.else20;
  ^while.header21:
    i32 %380 = phi [^b29, i32 %136] [^b80, i32 %576];
    i32 %381 = phi [^b29, i32 %136] [^b80, i32 %1007];
    i1 %382 = icmp neq i32 %381, i32 0;
    cbr i1 %382(prob = 0.984615), ^while.body22, ^if.else21;
  ^if.else14:
    i1 %383 = icmp sgt i32 %92, i32 32767;
    cbr i1 %383(prob = 0.5), ^if.then28, ^if.else17;
  ^if.else15:
    i1 %384 = icmp sgt i32 %88, i32 32767;
    cbr i1 %384(prob = 0.5), ^if.then29, ^if.else18;
  ^if.else16:
    i1 %385 = ztrunc i32 %305 to i1;
    cbr i1 %385(prob = 0.5), ^if.then26, ^b42;
  ^if.then24:
    i32* %386 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %284];
    i32 %387 = load i32* %386;
    i32 %388 = add i32 %285, i32 %387;
    ubr ^b38;
  ^if.then25:
    i32* %389 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %356];
    i32 %390 = load i32* %389;
    i32 %391 = add i32 %357, i32 %390;
    ubr ^b41;
  ^if.then26:
    i32* %392 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %302];
    i32 %393 = load i32* %392;
    i32 %394 = add i32 %303, i32 %393;
    ubr ^b42;
  ^if.then27:
    i32* %395 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %364];
    i32 %396 = load i32* %395;
    i32 %397 = add i32 %367, i32 %396;
    ubr ^b43;
  ^b37:
    i32 %398 = phi [^b32, i32 %186] [^while.header22, i32 %409];
    ubr ^while.header25;
  ^if.then28:
    i32 %399 = load i32* %1;
    i32 %400 = sdiv i32 %92, i32 %399;
    i32 %401 = add i32 %400, i32 65536;
    i32 %402 = load i32* %15;
    i32 %403 = sub i32 %401, i32 %402;
    ubr ^while.header8;
  ^if.then29:
    i32 %404 = load i32* %1;
    i32 %405 = sdiv i32 %88, i32 %404;
    i32 %406 = add i32 %405, i32 65536;
    i32 %407 = load i32* %15;
    i32 %408 = sub i32 %406, i32 %407;
    ubr ^while.header7;
  ^while.header22:
    i32 %409 = phi [^b32, i32 %186] [^b81, i32 %630];
    i32 %410 = phi [^b32, i32 %185] [^b81, i32 %1024];
    i1 %411 = icmp neq i32 %410, i32 0;
    cbr i1 %411(prob = 0.984615), ^while.body23, ^b37;
  ^if.else17:
    i32 %412 = load i32* %1;
    i32 %413 = sdiv i32 %92, i32 %412;
    ubr ^while.header8;
  ^if.else18:
    i32 %414 = load i32* %1;
    i32 %415 = sdiv i32 %88, i32 %414;
    ubr ^while.header7;
  ^b38:
    i32 %416 = phi [^if.then22, i32 %285] [^if.else13, i32 %285] [^if.then24, i32 %388];
    i32 %417 = add i32 %284, i32 1;
    i1 %418 = icmp slt i32 %417, i32 16;
    i32 %419 = sdiv i32 %286, i32 2;
    i32 %420 = sdiv i32 %287, i32 2;
    cbr i1 %418(prob = 0.9375), ^while.body14, ^while.body24;
  ^if.then30:
    i32 %421 = and i32 %373, i32 1;
    i1 %422 = icmp eq i32 %421, i32 0;
    cbr i1 %422(prob = 0.5), ^if.then32, ^b46;
  ^if.then31:
    i32 %423 = and i32 %378, i32 1;
    i1 %424 = icmp eq i32 %423, i32 0;
    cbr i1 %424(prob = 0.5), ^if.then33, ^b47;
  ^b39:
    i1 %425 = icmp neq i32 %346, i32 0;
    cbr i1 %425(prob = 0.5), ^while.header23, ^b44;
  ^b40:
    i1 %426 = icmp neq i32 %337, i32 0;
    cbr i1 %426(prob = 0.5), ^while.header24, ^b45;
  ^b41:
    i32 %427 = phi [^while.body16, i32 %357] [^if.then25, i32 %391];
    i32 %428 = add i32 %356, i32 1;
    i1 %429 = icmp slt i32 %428, i32 16;
    i32 %430 = sdiv i32 %358, i32 2;
    cbr i1 %429(prob = 0.9375), ^while.body16, ^b48;
  ^b42:
    i32 %431 = phi [^if.then23, i32 %303] [^if.else16, i32 %303] [^if.then26, i32 %394];
    i32 %432 = add i32 %302, i32 1;
    i1 %433 = icmp slt i32 %432, i32 16;
    i32 %434 = sdiv i32 %304, i32 2;
    i32 %435 = sdiv i32 %305, i32 2;
    cbr i1 %433(prob = 0.9375), ^while.body15, ^while.body25;
  ^b43:
    i32 %436 = phi [^while.body17, i32 %367] [^if.then27, i32 %397];
    i32 %437 = add i32 %364, i32 1;
    i1 %438 = icmp slt i32 %437, i32 16;
    i32 %439 = sdiv i32 %365, i32 2;
    i32 %440 = sdiv i32 %366, i32 2;
    cbr i1 %438(prob = 0.9375), ^while.body17, ^if.else22;
  ^if.else19:
    i1 %441 = ztrunc i32 %373 to i1;
    cbr i1 %441(prob = 0.5), ^if.then32, ^b46;
  ^if.else20:
    i1 %442 = ztrunc i32 %378 to i1;
    cbr i1 %442(prob = 0.5), ^if.then33, ^b47;
  ^while.body20:
    i32 %443 = phi [^b34, i32 0] [^b49, i32 %518];
    i32 %444 = phi [^b34, i32 0] [^b49, i32 %517];
    i32 %445 = phi [^b34, i32 %198] [^b49, i32 %520];
    i32 %446 = phi [^b34, i32 %199] [^b49, i32 %521];
    i32 %447 = and i32 %445, i32 %446;
    i1 %448 = ztrunc i32 %447 to i1;
    cbr i1 %448(prob = 0.5), ^if.then34, ^b49;
  ^while.body21:
    i32 %449 = phi [^b36, i32 0] [^b50, i32 %523];
    i32 %450 = phi [^b36, i32 %201] [^b50, i32 %525];
    i32 %451 = phi [^b36, i32 %202] [^b50, i32 %526];
    i32 %452 = phi [^b36, i32 0] [^b50, i32 %522];
    i32 %453 = and i32 %450, i32 %451;
    i1 %454 = ztrunc i32 %453 to i1;
    cbr i1 %454(prob = 0.5), ^if.then35, ^b50;
  ^while.body22:
    i32 %455 = phi [^while.header21, i32 0] [^b52, i32 %577];
    i32 %456 = phi [^while.header21, i32 0] [^b52, i32 %576];
    i32 %457 = phi [^while.header21, i32 %380] [^b52, i32 %579];
    i32 %458 = phi [^while.header21, i32 %381] [^b52, i32 %580];
    i1 %459 = ztrunc i32 %457 to i1;
    cbr i1 %459(prob = 0.5), ^if.then37, ^if.else24;
  ^if.else21:
    i1 %460 = icmp sgt i32 %138, i32 32767;
    cbr i1 %460(prob = 0.5), ^if.then36, ^if.else23;
  ^if.then32:
    i32* %461 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %370];
    i32 %462 = load i32* %461;
    i32 %463 = add i32 %371, i32 %462;
    ubr ^b46;
  ^if.then33:
    i32* %464 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %375];
    i32 %465 = load i32* %464;
    i32 %466 = add i32 %376, i32 %465;
    ubr ^b47;
  ^if.then34:
    i32* %467 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %443];
    i32 %468 = load i32* %467;
    i32 %469 = add i32 %444, i32 %468;
    ubr ^b49;
  ^if.then35:
    i32* %470 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %449];
    i32 %471 = load i32* %470;
    i32 %472 = add i32 %452, i32 %471;
    ubr ^b50;
  ^if.else22:
    i32 %473 = load i32* %1;
    i32 %474 = mul i32 %436, i32 %473;
    ubr ^while.body29;
  ^b44:
    i32 %475 = phi [^b39, i32 %226] [^while.header23, i32 %487];
    ubr ^while.header27;
  ^b45:
    i32 %476 = phi [^b40, i32 %219] [^while.header24, i32 %490];
    ubr ^while.header28;
  ^if.then36:
    i32 %477 = load i32* %1;
    i32 %478 = sdiv i32 %138, i32 %477;
    i32 %479 = add i32 %478, i32 65536;
    i32 %480 = load i32* %15;
    i32 %481 = sub i32 %479, i32 %480;
    ubr ^while.header9;
  ^while.body23:
    i32 %482 = phi [^while.header22, i32 0] [^b55, i32 %631];
    i32 %483 = phi [^while.header22, i32 %409] [^b55, i32 %633];
    i32 %484 = phi [^while.header22, i32 %410] [^b55, i32 %634];
    i32 %485 = phi [^while.header22, i32 0] [^b55, i32 %630];
    i1 %486 = ztrunc i32 %483 to i1;
    cbr i1 %486(prob = 0.5), ^if.then41, ^if.else27;
  ^while.header23:
    i32 %487 = phi [^b39, i32 %226] [^b85, i32 %735];
    i32 %488 = phi [^b39, i32 %225] [^b85, i32 %1073];
    i1 %489 = icmp neq i32 %488, i32 0;
    cbr i1 %489(prob = 0.984615), ^while.body26, ^b44;
  ^while.header24:
    i32 %490 = phi [^b40, i32 %219] [^b84, i32 %740];
    i32 %491 = phi [^b40, i32 %218] [^b84, i32 %1068];
    i1 %492 = icmp neq i32 %491, i32 0;
    cbr i1 %492(prob = 0.984615), ^while.body27, ^b45;
  ^while.header25:
    i32 %493 = phi [^b37, i32 %185] [^b83, i32 %745];
    i32 %494 = phi [^b37, i32 %185] [^b83, i32 %1063];
    i1 %495 = icmp neq i32 %494, i32 0;
    cbr i1 %495(prob = 0.984615), ^while.body28, ^if.else28;
  ^if.else23:
    i32 %496 = load i32* %1;
    i32 %497 = sdiv i32 %138, i32 %496;
    ubr ^while.header9;
  ^b46:
    i32 %498 = phi [^if.then30, i32 %371] [^if.else19, i32 %371] [^if.then32, i32 %463];
    i32 %499 = add i32 %370, i32 1;
    i1 %500 = icmp slt i32 %499, i32 16;
    i32 %501 = sdiv i32 %372, i32 2;
    i32 %502 = sdiv i32 %373, i32 2;
    cbr i1 %500(prob = 0.9375), ^while.body18, ^while.body30;
  ^b47:
    i32 %503 = phi [^if.then31, i32 %376] [^if.else20, i32 %376] [^if.then33, i32 %466];
    i32 %504 = add i32 %375, i32 1;
    i1 %505 = icmp slt i32 %504, i32 16;
    i32 %506 = sdiv i32 %377, i32 2;
    i32 %507 = sdiv i32 %378, i32 2;
    cbr i1 %505(prob = 0.9375), ^while.body19, ^while.body31;
  ^if.then37:
    i32 %508 = and i32 %458, i32 1;
    i1 %509 = icmp eq i32 %508, i32 0;
    cbr i1 %509(prob = 0.5), ^if.then38, ^b52;
  ^while.body24:
    i32 %510 = phi [^b38, i32 0] [^b53, i32 %582];
    i32 %511 = phi [^b38, i32 %222] [^b53, i32 %584];
    i32 %512 = phi [^b38, i32 %223] [^b53, i32 %585];
    i32 %513 = phi [^b38, i32 0] [^b53, i32 %581];
    i32 %514 = and i32 %511, i32 %512;
    i1 %515 = ztrunc i32 %514 to i1;
    cbr i1 %515(prob = 0.5), ^if.then39, ^b53;
  ^b48:
    i1 %516 = icmp neq i32 %427, i32 0;
    cbr i1 %516(prob = 0.5), ^while.header26, ^b51;
  ^b49:
    i32 %517 = phi [^while.body20, i32 %444] [^if.then34, i32 %469];
    i32 %518 = add i32 %443, i32 1;
    i1 %519 = icmp slt i32 %518, i32 16;
    i32 %520 = sdiv i32 %445, i32 2;
    i32 %521 = sdiv i32 %446, i32 2;
    cbr i1 %519(prob = 0.9375), ^while.body20, ^if.else26;
  ^b50:
    i32 %522 = phi [^while.body21, i32 %452] [^if.then35, i32 %472];
    i32 %523 = add i32 %449, i32 1;
    i1 %524 = icmp slt i32 %523, i32 16;
    i32 %525 = sdiv i32 %450, i32 2;
    i32 %526 = sdiv i32 %451, i32 2;
    cbr i1 %524(prob = 0.9375), ^while.body21, ^if.else25;
  ^if.else24:
    i1 %527 = ztrunc i32 %458 to i1;
    cbr i1 %527(prob = 0.5), ^if.then38, ^b52;
  ^while.body25:
    i32 %528 = phi [^b42, i32 0] [^b54, i32 %605];
    i32 %529 = phi [^b42, i32 %241] [^b54, i32 %607];
    i32 %530 = phi [^b42, i32 %242] [^b54, i32 %608];
    i32 %531 = phi [^b42, i32 0] [^b54, i32 %604];
    i32 %532 = and i32 %529, i32 %530;
    i1 %533 = ztrunc i32 %532 to i1;
    cbr i1 %533(prob = 0.5), ^if.then40, ^b54;
  ^if.then38:
    i32* %534 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %455];
    i32 %535 = load i32* %534;
    i32 %536 = add i32 %456, i32 %535;
    ubr ^b52;
  ^if.then39:
    i32* %537 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %510];
    i32 %538 = load i32* %537;
    i32 %539 = add i32 %513, i32 %538;
    ubr ^b53;
  ^if.then40:
    i32* %540 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %528];
    i32 %541 = load i32* %540;
    i32 %542 = add i32 %531, i32 %541;
    ubr ^b54;
  ^if.then41:
    i32 %543 = and i32 %484, i32 1;
    i1 %544 = icmp eq i32 %543, i32 0;
    cbr i1 %544(prob = 0.5), ^if.then42, ^b55;
  ^if.else25:
    i32 %545 = load i32* %1;
    i32 %546 = mul i32 %522, i32 %545;
    ubr ^while.body35;
  ^if.else26:
    i32 %547 = load i32* %1;
    i32 %548 = mul i32 %517, i32 %547;
    ubr ^while.body36;
  ^b51:
    i32 %549 = phi [^b48, i32 %293] [^while.header26, i32 %566];
    ubr ^while.header29;
  ^if.else27:
    i1 %550 = ztrunc i32 %484 to i1;
    cbr i1 %550(prob = 0.5), ^if.then42, ^b55;
  ^while.body26:
    i32 %551 = phi [^while.header23, i32 0] [^b59, i32 %736];
    i32 %552 = phi [^while.header23, i32 %487] [^b59, i32 %738];
    i32 %553 = phi [^while.header23, i32 %488] [^b59, i32 %739];
    i32 %554 = phi [^while.header23, i32 0] [^b59, i32 %735];
    i1 %555 = ztrunc i32 %552 to i1;
    cbr i1 %555(prob = 0.5), ^if.then47, ^if.else32;
  ^while.body27:
    i32 %556 = phi [^while.header24, i32 0] [^b60, i32 %741];
    i32 %557 = phi [^while.header24, i32 0] [^b60, i32 %740];
    i32 %558 = phi [^while.header24, i32 %490] [^b60, i32 %743];
    i32 %559 = phi [^while.header24, i32 %491] [^b60, i32 %744];
    i1 %560 = ztrunc i32 %558 to i1;
    cbr i1 %560(prob = 0.5), ^if.then48, ^if.else33;
  ^while.body28:
    i32 %561 = phi [^while.header25, i32 0] [^b61, i32 %746];
    i32 %562 = phi [^while.header25, i32 0] [^b61, i32 %745];
    i32 %563 = phi [^while.header25, i32 %493] [^b61, i32 %748];
    i32 %564 = phi [^while.header25, i32 %494] [^b61, i32 %749];
    i1 %565 = ztrunc i32 %563 to i1;
    cbr i1 %565(prob = 0.5), ^if.then49, ^if.else34;
  ^while.header26:
    i32 %566 = phi [^b48, i32 %293] [^b88, i32 %825];
    i32 %567 = phi [^b48, i32 %292] [^b88, i32 %1115];
    i1 %568 = icmp neq i32 %567, i32 0;
    cbr i1 %568(prob = 0.984615), ^while.body32, ^b51;
  ^while.header27:
    i32 %569 = phi [^b44, i32 %225] [^b87, i32 %830];
    i32 %570 = phi [^b44, i32 %225] [^b87, i32 %1110];
    i1 %571 = icmp neq i32 %570, i32 0;
    cbr i1 %571(prob = 0.984615), ^while.body33, ^if.else35;
  ^while.header28:
    i32 %572 = phi [^b45, i32 %218] [^b86, i32 %835];
    i32 %573 = phi [^b45, i32 %218] [^b86, i32 %1105];
    i1 %574 = icmp neq i32 %573, i32 0;
    cbr i1 %574(prob = 0.984615), ^while.body34, ^if.else36;
  ^if.else28:
    i1 %575 = icmp sgt i32 %187, i32 32767;
    cbr i1 %575(prob = 0.5), ^if.then43, ^if.else30;
  ^b52:
    i32 %576 = phi [^if.then37, i32 %456] [^if.else24, i32 %456] [^if.then38, i32 %536];
    i32 %577 = add i32 %455, i32 1;
    i1 %578 = icmp slt i32 %577, i32 16;
    i32 %579 = sdiv i32 %457, i32 2;
    i32 %580 = sdiv i32 %458, i32 2;
    cbr i1 %578(prob = 0.9375), ^while.body22, ^while.body37;
  ^b53:
    i32 %581 = phi [^while.body24, i32 %513] [^if.then39, i32 %539];
    i32 %582 = add i32 %510, i32 1;
    i1 %583 = icmp slt i32 %582, i32 16;
    i32 %584 = sdiv i32 %511, i32 2;
    i32 %585 = sdiv i32 %512, i32 2;
    cbr i1 %583(prob = 0.9375), ^while.body24, ^if.else29;
  ^while.body29:
    i32 %586 = phi [^if.else22, i32 0] [^b56, i32 %667];
    i32 %587 = phi [^if.else22, i32 %474] [^b56, i32 %669];
    i32 %588 = phi [^if.else22, i32 65535] [^b56, i32 %670];
    i32 %589 = phi [^if.else22, i32 0] [^b56, i32 %666];
    i32 %590 = and i32 %587, i32 %588;
    i1 %591 = ztrunc i32 %590 to i1;
    cbr i1 %591(prob = 0.5), ^if.then44, ^b56;
  ^while.body30:
    i32 %592 = phi [^b46, i32 0] [^b57, i32 %672];
    i32 %593 = phi [^b46, i32 0] [^b57, i32 %671];
    i32 %594 = phi [^b46, i32 %289] [^b57, i32 %674];
    i32 %595 = phi [^b46, i32 %290] [^b57, i32 %675];
    i32 %596 = and i32 %594, i32 %595;
    i1 %597 = ztrunc i32 %596 to i1;
    cbr i1 %597(prob = 0.5), ^if.then45, ^b57;
  ^while.body31:
    i32 %598 = phi [^b47, i32 0] [^b58, i32 %677];
    i32 %599 = phi [^b47, i32 0] [^b58, i32 %676];
    i32 %600 = phi [^b47, i32 %296] [^b58, i32 %679];
    i32 %601 = phi [^b47, i32 %297] [^b58, i32 %680];
    i32 %602 = and i32 %600, i32 %601;
    i1 %603 = ztrunc i32 %602 to i1;
    cbr i1 %603(prob = 0.5), ^if.then46, ^b58;
  ^b54:
    i32 %604 = phi [^while.body25, i32 %531] [^if.then40, i32 %542];
    i32 %605 = add i32 %528, i32 1;
    i1 %606 = icmp slt i32 %605, i32 16;
    i32 %607 = sdiv i32 %529, i32 2;
    i32 %608 = sdiv i32 %530, i32 2;
    cbr i1 %606(prob = 0.9375), ^while.body25, ^if.else31;
  ^if.then42:
    i32* %609 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %482];
    i32 %610 = load i32* %609;
    i32 %611 = add i32 %485, i32 %610;
    ubr ^b55;
  ^if.then43:
    i32 %612 = load i32* %1;
    i32 %613 = sdiv i32 %187, i32 %612;
    i32 %614 = add i32 %613, i32 65536;
    i32 %615 = load i32* %15;
    i32 %616 = sub i32 %614, i32 %615;
    ubr ^while.header11;
  ^if.then44:
    i32* %617 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %586];
    i32 %618 = load i32* %617;
    i32 %619 = add i32 %589, i32 %618;
    ubr ^b56;
  ^if.then45:
    i32* %620 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %592];
    i32 %621 = load i32* %620;
    i32 %622 = add i32 %593, i32 %621;
    ubr ^b57;
  ^if.then46:
    i32* %623 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %598];
    i32 %624 = load i32* %623;
    i32 %625 = add i32 %599, i32 %624;
    ubr ^b58;
  ^if.else29:
    i32 %626 = load i32* %1;
    i32 %627 = mul i32 %581, i32 %626;
    ubr ^while.body39;
  ^if.else30:
    i32 %628 = load i32* %1;
    i32 %629 = sdiv i32 %187, i32 %628;
    ubr ^while.header11;
  ^b55:
    i32 %630 = phi [^if.then41, i32 %485] [^if.else27, i32 %485] [^if.then42, i32 %611];
    i32 %631 = add i32 %482, i32 1;
    i1 %632 = icmp slt i32 %631, i32 16;
    i32 %633 = sdiv i32 %483, i32 2;
    i32 %634 = sdiv i32 %484, i32 2;
    cbr i1 %632(prob = 0.9375), ^while.body23, ^while.body38;
  ^if.then47:
    i32 %635 = and i32 %553, i32 1;
    i1 %636 = icmp eq i32 %635, i32 0;
    cbr i1 %636(prob = 0.5), ^if.then50, ^b59;
  ^if.then48:
    i32 %637 = and i32 %559, i32 1;
    i1 %638 = icmp eq i32 %637, i32 0;
    cbr i1 %638(prob = 0.5), ^if.then51, ^b60;
  ^if.then49:
    i32 %639 = and i32 %564, i32 1;
    i1 %640 = icmp eq i32 %639, i32 0;
    cbr i1 %640(prob = 0.5), ^if.then52, ^b61;
  ^if.else31:
    i32 %641 = load i32* %1;
    i32 %642 = mul i32 %604, i32 %641;
    ubr ^while.body41;
  ^if.else32:
    i1 %643 = ztrunc i32 %553 to i1;
    cbr i1 %643(prob = 0.5), ^if.then50, ^b59;
  ^if.else33:
    i1 %644 = ztrunc i32 %559 to i1;
    cbr i1 %644(prob = 0.5), ^if.then51, ^b60;
  ^if.else34:
    i1 %645 = ztrunc i32 %564 to i1;
    cbr i1 %645(prob = 0.5), ^if.then52, ^b61;
  ^while.body32:
    i32 %646 = phi [^while.header26, i32 0] [^b65, i32 %826];
    i32 %647 = phi [^while.header26, i32 0] [^b65, i32 %825];
    i32 %648 = phi [^while.header26, i32 %566] [^b65, i32 %828];
    i32 %649 = phi [^while.header26, i32 %567] [^b65, i32 %829];
    i1 %650 = ztrunc i32 %648 to i1;
    cbr i1 %650(prob = 0.5), ^if.then58, ^if.else41;
  ^while.body33:
    i32 %651 = phi [^while.header27, i32 0] [^b66, i32 %831];
    i32 %652 = phi [^while.header27, i32 0] [^b66, i32 %830];
    i32 %653 = phi [^while.header27, i32 %569] [^b66, i32 %833];
    i32 %654 = phi [^while.header27, i32 %570] [^b66, i32 %834];
    i1 %655 = ztrunc i32 %653 to i1;
    cbr i1 %655(prob = 0.5), ^if.then59, ^if.else42;
  ^while.body34:
    i32 %656 = phi [^while.header28, i32 0] [^b67, i32 %836];
    i32 %657 = phi [^while.header28, i32 %572] [^b67, i32 %838];
    i32 %658 = phi [^while.header28, i32 %573] [^b67, i32 %839];
    i32 %659 = phi [^while.header28, i32 0] [^b67, i32 %835];
    i1 %660 = ztrunc i32 %657 to i1;
    cbr i1 %660(prob = 0.5), ^if.then60, ^if.else43;
  ^while.header29:
    i32 %661 = phi [^b51, i32 %292] [^b89, i32 %908];
    i32 %662 = phi [^b51, i32 %292] [^b89, i32 %1129];
    i1 %663 = icmp neq i32 %662, i32 0;
    cbr i1 %663(prob = 0.984615), ^while.body40, ^if.else44;
  ^if.else35:
    i1 %664 = icmp sgt i32 %227, i32 32767;
    cbr i1 %664(prob = 0.5), ^if.then53, ^if.else39;
  ^if.else36:
    i1 %665 = icmp sgt i32 %220, i32 32767;
    cbr i1 %665(prob = 0.5), ^if.then54, ^if.else40;
  ^b56:
    i32 %666 = phi [^while.body29, i32 %589] [^if.then44, i32 %619];
    i32 %667 = add i32 %586, i32 1;
    i1 %668 = icmp slt i32 %667, i32 16;
    i32 %669 = sdiv i32 %587, i32 2;
    i32 %670 = sdiv i32 %588, i32 2;
    cbr i1 %668(prob = 0.9375), ^while.body29, ^while.header10;
  ^b57:
    i32 %671 = phi [^while.body30, i32 %593] [^if.then45, i32 %622];
    i32 %672 = add i32 %592, i32 1;
    i1 %673 = icmp slt i32 %672, i32 16;
    i32 %674 = sdiv i32 %594, i32 2;
    i32 %675 = sdiv i32 %595, i32 2;
    cbr i1 %673(prob = 0.9375), ^while.body30, ^if.else38;
  ^b58:
    i32 %676 = phi [^while.body31, i32 %599] [^if.then46, i32 %625];
    i32 %677 = add i32 %598, i32 1;
    i1 %678 = icmp slt i32 %677, i32 16;
    i32 %679 = sdiv i32 %600, i32 2;
    i32 %680 = sdiv i32 %601, i32 2;
    cbr i1 %678(prob = 0.9375), ^while.body31, ^if.else37;
  ^while.body35:
    i32 %681 = phi [^if.else25, i32 0] [^b62, i32 %778];
    i32 %682 = phi [^if.else25, i32 %546] [^b62, i32 %780];
    i32 %683 = phi [^if.else25, i32 65535] [^b62, i32 %781];
    i32 %684 = phi [^if.else25, i32 0] [^b62, i32 %777];
    i32 %685 = and i32 %682, i32 %683;
    i1 %686 = ztrunc i32 %685 to i1;
    cbr i1 %686(prob = 0.5), ^if.then55, ^b62;
  ^while.body36:
    i32 %687 = phi [^if.else26, i32 0] [^b63, i32 %783];
    i32 %688 = phi [^if.else26, i32 %548] [^b63, i32 %785];
    i32 %689 = phi [^if.else26, i32 65535] [^b63, i32 %786];
    i32 %690 = phi [^if.else26, i32 0] [^b63, i32 %782];
    i32 %691 = and i32 %688, i32 %689;
    i1 %692 = ztrunc i32 %691 to i1;
    cbr i1 %692(prob = 0.5), ^if.then56, ^b63;
  ^while.body37:
    i32 %693 = phi [^b52, i32 0] [^b64, i32 %788];
    i32 %694 = phi [^b52, i32 %380] [^b64, i32 %790];
    i32 %695 = phi [^b52, i32 %381] [^b64, i32 %791];
    i32 %696 = phi [^b52, i32 0] [^b64, i32 %787];
    i32 %697 = and i32 %694, i32 %695;
    i1 %698 = ztrunc i32 %697 to i1;
    cbr i1 %698(prob = 0.5), ^if.then57, ^b64;
  ^if.then50:
    i32* %699 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %551];
    i32 %700 = load i32* %699;
    i32 %701 = add i32 %554, i32 %700;
    ubr ^b59;
  ^if.then51:
    i32* %702 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %556];
    i32 %703 = load i32* %702;
    i32 %704 = add i32 %557, i32 %703;
    ubr ^b60;
  ^if.then52:
    i32* %705 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %561];
    i32 %706 = load i32* %705;
    i32 %707 = add i32 %562, i32 %706;
    ubr ^b61;
  ^if.then53:
    i32 %708 = load i32* %1;
    i32 %709 = sdiv i32 %227, i32 %708;
    i32 %710 = add i32 %709, i32 65536;
    i32 %711 = load i32* %15;
    i32 %712 = sub i32 %710, i32 %711;
    ubr ^while.header16;
  ^if.then54:
    i32 %713 = load i32* %1;
    i32 %714 = sdiv i32 %220, i32 %713;
    i32 %715 = add i32 %714, i32 65536;
    i32 %716 = load i32* %15;
    i32 %717 = sub i32 %715, i32 %716;
    ubr ^while.header14;
  ^if.then55:
    i32* %718 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %681];
    i32 %719 = load i32* %718;
    i32 %720 = add i32 %684, i32 %719;
    ubr ^b62;
  ^if.then56:
    i32* %721 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %687];
    i32 %722 = load i32* %721;
    i32 %723 = add i32 %690, i32 %722;
    ubr ^b63;
  ^if.then57:
    i32* %724 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %693];
    i32 %725 = load i32* %724;
    i32 %726 = add i32 %696, i32 %725;
    ubr ^b64;
  ^if.else37:
    i32 %727 = load i32* %1;
    i32 %728 = mul i32 %676, i32 %727;
    ubr ^while.body45;
  ^if.else38:
    i32 %729 = load i32* %1;
    i32 %730 = mul i32 %671, i32 %729;
    ubr ^while.body46;
  ^if.else39:
    i32 %731 = load i32* %1;
    i32 %732 = sdiv i32 %227, i32 %731;
    ubr ^while.header16;
  ^if.else40:
    i32 %733 = load i32* %1;
    i32 %734 = sdiv i32 %220, i32 %733;
    ubr ^while.header14;
  ^b59:
    i32 %735 = phi [^if.then47, i32 %554] [^if.else32, i32 %554] [^if.then50, i32 %701];
    i32 %736 = add i32 %551, i32 1;
    i1 %737 = icmp slt i32 %736, i32 16;
    i32 %738 = sdiv i32 %552, i32 2;
    i32 %739 = sdiv i32 %553, i32 2;
    cbr i1 %737(prob = 0.9375), ^while.body26, ^while.body42;
  ^b60:
    i32 %740 = phi [^if.then48, i32 %557] [^if.else33, i32 %557] [^if.then51, i32 %704];
    i32 %741 = add i32 %556, i32 1;
    i1 %742 = icmp slt i32 %741, i32 16;
    i32 %743 = sdiv i32 %558, i32 2;
    i32 %744 = sdiv i32 %559, i32 2;
    cbr i1 %742(prob = 0.9375), ^while.body27, ^while.body43;
  ^b61:
    i32 %745 = phi [^if.then49, i32 %562] [^if.else34, i32 %562] [^if.then52, i32 %707];
    i32 %746 = add i32 %561, i32 1;
    i1 %747 = icmp slt i32 %746, i32 16;
    i32 %748 = sdiv i32 %563, i32 2;
    i32 %749 = sdiv i32 %564, i32 2;
    cbr i1 %747(prob = 0.9375), ^while.body28, ^while.body44;
  ^if.then58:
    i32 %750 = and i32 %649, i32 1;
    i1 %751 = icmp eq i32 %750, i32 0;
    cbr i1 %751(prob = 0.5), ^if.then61, ^b65;
  ^if.then59:
    i32 %752 = and i32 %654, i32 1;
    i1 %753 = icmp eq i32 %752, i32 0;
    cbr i1 %753(prob = 0.5), ^if.then62, ^b66;
  ^if.then60:
    i32 %754 = and i32 %658, i32 1;
    i1 %755 = icmp eq i32 %754, i32 0;
    cbr i1 %755(prob = 0.5), ^if.then63, ^b67;
  ^while.body38:
    i32 %756 = phi [^b55, i32 0] [^b68, i32 %841];
    i32 %757 = phi [^b55, i32 0] [^b68, i32 %840];
    i32 %758 = phi [^b55, i32 %409] [^b68, i32 %843];
    i32 %759 = phi [^b55, i32 %410] [^b68, i32 %844];
    i32 %760 = and i32 %758, i32 %759;
    i1 %761 = ztrunc i32 %760 to i1;
    cbr i1 %761(prob = 0.5), ^if.then64, ^b68;
  ^if.else41:
    i1 %762 = ztrunc i32 %649 to i1;
    cbr i1 %762(prob = 0.5), ^if.then61, ^b65;
  ^if.else42:
    i1 %763 = ztrunc i32 %654 to i1;
    cbr i1 %763(prob = 0.5), ^if.then62, ^b66;
  ^if.else43:
    i1 %764 = ztrunc i32 %658 to i1;
    cbr i1 %764(prob = 0.5), ^if.then63, ^b67;
  ^while.body39:
    i32 %765 = phi [^if.else29, i32 0] [^b69, i32 %866];
    i32 %766 = phi [^if.else29, i32 0] [^b69, i32 %865];
    i32 %767 = phi [^if.else29, i32 %627] [^b69, i32 %868];
    i32 %768 = phi [^if.else29, i32 65535] [^b69, i32 %869];
    i32 %769 = and i32 %767, i32 %768;
    i1 %770 = ztrunc i32 %769 to i1;
    cbr i1 %770(prob = 0.5), ^if.then65, ^b69;
  ^while.body40:
    i32 %771 = phi [^while.header29, i32 0] [^b71, i32 %909];
    i32 %772 = phi [^while.header29, i32 0] [^b71, i32 %908];
    i32 %773 = phi [^while.header29, i32 %661] [^b71, i32 %911];
    i32 %774 = phi [^while.header29, i32 %662] [^b71, i32 %912];
    i1 %775 = ztrunc i32 %773 to i1;
    cbr i1 %775(prob = 0.5), ^if.then68, ^if.else47;
  ^if.else44:
    i1 %776 = icmp sgt i32 %294, i32 32767;
    cbr i1 %776(prob = 0.5), ^if.then66, ^if.else46;
  ^b62:
    i32 %777 = phi [^while.body35, i32 %684] [^if.then55, i32 %720];
    i32 %778 = add i32 %681, i32 1;
    i1 %779 = icmp slt i32 %778, i32 16;
    i32 %780 = sdiv i32 %682, i32 2;
    i32 %781 = sdiv i32 %683, i32 2;
    cbr i1 %779(prob = 0.9375), ^while.body35, ^while.header13;
  ^b63:
    i32 %782 = phi [^while.body36, i32 %690] [^if.then56, i32 %723];
    i32 %783 = add i32 %687, i32 1;
    i1 %784 = icmp slt i32 %783, i32 16;
    i32 %785 = sdiv i32 %688, i32 2;
    i32 %786 = sdiv i32 %689, i32 2;
    cbr i1 %784(prob = 0.9375), ^while.body36, ^while.header12;
  ^b64:
    i32 %787 = phi [^while.body37, i32 %696] [^if.then57, i32 %726];
    i32 %788 = add i32 %693, i32 1;
    i1 %789 = icmp slt i32 %788, i32 16;
    i32 %790 = sdiv i32 %694, i32 2;
    i32 %791 = sdiv i32 %695, i32 2;
    cbr i1 %789(prob = 0.9375), ^while.body37, ^if.else45;
  ^while.body41:
    i32 %792 = phi [^if.else31, i32 0] [^b70, i32 %884];
    i32 %793 = phi [^if.else31, i32 0] [^b70, i32 %883];
    i32 %794 = phi [^if.else31, i32 %642] [^b70, i32 %886];
    i32 %795 = phi [^if.else31, i32 65535] [^b70, i32 %887];
    i32 %796 = and i32 %794, i32 %795;
    i1 %797 = ztrunc i32 %796 to i1;
    cbr i1 %797(prob = 0.5), ^if.then67, ^b70;
  ^if.then61:
    i32* %798 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %646];
    i32 %799 = load i32* %798;
    i32 %800 = add i32 %647, i32 %799;
    ubr ^b65;
  ^if.then62:
    i32* %801 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %651];
    i32 %802 = load i32* %801;
    i32 %803 = add i32 %652, i32 %802;
    ubr ^b66;
  ^if.then63:
    i32* %804 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %656];
    i32 %805 = load i32* %804;
    i32 %806 = add i32 %659, i32 %805;
    ubr ^b67;
  ^if.then64:
    i32* %807 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %756];
    i32 %808 = load i32* %807;
    i32 %809 = add i32 %757, i32 %808;
    ubr ^b68;
  ^if.then65:
    i32* %810 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %765];
    i32 %811 = load i32* %810;
    i32 %812 = add i32 %766, i32 %811;
    ubr ^b69;
  ^if.then66:
    i32 %813 = load i32* %1;
    i32 %814 = sdiv i32 %294, i32 %813;
    i32 %815 = add i32 %814, i32 65536;
    i32 %816 = load i32* %15;
    i32 %817 = sub i32 %815, i32 %816;
    ubr ^while.header19;
  ^if.then67:
    i32* %818 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %792];
    i32 %819 = load i32* %818;
    i32 %820 = add i32 %793, i32 %819;
    ubr ^b70;
  ^if.else45:
    i32 %821 = load i32* %1;
    i32 %822 = mul i32 %787, i32 %821;
    ubr ^while.body50;
  ^if.else46:
    i32 %823 = load i32* %1;
    i32 %824 = sdiv i32 %294, i32 %823;
    ubr ^while.header19;
  ^b65:
    i32 %825 = phi [^if.then58, i32 %647] [^if.else41, i32 %647] [^if.then61, i32 %800];
    i32 %826 = add i32 %646, i32 1;
    i1 %827 = icmp slt i32 %826, i32 16;
    i32 %828 = sdiv i32 %648, i32 2;
    i32 %829 = sdiv i32 %649, i32 2;
    cbr i1 %827(prob = 0.9375), ^while.body32, ^while.body47;
  ^b66:
    i32 %830 = phi [^if.then59, i32 %652] [^if.else42, i32 %652] [^if.then62, i32 %803];
    i32 %831 = add i32 %651, i32 1;
    i1 %832 = icmp slt i32 %831, i32 16;
    i32 %833 = sdiv i32 %653, i32 2;
    i32 %834 = sdiv i32 %654, i32 2;
    cbr i1 %832(prob = 0.9375), ^while.body33, ^while.body48;
  ^b67:
    i32 %835 = phi [^if.then60, i32 %659] [^if.else43, i32 %659] [^if.then63, i32 %806];
    i32 %836 = add i32 %656, i32 1;
    i1 %837 = icmp slt i32 %836, i32 16;
    i32 %838 = sdiv i32 %657, i32 2;
    i32 %839 = sdiv i32 %658, i32 2;
    cbr i1 %837(prob = 0.9375), ^while.body34, ^while.body49;
  ^b68:
    i32 %840 = phi [^while.body38, i32 %757] [^if.then64, i32 %809];
    i32 %841 = add i32 %756, i32 1;
    i1 %842 = icmp slt i32 %841, i32 16;
    i32 %843 = sdiv i32 %758, i32 2;
    i32 %844 = sdiv i32 %759, i32 2;
    cbr i1 %842(prob = 0.9375), ^while.body38, ^if.else48;
  ^if.then68:
    i32 %845 = and i32 %774, i32 1;
    i1 %846 = icmp eq i32 %845, i32 0;
    cbr i1 %846(prob = 0.5), ^if.then69, ^b71;
  ^while.body42:
    i32 %847 = phi [^b59, i32 0] [^b72, i32 %914];
    i32 %848 = phi [^b59, i32 %487] [^b72, i32 %916];
    i32 %849 = phi [^b59, i32 %488] [^b72, i32 %917];
    i32 %850 = phi [^b59, i32 0] [^b72, i32 %913];
    i32 %851 = and i32 %848, i32 %849;
    i1 %852 = ztrunc i32 %851 to i1;
    cbr i1 %852(prob = 0.5), ^if.then70, ^b72;
  ^while.body43:
    i32 %853 = phi [^b60, i32 0] [^b73, i32 %919];
    i32 %854 = phi [^b60, i32 0] [^b73, i32 %918];
    i32 %855 = phi [^b60, i32 %490] [^b73, i32 %921];
    i32 %856 = phi [^b60, i32 %491] [^b73, i32 %922];
    i32 %857 = and i32 %855, i32 %856;
    i1 %858 = ztrunc i32 %857 to i1;
    cbr i1 %858(prob = 0.5), ^if.then71, ^b73;
  ^while.body44:
    i32 %859 = phi [^b61, i32 0] [^b74, i32 %924];
    i32 %860 = phi [^b61, i32 0] [^b74, i32 %923];
    i32 %861 = phi [^b61, i32 %493] [^b74, i32 %926];
    i32 %862 = phi [^b61, i32 %494] [^b74, i32 %927];
    i32 %863 = and i32 %861, i32 %862;
    i1 %864 = ztrunc i32 %863 to i1;
    cbr i1 %864(prob = 0.5), ^if.then72, ^b74;
  ^b69:
    i32 %865 = phi [^while.body39, i32 %766] [^if.then65, i32 %812];
    i32 %866 = add i32 %765, i32 1;
    i1 %867 = icmp slt i32 %866, i32 16;
    i32 %868 = sdiv i32 %767, i32 2;
    i32 %869 = sdiv i32 %768, i32 2;
    cbr i1 %867(prob = 0.9375), ^while.body39, ^while.header15;
  ^if.else47:
    i1 %870 = ztrunc i32 %774 to i1;
    cbr i1 %870(prob = 0.5), ^if.then69, ^b71;
  ^while.body45:
    i32 %871 = phi [^if.else37, i32 0] [^b75, i32 %947];
    i32 %872 = phi [^if.else37, i32 %728] [^b75, i32 %949];
    i32 %873 = phi [^if.else37, i32 65535] [^b75, i32 %950];
    i32 %874 = phi [^if.else37, i32 0] [^b75, i32 %946];
    i32 %875 = and i32 %872, i32 %873;
    i1 %876 = ztrunc i32 %875 to i1;
    cbr i1 %876(prob = 0.5), ^if.then73, ^b75;
  ^while.body46:
    i32 %877 = phi [^if.else38, i32 0] [^b76, i32 %952];
    i32 %878 = phi [^if.else38, i32 0] [^b76, i32 %951];
    i32 %879 = phi [^if.else38, i32 %730] [^b76, i32 %954];
    i32 %880 = phi [^if.else38, i32 65535] [^b76, i32 %955];
    i32 %881 = and i32 %879, i32 %880;
    i1 %882 = ztrunc i32 %881 to i1;
    cbr i1 %882(prob = 0.5), ^if.then74, ^b76;
  ^b70:
    i32 %883 = phi [^while.body41, i32 %793] [^if.then67, i32 %820];
    i32 %884 = add i32 %792, i32 1;
    i1 %885 = icmp slt i32 %884, i32 16;
    i32 %886 = sdiv i32 %794, i32 2;
    i32 %887 = sdiv i32 %795, i32 2;
    cbr i1 %885(prob = 0.9375), ^while.body41, ^while.header17;
  ^if.then69:
    i32* %888 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %771];
    i32 %889 = load i32* %888;
    i32 %890 = add i32 %772, i32 %889;
    ubr ^b71;
  ^if.then70:
    i32* %891 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %847];
    i32 %892 = load i32* %891;
    i32 %893 = add i32 %850, i32 %892;
    ubr ^b72;
  ^if.then71:
    i32* %894 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %853];
    i32 %895 = load i32* %894;
    i32 %896 = add i32 %854, i32 %895;
    ubr ^b73;
  ^if.then72:
    i32* %897 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %859];
    i32 %898 = load i32* %897;
    i32 %899 = add i32 %860, i32 %898;
    ubr ^b74;
  ^if.else48:
    i32 %900 = load i32* %1;
    i32 %901 = mul i32 %840, i32 %900;
    ubr ^while.body51;
  ^if.then73:
    i32* %902 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %871];
    i32 %903 = load i32* %902;
    i32 %904 = add i32 %874, i32 %903;
    ubr ^b75;
  ^if.then74:
    i32* %905 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %877];
    i32 %906 = load i32* %905;
    i32 %907 = add i32 %878, i32 %906;
    ubr ^b76;
  ^b71:
    i32 %908 = phi [^if.then68, i32 %772] [^if.else47, i32 %772] [^if.then69, i32 %890];
    i32 %909 = add i32 %771, i32 1;
    i1 %910 = icmp slt i32 %909, i32 16;
    i32 %911 = sdiv i32 %773, i32 2;
    i32 %912 = sdiv i32 %774, i32 2;
    cbr i1 %910(prob = 0.9375), ^while.body40, ^while.body52;
  ^b72:
    i32 %913 = phi [^while.body42, i32 %850] [^if.then70, i32 %893];
    i32 %914 = add i32 %847, i32 1;
    i1 %915 = icmp slt i32 %914, i32 16;
    i32 %916 = sdiv i32 %848, i32 2;
    i32 %917 = sdiv i32 %849, i32 2;
    cbr i1 %915(prob = 0.9375), ^while.body42, ^if.else51;
  ^b73:
    i32 %918 = phi [^while.body43, i32 %854] [^if.then71, i32 %896];
    i32 %919 = add i32 %853, i32 1;
    i1 %920 = icmp slt i32 %919, i32 16;
    i32 %921 = sdiv i32 %855, i32 2;
    i32 %922 = sdiv i32 %856, i32 2;
    cbr i1 %920(prob = 0.9375), ^while.body43, ^if.else50;
  ^b74:
    i32 %923 = phi [^while.body44, i32 %860] [^if.then72, i32 %899];
    i32 %924 = add i32 %859, i32 1;
    i1 %925 = icmp slt i32 %924, i32 16;
    i32 %926 = sdiv i32 %861, i32 2;
    i32 %927 = sdiv i32 %862, i32 2;
    cbr i1 %925(prob = 0.9375), ^while.body44, ^if.else49;
  ^while.body47:
    i32 %928 = phi [^b65, i32 0] [^b77, i32 %987];
    i32 %929 = phi [^b65, i32 0] [^b77, i32 %986];
    i32 %930 = phi [^b65, i32 %566] [^b77, i32 %989];
    i32 %931 = phi [^b65, i32 %567] [^b77, i32 %990];
    i32 %932 = and i32 %930, i32 %931;
    i1 %933 = ztrunc i32 %932 to i1;
    cbr i1 %933(prob = 0.5), ^if.then75, ^b77;
  ^while.body48:
    i32 %934 = phi [^b66, i32 0] [^b78, i32 %992];
    i32 %935 = phi [^b66, i32 0] [^b78, i32 %991];
    i32 %936 = phi [^b66, i32 %569] [^b78, i32 %994];
    i32 %937 = phi [^b66, i32 %570] [^b78, i32 %995];
    i32 %938 = and i32 %936, i32 %937;
    i1 %939 = ztrunc i32 %938 to i1;
    cbr i1 %939(prob = 0.5), ^if.then76, ^b78;
  ^while.body49:
    i32 %940 = phi [^b67, i32 0] [^b79, i32 %997];
    i32 %941 = phi [^b67, i32 0] [^b79, i32 %996];
    i32 %942 = phi [^b67, i32 %572] [^b79, i32 %999];
    i32 %943 = phi [^b67, i32 %573] [^b79, i32 %1000];
    i32 %944 = and i32 %942, i32 %943;
    i1 %945 = ztrunc i32 %944 to i1;
    cbr i1 %945(prob = 0.5), ^if.then77, ^b79;
  ^b75:
    i32 %946 = phi [^while.body45, i32 %874] [^if.then73, i32 %904];
    i32 %947 = add i32 %871, i32 1;
    i1 %948 = icmp slt i32 %947, i32 16;
    i32 %949 = sdiv i32 %872, i32 2;
    i32 %950 = sdiv i32 %873, i32 2;
    cbr i1 %948(prob = 0.9375), ^while.body45, ^while.header20;
  ^b76:
    i32 %951 = phi [^while.body46, i32 %878] [^if.then74, i32 %907];
    i32 %952 = add i32 %877, i32 1;
    i1 %953 = icmp slt i32 %952, i32 16;
    i32 %954 = sdiv i32 %879, i32 2;
    i32 %955 = sdiv i32 %880, i32 2;
    cbr i1 %953(prob = 0.9375), ^while.body46, ^while.header18;
  ^while.body50:
    i32 %956 = phi [^if.else45, i32 0] [^b80, i32 %1008];
    i32 %957 = phi [^if.else45, i32 %822] [^b80, i32 %1010];
    i32 %958 = phi [^if.else45, i32 65535] [^b80, i32 %1011];
    i32 %959 = phi [^if.else45, i32 0] [^b80, i32 %1007];
    i32 %960 = and i32 %957, i32 %958;
    i1 %961 = ztrunc i32 %960 to i1;
    cbr i1 %961(prob = 0.5), ^if.then78, ^b80;
  ^if.then75:
    i32* %962 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %928];
    i32 %963 = load i32* %962;
    i32 %964 = add i32 %929, i32 %963;
    ubr ^b77;
  ^if.then76:
    i32* %965 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %934];
    i32 %966 = load i32* %965;
    i32 %967 = add i32 %935, i32 %966;
    ubr ^b78;
  ^if.then77:
    i32* %968 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %940];
    i32 %969 = load i32* %968;
    i32 %970 = add i32 %941, i32 %969;
    ubr ^b79;
  ^if.else49:
    i32 %971 = load i32* %1;
    i32 %972 = mul i32 %923, i32 %971;
    ubr ^while.body53;
  ^if.else50:
    i32 %973 = load i32* %1;
    i32 %974 = mul i32 %918, i32 %973;
    ubr ^while.body54;
  ^if.else51:
    i32 %975 = load i32* %1;
    i32 %976 = mul i32 %913, i32 %975;
    ubr ^while.body55;
  ^if.then78:
    i32* %977 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %956];
    i32 %978 = load i32* %977;
    i32 %979 = add i32 %959, i32 %978;
    ubr ^b80;
  ^while.body51:
    i32 %980 = phi [^if.else48, i32 0] [^b81, i32 %1025];
    i32 %981 = phi [^if.else48, i32 %901] [^b81, i32 %1027];
    i32 %982 = phi [^if.else48, i32 65535] [^b81, i32 %1028];
    i32 %983 = phi [^if.else48, i32 0] [^b81, i32 %1024];
    i32 %984 = and i32 %981, i32 %982;
    i1 %985 = ztrunc i32 %984 to i1;
    cbr i1 %985(prob = 0.5), ^if.then79, ^b81;
  ^b77:
    i32 %986 = phi [^while.body47, i32 %929] [^if.then75, i32 %964];
    i32 %987 = add i32 %928, i32 1;
    i1 %988 = icmp slt i32 %987, i32 16;
    i32 %989 = sdiv i32 %930, i32 2;
    i32 %990 = sdiv i32 %931, i32 2;
    cbr i1 %988(prob = 0.9375), ^while.body47, ^if.else54;
  ^b78:
    i32 %991 = phi [^while.body48, i32 %935] [^if.then76, i32 %967];
    i32 %992 = add i32 %934, i32 1;
    i1 %993 = icmp slt i32 %992, i32 16;
    i32 %994 = sdiv i32 %936, i32 2;
    i32 %995 = sdiv i32 %937, i32 2;
    cbr i1 %993(prob = 0.9375), ^while.body48, ^if.else53;
  ^b79:
    i32 %996 = phi [^while.body49, i32 %941] [^if.then77, i32 %970];
    i32 %997 = add i32 %940, i32 1;
    i1 %998 = icmp slt i32 %997, i32 16;
    i32 %999 = sdiv i32 %942, i32 2;
    i32 %1000 = sdiv i32 %943, i32 2;
    cbr i1 %998(prob = 0.9375), ^while.body49, ^if.else52;
  ^while.body52:
    i32 %1001 = phi [^b71, i32 0] [^b82, i32 %1048];
    i32 %1002 = phi [^b71, i32 0] [^b82, i32 %1047];
    i32 %1003 = phi [^b71, i32 %661] [^b82, i32 %1050];
    i32 %1004 = phi [^b71, i32 %662] [^b82, i32 %1051];
    i32 %1005 = and i32 %1003, i32 %1004;
    i1 %1006 = ztrunc i32 %1005 to i1;
    cbr i1 %1006(prob = 0.5), ^if.then80, ^b82;
  ^b80:
    i32 %1007 = phi [^while.body50, i32 %959] [^if.then78, i32 %979];
    i32 %1008 = add i32 %956, i32 1;
    i1 %1009 = icmp slt i32 %1008, i32 16;
    i32 %1010 = sdiv i32 %957, i32 2;
    i32 %1011 = sdiv i32 %958, i32 2;
    cbr i1 %1009(prob = 0.9375), ^while.body50, ^while.header21;
  ^if.then79:
    i32* %1012 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %980];
    i32 %1013 = load i32* %1012;
    i32 %1014 = add i32 %983, i32 %1013;
    ubr ^b81;
  ^if.then80:
    i32* %1015 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1001];
    i32 %1016 = load i32* %1015;
    i32 %1017 = add i32 %1002, i32 %1016;
    ubr ^b82;
  ^if.else52:
    i32 %1018 = load i32* %1;
    i32 %1019 = mul i32 %996, i32 %1018;
    ubr ^while.body56;
  ^if.else53:
    i32 %1020 = load i32* %1;
    i32 %1021 = mul i32 %991, i32 %1020;
    ubr ^while.body57;
  ^if.else54:
    i32 %1022 = load i32* %1;
    i32 %1023 = mul i32 %986, i32 %1022;
    ubr ^while.body58;
  ^b81:
    i32 %1024 = phi [^while.body51, i32 %983] [^if.then79, i32 %1014];
    i32 %1025 = add i32 %980, i32 1;
    i1 %1026 = icmp slt i32 %1025, i32 16;
    i32 %1027 = sdiv i32 %981, i32 2;
    i32 %1028 = sdiv i32 %982, i32 2;
    cbr i1 %1026(prob = 0.9375), ^while.body51, ^while.header22;
  ^while.body53:
    i32 %1029 = phi [^if.else49, i32 0] [^b83, i32 %1064];
    i32 %1030 = phi [^if.else49, i32 0] [^b83, i32 %1063];
    i32 %1031 = phi [^if.else49, i32 %972] [^b83, i32 %1066];
    i32 %1032 = phi [^if.else49, i32 65535] [^b83, i32 %1067];
    i32 %1033 = and i32 %1031, i32 %1032;
    i1 %1034 = ztrunc i32 %1033 to i1;
    cbr i1 %1034(prob = 0.5), ^if.then81, ^b83;
  ^while.body54:
    i32 %1035 = phi [^if.else50, i32 0] [^b84, i32 %1069];
    i32 %1036 = phi [^if.else50, i32 %974] [^b84, i32 %1071];
    i32 %1037 = phi [^if.else50, i32 65535] [^b84, i32 %1072];
    i32 %1038 = phi [^if.else50, i32 0] [^b84, i32 %1068];
    i32 %1039 = and i32 %1036, i32 %1037;
    i1 %1040 = ztrunc i32 %1039 to i1;
    cbr i1 %1040(prob = 0.5), ^if.then82, ^b84;
  ^while.body55:
    i32 %1041 = phi [^if.else51, i32 0] [^b85, i32 %1074];
    i32 %1042 = phi [^if.else51, i32 %976] [^b85, i32 %1076];
    i32 %1043 = phi [^if.else51, i32 65535] [^b85, i32 %1077];
    i32 %1044 = phi [^if.else51, i32 0] [^b85, i32 %1073];
    i32 %1045 = and i32 %1042, i32 %1043;
    i1 %1046 = ztrunc i32 %1045 to i1;
    cbr i1 %1046(prob = 0.5), ^if.then83, ^b85;
  ^b82:
    i32 %1047 = phi [^while.body52, i32 %1002] [^if.then80, i32 %1017];
    i32 %1048 = add i32 %1001, i32 1;
    i1 %1049 = icmp slt i32 %1048, i32 16;
    i32 %1050 = sdiv i32 %1003, i32 2;
    i32 %1051 = sdiv i32 %1004, i32 2;
    cbr i1 %1049(prob = 0.9375), ^while.body52, ^if.else55;
  ^if.then81:
    i32* %1052 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1029];
    i32 %1053 = load i32* %1052;
    i32 %1054 = add i32 %1030, i32 %1053;
    ubr ^b83;
  ^if.then82:
    i32* %1055 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1035];
    i32 %1056 = load i32* %1055;
    i32 %1057 = add i32 %1038, i32 %1056;
    ubr ^b84;
  ^if.then83:
    i32* %1058 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1041];
    i32 %1059 = load i32* %1058;
    i32 %1060 = add i32 %1044, i32 %1059;
    ubr ^b85;
  ^if.else55:
    i32 %1061 = load i32* %1;
    i32 %1062 = mul i32 %1047, i32 %1061;
    ubr ^while.body59;
  ^b83:
    i32 %1063 = phi [^while.body53, i32 %1030] [^if.then81, i32 %1054];
    i32 %1064 = add i32 %1029, i32 1;
    i1 %1065 = icmp slt i32 %1064, i32 16;
    i32 %1066 = sdiv i32 %1031, i32 2;
    i32 %1067 = sdiv i32 %1032, i32 2;
    cbr i1 %1065(prob = 0.9375), ^while.body53, ^while.header25;
  ^b84:
    i32 %1068 = phi [^while.body54, i32 %1038] [^if.then82, i32 %1057];
    i32 %1069 = add i32 %1035, i32 1;
    i1 %1070 = icmp slt i32 %1069, i32 16;
    i32 %1071 = sdiv i32 %1036, i32 2;
    i32 %1072 = sdiv i32 %1037, i32 2;
    cbr i1 %1070(prob = 0.9375), ^while.body54, ^while.header24;
  ^b85:
    i32 %1073 = phi [^while.body55, i32 %1044] [^if.then83, i32 %1060];
    i32 %1074 = add i32 %1041, i32 1;
    i1 %1075 = icmp slt i32 %1074, i32 16;
    i32 %1076 = sdiv i32 %1042, i32 2;
    i32 %1077 = sdiv i32 %1043, i32 2;
    cbr i1 %1075(prob = 0.9375), ^while.body55, ^while.header23;
  ^while.body56:
    i32 %1078 = phi [^if.else52, i32 0] [^b86, i32 %1106];
    i32 %1079 = phi [^if.else52, i32 %1019] [^b86, i32 %1108];
    i32 %1080 = phi [^if.else52, i32 65535] [^b86, i32 %1109];
    i32 %1081 = phi [^if.else52, i32 0] [^b86, i32 %1105];
    i32 %1082 = and i32 %1079, i32 %1080;
    i1 %1083 = ztrunc i32 %1082 to i1;
    cbr i1 %1083(prob = 0.5), ^if.then84, ^b86;
  ^while.body57:
    i32 %1084 = phi [^if.else53, i32 0] [^b87, i32 %1111];
    i32 %1085 = phi [^if.else53, i32 %1021] [^b87, i32 %1113];
    i32 %1086 = phi [^if.else53, i32 65535] [^b87, i32 %1114];
    i32 %1087 = phi [^if.else53, i32 0] [^b87, i32 %1110];
    i32 %1088 = and i32 %1085, i32 %1086;
    i1 %1089 = ztrunc i32 %1088 to i1;
    cbr i1 %1089(prob = 0.5), ^if.then85, ^b87;
  ^while.body58:
    i32 %1090 = phi [^if.else54, i32 0] [^b88, i32 %1116];
    i32 %1091 = phi [^if.else54, i32 %1023] [^b88, i32 %1118];
    i32 %1092 = phi [^if.else54, i32 65535] [^b88, i32 %1119];
    i32 %1093 = phi [^if.else54, i32 0] [^b88, i32 %1115];
    i32 %1094 = and i32 %1091, i32 %1092;
    i1 %1095 = ztrunc i32 %1094 to i1;
    cbr i1 %1095(prob = 0.5), ^if.then86, ^b88;
  ^if.then84:
    i32* %1096 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1078];
    i32 %1097 = load i32* %1096;
    i32 %1098 = add i32 %1081, i32 %1097;
    ubr ^b86;
  ^if.then85:
    i32* %1099 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1084];
    i32 %1100 = load i32* %1099;
    i32 %1101 = add i32 %1087, i32 %1100;
    ubr ^b87;
  ^if.then86:
    i32* %1102 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1090];
    i32 %1103 = load i32* %1102;
    i32 %1104 = add i32 %1093, i32 %1103;
    ubr ^b88;
  ^b86:
    i32 %1105 = phi [^while.body56, i32 %1081] [^if.then84, i32 %1098];
    i32 %1106 = add i32 %1078, i32 1;
    i1 %1107 = icmp slt i32 %1106, i32 16;
    i32 %1108 = sdiv i32 %1079, i32 2;
    i32 %1109 = sdiv i32 %1080, i32 2;
    cbr i1 %1107(prob = 0.9375), ^while.body56, ^while.header28;
  ^b87:
    i32 %1110 = phi [^while.body57, i32 %1087] [^if.then85, i32 %1101];
    i32 %1111 = add i32 %1084, i32 1;
    i1 %1112 = icmp slt i32 %1111, i32 16;
    i32 %1113 = sdiv i32 %1085, i32 2;
    i32 %1114 = sdiv i32 %1086, i32 2;
    cbr i1 %1112(prob = 0.9375), ^while.body57, ^while.header27;
  ^b88:
    i32 %1115 = phi [^while.body58, i32 %1093] [^if.then86, i32 %1104];
    i32 %1116 = add i32 %1090, i32 1;
    i1 %1117 = icmp slt i32 %1116, i32 16;
    i32 %1118 = sdiv i32 %1091, i32 2;
    i32 %1119 = sdiv i32 %1092, i32 2;
    cbr i1 %1117(prob = 0.9375), ^while.body58, ^while.header26;
  ^while.body59:
    i32 %1120 = phi [^if.else55, i32 0] [^b89, i32 %1130];
    i32 %1121 = phi [^if.else55, i32 %1062] [^b89, i32 %1132];
    i32 %1122 = phi [^if.else55, i32 65535] [^b89, i32 %1133];
    i32 %1123 = phi [^if.else55, i32 0] [^b89, i32 %1129];
    i32 %1124 = and i32 %1121, i32 %1122;
    i1 %1125 = ztrunc i32 %1124 to i1;
    cbr i1 %1125(prob = 0.5), ^if.then87, ^b89;
  ^if.then87:
    i32* %1126 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1120];
    i32 %1127 = load i32* %1126;
    i32 %1128 = add i32 %1123, i32 %1127;
    ubr ^b89;
  ^b89:
    i32 %1129 = phi [^while.body59, i32 %1123] [^if.then87, i32 %1128];
    i32 %1130 = add i32 %1120, i32 1;
    i1 %1131 = icmp slt i32 %1130, i32 16;
    i32 %1132 = sdiv i32 %1121, i32 2;
    i32 %1133 = sdiv i32 %1122, i32 2;
    cbr i1 %1131(prob = 0.9375), ^while.body59, ^while.header29;
}
