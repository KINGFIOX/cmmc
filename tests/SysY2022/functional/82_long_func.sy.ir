internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [16 * i32]* %SHIFT_TABLE = alloc [16 * i32];
    i32* %0 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 0];
    store i32* %0 with i32 1;
    i32* %1 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 1];
    store i32* %1 with i32 2;
    i32* %2 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 2];
    store i32* %2 with i32 4;
    i32* %3 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 3];
    store i32* %3 with i32 8;
    i32* %4 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 4];
    store i32* %4 with i32 16;
    i32* %5 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 5];
    store i32* %5 with i32 32;
    i32* %6 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 6];
    store i32* %6 with i32 64;
    i32* %7 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 7];
    store i32* %7 with i32 128;
    i32* %8 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 8];
    store i32* %8 with i32 256;
    i32* %9 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 9];
    store i32* %9 with i32 512;
    i32* %10 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 10];
    store i32* %10 with i32 1024;
    i32* %11 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 11];
    store i32* %11 with i32 2048;
    i32* %12 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 12];
    store i32* %12 with i32 4096;
    i32* %13 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 13];
    store i32* %13 with i32 8192;
    i32* %14 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 14];
    store i32* %14 with i32 16384;
    i32* %15 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 15];
    store i32* %15 with i32 32768;
    ubr ^while.header;
  ^while.header:
    i32 %16 = phi [^entry, i32 2] [^if.then3, i32 %60] [^if.else, i32 %60];
    i32 %17 = phi [^entry, i32 0] [^if.then3, i32 %102] [^if.else, i32 %105];
    i32 %18 = phi [^entry, i32 1] [^if.then3, i32 %39] [^if.else, i32 %39];
    i1 %19 = scmp gt i32 %17, i32 0;
    cbr i1 %19(prob = 0.97), ^while.header1, ^b;
  ^b:
    call (i32) -> void @putint(i32 %18);
    call (i32) -> void @putch(i32 10);
    ubr ^while.header2;
  ^while.header1:
    i32 %20 = phi [^while.header, i32 0] [^b2, i32 %38];
    i32 %21 = phi [^while.header, i32 0] [^b2, i32 %35];
    i32 %22 = phi [^while.header, i32 1] [^b2, i32 %37];
    i32 %23 = phi [^while.header, i32 %17] [^b2, i32 %36];
    i1 %24 = scmp lt i32 %20, i32 16;
    cbr i1 %24(prob = 0.97), ^while.body, ^b1;
  ^while.body:
    i32 %25 = and i32 %22, i32 %23;
    i1 %26 = ztrunc i32 %25 to i1;
    cbr i1 %26(prob = 0.5), ^if.then, ^b2;
  ^while.header2:
    i32 %27 = phi [^b, i32 2] [^if.then7, i32 %122] [^if.else1, i32 %122];
    i32 %28 = phi [^b, i32 1] [^if.then7, i32 %70] [^if.else1, i32 %70];
    i32 %29 = phi [^b, i32 1] [^if.then7, i32 %188] [^if.else1, i32 %193];
    i1 %30 = scmp gt i32 %29, i32 0;
    cbr i1 %30(prob = 0.97), ^while.header3, ^b3;
  ^b1:
    i1 %31 = scmp neq i32 %21, i32 0;
    cbr i1 %31(prob = 0.5), ^while.header4, ^b4;
  ^if.then:
    i32* %32 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %20];
    i32 %33 = load i32* %32;
    i32 %34 = add i32 %21, i32 %33;
    ubr ^b2;
  ^b2:
    i32 %35 = phi [^while.body, i32 %21] [^if.then, i32 %34];
    i32 %36 = sdiv i32 %23, i32 2;
    i32 %37 = sdiv i32 %22, i32 2;
    i32 %38 = add i32 %20, i32 1;
    ubr ^while.header1;
  ^b3:
    call (i32) -> void @putint(i32 %28);
    call (i32) -> void @putch(i32 10);
    ubr ^while.header6;
  ^b4:
    i32 %39 = phi [^b1, i32 %18] [^while.header4, i32 %47];
    ubr ^while.header7;
  ^while.header3:
    i32 %40 = phi [^while.header2, i32 0] [^b6, i32 %69];
    i32 %41 = phi [^while.header2, i32 0] [^b6, i32 %66];
    i32 %42 = phi [^while.header2, i32 1] [^b6, i32 %68];
    i32 %43 = phi [^while.header2, i32 %29] [^b6, i32 %67];
    i1 %44 = scmp lt i32 %40, i32 16;
    cbr i1 %44(prob = 0.97), ^while.body1, ^b5;
  ^while.header4:
    i32 %45 = phi [^b1, i32 %18] [^if.then10, i32 %155] [^if.else2, i32 %155];
    i32 %46 = phi [^b1, i32 %16] [^if.then10, i32 %241] [^if.else2, i32 %253];
    i32 %47 = phi [^b1, i32 0] [^if.then10, i32 %103] [^if.else2, i32 %103];
    i1 %48 = scmp neq i32 %46, i32 0;
    cbr i1 %48(prob = 0.97), ^while.header5, ^b4;
  ^while.body1:
    i32 %49 = and i32 %42, i32 %43;
    i1 %50 = ztrunc i32 %49 to i1;
    cbr i1 %50(prob = 0.5), ^if.then1, ^b6;
  ^while.header5:
    i32 %51 = phi [^while.header4, i32 0] [^b10, i32 %96];
    i32 %52 = phi [^while.header4, i32 1] [^b10, i32 %95];
    i32 %53 = phi [^while.header4, i32 %46] [^b10, i32 %94];
    i32 %54 = phi [^while.header4, i32 0] [^b10, i32 %93];
    i1 %55 = scmp lt i32 %51, i32 16;
    cbr i1 %55(prob = 0.97), ^while.body2, ^b8;
  ^while.header6:
    i32 %56 = phi [^b3, i32 2] [^b11, i32 %97];
    i1 %57 = scmp lt i32 %56, i32 16;
    cbr i1 %57(prob = 0.97), ^while.header8, ^while.header11;
  ^while.header7:
    i32 %58 = phi [^b4, i32 %16] [^if.then14, i32 %222] [^if.else4, i32 %222];
    i32 %59 = phi [^b4, i32 %16] [^if.then14, i32 %317] [^if.else4, i32 %330];
    i32 %60 = phi [^b4, i32 0] [^if.then14, i32 %140] [^if.else4, i32 %140];
    i1 %61 = scmp neq i32 %59, i32 0;
    cbr i1 %61(prob = 0.97), ^while.header9, ^b9;
  ^b5:
    i1 %62 = scmp neq i32 %41, i32 0;
    cbr i1 %62(prob = 0.5), ^while.header10, ^b7;
  ^if.then1:
    i32* %63 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %40];
    i32 %64 = load i32* %63;
    i32 %65 = add i32 %41, i32 %64;
    ubr ^b6;
  ^b6:
    i32 %66 = phi [^while.body1, i32 %41] [^if.then1, i32 %65];
    i32 %67 = sdiv i32 %43, i32 2;
    i32 %68 = sdiv i32 %42, i32 2;
    i32 %69 = add i32 %40, i32 1;
    ubr ^while.header3;
  ^b7:
    i32 %70 = phi [^b5, i32 %28] [^while.header10, i32 %83];
    ubr ^while.header15;
  ^while.body2:
    i32 %71 = and i32 %52, i32 %53;
    i1 %72 = ztrunc i32 %71 to i1;
    cbr i1 %72(prob = 0.5), ^if.then2, ^b10;
  ^while.header8:
    i32 %73 = phi [^while.header6, i32 2] [^if.then22, i32 %271] [^if.else7, i32 %271];
    i32 %74 = phi [^while.header6, i32 %56] [^if.then22, i32 %414] [^if.else7, i32 %434];
    i32 %75 = phi [^while.header6, i32 1] [^if.then22, i32 %189] [^if.else7, i32 %189];
    i1 %76 = scmp gt i32 %74, i32 0;
    cbr i1 %76(prob = 0.97), ^while.header12, ^b11;
  ^while.header9:
    i32 %77 = phi [^while.header7, i32 0] [^b15, i32 %137];
    i32 %78 = phi [^while.header7, i32 1] [^b15, i32 %136];
    i32 %79 = phi [^while.header7, i32 %59] [^b15, i32 %135];
    i32 %80 = phi [^while.header7, i32 0] [^b15, i32 %134];
    i1 %81 = scmp lt i32 %77, i32 16;
    cbr i1 %81(prob = 0.97), ^while.body3, ^b13;
  ^while.header10:
    i32 %82 = phi [^b5, i32 %28] [^if.then23, i32 %279] [^if.else8, i32 %279];
    i32 %83 = phi [^b5, i32 0] [^if.then23, i32 %190] [^if.else8, i32 %190];
    i32 %84 = phi [^b5, i32 %27] [^if.then23, i32 %419] [^if.else8, i32 %440];
    i1 %85 = scmp neq i32 %84, i32 0;
    cbr i1 %85(prob = 0.97), ^while.header13, ^b7;
  ^b8:
    i1 %86 = scmp neq i32 %54, i32 0;
    cbr i1 %86(prob = 0.5), ^while.header14, ^b12;
  ^b9:
    i1 %87 = scmp gt i32 %17, i32 32767;
    cbr i1 %87(prob = 0.5), ^if.then3, ^if.else;
  ^while.header11:
    i32 %88 = phi [^while.header6, i32 0] [^b25, i32 %196];
    i1 %89 = scmp lt i32 %88, i32 16;
    cbr i1 %89(prob = 0.97), ^while.header16, ^b14;
  ^if.then2:
    i32* %90 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %51];
    i32 %91 = load i32* %90;
    i32 %92 = add i32 %54, i32 %91;
    ubr ^b10;
  ^b10:
    i32 %93 = phi [^while.body2, i32 %54] [^if.then2, i32 %92];
    i32 %94 = sdiv i32 %53, i32 2;
    i32 %95 = sdiv i32 %52, i32 2;
    i32 %96 = add i32 %51, i32 1;
    ubr ^while.header5;
  ^b11:
    call (i32) -> void @putint(i32 %75);
    call (i32) -> void @putch(i32 10);
    i32 %97 = add i32 %56, i32 1;
    ubr ^while.header6;
  ^if.then3:
    i32 %98 = load i32* %1;
    i32 %99 = sdiv i32 %17, i32 %98;
    i32 %100 = add i32 %99, i32 65536;
    i32 %101 = load i32* %15;
    i32 %102 = sub i32 %100, i32 %101;
    ubr ^while.header;
  ^b12:
    i32 %103 = phi [^b8, i32 %47] [^while.header14, i32 %119];
    ubr ^while.header19;
  ^if.else:
    i32 %104 = load i32* %1;
    i32 %105 = sdiv i32 %17, i32 %104;
    ubr ^while.header;
  ^while.body3:
    i32 %106 = and i32 %78, i32 %79;
    i1 %107 = ztrunc i32 %106 to i1;
    cbr i1 %107(prob = 0.5), ^if.then4, ^b15;
  ^while.header12:
    i32 %108 = phi [^while.header8, i32 0] [^b21, i32 %179];
    i32 %109 = phi [^while.header8, i32 1] [^b21, i32 %178];
    i32 %110 = phi [^while.header8, i32 %74] [^b21, i32 %177];
    i32 %111 = phi [^while.header8, i32 0] [^b21, i32 %176];
    i1 %112 = scmp lt i32 %108, i32 16;
    cbr i1 %112(prob = 0.97), ^while.body4, ^b17;
  ^while.header13:
    i32 %113 = phi [^while.header10, i32 0] [^b22, i32 %183];
    i32 %114 = phi [^while.header10, i32 0] [^b22, i32 %180];
    i32 %115 = phi [^while.header10, i32 1] [^b22, i32 %182];
    i32 %116 = phi [^while.header10, i32 %84] [^b22, i32 %181];
    i1 %117 = scmp lt i32 %113, i32 16;
    cbr i1 %117(prob = 0.97), ^while.body5, ^b18;
  ^while.header14:
    i32 %118 = phi [^b8, i32 %45] [^while.header42, i32 %364];
    i32 %119 = phi [^b8, i32 %47] [^while.header42, i32 %143];
    i1 %120 = scmp neq i32 %118, i32 0;
    cbr i1 %120(prob = 0.97), ^while.header17, ^b12;
  ^while.header15:
    i32 %121 = phi [^b7, i32 %27] [^if.then33, i32 %370] [^if.else11, i32 %370];
    i32 %122 = phi [^b7, i32 0] [^if.then33, i32 %250] [^if.else11, i32 %250];
    i32 %123 = phi [^b7, i32 %27] [^if.then33, i32 %541] [^if.else11, i32 %567];
    i1 %124 = scmp neq i32 %123, i32 0;
    cbr i1 %124(prob = 0.97), ^while.header18, ^b19;
  ^b13:
    i1 %125 = scmp neq i32 %80, i32 0;
    cbr i1 %125(prob = 0.5), ^while.header20, ^b16;
  ^while.header16:
    i32 %126 = phi [^while.header11, i32 2] [^if.then34, i32 %376] [^if.else12, i32 %376];
    i32 %127 = phi [^while.header11, i32 %88] [^if.then34, i32 %547] [^if.else12, i32 %570];
    i32 %128 = phi [^while.header11, i32 1] [^if.then34, i32 %251] [^if.else12, i32 %251];
    i1 %129 = scmp gt i32 %127, i32 0;
    cbr i1 %129(prob = 0.97), ^while.header21, ^b20;
  ^b14:
    i32 %130 = phi [^while.header11, i32 0] [^b20, i32 1];
    ret i32 %130;
  ^if.then4:
    i32* %131 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %77];
    i32 %132 = load i32* %131;
    i32 %133 = add i32 %80, i32 %132;
    ubr ^b15;
  ^b15:
    i32 %134 = phi [^while.body3, i32 %80] [^if.then4, i32 %133];
    i32 %135 = sdiv i32 %79, i32 2;
    i32 %136 = sdiv i32 %78, i32 2;
    i32 %137 = add i32 %77, i32 1;
    ubr ^while.header9;
  ^while.body4:
    i32 %138 = and i32 %109, i32 %110;
    i1 %139 = ztrunc i32 %138 to i1;
    cbr i1 %139(prob = 0.5), ^if.then5, ^b21;
  ^b16:
    i32 %140 = phi [^b13, i32 %60] [^while.header20, i32 %158];
    ubr ^while.header27;
  ^while.body5:
    i32 %141 = and i32 %115, i32 %116;
    i1 %142 = ztrunc i32 %141 to i1;
    cbr i1 %142(prob = 0.5), ^if.then6, ^b22;
  ^while.header17:
    i32 %143 = phi [^while.header14, i32 0] [^b35, i32 %302];
    i32 %144 = phi [^while.header14, i32 0] [^b35, i32 %305];
    i32 %145 = phi [^while.header14, i32 %118] [^b35, i32 %304];
    i32 %146 = phi [^while.header14, i32 %119] [^b35, i32 %303];
    i1 %147 = scmp lt i32 %144, i32 16;
    cbr i1 %147(prob = 0.97), ^while.body6, ^while.header26;
  ^while.header18:
    i32 %148 = phi [^while.header15, i32 0] [^b29, i32 %236];
    i32 %149 = phi [^while.header15, i32 1] [^b29, i32 %235];
    i32 %150 = phi [^while.header15, i32 %123] [^b29, i32 %234];
    i32 %151 = phi [^while.header15, i32 0] [^b29, i32 %233];
    i1 %152 = scmp lt i32 %148, i32 16;
    cbr i1 %152(prob = 0.97), ^while.body7, ^b26;
  ^b17:
    i1 %153 = scmp neq i32 %111, i32 0;
    cbr i1 %153(prob = 0.5), ^while.header22, ^b23;
  ^while.header19:
    i32 %154 = phi [^b12, i32 %45] [^while.header51, i32 %482];
    i32 %155 = phi [^b12, i32 %45] [^while.header51, i32 %206];
    i1 %156 = scmp neq i32 %154, i32 0;
    cbr i1 %156(prob = 0.97), ^while.header23, ^b27;
  ^while.header20:
    i32 %157 = phi [^b13, i32 %58] [^while.header52, i32 %485];
    i32 %158 = phi [^b13, i32 %60] [^while.header52, i32 %209];
    i1 %159 = scmp neq i32 %157, i32 0;
    cbr i1 %159(prob = 0.97), ^while.header24, ^b16;
  ^b18:
    i1 %160 = scmp neq i32 %114, i32 0;
    cbr i1 %160(prob = 0.5), ^while.header25, ^b24;
  ^while.header21:
    i32 %161 = phi [^while.header16, i32 0] [^b30, i32 %245];
    i32 %162 = phi [^while.header16, i32 0] [^b30, i32 %242];
    i32 %163 = phi [^while.header16, i32 1] [^b30, i32 %244];
    i32 %164 = phi [^while.header16, i32 %127] [^b30, i32 %243];
    i1 %165 = scmp lt i32 %161, i32 16;
    cbr i1 %165(prob = 0.97), ^while.body8, ^b28;
  ^b19:
    i1 %166 = scmp gt i32 %29, i32 32767;
    cbr i1 %166(prob = 0.5), ^if.then7, ^if.else1;
  ^b20:
    i32* %167 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %88];
    i32 %168 = load i32* %167;
    i1 %169 = scmp neq i32 %128, i32 %168;
    cbr i1 %169(prob = 0.5), ^b14, ^b25;
  ^if.then5:
    i32* %170 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %108];
    i32 %171 = load i32* %170;
    i32 %172 = add i32 %111, i32 %171;
    ubr ^b21;
  ^if.then6:
    i32* %173 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %113];
    i32 %174 = load i32* %173;
    i32 %175 = add i32 %114, i32 %174;
    ubr ^b22;
  ^b21:
    i32 %176 = phi [^while.body4, i32 %111] [^if.then5, i32 %172];
    i32 %177 = sdiv i32 %110, i32 2;
    i32 %178 = sdiv i32 %109, i32 2;
    i32 %179 = add i32 %108, i32 1;
    ubr ^while.header12;
  ^b22:
    i32 %180 = phi [^while.body5, i32 %114] [^if.then6, i32 %175];
    i32 %181 = sdiv i32 %116, i32 2;
    i32 %182 = sdiv i32 %115, i32 2;
    i32 %183 = add i32 %113, i32 1;
    ubr ^while.header13;
  ^if.then7:
    i32 %184 = load i32* %1;
    i32 %185 = sdiv i32 %29, i32 %184;
    i32 %186 = add i32 %185, i32 65536;
    i32 %187 = load i32* %15;
    i32 %188 = sub i32 %186, i32 %187;
    ubr ^while.header2;
  ^b23:
    i32 %189 = phi [^b17, i32 %75] [^while.header22, i32 %200];
    ubr ^while.header30;
  ^b24:
    i32 %190 = phi [^b18, i32 %83] [^while.header25, i32 %214];
    ubr ^while.header32;
  ^while.body6:
    i1 %191 = ztrunc i32 %146 to i1;
    cbr i1 %191(prob = 0.5), ^if.then11, ^if.else3;
  ^if.else1:
    i32 %192 = load i32* %1;
    i32 %193 = sdiv i32 %29, i32 %192;
    ubr ^while.header2;
  ^while.body7:
    i32 %194 = and i32 %149, i32 %150;
    i1 %195 = ztrunc i32 %194 to i1;
    cbr i1 %195(prob = 0.5), ^if.then8, ^b29;
  ^b25:
    i32 %196 = add i32 %88, i32 1;
    ubr ^while.header11;
  ^while.body8:
    i32 %197 = and i32 %163, i32 %164;
    i1 %198 = ztrunc i32 %197 to i1;
    cbr i1 %198(prob = 0.5), ^if.then9, ^b30;
  ^while.header22:
    i32 %199 = phi [^b17, i32 %75] [^if.then49, i32 %575] [^if.else16, i32 %575];
    i32 %200 = phi [^b17, i32 0] [^if.then49, i32 %420] [^if.else16, i32 %420];
    i32 %201 = phi [^b17, i32 %73] [^if.then49, i32 %730] [^if.else16, i32 %748];
    i1 %202 = scmp neq i32 %201, i32 0;
    cbr i1 %202(prob = 0.97), ^while.header28, ^b23;
  ^while.header23:
    i32 %203 = phi [^while.header19, i32 0] [^b44, i32 %403];
    i32 %204 = phi [^while.header19, i32 %154] [^b44, i32 %402];
    i32 %205 = phi [^while.header19, i32 %155] [^b44, i32 %401];
    i32 %206 = phi [^while.header19, i32 0] [^b44, i32 %400];
    i1 %207 = scmp lt i32 %203, i32 16;
    cbr i1 %207(prob = 0.97), ^while.body9, ^while.header35;
  ^while.header24:
    i32 %208 = phi [^while.header20, i32 0] [^b42, i32 %395];
    i32 %209 = phi [^while.header20, i32 0] [^b42, i32 %392];
    i32 %210 = phi [^while.header20, i32 %157] [^b42, i32 %394];
    i32 %211 = phi [^while.header20, i32 %158] [^b42, i32 %393];
    i1 %212 = scmp lt i32 %208, i32 16;
    cbr i1 %212(prob = 0.97), ^while.body10, ^while.header36;
  ^while.header25:
    i32 %213 = phi [^b18, i32 %82] [^while.header57, i32 %592];
    i32 %214 = phi [^b18, i32 %83] [^while.header57, i32 %263];
    i1 %215 = scmp neq i32 %213, i32 0;
    cbr i1 %215(prob = 0.97), ^while.header29, ^b24;
  ^while.header26:
    i32 %216 = phi [^while.header17, i32 0] [^b36, i32 %312];
    i32 %217 = phi [^while.header17, i32 0] [^b36, i32 %309];
    i32 %218 = phi [^while.header17, i32 %118] [^b36, i32 %311];
    i32 %219 = phi [^while.header17, i32 %119] [^b36, i32 %310];
    i1 %220 = scmp lt i32 %216, i32 16;
    cbr i1 %220(prob = 0.97), ^while.body11, ^b31;
  ^while.header27:
    i32 %221 = phi [^b16, i32 %58] [^while.header59, i32 %603];
    i32 %222 = phi [^b16, i32 %58] [^while.header59, i32 %276];
    i1 %223 = scmp neq i32 %221, i32 0;
    cbr i1 %223(prob = 0.97), ^while.header31, ^b34;
  ^b26:
    i1 %224 = scmp neq i32 %151, i32 0;
    cbr i1 %224(prob = 0.5), ^while.header33, ^b32;
  ^b27:
    i1 %225 = scmp gt i32 %46, i32 32767;
    cbr i1 %225(prob = 0.5), ^if.then10, ^if.else2;
  ^b28:
    i1 %226 = scmp neq i32 %162, i32 0;
    cbr i1 %226(prob = 0.5), ^while.header34, ^b33;
  ^if.then8:
    i32* %227 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %148];
    i32 %228 = load i32* %227;
    i32 %229 = add i32 %151, i32 %228;
    ubr ^b29;
  ^if.then9:
    i32* %230 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %161];
    i32 %231 = load i32* %230;
    i32 %232 = add i32 %162, i32 %231;
    ubr ^b30;
  ^b29:
    i32 %233 = phi [^while.body7, i32 %151] [^if.then8, i32 %229];
    i32 %234 = sdiv i32 %150, i32 2;
    i32 %235 = sdiv i32 %149, i32 2;
    i32 %236 = add i32 %148, i32 1;
    ubr ^while.header18;
  ^if.then10:
    i32 %237 = load i32* %1;
    i32 %238 = sdiv i32 %46, i32 %237;
    i32 %239 = add i32 %238, i32 65536;
    i32 %240 = load i32* %15;
    i32 %241 = sub i32 %239, i32 %240;
    ubr ^while.header4;
  ^b30:
    i32 %242 = phi [^while.body8, i32 %162] [^if.then9, i32 %232];
    i32 %243 = sdiv i32 %164, i32 2;
    i32 %244 = sdiv i32 %163, i32 2;
    i32 %245 = add i32 %161, i32 1;
    ubr ^while.header21;
  ^if.then11:
    i32 %246 = and i32 %145, i32 1;
    i1 %247 = scmp eq i32 %246, i32 0;
    cbr i1 %247(prob = 0.5), ^if.then12, ^b35;
  ^b31:
    i32 %248 = load i32* %1;
    i32 %249 = mul i32 %217, i32 %248;
    ubr ^while.header42;
  ^b32:
    i32 %250 = phi [^b26, i32 %122] [^while.header33, i32 %282];
    ubr ^while.header43;
  ^b33:
    i32 %251 = phi [^b28, i32 %128] [^while.header34, i32 %285];
    ubr ^while.header44;
  ^if.else2:
    i32 %252 = load i32* %1;
    i32 %253 = sdiv i32 %46, i32 %252;
    ubr ^while.header4;
  ^while.body9:
    i1 %254 = ztrunc i32 %205 to i1;
    cbr i1 %254(prob = 0.5), ^if.then15, ^if.else5;
  ^while.body10:
    i1 %255 = ztrunc i32 %211 to i1;
    cbr i1 %255(prob = 0.5), ^if.then16, ^if.else6;
  ^while.header28:
    i32 %256 = phi [^while.header22, i32 0] [^b43, i32 %399];
    i32 %257 = phi [^while.header22, i32 0] [^b43, i32 %396];
    i32 %258 = phi [^while.header22, i32 1] [^b43, i32 %398];
    i32 %259 = phi [^while.header22, i32 %201] [^b43, i32 %397];
    i1 %260 = scmp lt i32 %256, i32 16;
    cbr i1 %260(prob = 0.97), ^while.body12, ^b39;
  ^if.else3:
    i1 %261 = ztrunc i32 %145 to i1;
    cbr i1 %261(prob = 0.5), ^if.then12, ^b35;
  ^while.header29:
    i32 %262 = phi [^while.header25, i32 0] [^b54, i32 %504];
    i32 %263 = phi [^while.header25, i32 0] [^b54, i32 %501];
    i32 %264 = phi [^while.header25, i32 %213] [^b54, i32 %503];
    i32 %265 = phi [^while.header25, i32 %214] [^b54, i32 %502];
    i1 %266 = scmp lt i32 %262, i32 16;
    cbr i1 %266(prob = 0.97), ^while.body13, ^while.header41;
  ^while.body11:
    i32 %267 = and i32 %218, i32 %219;
    i1 %268 = ztrunc i32 %267 to i1;
    cbr i1 %268(prob = 0.5), ^if.then13, ^b36;
  ^while.header30:
    i32 %269 = phi [^b23, i32 %73] [^if.then55, i32 %686] [^if.else18, i32 %686];
    i32 %270 = phi [^b23, i32 %73] [^if.then55, i32 %823] [^if.else18, i32 %850];
    i32 %271 = phi [^b23, i32 0] [^if.then55, i32 %542] [^if.else18, i32 %542];
    i1 %272 = scmp neq i32 %270, i32 0;
    cbr i1 %272(prob = 0.97), ^while.header37, ^b40;
  ^while.header31:
    i32 %273 = phi [^while.header27, i32 0] [^b55, i32 %517];
    i32 %274 = phi [^while.header27, i32 %221] [^b55, i32 %516];
    i32 %275 = phi [^while.header27, i32 %222] [^b55, i32 %515];
    i32 %276 = phi [^while.header27, i32 0] [^b55, i32 %514];
    i1 %277 = scmp lt i32 %273, i32 16;
    cbr i1 %277(prob = 0.97), ^while.body14, ^while.header45;
  ^while.header32:
    i32 %278 = phi [^b24, i32 %82] [^while.header67, i32 %700];
    i32 %279 = phi [^b24, i32 %82] [^while.header67, i32 %342];
    i1 %280 = scmp neq i32 %278, i32 0;
    cbr i1 %280(prob = 0.97), ^while.header38, ^b41;
  ^while.header33:
    i32 %281 = phi [^b26, i32 %121] [^while.header68, i32 %705];
    i32 %282 = phi [^b26, i32 %122] [^while.header68, i32 %345];
    i1 %283 = scmp neq i32 %281, i32 0;
    cbr i1 %283(prob = 0.97), ^while.header39, ^b32;
  ^while.header34:
    i32 %284 = phi [^b28, i32 %128] [^if.then58, i32 %694] [^if.else21, i32 %694];
    i32 %285 = phi [^b28, i32 0] [^if.then58, i32 %556] [^if.else21, i32 %556];
    i32 %286 = phi [^b28, i32 %126] [^if.then58, i32 %840] [^if.else21, i32 %855];
    i1 %287 = scmp neq i32 %286, i32 0;
    cbr i1 %287(prob = 0.97), ^while.header40, ^b33;
  ^while.header35:
    i32 %288 = phi [^while.header23, i32 0] [^b46, i32 %426];
    i32 %289 = phi [^while.header23, i32 %154] [^b46, i32 %425];
    i32 %290 = phi [^while.header23, i32 %155] [^b46, i32 %424];
    i32 %291 = phi [^while.header23, i32 0] [^b46, i32 %423];
    i1 %292 = scmp lt i32 %288, i32 16;
    cbr i1 %292(prob = 0.97), ^while.body15, ^b37;
  ^while.header36:
    i32 %293 = phi [^while.header24, i32 0] [^b47, i32 %430];
    i32 %294 = phi [^while.header24, i32 0] [^b47, i32 %427];
    i32 %295 = phi [^while.header24, i32 %157] [^b47, i32 %429];
    i32 %296 = phi [^while.header24, i32 %158] [^b47, i32 %428];
    i1 %297 = scmp lt i32 %293, i32 16;
    cbr i1 %297(prob = 0.97), ^while.body16, ^b38;
  ^b34:
    i1 %298 = scmp gt i32 %59, i32 32767;
    cbr i1 %298(prob = 0.5), ^if.then14, ^if.else4;
  ^if.then12:
    i32* %299 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %144];
    i32 %300 = load i32* %299;
    i32 %301 = add i32 %143, i32 %300;
    ubr ^b35;
  ^b35:
    i32 %302 = phi [^if.then11, i32 %143] [^if.else3, i32 %143] [^if.then12, i32 %301];
    i32 %303 = sdiv i32 %146, i32 2;
    i32 %304 = sdiv i32 %145, i32 2;
    i32 %305 = add i32 %144, i32 1;
    ubr ^while.header17;
  ^if.then13:
    i32* %306 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %216];
    i32 %307 = load i32* %306;
    i32 %308 = add i32 %217, i32 %307;
    ubr ^b36;
  ^b36:
    i32 %309 = phi [^while.body11, i32 %217] [^if.then13, i32 %308];
    i32 %310 = sdiv i32 %219, i32 2;
    i32 %311 = sdiv i32 %218, i32 2;
    i32 %312 = add i32 %216, i32 1;
    ubr ^while.header26;
  ^if.then14:
    i32 %313 = load i32* %1;
    i32 %314 = sdiv i32 %59, i32 %313;
    i32 %315 = add i32 %314, i32 65536;
    i32 %316 = load i32* %15;
    i32 %317 = sub i32 %315, i32 %316;
    ubr ^while.header7;
  ^while.body12:
    i32 %318 = and i32 %258, i32 %259;
    i1 %319 = ztrunc i32 %318 to i1;
    cbr i1 %319(prob = 0.5), ^if.then19, ^b43;
  ^if.then15:
    i32 %320 = and i32 %204, i32 1;
    i1 %321 = scmp eq i32 %320, i32 0;
    cbr i1 %321(prob = 0.5), ^if.then17, ^b44;
  ^if.then16:
    i32 %322 = and i32 %210, i32 1;
    i1 %323 = scmp eq i32 %322, i32 0;
    cbr i1 %323(prob = 0.5), ^if.then18, ^b42;
  ^while.body13:
    i1 %324 = ztrunc i32 %265 to i1;
    cbr i1 %324(prob = 0.5), ^if.then24, ^if.else9;
  ^b37:
    i32 %325 = load i32* %1;
    i32 %326 = mul i32 %291, i32 %325;
    ubr ^while.header51;
  ^b38:
    i32 %327 = load i32* %1;
    i32 %328 = mul i32 %294, i32 %327;
    ubr ^while.header52;
  ^if.else4:
    i32 %329 = load i32* %1;
    i32 %330 = sdiv i32 %59, i32 %329;
    ubr ^while.header7;
  ^while.body14:
    i1 %331 = ztrunc i32 %275 to i1;
    cbr i1 %331(prob = 0.5), ^if.then25, ^if.else10;
  ^while.header37:
    i32 %332 = phi [^while.header30, i32 0] [^b56, i32 %521];
    i32 %333 = phi [^while.header30, i32 0] [^b56, i32 %518];
    i32 %334 = phi [^while.header30, i32 1] [^b56, i32 %520];
    i32 %335 = phi [^while.header30, i32 %270] [^b56, i32 %519];
    i1 %336 = scmp lt i32 %332, i32 16;
    cbr i1 %336(prob = 0.97), ^while.body17, ^b50;
  ^if.else5:
    i1 %337 = ztrunc i32 %204 to i1;
    cbr i1 %337(prob = 0.5), ^if.then17, ^b44;
  ^if.else6:
    i1 %338 = ztrunc i32 %210 to i1;
    cbr i1 %338(prob = 0.5), ^if.then18, ^b42;
  ^while.header38:
    i32 %339 = phi [^while.header32, i32 0] [^b66, i32 %617];
    i32 %340 = phi [^while.header32, i32 %278] [^b66, i32 %616];
    i32 %341 = phi [^while.header32, i32 %279] [^b66, i32 %615];
    i32 %342 = phi [^while.header32, i32 0] [^b66, i32 %614];
    i1 %343 = scmp lt i32 %339, i32 16;
    cbr i1 %343(prob = 0.97), ^while.body18, ^while.header49;
  ^while.header39:
    i32 %344 = phi [^while.header33, i32 0] [^b67, i32 %621];
    i32 %345 = phi [^while.header33, i32 0] [^b67, i32 %618];
    i32 %346 = phi [^while.header33, i32 %281] [^b67, i32 %620];
    i32 %347 = phi [^while.header33, i32 %282] [^b67, i32 %619];
    i1 %348 = scmp lt i32 %344, i32 16;
    cbr i1 %348(prob = 0.97), ^while.body19, ^while.header50;
  ^b39:
    i1 %349 = scmp neq i32 %257, i32 0;
    cbr i1 %349(prob = 0.5), ^while.header46, ^b45;
  ^while.body15:
    i32 %350 = and i32 %289, i32 %290;
    i1 %351 = ztrunc i32 %350 to i1;
    cbr i1 %351(prob = 0.5), ^if.then20, ^b46;
  ^while.body16:
    i32 %352 = and i32 %295, i32 %296;
    i1 %353 = ztrunc i32 %352 to i1;
    cbr i1 %353(prob = 0.5), ^if.then21, ^b47;
  ^while.header40:
    i32 %354 = phi [^while.header34, i32 0] [^b57, i32 %525];
    i32 %355 = phi [^while.header34, i32 1] [^b57, i32 %527];
    i32 %356 = phi [^while.header34, i32 %286] [^b57, i32 %526];
    i32 %357 = phi [^while.header34, i32 0] [^b57, i32 %528];
    i1 %358 = scmp lt i32 %357, i32 16;
    cbr i1 %358(prob = 0.97), ^while.body20, ^b51;
  ^while.header41:
    i32 %359 = phi [^while.header29, i32 %213] [^b58, i32 %531];
    i32 %360 = phi [^while.header29, i32 %214] [^b58, i32 %530];
    i32 %361 = phi [^while.header29, i32 0] [^b58, i32 %529];
    i32 %362 = phi [^while.header29, i32 0] [^b58, i32 %532];
    i1 %363 = scmp lt i32 %362, i32 16;
    cbr i1 %363(prob = 0.97), ^while.body21, ^b48;
  ^while.header42:
    i32 %364 = phi [^b31, i32 0] [^b59, i32 %533];
    i32 %365 = phi [^b31, i32 65535] [^b59, i32 %535];
    i32 %366 = phi [^b31, i32 %249] [^b59, i32 %534];
    i32 %367 = phi [^b31, i32 0] [^b59, i32 %536];
    i1 %368 = scmp lt i32 %367, i32 16;
    cbr i1 %368(prob = 0.97), ^while.body22, ^while.header14;
  ^while.header43:
    i32 %369 = phi [^b32, i32 %121] [^while.header76, i32 %793];
    i32 %370 = phi [^b32, i32 %121] [^while.header76, i32 %457];
    i1 %371 = scmp neq i32 %369, i32 0;
    cbr i1 %371(prob = 0.97), ^while.header47, ^b52;
  ^b40:
    i1 %372 = scmp gt i32 %74, i32 32767;
    cbr i1 %372(prob = 0.5), ^if.then22, ^if.else7;
  ^b41:
    i1 %373 = scmp gt i32 %84, i32 32767;
    cbr i1 %373(prob = 0.5), ^if.then23, ^if.else8;
  ^while.header44:
    i32 %374 = phi [^b33, i32 %126] [^if.then68, i32 %790] [^if.else24, i32 %790];
    i32 %375 = phi [^b33, i32 %126] [^if.then68, i32 %948] [^if.else24, i32 %963];
    i32 %376 = phi [^b33, i32 0] [^if.then68, i32 %660] [^if.else24, i32 %660];
    i1 %377 = scmp neq i32 %375, i32 0;
    cbr i1 %377(prob = 0.97), ^while.header48, ^b53;
  ^while.header45:
    i32 %378 = phi [^while.header31, i32 0] [^b61, i32 %555];
    i32 %379 = phi [^while.header31, i32 %221] [^b61, i32 %554];
    i32 %380 = phi [^while.header31, i32 %222] [^b61, i32 %553];
    i32 %381 = phi [^while.header31, i32 0] [^b61, i32 %552];
    i1 %382 = scmp lt i32 %378, i32 16;
    cbr i1 %382(prob = 0.97), ^while.body23, ^b49;
  ^if.then17:
    i32* %383 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %203];
    i32 %384 = load i32* %383;
    i32 %385 = add i32 %206, i32 %384;
    ubr ^b44;
  ^if.then18:
    i32* %386 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %208];
    i32 %387 = load i32* %386;
    i32 %388 = add i32 %209, i32 %387;
    ubr ^b42;
  ^if.then19:
    i32* %389 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %256];
    i32 %390 = load i32* %389;
    i32 %391 = add i32 %257, i32 %390;
    ubr ^b43;
  ^b42:
    i32 %392 = phi [^if.then16, i32 %209] [^if.else6, i32 %209] [^if.then18, i32 %388];
    i32 %393 = sdiv i32 %211, i32 2;
    i32 %394 = sdiv i32 %210, i32 2;
    i32 %395 = add i32 %208, i32 1;
    ubr ^while.header24;
  ^b43:
    i32 %396 = phi [^while.body12, i32 %257] [^if.then19, i32 %391];
    i32 %397 = sdiv i32 %259, i32 2;
    i32 %398 = sdiv i32 %258, i32 2;
    i32 %399 = add i32 %256, i32 1;
    ubr ^while.header28;
  ^b44:
    i32 %400 = phi [^if.then15, i32 %206] [^if.else5, i32 %206] [^if.then17, i32 %385];
    i32 %401 = sdiv i32 %205, i32 2;
    i32 %402 = sdiv i32 %204, i32 2;
    i32 %403 = add i32 %203, i32 1;
    ubr ^while.header23;
  ^if.then20:
    i32* %404 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %288];
    i32 %405 = load i32* %404;
    i32 %406 = add i32 %291, i32 %405;
    ubr ^b46;
  ^if.then21:
    i32* %407 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %293];
    i32 %408 = load i32* %407;
    i32 %409 = add i32 %294, i32 %408;
    ubr ^b47;
  ^if.then22:
    i32 %410 = load i32* %1;
    i32 %411 = sdiv i32 %74, i32 %410;
    i32 %412 = add i32 %411, i32 65536;
    i32 %413 = load i32* %15;
    i32 %414 = sub i32 %412, i32 %413;
    ubr ^while.header8;
  ^if.then23:
    i32 %415 = load i32* %1;
    i32 %416 = sdiv i32 %84, i32 %415;
    i32 %417 = add i32 %416, i32 65536;
    i32 %418 = load i32* %15;
    i32 %419 = sub i32 %417, i32 %418;
    ubr ^while.header10;
  ^b45:
    i32 %420 = phi [^b39, i32 %200] [^while.header46, i32 %448];
    ubr ^while.header54;
  ^if.then24:
    i32 %421 = and i32 %264, i32 1;
    i1 %422 = scmp eq i32 %421, i32 0;
    cbr i1 %422(prob = 0.5), ^if.then26, ^b54;
  ^b46:
    i32 %423 = phi [^while.body15, i32 %291] [^if.then20, i32 %406];
    i32 %424 = sdiv i32 %290, i32 2;
    i32 %425 = sdiv i32 %289, i32 2;
    i32 %426 = add i32 %288, i32 1;
    ubr ^while.header35;
  ^b47:
    i32 %427 = phi [^while.body16, i32 %294] [^if.then21, i32 %409];
    i32 %428 = sdiv i32 %296, i32 2;
    i32 %429 = sdiv i32 %295, i32 2;
    i32 %430 = add i32 %293, i32 1;
    ubr ^while.header36;
  ^b48:
    i32 %431 = load i32* %1;
    i32 %432 = mul i32 %361, i32 %431;
    ubr ^while.header57;
  ^if.else7:
    i32 %433 = load i32* %1;
    i32 %434 = sdiv i32 %74, i32 %433;
    ubr ^while.header8;
  ^while.body17:
    i32 %435 = and i32 %334, i32 %335;
    i1 %436 = ztrunc i32 %435 to i1;
    cbr i1 %436(prob = 0.5), ^if.then28, ^b56;
  ^if.then25:
    i32 %437 = and i32 %274, i32 1;
    i1 %438 = scmp eq i32 %437, i32 0;
    cbr i1 %438(prob = 0.5), ^if.then27, ^b55;
  ^if.else8:
    i32 %439 = load i32* %1;
    i32 %440 = sdiv i32 %84, i32 %439;
    ubr ^while.header10;
  ^while.body18:
    i1 %441 = ztrunc i32 %341 to i1;
    cbr i1 %441(prob = 0.5), ^if.then35, ^if.else13;
  ^while.body19:
    i1 %442 = ztrunc i32 %347 to i1;
    cbr i1 %442(prob = 0.5), ^if.then36, ^if.else14;
  ^b49:
    i32 %443 = load i32* %1;
    i32 %444 = mul i32 %381, i32 %443;
    ubr ^while.header59;
  ^while.body20:
    i32 %445 = and i32 %355, i32 %356;
    i1 %446 = ztrunc i32 %445 to i1;
    cbr i1 %446(prob = 0.5), ^if.then29, ^b57;
  ^if.else9:
    i1 %447 = ztrunc i32 %264 to i1;
    cbr i1 %447(prob = 0.5), ^if.then26, ^b54;
  ^while.header46:
    i32 %448 = phi [^b39, i32 %200] [^while.header77, i32 %563];
    i32 %449 = phi [^b39, i32 %199] [^while.header77, i32 %865];
    i1 %450 = scmp neq i32 %449, i32 0;
    cbr i1 %450(prob = 0.97), ^while.header53, ^b45;
  ^while.body21:
    i32 %451 = and i32 %359, i32 %360;
    i1 %452 = ztrunc i32 %451 to i1;
    cbr i1 %452(prob = 0.5), ^if.then30, ^b58;
  ^while.body22:
    i32 %453 = and i32 %365, i32 %366;
    i1 %454 = ztrunc i32 %453 to i1;
    cbr i1 %454(prob = 0.5), ^if.then31, ^b59;
  ^if.else10:
    i1 %455 = ztrunc i32 %274 to i1;
    cbr i1 %455(prob = 0.5), ^if.then27, ^b55;
  ^while.header47:
    i32 %456 = phi [^while.header43, i32 0] [^b76, i32 %719];
    i32 %457 = phi [^while.header43, i32 0] [^b76, i32 %716];
    i32 %458 = phi [^while.header43, i32 %369] [^b76, i32 %718];
    i32 %459 = phi [^while.header43, i32 %370] [^b76, i32 %717];
    i1 %460 = scmp lt i32 %456, i32 16;
    cbr i1 %460(prob = 0.97), ^while.body24, ^while.header58;
  ^b50:
    i1 %461 = scmp neq i32 %333, i32 0;
    cbr i1 %461(prob = 0.5), ^while.header55, ^b60;
  ^while.body23:
    i32 %462 = and i32 %379, i32 %380;
    i1 %463 = ztrunc i32 %462 to i1;
    cbr i1 %463(prob = 0.5), ^if.then32, ^b61;
  ^while.header48:
    i32 %464 = phi [^while.header44, i32 1] [^b68, i32 %639];
    i32 %465 = phi [^while.header44, i32 %375] [^b68, i32 %638];
    i32 %466 = phi [^while.header44, i32 0] [^b68, i32 %637];
    i32 %467 = phi [^while.header44, i32 0] [^b68, i32 %640];
    i1 %468 = scmp lt i32 %467, i32 16;
    cbr i1 %468(prob = 0.97), ^while.body25, ^b65;
  ^while.header49:
    i32 %469 = phi [^while.header38, i32 %278] [^b69, i32 %643];
    i32 %470 = phi [^while.header38, i32 %279] [^b69, i32 %642];
    i32 %471 = phi [^while.header38, i32 0] [^b69, i32 %641];
    i32 %472 = phi [^while.header38, i32 0] [^b69, i32 %644];
    i1 %473 = scmp lt i32 %472, i32 16;
    cbr i1 %473(prob = 0.97), ^while.body26, ^b63;
  ^while.header50:
    i32 %474 = phi [^while.header39, i32 0] [^b70, i32 %645];
    i32 %475 = phi [^while.header39, i32 %281] [^b70, i32 %647];
    i32 %476 = phi [^while.header39, i32 %282] [^b70, i32 %646];
    i32 %477 = phi [^while.header39, i32 0] [^b70, i32 %648];
    i1 %478 = scmp lt i32 %477, i32 16;
    cbr i1 %478(prob = 0.97), ^while.body27, ^b64;
  ^b51:
    i1 %479 = scmp neq i32 %354, i32 0;
    cbr i1 %479(prob = 0.5), ^while.header56, ^b62;
  ^while.header51:
    i32 %480 = phi [^b37, i32 65535] [^b71, i32 %651];
    i32 %481 = phi [^b37, i32 %326] [^b71, i32 %650];
    i32 %482 = phi [^b37, i32 0] [^b71, i32 %649];
    i32 %483 = phi [^b37, i32 0] [^b71, i32 %652];
    i1 %484 = scmp lt i32 %483, i32 16;
    cbr i1 %484(prob = 0.97), ^while.body28, ^while.header19;
  ^while.header52:
    i32 %485 = phi [^b38, i32 0] [^b72, i32 %653];
    i32 %486 = phi [^b38, i32 65535] [^b72, i32 %655];
    i32 %487 = phi [^b38, i32 %328] [^b72, i32 %654];
    i32 %488 = phi [^b38, i32 0] [^b72, i32 %656];
    i1 %489 = scmp lt i32 %488, i32 16;
    cbr i1 %489(prob = 0.97), ^while.body29, ^while.header20;
  ^b52:
    i1 %490 = scmp gt i32 %123, i32 32767;
    cbr i1 %490(prob = 0.5), ^if.then33, ^if.else11;
  ^b53:
    i1 %491 = scmp gt i32 %127, i32 32767;
    cbr i1 %491(prob = 0.5), ^if.then34, ^if.else12;
  ^if.then26:
    i32* %492 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %262];
    i32 %493 = load i32* %492;
    i32 %494 = add i32 %263, i32 %493;
    ubr ^b54;
  ^if.then27:
    i32* %495 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %273];
    i32 %496 = load i32* %495;
    i32 %497 = add i32 %276, i32 %496;
    ubr ^b55;
  ^if.then28:
    i32* %498 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %332];
    i32 %499 = load i32* %498;
    i32 %500 = add i32 %333, i32 %499;
    ubr ^b56;
  ^b54:
    i32 %501 = phi [^if.then24, i32 %263] [^if.else9, i32 %263] [^if.then26, i32 %494];
    i32 %502 = sdiv i32 %265, i32 2;
    i32 %503 = sdiv i32 %264, i32 2;
    i32 %504 = add i32 %262, i32 1;
    ubr ^while.header29;
  ^if.then29:
    i32* %505 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %357];
    i32 %506 = load i32* %505;
    i32 %507 = add i32 %354, i32 %506;
    ubr ^b57;
  ^if.then30:
    i32* %508 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %362];
    i32 %509 = load i32* %508;
    i32 %510 = add i32 %361, i32 %509;
    ubr ^b58;
  ^if.then31:
    i32* %511 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %367];
    i32 %512 = load i32* %511;
    i32 %513 = add i32 %364, i32 %512;
    ubr ^b59;
  ^b55:
    i32 %514 = phi [^if.then25, i32 %276] [^if.else10, i32 %276] [^if.then27, i32 %497];
    i32 %515 = sdiv i32 %275, i32 2;
    i32 %516 = sdiv i32 %274, i32 2;
    i32 %517 = add i32 %273, i32 1;
    ubr ^while.header31;
  ^b56:
    i32 %518 = phi [^while.body17, i32 %333] [^if.then28, i32 %500];
    i32 %519 = sdiv i32 %335, i32 2;
    i32 %520 = sdiv i32 %334, i32 2;
    i32 %521 = add i32 %332, i32 1;
    ubr ^while.header37;
  ^if.then32:
    i32* %522 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %378];
    i32 %523 = load i32* %522;
    i32 %524 = add i32 %381, i32 %523;
    ubr ^b61;
  ^b57:
    i32 %525 = phi [^while.body20, i32 %354] [^if.then29, i32 %507];
    i32 %526 = sdiv i32 %356, i32 2;
    i32 %527 = sdiv i32 %355, i32 2;
    i32 %528 = add i32 %357, i32 1;
    ubr ^while.header40;
  ^b58:
    i32 %529 = phi [^while.body21, i32 %361] [^if.then30, i32 %510];
    i32 %530 = sdiv i32 %360, i32 2;
    i32 %531 = sdiv i32 %359, i32 2;
    i32 %532 = add i32 %362, i32 1;
    ubr ^while.header41;
  ^b59:
    i32 %533 = phi [^while.body22, i32 %364] [^if.then31, i32 %513];
    i32 %534 = sdiv i32 %366, i32 2;
    i32 %535 = sdiv i32 %365, i32 2;
    i32 %536 = add i32 %367, i32 1;
    ubr ^while.header42;
  ^if.then33:
    i32 %537 = load i32* %1;
    i32 %538 = sdiv i32 %123, i32 %537;
    i32 %539 = add i32 %538, i32 65536;
    i32 %540 = load i32* %15;
    i32 %541 = sub i32 %539, i32 %540;
    ubr ^while.header15;
  ^b60:
    i32 %542 = phi [^b50, i32 %271] [^while.header55, i32 %578];
    ubr ^while.header64;
  ^if.then34:
    i32 %543 = load i32* %1;
    i32 %544 = sdiv i32 %127, i32 %543;
    i32 %545 = add i32 %544, i32 65536;
    i32 %546 = load i32* %15;
    i32 %547 = sub i32 %545, i32 %546;
    ubr ^while.header16;
  ^if.then35:
    i32 %548 = and i32 %340, i32 1;
    i1 %549 = scmp eq i32 %548, i32 0;
    cbr i1 %549(prob = 0.5), ^if.then37, ^b66;
  ^if.then36:
    i32 %550 = and i32 %346, i32 1;
    i1 %551 = scmp eq i32 %550, i32 0;
    cbr i1 %551(prob = 0.5), ^if.then38, ^b67;
  ^b61:
    i32 %552 = phi [^while.body23, i32 %381] [^if.then32, i32 %524];
    i32 %553 = sdiv i32 %380, i32 2;
    i32 %554 = sdiv i32 %379, i32 2;
    i32 %555 = add i32 %378, i32 1;
    ubr ^while.header45;
  ^b62:
    i32 %556 = phi [^b51, i32 %285] [^while.header56, i32 %589];
    ubr ^while.header65;
  ^b63:
    i32 %557 = load i32* %1;
    i32 %558 = mul i32 %471, i32 %557;
    ubr ^while.header67;
  ^b64:
    i32 %559 = load i32* %1;
    i32 %560 = mul i32 %474, i32 %559;
    ubr ^while.header68;
  ^while.header53:
    i32 %561 = phi [^while.header46, i32 %449] [^b83, i32 %804];
    i32 %562 = phi [^while.header46, i32 %448] [^b83, i32 %803];
    i32 %563 = phi [^while.header46, i32 0] [^b83, i32 %802];
    i32 %564 = phi [^while.header46, i32 0] [^b83, i32 %805];
    i1 %565 = scmp lt i32 %564, i32 16;
    cbr i1 %565(prob = 0.97), ^while.body30, ^while.header62;
  ^if.else11:
    i32 %566 = load i32* %1;
    i32 %567 = sdiv i32 %123, i32 %566;
    ubr ^while.header15;
  ^while.body24:
    i1 %568 = ztrunc i32 %459 to i1;
    cbr i1 %568(prob = 0.5), ^if.then44, ^if.else15;
  ^if.else12:
    i32 %569 = load i32* %1;
    i32 %570 = sdiv i32 %127, i32 %569;
    ubr ^while.header16;
  ^while.body25:
    i32 %571 = and i32 %464, i32 %465;
    i1 %572 = ztrunc i32 %571 to i1;
    cbr i1 %572(prob = 0.5), ^if.then39, ^b68;
  ^if.else13:
    i1 %573 = ztrunc i32 %340 to i1;
    cbr i1 %573(prob = 0.5), ^if.then37, ^b66;
  ^if.else14:
    i1 %574 = ztrunc i32 %346 to i1;
    cbr i1 %574(prob = 0.5), ^if.then38, ^b67;
  ^while.header54:
    i32 %575 = phi [^b45, i32 %199] [^while.header82, i32 %665];
    i32 %576 = phi [^b45, i32 %199] [^while.header82, i32 %969];
    i1 %577 = scmp neq i32 %576, i32 0;
    cbr i1 %577(prob = 0.97), ^while.header60, ^b75;
  ^while.header55:
    i32 %578 = phi [^b50, i32 %271] [^while.header83, i32 %670];
    i32 %579 = phi [^b50, i32 %269] [^while.header83, i32 %974];
    i1 %580 = scmp neq i32 %579, i32 0;
    cbr i1 %580(prob = 0.97), ^while.header61, ^b60;
  ^while.body26:
    i32 %581 = and i32 %469, i32 %470;
    i1 %582 = ztrunc i32 %581 to i1;
    cbr i1 %582(prob = 0.5), ^if.then40, ^b69;
  ^while.body27:
    i32 %583 = and i32 %475, i32 %476;
    i1 %584 = ztrunc i32 %583 to i1;
    cbr i1 %584(prob = 0.5), ^if.then41, ^b70;
  ^while.body28:
    i32 %585 = and i32 %480, i32 %481;
    i1 %586 = ztrunc i32 %585 to i1;
    cbr i1 %586(prob = 0.5), ^if.then42, ^b71;
  ^while.body29:
    i32 %587 = and i32 %486, i32 %487;
    i1 %588 = ztrunc i32 %587 to i1;
    cbr i1 %588(prob = 0.5), ^if.then43, ^b72;
  ^while.header56:
    i32 %589 = phi [^b51, i32 %285] [^while.header84, i32 %680];
    i32 %590 = phi [^b51, i32 %284] [^while.header84, i32 %983];
    i1 %591 = scmp neq i32 %590, i32 0;
    cbr i1 %591(prob = 0.97), ^while.header63, ^b62;
  ^while.header57:
    i32 %592 = phi [^b48, i32 0] [^b77, i32 %733];
    i32 %593 = phi [^b48, i32 65535] [^b77, i32 %735];
    i32 %594 = phi [^b48, i32 %432] [^b77, i32 %734];
    i32 %595 = phi [^b48, i32 0] [^b77, i32 %736];
    i1 %596 = scmp lt i32 %595, i32 16;
    cbr i1 %596(prob = 0.97), ^while.body31, ^while.header25;
  ^while.header58:
    i32 %597 = phi [^while.header47, i32 0] [^b79, i32 %739];
    i32 %598 = phi [^while.header47, i32 %369] [^b79, i32 %741];
    i32 %599 = phi [^while.header47, i32 %370] [^b79, i32 %740];
    i32 %600 = phi [^while.header47, i32 0] [^b79, i32 %742];
    i1 %601 = scmp lt i32 %600, i32 16;
    cbr i1 %601(prob = 0.97), ^while.body32, ^b74;
  ^b65:
    i1 %602 = scmp neq i32 %466, i32 0;
    cbr i1 %602(prob = 0.5), ^while.header66, ^b73;
  ^while.header59:
    i32 %603 = phi [^b49, i32 0] [^b80, i32 %743];
    i32 %604 = phi [^b49, i32 65535] [^b80, i32 %745];
    i32 %605 = phi [^b49, i32 %444] [^b80, i32 %744];
    i32 %606 = phi [^b49, i32 0] [^b80, i32 %746];
    i1 %607 = scmp lt i32 %606, i32 16;
    cbr i1 %607(prob = 0.97), ^while.body33, ^while.header27;
  ^if.then37:
    i32* %608 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %339];
    i32 %609 = load i32* %608;
    i32 %610 = add i32 %342, i32 %609;
    ubr ^b66;
  ^if.then38:
    i32* %611 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %344];
    i32 %612 = load i32* %611;
    i32 %613 = add i32 %345, i32 %612;
    ubr ^b67;
  ^b66:
    i32 %614 = phi [^if.then35, i32 %342] [^if.else13, i32 %342] [^if.then37, i32 %610];
    i32 %615 = sdiv i32 %341, i32 2;
    i32 %616 = sdiv i32 %340, i32 2;
    i32 %617 = add i32 %339, i32 1;
    ubr ^while.header38;
  ^b67:
    i32 %618 = phi [^if.then36, i32 %345] [^if.else14, i32 %345] [^if.then38, i32 %613];
    i32 %619 = sdiv i32 %347, i32 2;
    i32 %620 = sdiv i32 %346, i32 2;
    i32 %621 = add i32 %344, i32 1;
    ubr ^while.header39;
  ^if.then39:
    i32* %622 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %467];
    i32 %623 = load i32* %622;
    i32 %624 = add i32 %466, i32 %623;
    ubr ^b68;
  ^if.then40:
    i32* %625 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %472];
    i32 %626 = load i32* %625;
    i32 %627 = add i32 %471, i32 %626;
    ubr ^b69;
  ^if.then41:
    i32* %628 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %477];
    i32 %629 = load i32* %628;
    i32 %630 = add i32 %474, i32 %629;
    ubr ^b70;
  ^if.then42:
    i32* %631 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %483];
    i32 %632 = load i32* %631;
    i32 %633 = add i32 %482, i32 %632;
    ubr ^b71;
  ^if.then43:
    i32* %634 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %488];
    i32 %635 = load i32* %634;
    i32 %636 = add i32 %485, i32 %635;
    ubr ^b72;
  ^b68:
    i32 %637 = phi [^while.body25, i32 %466] [^if.then39, i32 %624];
    i32 %638 = sdiv i32 %465, i32 2;
    i32 %639 = sdiv i32 %464, i32 2;
    i32 %640 = add i32 %467, i32 1;
    ubr ^while.header48;
  ^b69:
    i32 %641 = phi [^while.body26, i32 %471] [^if.then40, i32 %627];
    i32 %642 = sdiv i32 %470, i32 2;
    i32 %643 = sdiv i32 %469, i32 2;
    i32 %644 = add i32 %472, i32 1;
    ubr ^while.header49;
  ^b70:
    i32 %645 = phi [^while.body27, i32 %474] [^if.then41, i32 %630];
    i32 %646 = sdiv i32 %476, i32 2;
    i32 %647 = sdiv i32 %475, i32 2;
    i32 %648 = add i32 %477, i32 1;
    ubr ^while.header50;
  ^b71:
    i32 %649 = phi [^while.body28, i32 %482] [^if.then42, i32 %633];
    i32 %650 = sdiv i32 %481, i32 2;
    i32 %651 = sdiv i32 %480, i32 2;
    i32 %652 = add i32 %483, i32 1;
    ubr ^while.header51;
  ^b72:
    i32 %653 = phi [^while.body29, i32 %485] [^if.then43, i32 %636];
    i32 %654 = sdiv i32 %487, i32 2;
    i32 %655 = sdiv i32 %486, i32 2;
    i32 %656 = add i32 %488, i32 1;
    ubr ^while.header52;
  ^while.body30:
    i1 %657 = ztrunc i32 %562 to i1;
    cbr i1 %657(prob = 0.5), ^if.then50, ^if.else17;
  ^if.then44:
    i32 %658 = and i32 %458, i32 1;
    i1 %659 = scmp eq i32 %658, i32 0;
    cbr i1 %659(prob = 0.5), ^if.then45, ^b76;
  ^b73:
    i32 %660 = phi [^b65, i32 %376] [^while.header66, i32 %697];
    ubr ^while.header75;
  ^b74:
    i32 %661 = load i32* %1;
    i32 %662 = mul i32 %597, i32 %661;
    ubr ^while.header76;
  ^while.header60:
    i32 %663 = phi [^while.header54, i32 %576] [^b91, i32 %904];
    i32 %664 = phi [^while.header54, i32 %575] [^b91, i32 %903];
    i32 %665 = phi [^while.header54, i32 0] [^b91, i32 %902];
    i32 %666 = phi [^while.header54, i32 0] [^b91, i32 %905];
    i1 %667 = scmp lt i32 %666, i32 16;
    cbr i1 %667(prob = 0.97), ^while.body34, ^while.header70;
  ^while.header61:
    i32 %668 = phi [^while.header55, i32 %579] [^b92, i32 %908];
    i32 %669 = phi [^while.header55, i32 %578] [^b92, i32 %907];
    i32 %670 = phi [^while.header55, i32 0] [^b92, i32 %906];
    i32 %671 = phi [^while.header55, i32 0] [^b92, i32 %909];
    i1 %672 = scmp lt i32 %671, i32 16;
    cbr i1 %672(prob = 0.97), ^while.body35, ^while.header71;
  ^while.body31:
    i32 %673 = and i32 %593, i32 %594;
    i1 %674 = ztrunc i32 %673 to i1;
    cbr i1 %674(prob = 0.5), ^if.then46, ^b77;
  ^while.header62:
    i32 %675 = phi [^while.header53, i32 %449] [^b84, i32 %817];
    i32 %676 = phi [^while.header53, i32 %448] [^b84, i32 %816];
    i32 %677 = phi [^while.header53, i32 0] [^b84, i32 %815];
    i32 %678 = phi [^while.header53, i32 0] [^b84, i32 %818];
    i1 %679 = scmp lt i32 %678, i32 16;
    cbr i1 %679(prob = 0.97), ^while.body36, ^b78;
  ^while.header63:
    i32 %680 = phi [^while.header56, i32 0] [^b93, i32 %916];
    i32 %681 = phi [^while.header56, i32 %590] [^b93, i32 %918];
    i32 %682 = phi [^while.header56, i32 %589] [^b93, i32 %917];
    i32 %683 = phi [^while.header56, i32 0] [^b93, i32 %919];
    i1 %684 = scmp lt i32 %683, i32 16;
    cbr i1 %684(prob = 0.97), ^while.body37, ^while.header74;
  ^if.else15:
    i1 %685 = ztrunc i32 %458 to i1;
    cbr i1 %685(prob = 0.5), ^if.then45, ^b76;
  ^while.header64:
    i32 %686 = phi [^b60, i32 %269] [^while.header86, i32 %755];
    i32 %687 = phi [^b60, i32 %269] [^while.header86, i32 %1053];
    i1 %688 = scmp neq i32 %687, i32 0;
    cbr i1 %688(prob = 0.97), ^while.header69, ^b81;
  ^while.body32:
    i32 %689 = and i32 %598, i32 %599;
    i1 %690 = ztrunc i32 %689 to i1;
    cbr i1 %690(prob = 0.5), ^if.then47, ^b79;
  ^while.body33:
    i32 %691 = and i32 %604, i32 %605;
    i1 %692 = ztrunc i32 %691 to i1;
    cbr i1 %692(prob = 0.5), ^if.then48, ^b80;
  ^b75:
    i1 %693 = scmp gt i32 %201, i32 32767;
    cbr i1 %693(prob = 0.5), ^if.then49, ^if.else16;
  ^while.header65:
    i32 %694 = phi [^b62, i32 %284] [^while.header87, i32 %774];
    i32 %695 = phi [^b62, i32 %284] [^while.header87, i32 %1060];
    i1 %696 = scmp neq i32 %695, i32 0;
    cbr i1 %696(prob = 0.97), ^while.header72, ^b82;
  ^while.header66:
    i32 %697 = phi [^b65, i32 %376] [^while.header88, i32 %781];
    i32 %698 = phi [^b65, i32 %374] [^while.header88, i32 %1065];
    i1 %699 = scmp neq i32 %698, i32 0;
    cbr i1 %699(prob = 0.97), ^while.header73, ^b73;
  ^while.header67:
    i32 %700 = phi [^b63, i32 0] [^b85, i32 %828];
    i32 %701 = phi [^b63, i32 65535] [^b85, i32 %830];
    i32 %702 = phi [^b63, i32 %558] [^b85, i32 %829];
    i32 %703 = phi [^b63, i32 0] [^b85, i32 %831];
    i1 %704 = scmp lt i32 %703, i32 16;
    cbr i1 %704(prob = 0.97), ^while.body38, ^while.header32;
  ^while.header68:
    i32 %705 = phi [^b64, i32 0] [^b86, i32 %832];
    i32 %706 = phi [^b64, i32 65535] [^b86, i32 %834];
    i32 %707 = phi [^b64, i32 %560] [^b86, i32 %833];
    i32 %708 = phi [^b64, i32 0] [^b86, i32 %835];
    i1 %709 = scmp lt i32 %708, i32 16;
    cbr i1 %709(prob = 0.97), ^while.body39, ^while.header33;
  ^if.then45:
    i32* %710 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %456];
    i32 %711 = load i32* %710;
    i32 %712 = add i32 %457, i32 %711;
    ubr ^b76;
  ^if.then46:
    i32* %713 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %595];
    i32 %714 = load i32* %713;
    i32 %715 = add i32 %592, i32 %714;
    ubr ^b77;
  ^b76:
    i32 %716 = phi [^if.then44, i32 %457] [^if.else15, i32 %457] [^if.then45, i32 %712];
    i32 %717 = sdiv i32 %459, i32 2;
    i32 %718 = sdiv i32 %458, i32 2;
    i32 %719 = add i32 %456, i32 1;
    ubr ^while.header47;
  ^if.then47:
    i32* %720 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %600];
    i32 %721 = load i32* %720;
    i32 %722 = add i32 %597, i32 %721;
    ubr ^b79;
  ^if.then48:
    i32* %723 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %606];
    i32 %724 = load i32* %723;
    i32 %725 = add i32 %603, i32 %724;
    ubr ^b80;
  ^if.then49:
    i32 %726 = load i32* %1;
    i32 %727 = sdiv i32 %201, i32 %726;
    i32 %728 = add i32 %727, i32 65536;
    i32 %729 = load i32* %15;
    i32 %730 = sub i32 %728, i32 %729;
    ubr ^while.header22;
  ^if.then50:
    i32 %731 = and i32 %561, i32 1;
    i1 %732 = scmp eq i32 %731, i32 0;
    cbr i1 %732(prob = 0.5), ^if.then51, ^b83;
  ^b77:
    i32 %733 = phi [^while.body31, i32 %592] [^if.then46, i32 %715];
    i32 %734 = sdiv i32 %594, i32 2;
    i32 %735 = sdiv i32 %593, i32 2;
    i32 %736 = add i32 %595, i32 1;
    ubr ^while.header57;
  ^b78:
    i32 %737 = load i32* %1;
    i32 %738 = mul i32 %677, i32 %737;
    ubr ^while.header77;
  ^b79:
    i32 %739 = phi [^while.body32, i32 %597] [^if.then47, i32 %722];
    i32 %740 = sdiv i32 %599, i32 2;
    i32 %741 = sdiv i32 %598, i32 2;
    i32 %742 = add i32 %600, i32 1;
    ubr ^while.header58;
  ^b80:
    i32 %743 = phi [^while.body33, i32 %603] [^if.then48, i32 %725];
    i32 %744 = sdiv i32 %605, i32 2;
    i32 %745 = sdiv i32 %604, i32 2;
    i32 %746 = add i32 %606, i32 1;
    ubr ^while.header59;
  ^if.else16:
    i32 %747 = load i32* %1;
    i32 %748 = sdiv i32 %201, i32 %747;
    ubr ^while.header22;
  ^while.body34:
    i1 %749 = ztrunc i32 %664 to i1;
    cbr i1 %749(prob = 0.5), ^if.then56, ^if.else19;
  ^while.body35:
    i1 %750 = ztrunc i32 %669 to i1;
    cbr i1 %750(prob = 0.5), ^if.then57, ^if.else20;
  ^if.else17:
    i1 %751 = ztrunc i32 %561 to i1;
    cbr i1 %751(prob = 0.5), ^if.then51, ^b83;
  ^while.body36:
    i32 %752 = and i32 %675, i32 %676;
    i1 %753 = ztrunc i32 %752 to i1;
    cbr i1 %753(prob = 0.5), ^if.then52, ^b84;
  ^while.body37:
    i1 %754 = ztrunc i32 %682 to i1;
    cbr i1 %754(prob = 0.5), ^if.then59, ^if.else22;
  ^while.header69:
    i32 %755 = phi [^while.header64, i32 0] [^b101, i32 %1005];
    i32 %756 = phi [^while.header64, i32 %687] [^b101, i32 %1007];
    i32 %757 = phi [^while.header64, i32 %686] [^b101, i32 %1006];
    i32 %758 = phi [^while.header64, i32 0] [^b101, i32 %1008];
    i1 %759 = scmp lt i32 %758, i32 16;
    cbr i1 %759(prob = 0.97), ^while.body40, ^while.header78;
  ^while.body38:
    i32 %760 = and i32 %701, i32 %702;
    i1 %761 = ztrunc i32 %760 to i1;
    cbr i1 %761(prob = 0.5), ^if.then53, ^b85;
  ^while.body39:
    i32 %762 = and i32 %706, i32 %707;
    i1 %763 = ztrunc i32 %762 to i1;
    cbr i1 %763(prob = 0.5), ^if.then54, ^b86;
  ^while.header70:
    i32 %764 = phi [^while.header60, i32 0] [^b94, i32 %926];
    i32 %765 = phi [^while.header60, i32 %576] [^b94, i32 %928];
    i32 %766 = phi [^while.header60, i32 %575] [^b94, i32 %927];
    i32 %767 = phi [^while.header60, i32 0] [^b94, i32 %929];
    i1 %768 = scmp lt i32 %767, i32 16;
    cbr i1 %768(prob = 0.97), ^while.body41, ^b87;
  ^while.header71:
    i32 %769 = phi [^while.header61, i32 %579] [^b95, i32 %932];
    i32 %770 = phi [^while.header61, i32 %578] [^b95, i32 %931];
    i32 %771 = phi [^while.header61, i32 0] [^b95, i32 %930];
    i32 %772 = phi [^while.header61, i32 0] [^b95, i32 %933];
    i1 %773 = scmp lt i32 %772, i32 16;
    cbr i1 %773(prob = 0.97), ^while.body42, ^b88;
  ^while.header72:
    i32 %774 = phi [^while.header65, i32 0] [^b102, i32 %1012];
    i32 %775 = phi [^while.header65, i32 %695] [^b102, i32 %1014];
    i32 %776 = phi [^while.header65, i32 %694] [^b102, i32 %1013];
    i32 %777 = phi [^while.header65, i32 0] [^b102, i32 %1015];
    i1 %778 = scmp lt i32 %777, i32 16;
    cbr i1 %778(prob = 0.97), ^while.body43, ^while.header80;
  ^while.header73:
    i32 %779 = phi [^while.header66, i32 %698] [^b103, i32 %1018];
    i32 %780 = phi [^while.header66, i32 %697] [^b103, i32 %1017];
    i32 %781 = phi [^while.header66, i32 0] [^b103, i32 %1016];
    i32 %782 = phi [^while.header66, i32 0] [^b103, i32 %1019];
    i1 %783 = scmp lt i32 %782, i32 16;
    cbr i1 %783(prob = 0.97), ^while.body44, ^while.header81;
  ^while.header74:
    i32 %784 = phi [^while.header63, i32 0] [^b96, i32 %934];
    i32 %785 = phi [^while.header63, i32 %590] [^b96, i32 %936];
    i32 %786 = phi [^while.header63, i32 %589] [^b96, i32 %935];
    i32 %787 = phi [^while.header63, i32 0] [^b96, i32 %937];
    i1 %788 = scmp lt i32 %787, i32 16;
    cbr i1 %788(prob = 0.97), ^while.body45, ^b89;
  ^b81:
    i1 %789 = scmp gt i32 %270, i32 32767;
    cbr i1 %789(prob = 0.5), ^if.then55, ^if.else18;
  ^while.header75:
    i32 %790 = phi [^b73, i32 %374] [^while.header89, i32 %877];
    i32 %791 = phi [^b73, i32 %374] [^while.header89, i32 %1111];
    i1 %792 = scmp neq i32 %791, i32 0;
    cbr i1 %792(prob = 0.97), ^while.header79, ^b90;
  ^while.header76:
    i32 %793 = phi [^b74, i32 0] [^b97, i32 %940];
    i32 %794 = phi [^b74, i32 65535] [^b97, i32 %942];
    i32 %795 = phi [^b74, i32 %662] [^b97, i32 %941];
    i32 %796 = phi [^b74, i32 0] [^b97, i32 %943];
    i1 %797 = scmp lt i32 %796, i32 16;
    cbr i1 %797(prob = 0.97), ^while.body46, ^while.header43;
  ^b82:
    i1 %798 = scmp gt i32 %286, i32 32767;
    cbr i1 %798(prob = 0.5), ^if.then58, ^if.else21;
  ^if.then51:
    i32* %799 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %564];
    i32 %800 = load i32* %799;
    i32 %801 = add i32 %563, i32 %800;
    ubr ^b83;
  ^b83:
    i32 %802 = phi [^if.then50, i32 %563] [^if.else17, i32 %563] [^if.then51, i32 %801];
    i32 %803 = sdiv i32 %562, i32 2;
    i32 %804 = sdiv i32 %561, i32 2;
    i32 %805 = add i32 %564, i32 1;
    ubr ^while.header53;
  ^if.then52:
    i32* %806 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %678];
    i32 %807 = load i32* %806;
    i32 %808 = add i32 %677, i32 %807;
    ubr ^b84;
  ^if.then53:
    i32* %809 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %703];
    i32 %810 = load i32* %809;
    i32 %811 = add i32 %700, i32 %810;
    ubr ^b85;
  ^if.then54:
    i32* %812 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %708];
    i32 %813 = load i32* %812;
    i32 %814 = add i32 %705, i32 %813;
    ubr ^b86;
  ^b84:
    i32 %815 = phi [^while.body36, i32 %677] [^if.then52, i32 %808];
    i32 %816 = sdiv i32 %676, i32 2;
    i32 %817 = sdiv i32 %675, i32 2;
    i32 %818 = add i32 %678, i32 1;
    ubr ^while.header62;
  ^if.then55:
    i32 %819 = load i32* %1;
    i32 %820 = sdiv i32 %270, i32 %819;
    i32 %821 = add i32 %820, i32 65536;
    i32 %822 = load i32* %15;
    i32 %823 = sub i32 %821, i32 %822;
    ubr ^while.header30;
  ^if.then56:
    i32 %824 = and i32 %663, i32 1;
    i1 %825 = scmp eq i32 %824, i32 0;
    cbr i1 %825(prob = 0.5), ^if.then60, ^b91;
  ^if.then57:
    i32 %826 = and i32 %668, i32 1;
    i1 %827 = scmp eq i32 %826, i32 0;
    cbr i1 %827(prob = 0.5), ^if.then61, ^b92;
  ^b85:
    i32 %828 = phi [^while.body38, i32 %700] [^if.then53, i32 %811];
    i32 %829 = sdiv i32 %702, i32 2;
    i32 %830 = sdiv i32 %701, i32 2;
    i32 %831 = add i32 %703, i32 1;
    ubr ^while.header67;
  ^b86:
    i32 %832 = phi [^while.body39, i32 %705] [^if.then54, i32 %814];
    i32 %833 = sdiv i32 %707, i32 2;
    i32 %834 = sdiv i32 %706, i32 2;
    i32 %835 = add i32 %708, i32 1;
    ubr ^while.header68;
  ^if.then58:
    i32 %836 = load i32* %1;
    i32 %837 = sdiv i32 %286, i32 %836;
    i32 %838 = add i32 %837, i32 65536;
    i32 %839 = load i32* %15;
    i32 %840 = sub i32 %838, i32 %839;
    ubr ^while.header34;
  ^b87:
    i32 %841 = load i32* %1;
    i32 %842 = mul i32 %764, i32 %841;
    ubr ^while.header82;
  ^b88:
    i32 %843 = load i32* %1;
    i32 %844 = mul i32 %771, i32 %843;
    ubr ^while.header83;
  ^if.then59:
    i32 %845 = and i32 %681, i32 1;
    i1 %846 = scmp eq i32 %845, i32 0;
    cbr i1 %846(prob = 0.5), ^if.then62, ^b93;
  ^b89:
    i32 %847 = load i32* %1;
    i32 %848 = mul i32 %784, i32 %847;
    ubr ^while.header84;
  ^if.else18:
    i32 %849 = load i32* %1;
    i32 %850 = sdiv i32 %270, i32 %849;
    ubr ^while.header30;
  ^while.body40:
    i1 %851 = ztrunc i32 %757 to i1;
    cbr i1 %851(prob = 0.5), ^if.then67, ^if.else23;
  ^if.else19:
    i1 %852 = ztrunc i32 %663 to i1;
    cbr i1 %852(prob = 0.5), ^if.then60, ^b91;
  ^if.else20:
    i1 %853 = ztrunc i32 %668 to i1;
    cbr i1 %853(prob = 0.5), ^if.then61, ^b92;
  ^if.else21:
    i32 %854 = load i32* %1;
    i32 %855 = sdiv i32 %286, i32 %854;
    ubr ^while.header34;
  ^while.body41:
    i32 %856 = and i32 %765, i32 %766;
    i1 %857 = ztrunc i32 %856 to i1;
    cbr i1 %857(prob = 0.5), ^if.then63, ^b94;
  ^while.body42:
    i32 %858 = and i32 %769, i32 %770;
    i1 %859 = ztrunc i32 %858 to i1;
    cbr i1 %859(prob = 0.5), ^if.then64, ^b95;
  ^while.body43:
    i1 %860 = ztrunc i32 %776 to i1;
    cbr i1 %860(prob = 0.5), ^if.then69, ^if.else25;
  ^while.body44:
    i1 %861 = ztrunc i32 %780 to i1;
    cbr i1 %861(prob = 0.5), ^if.then70, ^if.else26;
  ^if.else22:
    i1 %862 = ztrunc i32 %681 to i1;
    cbr i1 %862(prob = 0.5), ^if.then62, ^b93;
  ^while.header77:
    i32 %863 = phi [^b78, i32 65535] [^b104, i32 %1028];
    i32 %864 = phi [^b78, i32 %738] [^b104, i32 %1027];
    i32 %865 = phi [^b78, i32 0] [^b104, i32 %1026];
    i32 %866 = phi [^b78, i32 0] [^b104, i32 %1029];
    i1 %867 = scmp lt i32 %866, i32 16;
    cbr i1 %867(prob = 0.97), ^while.body47, ^while.header46;
  ^while.body45:
    i32 %868 = and i32 %785, i32 %786;
    i1 %869 = ztrunc i32 %868 to i1;
    cbr i1 %869(prob = 0.5), ^if.then65, ^b96;
  ^while.body46:
    i32 %870 = and i32 %794, i32 %795;
    i1 %871 = ztrunc i32 %870 to i1;
    cbr i1 %871(prob = 0.5), ^if.then66, ^b97;
  ^while.header78:
    i32 %872 = phi [^while.header69, i32 0] [^b105, i32 %1030];
    i32 %873 = phi [^while.header69, i32 %687] [^b105, i32 %1032];
    i32 %874 = phi [^while.header69, i32 %686] [^b105, i32 %1031];
    i32 %875 = phi [^while.header69, i32 0] [^b105, i32 %1033];
    i1 %876 = scmp lt i32 %875, i32 16;
    cbr i1 %876(prob = 0.97), ^while.body48, ^b98;
  ^while.header79:
    i32 %877 = phi [^while.header75, i32 0] [^b109, i32 %1082];
    i32 %878 = phi [^while.header75, i32 %791] [^b109, i32 %1084];
    i32 %879 = phi [^while.header75, i32 %790] [^b109, i32 %1083];
    i32 %880 = phi [^while.header75, i32 0] [^b109, i32 %1085];
    i1 %881 = scmp lt i32 %880, i32 16;
    cbr i1 %881(prob = 0.97), ^while.body49, ^while.header85;
  ^while.header80:
    i32 %882 = phi [^while.header72, i32 0] [^b106, i32 %1034];
    i32 %883 = phi [^while.header72, i32 %695] [^b106, i32 %1036];
    i32 %884 = phi [^while.header72, i32 %694] [^b106, i32 %1035];
    i32 %885 = phi [^while.header72, i32 0] [^b106, i32 %1037];
    i1 %886 = scmp lt i32 %885, i32 16;
    cbr i1 %886(prob = 0.97), ^while.body50, ^b99;
  ^while.header81:
    i32 %887 = phi [^while.header73, i32 %698] [^b107, i32 %1040];
    i32 %888 = phi [^while.header73, i32 %697] [^b107, i32 %1039];
    i32 %889 = phi [^while.header73, i32 0] [^b107, i32 %1038];
    i32 %890 = phi [^while.header73, i32 0] [^b107, i32 %1041];
    i1 %891 = scmp lt i32 %890, i32 16;
    cbr i1 %891(prob = 0.97), ^while.body51, ^b100;
  ^b90:
    i1 %892 = scmp gt i32 %375, i32 32767;
    cbr i1 %892(prob = 0.5), ^if.then68, ^if.else24;
  ^if.then60:
    i32* %893 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %666];
    i32 %894 = load i32* %893;
    i32 %895 = add i32 %665, i32 %894;
    ubr ^b91;
  ^if.then61:
    i32* %896 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %671];
    i32 %897 = load i32* %896;
    i32 %898 = add i32 %670, i32 %897;
    ubr ^b92;
  ^if.then62:
    i32* %899 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %683];
    i32 %900 = load i32* %899;
    i32 %901 = add i32 %680, i32 %900;
    ubr ^b93;
  ^b91:
    i32 %902 = phi [^if.then56, i32 %665] [^if.else19, i32 %665] [^if.then60, i32 %895];
    i32 %903 = sdiv i32 %664, i32 2;
    i32 %904 = sdiv i32 %663, i32 2;
    i32 %905 = add i32 %666, i32 1;
    ubr ^while.header60;
  ^b92:
    i32 %906 = phi [^if.then57, i32 %670] [^if.else20, i32 %670] [^if.then61, i32 %898];
    i32 %907 = sdiv i32 %669, i32 2;
    i32 %908 = sdiv i32 %668, i32 2;
    i32 %909 = add i32 %671, i32 1;
    ubr ^while.header61;
  ^if.then63:
    i32* %910 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %767];
    i32 %911 = load i32* %910;
    i32 %912 = add i32 %764, i32 %911;
    ubr ^b94;
  ^if.then64:
    i32* %913 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %772];
    i32 %914 = load i32* %913;
    i32 %915 = add i32 %771, i32 %914;
    ubr ^b95;
  ^b93:
    i32 %916 = phi [^if.then59, i32 %680] [^if.else22, i32 %680] [^if.then62, i32 %901];
    i32 %917 = sdiv i32 %682, i32 2;
    i32 %918 = sdiv i32 %681, i32 2;
    i32 %919 = add i32 %683, i32 1;
    ubr ^while.header63;
  ^if.then65:
    i32* %920 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %787];
    i32 %921 = load i32* %920;
    i32 %922 = add i32 %784, i32 %921;
    ubr ^b96;
  ^if.then66:
    i32* %923 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %796];
    i32 %924 = load i32* %923;
    i32 %925 = add i32 %793, i32 %924;
    ubr ^b97;
  ^b94:
    i32 %926 = phi [^while.body41, i32 %764] [^if.then63, i32 %912];
    i32 %927 = sdiv i32 %766, i32 2;
    i32 %928 = sdiv i32 %765, i32 2;
    i32 %929 = add i32 %767, i32 1;
    ubr ^while.header70;
  ^b95:
    i32 %930 = phi [^while.body42, i32 %771] [^if.then64, i32 %915];
    i32 %931 = sdiv i32 %770, i32 2;
    i32 %932 = sdiv i32 %769, i32 2;
    i32 %933 = add i32 %772, i32 1;
    ubr ^while.header71;
  ^b96:
    i32 %934 = phi [^while.body45, i32 %784] [^if.then65, i32 %922];
    i32 %935 = sdiv i32 %786, i32 2;
    i32 %936 = sdiv i32 %785, i32 2;
    i32 %937 = add i32 %787, i32 1;
    ubr ^while.header74;
  ^if.then67:
    i32 %938 = and i32 %756, i32 1;
    i1 %939 = scmp eq i32 %938, i32 0;
    cbr i1 %939(prob = 0.5), ^if.then71, ^b101;
  ^b97:
    i32 %940 = phi [^while.body46, i32 %793] [^if.then66, i32 %925];
    i32 %941 = sdiv i32 %795, i32 2;
    i32 %942 = sdiv i32 %794, i32 2;
    i32 %943 = add i32 %796, i32 1;
    ubr ^while.header76;
  ^if.then68:
    i32 %944 = load i32* %1;
    i32 %945 = sdiv i32 %375, i32 %944;
    i32 %946 = add i32 %945, i32 65536;
    i32 %947 = load i32* %15;
    i32 %948 = sub i32 %946, i32 %947;
    ubr ^while.header44;
  ^b98:
    i32 %949 = load i32* %1;
    i32 %950 = mul i32 %872, i32 %949;
    ubr ^while.header86;
  ^if.then69:
    i32 %951 = and i32 %775, i32 1;
    i1 %952 = scmp eq i32 %951, i32 0;
    cbr i1 %952(prob = 0.5), ^if.then72, ^b102;
  ^if.then70:
    i32 %953 = and i32 %779, i32 1;
    i1 %954 = scmp eq i32 %953, i32 0;
    cbr i1 %954(prob = 0.5), ^if.then73, ^b103;
  ^while.body47:
    i32 %955 = and i32 %863, i32 %864;
    i1 %956 = ztrunc i32 %955 to i1;
    cbr i1 %956(prob = 0.5), ^if.then74, ^b104;
  ^b99:
    i32 %957 = load i32* %1;
    i32 %958 = mul i32 %882, i32 %957;
    ubr ^while.header87;
  ^b100:
    i32 %959 = load i32* %1;
    i32 %960 = mul i32 %889, i32 %959;
    ubr ^while.header88;
  ^if.else23:
    i1 %961 = ztrunc i32 %756 to i1;
    cbr i1 %961(prob = 0.5), ^if.then71, ^b101;
  ^if.else24:
    i32 %962 = load i32* %1;
    i32 %963 = sdiv i32 %375, i32 %962;
    ubr ^while.header44;
  ^while.body48:
    i32 %964 = and i32 %873, i32 %874;
    i1 %965 = ztrunc i32 %964 to i1;
    cbr i1 %965(prob = 0.5), ^if.then75, ^b105;
  ^while.body49:
    i1 %966 = ztrunc i32 %879 to i1;
    cbr i1 %966(prob = 0.5), ^if.then78, ^if.else27;
  ^if.else25:
    i1 %967 = ztrunc i32 %775 to i1;
    cbr i1 %967(prob = 0.5), ^if.then72, ^b102;
  ^if.else26:
    i1 %968 = ztrunc i32 %779 to i1;
    cbr i1 %968(prob = 0.5), ^if.then73, ^b103;
  ^while.header82:
    i32 %969 = phi [^b87, i32 0] [^b110, i32 %1089];
    i32 %970 = phi [^b87, i32 65535] [^b110, i32 %1091];
    i32 %971 = phi [^b87, i32 %842] [^b110, i32 %1090];
    i32 %972 = phi [^b87, i32 0] [^b110, i32 %1092];
    i1 %973 = scmp lt i32 %972, i32 16;
    cbr i1 %973(prob = 0.97), ^while.body52, ^while.header54;
  ^while.header83:
    i32 %974 = phi [^b88, i32 0] [^b111, i32 %1093];
    i32 %975 = phi [^b88, i32 65535] [^b111, i32 %1095];
    i32 %976 = phi [^b88, i32 %844] [^b111, i32 %1094];
    i32 %977 = phi [^b88, i32 0] [^b111, i32 %1096];
    i1 %978 = scmp lt i32 %977, i32 16;
    cbr i1 %978(prob = 0.97), ^while.body53, ^while.header55;
  ^while.body50:
    i32 %979 = and i32 %883, i32 %884;
    i1 %980 = ztrunc i32 %979 to i1;
    cbr i1 %980(prob = 0.5), ^if.then76, ^b106;
  ^while.body51:
    i32 %981 = and i32 %887, i32 %888;
    i1 %982 = ztrunc i32 %981 to i1;
    cbr i1 %982(prob = 0.5), ^if.then77, ^b107;
  ^while.header84:
    i32 %983 = phi [^b89, i32 0] [^b112, i32 %1097];
    i32 %984 = phi [^b89, i32 65535] [^b112, i32 %1099];
    i32 %985 = phi [^b89, i32 %848] [^b112, i32 %1098];
    i32 %986 = phi [^b89, i32 0] [^b112, i32 %1100];
    i1 %987 = scmp lt i32 %986, i32 16;
    cbr i1 %987(prob = 0.97), ^while.body54, ^while.header56;
  ^while.header85:
    i32 %988 = phi [^while.header79, i32 %791] [^b113, i32 %1103];
    i32 %989 = phi [^while.header79, i32 %790] [^b113, i32 %1102];
    i32 %990 = phi [^while.header79, i32 0] [^b113, i32 %1101];
    i32 %991 = phi [^while.header79, i32 0] [^b113, i32 %1104];
    i1 %992 = scmp lt i32 %991, i32 16;
    cbr i1 %992(prob = 0.97), ^while.body55, ^b108;
  ^if.then71:
    i32* %993 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %758];
    i32 %994 = load i32* %993;
    i32 %995 = add i32 %755, i32 %994;
    ubr ^b101;
  ^if.then72:
    i32* %996 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %777];
    i32 %997 = load i32* %996;
    i32 %998 = add i32 %774, i32 %997;
    ubr ^b102;
  ^if.then73:
    i32* %999 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %782];
    i32 %1000 = load i32* %999;
    i32 %1001 = add i32 %781, i32 %1000;
    ubr ^b103;
  ^if.then74:
    i32* %1002 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %866];
    i32 %1003 = load i32* %1002;
    i32 %1004 = add i32 %865, i32 %1003;
    ubr ^b104;
  ^b101:
    i32 %1005 = phi [^if.then67, i32 %755] [^if.else23, i32 %755] [^if.then71, i32 %995];
    i32 %1006 = sdiv i32 %757, i32 2;
    i32 %1007 = sdiv i32 %756, i32 2;
    i32 %1008 = add i32 %758, i32 1;
    ubr ^while.header69;
  ^if.then75:
    i32* %1009 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %875];
    i32 %1010 = load i32* %1009;
    i32 %1011 = add i32 %872, i32 %1010;
    ubr ^b105;
  ^b102:
    i32 %1012 = phi [^if.then69, i32 %774] [^if.else25, i32 %774] [^if.then72, i32 %998];
    i32 %1013 = sdiv i32 %776, i32 2;
    i32 %1014 = sdiv i32 %775, i32 2;
    i32 %1015 = add i32 %777, i32 1;
    ubr ^while.header72;
  ^b103:
    i32 %1016 = phi [^if.then70, i32 %781] [^if.else26, i32 %781] [^if.then73, i32 %1001];
    i32 %1017 = sdiv i32 %780, i32 2;
    i32 %1018 = sdiv i32 %779, i32 2;
    i32 %1019 = add i32 %782, i32 1;
    ubr ^while.header73;
  ^if.then76:
    i32* %1020 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %885];
    i32 %1021 = load i32* %1020;
    i32 %1022 = add i32 %882, i32 %1021;
    ubr ^b106;
  ^if.then77:
    i32* %1023 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %890];
    i32 %1024 = load i32* %1023;
    i32 %1025 = add i32 %889, i32 %1024;
    ubr ^b107;
  ^b104:
    i32 %1026 = phi [^while.body47, i32 %865] [^if.then74, i32 %1004];
    i32 %1027 = sdiv i32 %864, i32 2;
    i32 %1028 = sdiv i32 %863, i32 2;
    i32 %1029 = add i32 %866, i32 1;
    ubr ^while.header77;
  ^b105:
    i32 %1030 = phi [^while.body48, i32 %872] [^if.then75, i32 %1011];
    i32 %1031 = sdiv i32 %874, i32 2;
    i32 %1032 = sdiv i32 %873, i32 2;
    i32 %1033 = add i32 %875, i32 1;
    ubr ^while.header78;
  ^b106:
    i32 %1034 = phi [^while.body50, i32 %882] [^if.then76, i32 %1022];
    i32 %1035 = sdiv i32 %884, i32 2;
    i32 %1036 = sdiv i32 %883, i32 2;
    i32 %1037 = add i32 %885, i32 1;
    ubr ^while.header80;
  ^b107:
    i32 %1038 = phi [^while.body51, i32 %889] [^if.then77, i32 %1025];
    i32 %1039 = sdiv i32 %888, i32 2;
    i32 %1040 = sdiv i32 %887, i32 2;
    i32 %1041 = add i32 %890, i32 1;
    ubr ^while.header81;
  ^if.then78:
    i32 %1042 = and i32 %878, i32 1;
    i1 %1043 = scmp eq i32 %1042, i32 0;
    cbr i1 %1043(prob = 0.5), ^if.then79, ^b109;
  ^while.body52:
    i32 %1044 = and i32 %970, i32 %971;
    i1 %1045 = ztrunc i32 %1044 to i1;
    cbr i1 %1045(prob = 0.5), ^if.then80, ^b110;
  ^while.body53:
    i32 %1046 = and i32 %975, i32 %976;
    i1 %1047 = ztrunc i32 %1046 to i1;
    cbr i1 %1047(prob = 0.5), ^if.then81, ^b111;
  ^b108:
    i32 %1048 = load i32* %1;
    i32 %1049 = mul i32 %990, i32 %1048;
    ubr ^while.header89;
  ^while.body54:
    i32 %1050 = and i32 %984, i32 %985;
    i1 %1051 = ztrunc i32 %1050 to i1;
    cbr i1 %1051(prob = 0.5), ^if.then82, ^b112;
  ^if.else27:
    i1 %1052 = ztrunc i32 %878 to i1;
    cbr i1 %1052(prob = 0.5), ^if.then79, ^b109;
  ^while.header86:
    i32 %1053 = phi [^b98, i32 0] [^b114, i32 %1125];
    i32 %1054 = phi [^b98, i32 65535] [^b114, i32 %1127];
    i32 %1055 = phi [^b98, i32 %950] [^b114, i32 %1126];
    i32 %1056 = phi [^b98, i32 0] [^b114, i32 %1128];
    i1 %1057 = scmp lt i32 %1056, i32 16;
    cbr i1 %1057(prob = 0.97), ^while.body56, ^while.header64;
  ^while.body55:
    i32 %1058 = and i32 %988, i32 %989;
    i1 %1059 = ztrunc i32 %1058 to i1;
    cbr i1 %1059(prob = 0.5), ^if.then83, ^b113;
  ^while.header87:
    i32 %1060 = phi [^b99, i32 0] [^b115, i32 %1129];
    i32 %1061 = phi [^b99, i32 65535] [^b115, i32 %1131];
    i32 %1062 = phi [^b99, i32 %958] [^b115, i32 %1130];
    i32 %1063 = phi [^b99, i32 0] [^b115, i32 %1132];
    i1 %1064 = scmp lt i32 %1063, i32 16;
    cbr i1 %1064(prob = 0.97), ^while.body57, ^while.header65;
  ^while.header88:
    i32 %1065 = phi [^b100, i32 0] [^b116, i32 %1133];
    i32 %1066 = phi [^b100, i32 65535] [^b116, i32 %1135];
    i32 %1067 = phi [^b100, i32 %960] [^b116, i32 %1134];
    i32 %1068 = phi [^b100, i32 0] [^b116, i32 %1136];
    i1 %1069 = scmp lt i32 %1068, i32 16;
    cbr i1 %1069(prob = 0.97), ^while.body58, ^while.header66;
  ^if.then79:
    i32* %1070 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %880];
    i32 %1071 = load i32* %1070;
    i32 %1072 = add i32 %877, i32 %1071;
    ubr ^b109;
  ^if.then80:
    i32* %1073 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %972];
    i32 %1074 = load i32* %1073;
    i32 %1075 = add i32 %969, i32 %1074;
    ubr ^b110;
  ^if.then81:
    i32* %1076 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %977];
    i32 %1077 = load i32* %1076;
    i32 %1078 = add i32 %974, i32 %1077;
    ubr ^b111;
  ^if.then82:
    i32* %1079 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %986];
    i32 %1080 = load i32* %1079;
    i32 %1081 = add i32 %983, i32 %1080;
    ubr ^b112;
  ^b109:
    i32 %1082 = phi [^if.then78, i32 %877] [^if.else27, i32 %877] [^if.then79, i32 %1072];
    i32 %1083 = sdiv i32 %879, i32 2;
    i32 %1084 = sdiv i32 %878, i32 2;
    i32 %1085 = add i32 %880, i32 1;
    ubr ^while.header79;
  ^if.then83:
    i32* %1086 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %991];
    i32 %1087 = load i32* %1086;
    i32 %1088 = add i32 %990, i32 %1087;
    ubr ^b113;
  ^b110:
    i32 %1089 = phi [^while.body52, i32 %969] [^if.then80, i32 %1075];
    i32 %1090 = sdiv i32 %971, i32 2;
    i32 %1091 = sdiv i32 %970, i32 2;
    i32 %1092 = add i32 %972, i32 1;
    ubr ^while.header82;
  ^b111:
    i32 %1093 = phi [^while.body53, i32 %974] [^if.then81, i32 %1078];
    i32 %1094 = sdiv i32 %976, i32 2;
    i32 %1095 = sdiv i32 %975, i32 2;
    i32 %1096 = add i32 %977, i32 1;
    ubr ^while.header83;
  ^b112:
    i32 %1097 = phi [^while.body54, i32 %983] [^if.then82, i32 %1081];
    i32 %1098 = sdiv i32 %985, i32 2;
    i32 %1099 = sdiv i32 %984, i32 2;
    i32 %1100 = add i32 %986, i32 1;
    ubr ^while.header84;
  ^b113:
    i32 %1101 = phi [^while.body55, i32 %990] [^if.then83, i32 %1088];
    i32 %1102 = sdiv i32 %989, i32 2;
    i32 %1103 = sdiv i32 %988, i32 2;
    i32 %1104 = add i32 %991, i32 1;
    ubr ^while.header85;
  ^while.body56:
    i32 %1105 = and i32 %1054, i32 %1055;
    i1 %1106 = ztrunc i32 %1105 to i1;
    cbr i1 %1106(prob = 0.5), ^if.then84, ^b114;
  ^while.body57:
    i32 %1107 = and i32 %1061, i32 %1062;
    i1 %1108 = ztrunc i32 %1107 to i1;
    cbr i1 %1108(prob = 0.5), ^if.then85, ^b115;
  ^while.body58:
    i32 %1109 = and i32 %1066, i32 %1067;
    i1 %1110 = ztrunc i32 %1109 to i1;
    cbr i1 %1110(prob = 0.5), ^if.then86, ^b116;
  ^while.header89:
    i32 %1111 = phi [^b108, i32 0] [^b117, i32 %1142];
    i32 %1112 = phi [^b108, i32 65535] [^b117, i32 %1144];
    i32 %1113 = phi [^b108, i32 %1049] [^b117, i32 %1143];
    i32 %1114 = phi [^b108, i32 0] [^b117, i32 %1145];
    i1 %1115 = scmp lt i32 %1114, i32 16;
    cbr i1 %1115(prob = 0.97), ^while.body59, ^while.header75;
  ^if.then84:
    i32* %1116 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1056];
    i32 %1117 = load i32* %1116;
    i32 %1118 = add i32 %1053, i32 %1117;
    ubr ^b114;
  ^if.then85:
    i32* %1119 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1063];
    i32 %1120 = load i32* %1119;
    i32 %1121 = add i32 %1060, i32 %1120;
    ubr ^b115;
  ^if.then86:
    i32* %1122 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1068];
    i32 %1123 = load i32* %1122;
    i32 %1124 = add i32 %1065, i32 %1123;
    ubr ^b116;
  ^b114:
    i32 %1125 = phi [^while.body56, i32 %1053] [^if.then84, i32 %1118];
    i32 %1126 = sdiv i32 %1055, i32 2;
    i32 %1127 = sdiv i32 %1054, i32 2;
    i32 %1128 = add i32 %1056, i32 1;
    ubr ^while.header86;
  ^b115:
    i32 %1129 = phi [^while.body57, i32 %1060] [^if.then85, i32 %1121];
    i32 %1130 = sdiv i32 %1062, i32 2;
    i32 %1131 = sdiv i32 %1061, i32 2;
    i32 %1132 = add i32 %1063, i32 1;
    ubr ^while.header87;
  ^b116:
    i32 %1133 = phi [^while.body58, i32 %1065] [^if.then86, i32 %1124];
    i32 %1134 = sdiv i32 %1067, i32 2;
    i32 %1135 = sdiv i32 %1066, i32 2;
    i32 %1136 = add i32 %1068, i32 1;
    ubr ^while.header88;
  ^while.body59:
    i32 %1137 = and i32 %1112, i32 %1113;
    i1 %1138 = ztrunc i32 %1137 to i1;
    cbr i1 %1138(prob = 0.5), ^if.then87, ^b117;
  ^if.then87:
    i32* %1139 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1114];
    i32 %1140 = load i32* %1139;
    i32 %1141 = add i32 %1111, i32 %1140;
    ubr ^b117;
  ^b117:
    i32 %1142 = phi [^while.body59, i32 %1111] [^if.then87, i32 %1141];
    i32 %1143 = sdiv i32 %1113, i32 2;
    i32 %1144 = sdiv i32 %1112, i32 2;
    i32 %1145 = add i32 %1114, i32 1;
    ubr ^while.header89;
}
