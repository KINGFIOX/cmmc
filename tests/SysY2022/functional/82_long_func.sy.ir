internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [16 * i32]* @SHIFT_TABLE { ReadOnly } = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768];
internal func @long_func() -> i32 {
^entry:
    i32* %sum = alloc i32;
    i32* %c = alloc i32;
    i32* %al = alloc i32;
    i32* %sum1 = alloc i32;
    i32* %c1 = alloc i32;
    i32* %al1 = alloc i32;
    i32* %mres = alloc i32;
    i32* %mr = alloc i32;
    i32* %ml = alloc i32;
    i32* %sum2 = alloc i32;
    i32* %c2 = alloc i32;
    i32* %al2 = alloc i32;
    i32* %sum3 = alloc i32;
    i32* %c3 = alloc i32;
    i32* %al3 = alloc i32;
    i32* %mres1 = alloc i32;
    i32* %mr1 = alloc i32;
    i32* %ml1 = alloc i32;
    i32* %pres = alloc i32;
    i32* %pr = alloc i32;
    i32* %pl = alloc i32;
    i32* %sum4 = alloc i32;
    i32* %c4 = alloc i32;
    i32* %al4 = alloc i32;
    i32* %sum5 = alloc i32;
    i32* %c5 = alloc i32;
    i32* %al5 = alloc i32;
    i32* %mres2 = alloc i32;
    i32* %mr2 = alloc i32;
    i32* %ml2 = alloc i32;
    i32* %sum6 = alloc i32;
    i32* %c6 = alloc i32;
    i32* %al6 = alloc i32;
    i32* %sum7 = alloc i32;
    i32* %c7 = alloc i32;
    i32* %al7 = alloc i32;
    i32* %mres3 = alloc i32;
    i32* %mr3 = alloc i32;
    i32* %ml3 = alloc i32;
    i32* %pres1 = alloc i32;
    i32* %pr1 = alloc i32;
    i32* %pl1 = alloc i32;
    i32* %sum8 = alloc i32;
    i32* %c8 = alloc i32;
    i32* %al8 = alloc i32;
    i32* %sum9 = alloc i32;
    i32* %c9 = alloc i32;
    i32* %al9 = alloc i32;
    i32* %mres4 = alloc i32;
    i32* %mr4 = alloc i32;
    i32* %ml4 = alloc i32;
    i32* %sum10 = alloc i32;
    i32* %c10 = alloc i32;
    i32* %al10 = alloc i32;
    i32* %sum11 = alloc i32;
    i32* %c11 = alloc i32;
    i32* %al11 = alloc i32;
    i32* %mres5 = alloc i32;
    i32* %mr5 = alloc i32;
    i32* %ml5 = alloc i32;
    i32* %pres2 = alloc i32;
    i32* %pr2 = alloc i32;
    i32* %pl2 = alloc i32;
    i32* %sum12 = alloc i32;
    i32* %c12 = alloc i32;
    i32* %al12 = alloc i32;
    i32* %sum13 = alloc i32;
    i32* %c13 = alloc i32;
    i32* %al13 = alloc i32;
    i32* %mres6 = alloc i32;
    i32* %mr6 = alloc i32;
    i32* %ml6 = alloc i32;
    i32* %sum14 = alloc i32;
    i32* %c14 = alloc i32;
    i32* %al14 = alloc i32;
    i32* %sum15 = alloc i32;
    i32* %c15 = alloc i32;
    i32* %al15 = alloc i32;
    i32* %mres7 = alloc i32;
    i32* %mr7 = alloc i32;
    i32* %ml7 = alloc i32;
    i32* %pres3 = alloc i32;
    i32* %pr3 = alloc i32;
    i32* %pl3 = alloc i32;
    i32* %cur = alloc i32;
    i32* %y = alloc i32;
    i32* %x = alloc i32;
    i32* %i = alloc i32;
    i32* %ans = alloc i32;
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    store i32* %x with i32 0;
    store i32* %y with i32 0;
    store i32* %cur with i32 0;
    store i32* %pl3 with i32 2;
    store i32* %pr3 with i32 0;
    store i32* %pres3 with i32 1;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %pr3;
    i1 %1 = scmp gt i32 %0, i32 0;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^while.body, ^b;
^while.body:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %4 = load i32* %pr3;
    store i32* %x with i32 %4;
    store i32* %y with i32 1;
    ubr ^while.header1;
^b:
    i32 %5 = load i32* %pres3;
    store i32* %ans with i32 %5;
    i32 %6 = load i32* %ans;
    call (i32) -> void @putint(i32 %6);
    call (i32) -> void @putch(i32 10);
    store i32* %pl2 with i32 2;
    store i32* %pr2 with i32 1;
    store i32* %pres2 with i32 1;
    ubr ^while.header2;
^while.header1:
    i32 %7 = load i32* %i;
    i1 %8 = scmp lt i32 %7, i32 16;
    i32 %9 = zext i1 %8 to i32;
    i1 %10 = scmp neq i32 %9, i32 0;
    cbr i1 %10(prob = 0.97), ^while.body2, ^b2;
^while.header2:
    i32 %11 = load i32* %pr2;
    i1 %12 = scmp gt i32 %11, i32 0;
    i32 %13 = zext i1 %12 to i32;
    i1 %14 = scmp neq i32 %13, i32 0;
    cbr i1 %14(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %15 = load i32* %pr2;
    store i32* %x with i32 %15;
    store i32* %y with i32 1;
    ubr ^while.header3;
^while.body2:
    i32 %16 = load i32* %x;
    i32 %17 = srem i32 %16, i32 2;
    i1 %18 = scmp neq i32 %17, i32 0;
    cbr i1 %18(prob = 0.5), ^b3, ^b5;
^b1:
    i32 %19 = load i32* %pres2;
    store i32* %ans with i32 %19;
    i32 %20 = load i32* %ans;
    call (i32) -> void @putint(i32 %20);
    call (i32) -> void @putch(i32 10);
    store i32* %cur with i32 2;
    ubr ^while.header4;
^b2:
    i32 %21 = load i32* %ans;
    i1 %22 = scmp neq i32 %21, i32 0;
    cbr i1 %22(prob = 0.5), ^if.then, ^b4;
^b3:
    i32 %23 = load i32* %y;
    i32 %24 = srem i32 %23, i32 2;
    i1 %25 = scmp neq i32 %24, i32 0;
    ubr ^b5;
^if.then:
    i32 %26 = load i32* %pres3;
    store i32* %ml7 with i32 %26;
    i32 %27 = load i32* %pl3;
    store i32* %mr7 with i32 %27;
    store i32* %mres7 with i32 0;
    ubr ^while.header5;
^b4:
    i32 %28 = load i32* %pl3;
    store i32* %ml6 with i32 %28;
    i32 %29 = load i32* %pl3;
    store i32* %mr6 with i32 %29;
    store i32* %mres6 with i32 0;
    ubr ^while.header6;
^b5:
    i1 %30 = phi [^b3, i1 %25] [^while.body2, i1 false];
    i32 %31 = zext i1 %30 to i32;
    i1 %32 = scmp neq i32 %31, i32 0;
    cbr i1 %32(prob = 0.5), ^if.then1, ^b6;
^while.header3:
    i32 %33 = load i32* %i;
    i1 %34 = scmp lt i32 %33, i32 16;
    i32 %35 = zext i1 %34 to i32;
    i1 %36 = scmp neq i32 %35, i32 0;
    cbr i1 %36(prob = 0.97), ^while.body4, ^b8;
^while.header4:
    i32 %37 = load i32* %cur;
    i1 %38 = scmp lt i32 %37, i32 16;
    i32 %39 = zext i1 %38 to i32;
    i1 %40 = scmp neq i32 %39, i32 0;
    cbr i1 %40(prob = 0.97), ^while.body3, ^b7;
^if.then1:
    i32 %41 = load i32* %ans;
    i32 %42 = load i32* %i;
    i64 %43 = sext i32 %42 to i64;
    i32* %44 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %43];
    i32 %45 = load i32* %44;
    i32 %46 = mul i32 1, i32 %45;
    i32 %47 = add i32 %41, i32 %46;
    store i32* %ans with i32 %47;
    ubr ^b6;
^b6:
    i32 %48 = load i32* %x;
    i32 %49 = sdiv i32 %48, i32 2;
    store i32* %x with i32 %49;
    i32 %50 = load i32* %y;
    i32 %51 = sdiv i32 %50, i32 2;
    store i32* %y with i32 %51;
    i32 %52 = load i32* %i;
    i32 %53 = add i32 %52, i32 1;
    store i32* %i with i32 %53;
    ubr ^while.header1;
^while.body3:
    store i32* %pl1 with i32 2;
    i32 %54 = load i32* %cur;
    store i32* %pr1 with i32 %54;
    store i32* %pres1 with i32 1;
    ubr ^while.header7;
^while.header5:
    i32 %55 = load i32* %mr7;
    i1 %56 = scmp neq i32 %55, i32 0;
    cbr i1 %56(prob = 0.97), ^while.body5, ^b10;
^while.body4:
    i32 %57 = load i32* %x;
    i32 %58 = srem i32 %57, i32 2;
    i1 %59 = scmp neq i32 %58, i32 0;
    cbr i1 %59(prob = 0.5), ^b9, ^b12;
^b7:
    store i32* %cur with i32 0;
    ubr ^while.header8;
^while.header6:
    i32 %60 = load i32* %mr6;
    i1 %61 = scmp neq i32 %60, i32 0;
    cbr i1 %61(prob = 0.97), ^while.body6, ^b13;
^b8:
    i32 %62 = load i32* %ans;
    i1 %63 = scmp neq i32 %62, i32 0;
    cbr i1 %63(prob = 0.5), ^if.then2, ^b11;
^while.body5:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %64 = load i32* %mr7;
    store i32* %x with i32 %64;
    store i32* %y with i32 1;
    ubr ^while.header9;
^b9:
    i32 %65 = load i32* %y;
    i32 %66 = srem i32 %65, i32 2;
    i1 %67 = scmp neq i32 %66, i32 0;
    ubr ^b12;
^b10:
    i32 %68 = load i32* %mres7;
    store i32* %ans with i32 %68;
    i32 %69 = load i32* %ans;
    store i32* %pres3 with i32 %69;
    ubr ^b4;
^while.body6:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %70 = load i32* %mr6;
    store i32* %x with i32 %70;
    store i32* %y with i32 1;
    ubr ^while.header10;
^if.then2:
    i32 %71 = load i32* %pres2;
    store i32* %ml5 with i32 %71;
    i32 %72 = load i32* %pl2;
    store i32* %mr5 with i32 %72;
    store i32* %mres5 with i32 0;
    ubr ^while.header11;
^b11:
    i32 %73 = load i32* %pl2;
    store i32* %ml4 with i32 %73;
    i32 %74 = load i32* %pl2;
    store i32* %mr4 with i32 %74;
    store i32* %mres4 with i32 0;
    ubr ^while.header12;
^b12:
    i1 %75 = phi [^b9, i1 %67] [^while.body4, i1 false];
    i32 %76 = zext i1 %75 to i32;
    i1 %77 = scmp neq i32 %76, i32 0;
    cbr i1 %77(prob = 0.5), ^if.then3, ^b14;
^while.header7:
    i32 %78 = load i32* %pr1;
    i1 %79 = scmp gt i32 %78, i32 0;
    i32 %80 = zext i1 %79 to i32;
    i1 %81 = scmp neq i32 %80, i32 0;
    cbr i1 %81(prob = 0.97), ^while.body7, ^b15;
^b13:
    i32 %82 = load i32* %mres6;
    store i32* %ans with i32 %82;
    i32 %83 = load i32* %ans;
    store i32* %pl3 with i32 %83;
    i32 %84 = load i32* %pr3;
    store i32* %x with i32 %84;
    store i32* %y with i32 1;
    i32 %85 = load i32* %y;
    i1 %86 = scmp ge i32 %85, i32 15;
    i32 %87 = zext i1 %86 to i32;
    i1 %88 = scmp neq i32 %87, i32 0;
    cbr i1 %88(prob = 0.5), ^if.then4, ^if.else;
^while.header8:
    i32 %89 = load i32* %cur;
    i1 %90 = scmp lt i32 %89, i32 16;
    i32 %91 = zext i1 %90 to i32;
    i1 %92 = scmp neq i32 %91, i32 0;
    cbr i1 %92(prob = 0.97), ^while.body8, ^b16;
^if.then3:
    i32 %93 = load i32* %ans;
    i32 %94 = load i32* %i;
    i64 %95 = sext i32 %94 to i64;
    i32* %96 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %95];
    i32 %97 = load i32* %96;
    i32 %98 = mul i32 1, i32 %97;
    i32 %99 = add i32 %93, i32 %98;
    store i32* %ans with i32 %99;
    ubr ^b14;
^while.body7:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %100 = load i32* %pr1;
    store i32* %x with i32 %100;
    store i32* %y with i32 1;
    ubr ^while.header13;
^while.header9:
    i32 %101 = load i32* %i;
    i1 %102 = scmp lt i32 %101, i32 16;
    i32 %103 = zext i1 %102 to i32;
    i1 %104 = scmp neq i32 %103, i32 0;
    cbr i1 %104(prob = 0.97), ^while.body10, ^b18;
^b14:
    i32 %105 = load i32* %x;
    i32 %106 = sdiv i32 %105, i32 2;
    store i32* %x with i32 %106;
    i32 %107 = load i32* %y;
    i32 %108 = sdiv i32 %107, i32 2;
    store i32* %y with i32 %108;
    i32 %109 = load i32* %i;
    i32 %110 = add i32 %109, i32 1;
    store i32* %i with i32 %110;
    ubr ^while.header3;
^b15:
    i32 %111 = load i32* %pres1;
    store i32* %ans with i32 %111;
    i32 %112 = load i32* %ans;
    call (i32) -> void @putint(i32 %112);
    call (i32) -> void @putch(i32 10);
    i32 %113 = load i32* %cur;
    i32 %114 = add i32 %113, i32 1;
    store i32* %cur with i32 %114;
    ubr ^while.header4;
^while.body8:
    store i32* %pl with i32 2;
    i32 %115 = load i32* %cur;
    store i32* %pr with i32 %115;
    store i32* %pres with i32 1;
    ubr ^while.header14;
^while.header10:
    i32 %116 = load i32* %i;
    i1 %117 = scmp lt i32 %116, i32 16;
    i32 %118 = zext i1 %117 to i32;
    i1 %119 = scmp neq i32 %118, i32 0;
    cbr i1 %119(prob = 0.97), ^while.body12, ^b19;
^while.header11:
    i32 %120 = load i32* %mr5;
    i1 %121 = scmp neq i32 %120, i32 0;
    cbr i1 %121(prob = 0.97), ^while.body9, ^b17;
^if.then4:
    i32 %122 = load i32* %x;
    i1 %123 = scmp lt i32 %122, i32 0;
    i32 %124 = zext i1 %123 to i32;
    i1 %125 = scmp neq i32 %124, i32 0;
    cbr i1 %125(prob = 0.5), ^if.then5, ^if.else1;
^while.header12:
    i32 %126 = load i32* %mr4;
    i1 %127 = scmp neq i32 %126, i32 0;
    cbr i1 %127(prob = 0.97), ^while.body11, ^b20;
^if.else:
    i32 %128 = load i32* %y;
    i1 %129 = scmp gt i32 %128, i32 0;
    i32 %130 = zext i1 %129 to i32;
    i1 %131 = scmp neq i32 %130, i32 0;
    cbr i1 %131(prob = 0.5), ^if.then6, ^if.else2;
^b16:
    ret i32 0;
^while.body9:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %132 = load i32* %mr5;
    store i32* %x with i32 %132;
    store i32* %y with i32 1;
    ubr ^while.header15;
^while.body10:
    i32 %133 = load i32* %x;
    i32 %134 = srem i32 %133, i32 2;
    i1 %135 = scmp neq i32 %134, i32 0;
    cbr i1 %135(prob = 0.5), ^b21, ^b25;
^if.then5:
    store i32* %ans with i32 65535;
    ubr ^b24;
^b17:
    i32 %136 = load i32* %mres5;
    store i32* %ans with i32 %136;
    i32 %137 = load i32* %ans;
    store i32* %pres2 with i32 %137;
    ubr ^b11;
^while.body11:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %138 = load i32* %mr4;
    store i32* %x with i32 %138;
    store i32* %y with i32 1;
    ubr ^while.header16;
^b18:
    i32 %139 = load i32* %ans;
    i1 %140 = scmp neq i32 %139, i32 0;
    cbr i1 %140(prob = 0.5), ^if.then7, ^b23;
^while.body12:
    i32 %141 = load i32* %x;
    i32 %142 = srem i32 %141, i32 2;
    i1 %143 = scmp neq i32 %142, i32 0;
    cbr i1 %143(prob = 0.5), ^b22, ^b27;
^if.else1:
    store i32* %ans with i32 0;
    ubr ^b24;
^while.header13:
    i32 %144 = load i32* %i;
    i1 %145 = scmp lt i32 %144, i32 16;
    i32 %146 = zext i1 %145 to i32;
    i1 %147 = scmp neq i32 %146, i32 0;
    cbr i1 %147(prob = 0.97), ^while.body14, ^b29;
^b19:
    i32 %148 = load i32* %ans;
    i1 %149 = scmp neq i32 %148, i32 0;
    cbr i1 %149(prob = 0.5), ^if.then8, ^b26;
^if.else2:
    i32 %150 = load i32* %x;
    store i32* %ans with i32 %150;
    ubr ^b28;
^while.header14:
    i32 %151 = load i32* %pr;
    i1 %152 = scmp gt i32 %151, i32 0;
    i32 %153 = zext i1 %152 to i32;
    i1 %154 = scmp neq i32 %153, i32 0;
    cbr i1 %154(prob = 0.97), ^while.body13, ^b30;
^if.then6:
    i32 %155 = load i32* %x;
    i1 %156 = scmp gt i32 %155, i32 32767;
    i32 %157 = zext i1 %156 to i32;
    i1 %158 = scmp neq i32 %157, i32 0;
    cbr i1 %158(prob = 0.5), ^if.then9, ^if.else3;
^b20:
    i32 %159 = load i32* %mres4;
    store i32* %ans with i32 %159;
    i32 %160 = load i32* %ans;
    store i32* %pl2 with i32 %160;
    i32 %161 = load i32* %pr2;
    store i32* %x with i32 %161;
    store i32* %y with i32 1;
    i32 %162 = load i32* %y;
    i1 %163 = scmp ge i32 %162, i32 15;
    i32 %164 = zext i1 %163 to i32;
    i1 %165 = scmp neq i32 %164, i32 0;
    cbr i1 %165(prob = 0.5), ^if.then10, ^if.else4;
^b21:
    i32 %166 = load i32* %y;
    i32 %167 = srem i32 %166, i32 2;
    i1 %168 = scmp neq i32 %167, i32 0;
    ubr ^b25;
^if.then7:
    i32 %169 = load i32* %mres7;
    store i32* %al15 with i32 %169;
    i32 %170 = load i32* %ml7;
    store i32* %c15 with i32 %170;
    store i32* %sum15 with i32 0;
    ubr ^while.header17;
^b22:
    i32 %171 = load i32* %y;
    i32 %172 = srem i32 %171, i32 2;
    i1 %173 = scmp neq i32 %172, i32 0;
    ubr ^b27;
^b23:
    i32 %174 = load i32* %ml7;
    store i32* %al14 with i32 %174;
    i32 %175 = load i32* %ml7;
    store i32* %c14 with i32 %175;
    store i32* %sum14 with i32 0;
    ubr ^while.header18;
^if.then8:
    i32 %176 = load i32* %mres6;
    store i32* %al13 with i32 %176;
    i32 %177 = load i32* %ml6;
    store i32* %c13 with i32 %177;
    store i32* %sum13 with i32 0;
    ubr ^while.header19;
^b24:
    ubr ^b33;
^while.body13:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %178 = load i32* %pr;
    store i32* %x with i32 %178;
    store i32* %y with i32 1;
    ubr ^while.header20;
^b25:
    i1 %179 = phi [^b21, i1 %168] [^while.body10, i1 false];
    i32 %180 = zext i1 %179 to i32;
    i1 %181 = scmp neq i32 %180, i32 0;
    cbr i1 %181(prob = 0.5), ^if.then11, ^b32;
^b26:
    i32 %182 = load i32* %ml6;
    store i32* %al12 with i32 %182;
    i32 %183 = load i32* %ml6;
    store i32* %c12 with i32 %183;
    store i32* %sum12 with i32 0;
    ubr ^while.header21;
^if.then9:
    i32 %184 = load i32* %x;
    i32 %185 = load i32* %y;
    i64 %186 = sext i32 %185 to i64;
    i32* %187 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %186];
    i32 %188 = load i32* %187;
    i32 %189 = sdiv i32 %184, i32 %188;
    store i32* %x with i32 %189;
    i32 %190 = load i32* %x;
    i32 %191 = add i32 %190, i32 65536;
    i32 %192 = load i32* %y;
    i32 %193 = sub i32 15, i32 %192;
    i32 %194 = add i32 %193, i32 1;
    i64 %195 = sext i32 %194 to i64;
    i32* %196 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %195];
    i32 %197 = load i32* %196;
    i32 %198 = sub i32 %191, i32 %197;
    store i32* %ans with i32 %198;
    ubr ^b35;
^while.header15:
    i32 %199 = load i32* %i;
    i1 %200 = scmp lt i32 %199, i32 16;
    i32 %201 = zext i1 %200 to i32;
    i1 %202 = scmp neq i32 %201, i32 0;
    cbr i1 %202(prob = 0.97), ^while.body15, ^b37;
^while.body14:
    i32 %203 = load i32* %x;
    i32 %204 = srem i32 %203, i32 2;
    i1 %205 = scmp neq i32 %204, i32 0;
    cbr i1 %205(prob = 0.5), ^b31, ^b38;
^b27:
    i1 %206 = phi [^b22, i1 %173] [^while.body12, i1 false];
    i32 %207 = zext i1 %206 to i32;
    i1 %208 = scmp neq i32 %207, i32 0;
    cbr i1 %208(prob = 0.5), ^if.then12, ^b34;
^b28:
    ubr ^b33;
^if.else3:
    i32 %209 = load i32* %x;
    i32 %210 = load i32* %y;
    i64 %211 = sext i32 %210 to i64;
    i32* %212 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %211];
    i32 %213 = load i32* %212;
    i32 %214 = sdiv i32 %209, i32 %213;
    store i32* %ans with i32 %214;
    ubr ^b35;
^while.header16:
    i32 %215 = load i32* %i;
    i1 %216 = scmp lt i32 %215, i32 16;
    i32 %217 = zext i1 %216 to i32;
    i1 %218 = scmp neq i32 %217, i32 0;
    cbr i1 %218(prob = 0.97), ^while.body16, ^b40;
^b29:
    i32 %219 = load i32* %ans;
    i1 %220 = scmp neq i32 %219, i32 0;
    cbr i1 %220(prob = 0.5), ^if.then13, ^b36;
^if.then10:
    i32 %221 = load i32* %x;
    i1 %222 = scmp lt i32 %221, i32 0;
    i32 %223 = zext i1 %222 to i32;
    i1 %224 = scmp neq i32 %223, i32 0;
    cbr i1 %224(prob = 0.5), ^if.then14, ^if.else5;
^b30:
    i32 %225 = load i32* %pres;
    store i32* %ans with i32 %225;
    i32 %226 = load i32* %cur;
    i64 %227 = sext i32 %226 to i64;
    i32* %228 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %227];
    i32 %229 = load i32* %228;
    i32 %230 = load i32* %ans;
    i1 %231 = scmp neq i32 %229, i32 %230;
    i32 %232 = zext i1 %231 to i32;
    i1 %233 = scmp neq i32 %232, i32 0;
    cbr i1 %233(prob = 0.5), ^if.then16, ^b39;
^if.else4:
    i32 %234 = load i32* %y;
    i1 %235 = scmp gt i32 %234, i32 0;
    i32 %236 = zext i1 %235 to i32;
    i1 %237 = scmp neq i32 %236, i32 0;
    cbr i1 %237(prob = 0.5), ^if.then15, ^if.else6;
^if.then11:
    i32 %238 = load i32* %ans;
    i32 %239 = load i32* %i;
    i64 %240 = sext i32 %239 to i64;
    i32* %241 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %240];
    i32 %242 = load i32* %241;
    i32 %243 = mul i32 1, i32 %242;
    i32 %244 = add i32 %238, i32 %243;
    store i32* %ans with i32 %244;
    ubr ^b32;
^b31:
    i32 %245 = load i32* %y;
    i32 %246 = srem i32 %245, i32 2;
    i1 %247 = scmp neq i32 %246, i32 0;
    ubr ^b38;
^b32:
    i32 %248 = load i32* %x;
    i32 %249 = sdiv i32 %248, i32 2;
    store i32* %x with i32 %249;
    i32 %250 = load i32* %y;
    i32 %251 = sdiv i32 %250, i32 2;
    store i32* %y with i32 %251;
    i32 %252 = load i32* %i;
    i32 %253 = add i32 %252, i32 1;
    store i32* %i with i32 %253;
    ubr ^while.header9;
^if.then12:
    i32 %254 = load i32* %ans;
    i32 %255 = load i32* %i;
    i64 %256 = sext i32 %255 to i64;
    i32* %257 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %256];
    i32 %258 = load i32* %257;
    i32 %259 = mul i32 1, i32 %258;
    i32 %260 = add i32 %254, i32 %259;
    store i32* %ans with i32 %260;
    ubr ^b34;
^b33:
    i32 %261 = load i32* %ans;
    store i32* %pr3 with i32 %261;
    ubr ^while.header;
^if.then13:
    i32 %262 = load i32* %pres1;
    store i32* %ml3 with i32 %262;
    i32 %263 = load i32* %pl1;
    store i32* %mr3 with i32 %263;
    store i32* %mres3 with i32 0;
    ubr ^while.header22;
^while.header17:
    i32 %264 = load i32* %c15;
    i1 %265 = scmp neq i32 %264, i32 0;
    cbr i1 %265(prob = 0.97), ^while.body17, ^b42;
^b34:
    i32 %266 = load i32* %x;
    i32 %267 = sdiv i32 %266, i32 2;
    store i32* %x with i32 %267;
    i32 %268 = load i32* %y;
    i32 %269 = sdiv i32 %268, i32 2;
    store i32* %y with i32 %269;
    i32 %270 = load i32* %i;
    i32 %271 = add i32 %270, i32 1;
    store i32* %i with i32 %271;
    ubr ^while.header10;
^b35:
    ubr ^b28;
^while.body15:
    i32 %272 = load i32* %x;
    i32 %273 = srem i32 %272, i32 2;
    i1 %274 = scmp neq i32 %273, i32 0;
    cbr i1 %274(prob = 0.5), ^b41, ^b48;
^if.then14:
    store i32* %ans with i32 65535;
    ubr ^b46;
^b36:
    i32 %275 = load i32* %pl1;
    store i32* %ml2 with i32 %275;
    i32 %276 = load i32* %pl1;
    store i32* %mr2 with i32 %276;
    store i32* %mres2 with i32 0;
    ubr ^while.header23;
^while.header18:
    i32 %277 = load i32* %c14;
    i1 %278 = scmp neq i32 %277, i32 0;
    cbr i1 %278(prob = 0.97), ^while.body18, ^b50;
^while.header19:
    i32 %279 = load i32* %c13;
    i1 %280 = scmp neq i32 %279, i32 0;
    cbr i1 %280(prob = 0.97), ^while.body19, ^b44;
^b37:
    i32 %281 = load i32* %ans;
    i1 %282 = scmp neq i32 %281, i32 0;
    cbr i1 %282(prob = 0.5), ^if.then17, ^b45;
^while.body16:
    i32 %283 = load i32* %x;
    i32 %284 = srem i32 %283, i32 2;
    i1 %285 = scmp neq i32 %284, i32 0;
    cbr i1 %285(prob = 0.5), ^b43, ^b51;
^if.else5:
    store i32* %ans with i32 0;
    ubr ^b46;
^b38:
    i1 %286 = phi [^b31, i1 %247] [^while.body14, i1 false];
    i32 %287 = zext i1 %286 to i32;
    i1 %288 = scmp neq i32 %287, i32 0;
    cbr i1 %288(prob = 0.5), ^if.then18, ^b47;
^while.header20:
    i32 %289 = load i32* %i;
    i1 %290 = scmp lt i32 %289, i32 16;
    i32 %291 = zext i1 %290 to i32;
    i1 %292 = scmp neq i32 %291, i32 0;
    cbr i1 %292(prob = 0.97), ^while.body21, ^b53;
^b39:
    i32 %293 = load i32* %cur;
    i32 %294 = add i32 %293, i32 1;
    store i32* %cur with i32 %294;
    ubr ^while.header8;
^while.header21:
    i32 %295 = load i32* %c12;
    i1 %296 = scmp neq i32 %295, i32 0;
    cbr i1 %296(prob = 0.97), ^while.body20, ^b54;
^b40:
    i32 %297 = load i32* %ans;
    i1 %298 = scmp neq i32 %297, i32 0;
    cbr i1 %298(prob = 0.5), ^if.then19, ^b49;
^if.else6:
    i32 %299 = load i32* %x;
    store i32* %ans with i32 %299;
    ubr ^b52;
^if.then15:
    i32 %300 = load i32* %x;
    i1 %301 = scmp gt i32 %300, i32 32767;
    i32 %302 = zext i1 %301 to i32;
    i1 %303 = scmp neq i32 %302, i32 0;
    cbr i1 %303(prob = 0.5), ^if.then20, ^if.else7;
^if.then16:
    ret i32 1;
^while.body17:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %304 = load i32* %al15;
    store i32* %x with i32 %304;
    i32 %305 = load i32* %c15;
    store i32* %y with i32 %305;
    ubr ^while.header24;
^b41:
    i32 %306 = load i32* %y;
    i32 %307 = srem i32 %306, i32 2;
    i1 %308 = scmp neq i32 %307, i32 0;
    ubr ^b48;
^b42:
    i32 %309 = load i32* %al15;
    store i32* %ans with i32 %309;
    i32 %310 = load i32* %ans;
    store i32* %mres7 with i32 %310;
    ubr ^b23;
^while.body18:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %311 = load i32* %al14;
    store i32* %x with i32 %311;
    i32 %312 = load i32* %c14;
    store i32* %y with i32 %312;
    ubr ^while.header25;
^while.body19:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %313 = load i32* %al13;
    store i32* %x with i32 %313;
    i32 %314 = load i32* %c13;
    store i32* %y with i32 %314;
    ubr ^while.header26;
^if.then17:
    i32 %315 = load i32* %mres5;
    store i32* %al11 with i32 %315;
    i32 %316 = load i32* %ml5;
    store i32* %c11 with i32 %316;
    store i32* %sum11 with i32 0;
    ubr ^while.header27;
^b43:
    i32 %317 = load i32* %y;
    i32 %318 = srem i32 %317, i32 2;
    i1 %319 = scmp neq i32 %318, i32 0;
    ubr ^b51;
^if.then18:
    i32 %320 = load i32* %ans;
    i32 %321 = load i32* %i;
    i64 %322 = sext i32 %321 to i64;
    i32* %323 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %322];
    i32 %324 = load i32* %323;
    i32 %325 = mul i32 1, i32 %324;
    i32 %326 = add i32 %320, i32 %325;
    store i32* %ans with i32 %326;
    ubr ^b47;
^b44:
    i32 %327 = load i32* %al13;
    store i32* %ans with i32 %327;
    i32 %328 = load i32* %ans;
    store i32* %mres6 with i32 %328;
    ubr ^b26;
^while.body20:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %329 = load i32* %al12;
    store i32* %x with i32 %329;
    i32 %330 = load i32* %c12;
    store i32* %y with i32 %330;
    ubr ^while.header28;
^b45:
    i32 %331 = load i32* %ml5;
    store i32* %al10 with i32 %331;
    i32 %332 = load i32* %ml5;
    store i32* %c10 with i32 %332;
    store i32* %sum10 with i32 0;
    ubr ^while.header29;
^if.then19:
    i32 %333 = load i32* %mres4;
    store i32* %al9 with i32 %333;
    i32 %334 = load i32* %ml4;
    store i32* %c9 with i32 %334;
    store i32* %sum9 with i32 0;
    ubr ^while.header30;
^b46:
    ubr ^b57;
^b47:
    i32 %335 = load i32* %x;
    i32 %336 = sdiv i32 %335, i32 2;
    store i32* %x with i32 %336;
    i32 %337 = load i32* %y;
    i32 %338 = sdiv i32 %337, i32 2;
    store i32* %y with i32 %338;
    i32 %339 = load i32* %i;
    i32 %340 = add i32 %339, i32 1;
    store i32* %i with i32 %340;
    ubr ^while.header13;
^b48:
    i1 %341 = phi [^b41, i1 %308] [^while.body15, i1 false];
    i32 %342 = zext i1 %341 to i32;
    i1 %343 = scmp neq i32 %342, i32 0;
    cbr i1 %343(prob = 0.5), ^if.then21, ^b56;
^b49:
    i32 %344 = load i32* %ml4;
    store i32* %al8 with i32 %344;
    i32 %345 = load i32* %ml4;
    store i32* %c8 with i32 %345;
    store i32* %sum8 with i32 0;
    ubr ^while.header31;
^if.then20:
    i32 %346 = load i32* %x;
    i32 %347 = load i32* %y;
    i64 %348 = sext i32 %347 to i64;
    i32* %349 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %348];
    i32 %350 = load i32* %349;
    i32 %351 = sdiv i32 %346, i32 %350;
    store i32* %x with i32 %351;
    i32 %352 = load i32* %x;
    i32 %353 = add i32 %352, i32 65536;
    i32 %354 = load i32* %y;
    i32 %355 = sub i32 15, i32 %354;
    i32 %356 = add i32 %355, i32 1;
    i64 %357 = sext i32 %356 to i64;
    i32* %358 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %357];
    i32 %359 = load i32* %358;
    i32 %360 = sub i32 %353, i32 %359;
    store i32* %ans with i32 %360;
    ubr ^b60;
^while.header22:
    i32 %361 = load i32* %mr3;
    i1 %362 = scmp neq i32 %361, i32 0;
    cbr i1 %362(prob = 0.97), ^while.body22, ^b58;
^while.body21:
    i32 %363 = load i32* %x;
    i32 %364 = srem i32 %363, i32 2;
    i1 %365 = scmp neq i32 %364, i32 0;
    cbr i1 %365(prob = 0.5), ^b55, ^b62;
^b50:
    i32 %366 = load i32* %al14;
    store i32* %ans with i32 %366;
    i32 %367 = load i32* %ans;
    store i32* %ml7 with i32 %367;
    i32 %368 = load i32* %mr7;
    store i32* %x with i32 %368;
    store i32* %y with i32 1;
    i32 %369 = load i32* %y;
    i1 %370 = scmp ge i32 %369, i32 15;
    i32 %371 = zext i1 %370 to i32;
    i1 %372 = scmp neq i32 %371, i32 0;
    cbr i1 %372(prob = 0.5), ^if.then24, ^if.else8;
^b51:
    i1 %373 = phi [^b43, i1 %319] [^while.body16, i1 false];
    i32 %374 = zext i1 %373 to i32;
    i1 %375 = scmp neq i32 %374, i32 0;
    cbr i1 %375(prob = 0.5), ^if.then22, ^b59;
^b52:
    ubr ^b57;
^if.else7:
    i32 %376 = load i32* %x;
    i32 %377 = load i32* %y;
    i64 %378 = sext i32 %377 to i64;
    i32* %379 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %378];
    i32 %380 = load i32* %379;
    i32 %381 = sdiv i32 %376, i32 %380;
    store i32* %ans with i32 %381;
    ubr ^b60;
^while.header23:
    i32 %382 = load i32* %mr2;
    i1 %383 = scmp neq i32 %382, i32 0;
    cbr i1 %383(prob = 0.97), ^while.body23, ^b63;
^b53:
    i32 %384 = load i32* %ans;
    i1 %385 = scmp neq i32 %384, i32 0;
    cbr i1 %385(prob = 0.5), ^if.then23, ^b61;
^b54:
    i32 %386 = load i32* %al12;
    store i32* %ans with i32 %386;
    i32 %387 = load i32* %ans;
    store i32* %ml6 with i32 %387;
    i32 %388 = load i32* %mr6;
    store i32* %x with i32 %388;
    store i32* %y with i32 1;
    i32 %389 = load i32* %y;
    i1 %390 = scmp ge i32 %389, i32 15;
    i32 %391 = zext i1 %390 to i32;
    i1 %392 = scmp neq i32 %391, i32 0;
    cbr i1 %392(prob = 0.5), ^if.then25, ^if.else9;
^if.then21:
    i32 %393 = load i32* %ans;
    i32 %394 = load i32* %i;
    i64 %395 = sext i32 %394 to i64;
    i32* %396 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %395];
    i32 %397 = load i32* %396;
    i32 %398 = mul i32 1, i32 %397;
    i32 %399 = add i32 %393, i32 %398;
    store i32* %ans with i32 %399;
    ubr ^b56;
^while.body22:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %400 = load i32* %mr3;
    store i32* %x with i32 %400;
    store i32* %y with i32 1;
    ubr ^while.header32;
^b55:
    i32 %401 = load i32* %y;
    i32 %402 = srem i32 %401, i32 2;
    i1 %403 = scmp neq i32 %402, i32 0;
    ubr ^b62;
^while.header24:
    i32 %404 = load i32* %i;
    i1 %405 = scmp lt i32 %404, i32 16;
    i32 %406 = zext i1 %405 to i32;
    i1 %407 = scmp neq i32 %406, i32 0;
    cbr i1 %407(prob = 0.97), ^while.body25, ^b64;
^b56:
    i32 %408 = load i32* %x;
    i32 %409 = sdiv i32 %408, i32 2;
    store i32* %x with i32 %409;
    i32 %410 = load i32* %y;
    i32 %411 = sdiv i32 %410, i32 2;
    store i32* %y with i32 %411;
    i32 %412 = load i32* %i;
    i32 %413 = add i32 %412, i32 1;
    store i32* %i with i32 %413;
    ubr ^while.header15;
^if.then22:
    i32 %414 = load i32* %ans;
    i32 %415 = load i32* %i;
    i64 %416 = sext i32 %415 to i64;
    i32* %417 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %416];
    i32 %418 = load i32* %417;
    i32 %419 = mul i32 1, i32 %418;
    i32 %420 = add i32 %414, i32 %419;
    store i32* %ans with i32 %420;
    ubr ^b59;
^b57:
    i32 %421 = load i32* %ans;
    store i32* %pr2 with i32 %421;
    ubr ^while.header2;
^b58:
    i32 %422 = load i32* %mres3;
    store i32* %ans with i32 %422;
    i32 %423 = load i32* %ans;
    store i32* %pres1 with i32 %423;
    ubr ^b36;
^while.body23:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %424 = load i32* %mr2;
    store i32* %x with i32 %424;
    store i32* %y with i32 1;
    ubr ^while.header33;
^if.then23:
    i32 %425 = load i32* %pres;
    store i32* %ml1 with i32 %425;
    i32 %426 = load i32* %pl;
    store i32* %mr1 with i32 %426;
    store i32* %mres1 with i32 0;
    ubr ^while.header34;
^while.header25:
    i32 %427 = load i32* %i;
    i1 %428 = scmp lt i32 %427, i32 16;
    i32 %429 = zext i1 %428 to i32;
    i1 %430 = scmp neq i32 %429, i32 0;
    cbr i1 %430(prob = 0.97), ^while.body28, ^b65;
^while.header26:
    i32 %431 = load i32* %i;
    i1 %432 = scmp lt i32 %431, i32 16;
    i32 %433 = zext i1 %432 to i32;
    i1 %434 = scmp neq i32 %433, i32 0;
    cbr i1 %434(prob = 0.97), ^while.body29, ^b66;
^while.header27:
    i32 %435 = load i32* %c11;
    i1 %436 = scmp neq i32 %435, i32 0;
    cbr i1 %436(prob = 0.97), ^while.body24, ^b67;
^b59:
    i32 %437 = load i32* %x;
    i32 %438 = sdiv i32 %437, i32 2;
    store i32* %x with i32 %438;
    i32 %439 = load i32* %y;
    i32 %440 = sdiv i32 %439, i32 2;
    store i32* %y with i32 %440;
    i32 %441 = load i32* %i;
    i32 %442 = add i32 %441, i32 1;
    store i32* %i with i32 %442;
    ubr ^while.header16;
^b60:
    ubr ^b52;
^b61:
    i32 %443 = load i32* %pl;
    store i32* %ml with i32 %443;
    i32 %444 = load i32* %pl;
    store i32* %mr with i32 %444;
    store i32* %mres with i32 0;
    ubr ^while.header35;
^if.then24:
    i32 %445 = load i32* %x;
    i1 %446 = scmp lt i32 %445, i32 0;
    i32 %447 = zext i1 %446 to i32;
    i1 %448 = scmp neq i32 %447, i32 0;
    cbr i1 %448(prob = 0.5), ^if.then26, ^if.else10;
^while.header28:
    i32 %449 = load i32* %i;
    i1 %450 = scmp lt i32 %449, i32 16;
    i32 %451 = zext i1 %450 to i32;
    i1 %452 = scmp neq i32 %451, i32 0;
    cbr i1 %452(prob = 0.97), ^while.body31, ^b68;
^while.header29:
    i32 %453 = load i32* %c10;
    i1 %454 = scmp neq i32 %453, i32 0;
    cbr i1 %454(prob = 0.97), ^while.body26, ^b71;
^while.header30:
    i32 %455 = load i32* %c9;
    i1 %456 = scmp neq i32 %455, i32 0;
    cbr i1 %456(prob = 0.97), ^while.body27, ^b69;
^b62:
    i1 %457 = phi [^b55, i1 %403] [^while.body21, i1 false];
    i32 %458 = zext i1 %457 to i32;
    i1 %459 = scmp neq i32 %458, i32 0;
    cbr i1 %459(prob = 0.5), ^if.then27, ^b70;
^if.else8:
    i32 %460 = load i32* %y;
    i1 %461 = scmp gt i32 %460, i32 0;
    i32 %462 = zext i1 %461 to i32;
    i1 %463 = scmp neq i32 %462, i32 0;
    cbr i1 %463(prob = 0.5), ^if.then29, ^if.else11;
^if.then25:
    i32 %464 = load i32* %x;
    i1 %465 = scmp lt i32 %464, i32 0;
    i32 %466 = zext i1 %465 to i32;
    i1 %467 = scmp neq i32 %466, i32 0;
    cbr i1 %467(prob = 0.5), ^if.then28, ^if.else12;
^while.header31:
    i32 %468 = load i32* %c8;
    i1 %469 = scmp neq i32 %468, i32 0;
    cbr i1 %469(prob = 0.97), ^while.body30, ^b72;
^b63:
    i32 %470 = load i32* %mres2;
    store i32* %ans with i32 %470;
    i32 %471 = load i32* %ans;
    store i32* %pl1 with i32 %471;
    i32 %472 = load i32* %pr1;
    store i32* %x with i32 %472;
    store i32* %y with i32 1;
    i32 %473 = load i32* %y;
    i1 %474 = scmp ge i32 %473, i32 15;
    i32 %475 = zext i1 %474 to i32;
    i1 %476 = scmp neq i32 %475, i32 0;
    cbr i1 %476(prob = 0.5), ^if.then30, ^if.else14;
^if.else9:
    i32 %477 = load i32* %y;
    i1 %478 = scmp gt i32 %477, i32 0;
    i32 %479 = zext i1 %478 to i32;
    i1 %480 = scmp neq i32 %479, i32 0;
    cbr i1 %480(prob = 0.5), ^if.then31, ^if.else13;
^b64:
    i32 %481 = load i32* %ans;
    store i32* %sum15 with i32 %481;
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %482 = load i32* %al15;
    store i32* %x with i32 %482;
    i32 %483 = load i32* %c15;
    store i32* %y with i32 %483;
    ubr ^while.header36;
^while.body24:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %484 = load i32* %al11;
    store i32* %x with i32 %484;
    i32 %485 = load i32* %c11;
    store i32* %y with i32 %485;
    ubr ^while.header37;
^while.body25:
    i32 %486 = load i32* %x;
    i32 %487 = srem i32 %486, i32 2;
    i1 %488 = scmp neq i32 %487, i32 0;
    cbr i1 %488(prob = 0.5), ^if.then32, ^if.else15;
^b65:
    i32 %489 = load i32* %ans;
    store i32* %sum14 with i32 %489;
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %490 = load i32* %al14;
    store i32* %x with i32 %490;
    i32 %491 = load i32* %c14;
    store i32* %y with i32 %491;
    ubr ^while.header38;
^if.then26:
    store i32* %ans with i32 65535;
    ubr ^b73;
^b66:
    i32 %492 = load i32* %ans;
    store i32* %sum13 with i32 %492;
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %493 = load i32* %al13;
    store i32* %x with i32 %493;
    i32 %494 = load i32* %c13;
    store i32* %y with i32 %494;
    ubr ^while.header39;
^b67:
    i32 %495 = load i32* %al11;
    store i32* %ans with i32 %495;
    i32 %496 = load i32* %ans;
    store i32* %mres5 with i32 %496;
    ubr ^b45;
^while.body26:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %497 = load i32* %al10;
    store i32* %x with i32 %497;
    i32 %498 = load i32* %c10;
    store i32* %y with i32 %498;
    ubr ^while.header40;
^while.body27:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %499 = load i32* %al9;
    store i32* %x with i32 %499;
    i32 %500 = load i32* %c9;
    store i32* %y with i32 %500;
    ubr ^while.header41;
^if.then27:
    i32 %501 = load i32* %ans;
    i32 %502 = load i32* %i;
    i64 %503 = sext i32 %502 to i64;
    i32* %504 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %503];
    i32 %505 = load i32* %504;
    i32 %506 = mul i32 1, i32 %505;
    i32 %507 = add i32 %501, i32 %506;
    store i32* %ans with i32 %507;
    ubr ^b70;
^while.body28:
    i32 %508 = load i32* %x;
    i32 %509 = srem i32 %508, i32 2;
    i1 %510 = scmp neq i32 %509, i32 0;
    cbr i1 %510(prob = 0.5), ^if.then33, ^if.else16;
^if.else10:
    store i32* %ans with i32 0;
    ubr ^b73;
^while.body29:
    i32 %511 = load i32* %x;
    i32 %512 = srem i32 %511, i32 2;
    i1 %513 = scmp neq i32 %512, i32 0;
    cbr i1 %513(prob = 0.5), ^if.then35, ^if.else18;
^b68:
    i32 %514 = load i32* %ans;
    store i32* %sum12 with i32 %514;
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %515 = load i32* %al12;
    store i32* %x with i32 %515;
    i32 %516 = load i32* %c12;
    store i32* %y with i32 %516;
    ubr ^while.header42;
^if.then28:
    store i32* %ans with i32 65535;
    ubr ^b74;
^b69:
    i32 %517 = load i32* %al9;
    store i32* %ans with i32 %517;
    i32 %518 = load i32* %ans;
    store i32* %mres4 with i32 %518;
    ubr ^b49;
^while.body30:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %519 = load i32* %al8;
    store i32* %x with i32 %519;
    i32 %520 = load i32* %c8;
    store i32* %y with i32 %520;
    ubr ^while.header43;
^while.header32:
    i32 %521 = load i32* %i;
    i1 %522 = scmp lt i32 %521, i32 16;
    i32 %523 = zext i1 %522 to i32;
    i1 %524 = scmp neq i32 %523, i32 0;
    cbr i1 %524(prob = 0.97), ^while.body33, ^b77;
^b70:
    i32 %525 = load i32* %x;
    i32 %526 = sdiv i32 %525, i32 2;
    store i32* %x with i32 %526;
    i32 %527 = load i32* %y;
    i32 %528 = sdiv i32 %527, i32 2;
    store i32* %y with i32 %528;
    i32 %529 = load i32* %i;
    i32 %530 = add i32 %529, i32 1;
    store i32* %i with i32 %530;
    ubr ^while.header20;
^if.else11:
    i32 %531 = load i32* %x;
    store i32* %ans with i32 %531;
    ubr ^b76;
^while.body31:
    i32 %532 = load i32* %x;
    i32 %533 = srem i32 %532, i32 2;
    i1 %534 = scmp neq i32 %533, i32 0;
    cbr i1 %534(prob = 0.5), ^if.then37, ^if.else20;
^if.else12:
    store i32* %ans with i32 0;
    ubr ^b74;
^while.header33:
    i32 %535 = load i32* %i;
    i1 %536 = scmp lt i32 %535, i32 16;
    i32 %537 = zext i1 %536 to i32;
    i1 %538 = scmp neq i32 %537, i32 0;
    cbr i1 %538(prob = 0.97), ^while.body35, ^b79;
^while.header34:
    i32 %539 = load i32* %mr1;
    i1 %540 = scmp neq i32 %539, i32 0;
    cbr i1 %540(prob = 0.97), ^while.body32, ^b75;
^if.then29:
    i32 %541 = load i32* %x;
    i1 %542 = scmp gt i32 %541, i32 32767;
    i32 %543 = zext i1 %542 to i32;
    i1 %544 = scmp neq i32 %543, i32 0;
    cbr i1 %544(prob = 0.5), ^if.then34, ^if.else17;
^if.else13:
    i32 %545 = load i32* %x;
    store i32* %ans with i32 %545;
    ubr ^b78;
^b71:
    i32 %546 = load i32* %al10;
    store i32* %ans with i32 %546;
    i32 %547 = load i32* %ans;
    store i32* %ml5 with i32 %547;
    i32 %548 = load i32* %mr5;
    store i32* %x with i32 %548;
    store i32* %y with i32 1;
    i32 %549 = load i32* %y;
    i1 %550 = scmp ge i32 %549, i32 15;
    i32 %551 = zext i1 %550 to i32;
    i1 %552 = scmp neq i32 %551, i32 0;
    cbr i1 %552(prob = 0.5), ^if.then39, ^if.else23;
^if.then30:
    i32 %553 = load i32* %x;
    i1 %554 = scmp lt i32 %553, i32 0;
    i32 %555 = zext i1 %554 to i32;
    i1 %556 = scmp neq i32 %555, i32 0;
    cbr i1 %556(prob = 0.5), ^if.then36, ^if.else19;
^while.header35:
    i32 %557 = load i32* %mr;
    i1 %558 = scmp neq i32 %557, i32 0;
    cbr i1 %558(prob = 0.97), ^while.body34, ^b80;
^if.then31:
    i32 %559 = load i32* %x;
    i1 %560 = scmp gt i32 %559, i32 32767;
    i32 %561 = zext i1 %560 to i32;
    i1 %562 = scmp neq i32 %561, i32 0;
    cbr i1 %562(prob = 0.5), ^if.then38, ^if.else21;
^b72:
    i32 %563 = load i32* %al8;
    store i32* %ans with i32 %563;
    i32 %564 = load i32* %ans;
    store i32* %ml4 with i32 %564;
    i32 %565 = load i32* %mr4;
    store i32* %x with i32 %565;
    store i32* %y with i32 1;
    i32 %566 = load i32* %y;
    i1 %567 = scmp ge i32 %566, i32 15;
    i32 %568 = zext i1 %567 to i32;
    i1 %569 = scmp neq i32 %568, i32 0;
    cbr i1 %569(prob = 0.5), ^if.then40, ^if.else24;
^if.else14:
    i32 %570 = load i32* %y;
    i1 %571 = scmp gt i32 %570, i32 0;
    i32 %572 = zext i1 %571 to i32;
    i1 %573 = scmp neq i32 %572, i32 0;
    cbr i1 %573(prob = 0.5), ^if.then41, ^if.else22;
^if.then32:
    i32 %574 = load i32* %y;
    i32 %575 = srem i32 %574, i32 2;
    i1 %576 = scmp eq i32 %575, i32 0;
    i32 %577 = zext i1 %576 to i32;
    i1 %578 = scmp neq i32 %577, i32 0;
    cbr i1 %578(prob = 0.5), ^if.then42, ^b81;
^b73:
    ubr ^b85;
^while.body32:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %579 = load i32* %mr1;
    store i32* %x with i32 %579;
    store i32* %y with i32 1;
    ubr ^while.header44;
^if.else15:
    i32 %580 = load i32* %y;
    i32 %581 = srem i32 %580, i32 2;
    i1 %582 = scmp neq i32 %581, i32 0;
    cbr i1 %582(prob = 0.5), ^if.then43, ^b83;
^while.header36:
    i32 %583 = load i32* %i;
    i1 %584 = scmp lt i32 %583, i32 16;
    i32 %585 = zext i1 %584 to i32;
    i1 %586 = scmp neq i32 %585, i32 0;
    cbr i1 %586(prob = 0.97), ^while.body36, ^b98;
^if.then33:
    i32 %587 = load i32* %y;
    i32 %588 = srem i32 %587, i32 2;
    i1 %589 = scmp eq i32 %588, i32 0;
    i32 %590 = zext i1 %589 to i32;
    i1 %591 = scmp neq i32 %590, i32 0;
    cbr i1 %591(prob = 0.5), ^if.then44, ^b84;
^if.then34:
    i32 %592 = load i32* %x;
    i32 %593 = load i32* %y;
    i64 %594 = sext i32 %593 to i64;
    i32* %595 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %594];
    i32 %596 = load i32* %595;
    i32 %597 = sdiv i32 %592, i32 %596;
    store i32* %x with i32 %597;
    i32 %598 = load i32* %x;
    i32 %599 = add i32 %598, i32 65536;
    i32 %600 = load i32* %y;
    i32 %601 = sub i32 15, i32 %600;
    i32 %602 = add i32 %601, i32 1;
    i64 %603 = sext i32 %602 to i64;
    i32* %604 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %603];
    i32 %605 = load i32* %604;
    i32 %606 = sub i32 %599, i32 %605;
    store i32* %ans with i32 %606;
    ubr ^b90;
^if.then35:
    i32 %607 = load i32* %y;
    i32 %608 = srem i32 %607, i32 2;
    i1 %609 = scmp eq i32 %608, i32 0;
    i32 %610 = zext i1 %609 to i32;
    i1 %611 = scmp neq i32 %610, i32 0;
    cbr i1 %611(prob = 0.5), ^if.then45, ^b86;
^b74:
    ubr ^b93;
^while.header37:
    i32 %612 = load i32* %i;
    i1 %613 = scmp lt i32 %612, i32 16;
    i32 %614 = zext i1 %613 to i32;
    i1 %615 = scmp neq i32 %614, i32 0;
    cbr i1 %615(prob = 0.97), ^while.body37, ^b87;
^while.body33:
    i32 %616 = load i32* %x;
    i32 %617 = srem i32 %616, i32 2;
    i1 %618 = scmp neq i32 %617, i32 0;
    cbr i1 %618(prob = 0.5), ^b82, ^b102;
^if.then36:
    store i32* %ans with i32 65535;
    ubr ^b97;
^b75:
    i32 %619 = load i32* %mres1;
    store i32* %ans with i32 %619;
    i32 %620 = load i32* %ans;
    store i32* %pres with i32 %620;
    ubr ^b61;
^while.body34:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %621 = load i32* %mr;
    store i32* %x with i32 %621;
    store i32* %y with i32 1;
    ubr ^while.header45;
^if.else16:
    i32 %622 = load i32* %y;
    i32 %623 = srem i32 %622, i32 2;
    i1 %624 = scmp neq i32 %623, i32 0;
    cbr i1 %624(prob = 0.5), ^if.then46, ^b89;
^while.header38:
    i32 %625 = load i32* %i;
    i1 %626 = scmp lt i32 %625, i32 16;
    i32 %627 = zext i1 %626 to i32;
    i1 %628 = scmp neq i32 %627, i32 0;
    cbr i1 %628(prob = 0.97), ^while.body38, ^b104;
^b76:
    ubr ^b85;
^if.else17:
    i32 %629 = load i32* %x;
    i32 %630 = load i32* %y;
    i64 %631 = sext i32 %630 to i64;
    i32* %632 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %631];
    i32 %633 = load i32* %632;
    i32 %634 = sdiv i32 %629, i32 %633;
    store i32* %ans with i32 %634;
    ubr ^b90;
^if.else18:
    i32 %635 = load i32* %y;
    i32 %636 = srem i32 %635, i32 2;
    i1 %637 = scmp neq i32 %636, i32 0;
    cbr i1 %637(prob = 0.5), ^if.then47, ^b91;
^while.header39:
    i32 %638 = load i32* %i;
    i1 %639 = scmp lt i32 %638, i32 16;
    i32 %640 = zext i1 %639 to i32;
    i1 %641 = scmp neq i32 %640, i32 0;
    cbr i1 %641(prob = 0.97), ^while.body39, ^b105;
^if.then37:
    i32 %642 = load i32* %y;
    i32 %643 = srem i32 %642, i32 2;
    i1 %644 = scmp eq i32 %643, i32 0;
    i32 %645 = zext i1 %644 to i32;
    i1 %646 = scmp neq i32 %645, i32 0;
    cbr i1 %646(prob = 0.5), ^if.then48, ^b92;
^if.then38:
    i32 %647 = load i32* %x;
    i32 %648 = load i32* %y;
    i64 %649 = sext i32 %648 to i64;
    i32* %650 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %649];
    i32 %651 = load i32* %650;
    i32 %652 = sdiv i32 %647, i32 %651;
    store i32* %x with i32 %652;
    i32 %653 = load i32* %x;
    i32 %654 = add i32 %653, i32 65536;
    i32 %655 = load i32* %y;
    i32 %656 = sub i32 15, i32 %655;
    i32 %657 = add i32 %656, i32 1;
    i64 %658 = sext i32 %657 to i64;
    i32* %659 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %658];
    i32 %660 = load i32* %659;
    i32 %661 = sub i32 %654, i32 %660;
    store i32* %ans with i32 %661;
    ubr ^b100;
^while.header40:
    i32 %662 = load i32* %i;
    i1 %663 = scmp lt i32 %662, i32 16;
    i32 %664 = zext i1 %663 to i32;
    i1 %665 = scmp neq i32 %664, i32 0;
    cbr i1 %665(prob = 0.97), ^while.body40, ^b94;
^while.header41:
    i32 %666 = load i32* %i;
    i1 %667 = scmp lt i32 %666, i32 16;
    i32 %668 = zext i1 %667 to i32;
    i1 %669 = scmp neq i32 %668, i32 0;
    cbr i1 %669(prob = 0.97), ^while.body41, ^b95;
^b77:
    i32 %670 = load i32* %ans;
    i1 %671 = scmp neq i32 %670, i32 0;
    cbr i1 %671(prob = 0.5), ^if.then49, ^b96;
^while.body35:
    i32 %672 = load i32* %x;
    i32 %673 = srem i32 %672, i32 2;
    i1 %674 = scmp neq i32 %673, i32 0;
    cbr i1 %674(prob = 0.5), ^b88, ^b106;
^if.else19:
    store i32* %ans with i32 0;
    ubr ^b97;
^if.else20:
    i32 %675 = load i32* %y;
    i32 %676 = srem i32 %675, i32 2;
    i1 %677 = scmp neq i32 %676, i32 0;
    cbr i1 %677(prob = 0.5), ^if.then50, ^b99;
^while.header42:
    i32 %678 = load i32* %i;
    i1 %679 = scmp lt i32 %678, i32 16;
    i32 %680 = zext i1 %679 to i32;
    i1 %681 = scmp neq i32 %680, i32 0;
    cbr i1 %681(prob = 0.97), ^while.body42, ^b108;
^b78:
    ubr ^b93;
^if.else21:
    i32 %682 = load i32* %x;
    i32 %683 = load i32* %y;
    i64 %684 = sext i32 %683 to i64;
    i32* %685 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %684];
    i32 %686 = load i32* %685;
    i32 %687 = sdiv i32 %682, i32 %686;
    store i32* %ans with i32 %687;
    ubr ^b100;
^if.then39:
    i32 %688 = load i32* %x;
    i1 %689 = scmp lt i32 %688, i32 0;
    i32 %690 = zext i1 %689 to i32;
    i1 %691 = scmp neq i32 %690, i32 0;
    cbr i1 %691(prob = 0.5), ^if.then51, ^if.else25;
^while.header43:
    i32 %692 = load i32* %i;
    i1 %693 = scmp lt i32 %692, i32 16;
    i32 %694 = zext i1 %693 to i32;
    i1 %695 = scmp neq i32 %694, i32 0;
    cbr i1 %695(prob = 0.97), ^while.body43, ^b101;
^b79:
    i32 %696 = load i32* %ans;
    i1 %697 = scmp neq i32 %696, i32 0;
    cbr i1 %697(prob = 0.5), ^if.then52, ^b103;
^if.else22:
    i32 %698 = load i32* %x;
    store i32* %ans with i32 %698;
    ubr ^b107;
^if.else23:
    i32 %699 = load i32* %y;
    i1 %700 = scmp gt i32 %699, i32 0;
    i32 %701 = zext i1 %700 to i32;
    i1 %702 = scmp neq i32 %701, i32 0;
    cbr i1 %702(prob = 0.5), ^if.then55, ^if.else26;
^if.then40:
    i32 %703 = load i32* %x;
    i1 %704 = scmp lt i32 %703, i32 0;
    i32 %705 = zext i1 %704 to i32;
    i1 %706 = scmp neq i32 %705, i32 0;
    cbr i1 %706(prob = 0.5), ^if.then53, ^if.else27;
^if.then41:
    i32 %707 = load i32* %x;
    i1 %708 = scmp gt i32 %707, i32 32767;
    i32 %709 = zext i1 %708 to i32;
    i1 %710 = scmp neq i32 %709, i32 0;
    cbr i1 %710(prob = 0.5), ^if.then54, ^if.else28;
^b80:
    i32 %711 = load i32* %mres;
    store i32* %ans with i32 %711;
    i32 %712 = load i32* %ans;
    store i32* %pl with i32 %712;
    i32 %713 = load i32* %pr;
    store i32* %x with i32 %713;
    store i32* %y with i32 1;
    i32 %714 = load i32* %y;
    i1 %715 = scmp ge i32 %714, i32 15;
    i32 %716 = zext i1 %715 to i32;
    i1 %717 = scmp neq i32 %716, i32 0;
    cbr i1 %717(prob = 0.5), ^if.then56, ^if.else30;
^if.else24:
    i32 %718 = load i32* %y;
    i1 %719 = scmp gt i32 %718, i32 0;
    i32 %720 = zext i1 %719 to i32;
    i1 %721 = scmp neq i32 %720, i32 0;
    cbr i1 %721(prob = 0.5), ^if.then57, ^if.else29;
^if.then42:
    i32 %722 = load i32* %ans;
    i32 %723 = load i32* %i;
    i64 %724 = sext i32 %723 to i64;
    i32* %725 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %724];
    i32 %726 = load i32* %725;
    i32 %727 = mul i32 1, i32 %726;
    i32 %728 = add i32 %722, i32 %727;
    store i32* %ans with i32 %728;
    ubr ^b81;
^b81:
    ubr ^b109;
^if.then43:
    i32 %729 = load i32* %ans;
    i32 %730 = load i32* %i;
    i64 %731 = sext i32 %730 to i64;
    i32* %732 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %731];
    i32 %733 = load i32* %732;
    i32 %734 = mul i32 1, i32 %733;
    i32 %735 = add i32 %729, i32 %734;
    store i32* %ans with i32 %735;
    ubr ^b83;
^if.then44:
    i32 %736 = load i32* %ans;
    i32 %737 = load i32* %i;
    i64 %738 = sext i32 %737 to i64;
    i32* %739 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %738];
    i32 %740 = load i32* %739;
    i32 %741 = mul i32 1, i32 %740;
    i32 %742 = add i32 %736, i32 %741;
    store i32* %ans with i32 %742;
    ubr ^b84;
^if.then45:
    i32 %743 = load i32* %ans;
    i32 %744 = load i32* %i;
    i64 %745 = sext i32 %744 to i64;
    i32* %746 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %745];
    i32 %747 = load i32* %746;
    i32 %748 = mul i32 1, i32 %747;
    i32 %749 = add i32 %743, i32 %748;
    store i32* %ans with i32 %749;
    ubr ^b86;
^b82:
    i32 %750 = load i32* %y;
    i32 %751 = srem i32 %750, i32 2;
    i1 %752 = scmp neq i32 %751, i32 0;
    ubr ^b102;
^b83:
    ubr ^b109;
^b84:
    ubr ^b111;
^if.then46:
    i32 %753 = load i32* %ans;
    i32 %754 = load i32* %i;
    i64 %755 = sext i32 %754 to i64;
    i32* %756 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %755];
    i32 %757 = load i32* %756;
    i32 %758 = mul i32 1, i32 %757;
    i32 %759 = add i32 %753, i32 %758;
    store i32* %ans with i32 %759;
    ubr ^b89;
^b85:
    i32 %760 = load i32* %ans;
    store i32* %mr7 with i32 %760;
    ubr ^while.header5;
^b86:
    ubr ^b113;
^if.then47:
    i32 %761 = load i32* %ans;
    i32 %762 = load i32* %i;
    i64 %763 = sext i32 %762 to i64;
    i32* %764 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %763];
    i32 %765 = load i32* %764;
    i32 %766 = mul i32 1, i32 %765;
    i32 %767 = add i32 %761, i32 %766;
    store i32* %ans with i32 %767;
    ubr ^b91;
^if.then48:
    i32 %768 = load i32* %ans;
    i32 %769 = load i32* %i;
    i64 %770 = sext i32 %769 to i64;
    i32* %771 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %770];
    i32 %772 = load i32* %771;
    i32 %773 = mul i32 1, i32 %772;
    i32 %774 = add i32 %768, i32 %773;
    store i32* %ans with i32 %774;
    ubr ^b92;
^b87:
    i32 %775 = load i32* %ans;
    store i32* %sum11 with i32 %775;
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %776 = load i32* %al11;
    store i32* %x with i32 %776;
    i32 %777 = load i32* %c11;
    store i32* %y with i32 %777;
    ubr ^while.header46;
^if.then49:
    i32 %778 = load i32* %mres3;
    store i32* %al7 with i32 %778;
    i32 %779 = load i32* %ml3;
    store i32* %c7 with i32 %779;
    store i32* %sum7 with i32 0;
    ubr ^while.header47;
^b88:
    i32 %780 = load i32* %y;
    i32 %781 = srem i32 %780, i32 2;
    i1 %782 = scmp neq i32 %781, i32 0;
    ubr ^b106;
^while.body36:
    i32 %783 = load i32* %x;
    i32 %784 = srem i32 %783, i32 2;
    i1 %785 = scmp neq i32 %784, i32 0;
    cbr i1 %785(prob = 0.5), ^b110, ^b120;
^b89:
    ubr ^b111;
^b90:
    ubr ^b76;
^b91:
    ubr ^b113;
^b92:
    ubr ^b115;
^if.then50:
    i32 %786 = load i32* %ans;
    i32 %787 = load i32* %i;
    i64 %788 = sext i32 %787 to i64;
    i32* %789 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %788];
    i32 %790 = load i32* %789;
    i32 %791 = mul i32 1, i32 %790;
    i32 %792 = add i32 %786, i32 %791;
    store i32* %ans with i32 %792;
    ubr ^b99;
^b93:
    i32 %793 = load i32* %ans;
    store i32* %mr6 with i32 %793;
    ubr ^while.header6;
^while.body37:
    i32 %794 = load i32* %x;
    i32 %795 = srem i32 %794, i32 2;
    i1 %796 = scmp neq i32 %795, i32 0;
    cbr i1 %796(prob = 0.5), ^if.then62, ^if.else34;
^b94:
    i32 %797 = load i32* %ans;
    store i32* %sum10 with i32 %797;
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %798 = load i32* %al10;
    store i32* %x with i32 %798;
    i32 %799 = load i32* %c10;
    store i32* %y with i32 %799;
    ubr ^while.header48;
^if.then51:
    store i32* %ans with i32 65535;
    ubr ^b117;
^b95:
    i32 %800 = load i32* %ans;
    store i32* %sum9 with i32 %800;
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %801 = load i32* %al9;
    store i32* %x with i32 %801;
    i32 %802 = load i32* %c9;
    store i32* %y with i32 %802;
    ubr ^while.header49;
^b96:
    i32 %803 = load i32* %ml3;
    store i32* %al6 with i32 %803;
    i32 %804 = load i32* %ml3;
    store i32* %c6 with i32 %804;
    store i32* %sum6 with i32 0;
    ubr ^while.header50;
^if.then52:
    i32 %805 = load i32* %mres2;
    store i32* %al5 with i32 %805;
    i32 %806 = load i32* %ml2;
    store i32* %c5 with i32 %806;
    store i32* %sum5 with i32 0;
    ubr ^while.header51;
^b97:
    ubr ^b119;
^b98:
    i32 %807 = load i32* %ans;
    store i32* %c15 with i32 %807;
    i1 %808 = scmp gt i32 1, i32 15;
    i32 %809 = zext i1 %808 to i32;
    i1 %810 = scmp neq i32 %809, i32 0;
    cbr i1 %810(prob = 0.5), ^if.then58, ^if.else31;
^while.body38:
    i32 %811 = load i32* %x;
    i32 %812 = srem i32 %811, i32 2;
    i1 %813 = scmp neq i32 %812, i32 0;
    cbr i1 %813(prob = 0.5), ^b112, ^b124;
^while.body39:
    i32 %814 = load i32* %x;
    i32 %815 = srem i32 %814, i32 2;
    i1 %816 = scmp neq i32 %815, i32 0;
    cbr i1 %816(prob = 0.5), ^b114, ^b125;
^b99:
    ubr ^b115;
^b100:
    ubr ^b78;
^while.body40:
    i32 %817 = load i32* %x;
    i32 %818 = srem i32 %817, i32 2;
    i1 %819 = scmp neq i32 %818, i32 0;
    cbr i1 %819(prob = 0.5), ^if.then65, ^if.else36;
^if.else25:
    store i32* %ans with i32 0;
    ubr ^b117;
^while.body41:
    i32 %820 = load i32* %x;
    i32 %821 = srem i32 %820, i32 2;
    i1 %822 = scmp neq i32 %821, i32 0;
    cbr i1 %822(prob = 0.5), ^if.then67, ^if.else38;
^b101:
    i32 %823 = load i32* %ans;
    store i32* %sum8 with i32 %823;
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %824 = load i32* %al8;
    store i32* %x with i32 %824;
    i32 %825 = load i32* %c8;
    store i32* %y with i32 %825;
    ubr ^while.header52;
^if.then53:
    store i32* %ans with i32 65535;
    ubr ^b121;
^b102:
    i1 %826 = phi [^b82, i1 %752] [^while.body33, i1 false];
    i32 %827 = zext i1 %826 to i32;
    i1 %828 = scmp neq i32 %827, i32 0;
    cbr i1 %828(prob = 0.5), ^if.then59, ^b118;
^b103:
    i32 %829 = load i32* %ml2;
    store i32* %al4 with i32 %829;
    i32 %830 = load i32* %ml2;
    store i32* %c4 with i32 %830;
    store i32* %sum4 with i32 0;
    ubr ^while.header53;
^if.then54:
    i32 %831 = load i32* %x;
    i32 %832 = load i32* %y;
    i64 %833 = sext i32 %832 to i64;
    i32* %834 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %833];
    i32 %835 = load i32* %834;
    i32 %836 = sdiv i32 %831, i32 %835;
    store i32* %x with i32 %836;
    i32 %837 = load i32* %x;
    i32 %838 = add i32 %837, i32 65536;
    i32 %839 = load i32* %y;
    i32 %840 = sub i32 15, i32 %839;
    i32 %841 = add i32 %840, i32 1;
    i64 %842 = sext i32 %841 to i64;
    i32* %843 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %842];
    i32 %844 = load i32* %843;
    i32 %845 = sub i32 %838, i32 %844;
    store i32* %ans with i32 %845;
    ubr ^b123;
^while.header44:
    i32 %846 = load i32* %i;
    i1 %847 = scmp lt i32 %846, i32 16;
    i32 %848 = zext i1 %847 to i32;
    i1 %849 = scmp neq i32 %848, i32 0;
    cbr i1 %849(prob = 0.97), ^while.body44, ^b127;
^b104:
    i32 %850 = load i32* %ans;
    store i32* %c14 with i32 %850;
    i1 %851 = scmp gt i32 1, i32 15;
    i32 %852 = zext i1 %851 to i32;
    i1 %853 = scmp neq i32 %852, i32 0;
    cbr i1 %853(prob = 0.5), ^if.then60, ^if.else32;
^b105:
    i32 %854 = load i32* %ans;
    store i32* %c13 with i32 %854;
    i1 %855 = scmp gt i32 1, i32 15;
    i32 %856 = zext i1 %855 to i32;
    i1 %857 = scmp neq i32 %856, i32 0;
    cbr i1 %857(prob = 0.5), ^if.then61, ^if.else33;
^while.body42:
    i32 %858 = load i32* %x;
    i32 %859 = srem i32 %858, i32 2;
    i1 %860 = scmp neq i32 %859, i32 0;
    cbr i1 %860(prob = 0.5), ^b116, ^b128;
^if.else26:
    i32 %861 = load i32* %x;
    store i32* %ans with i32 %861;
    ubr ^b126;
^while.body43:
    i32 %862 = load i32* %x;
    i32 %863 = srem i32 %862, i32 2;
    i1 %864 = scmp neq i32 %863, i32 0;
    cbr i1 %864(prob = 0.5), ^if.then69, ^if.else40;
^if.else27:
    store i32* %ans with i32 0;
    ubr ^b121;
^b106:
    i1 %865 = phi [^b88, i1 %782] [^while.body35, i1 false];
    i32 %866 = zext i1 %865 to i32;
    i1 %867 = scmp neq i32 %866, i32 0;
    cbr i1 %867(prob = 0.5), ^if.then63, ^b122;
^b107:
    ubr ^b119;
^if.else28:
    i32 %868 = load i32* %x;
    i32 %869 = load i32* %y;
    i64 %870 = sext i32 %869 to i64;
    i32* %871 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %870];
    i32 %872 = load i32* %871;
    i32 %873 = sdiv i32 %868, i32 %872;
    store i32* %ans with i32 %873;
    ubr ^b123;
^while.header45:
    i32 %874 = load i32* %i;
    i1 %875 = scmp lt i32 %874, i32 16;
    i32 %876 = zext i1 %875 to i32;
    i1 %877 = scmp neq i32 %876, i32 0;
    cbr i1 %877(prob = 0.97), ^while.body45, ^b130;
^b108:
    i32 %878 = load i32* %ans;
    store i32* %c12 with i32 %878;
    i1 %879 = scmp gt i32 1, i32 15;
    i32 %880 = zext i1 %879 to i32;
    i1 %881 = scmp neq i32 %880, i32 0;
    cbr i1 %881(prob = 0.5), ^if.then64, ^if.else35;
^if.then55:
    i32 %882 = load i32* %x;
    i1 %883 = scmp gt i32 %882, i32 32767;
    i32 %884 = zext i1 %883 to i32;
    i1 %885 = scmp neq i32 %884, i32 0;
    cbr i1 %885(prob = 0.5), ^if.then66, ^if.else37;
^if.else29:
    i32 %886 = load i32* %x;
    store i32* %ans with i32 %886;
    ubr ^b129;
^if.then56:
    i32 %887 = load i32* %x;
    i1 %888 = scmp lt i32 %887, i32 0;
    i32 %889 = zext i1 %888 to i32;
    i1 %890 = scmp neq i32 %889, i32 0;
    cbr i1 %890(prob = 0.5), ^if.then68, ^if.else39;
^if.then57:
    i32 %891 = load i32* %x;
    i1 %892 = scmp gt i32 %891, i32 32767;
    i32 %893 = zext i1 %892 to i32;
    i1 %894 = scmp neq i32 %893, i32 0;
    cbr i1 %894(prob = 0.5), ^if.then70, ^if.else41;
^if.else30:
    i32 %895 = load i32* %y;
    i1 %896 = scmp gt i32 %895, i32 0;
    i32 %897 = zext i1 %896 to i32;
    i1 %898 = scmp neq i32 %897, i32 0;
    cbr i1 %898(prob = 0.5), ^if.then71, ^if.else42;
^b109:
    i32 %899 = load i32* %x;
    i32 %900 = sdiv i32 %899, i32 2;
    store i32* %x with i32 %900;
    i32 %901 = load i32* %y;
    i32 %902 = sdiv i32 %901, i32 2;
    store i32* %y with i32 %902;
    i32 %903 = load i32* %i;
    i32 %904 = add i32 %903, i32 1;
    store i32* %i with i32 %904;
    ubr ^while.header24;
^b110:
    i32 %905 = load i32* %y;
    i32 %906 = srem i32 %905, i32 2;
    i1 %907 = scmp neq i32 %906, i32 0;
    ubr ^b120;
^if.then58:
    store i32* %ans with i32 0;
    ubr ^b131;
^b111:
    i32 %908 = load i32* %x;
    i32 %909 = sdiv i32 %908, i32 2;
    store i32* %x with i32 %909;
    i32 %910 = load i32* %y;
    i32 %911 = sdiv i32 %910, i32 2;
    store i32* %y with i32 %911;
    i32 %912 = load i32* %i;
    i32 %913 = add i32 %912, i32 1;
    store i32* %i with i32 %913;
    ubr ^while.header25;
^b112:
    i32 %914 = load i32* %y;
    i32 %915 = srem i32 %914, i32 2;
    i1 %916 = scmp neq i32 %915, i32 0;
    ubr ^b124;
^b113:
    i32 %917 = load i32* %x;
    i32 %918 = sdiv i32 %917, i32 2;
    store i32* %x with i32 %918;
    i32 %919 = load i32* %y;
    i32 %920 = sdiv i32 %919, i32 2;
    store i32* %y with i32 %920;
    i32 %921 = load i32* %i;
    i32 %922 = add i32 %921, i32 1;
    store i32* %i with i32 %922;
    ubr ^while.header26;
^b114:
    i32 %923 = load i32* %y;
    i32 %924 = srem i32 %923, i32 2;
    i1 %925 = scmp neq i32 %924, i32 0;
    ubr ^b125;
^if.then59:
    i32 %926 = load i32* %ans;
    i32 %927 = load i32* %i;
    i64 %928 = sext i32 %927 to i64;
    i32* %929 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %928];
    i32 %930 = load i32* %929;
    i32 %931 = mul i32 1, i32 %930;
    i32 %932 = add i32 %926, i32 %931;
    store i32* %ans with i32 %932;
    ubr ^b118;
^if.else31:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %933 = load i32* %c15;
    i32* %934 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 1];
    i32 %935 = load i32* %934;
    i32 %936 = mul i32 %933, i32 %935;
    store i32* %x with i32 %936;
    store i32* %y with i32 65535;
    ubr ^while.header54;
^if.then60:
    store i32* %ans with i32 0;
    ubr ^b135;
^if.then61:
    store i32* %ans with i32 0;
    ubr ^b136;
^b115:
    i32 %937 = load i32* %x;
    i32 %938 = sdiv i32 %937, i32 2;
    store i32* %x with i32 %938;
    i32 %939 = load i32* %y;
    i32 %940 = sdiv i32 %939, i32 2;
    store i32* %y with i32 %940;
    i32 %941 = load i32* %i;
    i32 %942 = add i32 %941, i32 1;
    store i32* %i with i32 %942;
    ubr ^while.header28;
^b116:
    i32 %943 = load i32* %y;
    i32 %944 = srem i32 %943, i32 2;
    i1 %945 = scmp neq i32 %944, i32 0;
    ubr ^b128;
^if.then62:
    i32 %946 = load i32* %y;
    i32 %947 = srem i32 %946, i32 2;
    i1 %948 = scmp eq i32 %947, i32 0;
    i32 %949 = zext i1 %948 to i32;
    i1 %950 = scmp neq i32 %949, i32 0;
    cbr i1 %950(prob = 0.5), ^if.then72, ^b132;
^b117:
    ubr ^b139;
^b118:
    i32 %951 = load i32* %x;
    i32 %952 = sdiv i32 %951, i32 2;
    store i32* %x with i32 %952;
    i32 %953 = load i32* %y;
    i32 %954 = sdiv i32 %953, i32 2;
    store i32* %y with i32 %954;
    i32 %955 = load i32* %i;
    i32 %956 = add i32 %955, i32 1;
    store i32* %i with i32 %956;
    ubr ^while.header32;
^if.then63:
    i32 %957 = load i32* %ans;
    i32 %958 = load i32* %i;
    i64 %959 = sext i32 %958 to i64;
    i32* %960 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %959];
    i32 %961 = load i32* %960;
    i32 %962 = mul i32 1, i32 %961;
    i32 %963 = add i32 %957, i32 %962;
    store i32* %ans with i32 %963;
    ubr ^b122;
^b119:
    i32 %964 = load i32* %ans;
    store i32* %pr1 with i32 %964;
    ubr ^while.header7;
^b120:
    i1 %965 = phi [^b110, i1 %907] [^while.body36, i1 false];
    i32 %966 = zext i1 %965 to i32;
    i1 %967 = scmp neq i32 %966, i32 0;
    cbr i1 %967(prob = 0.5), ^if.then73, ^b134;
^if.else32:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %968 = load i32* %c14;
    i32* %969 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 1];
    i32 %970 = load i32* %969;
    i32 %971 = mul i32 %968, i32 %970;
    store i32* %x with i32 %971;
    store i32* %y with i32 65535;
    ubr ^while.header55;
^if.else33:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %972 = load i32* %c13;
    i32* %973 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 1];
    i32 %974 = load i32* %973;
    i32 %975 = mul i32 %972, i32 %974;
    store i32* %x with i32 %975;
    store i32* %y with i32 65535;
    ubr ^while.header56;
^if.then64:
    store i32* %ans with i32 0;
    ubr ^b145;
^if.else34:
    i32 %976 = load i32* %y;
    i32 %977 = srem i32 %976, i32 2;
    i1 %978 = scmp neq i32 %977, i32 0;
    cbr i1 %978(prob = 0.5), ^if.then74, ^b137;
^while.header46:
    i32 %979 = load i32* %i;
    i1 %980 = scmp lt i32 %979, i32 16;
    i32 %981 = zext i1 %980 to i32;
    i1 %982 = scmp neq i32 %981, i32 0;
    cbr i1 %982(prob = 0.97), ^while.body49, ^b155;
^if.then65:
    i32 %983 = load i32* %y;
    i32 %984 = srem i32 %983, i32 2;
    i1 %985 = scmp eq i32 %984, i32 0;
    i32 %986 = zext i1 %985 to i32;
    i1 %987 = scmp neq i32 %986, i32 0;
    cbr i1 %987(prob = 0.5), ^if.then75, ^b138;
^if.then66:
    i32 %988 = load i32* %x;
    i32 %989 = load i32* %y;
    i64 %990 = sext i32 %989 to i64;
    i32* %991 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %990];
    i32 %992 = load i32* %991;
    i32 %993 = sdiv i32 %988, i32 %992;
    store i32* %x with i32 %993;
    i32 %994 = load i32* %x;
    i32 %995 = add i32 %994, i32 65536;
    i32 %996 = load i32* %y;
    i32 %997 = sub i32 15, i32 %996;
    i32 %998 = add i32 %997, i32 1;
    i64 %999 = sext i32 %998 to i64;
    i32* %1000 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %999];
    i32 %1001 = load i32* %1000;
    i32 %1002 = sub i32 %995, i32 %1001;
    store i32* %ans with i32 %1002;
    ubr ^b147;
^if.then67:
    i32 %1003 = load i32* %y;
    i32 %1004 = srem i32 %1003, i32 2;
    i1 %1005 = scmp eq i32 %1004, i32 0;
    i32 %1006 = zext i1 %1005 to i32;
    i1 %1007 = scmp neq i32 %1006, i32 0;
    cbr i1 %1007(prob = 0.5), ^if.then76, ^b140;
^b121:
    ubr ^b150;
^while.header47:
    i32 %1008 = load i32* %c7;
    i1 %1009 = scmp neq i32 %1008, i32 0;
    cbr i1 %1009(prob = 0.97), ^while.body46, ^b141;
^b122:
    i32 %1010 = load i32* %x;
    i32 %1011 = sdiv i32 %1010, i32 2;
    store i32* %x with i32 %1011;
    i32 %1012 = load i32* %y;
    i32 %1013 = sdiv i32 %1012, i32 2;
    store i32* %y with i32 %1013;
    i32 %1014 = load i32* %i;
    i32 %1015 = add i32 %1014, i32 1;
    store i32* %i with i32 %1015;
    ubr ^while.header33;
^b123:
    ubr ^b107;
^while.body44:
    i32 %1016 = load i32* %x;
    i32 %1017 = srem i32 %1016, i32 2;
    i1 %1018 = scmp neq i32 %1017, i32 0;
    cbr i1 %1018(prob = 0.5), ^b133, ^b158;
^if.then68:
    store i32* %ans with i32 65535;
    ubr ^b153;
^b124:
    i1 %1019 = phi [^b112, i1 %916] [^while.body38, i1 false];
    i32 %1020 = zext i1 %1019 to i32;
    i1 %1021 = scmp neq i32 %1020, i32 0;
    cbr i1 %1021(prob = 0.5), ^if.then77, ^b143;
^b125:
    i1 %1022 = phi [^b114, i1 %925] [^while.body39, i1 false];
    i32 %1023 = zext i1 %1022 to i32;
    i1 %1024 = scmp neq i32 %1023, i32 0;
    cbr i1 %1024(prob = 0.5), ^if.then78, ^b144;
^if.else35:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %1025 = load i32* %c12;
    i32* %1026 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 1];
    i32 %1027 = load i32* %1026;
    i32 %1028 = mul i32 %1025, i32 %1027;
    store i32* %x with i32 %1028;
    store i32* %y with i32 65535;
    ubr ^while.header57;
^if.else36:
    i32 %1029 = load i32* %y;
    i32 %1030 = srem i32 %1029, i32 2;
    i1 %1031 = scmp neq i32 %1030, i32 0;
    cbr i1 %1031(prob = 0.5), ^if.then79, ^b146;
^while.header48:
    i32 %1032 = load i32* %i;
    i1 %1033 = scmp lt i32 %1032, i32 16;
    i32 %1034 = zext i1 %1033 to i32;
    i1 %1035 = scmp neq i32 %1034, i32 0;
    cbr i1 %1035(prob = 0.97), ^while.body51, ^b160;
^b126:
    ubr ^b139;
^if.else37:
    i32 %1036 = load i32* %x;
    i32 %1037 = load i32* %y;
    i64 %1038 = sext i32 %1037 to i64;
    i32* %1039 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1038];
    i32 %1040 = load i32* %1039;
    i32 %1041 = sdiv i32 %1036, i32 %1040;
    store i32* %ans with i32 %1041;
    ubr ^b147;
^if.else38:
    i32 %1042 = load i32* %y;
    i32 %1043 = srem i32 %1042, i32 2;
    i1 %1044 = scmp neq i32 %1043, i32 0;
    cbr i1 %1044(prob = 0.5), ^if.then80, ^b148;
^while.header49:
    i32 %1045 = load i32* %i;
    i1 %1046 = scmp lt i32 %1045, i32 16;
    i32 %1047 = zext i1 %1046 to i32;
    i1 %1048 = scmp neq i32 %1047, i32 0;
    cbr i1 %1048(prob = 0.97), ^while.body52, ^b161;
^if.then69:
    i32 %1049 = load i32* %y;
    i32 %1050 = srem i32 %1049, i32 2;
    i1 %1051 = scmp eq i32 %1050, i32 0;
    i32 %1052 = zext i1 %1051 to i32;
    i1 %1053 = scmp neq i32 %1052, i32 0;
    cbr i1 %1053(prob = 0.5), ^if.then81, ^b149;
^if.then70:
    i32 %1054 = load i32* %x;
    i32 %1055 = load i32* %y;
    i64 %1056 = sext i32 %1055 to i64;
    i32* %1057 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1056];
    i32 %1058 = load i32* %1057;
    i32 %1059 = sdiv i32 %1054, i32 %1058;
    store i32* %x with i32 %1059;
    i32 %1060 = load i32* %x;
    i32 %1061 = add i32 %1060, i32 65536;
    i32 %1062 = load i32* %y;
    i32 %1063 = sub i32 15, i32 %1062;
    i32 %1064 = add i32 %1063, i32 1;
    i64 %1065 = sext i32 %1064 to i64;
    i32* %1066 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1065];
    i32 %1067 = load i32* %1066;
    i32 %1068 = sub i32 %1061, i32 %1067;
    store i32* %ans with i32 %1068;
    ubr ^b157;
^while.header50:
    i32 %1069 = load i32* %c6;
    i1 %1070 = scmp neq i32 %1069, i32 0;
    cbr i1 %1070(prob = 0.97), ^while.body47, ^b162;
^while.header51:
    i32 %1071 = load i32* %c5;
    i1 %1072 = scmp neq i32 %1071, i32 0;
    cbr i1 %1072(prob = 0.97), ^while.body48, ^b151;
^b127:
    i32 %1073 = load i32* %ans;
    i1 %1074 = scmp neq i32 %1073, i32 0;
    cbr i1 %1074(prob = 0.5), ^if.then82, ^b152;
^while.body45:
    i32 %1075 = load i32* %x;
    i32 %1076 = srem i32 %1075, i32 2;
    i1 %1077 = scmp neq i32 %1076, i32 0;
    cbr i1 %1077(prob = 0.5), ^b142, ^b163;
^if.else39:
    store i32* %ans with i32 0;
    ubr ^b153;
^b128:
    i1 %1078 = phi [^b116, i1 %945] [^while.body42, i1 false];
    i32 %1079 = zext i1 %1078 to i32;
    i1 %1080 = scmp neq i32 %1079, i32 0;
    cbr i1 %1080(prob = 0.5), ^if.then83, ^b154;
^if.else40:
    i32 %1081 = load i32* %y;
    i32 %1082 = srem i32 %1081, i32 2;
    i1 %1083 = scmp neq i32 %1082, i32 0;
    cbr i1 %1083(prob = 0.5), ^if.then84, ^b156;
^while.header52:
    i32 %1084 = load i32* %i;
    i1 %1085 = scmp lt i32 %1084, i32 16;
    i32 %1086 = zext i1 %1085 to i32;
    i1 %1087 = scmp neq i32 %1086, i32 0;
    cbr i1 %1087(prob = 0.97), ^while.body53, ^b165;
^b129:
    ubr ^b150;
^if.else41:
    i32 %1088 = load i32* %x;
    i32 %1089 = load i32* %y;
    i64 %1090 = sext i32 %1089 to i64;
    i32* %1091 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1090];
    i32 %1092 = load i32* %1091;
    i32 %1093 = sdiv i32 %1088, i32 %1092;
    store i32* %ans with i32 %1093;
    ubr ^b157;
^while.header53:
    i32 %1094 = load i32* %c4;
    i1 %1095 = scmp neq i32 %1094, i32 0;
    cbr i1 %1095(prob = 0.97), ^while.body50, ^b166;
^b130:
    i32 %1096 = load i32* %ans;
    i1 %1097 = scmp neq i32 %1096, i32 0;
    cbr i1 %1097(prob = 0.5), ^if.then85, ^b159;
^if.else42:
    i32 %1098 = load i32* %x;
    store i32* %ans with i32 %1098;
    ubr ^b164;
^if.then71:
    i32 %1099 = load i32* %x;
    i1 %1100 = scmp gt i32 %1099, i32 32767;
    i32 %1101 = zext i1 %1100 to i32;
    i1 %1102 = scmp neq i32 %1101, i32 0;
    cbr i1 %1102(prob = 0.5), ^if.then86, ^if.else43;
^if.then72:
    i32 %1103 = load i32* %ans;
    i32 %1104 = load i32* %i;
    i64 %1105 = sext i32 %1104 to i64;
    i32* %1106 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1105];
    i32 %1107 = load i32* %1106;
    i32 %1108 = mul i32 1, i32 %1107;
    i32 %1109 = add i32 %1103, i32 %1108;
    store i32* %ans with i32 %1109;
    ubr ^b132;
^if.then73:
    i32 %1110 = load i32* %ans;
    i32 %1111 = load i32* %i;
    i64 %1112 = sext i32 %1111 to i64;
    i32* %1113 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1112];
    i32 %1114 = load i32* %1113;
    i32 %1115 = mul i32 1, i32 %1114;
    i32 %1116 = add i32 %1110, i32 %1115;
    store i32* %ans with i32 %1116;
    ubr ^b134;
^b131:
    i32 %1117 = load i32* %ans;
    store i32* %c15 with i32 %1117;
    i32 %1118 = load i32* %sum15;
    store i32* %al15 with i32 %1118;
    ubr ^while.header17;
^b132:
    ubr ^b167;
^if.then74:
    i32 %1119 = load i32* %ans;
    i32 %1120 = load i32* %i;
    i64 %1121 = sext i32 %1120 to i64;
    i32* %1122 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1121];
    i32 %1123 = load i32* %1122;
    i32 %1124 = mul i32 1, i32 %1123;
    i32 %1125 = add i32 %1119, i32 %1124;
    store i32* %ans with i32 %1125;
    ubr ^b137;
^if.then75:
    i32 %1126 = load i32* %ans;
    i32 %1127 = load i32* %i;
    i64 %1128 = sext i32 %1127 to i64;
    i32* %1129 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1128];
    i32 %1130 = load i32* %1129;
    i32 %1131 = mul i32 1, i32 %1130;
    i32 %1132 = add i32 %1126, i32 %1131;
    store i32* %ans with i32 %1132;
    ubr ^b138;
^if.then76:
    i32 %1133 = load i32* %ans;
    i32 %1134 = load i32* %i;
    i64 %1135 = sext i32 %1134 to i64;
    i32* %1136 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1135];
    i32 %1137 = load i32* %1136;
    i32 %1138 = mul i32 1, i32 %1137;
    i32 %1139 = add i32 %1133, i32 %1138;
    store i32* %ans with i32 %1139;
    ubr ^b140;
^while.body46:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %1140 = load i32* %al7;
    store i32* %x with i32 %1140;
    i32 %1141 = load i32* %c7;
    store i32* %y with i32 %1141;
    ubr ^while.header58;
^b133:
    i32 %1142 = load i32* %y;
    i32 %1143 = srem i32 %1142, i32 2;
    i1 %1144 = scmp neq i32 %1143, i32 0;
    ubr ^b158;
^b134:
    i32 %1145 = load i32* %x;
    i32 %1146 = sdiv i32 %1145, i32 2;
    store i32* %x with i32 %1146;
    i32 %1147 = load i32* %y;
    i32 %1148 = sdiv i32 %1147, i32 2;
    store i32* %y with i32 %1148;
    i32 %1149 = load i32* %i;
    i32 %1150 = add i32 %1149, i32 1;
    store i32* %i with i32 %1150;
    ubr ^while.header36;
^if.then77:
    i32 %1151 = load i32* %ans;
    i32 %1152 = load i32* %i;
    i64 %1153 = sext i32 %1152 to i64;
    i32* %1154 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1153];
    i32 %1155 = load i32* %1154;
    i32 %1156 = mul i32 1, i32 %1155;
    i32 %1157 = add i32 %1151, i32 %1156;
    store i32* %ans with i32 %1157;
    ubr ^b143;
^b135:
    i32 %1158 = load i32* %ans;
    store i32* %c14 with i32 %1158;
    i32 %1159 = load i32* %sum14;
    store i32* %al14 with i32 %1159;
    ubr ^while.header18;
^if.then78:
    i32 %1160 = load i32* %ans;
    i32 %1161 = load i32* %i;
    i64 %1162 = sext i32 %1161 to i64;
    i32* %1163 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1162];
    i32 %1164 = load i32* %1163;
    i32 %1165 = mul i32 1, i32 %1164;
    i32 %1166 = add i32 %1160, i32 %1165;
    store i32* %ans with i32 %1166;
    ubr ^b144;
^b136:
    i32 %1167 = load i32* %ans;
    store i32* %c13 with i32 %1167;
    i32 %1168 = load i32* %sum13;
    store i32* %al13 with i32 %1168;
    ubr ^while.header19;
^b137:
    ubr ^b167;
^b138:
    ubr ^b169;
^if.then79:
    i32 %1169 = load i32* %ans;
    i32 %1170 = load i32* %i;
    i64 %1171 = sext i32 %1170 to i64;
    i32* %1172 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1171];
    i32 %1173 = load i32* %1172;
    i32 %1174 = mul i32 1, i32 %1173;
    i32 %1175 = add i32 %1169, i32 %1174;
    store i32* %ans with i32 %1175;
    ubr ^b146;
^b139:
    i32 %1176 = load i32* %ans;
    store i32* %mr5 with i32 %1176;
    ubr ^while.header11;
^b140:
    ubr ^b171;
^if.then80:
    i32 %1177 = load i32* %ans;
    i32 %1178 = load i32* %i;
    i64 %1179 = sext i32 %1178 to i64;
    i32* %1180 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1179];
    i32 %1181 = load i32* %1180;
    i32 %1182 = mul i32 1, i32 %1181;
    i32 %1183 = add i32 %1177, i32 %1182;
    store i32* %ans with i32 %1183;
    ubr ^b148;
^if.then81:
    i32 %1184 = load i32* %ans;
    i32 %1185 = load i32* %i;
    i64 %1186 = sext i32 %1185 to i64;
    i32* %1187 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1186];
    i32 %1188 = load i32* %1187;
    i32 %1189 = mul i32 1, i32 %1188;
    i32 %1190 = add i32 %1184, i32 %1189;
    store i32* %ans with i32 %1190;
    ubr ^b149;
^b141:
    i32 %1191 = load i32* %al7;
    store i32* %ans with i32 %1191;
    i32 %1192 = load i32* %ans;
    store i32* %mres3 with i32 %1192;
    ubr ^b96;
^while.body47:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %1193 = load i32* %al6;
    store i32* %x with i32 %1193;
    i32 %1194 = load i32* %c6;
    store i32* %y with i32 %1194;
    ubr ^while.header59;
^while.body48:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %1195 = load i32* %al5;
    store i32* %x with i32 %1195;
    i32 %1196 = load i32* %c5;
    store i32* %y with i32 %1196;
    ubr ^while.header60;
^if.then82:
    i32 %1197 = load i32* %mres1;
    store i32* %al3 with i32 %1197;
    i32 %1198 = load i32* %ml1;
    store i32* %c3 with i32 %1198;
    store i32* %sum3 with i32 0;
    ubr ^while.header61;
^b142:
    i32 %1199 = load i32* %y;
    i32 %1200 = srem i32 %1199, i32 2;
    i1 %1201 = scmp neq i32 %1200, i32 0;
    ubr ^b163;
^b143:
    i32 %1202 = load i32* %x;
    i32 %1203 = sdiv i32 %1202, i32 2;
    store i32* %x with i32 %1203;
    i32 %1204 = load i32* %y;
    i32 %1205 = sdiv i32 %1204, i32 2;
    store i32* %y with i32 %1205;
    i32 %1206 = load i32* %i;
    i32 %1207 = add i32 %1206, i32 1;
    store i32* %i with i32 %1207;
    ubr ^while.header38;
^b144:
    i32 %1208 = load i32* %x;
    i32 %1209 = sdiv i32 %1208, i32 2;
    store i32* %x with i32 %1209;
    i32 %1210 = load i32* %y;
    i32 %1211 = sdiv i32 %1210, i32 2;
    store i32* %y with i32 %1211;
    i32 %1212 = load i32* %i;
    i32 %1213 = add i32 %1212, i32 1;
    store i32* %i with i32 %1213;
    ubr ^while.header39;
^if.then83:
    i32 %1214 = load i32* %ans;
    i32 %1215 = load i32* %i;
    i64 %1216 = sext i32 %1215 to i64;
    i32* %1217 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1216];
    i32 %1218 = load i32* %1217;
    i32 %1219 = mul i32 1, i32 %1218;
    i32 %1220 = add i32 %1214, i32 %1219;
    store i32* %ans with i32 %1220;
    ubr ^b154;
^b145:
    i32 %1221 = load i32* %ans;
    store i32* %c12 with i32 %1221;
    i32 %1222 = load i32* %sum12;
    store i32* %al12 with i32 %1222;
    ubr ^while.header21;
^while.body49:
    i32 %1223 = load i32* %x;
    i32 %1224 = srem i32 %1223, i32 2;
    i1 %1225 = scmp neq i32 %1224, i32 0;
    cbr i1 %1225(prob = 0.5), ^b168, ^b180;
^b146:
    ubr ^b169;
^b147:
    ubr ^b126;
^b148:
    ubr ^b171;
^b149:
    ubr ^b174;
^if.then84:
    i32 %1226 = load i32* %ans;
    i32 %1227 = load i32* %i;
    i64 %1228 = sext i32 %1227 to i64;
    i32* %1229 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1228];
    i32 %1230 = load i32* %1229;
    i32 %1231 = mul i32 1, i32 %1230;
    i32 %1232 = add i32 %1226, i32 %1231;
    store i32* %ans with i32 %1232;
    ubr ^b156;
^b150:
    i32 %1233 = load i32* %ans;
    store i32* %mr4 with i32 %1233;
    ubr ^while.header12;
^b151:
    i32 %1234 = load i32* %al5;
    store i32* %ans with i32 %1234;
    i32 %1235 = load i32* %ans;
    store i32* %mres2 with i32 %1235;
    ubr ^b103;
^while.body50:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %1236 = load i32* %al4;
    store i32* %x with i32 %1236;
    i32 %1237 = load i32* %c4;
    store i32* %y with i32 %1237;
    ubr ^while.header62;
^b152:
    i32 %1238 = load i32* %ml1;
    store i32* %al2 with i32 %1238;
    i32 %1239 = load i32* %ml1;
    store i32* %c2 with i32 %1239;
    store i32* %sum2 with i32 0;
    ubr ^while.header63;
^if.then85:
    i32 %1240 = load i32* %mres;
    store i32* %al1 with i32 %1240;
    i32 %1241 = load i32* %ml;
    store i32* %c1 with i32 %1241;
    store i32* %sum1 with i32 0;
    ubr ^while.header64;
^b153:
    ubr ^b177;
^while.header54:
    i32 %1242 = load i32* %i;
    i1 %1243 = scmp lt i32 %1242, i32 16;
    i32 %1244 = zext i1 %1243 to i32;
    i1 %1245 = scmp neq i32 %1244, i32 0;
    cbr i1 %1245(prob = 0.97), ^while.body54, ^b173;
^b154:
    i32 %1246 = load i32* %x;
    i32 %1247 = sdiv i32 %1246, i32 2;
    store i32* %x with i32 %1247;
    i32 %1248 = load i32* %y;
    i32 %1249 = sdiv i32 %1248, i32 2;
    store i32* %y with i32 %1249;
    i32 %1250 = load i32* %i;
    i32 %1251 = add i32 %1250, i32 1;
    store i32* %i with i32 %1251;
    ubr ^while.header42;
^b155:
    i32 %1252 = load i32* %ans;
    store i32* %c11 with i32 %1252;
    i1 %1253 = scmp gt i32 1, i32 15;
    i32 %1254 = zext i1 %1253 to i32;
    i1 %1255 = scmp neq i32 %1254, i32 0;
    cbr i1 %1255(prob = 0.5), ^if.then87, ^if.else44;
^while.body51:
    i32 %1256 = load i32* %x;
    i32 %1257 = srem i32 %1256, i32 2;
    i1 %1258 = scmp neq i32 %1257, i32 0;
    cbr i1 %1258(prob = 0.5), ^b170, ^b184;
^while.body52:
    i32 %1259 = load i32* %x;
    i32 %1260 = srem i32 %1259, i32 2;
    i1 %1261 = scmp neq i32 %1260, i32 0;
    cbr i1 %1261(prob = 0.5), ^b172, ^b185;
^b156:
    ubr ^b174;
^b157:
    ubr ^b129;
^b158:
    i1 %1262 = phi [^b133, i1 %1144] [^while.body44, i1 false];
    i32 %1263 = zext i1 %1262 to i32;
    i1 %1264 = scmp neq i32 %1263, i32 0;
    cbr i1 %1264(prob = 0.5), ^if.then88, ^b176;
^b159:
    i32 %1265 = load i32* %ml;
    store i32* %al with i32 %1265;
    i32 %1266 = load i32* %ml;
    store i32* %c with i32 %1266;
    store i32* %sum with i32 0;
    ubr ^while.header65;
^if.then86:
    i32 %1267 = load i32* %x;
    i32 %1268 = load i32* %y;
    i64 %1269 = sext i32 %1268 to i64;
    i32* %1270 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1269];
    i32 %1271 = load i32* %1270;
    i32 %1272 = sdiv i32 %1267, i32 %1271;
    store i32* %x with i32 %1272;
    i32 %1273 = load i32* %x;
    i32 %1274 = add i32 %1273, i32 65536;
    i32 %1275 = load i32* %y;
    i32 %1276 = sub i32 15, i32 %1275;
    i32 %1277 = add i32 %1276, i32 1;
    i64 %1278 = sext i32 %1277 to i64;
    i32* %1279 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1278];
    i32 %1280 = load i32* %1279;
    i32 %1281 = sub i32 %1274, i32 %1280;
    store i32* %ans with i32 %1281;
    ubr ^b182;
^while.header55:
    i32 %1282 = load i32* %i;
    i1 %1283 = scmp lt i32 %1282, i32 16;
    i32 %1284 = zext i1 %1283 to i32;
    i1 %1285 = scmp neq i32 %1284, i32 0;
    cbr i1 %1285(prob = 0.97), ^while.body55, ^b178;
^while.header56:
    i32 %1286 = load i32* %i;
    i1 %1287 = scmp lt i32 %1286, i32 16;
    i32 %1288 = zext i1 %1287 to i32;
    i1 %1289 = scmp neq i32 %1288, i32 0;
    cbr i1 %1289(prob = 0.97), ^while.body56, ^b179;
^b160:
    i32 %1290 = load i32* %ans;
    store i32* %c10 with i32 %1290;
    i1 %1291 = scmp gt i32 1, i32 15;
    i32 %1292 = zext i1 %1291 to i32;
    i1 %1293 = scmp neq i32 %1292, i32 0;
    cbr i1 %1293(prob = 0.5), ^if.then89, ^if.else45;
^b161:
    i32 %1294 = load i32* %ans;
    store i32* %c9 with i32 %1294;
    i1 %1295 = scmp gt i32 1, i32 15;
    i32 %1296 = zext i1 %1295 to i32;
    i1 %1297 = scmp neq i32 %1296, i32 0;
    cbr i1 %1297(prob = 0.5), ^if.then90, ^if.else46;
^while.body53:
    i32 %1298 = load i32* %x;
    i32 %1299 = srem i32 %1298, i32 2;
    i1 %1300 = scmp neq i32 %1299, i32 0;
    cbr i1 %1300(prob = 0.5), ^b175, ^b186;
^b162:
    i32 %1301 = load i32* %al6;
    store i32* %ans with i32 %1301;
    i32 %1302 = load i32* %ans;
    store i32* %ml3 with i32 %1302;
    i32 %1303 = load i32* %mr3;
    store i32* %x with i32 %1303;
    store i32* %y with i32 1;
    i32 %1304 = load i32* %y;
    i1 %1305 = scmp ge i32 %1304, i32 15;
    i32 %1306 = zext i1 %1305 to i32;
    i1 %1307 = scmp neq i32 %1306, i32 0;
    cbr i1 %1307(prob = 0.5), ^if.then93, ^if.else48;
^b163:
    i1 %1308 = phi [^b142, i1 %1201] [^while.body45, i1 false];
    i32 %1309 = zext i1 %1308 to i32;
    i1 %1310 = scmp neq i32 %1309, i32 0;
    cbr i1 %1310(prob = 0.5), ^if.then91, ^b181;
^b164:
    ubr ^b177;
^if.else43:
    i32 %1311 = load i32* %x;
    i32 %1312 = load i32* %y;
    i64 %1313 = sext i32 %1312 to i64;
    i32* %1314 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1313];
    i32 %1315 = load i32* %1314;
    i32 %1316 = sdiv i32 %1311, i32 %1315;
    store i32* %ans with i32 %1316;
    ubr ^b182;
^while.header57:
    i32 %1317 = load i32* %i;
    i1 %1318 = scmp lt i32 %1317, i32 16;
    i32 %1319 = zext i1 %1318 to i32;
    i1 %1320 = scmp neq i32 %1319, i32 0;
    cbr i1 %1320(prob = 0.97), ^while.body57, ^b183;
^b165:
    i32 %1321 = load i32* %ans;
    store i32* %c8 with i32 %1321;
    i1 %1322 = scmp gt i32 1, i32 15;
    i32 %1323 = zext i1 %1322 to i32;
    i1 %1324 = scmp neq i32 %1323, i32 0;
    cbr i1 %1324(prob = 0.5), ^if.then92, ^if.else47;
^b166:
    i32 %1325 = load i32* %al4;
    store i32* %ans with i32 %1325;
    i32 %1326 = load i32* %ans;
    store i32* %ml2 with i32 %1326;
    i32 %1327 = load i32* %mr2;
    store i32* %x with i32 %1327;
    store i32* %y with i32 1;
    i32 %1328 = load i32* %y;
    i1 %1329 = scmp ge i32 %1328, i32 15;
    i32 %1330 = zext i1 %1329 to i32;
    i1 %1331 = scmp neq i32 %1330, i32 0;
    cbr i1 %1331(prob = 0.5), ^if.then94, ^if.else49;
^b167:
    i32 %1332 = load i32* %x;
    i32 %1333 = sdiv i32 %1332, i32 2;
    store i32* %x with i32 %1333;
    i32 %1334 = load i32* %y;
    i32 %1335 = sdiv i32 %1334, i32 2;
    store i32* %y with i32 %1335;
    i32 %1336 = load i32* %i;
    i32 %1337 = add i32 %1336, i32 1;
    store i32* %i with i32 %1337;
    ubr ^while.header37;
^b168:
    i32 %1338 = load i32* %y;
    i32 %1339 = srem i32 %1338, i32 2;
    i1 %1340 = scmp neq i32 %1339, i32 0;
    ubr ^b180;
^if.then87:
    store i32* %ans with i32 0;
    ubr ^b188;
^b169:
    i32 %1341 = load i32* %x;
    i32 %1342 = sdiv i32 %1341, i32 2;
    store i32* %x with i32 %1342;
    i32 %1343 = load i32* %y;
    i32 %1344 = sdiv i32 %1343, i32 2;
    store i32* %y with i32 %1344;
    i32 %1345 = load i32* %i;
    i32 %1346 = add i32 %1345, i32 1;
    store i32* %i with i32 %1346;
    ubr ^while.header40;
^b170:
    i32 %1347 = load i32* %y;
    i32 %1348 = srem i32 %1347, i32 2;
    i1 %1349 = scmp neq i32 %1348, i32 0;
    ubr ^b184;
^b171:
    i32 %1350 = load i32* %x;
    i32 %1351 = sdiv i32 %1350, i32 2;
    store i32* %x with i32 %1351;
    i32 %1352 = load i32* %y;
    i32 %1353 = sdiv i32 %1352, i32 2;
    store i32* %y with i32 %1353;
    i32 %1354 = load i32* %i;
    i32 %1355 = add i32 %1354, i32 1;
    store i32* %i with i32 %1355;
    ubr ^while.header41;
^b172:
    i32 %1356 = load i32* %y;
    i32 %1357 = srem i32 %1356, i32 2;
    i1 %1358 = scmp neq i32 %1357, i32 0;
    ubr ^b185;
^if.then88:
    i32 %1359 = load i32* %ans;
    i32 %1360 = load i32* %i;
    i64 %1361 = sext i32 %1360 to i64;
    i32* %1362 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1361];
    i32 %1363 = load i32* %1362;
    i32 %1364 = mul i32 1, i32 %1363;
    i32 %1365 = add i32 %1359, i32 %1364;
    store i32* %ans with i32 %1365;
    ubr ^b176;
^b173:
    ubr ^b131;
^if.else44:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %1366 = load i32* %c11;
    i32* %1367 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 1];
    i32 %1368 = load i32* %1367;
    i32 %1369 = mul i32 %1366, i32 %1368;
    store i32* %x with i32 %1369;
    store i32* %y with i32 65535;
    ubr ^while.header66;
^if.then89:
    store i32* %ans with i32 0;
    ubr ^b193;
^if.then90:
    store i32* %ans with i32 0;
    ubr ^b194;
^b174:
    i32 %1370 = load i32* %x;
    i32 %1371 = sdiv i32 %1370, i32 2;
    store i32* %x with i32 %1371;
    i32 %1372 = load i32* %y;
    i32 %1373 = sdiv i32 %1372, i32 2;
    store i32* %y with i32 %1373;
    i32 %1374 = load i32* %i;
    i32 %1375 = add i32 %1374, i32 1;
    store i32* %i with i32 %1375;
    ubr ^while.header43;
^b175:
    i32 %1376 = load i32* %y;
    i32 %1377 = srem i32 %1376, i32 2;
    i1 %1378 = scmp neq i32 %1377, i32 0;
    ubr ^b186;
^while.header58:
    i32 %1379 = load i32* %i;
    i1 %1380 = scmp lt i32 %1379, i32 16;
    i32 %1381 = zext i1 %1380 to i32;
    i1 %1382 = scmp neq i32 %1381, i32 0;
    cbr i1 %1382(prob = 0.97), ^while.body59, ^b189;
^b176:
    i32 %1383 = load i32* %x;
    i32 %1384 = sdiv i32 %1383, i32 2;
    store i32* %x with i32 %1384;
    i32 %1385 = load i32* %y;
    i32 %1386 = sdiv i32 %1385, i32 2;
    store i32* %y with i32 %1386;
    i32 %1387 = load i32* %i;
    i32 %1388 = add i32 %1387, i32 1;
    store i32* %i with i32 %1388;
    ubr ^while.header44;
^if.then91:
    i32 %1389 = load i32* %ans;
    i32 %1390 = load i32* %i;
    i64 %1391 = sext i32 %1390 to i64;
    i32* %1392 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1391];
    i32 %1393 = load i32* %1392;
    i32 %1394 = mul i32 1, i32 %1393;
    i32 %1395 = add i32 %1389, i32 %1394;
    store i32* %ans with i32 %1395;
    ubr ^b181;
^b177:
    i32 %1396 = load i32* %ans;
    store i32* %pr with i32 %1396;
    ubr ^while.header14;
^while.body54:
    i32 %1397 = load i32* %x;
    i32 %1398 = srem i32 %1397, i32 2;
    i1 %1399 = scmp neq i32 %1398, i32 0;
    cbr i1 %1399(prob = 0.5), ^b187, ^b204;
^b178:
    ubr ^b135;
^b179:
    ubr ^b136;
^b180:
    i1 %1400 = phi [^b168, i1 %1340] [^while.body49, i1 false];
    i32 %1401 = zext i1 %1400 to i32;
    i1 %1402 = scmp neq i32 %1401, i32 0;
    cbr i1 %1402(prob = 0.5), ^if.then95, ^b192;
^if.else45:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %1403 = load i32* %c10;
    i32* %1404 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 1];
    i32 %1405 = load i32* %1404;
    i32 %1406 = mul i32 %1403, i32 %1405;
    store i32* %x with i32 %1406;
    store i32* %y with i32 65535;
    ubr ^while.header67;
^if.else46:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %1407 = load i32* %c9;
    i32* %1408 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 1];
    i32 %1409 = load i32* %1408;
    i32 %1410 = mul i32 %1407, i32 %1409;
    store i32* %x with i32 %1410;
    store i32* %y with i32 65535;
    ubr ^while.header68;
^if.then92:
    store i32* %ans with i32 0;
    ubr ^b201;
^while.header59:
    i32 %1411 = load i32* %i;
    i1 %1412 = scmp lt i32 %1411, i32 16;
    i32 %1413 = zext i1 %1412 to i32;
    i1 %1414 = scmp neq i32 %1413, i32 0;
    cbr i1 %1414(prob = 0.97), ^while.body62, ^b195;
^while.header60:
    i32 %1415 = load i32* %i;
    i1 %1416 = scmp lt i32 %1415, i32 16;
    i32 %1417 = zext i1 %1416 to i32;
    i1 %1418 = scmp neq i32 %1417, i32 0;
    cbr i1 %1418(prob = 0.97), ^while.body63, ^b196;
^while.header61:
    i32 %1419 = load i32* %c3;
    i1 %1420 = scmp neq i32 %1419, i32 0;
    cbr i1 %1420(prob = 0.97), ^while.body58, ^b197;
^b181:
    i32 %1421 = load i32* %x;
    i32 %1422 = sdiv i32 %1421, i32 2;
    store i32* %x with i32 %1422;
    i32 %1423 = load i32* %y;
    i32 %1424 = sdiv i32 %1423, i32 2;
    store i32* %y with i32 %1424;
    i32 %1425 = load i32* %i;
    i32 %1426 = add i32 %1425, i32 1;
    store i32* %i with i32 %1426;
    ubr ^while.header45;
^b182:
    ubr ^b164;
^while.body55:
    i32 %1427 = load i32* %x;
    i32 %1428 = srem i32 %1427, i32 2;
    i1 %1429 = scmp neq i32 %1428, i32 0;
    cbr i1 %1429(prob = 0.5), ^b190, ^b206;
^while.body56:
    i32 %1430 = load i32* %x;
    i32 %1431 = srem i32 %1430, i32 2;
    i1 %1432 = scmp neq i32 %1431, i32 0;
    cbr i1 %1432(prob = 0.5), ^b191, ^b207;
^b183:
    ubr ^b145;
^b184:
    i1 %1433 = phi [^b170, i1 %1349] [^while.body51, i1 false];
    i32 %1434 = zext i1 %1433 to i32;
    i1 %1435 = scmp neq i32 %1434, i32 0;
    cbr i1 %1435(prob = 0.5), ^if.then96, ^b199;
^b185:
    i1 %1436 = phi [^b172, i1 %1358] [^while.body52, i1 false];
    i32 %1437 = zext i1 %1436 to i32;
    i1 %1438 = scmp neq i32 %1437, i32 0;
    cbr i1 %1438(prob = 0.5), ^if.then97, ^b200;
^if.else47:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %1439 = load i32* %c8;
    i32* %1440 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 1];
    i32 %1441 = load i32* %1440;
    i32 %1442 = mul i32 %1439, i32 %1441;
    store i32* %x with i32 %1442;
    store i32* %y with i32 65535;
    ubr ^while.header69;
^if.then93:
    i32 %1443 = load i32* %x;
    i1 %1444 = scmp lt i32 %1443, i32 0;
    i32 %1445 = zext i1 %1444 to i32;
    i1 %1446 = scmp neq i32 %1445, i32 0;
    cbr i1 %1446(prob = 0.5), ^if.then98, ^if.else50;
^while.header62:
    i32 %1447 = load i32* %i;
    i1 %1448 = scmp lt i32 %1447, i32 16;
    i32 %1449 = zext i1 %1448 to i32;
    i1 %1450 = scmp neq i32 %1449, i32 0;
    cbr i1 %1450(prob = 0.97), ^while.body65, ^b202;
^while.header63:
    i32 %1451 = load i32* %c2;
    i1 %1452 = scmp neq i32 %1451, i32 0;
    cbr i1 %1452(prob = 0.97), ^while.body60, ^b208;
^while.header64:
    i32 %1453 = load i32* %c1;
    i1 %1454 = scmp neq i32 %1453, i32 0;
    cbr i1 %1454(prob = 0.97), ^while.body61, ^b203;
^while.body57:
    i32 %1455 = load i32* %x;
    i32 %1456 = srem i32 %1455, i32 2;
    i1 %1457 = scmp neq i32 %1456, i32 0;
    cbr i1 %1457(prob = 0.5), ^b198, ^b209;
^b186:
    i1 %1458 = phi [^b175, i1 %1378] [^while.body53, i1 false];
    i32 %1459 = zext i1 %1458 to i32;
    i1 %1460 = scmp neq i32 %1459, i32 0;
    cbr i1 %1460(prob = 0.5), ^if.then99, ^b205;
^if.else48:
    i32 %1461 = load i32* %y;
    i1 %1462 = scmp gt i32 %1461, i32 0;
    i32 %1463 = zext i1 %1462 to i32;
    i1 %1464 = scmp neq i32 %1463, i32 0;
    cbr i1 %1464(prob = 0.5), ^if.then101, ^if.else51;
^if.then94:
    i32 %1465 = load i32* %x;
    i1 %1466 = scmp lt i32 %1465, i32 0;
    i32 %1467 = zext i1 %1466 to i32;
    i1 %1468 = scmp neq i32 %1467, i32 0;
    cbr i1 %1468(prob = 0.5), ^if.then100, ^if.else52;
^while.header65:
    i32 %1469 = load i32* %c;
    i1 %1470 = scmp neq i32 %1469, i32 0;
    cbr i1 %1470(prob = 0.97), ^while.body64, ^b210;
^if.else49:
    i32 %1471 = load i32* %y;
    i1 %1472 = scmp gt i32 %1471, i32 0;
    i32 %1473 = zext i1 %1472 to i32;
    i1 %1474 = scmp neq i32 %1473, i32 0;
    cbr i1 %1474(prob = 0.5), ^if.then102, ^if.else53;
^b187:
    i32 %1475 = load i32* %y;
    i32 %1476 = srem i32 %1475, i32 2;
    i1 %1477 = scmp neq i32 %1476, i32 0;
    ubr ^b204;
^if.then95:
    i32 %1478 = load i32* %ans;
    i32 %1479 = load i32* %i;
    i64 %1480 = sext i32 %1479 to i64;
    i32* %1481 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1480];
    i32 %1482 = load i32* %1481;
    i32 %1483 = mul i32 1, i32 %1482;
    i32 %1484 = add i32 %1478, i32 %1483;
    store i32* %ans with i32 %1484;
    ubr ^b192;
^b188:
    i32 %1485 = load i32* %ans;
    store i32* %c11 with i32 %1485;
    i32 %1486 = load i32* %sum11;
    store i32* %al11 with i32 %1486;
    ubr ^while.header27;
^b189:
    i32 %1487 = load i32* %ans;
    store i32* %sum7 with i32 %1487;
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %1488 = load i32* %al7;
    store i32* %x with i32 %1488;
    i32 %1489 = load i32* %c7;
    store i32* %y with i32 %1489;
    ubr ^while.header70;
^while.body58:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %1490 = load i32* %al3;
    store i32* %x with i32 %1490;
    i32 %1491 = load i32* %c3;
    store i32* %y with i32 %1491;
    ubr ^while.header71;
^b190:
    i32 %1492 = load i32* %y;
    i32 %1493 = srem i32 %1492, i32 2;
    i1 %1494 = scmp neq i32 %1493, i32 0;
    ubr ^b206;
^b191:
    i32 %1495 = load i32* %y;
    i32 %1496 = srem i32 %1495, i32 2;
    i1 %1497 = scmp neq i32 %1496, i32 0;
    ubr ^b207;
^b192:
    i32 %1498 = load i32* %x;
    i32 %1499 = sdiv i32 %1498, i32 2;
    store i32* %x with i32 %1499;
    i32 %1500 = load i32* %y;
    i32 %1501 = sdiv i32 %1500, i32 2;
    store i32* %y with i32 %1501;
    i32 %1502 = load i32* %i;
    i32 %1503 = add i32 %1502, i32 1;
    store i32* %i with i32 %1503;
    ubr ^while.header46;
^if.then96:
    i32 %1504 = load i32* %ans;
    i32 %1505 = load i32* %i;
    i64 %1506 = sext i32 %1505 to i64;
    i32* %1507 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1506];
    i32 %1508 = load i32* %1507;
    i32 %1509 = mul i32 1, i32 %1508;
    i32 %1510 = add i32 %1504, i32 %1509;
    store i32* %ans with i32 %1510;
    ubr ^b199;
^b193:
    i32 %1511 = load i32* %ans;
    store i32* %c10 with i32 %1511;
    i32 %1512 = load i32* %sum10;
    store i32* %al10 with i32 %1512;
    ubr ^while.header29;
^if.then97:
    i32 %1513 = load i32* %ans;
    i32 %1514 = load i32* %i;
    i64 %1515 = sext i32 %1514 to i64;
    i32* %1516 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1515];
    i32 %1517 = load i32* %1516;
    i32 %1518 = mul i32 1, i32 %1517;
    i32 %1519 = add i32 %1513, i32 %1518;
    store i32* %ans with i32 %1519;
    ubr ^b200;
^b194:
    i32 %1520 = load i32* %ans;
    store i32* %c9 with i32 %1520;
    i32 %1521 = load i32* %sum9;
    store i32* %al9 with i32 %1521;
    ubr ^while.header30;
^while.body59:
    i32 %1522 = load i32* %x;
    i32 %1523 = srem i32 %1522, i32 2;
    i1 %1524 = scmp neq i32 %1523, i32 0;
    cbr i1 %1524(prob = 0.5), ^if.then104, ^if.else54;
^b195:
    i32 %1525 = load i32* %ans;
    store i32* %sum6 with i32 %1525;
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %1526 = load i32* %al6;
    store i32* %x with i32 %1526;
    i32 %1527 = load i32* %c6;
    store i32* %y with i32 %1527;
    ubr ^while.header72;
^if.then98:
    store i32* %ans with i32 65535;
    ubr ^b211;
^b196:
    i32 %1528 = load i32* %ans;
    store i32* %sum5 with i32 %1528;
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %1529 = load i32* %al5;
    store i32* %x with i32 %1529;
    i32 %1530 = load i32* %c5;
    store i32* %y with i32 %1530;
    ubr ^while.header73;
^b197:
    i32 %1531 = load i32* %al3;
    store i32* %ans with i32 %1531;
    i32 %1532 = load i32* %ans;
    store i32* %mres1 with i32 %1532;
    ubr ^b152;
^while.body60:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %1533 = load i32* %al2;
    store i32* %x with i32 %1533;
    i32 %1534 = load i32* %c2;
    store i32* %y with i32 %1534;
    ubr ^while.header74;
^while.body61:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %1535 = load i32* %al1;
    store i32* %x with i32 %1535;
    i32 %1536 = load i32* %c1;
    store i32* %y with i32 %1536;
    ubr ^while.header75;
^b198:
    i32 %1537 = load i32* %y;
    i32 %1538 = srem i32 %1537, i32 2;
    i1 %1539 = scmp neq i32 %1538, i32 0;
    ubr ^b209;
^b199:
    i32 %1540 = load i32* %x;
    i32 %1541 = sdiv i32 %1540, i32 2;
    store i32* %x with i32 %1541;
    i32 %1542 = load i32* %y;
    i32 %1543 = sdiv i32 %1542, i32 2;
    store i32* %y with i32 %1543;
    i32 %1544 = load i32* %i;
    i32 %1545 = add i32 %1544, i32 1;
    store i32* %i with i32 %1545;
    ubr ^while.header48;
^b200:
    i32 %1546 = load i32* %x;
    i32 %1547 = sdiv i32 %1546, i32 2;
    store i32* %x with i32 %1547;
    i32 %1548 = load i32* %y;
    i32 %1549 = sdiv i32 %1548, i32 2;
    store i32* %y with i32 %1549;
    i32 %1550 = load i32* %i;
    i32 %1551 = add i32 %1550, i32 1;
    store i32* %i with i32 %1551;
    ubr ^while.header49;
^if.then99:
    i32 %1552 = load i32* %ans;
    i32 %1553 = load i32* %i;
    i64 %1554 = sext i32 %1553 to i64;
    i32* %1555 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1554];
    i32 %1556 = load i32* %1555;
    i32 %1557 = mul i32 1, i32 %1556;
    i32 %1558 = add i32 %1552, i32 %1557;
    store i32* %ans with i32 %1558;
    ubr ^b205;
^b201:
    i32 %1559 = load i32* %ans;
    store i32* %c8 with i32 %1559;
    i32 %1560 = load i32* %sum8;
    store i32* %al8 with i32 %1560;
    ubr ^while.header31;
^while.body62:
    i32 %1561 = load i32* %x;
    i32 %1562 = srem i32 %1561, i32 2;
    i1 %1563 = scmp neq i32 %1562, i32 0;
    cbr i1 %1563(prob = 0.5), ^if.then107, ^if.else55;
^if.else50:
    store i32* %ans with i32 0;
    ubr ^b211;
^while.body63:
    i32 %1564 = load i32* %x;
    i32 %1565 = srem i32 %1564, i32 2;
    i1 %1566 = scmp neq i32 %1565, i32 0;
    cbr i1 %1566(prob = 0.5), ^if.then109, ^if.else57;
^b202:
    i32 %1567 = load i32* %ans;
    store i32* %sum4 with i32 %1567;
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %1568 = load i32* %al4;
    store i32* %x with i32 %1568;
    i32 %1569 = load i32* %c4;
    store i32* %y with i32 %1569;
    ubr ^while.header76;
^if.then100:
    store i32* %ans with i32 65535;
    ubr ^b214;
^b203:
    i32 %1570 = load i32* %al1;
    store i32* %ans with i32 %1570;
    i32 %1571 = load i32* %ans;
    store i32* %mres with i32 %1571;
    ubr ^b159;
^while.body64:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %1572 = load i32* %al;
    store i32* %x with i32 %1572;
    i32 %1573 = load i32* %c;
    store i32* %y with i32 %1573;
    ubr ^while.header77;
^b204:
    i1 %1574 = phi [^b187, i1 %1477] [^while.body54, i1 false];
    i32 %1575 = zext i1 %1574 to i32;
    i1 %1576 = scmp neq i32 %1575, i32 0;
    cbr i1 %1576(prob = 0.5), ^if.then103, ^b212;
^while.header66:
    i32 %1577 = load i32* %i;
    i1 %1578 = scmp lt i32 %1577, i32 16;
    i32 %1579 = zext i1 %1578 to i32;
    i1 %1580 = scmp neq i32 %1579, i32 0;
    cbr i1 %1580(prob = 0.97), ^while.body66, ^b213;
^b205:
    i32 %1581 = load i32* %x;
    i32 %1582 = sdiv i32 %1581, i32 2;
    store i32* %x with i32 %1582;
    i32 %1583 = load i32* %y;
    i32 %1584 = sdiv i32 %1583, i32 2;
    store i32* %y with i32 %1584;
    i32 %1585 = load i32* %i;
    i32 %1586 = add i32 %1585, i32 1;
    store i32* %i with i32 %1586;
    ubr ^while.header52;
^if.else51:
    i32 %1587 = load i32* %x;
    store i32* %ans with i32 %1587;
    ubr ^b219;
^while.body65:
    i32 %1588 = load i32* %x;
    i32 %1589 = srem i32 %1588, i32 2;
    i1 %1590 = scmp neq i32 %1589, i32 0;
    cbr i1 %1590(prob = 0.5), ^if.then111, ^if.else58;
^if.else52:
    store i32* %ans with i32 0;
    ubr ^b214;
^b206:
    i1 %1591 = phi [^b190, i1 %1494] [^while.body55, i1 false];
    i32 %1592 = zext i1 %1591 to i32;
    i1 %1593 = scmp neq i32 %1592, i32 0;
    cbr i1 %1593(prob = 0.5), ^if.then105, ^b215;
^b207:
    i1 %1594 = phi [^b191, i1 %1497] [^while.body56, i1 false];
    i32 %1595 = zext i1 %1594 to i32;
    i1 %1596 = scmp neq i32 %1595, i32 0;
    cbr i1 %1596(prob = 0.5), ^if.then106, ^b216;
^while.header67:
    i32 %1597 = load i32* %i;
    i1 %1598 = scmp lt i32 %1597, i32 16;
    i32 %1599 = zext i1 %1598 to i32;
    i1 %1600 = scmp neq i32 %1599, i32 0;
    cbr i1 %1600(prob = 0.97), ^while.body67, ^b217;
^while.header68:
    i32 %1601 = load i32* %i;
    i1 %1602 = scmp lt i32 %1601, i32 16;
    i32 %1603 = zext i1 %1602 to i32;
    i1 %1604 = scmp neq i32 %1603, i32 0;
    cbr i1 %1604(prob = 0.97), ^while.body68, ^b218;
^if.then101:
    i32 %1605 = load i32* %x;
    i1 %1606 = scmp gt i32 %1605, i32 32767;
    i32 %1607 = zext i1 %1606 to i32;
    i1 %1608 = scmp neq i32 %1607, i32 0;
    cbr i1 %1608(prob = 0.5), ^if.then108, ^if.else56;
^if.else53:
    i32 %1609 = load i32* %x;
    store i32* %ans with i32 %1609;
    ubr ^b222;
^b208:
    i32 %1610 = load i32* %al2;
    store i32* %ans with i32 %1610;
    i32 %1611 = load i32* %ans;
    store i32* %ml1 with i32 %1611;
    i32 %1612 = load i32* %mr1;
    store i32* %x with i32 %1612;
    store i32* %y with i32 1;
    i32 %1613 = load i32* %y;
    i1 %1614 = scmp ge i32 %1613, i32 15;
    i32 %1615 = zext i1 %1614 to i32;
    i1 %1616 = scmp neq i32 %1615, i32 0;
    cbr i1 %1616(prob = 0.5), ^if.then113, ^if.else60;
^b209:
    i1 %1617 = phi [^b198, i1 %1539] [^while.body57, i1 false];
    i32 %1618 = zext i1 %1617 to i32;
    i1 %1619 = scmp neq i32 %1618, i32 0;
    cbr i1 %1619(prob = 0.5), ^if.then110, ^b220;
^while.header69:
    i32 %1620 = load i32* %i;
    i1 %1621 = scmp lt i32 %1620, i32 16;
    i32 %1622 = zext i1 %1621 to i32;
    i1 %1623 = scmp neq i32 %1622, i32 0;
    cbr i1 %1623(prob = 0.97), ^while.body69, ^b221;
^if.then102:
    i32 %1624 = load i32* %x;
    i1 %1625 = scmp gt i32 %1624, i32 32767;
    i32 %1626 = zext i1 %1625 to i32;
    i1 %1627 = scmp neq i32 %1626, i32 0;
    cbr i1 %1627(prob = 0.5), ^if.then112, ^if.else59;
^b210:
    i32 %1628 = load i32* %al;
    store i32* %ans with i32 %1628;
    i32 %1629 = load i32* %ans;
    store i32* %ml with i32 %1629;
    i32 %1630 = load i32* %mr;
    store i32* %x with i32 %1630;
    store i32* %y with i32 1;
    i32 %1631 = load i32* %y;
    i1 %1632 = scmp ge i32 %1631, i32 15;
    i32 %1633 = zext i1 %1632 to i32;
    i1 %1634 = scmp neq i32 %1633, i32 0;
    cbr i1 %1634(prob = 0.5), ^if.then114, ^if.else61;
^if.then103:
    i32 %1635 = load i32* %ans;
    i32 %1636 = load i32* %i;
    i64 %1637 = sext i32 %1636 to i64;
    i32* %1638 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1637];
    i32 %1639 = load i32* %1638;
    i32 %1640 = mul i32 1, i32 %1639;
    i32 %1641 = add i32 %1635, i32 %1640;
    store i32* %ans with i32 %1641;
    ubr ^b212;
^if.then104:
    i32 %1642 = load i32* %y;
    i32 %1643 = srem i32 %1642, i32 2;
    i1 %1644 = scmp eq i32 %1643, i32 0;
    i32 %1645 = zext i1 %1644 to i32;
    i1 %1646 = scmp neq i32 %1645, i32 0;
    cbr i1 %1646(prob = 0.5), ^if.then115, ^b223;
^b211:
    ubr ^b227;
^b212:
    i32 %1647 = load i32* %x;
    i32 %1648 = sdiv i32 %1647, i32 2;
    store i32* %x with i32 %1648;
    i32 %1649 = load i32* %y;
    i32 %1650 = sdiv i32 %1649, i32 2;
    store i32* %y with i32 %1650;
    i32 %1651 = load i32* %i;
    i32 %1652 = add i32 %1651, i32 1;
    store i32* %i with i32 %1652;
    ubr ^while.header54;
^if.then105:
    i32 %1653 = load i32* %ans;
    i32 %1654 = load i32* %i;
    i64 %1655 = sext i32 %1654 to i64;
    i32* %1656 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1655];
    i32 %1657 = load i32* %1656;
    i32 %1658 = mul i32 1, i32 %1657;
    i32 %1659 = add i32 %1653, i32 %1658;
    store i32* %ans with i32 %1659;
    ubr ^b215;
^if.then106:
    i32 %1660 = load i32* %ans;
    i32 %1661 = load i32* %i;
    i64 %1662 = sext i32 %1661 to i64;
    i32* %1663 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1662];
    i32 %1664 = load i32* %1663;
    i32 %1665 = mul i32 1, i32 %1664;
    i32 %1666 = add i32 %1660, i32 %1665;
    store i32* %ans with i32 %1666;
    ubr ^b216;
^b213:
    ubr ^b188;
^if.else54:
    i32 %1667 = load i32* %y;
    i32 %1668 = srem i32 %1667, i32 2;
    i1 %1669 = scmp neq i32 %1668, i32 0;
    cbr i1 %1669(prob = 0.5), ^if.then116, ^b225;
^while.header70:
    i32 %1670 = load i32* %i;
    i1 %1671 = scmp lt i32 %1670, i32 16;
    i32 %1672 = zext i1 %1671 to i32;
    i1 %1673 = scmp neq i32 %1672, i32 0;
    cbr i1 %1673(prob = 0.97), ^while.body70, ^b240;
^if.then107:
    i32 %1674 = load i32* %y;
    i32 %1675 = srem i32 %1674, i32 2;
    i1 %1676 = scmp eq i32 %1675, i32 0;
    i32 %1677 = zext i1 %1676 to i32;
    i1 %1678 = scmp neq i32 %1677, i32 0;
    cbr i1 %1678(prob = 0.5), ^if.then117, ^b226;
^if.then108:
    i32 %1679 = load i32* %x;
    i32 %1680 = load i32* %y;
    i64 %1681 = sext i32 %1680 to i64;
    i32* %1682 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1681];
    i32 %1683 = load i32* %1682;
    i32 %1684 = sdiv i32 %1679, i32 %1683;
    store i32* %x with i32 %1684;
    i32 %1685 = load i32* %x;
    i32 %1686 = add i32 %1685, i32 65536;
    i32 %1687 = load i32* %y;
    i32 %1688 = sub i32 15, i32 %1687;
    i32 %1689 = add i32 %1688, i32 1;
    i64 %1690 = sext i32 %1689 to i64;
    i32* %1691 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1690];
    i32 %1692 = load i32* %1691;
    i32 %1693 = sub i32 %1686, i32 %1692;
    store i32* %ans with i32 %1693;
    ubr ^b233;
^if.then109:
    i32 %1694 = load i32* %y;
    i32 %1695 = srem i32 %1694, i32 2;
    i1 %1696 = scmp eq i32 %1695, i32 0;
    i32 %1697 = zext i1 %1696 to i32;
    i1 %1698 = scmp neq i32 %1697, i32 0;
    cbr i1 %1698(prob = 0.5), ^if.then118, ^b228;
^b214:
    ubr ^b236;
^while.header71:
    i32 %1699 = load i32* %i;
    i1 %1700 = scmp lt i32 %1699, i32 16;
    i32 %1701 = zext i1 %1700 to i32;
    i1 %1702 = scmp neq i32 %1701, i32 0;
    cbr i1 %1702(prob = 0.97), ^while.body71, ^b229;
^b215:
    i32 %1703 = load i32* %x;
    i32 %1704 = sdiv i32 %1703, i32 2;
    store i32* %x with i32 %1704;
    i32 %1705 = load i32* %y;
    i32 %1706 = sdiv i32 %1705, i32 2;
    store i32* %y with i32 %1706;
    i32 %1707 = load i32* %i;
    i32 %1708 = add i32 %1707, i32 1;
    store i32* %i with i32 %1708;
    ubr ^while.header55;
^b216:
    i32 %1709 = load i32* %x;
    i32 %1710 = sdiv i32 %1709, i32 2;
    store i32* %x with i32 %1710;
    i32 %1711 = load i32* %y;
    i32 %1712 = sdiv i32 %1711, i32 2;
    store i32* %y with i32 %1712;
    i32 %1713 = load i32* %i;
    i32 %1714 = add i32 %1713, i32 1;
    store i32* %i with i32 %1714;
    ubr ^while.header56;
^if.then110:
    i32 %1715 = load i32* %ans;
    i32 %1716 = load i32* %i;
    i64 %1717 = sext i32 %1716 to i64;
    i32* %1718 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1717];
    i32 %1719 = load i32* %1718;
    i32 %1720 = mul i32 1, i32 %1719;
    i32 %1721 = add i32 %1715, i32 %1720;
    store i32* %ans with i32 %1721;
    ubr ^b220;
^while.body66:
    i32 %1722 = load i32* %x;
    i32 %1723 = srem i32 %1722, i32 2;
    i1 %1724 = scmp neq i32 %1723, i32 0;
    cbr i1 %1724(prob = 0.5), ^b224, ^b244;
^b217:
    ubr ^b193;
^b218:
    ubr ^b194;
^if.else55:
    i32 %1725 = load i32* %y;
    i32 %1726 = srem i32 %1725, i32 2;
    i1 %1727 = scmp neq i32 %1726, i32 0;
    cbr i1 %1727(prob = 0.5), ^if.then119, ^b232;
^while.header72:
    i32 %1728 = load i32* %i;
    i1 %1729 = scmp lt i32 %1728, i32 16;
    i32 %1730 = zext i1 %1729 to i32;
    i1 %1731 = scmp neq i32 %1730, i32 0;
    cbr i1 %1731(prob = 0.97), ^while.body72, ^b245;
^b219:
    ubr ^b227;
^if.else56:
    i32 %1732 = load i32* %x;
    i32 %1733 = load i32* %y;
    i64 %1734 = sext i32 %1733 to i64;
    i32* %1735 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1734];
    i32 %1736 = load i32* %1735;
    i32 %1737 = sdiv i32 %1732, i32 %1736;
    store i32* %ans with i32 %1737;
    ubr ^b233;
^if.else57:
    i32 %1738 = load i32* %y;
    i32 %1739 = srem i32 %1738, i32 2;
    i1 %1740 = scmp neq i32 %1739, i32 0;
    cbr i1 %1740(prob = 0.5), ^if.then120, ^b234;
^while.header73:
    i32 %1741 = load i32* %i;
    i1 %1742 = scmp lt i32 %1741, i32 16;
    i32 %1743 = zext i1 %1742 to i32;
    i1 %1744 = scmp neq i32 %1743, i32 0;
    cbr i1 %1744(prob = 0.97), ^while.body73, ^b246;
^if.then111:
    i32 %1745 = load i32* %y;
    i32 %1746 = srem i32 %1745, i32 2;
    i1 %1747 = scmp eq i32 %1746, i32 0;
    i32 %1748 = zext i1 %1747 to i32;
    i1 %1749 = scmp neq i32 %1748, i32 0;
    cbr i1 %1749(prob = 0.5), ^if.then121, ^b235;
^if.then112:
    i32 %1750 = load i32* %x;
    i32 %1751 = load i32* %y;
    i64 %1752 = sext i32 %1751 to i64;
    i32* %1753 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1752];
    i32 %1754 = load i32* %1753;
    i32 %1755 = sdiv i32 %1750, i32 %1754;
    store i32* %x with i32 %1755;
    i32 %1756 = load i32* %x;
    i32 %1757 = add i32 %1756, i32 65536;
    i32 %1758 = load i32* %y;
    i32 %1759 = sub i32 15, i32 %1758;
    i32 %1760 = add i32 %1759, i32 1;
    i64 %1761 = sext i32 %1760 to i64;
    i32* %1762 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1761];
    i32 %1763 = load i32* %1762;
    i32 %1764 = sub i32 %1757, i32 %1763;
    store i32* %ans with i32 %1764;
    ubr ^b242;
^while.header74:
    i32 %1765 = load i32* %i;
    i1 %1766 = scmp lt i32 %1765, i32 16;
    i32 %1767 = zext i1 %1766 to i32;
    i1 %1768 = scmp neq i32 %1767, i32 0;
    cbr i1 %1768(prob = 0.97), ^while.body74, ^b237;
^while.header75:
    i32 %1769 = load i32* %i;
    i1 %1770 = scmp lt i32 %1769, i32 16;
    i32 %1771 = zext i1 %1770 to i32;
    i1 %1772 = scmp neq i32 %1771, i32 0;
    cbr i1 %1772(prob = 0.97), ^while.body75, ^b238;
^b220:
    i32 %1773 = load i32* %x;
    i32 %1774 = sdiv i32 %1773, i32 2;
    store i32* %x with i32 %1774;
    i32 %1775 = load i32* %y;
    i32 %1776 = sdiv i32 %1775, i32 2;
    store i32* %y with i32 %1776;
    i32 %1777 = load i32* %i;
    i32 %1778 = add i32 %1777, i32 1;
    store i32* %i with i32 %1778;
    ubr ^while.header57;
^while.body67:
    i32 %1779 = load i32* %x;
    i32 %1780 = srem i32 %1779, i32 2;
    i1 %1781 = scmp neq i32 %1780, i32 0;
    cbr i1 %1781(prob = 0.5), ^b230, ^b247;
^while.body68:
    i32 %1782 = load i32* %x;
    i32 %1783 = srem i32 %1782, i32 2;
    i1 %1784 = scmp neq i32 %1783, i32 0;
    cbr i1 %1784(prob = 0.5), ^b231, ^b248;
^b221:
    ubr ^b201;
^if.else58:
    i32 %1785 = load i32* %y;
    i32 %1786 = srem i32 %1785, i32 2;
    i1 %1787 = scmp neq i32 %1786, i32 0;
    cbr i1 %1787(prob = 0.5), ^if.then122, ^b241;
^while.header76:
    i32 %1788 = load i32* %i;
    i1 %1789 = scmp lt i32 %1788, i32 16;
    i32 %1790 = zext i1 %1789 to i32;
    i1 %1791 = scmp neq i32 %1790, i32 0;
    cbr i1 %1791(prob = 0.97), ^while.body76, ^b249;
^b222:
    ubr ^b236;
^if.else59:
    i32 %1792 = load i32* %x;
    i32 %1793 = load i32* %y;
    i64 %1794 = sext i32 %1793 to i64;
    i32* %1795 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1794];
    i32 %1796 = load i32* %1795;
    i32 %1797 = sdiv i32 %1792, i32 %1796;
    store i32* %ans with i32 %1797;
    ubr ^b242;
^if.then113:
    i32 %1798 = load i32* %x;
    i1 %1799 = scmp lt i32 %1798, i32 0;
    i32 %1800 = zext i1 %1799 to i32;
    i1 %1801 = scmp neq i32 %1800, i32 0;
    cbr i1 %1801(prob = 0.5), ^if.then123, ^if.else62;
^while.header77:
    i32 %1802 = load i32* %i;
    i1 %1803 = scmp lt i32 %1802, i32 16;
    i32 %1804 = zext i1 %1803 to i32;
    i1 %1805 = scmp neq i32 %1804, i32 0;
    cbr i1 %1805(prob = 0.97), ^while.body77, ^b243;
^while.body69:
    i32 %1806 = load i32* %x;
    i32 %1807 = srem i32 %1806, i32 2;
    i1 %1808 = scmp neq i32 %1807, i32 0;
    cbr i1 %1808(prob = 0.5), ^b239, ^b250;
^if.else60:
    i32 %1809 = load i32* %y;
    i1 %1810 = scmp gt i32 %1809, i32 0;
    i32 %1811 = zext i1 %1810 to i32;
    i1 %1812 = scmp neq i32 %1811, i32 0;
    cbr i1 %1812(prob = 0.5), ^if.then125, ^if.else63;
^if.then114:
    i32 %1813 = load i32* %x;
    i1 %1814 = scmp lt i32 %1813, i32 0;
    i32 %1815 = zext i1 %1814 to i32;
    i1 %1816 = scmp neq i32 %1815, i32 0;
    cbr i1 %1816(prob = 0.5), ^if.then124, ^if.else64;
^if.else61:
    i32 %1817 = load i32* %y;
    i1 %1818 = scmp gt i32 %1817, i32 0;
    i32 %1819 = zext i1 %1818 to i32;
    i1 %1820 = scmp neq i32 %1819, i32 0;
    cbr i1 %1820(prob = 0.5), ^if.then126, ^if.else65;
^if.then115:
    i32 %1821 = load i32* %ans;
    i32 %1822 = load i32* %i;
    i64 %1823 = sext i32 %1822 to i64;
    i32* %1824 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1823];
    i32 %1825 = load i32* %1824;
    i32 %1826 = mul i32 1, i32 %1825;
    i32 %1827 = add i32 %1821, i32 %1826;
    store i32* %ans with i32 %1827;
    ubr ^b223;
^b223:
    ubr ^b251;
^if.then116:
    i32 %1828 = load i32* %ans;
    i32 %1829 = load i32* %i;
    i64 %1830 = sext i32 %1829 to i64;
    i32* %1831 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1830];
    i32 %1832 = load i32* %1831;
    i32 %1833 = mul i32 1, i32 %1832;
    i32 %1834 = add i32 %1828, i32 %1833;
    store i32* %ans with i32 %1834;
    ubr ^b225;
^if.then117:
    i32 %1835 = load i32* %ans;
    i32 %1836 = load i32* %i;
    i64 %1837 = sext i32 %1836 to i64;
    i32* %1838 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1837];
    i32 %1839 = load i32* %1838;
    i32 %1840 = mul i32 1, i32 %1839;
    i32 %1841 = add i32 %1835, i32 %1840;
    store i32* %ans with i32 %1841;
    ubr ^b226;
^if.then118:
    i32 %1842 = load i32* %ans;
    i32 %1843 = load i32* %i;
    i64 %1844 = sext i32 %1843 to i64;
    i32* %1845 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1844];
    i32 %1846 = load i32* %1845;
    i32 %1847 = mul i32 1, i32 %1846;
    i32 %1848 = add i32 %1842, i32 %1847;
    store i32* %ans with i32 %1848;
    ubr ^b228;
^b224:
    i32 %1849 = load i32* %y;
    i32 %1850 = srem i32 %1849, i32 2;
    i1 %1851 = scmp neq i32 %1850, i32 0;
    ubr ^b244;
^b225:
    ubr ^b251;
^b226:
    ubr ^b253;
^if.then119:
    i32 %1852 = load i32* %ans;
    i32 %1853 = load i32* %i;
    i64 %1854 = sext i32 %1853 to i64;
    i32* %1855 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1854];
    i32 %1856 = load i32* %1855;
    i32 %1857 = mul i32 1, i32 %1856;
    i32 %1858 = add i32 %1852, i32 %1857;
    store i32* %ans with i32 %1858;
    ubr ^b232;
^b227:
    i32 %1859 = load i32* %ans;
    store i32* %mr3 with i32 %1859;
    ubr ^while.header22;
^b228:
    ubr ^b255;
^if.then120:
    i32 %1860 = load i32* %ans;
    i32 %1861 = load i32* %i;
    i64 %1862 = sext i32 %1861 to i64;
    i32* %1863 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1862];
    i32 %1864 = load i32* %1863;
    i32 %1865 = mul i32 1, i32 %1864;
    i32 %1866 = add i32 %1860, i32 %1865;
    store i32* %ans with i32 %1866;
    ubr ^b234;
^if.then121:
    i32 %1867 = load i32* %ans;
    i32 %1868 = load i32* %i;
    i64 %1869 = sext i32 %1868 to i64;
    i32* %1870 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1869];
    i32 %1871 = load i32* %1870;
    i32 %1872 = mul i32 1, i32 %1871;
    i32 %1873 = add i32 %1867, i32 %1872;
    store i32* %ans with i32 %1873;
    ubr ^b235;
^b229:
    i32 %1874 = load i32* %ans;
    store i32* %sum3 with i32 %1874;
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %1875 = load i32* %al3;
    store i32* %x with i32 %1875;
    i32 %1876 = load i32* %c3;
    store i32* %y with i32 %1876;
    ubr ^while.header78;
^b230:
    i32 %1877 = load i32* %y;
    i32 %1878 = srem i32 %1877, i32 2;
    i1 %1879 = scmp neq i32 %1878, i32 0;
    ubr ^b247;
^b231:
    i32 %1880 = load i32* %y;
    i32 %1881 = srem i32 %1880, i32 2;
    i1 %1882 = scmp neq i32 %1881, i32 0;
    ubr ^b248;
^while.body70:
    i32 %1883 = load i32* %x;
    i32 %1884 = srem i32 %1883, i32 2;
    i1 %1885 = scmp neq i32 %1884, i32 0;
    cbr i1 %1885(prob = 0.5), ^b252, ^b261;
^b232:
    ubr ^b253;
^b233:
    ubr ^b219;
^b234:
    ubr ^b255;
^b235:
    ubr ^b257;
^if.then122:
    i32 %1886 = load i32* %ans;
    i32 %1887 = load i32* %i;
    i64 %1888 = sext i32 %1887 to i64;
    i32* %1889 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1888];
    i32 %1890 = load i32* %1889;
    i32 %1891 = mul i32 1, i32 %1890;
    i32 %1892 = add i32 %1886, i32 %1891;
    store i32* %ans with i32 %1892;
    ubr ^b241;
^b236:
    i32 %1893 = load i32* %ans;
    store i32* %mr2 with i32 %1893;
    ubr ^while.header23;
^while.body71:
    i32 %1894 = load i32* %x;
    i32 %1895 = srem i32 %1894, i32 2;
    i1 %1896 = scmp neq i32 %1895, i32 0;
    cbr i1 %1896(prob = 0.5), ^if.then131, ^if.else69;
^b237:
    i32 %1897 = load i32* %ans;
    store i32* %sum2 with i32 %1897;
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %1898 = load i32* %al2;
    store i32* %x with i32 %1898;
    i32 %1899 = load i32* %c2;
    store i32* %y with i32 %1899;
    ubr ^while.header79;
^if.then123:
    store i32* %ans with i32 65535;
    ubr ^b259;
^b238:
    i32 %1900 = load i32* %ans;
    store i32* %sum1 with i32 %1900;
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %1901 = load i32* %al1;
    store i32* %x with i32 %1901;
    i32 %1902 = load i32* %c1;
    store i32* %y with i32 %1902;
    ubr ^while.header80;
^b239:
    i32 %1903 = load i32* %y;
    i32 %1904 = srem i32 %1903, i32 2;
    i1 %1905 = scmp neq i32 %1904, i32 0;
    ubr ^b250;
^b240:
    i32 %1906 = load i32* %ans;
    store i32* %c7 with i32 %1906;
    i1 %1907 = scmp gt i32 1, i32 15;
    i32 %1908 = zext i1 %1907 to i32;
    i1 %1909 = scmp neq i32 %1908, i32 0;
    cbr i1 %1909(prob = 0.5), ^if.then127, ^if.else66;
^while.body72:
    i32 %1910 = load i32* %x;
    i32 %1911 = srem i32 %1910, i32 2;
    i1 %1912 = scmp neq i32 %1911, i32 0;
    cbr i1 %1912(prob = 0.5), ^b254, ^b265;
^while.body73:
    i32 %1913 = load i32* %x;
    i32 %1914 = srem i32 %1913, i32 2;
    i1 %1915 = scmp neq i32 %1914, i32 0;
    cbr i1 %1915(prob = 0.5), ^b256, ^b266;
^b241:
    ubr ^b257;
^b242:
    ubr ^b222;
^while.body74:
    i32 %1916 = load i32* %x;
    i32 %1917 = srem i32 %1916, i32 2;
    i1 %1918 = scmp neq i32 %1917, i32 0;
    cbr i1 %1918(prob = 0.5), ^if.then135, ^if.else71;
^if.else62:
    store i32* %ans with i32 0;
    ubr ^b259;
^while.body75:
    i32 %1919 = load i32* %x;
    i32 %1920 = srem i32 %1919, i32 2;
    i1 %1921 = scmp neq i32 %1920, i32 0;
    cbr i1 %1921(prob = 0.5), ^if.then137, ^if.else73;
^b243:
    i32 %1922 = load i32* %ans;
    store i32* %sum with i32 %1922;
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %1923 = load i32* %al;
    store i32* %x with i32 %1923;
    i32 %1924 = load i32* %c;
    store i32* %y with i32 %1924;
    ubr ^while.header81;
^if.then124:
    store i32* %ans with i32 65535;
    ubr ^b262;
^b244:
    i1 %1925 = phi [^b224, i1 %1851] [^while.body66, i1 false];
    i32 %1926 = zext i1 %1925 to i32;
    i1 %1927 = scmp neq i32 %1926, i32 0;
    cbr i1 %1927(prob = 0.5), ^if.then128, ^b260;
^b245:
    i32 %1928 = load i32* %ans;
    store i32* %c6 with i32 %1928;
    i1 %1929 = scmp gt i32 1, i32 15;
    i32 %1930 = zext i1 %1929 to i32;
    i1 %1931 = scmp neq i32 %1930, i32 0;
    cbr i1 %1931(prob = 0.5), ^if.then129, ^if.else67;
^b246:
    i32 %1932 = load i32* %ans;
    store i32* %c5 with i32 %1932;
    i1 %1933 = scmp gt i32 1, i32 15;
    i32 %1934 = zext i1 %1933 to i32;
    i1 %1935 = scmp neq i32 %1934, i32 0;
    cbr i1 %1935(prob = 0.5), ^if.then130, ^if.else68;
^while.body76:
    i32 %1936 = load i32* %x;
    i32 %1937 = srem i32 %1936, i32 2;
    i1 %1938 = scmp neq i32 %1937, i32 0;
    cbr i1 %1938(prob = 0.5), ^b258, ^b269;
^if.else63:
    i32 %1939 = load i32* %x;
    store i32* %ans with i32 %1939;
    ubr ^b267;
^while.body77:
    i32 %1940 = load i32* %x;
    i32 %1941 = srem i32 %1940, i32 2;
    i1 %1942 = scmp neq i32 %1941, i32 0;
    cbr i1 %1942(prob = 0.5), ^if.then139, ^if.else74;
^if.else64:
    store i32* %ans with i32 0;
    ubr ^b262;
^b247:
    i1 %1943 = phi [^b230, i1 %1879] [^while.body67, i1 false];
    i32 %1944 = zext i1 %1943 to i32;
    i1 %1945 = scmp neq i32 %1944, i32 0;
    cbr i1 %1945(prob = 0.5), ^if.then132, ^b263;
^b248:
    i1 %1946 = phi [^b231, i1 %1882] [^while.body68, i1 false];
    i32 %1947 = zext i1 %1946 to i32;
    i1 %1948 = scmp neq i32 %1947, i32 0;
    cbr i1 %1948(prob = 0.5), ^if.then133, ^b264;
^b249:
    i32 %1949 = load i32* %ans;
    store i32* %c4 with i32 %1949;
    i1 %1950 = scmp gt i32 1, i32 15;
    i32 %1951 = zext i1 %1950 to i32;
    i1 %1952 = scmp neq i32 %1951, i32 0;
    cbr i1 %1952(prob = 0.5), ^if.then134, ^if.else70;
^if.then125:
    i32 %1953 = load i32* %x;
    i1 %1954 = scmp gt i32 %1953, i32 32767;
    i32 %1955 = zext i1 %1954 to i32;
    i1 %1956 = scmp neq i32 %1955, i32 0;
    cbr i1 %1956(prob = 0.5), ^if.then136, ^if.else72;
^if.else65:
    i32 %1957 = load i32* %x;
    store i32* %ans with i32 %1957;
    ubr ^b270;
^b250:
    i1 %1958 = phi [^b239, i1 %1905] [^while.body69, i1 false];
    i32 %1959 = zext i1 %1958 to i32;
    i1 %1960 = scmp neq i32 %1959, i32 0;
    cbr i1 %1960(prob = 0.5), ^if.then138, ^b268;
^if.then126:
    i32 %1961 = load i32* %x;
    i1 %1962 = scmp gt i32 %1961, i32 32767;
    i32 %1963 = zext i1 %1962 to i32;
    i1 %1964 = scmp neq i32 %1963, i32 0;
    cbr i1 %1964(prob = 0.5), ^if.then140, ^if.else75;
^b251:
    i32 %1965 = load i32* %x;
    i32 %1966 = sdiv i32 %1965, i32 2;
    store i32* %x with i32 %1966;
    i32 %1967 = load i32* %y;
    i32 %1968 = sdiv i32 %1967, i32 2;
    store i32* %y with i32 %1968;
    i32 %1969 = load i32* %i;
    i32 %1970 = add i32 %1969, i32 1;
    store i32* %i with i32 %1970;
    ubr ^while.header58;
^b252:
    i32 %1971 = load i32* %y;
    i32 %1972 = srem i32 %1971, i32 2;
    i1 %1973 = scmp neq i32 %1972, i32 0;
    ubr ^b261;
^if.then127:
    store i32* %ans with i32 0;
    ubr ^b271;
^b253:
    i32 %1974 = load i32* %x;
    i32 %1975 = sdiv i32 %1974, i32 2;
    store i32* %x with i32 %1975;
    i32 %1976 = load i32* %y;
    i32 %1977 = sdiv i32 %1976, i32 2;
    store i32* %y with i32 %1977;
    i32 %1978 = load i32* %i;
    i32 %1979 = add i32 %1978, i32 1;
    store i32* %i with i32 %1979;
    ubr ^while.header59;
^b254:
    i32 %1980 = load i32* %y;
    i32 %1981 = srem i32 %1980, i32 2;
    i1 %1982 = scmp neq i32 %1981, i32 0;
    ubr ^b265;
^b255:
    i32 %1983 = load i32* %x;
    i32 %1984 = sdiv i32 %1983, i32 2;
    store i32* %x with i32 %1984;
    i32 %1985 = load i32* %y;
    i32 %1986 = sdiv i32 %1985, i32 2;
    store i32* %y with i32 %1986;
    i32 %1987 = load i32* %i;
    i32 %1988 = add i32 %1987, i32 1;
    store i32* %i with i32 %1988;
    ubr ^while.header60;
^b256:
    i32 %1989 = load i32* %y;
    i32 %1990 = srem i32 %1989, i32 2;
    i1 %1991 = scmp neq i32 %1990, i32 0;
    ubr ^b266;
^if.then128:
    i32 %1992 = load i32* %ans;
    i32 %1993 = load i32* %i;
    i64 %1994 = sext i32 %1993 to i64;
    i32* %1995 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %1994];
    i32 %1996 = load i32* %1995;
    i32 %1997 = mul i32 1, i32 %1996;
    i32 %1998 = add i32 %1992, i32 %1997;
    store i32* %ans with i32 %1998;
    ubr ^b260;
^if.else66:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %1999 = load i32* %c7;
    i32* %2000 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 1];
    i32 %2001 = load i32* %2000;
    i32 %2002 = mul i32 %1999, i32 %2001;
    store i32* %x with i32 %2002;
    store i32* %y with i32 65535;
    ubr ^while.header82;
^if.then129:
    store i32* %ans with i32 0;
    ubr ^b274;
^if.then130:
    store i32* %ans with i32 0;
    ubr ^b275;
^b257:
    i32 %2003 = load i32* %x;
    i32 %2004 = sdiv i32 %2003, i32 2;
    store i32* %x with i32 %2004;
    i32 %2005 = load i32* %y;
    i32 %2006 = sdiv i32 %2005, i32 2;
    store i32* %y with i32 %2006;
    i32 %2007 = load i32* %i;
    i32 %2008 = add i32 %2007, i32 1;
    store i32* %i with i32 %2008;
    ubr ^while.header62;
^b258:
    i32 %2009 = load i32* %y;
    i32 %2010 = srem i32 %2009, i32 2;
    i1 %2011 = scmp neq i32 %2010, i32 0;
    ubr ^b269;
^if.then131:
    i32 %2012 = load i32* %y;
    i32 %2013 = srem i32 %2012, i32 2;
    i1 %2014 = scmp eq i32 %2013, i32 0;
    i32 %2015 = zext i1 %2014 to i32;
    i1 %2016 = scmp neq i32 %2015, i32 0;
    cbr i1 %2016(prob = 0.5), ^if.then141, ^b272;
^b259:
    ubr ^b278;
^b260:
    i32 %2017 = load i32* %x;
    i32 %2018 = sdiv i32 %2017, i32 2;
    store i32* %x with i32 %2018;
    i32 %2019 = load i32* %y;
    i32 %2020 = sdiv i32 %2019, i32 2;
    store i32* %y with i32 %2020;
    i32 %2021 = load i32* %i;
    i32 %2022 = add i32 %2021, i32 1;
    store i32* %i with i32 %2022;
    ubr ^while.header66;
^if.then132:
    i32 %2023 = load i32* %ans;
    i32 %2024 = load i32* %i;
    i64 %2025 = sext i32 %2024 to i64;
    i32* %2026 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %2025];
    i32 %2027 = load i32* %2026;
    i32 %2028 = mul i32 1, i32 %2027;
    i32 %2029 = add i32 %2023, i32 %2028;
    store i32* %ans with i32 %2029;
    ubr ^b263;
^if.then133:
    i32 %2030 = load i32* %ans;
    i32 %2031 = load i32* %i;
    i64 %2032 = sext i32 %2031 to i64;
    i32* %2033 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %2032];
    i32 %2034 = load i32* %2033;
    i32 %2035 = mul i32 1, i32 %2034;
    i32 %2036 = add i32 %2030, i32 %2035;
    store i32* %ans with i32 %2036;
    ubr ^b264;
^b261:
    i1 %2037 = phi [^b252, i1 %1973] [^while.body70, i1 false];
    i32 %2038 = zext i1 %2037 to i32;
    i1 %2039 = scmp neq i32 %2038, i32 0;
    cbr i1 %2039(prob = 0.5), ^if.then142, ^b273;
^if.else67:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %2040 = load i32* %c6;
    i32* %2041 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 1];
    i32 %2042 = load i32* %2041;
    i32 %2043 = mul i32 %2040, i32 %2042;
    store i32* %x with i32 %2043;
    store i32* %y with i32 65535;
    ubr ^while.header83;
^if.else68:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %2044 = load i32* %c5;
    i32* %2045 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 1];
    i32 %2046 = load i32* %2045;
    i32 %2047 = mul i32 %2044, i32 %2046;
    store i32* %x with i32 %2047;
    store i32* %y with i32 65535;
    ubr ^while.header84;
^if.then134:
    store i32* %ans with i32 0;
    ubr ^b282;
^if.else69:
    i32 %2048 = load i32* %y;
    i32 %2049 = srem i32 %2048, i32 2;
    i1 %2050 = scmp neq i32 %2049, i32 0;
    cbr i1 %2050(prob = 0.5), ^if.then143, ^b276;
^while.header78:
    i32 %2051 = load i32* %i;
    i1 %2052 = scmp lt i32 %2051, i32 16;
    i32 %2053 = zext i1 %2052 to i32;
    i1 %2054 = scmp neq i32 %2053, i32 0;
    cbr i1 %2054(prob = 0.97), ^while.body78, ^b289;
^if.then135:
    i32 %2055 = load i32* %y;
    i32 %2056 = srem i32 %2055, i32 2;
    i1 %2057 = scmp eq i32 %2056, i32 0;
    i32 %2058 = zext i1 %2057 to i32;
    i1 %2059 = scmp neq i32 %2058, i32 0;
    cbr i1 %2059(prob = 0.5), ^if.then144, ^b277;
^if.then136:
    i32 %2060 = load i32* %x;
    i32 %2061 = load i32* %y;
    i64 %2062 = sext i32 %2061 to i64;
    i32* %2063 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %2062];
    i32 %2064 = load i32* %2063;
    i32 %2065 = sdiv i32 %2060, i32 %2064;
    store i32* %x with i32 %2065;
    i32 %2066 = load i32* %x;
    i32 %2067 = add i32 %2066, i32 65536;
    i32 %2068 = load i32* %y;
    i32 %2069 = sub i32 15, i32 %2068;
    i32 %2070 = add i32 %2069, i32 1;
    i64 %2071 = sext i32 %2070 to i64;
    i32* %2072 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %2071];
    i32 %2073 = load i32* %2072;
    i32 %2074 = sub i32 %2067, i32 %2073;
    store i32* %ans with i32 %2074;
    ubr ^b284;
^if.then137:
    i32 %2075 = load i32* %y;
    i32 %2076 = srem i32 %2075, i32 2;
    i1 %2077 = scmp eq i32 %2076, i32 0;
    i32 %2078 = zext i1 %2077 to i32;
    i1 %2079 = scmp neq i32 %2078, i32 0;
    cbr i1 %2079(prob = 0.5), ^if.then145, ^b279;
^b262:
    ubr ^b287;
^b263:
    i32 %2080 = load i32* %x;
    i32 %2081 = sdiv i32 %2080, i32 2;
    store i32* %x with i32 %2081;
    i32 %2082 = load i32* %y;
    i32 %2083 = sdiv i32 %2082, i32 2;
    store i32* %y with i32 %2083;
    i32 %2084 = load i32* %i;
    i32 %2085 = add i32 %2084, i32 1;
    store i32* %i with i32 %2085;
    ubr ^while.header67;
^b264:
    i32 %2086 = load i32* %x;
    i32 %2087 = sdiv i32 %2086, i32 2;
    store i32* %x with i32 %2087;
    i32 %2088 = load i32* %y;
    i32 %2089 = sdiv i32 %2088, i32 2;
    store i32* %y with i32 %2089;
    i32 %2090 = load i32* %i;
    i32 %2091 = add i32 %2090, i32 1;
    store i32* %i with i32 %2091;
    ubr ^while.header68;
^if.then138:
    i32 %2092 = load i32* %ans;
    i32 %2093 = load i32* %i;
    i64 %2094 = sext i32 %2093 to i64;
    i32* %2095 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %2094];
    i32 %2096 = load i32* %2095;
    i32 %2097 = mul i32 1, i32 %2096;
    i32 %2098 = add i32 %2092, i32 %2097;
    store i32* %ans with i32 %2098;
    ubr ^b268;
^b265:
    i1 %2099 = phi [^b254, i1 %1982] [^while.body72, i1 false];
    i32 %2100 = zext i1 %2099 to i32;
    i1 %2101 = scmp neq i32 %2100, i32 0;
    cbr i1 %2101(prob = 0.5), ^if.then146, ^b280;
^b266:
    i1 %2102 = phi [^b256, i1 %1991] [^while.body73, i1 false];
    i32 %2103 = zext i1 %2102 to i32;
    i1 %2104 = scmp neq i32 %2103, i32 0;
    cbr i1 %2104(prob = 0.5), ^if.then147, ^b281;
^if.else70:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %2105 = load i32* %c4;
    i32* %2106 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 1];
    i32 %2107 = load i32* %2106;
    i32 %2108 = mul i32 %2105, i32 %2107;
    store i32* %x with i32 %2108;
    store i32* %y with i32 65535;
    ubr ^while.header85;
^if.else71:
    i32 %2109 = load i32* %y;
    i32 %2110 = srem i32 %2109, i32 2;
    i1 %2111 = scmp neq i32 %2110, i32 0;
    cbr i1 %2111(prob = 0.5), ^if.then148, ^b283;
^while.header79:
    i32 %2112 = load i32* %i;
    i1 %2113 = scmp lt i32 %2112, i32 16;
    i32 %2114 = zext i1 %2113 to i32;
    i1 %2115 = scmp neq i32 %2114, i32 0;
    cbr i1 %2115(prob = 0.97), ^while.body79, ^b292;
^b267:
    ubr ^b278;
^if.else72:
    i32 %2116 = load i32* %x;
    i32 %2117 = load i32* %y;
    i64 %2118 = sext i32 %2117 to i64;
    i32* %2119 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %2118];
    i32 %2120 = load i32* %2119;
    i32 %2121 = sdiv i32 %2116, i32 %2120;
    store i32* %ans with i32 %2121;
    ubr ^b284;
^if.else73:
    i32 %2122 = load i32* %y;
    i32 %2123 = srem i32 %2122, i32 2;
    i1 %2124 = scmp neq i32 %2123, i32 0;
    cbr i1 %2124(prob = 0.5), ^if.then149, ^b285;
^while.header80:
    i32 %2125 = load i32* %i;
    i1 %2126 = scmp lt i32 %2125, i32 16;
    i32 %2127 = zext i1 %2126 to i32;
    i1 %2128 = scmp neq i32 %2127, i32 0;
    cbr i1 %2128(prob = 0.97), ^while.body80, ^b293;
^if.then139:
    i32 %2129 = load i32* %y;
    i32 %2130 = srem i32 %2129, i32 2;
    i1 %2131 = scmp eq i32 %2130, i32 0;
    i32 %2132 = zext i1 %2131 to i32;
    i1 %2133 = scmp neq i32 %2132, i32 0;
    cbr i1 %2133(prob = 0.5), ^if.then150, ^b286;
^if.then140:
    i32 %2134 = load i32* %x;
    i32 %2135 = load i32* %y;
    i64 %2136 = sext i32 %2135 to i64;
    i32* %2137 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %2136];
    i32 %2138 = load i32* %2137;
    i32 %2139 = sdiv i32 %2134, i32 %2138;
    store i32* %x with i32 %2139;
    i32 %2140 = load i32* %x;
    i32 %2141 = add i32 %2140, i32 65536;
    i32 %2142 = load i32* %y;
    i32 %2143 = sub i32 15, i32 %2142;
    i32 %2144 = add i32 %2143, i32 1;
    i64 %2145 = sext i32 %2144 to i64;
    i32* %2146 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %2145];
    i32 %2147 = load i32* %2146;
    i32 %2148 = sub i32 %2141, i32 %2147;
    store i32* %ans with i32 %2148;
    ubr ^b291;
^b268:
    i32 %2149 = load i32* %x;
    i32 %2150 = sdiv i32 %2149, i32 2;
    store i32* %x with i32 %2150;
    i32 %2151 = load i32* %y;
    i32 %2152 = sdiv i32 %2151, i32 2;
    store i32* %y with i32 %2152;
    i32 %2153 = load i32* %i;
    i32 %2154 = add i32 %2153, i32 1;
    store i32* %i with i32 %2154;
    ubr ^while.header69;
^b269:
    i1 %2155 = phi [^b258, i1 %2011] [^while.body76, i1 false];
    i32 %2156 = zext i1 %2155 to i32;
    i1 %2157 = scmp neq i32 %2156, i32 0;
    cbr i1 %2157(prob = 0.5), ^if.then151, ^b288;
^if.else74:
    i32 %2158 = load i32* %y;
    i32 %2159 = srem i32 %2158, i32 2;
    i1 %2160 = scmp neq i32 %2159, i32 0;
    cbr i1 %2160(prob = 0.5), ^if.then152, ^b290;
^while.header81:
    i32 %2161 = load i32* %i;
    i1 %2162 = scmp lt i32 %2161, i32 16;
    i32 %2163 = zext i1 %2162 to i32;
    i1 %2164 = scmp neq i32 %2163, i32 0;
    cbr i1 %2164(prob = 0.97), ^while.body81, ^b294;
^b270:
    ubr ^b287;
^if.else75:
    i32 %2165 = load i32* %x;
    i32 %2166 = load i32* %y;
    i64 %2167 = sext i32 %2166 to i64;
    i32* %2168 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %2167];
    i32 %2169 = load i32* %2168;
    i32 %2170 = sdiv i32 %2165, i32 %2169;
    store i32* %ans with i32 %2170;
    ubr ^b291;
^if.then141:
    i32 %2171 = load i32* %ans;
    i32 %2172 = load i32* %i;
    i64 %2173 = sext i32 %2172 to i64;
    i32* %2174 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %2173];
    i32 %2175 = load i32* %2174;
    i32 %2176 = mul i32 1, i32 %2175;
    i32 %2177 = add i32 %2171, i32 %2176;
    store i32* %ans with i32 %2177;
    ubr ^b272;
^if.then142:
    i32 %2178 = load i32* %ans;
    i32 %2179 = load i32* %i;
    i64 %2180 = sext i32 %2179 to i64;
    i32* %2181 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %2180];
    i32 %2182 = load i32* %2181;
    i32 %2183 = mul i32 1, i32 %2182;
    i32 %2184 = add i32 %2178, i32 %2183;
    store i32* %ans with i32 %2184;
    ubr ^b273;
^b271:
    i32 %2185 = load i32* %ans;
    store i32* %c7 with i32 %2185;
    i32 %2186 = load i32* %sum7;
    store i32* %al7 with i32 %2186;
    ubr ^while.header47;
^b272:
    ubr ^b295;
^if.then143:
    i32 %2187 = load i32* %ans;
    i32 %2188 = load i32* %i;
    i64 %2189 = sext i32 %2188 to i64;
    i32* %2190 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %2189];
    i32 %2191 = load i32* %2190;
    i32 %2192 = mul i32 1, i32 %2191;
    i32 %2193 = add i32 %2187, i32 %2192;
    store i32* %ans with i32 %2193;
    ubr ^b276;
^if.then144:
    i32 %2194 = load i32* %ans;
    i32 %2195 = load i32* %i;
    i64 %2196 = sext i32 %2195 to i64;
    i32* %2197 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %2196];
    i32 %2198 = load i32* %2197;
    i32 %2199 = mul i32 1, i32 %2198;
    i32 %2200 = add i32 %2194, i32 %2199;
    store i32* %ans with i32 %2200;
    ubr ^b277;
^if.then145:
    i32 %2201 = load i32* %ans;
    i32 %2202 = load i32* %i;
    i64 %2203 = sext i32 %2202 to i64;
    i32* %2204 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %2203];
    i32 %2205 = load i32* %2204;
    i32 %2206 = mul i32 1, i32 %2205;
    i32 %2207 = add i32 %2201, i32 %2206;
    store i32* %ans with i32 %2207;
    ubr ^b279;
^b273:
    i32 %2208 = load i32* %x;
    i32 %2209 = sdiv i32 %2208, i32 2;
    store i32* %x with i32 %2209;
    i32 %2210 = load i32* %y;
    i32 %2211 = sdiv i32 %2210, i32 2;
    store i32* %y with i32 %2211;
    i32 %2212 = load i32* %i;
    i32 %2213 = add i32 %2212, i32 1;
    store i32* %i with i32 %2213;
    ubr ^while.header70;
^if.then146:
    i32 %2214 = load i32* %ans;
    i32 %2215 = load i32* %i;
    i64 %2216 = sext i32 %2215 to i64;
    i32* %2217 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %2216];
    i32 %2218 = load i32* %2217;
    i32 %2219 = mul i32 1, i32 %2218;
    i32 %2220 = add i32 %2214, i32 %2219;
    store i32* %ans with i32 %2220;
    ubr ^b280;
^b274:
    i32 %2221 = load i32* %ans;
    store i32* %c6 with i32 %2221;
    i32 %2222 = load i32* %sum6;
    store i32* %al6 with i32 %2222;
    ubr ^while.header50;
^if.then147:
    i32 %2223 = load i32* %ans;
    i32 %2224 = load i32* %i;
    i64 %2225 = sext i32 %2224 to i64;
    i32* %2226 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %2225];
    i32 %2227 = load i32* %2226;
    i32 %2228 = mul i32 1, i32 %2227;
    i32 %2229 = add i32 %2223, i32 %2228;
    store i32* %ans with i32 %2229;
    ubr ^b281;
^b275:
    i32 %2230 = load i32* %ans;
    store i32* %c5 with i32 %2230;
    i32 %2231 = load i32* %sum5;
    store i32* %al5 with i32 %2231;
    ubr ^while.header51;
^b276:
    ubr ^b295;
^b277:
    ubr ^b297;
^if.then148:
    i32 %2232 = load i32* %ans;
    i32 %2233 = load i32* %i;
    i64 %2234 = sext i32 %2233 to i64;
    i32* %2235 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %2234];
    i32 %2236 = load i32* %2235;
    i32 %2237 = mul i32 1, i32 %2236;
    i32 %2238 = add i32 %2232, i32 %2237;
    store i32* %ans with i32 %2238;
    ubr ^b283;
^b278:
    i32 %2239 = load i32* %ans;
    store i32* %mr1 with i32 %2239;
    ubr ^while.header34;
^b279:
    ubr ^b299;
^if.then149:
    i32 %2240 = load i32* %ans;
    i32 %2241 = load i32* %i;
    i64 %2242 = sext i32 %2241 to i64;
    i32* %2243 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %2242];
    i32 %2244 = load i32* %2243;
    i32 %2245 = mul i32 1, i32 %2244;
    i32 %2246 = add i32 %2240, i32 %2245;
    store i32* %ans with i32 %2246;
    ubr ^b285;
^if.then150:
    i32 %2247 = load i32* %ans;
    i32 %2248 = load i32* %i;
    i64 %2249 = sext i32 %2248 to i64;
    i32* %2250 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %2249];
    i32 %2251 = load i32* %2250;
    i32 %2252 = mul i32 1, i32 %2251;
    i32 %2253 = add i32 %2247, i32 %2252;
    store i32* %ans with i32 %2253;
    ubr ^b286;
^b280:
    i32 %2254 = load i32* %x;
    i32 %2255 = sdiv i32 %2254, i32 2;
    store i32* %x with i32 %2255;
    i32 %2256 = load i32* %y;
    i32 %2257 = sdiv i32 %2256, i32 2;
    store i32* %y with i32 %2257;
    i32 %2258 = load i32* %i;
    i32 %2259 = add i32 %2258, i32 1;
    store i32* %i with i32 %2259;
    ubr ^while.header72;
^b281:
    i32 %2260 = load i32* %x;
    i32 %2261 = sdiv i32 %2260, i32 2;
    store i32* %x with i32 %2261;
    i32 %2262 = load i32* %y;
    i32 %2263 = sdiv i32 %2262, i32 2;
    store i32* %y with i32 %2263;
    i32 %2264 = load i32* %i;
    i32 %2265 = add i32 %2264, i32 1;
    store i32* %i with i32 %2265;
    ubr ^while.header73;
^if.then151:
    i32 %2266 = load i32* %ans;
    i32 %2267 = load i32* %i;
    i64 %2268 = sext i32 %2267 to i64;
    i32* %2269 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %2268];
    i32 %2270 = load i32* %2269;
    i32 %2271 = mul i32 1, i32 %2270;
    i32 %2272 = add i32 %2266, i32 %2271;
    store i32* %ans with i32 %2272;
    ubr ^b288;
^b282:
    i32 %2273 = load i32* %ans;
    store i32* %c4 with i32 %2273;
    i32 %2274 = load i32* %sum4;
    store i32* %al4 with i32 %2274;
    ubr ^while.header53;
^while.body78:
    i32 %2275 = load i32* %x;
    i32 %2276 = srem i32 %2275, i32 2;
    i1 %2277 = scmp neq i32 %2276, i32 0;
    cbr i1 %2277(prob = 0.5), ^b296, ^b306;
^b283:
    ubr ^b297;
^b284:
    ubr ^b267;
^b285:
    ubr ^b299;
^b286:
    ubr ^b302;
^if.then152:
    i32 %2278 = load i32* %ans;
    i32 %2279 = load i32* %i;
    i64 %2280 = sext i32 %2279 to i64;
    i32* %2281 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %2280];
    i32 %2282 = load i32* %2281;
    i32 %2283 = mul i32 1, i32 %2282;
    i32 %2284 = add i32 %2278, i32 %2283;
    store i32* %ans with i32 %2284;
    ubr ^b290;
^b287:
    i32 %2285 = load i32* %ans;
    store i32* %mr with i32 %2285;
    ubr ^while.header35;
^while.header82:
    i32 %2286 = load i32* %i;
    i1 %2287 = scmp lt i32 %2286, i32 16;
    i32 %2288 = zext i1 %2287 to i32;
    i1 %2289 = scmp neq i32 %2288, i32 0;
    cbr i1 %2289(prob = 0.97), ^while.body82, ^b301;
^b288:
    i32 %2290 = load i32* %x;
    i32 %2291 = sdiv i32 %2290, i32 2;
    store i32* %x with i32 %2291;
    i32 %2292 = load i32* %y;
    i32 %2293 = sdiv i32 %2292, i32 2;
    store i32* %y with i32 %2293;
    i32 %2294 = load i32* %i;
    i32 %2295 = add i32 %2294, i32 1;
    store i32* %i with i32 %2295;
    ubr ^while.header76;
^b289:
    i32 %2296 = load i32* %ans;
    store i32* %c3 with i32 %2296;
    i1 %2297 = scmp gt i32 1, i32 15;
    i32 %2298 = zext i1 %2297 to i32;
    i1 %2299 = scmp neq i32 %2298, i32 0;
    cbr i1 %2299(prob = 0.5), ^if.then153, ^if.else76;
^while.body79:
    i32 %2300 = load i32* %x;
    i32 %2301 = srem i32 %2300, i32 2;
    i1 %2302 = scmp neq i32 %2301, i32 0;
    cbr i1 %2302(prob = 0.5), ^b298, ^b308;
^while.body80:
    i32 %2303 = load i32* %x;
    i32 %2304 = srem i32 %2303, i32 2;
    i1 %2305 = scmp neq i32 %2304, i32 0;
    cbr i1 %2305(prob = 0.5), ^b300, ^b309;
^b290:
    ubr ^b302;
^b291:
    ubr ^b270;
^while.header83:
    i32 %2306 = load i32* %i;
    i1 %2307 = scmp lt i32 %2306, i32 16;
    i32 %2308 = zext i1 %2307 to i32;
    i1 %2309 = scmp neq i32 %2308, i32 0;
    cbr i1 %2309(prob = 0.97), ^while.body83, ^b304;
^while.header84:
    i32 %2310 = load i32* %i;
    i1 %2311 = scmp lt i32 %2310, i32 16;
    i32 %2312 = zext i1 %2311 to i32;
    i1 %2313 = scmp neq i32 %2312, i32 0;
    cbr i1 %2313(prob = 0.97), ^while.body84, ^b305;
^b292:
    i32 %2314 = load i32* %ans;
    store i32* %c2 with i32 %2314;
    i1 %2315 = scmp gt i32 1, i32 15;
    i32 %2316 = zext i1 %2315 to i32;
    i1 %2317 = scmp neq i32 %2316, i32 0;
    cbr i1 %2317(prob = 0.5), ^if.then154, ^if.else77;
^b293:
    i32 %2318 = load i32* %ans;
    store i32* %c1 with i32 %2318;
    i1 %2319 = scmp gt i32 1, i32 15;
    i32 %2320 = zext i1 %2319 to i32;
    i1 %2321 = scmp neq i32 %2320, i32 0;
    cbr i1 %2321(prob = 0.5), ^if.then155, ^if.else78;
^while.body81:
    i32 %2322 = load i32* %x;
    i32 %2323 = srem i32 %2322, i32 2;
    i1 %2324 = scmp neq i32 %2323, i32 0;
    cbr i1 %2324(prob = 0.5), ^b303, ^b310;
^while.header85:
    i32 %2325 = load i32* %i;
    i1 %2326 = scmp lt i32 %2325, i32 16;
    i32 %2327 = zext i1 %2326 to i32;
    i1 %2328 = scmp neq i32 %2327, i32 0;
    cbr i1 %2328(prob = 0.97), ^while.body85, ^b307;
^b294:
    i32 %2329 = load i32* %ans;
    store i32* %c with i32 %2329;
    i1 %2330 = scmp gt i32 1, i32 15;
    i32 %2331 = zext i1 %2330 to i32;
    i1 %2332 = scmp neq i32 %2331, i32 0;
    cbr i1 %2332(prob = 0.5), ^if.then156, ^if.else79;
^b295:
    i32 %2333 = load i32* %x;
    i32 %2334 = sdiv i32 %2333, i32 2;
    store i32* %x with i32 %2334;
    i32 %2335 = load i32* %y;
    i32 %2336 = sdiv i32 %2335, i32 2;
    store i32* %y with i32 %2336;
    i32 %2337 = load i32* %i;
    i32 %2338 = add i32 %2337, i32 1;
    store i32* %i with i32 %2338;
    ubr ^while.header71;
^b296:
    i32 %2339 = load i32* %y;
    i32 %2340 = srem i32 %2339, i32 2;
    i1 %2341 = scmp neq i32 %2340, i32 0;
    ubr ^b306;
^if.then153:
    store i32* %ans with i32 0;
    ubr ^b312;
^b297:
    i32 %2342 = load i32* %x;
    i32 %2343 = sdiv i32 %2342, i32 2;
    store i32* %x with i32 %2343;
    i32 %2344 = load i32* %y;
    i32 %2345 = sdiv i32 %2344, i32 2;
    store i32* %y with i32 %2345;
    i32 %2346 = load i32* %i;
    i32 %2347 = add i32 %2346, i32 1;
    store i32* %i with i32 %2347;
    ubr ^while.header74;
^b298:
    i32 %2348 = load i32* %y;
    i32 %2349 = srem i32 %2348, i32 2;
    i1 %2350 = scmp neq i32 %2349, i32 0;
    ubr ^b308;
^b299:
    i32 %2351 = load i32* %x;
    i32 %2352 = sdiv i32 %2351, i32 2;
    store i32* %x with i32 %2352;
    i32 %2353 = load i32* %y;
    i32 %2354 = sdiv i32 %2353, i32 2;
    store i32* %y with i32 %2354;
    i32 %2355 = load i32* %i;
    i32 %2356 = add i32 %2355, i32 1;
    store i32* %i with i32 %2356;
    ubr ^while.header75;
^b300:
    i32 %2357 = load i32* %y;
    i32 %2358 = srem i32 %2357, i32 2;
    i1 %2359 = scmp neq i32 %2358, i32 0;
    ubr ^b309;
^b301:
    ubr ^b271;
^if.else76:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %2360 = load i32* %c3;
    i32* %2361 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 1];
    i32 %2362 = load i32* %2361;
    i32 %2363 = mul i32 %2360, i32 %2362;
    store i32* %x with i32 %2363;
    store i32* %y with i32 65535;
    ubr ^while.header86;
^if.then154:
    store i32* %ans with i32 0;
    ubr ^b316;
^if.then155:
    store i32* %ans with i32 0;
    ubr ^b317;
^b302:
    i32 %2364 = load i32* %x;
    i32 %2365 = sdiv i32 %2364, i32 2;
    store i32* %x with i32 %2365;
    i32 %2366 = load i32* %y;
    i32 %2367 = sdiv i32 %2366, i32 2;
    store i32* %y with i32 %2367;
    i32 %2368 = load i32* %i;
    i32 %2369 = add i32 %2368, i32 1;
    store i32* %i with i32 %2369;
    ubr ^while.header77;
^b303:
    i32 %2370 = load i32* %y;
    i32 %2371 = srem i32 %2370, i32 2;
    i1 %2372 = scmp neq i32 %2371, i32 0;
    ubr ^b310;
^while.body82:
    i32 %2373 = load i32* %x;
    i32 %2374 = srem i32 %2373, i32 2;
    i1 %2375 = scmp neq i32 %2374, i32 0;
    cbr i1 %2375(prob = 0.5), ^b311, ^b322;
^b304:
    ubr ^b274;
^b305:
    ubr ^b275;
^b306:
    i1 %2376 = phi [^b296, i1 %2341] [^while.body78, i1 false];
    i32 %2377 = zext i1 %2376 to i32;
    i1 %2378 = scmp neq i32 %2377, i32 0;
    cbr i1 %2378(prob = 0.5), ^if.then157, ^b315;
^if.else77:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %2379 = load i32* %c2;
    i32* %2380 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 1];
    i32 %2381 = load i32* %2380;
    i32 %2382 = mul i32 %2379, i32 %2381;
    store i32* %x with i32 %2382;
    store i32* %y with i32 65535;
    ubr ^while.header87;
^if.else78:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %2383 = load i32* %c1;
    i32* %2384 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 1];
    i32 %2385 = load i32* %2384;
    i32 %2386 = mul i32 %2383, i32 %2385;
    store i32* %x with i32 %2386;
    store i32* %y with i32 65535;
    ubr ^while.header88;
^if.then156:
    store i32* %ans with i32 0;
    ubr ^b321;
^while.body83:
    i32 %2387 = load i32* %x;
    i32 %2388 = srem i32 %2387, i32 2;
    i1 %2389 = scmp neq i32 %2388, i32 0;
    cbr i1 %2389(prob = 0.5), ^b313, ^b324;
^while.body84:
    i32 %2390 = load i32* %x;
    i32 %2391 = srem i32 %2390, i32 2;
    i1 %2392 = scmp neq i32 %2391, i32 0;
    cbr i1 %2392(prob = 0.5), ^b314, ^b325;
^b307:
    ubr ^b282;
^b308:
    i1 %2393 = phi [^b298, i1 %2350] [^while.body79, i1 false];
    i32 %2394 = zext i1 %2393 to i32;
    i1 %2395 = scmp neq i32 %2394, i32 0;
    cbr i1 %2395(prob = 0.5), ^if.then158, ^b319;
^b309:
    i1 %2396 = phi [^b300, i1 %2359] [^while.body80, i1 false];
    i32 %2397 = zext i1 %2396 to i32;
    i1 %2398 = scmp neq i32 %2397, i32 0;
    cbr i1 %2398(prob = 0.5), ^if.then159, ^b320;
^if.else79:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    i32 %2399 = load i32* %c;
    i32* %2400 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 1];
    i32 %2401 = load i32* %2400;
    i32 %2402 = mul i32 %2399, i32 %2401;
    store i32* %x with i32 %2402;
    store i32* %y with i32 65535;
    ubr ^while.header89;
^while.body85:
    i32 %2403 = load i32* %x;
    i32 %2404 = srem i32 %2403, i32 2;
    i1 %2405 = scmp neq i32 %2404, i32 0;
    cbr i1 %2405(prob = 0.5), ^b318, ^b326;
^b310:
    i1 %2406 = phi [^b303, i1 %2372] [^while.body81, i1 false];
    i32 %2407 = zext i1 %2406 to i32;
    i1 %2408 = scmp neq i32 %2407, i32 0;
    cbr i1 %2408(prob = 0.5), ^if.then160, ^b323;
^b311:
    i32 %2409 = load i32* %y;
    i32 %2410 = srem i32 %2409, i32 2;
    i1 %2411 = scmp neq i32 %2410, i32 0;
    ubr ^b322;
^if.then157:
    i32 %2412 = load i32* %ans;
    i32 %2413 = load i32* %i;
    i64 %2414 = sext i32 %2413 to i64;
    i32* %2415 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %2414];
    i32 %2416 = load i32* %2415;
    i32 %2417 = mul i32 1, i32 %2416;
    i32 %2418 = add i32 %2412, i32 %2417;
    store i32* %ans with i32 %2418;
    ubr ^b315;
^b312:
    i32 %2419 = load i32* %ans;
    store i32* %c3 with i32 %2419;
    i32 %2420 = load i32* %sum3;
    store i32* %al3 with i32 %2420;
    ubr ^while.header61;
^b313:
    i32 %2421 = load i32* %y;
    i32 %2422 = srem i32 %2421, i32 2;
    i1 %2423 = scmp neq i32 %2422, i32 0;
    ubr ^b324;
^b314:
    i32 %2424 = load i32* %y;
    i32 %2425 = srem i32 %2424, i32 2;
    i1 %2426 = scmp neq i32 %2425, i32 0;
    ubr ^b325;
^b315:
    i32 %2427 = load i32* %x;
    i32 %2428 = sdiv i32 %2427, i32 2;
    store i32* %x with i32 %2428;
    i32 %2429 = load i32* %y;
    i32 %2430 = sdiv i32 %2429, i32 2;
    store i32* %y with i32 %2430;
    i32 %2431 = load i32* %i;
    i32 %2432 = add i32 %2431, i32 1;
    store i32* %i with i32 %2432;
    ubr ^while.header78;
^if.then158:
    i32 %2433 = load i32* %ans;
    i32 %2434 = load i32* %i;
    i64 %2435 = sext i32 %2434 to i64;
    i32* %2436 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %2435];
    i32 %2437 = load i32* %2436;
    i32 %2438 = mul i32 1, i32 %2437;
    i32 %2439 = add i32 %2433, i32 %2438;
    store i32* %ans with i32 %2439;
    ubr ^b319;
^b316:
    i32 %2440 = load i32* %ans;
    store i32* %c2 with i32 %2440;
    i32 %2441 = load i32* %sum2;
    store i32* %al2 with i32 %2441;
    ubr ^while.header63;
^if.then159:
    i32 %2442 = load i32* %ans;
    i32 %2443 = load i32* %i;
    i64 %2444 = sext i32 %2443 to i64;
    i32* %2445 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %2444];
    i32 %2446 = load i32* %2445;
    i32 %2447 = mul i32 1, i32 %2446;
    i32 %2448 = add i32 %2442, i32 %2447;
    store i32* %ans with i32 %2448;
    ubr ^b320;
^b317:
    i32 %2449 = load i32* %ans;
    store i32* %c1 with i32 %2449;
    i32 %2450 = load i32* %sum1;
    store i32* %al1 with i32 %2450;
    ubr ^while.header64;
^b318:
    i32 %2451 = load i32* %y;
    i32 %2452 = srem i32 %2451, i32 2;
    i1 %2453 = scmp neq i32 %2452, i32 0;
    ubr ^b326;
^b319:
    i32 %2454 = load i32* %x;
    i32 %2455 = sdiv i32 %2454, i32 2;
    store i32* %x with i32 %2455;
    i32 %2456 = load i32* %y;
    i32 %2457 = sdiv i32 %2456, i32 2;
    store i32* %y with i32 %2457;
    i32 %2458 = load i32* %i;
    i32 %2459 = add i32 %2458, i32 1;
    store i32* %i with i32 %2459;
    ubr ^while.header79;
^b320:
    i32 %2460 = load i32* %x;
    i32 %2461 = sdiv i32 %2460, i32 2;
    store i32* %x with i32 %2461;
    i32 %2462 = load i32* %y;
    i32 %2463 = sdiv i32 %2462, i32 2;
    store i32* %y with i32 %2463;
    i32 %2464 = load i32* %i;
    i32 %2465 = add i32 %2464, i32 1;
    store i32* %i with i32 %2465;
    ubr ^while.header80;
^if.then160:
    i32 %2466 = load i32* %ans;
    i32 %2467 = load i32* %i;
    i64 %2468 = sext i32 %2467 to i64;
    i32* %2469 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %2468];
    i32 %2470 = load i32* %2469;
    i32 %2471 = mul i32 1, i32 %2470;
    i32 %2472 = add i32 %2466, i32 %2471;
    store i32* %ans with i32 %2472;
    ubr ^b323;
^b321:
    i32 %2473 = load i32* %ans;
    store i32* %c with i32 %2473;
    i32 %2474 = load i32* %sum;
    store i32* %al with i32 %2474;
    ubr ^while.header65;
^b322:
    i1 %2475 = phi [^b311, i1 %2411] [^while.body82, i1 false];
    i32 %2476 = zext i1 %2475 to i32;
    i1 %2477 = scmp neq i32 %2476, i32 0;
    cbr i1 %2477(prob = 0.5), ^if.then161, ^b327;
^while.header86:
    i32 %2478 = load i32* %i;
    i1 %2479 = scmp lt i32 %2478, i32 16;
    i32 %2480 = zext i1 %2479 to i32;
    i1 %2481 = scmp neq i32 %2480, i32 0;
    cbr i1 %2481(prob = 0.97), ^while.body86, ^b328;
^b323:
    i32 %2482 = load i32* %x;
    i32 %2483 = sdiv i32 %2482, i32 2;
    store i32* %x with i32 %2483;
    i32 %2484 = load i32* %y;
    i32 %2485 = sdiv i32 %2484, i32 2;
    store i32* %y with i32 %2485;
    i32 %2486 = load i32* %i;
    i32 %2487 = add i32 %2486, i32 1;
    store i32* %i with i32 %2487;
    ubr ^while.header81;
^b324:
    i1 %2488 = phi [^b313, i1 %2423] [^while.body83, i1 false];
    i32 %2489 = zext i1 %2488 to i32;
    i1 %2490 = scmp neq i32 %2489, i32 0;
    cbr i1 %2490(prob = 0.5), ^if.then162, ^b329;
^b325:
    i1 %2491 = phi [^b314, i1 %2426] [^while.body84, i1 false];
    i32 %2492 = zext i1 %2491 to i32;
    i1 %2493 = scmp neq i32 %2492, i32 0;
    cbr i1 %2493(prob = 0.5), ^if.then163, ^b330;
^while.header87:
    i32 %2494 = load i32* %i;
    i1 %2495 = scmp lt i32 %2494, i32 16;
    i32 %2496 = zext i1 %2495 to i32;
    i1 %2497 = scmp neq i32 %2496, i32 0;
    cbr i1 %2497(prob = 0.97), ^while.body87, ^b331;
^while.header88:
    i32 %2498 = load i32* %i;
    i1 %2499 = scmp lt i32 %2498, i32 16;
    i32 %2500 = zext i1 %2499 to i32;
    i1 %2501 = scmp neq i32 %2500, i32 0;
    cbr i1 %2501(prob = 0.97), ^while.body88, ^b332;
^b326:
    i1 %2502 = phi [^b318, i1 %2453] [^while.body85, i1 false];
    i32 %2503 = zext i1 %2502 to i32;
    i1 %2504 = scmp neq i32 %2503, i32 0;
    cbr i1 %2504(prob = 0.5), ^if.then164, ^b333;
^while.header89:
    i32 %2505 = load i32* %i;
    i1 %2506 = scmp lt i32 %2505, i32 16;
    i32 %2507 = zext i1 %2506 to i32;
    i1 %2508 = scmp neq i32 %2507, i32 0;
    cbr i1 %2508(prob = 0.97), ^while.body89, ^b334;
^if.then161:
    i32 %2509 = load i32* %ans;
    i32 %2510 = load i32* %i;
    i64 %2511 = sext i32 %2510 to i64;
    i32* %2512 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %2511];
    i32 %2513 = load i32* %2512;
    i32 %2514 = mul i32 1, i32 %2513;
    i32 %2515 = add i32 %2509, i32 %2514;
    store i32* %ans with i32 %2515;
    ubr ^b327;
^b327:
    i32 %2516 = load i32* %x;
    i32 %2517 = sdiv i32 %2516, i32 2;
    store i32* %x with i32 %2517;
    i32 %2518 = load i32* %y;
    i32 %2519 = sdiv i32 %2518, i32 2;
    store i32* %y with i32 %2519;
    i32 %2520 = load i32* %i;
    i32 %2521 = add i32 %2520, i32 1;
    store i32* %i with i32 %2521;
    ubr ^while.header82;
^if.then162:
    i32 %2522 = load i32* %ans;
    i32 %2523 = load i32* %i;
    i64 %2524 = sext i32 %2523 to i64;
    i32* %2525 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %2524];
    i32 %2526 = load i32* %2525;
    i32 %2527 = mul i32 1, i32 %2526;
    i32 %2528 = add i32 %2522, i32 %2527;
    store i32* %ans with i32 %2528;
    ubr ^b329;
^if.then163:
    i32 %2529 = load i32* %ans;
    i32 %2530 = load i32* %i;
    i64 %2531 = sext i32 %2530 to i64;
    i32* %2532 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %2531];
    i32 %2533 = load i32* %2532;
    i32 %2534 = mul i32 1, i32 %2533;
    i32 %2535 = add i32 %2529, i32 %2534;
    store i32* %ans with i32 %2535;
    ubr ^b330;
^b328:
    ubr ^b312;
^b329:
    i32 %2536 = load i32* %x;
    i32 %2537 = sdiv i32 %2536, i32 2;
    store i32* %x with i32 %2537;
    i32 %2538 = load i32* %y;
    i32 %2539 = sdiv i32 %2538, i32 2;
    store i32* %y with i32 %2539;
    i32 %2540 = load i32* %i;
    i32 %2541 = add i32 %2540, i32 1;
    store i32* %i with i32 %2541;
    ubr ^while.header83;
^b330:
    i32 %2542 = load i32* %x;
    i32 %2543 = sdiv i32 %2542, i32 2;
    store i32* %x with i32 %2543;
    i32 %2544 = load i32* %y;
    i32 %2545 = sdiv i32 %2544, i32 2;
    store i32* %y with i32 %2545;
    i32 %2546 = load i32* %i;
    i32 %2547 = add i32 %2546, i32 1;
    store i32* %i with i32 %2547;
    ubr ^while.header84;
^if.then164:
    i32 %2548 = load i32* %ans;
    i32 %2549 = load i32* %i;
    i64 %2550 = sext i32 %2549 to i64;
    i32* %2551 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %2550];
    i32 %2552 = load i32* %2551;
    i32 %2553 = mul i32 1, i32 %2552;
    i32 %2554 = add i32 %2548, i32 %2553;
    store i32* %ans with i32 %2554;
    ubr ^b333;
^while.body86:
    i32 %2555 = load i32* %x;
    i32 %2556 = srem i32 %2555, i32 2;
    i1 %2557 = scmp neq i32 %2556, i32 0;
    cbr i1 %2557(prob = 0.5), ^b335, ^b339;
^b331:
    ubr ^b316;
^b332:
    ubr ^b317;
^b333:
    i32 %2558 = load i32* %x;
    i32 %2559 = sdiv i32 %2558, i32 2;
    store i32* %x with i32 %2559;
    i32 %2560 = load i32* %y;
    i32 %2561 = sdiv i32 %2560, i32 2;
    store i32* %y with i32 %2561;
    i32 %2562 = load i32* %i;
    i32 %2563 = add i32 %2562, i32 1;
    store i32* %i with i32 %2563;
    ubr ^while.header85;
^while.body87:
    i32 %2564 = load i32* %x;
    i32 %2565 = srem i32 %2564, i32 2;
    i1 %2566 = scmp neq i32 %2565, i32 0;
    cbr i1 %2566(prob = 0.5), ^b336, ^b340;
^while.body88:
    i32 %2567 = load i32* %x;
    i32 %2568 = srem i32 %2567, i32 2;
    i1 %2569 = scmp neq i32 %2568, i32 0;
    cbr i1 %2569(prob = 0.5), ^b337, ^b341;
^b334:
    ubr ^b321;
^while.body89:
    i32 %2570 = load i32* %x;
    i32 %2571 = srem i32 %2570, i32 2;
    i1 %2572 = scmp neq i32 %2571, i32 0;
    cbr i1 %2572(prob = 0.5), ^b338, ^b342;
^b335:
    i32 %2573 = load i32* %y;
    i32 %2574 = srem i32 %2573, i32 2;
    i1 %2575 = scmp neq i32 %2574, i32 0;
    ubr ^b339;
^b336:
    i32 %2576 = load i32* %y;
    i32 %2577 = srem i32 %2576, i32 2;
    i1 %2578 = scmp neq i32 %2577, i32 0;
    ubr ^b340;
^b337:
    i32 %2579 = load i32* %y;
    i32 %2580 = srem i32 %2579, i32 2;
    i1 %2581 = scmp neq i32 %2580, i32 0;
    ubr ^b341;
^b338:
    i32 %2582 = load i32* %y;
    i32 %2583 = srem i32 %2582, i32 2;
    i1 %2584 = scmp neq i32 %2583, i32 0;
    ubr ^b342;
^b339:
    i1 %2585 = phi [^b335, i1 %2575] [^while.body86, i1 false];
    i32 %2586 = zext i1 %2585 to i32;
    i1 %2587 = scmp neq i32 %2586, i32 0;
    cbr i1 %2587(prob = 0.5), ^if.then165, ^b343;
^b340:
    i1 %2588 = phi [^b336, i1 %2578] [^while.body87, i1 false];
    i32 %2589 = zext i1 %2588 to i32;
    i1 %2590 = scmp neq i32 %2589, i32 0;
    cbr i1 %2590(prob = 0.5), ^if.then166, ^b344;
^b341:
    i1 %2591 = phi [^b337, i1 %2581] [^while.body88, i1 false];
    i32 %2592 = zext i1 %2591 to i32;
    i1 %2593 = scmp neq i32 %2592, i32 0;
    cbr i1 %2593(prob = 0.5), ^if.then167, ^b345;
^b342:
    i1 %2594 = phi [^b338, i1 %2584] [^while.body89, i1 false];
    i32 %2595 = zext i1 %2594 to i32;
    i1 %2596 = scmp neq i32 %2595, i32 0;
    cbr i1 %2596(prob = 0.5), ^if.then168, ^b346;
^if.then165:
    i32 %2597 = load i32* %ans;
    i32 %2598 = load i32* %i;
    i64 %2599 = sext i32 %2598 to i64;
    i32* %2600 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %2599];
    i32 %2601 = load i32* %2600;
    i32 %2602 = mul i32 1, i32 %2601;
    i32 %2603 = add i32 %2597, i32 %2602;
    store i32* %ans with i32 %2603;
    ubr ^b343;
^b343:
    i32 %2604 = load i32* %x;
    i32 %2605 = sdiv i32 %2604, i32 2;
    store i32* %x with i32 %2605;
    i32 %2606 = load i32* %y;
    i32 %2607 = sdiv i32 %2606, i32 2;
    store i32* %y with i32 %2607;
    i32 %2608 = load i32* %i;
    i32 %2609 = add i32 %2608, i32 1;
    store i32* %i with i32 %2609;
    ubr ^while.header86;
^if.then166:
    i32 %2610 = load i32* %ans;
    i32 %2611 = load i32* %i;
    i64 %2612 = sext i32 %2611 to i64;
    i32* %2613 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %2612];
    i32 %2614 = load i32* %2613;
    i32 %2615 = mul i32 1, i32 %2614;
    i32 %2616 = add i32 %2610, i32 %2615;
    store i32* %ans with i32 %2616;
    ubr ^b344;
^if.then167:
    i32 %2617 = load i32* %ans;
    i32 %2618 = load i32* %i;
    i64 %2619 = sext i32 %2618 to i64;
    i32* %2620 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %2619];
    i32 %2621 = load i32* %2620;
    i32 %2622 = mul i32 1, i32 %2621;
    i32 %2623 = add i32 %2617, i32 %2622;
    store i32* %ans with i32 %2623;
    ubr ^b345;
^b344:
    i32 %2624 = load i32* %x;
    i32 %2625 = sdiv i32 %2624, i32 2;
    store i32* %x with i32 %2625;
    i32 %2626 = load i32* %y;
    i32 %2627 = sdiv i32 %2626, i32 2;
    store i32* %y with i32 %2627;
    i32 %2628 = load i32* %i;
    i32 %2629 = add i32 %2628, i32 1;
    store i32* %i with i32 %2629;
    ubr ^while.header87;
^b345:
    i32 %2630 = load i32* %x;
    i32 %2631 = sdiv i32 %2630, i32 2;
    store i32* %x with i32 %2631;
    i32 %2632 = load i32* %y;
    i32 %2633 = sdiv i32 %2632, i32 2;
    store i32* %y with i32 %2633;
    i32 %2634 = load i32* %i;
    i32 %2635 = add i32 %2634, i32 1;
    store i32* %i with i32 %2635;
    ubr ^while.header88;
^if.then168:
    i32 %2636 = load i32* %ans;
    i32 %2637 = load i32* %i;
    i64 %2638 = sext i32 %2637 to i64;
    i32* %2639 = getelementptr &([16 * i32]* @SHIFT_TABLE)[i64 0][i64 %2638];
    i32 %2640 = load i32* %2639;
    i32 %2641 = mul i32 1, i32 %2640;
    i32 %2642 = add i32 %2636, i32 %2641;
    store i32* %ans with i32 %2642;
    ubr ^b346;
^b346:
    i32 %2643 = load i32* %x;
    i32 %2644 = sdiv i32 %2643, i32 2;
    store i32* %x with i32 %2644;
    i32 %2645 = load i32* %y;
    i32 %2646 = sdiv i32 %2645, i32 2;
    store i32* %y with i32 %2646;
    i32 %2647 = load i32* %i;
    i32 %2648 = add i32 %2647, i32 1;
    store i32* %i with i32 %2648;
    ubr ^while.header89;
}
func @main() -> i32 { Entry } {
^entry:
    i32 %0 = call () -> i32 @long_func();
    ret i32 %0;
}
