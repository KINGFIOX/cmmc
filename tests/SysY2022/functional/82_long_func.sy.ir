internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [16 * i32]* %SHIFT_TABLE = alloc [16 * i32];
    i32* %0 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 0];
    store i32* %0 with i32 1;
    i32* %1 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 1];
    store i32* %1 with i32 2;
    i32* %2 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 2];
    store i32* %2 with i32 4;
    i32* %3 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 3];
    store i32* %3 with i32 8;
    i32* %4 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 4];
    store i32* %4 with i32 16;
    i32* %5 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 5];
    store i32* %5 with i32 32;
    i32* %6 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 6];
    store i32* %6 with i32 64;
    i32* %7 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 7];
    store i32* %7 with i32 128;
    i32* %8 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 8];
    store i32* %8 with i32 256;
    i32* %9 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 9];
    store i32* %9 with i32 512;
    i32* %10 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 10];
    store i32* %10 with i32 1024;
    i32* %11 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 11];
    store i32* %11 with i32 2048;
    i32* %12 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 12];
    store i32* %12 with i32 4096;
    i32* %13 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 13];
    store i32* %13 with i32 8192;
    i32* %14 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 14];
    store i32* %14 with i32 16384;
    i32* %15 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 15];
    store i32* %15 with i32 32768;
    ubr ^while.header;
  ^while.header:
    i32 %16 = phi [^entry, i32 2] [^if.then3, i32 %58] [^if.else1, i32 %58];
    i32 %17 = phi [^entry, i32 1] [^if.then3, i32 %38] [^if.else1, i32 %38];
    i32 %18 = phi [^entry, i32 0] [^if.then3, i32 %100] [^if.else1, i32 %114];
    i1 %19 = icmp sgt i32 %18, i32 0;
    cbr i1 %19(prob = 0.97), ^while.header1, ^b;
  ^b:
    call (i32) -> void @putint(i32 %17);
    call (i32) -> void @putch(i32 10);
    ubr ^while.header2;
  ^while.header1:
    i32 %20 = phi [^while.header, i32 0] [^b2, i32 %35];
    i32 %21 = phi [^while.header, i32 1] [^b2, i32 0];
    i32 %22 = phi [^while.header, i32 %18] [^b2, i32 %36];
    i32 %23 = phi [^while.header, i32 0] [^b2, i32 %37];
    i1 %24 = icmp slt i32 %23, i32 16;
    cbr i1 %24(prob = 0.97), ^while.body, ^b1;
  ^while.body:
    i32 %25 = and i32 %21, i32 %22;
    i1 %26 = ztrunc i32 %25 to i1;
    cbr i1 %26(prob = 0.5), ^if.then, ^b2;
  ^while.header2:
    i32 %27 = phi [^b, i32 2] [^if.then7, i32 %119] [^if.else3, i32 %119];
    i32 %28 = phi [^b, i32 1] [^if.then7, i32 %70] [^if.else3, i32 %70];
    i32 %29 = phi [^b, i32 1] [^if.then7, i32 %184] [^if.else3, i32 %196];
    i1 %30 = icmp sgt i32 %29, i32 0;
    cbr i1 %30(prob = 0.97), ^while.header3, ^b3;
  ^b1:
    i1 %31 = icmp neq i32 %20, i32 0;
    cbr i1 %31(prob = 0.5), ^while.header4, ^b4;
  ^if.then:
    i32* %32 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %23];
    i32 %33 = load i32* %32;
    i32 %34 = add i32 %20, i32 %33;
    ubr ^b2;
  ^b2:
    i32 %35 = phi [^while.body, i32 %20] [^if.then, i32 %34];
    i32 %36 = sdiv i32 %22, i32 2;
    i32 %37 = add i32 %23, i32 1;
    ubr ^while.header1;
  ^b3:
    call (i32) -> void @putint(i32 %28);
    call (i32) -> void @putch(i32 10);
    ubr ^while.header6;
  ^b4:
    i32 %38 = phi [^b1, i32 %17] [^while.header4, i32 %45];
    ubr ^while.header7;
  ^while.header3:
    i32 %39 = phi [^while.header2, i32 1] [^b6, i32 0];
    i32 %40 = phi [^while.header2, i32 %29] [^b6, i32 %66];
    i32 %41 = phi [^while.header2, i32 0] [^b6, i32 %65];
    i32 %42 = phi [^while.header2, i32 0] [^b6, i32 %67];
    i1 %43 = icmp slt i32 %42, i32 16;
    cbr i1 %43(prob = 0.97), ^while.body1, ^b5;
  ^while.header4:
    i32 %44 = phi [^b1, i32 %17] [^if.then11, i32 %150] [^if.else7, i32 %150];
    i32 %45 = phi [^b1, i32 0] [^if.then11, i32 %95] [^if.else7, i32 %95];
    i32 %46 = phi [^b1, i32 %16] [^if.then11, i32 %233] [^if.else7, i32 %260];
    i1 %47 = icmp neq i32 %46, i32 0;
    cbr i1 %47(prob = 0.97), ^while.header5, ^b4;
  ^while.body1:
    i32 %48 = and i32 %39, i32 %40;
    i1 %49 = ztrunc i32 %48 to i1;
    cbr i1 %49(prob = 0.5), ^if.then1, ^b6;
  ^while.header5:
    i32 %50 = phi [^while.header4, i32 0] [^b9, i32 %91];
    i32 %51 = phi [^while.header4, i32 1] [^b9, i32 0];
    i32 %52 = phi [^while.header4, i32 %46] [^b9, i32 %92];
    i32 %53 = phi [^while.header4, i32 0] [^b9, i32 %93];
    i1 %54 = icmp slt i32 %53, i32 16;
    cbr i1 %54(prob = 0.97), ^while.body2, ^b8;
  ^while.header6:
    i32 %55 = phi [^b3, i32 2] [^b10, i32 %94];
    i1 %56 = icmp slt i32 %55, i32 16;
    cbr i1 %56(prob = 0.97), ^while.header8, ^while.header11;
  ^while.header7:
    i32 %57 = phi [^b4, i32 %16] [^if.then17, i32 %215] [^if.else13, i32 %215];
    i32 %58 = phi [^b4, i32 0] [^if.then17, i32 %138] [^if.else13, i32 %138];
    i32 %59 = phi [^b4, i32 %16] [^if.then17, i32 %318] [^if.else13, i32 %348];
    i1 %60 = icmp neq i32 %59, i32 0;
    cbr i1 %60(prob = 0.97), ^while.header9, ^if.else;
  ^b5:
    i1 %61 = icmp neq i32 %41, i32 0;
    cbr i1 %61(prob = 0.5), ^while.header10, ^b7;
  ^if.then1:
    i32* %62 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %42];
    i32 %63 = load i32* %62;
    i32 %64 = add i32 %41, i32 %63;
    ubr ^b6;
  ^b6:
    i32 %65 = phi [^while.body1, i32 %41] [^if.then1, i32 %64];
    i32 %66 = sdiv i32 %40, i32 2;
    i32 %67 = add i32 %42, i32 1;
    ubr ^while.header3;
  ^while.body2:
    i32 %68 = and i32 %51, i32 %52;
    i1 %69 = ztrunc i32 %68 to i1;
    cbr i1 %69(prob = 0.5), ^if.then2, ^b9;
  ^b7:
    i32 %70 = phi [^b5, i32 %28] [^while.header10, i32 %81];
    ubr ^while.header15;
  ^while.header8:
    i32 %71 = phi [^while.header6, i32 2] [^if.then25, i32 %262] [^if.else17, i32 %262];
    i32 %72 = phi [^while.header6, i32 1] [^if.then25, i32 %178] [^if.else17, i32 %178];
    i32 %73 = phi [^while.header6, i32 %55] [^if.then25, i32 %415] [^if.else17, i32 %446];
    i1 %74 = icmp sgt i32 %73, i32 0;
    cbr i1 %74(prob = 0.97), ^while.header12, ^b10;
  ^while.header9:
    i32 %75 = phi [^while.header7, i32 0] [^b14, i32 %131];
    i32 %76 = phi [^while.header7, i32 1] [^b14, i32 0];
    i32 %77 = phi [^while.header7, i32 %59] [^b14, i32 %132];
    i32 %78 = phi [^while.header7, i32 0] [^b14, i32 %133];
    i1 %79 = icmp slt i32 %78, i32 16;
    cbr i1 %79(prob = 0.97), ^while.body3, ^b12;
  ^while.header10:
    i32 %80 = phi [^b5, i32 %28] [^if.then27, i32 %270] [^if.else20, i32 %270];
    i32 %81 = phi [^b5, i32 0] [^if.then27, i32 %179] [^if.else20, i32 %179];
    i32 %82 = phi [^b5, i32 %27] [^if.then27, i32 %422] [^if.else20, i32 %454];
    i1 %83 = icmp neq i32 %82, i32 0;
    cbr i1 %83(prob = 0.97), ^while.header13, ^b7;
  ^b8:
    i1 %84 = icmp neq i32 %50, i32 0;
    cbr i1 %84(prob = 0.5), ^while.header14, ^b11;
  ^while.header11:
    i32 %85 = phi [^while.header6, i32 0] [^b23, i32 %190];
    i1 %86 = icmp slt i32 %85, i32 16;
    cbr i1 %86(prob = 0.97), ^while.header16, ^b13;
  ^if.else:
    i1 %87 = icmp sgt i32 %18, i32 32767;
    cbr i1 %87(prob = 0.5), ^if.then3, ^if.else1;
  ^if.then2:
    i32* %88 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %53];
    i32 %89 = load i32* %88;
    i32 %90 = add i32 %50, i32 %89;
    ubr ^b9;
  ^b9:
    i32 %91 = phi [^while.body2, i32 %50] [^if.then2, i32 %90];
    i32 %92 = sdiv i32 %52, i32 2;
    i32 %93 = add i32 %53, i32 1;
    ubr ^while.header5;
  ^b10:
    call (i32) -> void @putint(i32 %72);
    call (i32) -> void @putch(i32 10);
    i32 %94 = add i32 %55, i32 1;
    ubr ^while.header6;
  ^b11:
    i32 %95 = phi [^b8, i32 %45] [^while.header14, i32 %115];
    ubr ^while.header19;
  ^if.then3:
    i32 %96 = load i32* %1;
    i32 %97 = sdiv i32 %18, i32 %96;
    i32 %98 = add i32 %97, i32 65536;
    i32 %99 = load i32* %15;
    i32 %100 = sub i32 %98, i32 %99;
    ubr ^while.header;
  ^while.body3:
    i32 %101 = and i32 %76, i32 %77;
    i1 %102 = ztrunc i32 %101 to i1;
    cbr i1 %102(prob = 0.5), ^if.then4, ^b14;
  ^while.header12:
    i32 %103 = phi [^while.header8, i32 1] [^b19, i32 0];
    i32 %104 = phi [^while.header8, i32 %73] [^b19, i32 %173];
    i32 %105 = phi [^while.header8, i32 0] [^b19, i32 %172];
    i32 %106 = phi [^while.header8, i32 0] [^b19, i32 %174];
    i1 %107 = icmp slt i32 %106, i32 16;
    cbr i1 %107(prob = 0.97), ^while.body4, ^b16;
  ^while.header13:
    i32 %108 = phi [^while.header10, i32 1] [^b20, i32 0];
    i32 %109 = phi [^while.header10, i32 %82] [^b20, i32 %176];
    i32 %110 = phi [^while.header10, i32 0] [^b20, i32 %175];
    i32 %111 = phi [^while.header10, i32 0] [^b20, i32 %177];
    i1 %112 = icmp slt i32 %111, i32 16;
    cbr i1 %112(prob = 0.97), ^while.body5, ^b17;
  ^if.else1:
    i32 %113 = load i32* %1;
    i32 %114 = sdiv i32 %18, i32 %113;
    ubr ^while.header;
  ^while.header14:
    i32 %115 = phi [^b8, i32 %45] [^while.header42, i32 %139];
    i32 %116 = phi [^b8, i32 %44] [^while.header42, i32 %359];
    i1 %117 = icmp neq i32 %116, i32 0;
    cbr i1 %117(prob = 0.97), ^while.header17, ^b11;
  ^while.header15:
    i32 %118 = phi [^b7, i32 %27] [^if.then40, i32 %364] [^if.else28, i32 %364];
    i32 %119 = phi [^b7, i32 0] [^if.then40, i32 %244] [^if.else28, i32 %244];
    i32 %120 = phi [^b7, i32 %27] [^if.then40, i32 %550] [^if.else28, i32 %590];
    i1 %121 = icmp neq i32 %120, i32 0;
    cbr i1 %121(prob = 0.97), ^while.header18, ^if.else2;
  ^b12:
    i1 %122 = icmp neq i32 %75, i32 0;
    cbr i1 %122(prob = 0.5), ^while.header20, ^b15;
  ^while.header16:
    i32 %123 = phi [^while.header11, i32 2] [^if.then41, i32 %368] [^if.else29, i32 %368];
    i32 %124 = phi [^while.header11, i32 1] [^if.then41, i32 %245] [^if.else29, i32 %245];
    i32 %125 = phi [^while.header11, i32 %85] [^if.then41, i32 %556] [^if.else29, i32 %592];
    i1 %126 = icmp sgt i32 %125, i32 0;
    cbr i1 %126(prob = 0.97), ^while.header21, ^b18;
  ^b13:
    i32 %127 = phi [^while.header11, i32 0] [^b18, i32 1];
    ret i32 %127;
  ^if.then4:
    i32* %128 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %78];
    i32 %129 = load i32* %128;
    i32 %130 = add i32 %75, i32 %129;
    ubr ^b14;
  ^b14:
    i32 %131 = phi [^while.body3, i32 %75] [^if.then4, i32 %130];
    i32 %132 = sdiv i32 %77, i32 2;
    i32 %133 = add i32 %78, i32 1;
    ubr ^while.header9;
  ^while.body4:
    i32 %134 = and i32 %103, i32 %104;
    i1 %135 = ztrunc i32 %134 to i1;
    cbr i1 %135(prob = 0.5), ^if.then5, ^b19;
  ^while.body5:
    i32 %136 = and i32 %108, i32 %109;
    i1 %137 = ztrunc i32 %136 to i1;
    cbr i1 %137(prob = 0.5), ^if.then6, ^b20;
  ^b15:
    i32 %138 = phi [^b12, i32 %58] [^while.header20, i32 %153];
    ubr ^while.header27;
  ^while.header17:
    i32 %139 = phi [^while.header14, i32 0] [^b30, i32 %297];
    i32 %140 = phi [^while.header14, i32 %116] [^b30, i32 %299];
    i32 %141 = phi [^while.header14, i32 %115] [^b30, i32 %298];
    i32 %142 = phi [^while.header14, i32 0] [^b30, i32 %300];
    i1 %143 = icmp slt i32 %142, i32 16;
    cbr i1 %143(prob = 0.97), ^while.body6, ^while.header26;
  ^while.header18:
    i32 %144 = phi [^while.header15, i32 0] [^b26, i32 %236];
    i32 %145 = phi [^while.header15, i32 1] [^b26, i32 0];
    i32 %146 = phi [^while.header15, i32 %120] [^b26, i32 %237];
    i32 %147 = phi [^while.header15, i32 0] [^b26, i32 %238];
    i1 %148 = icmp slt i32 %147, i32 16;
    cbr i1 %148(prob = 0.97), ^while.body7, ^b24;
  ^b16:
    i1 %149 = icmp neq i32 %105, i32 0;
    cbr i1 %149(prob = 0.5), ^while.header22, ^b21;
  ^while.header19:
    i32 %150 = phi [^b11, i32 %44] [^while.header51, i32 %197];
    i32 %151 = phi [^b11, i32 %44] [^while.header51, i32 %480];
    i1 %152 = icmp neq i32 %151, i32 0;
    cbr i1 %152(prob = 0.97), ^while.header23, ^if.else4;
  ^while.header20:
    i32 %153 = phi [^b12, i32 %58] [^while.header52, i32 %202];
    i32 %154 = phi [^b12, i32 %57] [^while.header52, i32 %487];
    i1 %155 = icmp neq i32 %154, i32 0;
    cbr i1 %155(prob = 0.97), ^while.header24, ^b15;
  ^b17:
    i1 %156 = icmp neq i32 %110, i32 0;
    cbr i1 %156(prob = 0.5), ^while.header25, ^b22;
  ^while.header21:
    i32 %157 = phi [^while.header16, i32 1] [^b27, i32 0];
    i32 %158 = phi [^while.header16, i32 %125] [^b27, i32 %240];
    i32 %159 = phi [^while.header16, i32 0] [^b27, i32 %239];
    i32 %160 = phi [^while.header16, i32 0] [^b27, i32 %241];
    i1 %161 = icmp slt i32 %160, i32 16;
    cbr i1 %161(prob = 0.97), ^while.body8, ^b25;
  ^b18:
    i32* %162 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %85];
    i32 %163 = load i32* %162;
    i1 %164 = icmp neq i32 %124, i32 %163;
    cbr i1 %164(prob = 0.5), ^b13, ^b23;
  ^if.else2:
    i1 %165 = icmp sgt i32 %29, i32 32767;
    cbr i1 %165(prob = 0.5), ^if.then7, ^if.else3;
  ^if.then5:
    i32* %166 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %106];
    i32 %167 = load i32* %166;
    i32 %168 = add i32 %105, i32 %167;
    ubr ^b19;
  ^if.then6:
    i32* %169 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %111];
    i32 %170 = load i32* %169;
    i32 %171 = add i32 %110, i32 %170;
    ubr ^b20;
  ^b19:
    i32 %172 = phi [^while.body4, i32 %105] [^if.then5, i32 %168];
    i32 %173 = sdiv i32 %104, i32 2;
    i32 %174 = add i32 %106, i32 1;
    ubr ^while.header12;
  ^b20:
    i32 %175 = phi [^while.body5, i32 %110] [^if.then6, i32 %171];
    i32 %176 = sdiv i32 %109, i32 2;
    i32 %177 = add i32 %111, i32 1;
    ubr ^while.header13;
  ^b21:
    i32 %178 = phi [^b16, i32 %72] [^while.header22, i32 %192];
    ubr ^while.header30;
  ^b22:
    i32 %179 = phi [^b17, i32 %81] [^while.header25, i32 %207];
    ubr ^while.header32;
  ^if.then7:
    i32 %180 = load i32* %1;
    i32 %181 = sdiv i32 %29, i32 %180;
    i32 %182 = add i32 %181, i32 65536;
    i32 %183 = load i32* %15;
    i32 %184 = sub i32 %182, i32 %183;
    ubr ^while.header2;
  ^while.body6:
    i1 %185 = ztrunc i32 %141 to i1;
    cbr i1 %185(prob = 0.5), ^if.then10, ^if.else6;
  ^while.body7:
    i32 %186 = and i32 %145, i32 %146;
    i1 %187 = ztrunc i32 %186 to i1;
    cbr i1 %187(prob = 0.5), ^if.then8, ^b26;
  ^while.body8:
    i32 %188 = and i32 %157, i32 %158;
    i1 %189 = ztrunc i32 %188 to i1;
    cbr i1 %189(prob = 0.5), ^if.then9, ^b27;
  ^b23:
    i32 %190 = add i32 %85, i32 1;
    ubr ^while.header11;
  ^while.header22:
    i32 %191 = phi [^b16, i32 %72] [^if.then56, i32 %583] [^if.else35, i32 %583];
    i32 %192 = phi [^b16, i32 0] [^if.then56, i32 %410] [^if.else35, i32 %410];
    i32 %193 = phi [^b16, i32 %71] [^if.then56, i32 %738] [^if.else35, i32 %757];
    i1 %194 = icmp neq i32 %193, i32 0;
    cbr i1 %194(prob = 0.97), ^while.header28, ^b21;
  ^if.else3:
    i32 %195 = load i32* %1;
    i32 %196 = sdiv i32 %29, i32 %195;
    ubr ^while.header2;
  ^while.header23:
    i32 %197 = phi [^while.header19, i32 0] [^b33, i32 %393];
    i32 %198 = phi [^while.header19, i32 %151] [^b33, i32 %395];
    i32 %199 = phi [^while.header19, i32 %150] [^b33, i32 %394];
    i32 %200 = phi [^while.header19, i32 0] [^b33, i32 %396];
    i1 %201 = icmp slt i32 %200, i32 16;
    cbr i1 %201(prob = 0.97), ^while.body10, ^while.header35;
  ^while.header24:
    i32 %202 = phi [^while.header20, i32 0] [^b34, i32 %397];
    i32 %203 = phi [^while.header20, i32 %154] [^b34, i32 %399];
    i32 %204 = phi [^while.header20, i32 %153] [^b34, i32 %398];
    i32 %205 = phi [^while.header20, i32 0] [^b34, i32 %400];
    i1 %206 = icmp slt i32 %205, i32 16;
    cbr i1 %206(prob = 0.97), ^while.body11, ^while.header36;
  ^while.header25:
    i32 %207 = phi [^b17, i32 %81] [^while.header57, i32 %256];
    i32 %208 = phi [^b17, i32 %80] [^while.header57, i32 %596];
    i1 %209 = icmp neq i32 %208, i32 0;
    cbr i1 %209(prob = 0.97), ^while.header29, ^b22;
  ^while.header26:
    i32 %210 = phi [^while.header17, i32 0] [^b31, i32 %304];
    i32 %211 = phi [^while.header17, i32 %116] [^b31, i32 %306];
    i32 %212 = phi [^while.header17, i32 %115] [^b31, i32 %305];
    i32 %213 = phi [^while.header17, i32 0] [^b31, i32 %307];
    i1 %214 = icmp slt i32 %213, i32 16;
    cbr i1 %214(prob = 0.97), ^while.body9, ^if.else5;
  ^while.header27:
    i32 %215 = phi [^b15, i32 %57] [^while.header59, i32 %265];
    i32 %216 = phi [^b15, i32 %57] [^while.header59, i32 %609];
    i1 %217 = icmp neq i32 %216, i32 0;
    cbr i1 %217(prob = 0.97), ^while.header31, ^if.else8;
  ^b24:
    i1 %218 = icmp neq i32 %144, i32 0;
    cbr i1 %218(prob = 0.5), ^while.header33, ^b28;
  ^b25:
    i1 %219 = icmp neq i32 %159, i32 0;
    cbr i1 %219(prob = 0.5), ^while.header34, ^b29;
  ^if.else4:
    i1 %220 = icmp sgt i32 %46, i32 32767;
    cbr i1 %220(prob = 0.5), ^if.then11, ^if.else7;
  ^if.then8:
    i32* %221 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %147];
    i32 %222 = load i32* %221;
    i32 %223 = add i32 %144, i32 %222;
    ubr ^b26;
  ^if.then9:
    i32* %224 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %160];
    i32 %225 = load i32* %224;
    i32 %226 = add i32 %159, i32 %225;
    ubr ^b27;
  ^if.then10:
    i32 %227 = and i32 %140, i32 1;
    i1 %228 = icmp eq i32 %227, i32 0;
    cbr i1 %228(prob = 0.5), ^if.then12, ^b30;
  ^if.then11:
    i32 %229 = load i32* %1;
    i32 %230 = sdiv i32 %46, i32 %229;
    i32 %231 = add i32 %230, i32 65536;
    i32 %232 = load i32* %15;
    i32 %233 = sub i32 %231, i32 %232;
    ubr ^while.header4;
  ^if.else5:
    i32 %234 = load i32* %1;
    i32 %235 = mul i32 %210, i32 %234;
    ubr ^while.header42;
  ^b26:
    i32 %236 = phi [^while.body7, i32 %144] [^if.then8, i32 %223];
    i32 %237 = sdiv i32 %146, i32 2;
    i32 %238 = add i32 %147, i32 1;
    ubr ^while.header18;
  ^b27:
    i32 %239 = phi [^while.body8, i32 %159] [^if.then9, i32 %226];
    i32 %240 = sdiv i32 %158, i32 2;
    i32 %241 = add i32 %160, i32 1;
    ubr ^while.header21;
  ^while.body9:
    i32 %242 = and i32 %211, i32 %212;
    i1 %243 = ztrunc i32 %242 to i1;
    cbr i1 %243(prob = 0.5), ^if.then14, ^b31;
  ^b28:
    i32 %244 = phi [^b24, i32 %119] [^while.header33, i32 %273];
    ubr ^while.header43;
  ^b29:
    i32 %245 = phi [^b25, i32 %124] [^while.header34, i32 %277];
    ubr ^while.header44;
  ^while.body10:
    i1 %246 = ztrunc i32 %199 to i1;
    cbr i1 %246(prob = 0.5), ^if.then15, ^if.else11;
  ^while.body11:
    i1 %247 = ztrunc i32 %204 to i1;
    cbr i1 %247(prob = 0.5), ^if.then16, ^if.else12;
  ^while.header28:
    i32 %248 = phi [^while.header22, i32 1] [^b35, i32 0];
    i32 %249 = phi [^while.header22, i32 %193] [^b35, i32 %402];
    i32 %250 = phi [^while.header22, i32 0] [^b35, i32 %401];
    i32 %251 = phi [^while.header22, i32 0] [^b35, i32 %403];
    i1 %252 = icmp slt i32 %251, i32 16;
    cbr i1 %252(prob = 0.97), ^while.body12, ^b32;
  ^if.else6:
    i1 %253 = ztrunc i32 %140 to i1;
    cbr i1 %253(prob = 0.5), ^if.then13, ^b30;
  ^while.header29:
    i32 %254 = phi [^while.header25, i32 %208] [^b41, i32 %503];
    i32 %255 = phi [^while.header25, i32 %207] [^b41, i32 %502];
    i32 %256 = phi [^while.header25, i32 0] [^b41, i32 %501];
    i32 %257 = phi [^while.header25, i32 0] [^b41, i32 %504];
    i1 %258 = icmp slt i32 %257, i32 16;
    cbr i1 %258(prob = 0.97), ^while.body13, ^while.header41;
  ^if.else7:
    i32 %259 = load i32* %1;
    i32 %260 = sdiv i32 %46, i32 %259;
    ubr ^while.header4;
  ^while.header30:
    i32 %261 = phi [^b21, i32 %71] [^if.then66, i32 %699] [^if.else43, i32 %699];
    i32 %262 = phi [^b21, i32 0] [^if.then66, i32 %541] [^if.else43, i32 %541];
    i32 %263 = phi [^b21, i32 %71] [^if.then66, i32 %842] [^if.else43, i32 %874];
    i1 %264 = icmp neq i32 %263, i32 0;
    cbr i1 %264(prob = 0.97), ^while.header37, ^if.else14;
  ^while.header31:
    i32 %265 = phi [^while.header27, i32 0] [^b42, i32 %520];
    i32 %266 = phi [^while.header27, i32 %216] [^b42, i32 %522];
    i32 %267 = phi [^while.header27, i32 %215] [^b42, i32 %521];
    i32 %268 = phi [^while.header27, i32 0] [^b42, i32 %523];
    i1 %269 = icmp slt i32 %268, i32 16;
    cbr i1 %269(prob = 0.97), ^while.body16, ^while.header45;
  ^while.header32:
    i32 %270 = phi [^b22, i32 %80] [^while.header67, i32 %338];
    i32 %271 = phi [^b22, i32 %80] [^while.header67, i32 %709];
    i1 %272 = icmp neq i32 %271, i32 0;
    cbr i1 %272(prob = 0.97), ^while.header38, ^if.else15;
  ^while.header33:
    i32 %273 = phi [^b24, i32 %119] [^while.header68, i32 %343];
    i32 %274 = phi [^b24, i32 %118] [^while.header68, i32 %714];
    i1 %275 = icmp neq i32 %274, i32 0;
    cbr i1 %275(prob = 0.97), ^while.header39, ^b28;
  ^while.header34:
    i32 %276 = phi [^b25, i32 %124] [^if.then68, i32 %702] [^if.else45, i32 %702];
    i32 %277 = phi [^b25, i32 0] [^if.then68, i32 %551] [^if.else45, i32 %551];
    i32 %278 = phi [^b25, i32 %123] [^if.then68, i32 %853] [^if.else45, i32 %879];
    i1 %279 = icmp neq i32 %278, i32 0;
    cbr i1 %279(prob = 0.97), ^while.header40, ^b29;
  ^while.header35:
    i32 %280 = phi [^while.header23, i32 0] [^b37, i32 %425];
    i32 %281 = phi [^while.header23, i32 %151] [^b37, i32 %427];
    i32 %282 = phi [^while.header23, i32 %150] [^b37, i32 %426];
    i32 %283 = phi [^while.header23, i32 0] [^b37, i32 %428];
    i1 %284 = icmp slt i32 %283, i32 16;
    cbr i1 %284(prob = 0.97), ^while.body14, ^if.else9;
  ^while.header36:
    i32 %285 = phi [^while.header24, i32 0] [^b38, i32 %429];
    i32 %286 = phi [^while.header24, i32 %154] [^b38, i32 %431];
    i32 %287 = phi [^while.header24, i32 %153] [^b38, i32 %430];
    i32 %288 = phi [^while.header24, i32 0] [^b38, i32 %432];
    i1 %289 = icmp slt i32 %288, i32 16;
    cbr i1 %289(prob = 0.97), ^while.body15, ^if.else10;
  ^if.else8:
    i1 %290 = icmp sgt i32 %59, i32 32767;
    cbr i1 %290(prob = 0.5), ^if.then17, ^if.else13;
  ^if.then12:
    i32* %291 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %142];
    i32 %292 = load i32* %291;
    i32 %293 = add i32 %139, i32 %292;
    ubr ^b30;
  ^if.then13:
    i32* %294 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %142];
    i32 %295 = load i32* %294;
    i32 %296 = add i32 %139, i32 %295;
    ubr ^b30;
  ^b30:
    i32 %297 = phi [^if.then10, i32 %139] [^if.else6, i32 %139] [^if.then12, i32 %293] [^if.then13, i32 %296];
    i32 %298 = sdiv i32 %141, i32 2;
    i32 %299 = sdiv i32 %140, i32 2;
    i32 %300 = add i32 %142, i32 1;
    ubr ^while.header17;
  ^if.then14:
    i32* %301 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %213];
    i32 %302 = load i32* %301;
    i32 %303 = add i32 %210, i32 %302;
    ubr ^b31;
  ^b31:
    i32 %304 = phi [^while.body9, i32 %210] [^if.then14, i32 %303];
    i32 %305 = sdiv i32 %212, i32 2;
    i32 %306 = sdiv i32 %211, i32 2;
    i32 %307 = add i32 %213, i32 1;
    ubr ^while.header26;
  ^while.body12:
    i32 %308 = and i32 %248, i32 %249;
    i1 %309 = ztrunc i32 %308 to i1;
    cbr i1 %309(prob = 0.5), ^if.then20, ^b35;
  ^if.then15:
    i32 %310 = and i32 %198, i32 1;
    i1 %311 = icmp eq i32 %310, i32 0;
    cbr i1 %311(prob = 0.5), ^if.then18, ^b33;
  ^if.then16:
    i32 %312 = and i32 %203, i32 1;
    i1 %313 = icmp eq i32 %312, i32 0;
    cbr i1 %313(prob = 0.5), ^if.then19, ^b34;
  ^if.then17:
    i32 %314 = load i32* %1;
    i32 %315 = sdiv i32 %59, i32 %314;
    i32 %316 = add i32 %315, i32 65536;
    i32 %317 = load i32* %15;
    i32 %318 = sub i32 %316, i32 %317;
    ubr ^while.header7;
  ^while.body13:
    i1 %319 = ztrunc i32 %255 to i1;
    cbr i1 %319(prob = 0.5), ^if.then26, ^if.else18;
  ^if.else9:
    i32 %320 = load i32* %1;
    i32 %321 = mul i32 %280, i32 %320;
    ubr ^while.header51;
  ^if.else10:
    i32 %322 = load i32* %1;
    i32 %323 = mul i32 %285, i32 %322;
    ubr ^while.header52;
  ^while.body14:
    i32 %324 = and i32 %281, i32 %282;
    i1 %325 = ztrunc i32 %324 to i1;
    cbr i1 %325(prob = 0.5), ^if.then23, ^b37;
  ^while.body15:
    i32 %326 = and i32 %286, i32 %287;
    i1 %327 = ztrunc i32 %326 to i1;
    cbr i1 %327(prob = 0.5), ^if.then24, ^b38;
  ^while.body16:
    i1 %328 = ztrunc i32 %267 to i1;
    cbr i1 %328(prob = 0.5), ^if.then28, ^if.else21;
  ^while.header37:
    i32 %329 = phi [^while.header30, i32 1] [^b43, i32 0];
    i32 %330 = phi [^while.header30, i32 %263] [^b43, i32 %525];
    i32 %331 = phi [^while.header30, i32 0] [^b43, i32 %524];
    i32 %332 = phi [^while.header30, i32 0] [^b43, i32 %526];
    i1 %333 = icmp slt i32 %332, i32 16;
    cbr i1 %333(prob = 0.97), ^while.body17, ^b39;
  ^if.else11:
    i1 %334 = ztrunc i32 %198 to i1;
    cbr i1 %334(prob = 0.5), ^if.then21, ^b33;
  ^if.else12:
    i1 %335 = ztrunc i32 %203 to i1;
    cbr i1 %335(prob = 0.5), ^if.then22, ^b34;
  ^while.header38:
    i32 %336 = phi [^while.header32, i32 %271] [^b51, i32 %626];
    i32 %337 = phi [^while.header32, i32 %270] [^b51, i32 %625];
    i32 %338 = phi [^while.header32, i32 0] [^b51, i32 %624];
    i32 %339 = phi [^while.header32, i32 0] [^b51, i32 %627];
    i1 %340 = icmp slt i32 %339, i32 16;
    cbr i1 %340(prob = 0.97), ^while.body21, ^while.header49;
  ^while.header39:
    i32 %341 = phi [^while.header33, i32 %274] [^b52, i32 %630];
    i32 %342 = phi [^while.header33, i32 %273] [^b52, i32 %629];
    i32 %343 = phi [^while.header33, i32 0] [^b52, i32 %628];
    i32 %344 = phi [^while.header33, i32 0] [^b52, i32 %631];
    i1 %345 = icmp slt i32 %344, i32 16;
    cbr i1 %345(prob = 0.97), ^while.body22, ^while.header50;
  ^b32:
    i1 %346 = icmp neq i32 %250, i32 0;
    cbr i1 %346(prob = 0.5), ^while.header46, ^b36;
  ^if.else13:
    i32 %347 = load i32* %1;
    i32 %348 = sdiv i32 %59, i32 %347;
    ubr ^while.header7;
  ^while.header40:
    i32 %349 = phi [^while.header34, i32 1] [^b44, i32 0];
    i32 %350 = phi [^while.header34, i32 %278] [^b44, i32 %531];
    i32 %351 = phi [^while.header34, i32 0] [^b44, i32 %530];
    i32 %352 = phi [^while.header34, i32 0] [^b44, i32 %532];
    i1 %353 = icmp slt i32 %352, i32 16;
    cbr i1 %353(prob = 0.97), ^while.body18, ^b40;
  ^while.header41:
    i32 %354 = phi [^while.header29, i32 %208] [^b45, i32 %535];
    i32 %355 = phi [^while.header29, i32 %207] [^b45, i32 %534];
    i32 %356 = phi [^while.header29, i32 0] [^b45, i32 %533];
    i32 %357 = phi [^while.header29, i32 0] [^b45, i32 %536];
    i1 %358 = icmp slt i32 %357, i32 16;
    cbr i1 %358(prob = 0.97), ^while.body19, ^if.else16;
  ^while.header42:
    i32 %359 = phi [^if.else5, i32 0] [^b46, i32 %537];
    i32 %360 = phi [^if.else5, i32 65535] [^b46, i32 %539];
    i32 %361 = phi [^if.else5, i32 %235] [^b46, i32 %538];
    i32 %362 = phi [^if.else5, i32 0] [^b46, i32 %540];
    i1 %363 = icmp slt i32 %362, i32 16;
    cbr i1 %363(prob = 0.97), ^while.body20, ^while.header14;
  ^while.header43:
    i32 %364 = phi [^b28, i32 %118] [^while.header76, i32 %460];
    i32 %365 = phi [^b28, i32 %118] [^while.header76, i32 %805];
    i1 %366 = icmp neq i32 %365, i32 0;
    cbr i1 %366(prob = 0.97), ^while.header47, ^if.else22;
  ^while.header44:
    i32 %367 = phi [^b29, i32 %123] [^if.then82, i32 %801] [^if.else53, i32 %801];
    i32 %368 = phi [^b29, i32 0] [^if.then82, i32 %671] [^if.else53, i32 %671];
    i32 %369 = phi [^b29, i32 %123] [^if.then82, i32 %976] [^if.else53, i32 %996];
    i1 %370 = icmp neq i32 %369, i32 0;
    cbr i1 %370(prob = 0.97), ^while.header48, ^if.else23;
  ^if.else14:
    i1 %371 = icmp sgt i32 %73, i32 32767;
    cbr i1 %371(prob = 0.5), ^if.then25, ^if.else17;
  ^while.header45:
    i32 %372 = phi [^while.header31, i32 %216] [^b49, i32 %568];
    i32 %373 = phi [^while.header31, i32 %215] [^b49, i32 %567];
    i32 %374 = phi [^while.header31, i32 0] [^b49, i32 %566];
    i32 %375 = phi [^while.header31, i32 0] [^b49, i32 %569];
    i1 %376 = icmp slt i32 %375, i32 16;
    cbr i1 %376(prob = 0.97), ^while.body23, ^if.else19;
  ^if.else15:
    i1 %377 = icmp sgt i32 %82, i32 32767;
    cbr i1 %377(prob = 0.5), ^if.then27, ^if.else20;
  ^if.then18:
    i32* %378 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %200];
    i32 %379 = load i32* %378;
    i32 %380 = add i32 %197, i32 %379;
    ubr ^b33;
  ^if.then19:
    i32* %381 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %205];
    i32 %382 = load i32* %381;
    i32 %383 = add i32 %202, i32 %382;
    ubr ^b34;
  ^if.then20:
    i32* %384 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %251];
    i32 %385 = load i32* %384;
    i32 %386 = add i32 %250, i32 %385;
    ubr ^b35;
  ^if.then21:
    i32* %387 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %200];
    i32 %388 = load i32* %387;
    i32 %389 = add i32 %197, i32 %388;
    ubr ^b33;
  ^if.then22:
    i32* %390 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %205];
    i32 %391 = load i32* %390;
    i32 %392 = add i32 %202, i32 %391;
    ubr ^b34;
  ^b33:
    i32 %393 = phi [^if.then15, i32 %197] [^if.else11, i32 %197] [^if.then18, i32 %380] [^if.then21, i32 %389];
    i32 %394 = sdiv i32 %199, i32 2;
    i32 %395 = sdiv i32 %198, i32 2;
    i32 %396 = add i32 %200, i32 1;
    ubr ^while.header23;
  ^b34:
    i32 %397 = phi [^if.then16, i32 %202] [^if.else12, i32 %202] [^if.then19, i32 %383] [^if.then22, i32 %392];
    i32 %398 = sdiv i32 %204, i32 2;
    i32 %399 = sdiv i32 %203, i32 2;
    i32 %400 = add i32 %205, i32 1;
    ubr ^while.header24;
  ^b35:
    i32 %401 = phi [^while.body12, i32 %250] [^if.then20, i32 %386];
    i32 %402 = sdiv i32 %249, i32 2;
    i32 %403 = add i32 %251, i32 1;
    ubr ^while.header28;
  ^if.then23:
    i32* %404 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %283];
    i32 %405 = load i32* %404;
    i32 %406 = add i32 %280, i32 %405;
    ubr ^b37;
  ^if.then24:
    i32* %407 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %288];
    i32 %408 = load i32* %407;
    i32 %409 = add i32 %285, i32 %408;
    ubr ^b38;
  ^b36:
    i32 %410 = phi [^b32, i32 %192] [^while.header46, i32 %448];
    ubr ^while.header54;
  ^if.then25:
    i32 %411 = load i32* %1;
    i32 %412 = sdiv i32 %73, i32 %411;
    i32 %413 = add i32 %412, i32 65536;
    i32 %414 = load i32* %15;
    i32 %415 = sub i32 %413, i32 %414;
    ubr ^while.header8;
  ^if.then26:
    i32 %416 = and i32 %254, i32 1;
    i1 %417 = icmp eq i32 %416, i32 0;
    cbr i1 %417(prob = 0.5), ^if.then29, ^b41;
  ^if.then27:
    i32 %418 = load i32* %1;
    i32 %419 = sdiv i32 %82, i32 %418;
    i32 %420 = add i32 %419, i32 65536;
    i32 %421 = load i32* %15;
    i32 %422 = sub i32 %420, i32 %421;
    ubr ^while.header10;
  ^if.else16:
    i32 %423 = load i32* %1;
    i32 %424 = mul i32 %356, i32 %423;
    ubr ^while.header57;
  ^b37:
    i32 %425 = phi [^while.body14, i32 %280] [^if.then23, i32 %406];
    i32 %426 = sdiv i32 %282, i32 2;
    i32 %427 = sdiv i32 %281, i32 2;
    i32 %428 = add i32 %283, i32 1;
    ubr ^while.header35;
  ^b38:
    i32 %429 = phi [^while.body15, i32 %285] [^if.then24, i32 %409];
    i32 %430 = sdiv i32 %287, i32 2;
    i32 %431 = sdiv i32 %286, i32 2;
    i32 %432 = add i32 %288, i32 1;
    ubr ^while.header36;
  ^while.body17:
    i32 %433 = and i32 %329, i32 %330;
    i1 %434 = ztrunc i32 %433 to i1;
    cbr i1 %434(prob = 0.5), ^if.then32, ^b43;
  ^while.body18:
    i32 %435 = and i32 %349, i32 %350;
    i1 %436 = ztrunc i32 %435 to i1;
    cbr i1 %436(prob = 0.5), ^if.then33, ^b44;
  ^while.body19:
    i32 %437 = and i32 %354, i32 %355;
    i1 %438 = ztrunc i32 %437 to i1;
    cbr i1 %438(prob = 0.5), ^if.then34, ^b45;
  ^while.body20:
    i32 %439 = and i32 %360, i32 %361;
    i1 %440 = ztrunc i32 %439 to i1;
    cbr i1 %440(prob = 0.5), ^if.then35, ^b46;
  ^if.then28:
    i32 %441 = and i32 %266, i32 1;
    i1 %442 = icmp eq i32 %441, i32 0;
    cbr i1 %442(prob = 0.5), ^if.then30, ^b42;
  ^while.body21:
    i1 %443 = ztrunc i32 %337 to i1;
    cbr i1 %443(prob = 0.5), ^if.then38, ^if.else26;
  ^while.body22:
    i1 %444 = ztrunc i32 %342 to i1;
    cbr i1 %444(prob = 0.5), ^if.then39, ^if.else27;
  ^if.else17:
    i32 %445 = load i32* %1;
    i32 %446 = sdiv i32 %73, i32 %445;
    ubr ^while.header8;
  ^if.else18:
    i1 %447 = ztrunc i32 %254 to i1;
    cbr i1 %447(prob = 0.5), ^if.then31, ^b41;
  ^while.header46:
    i32 %448 = phi [^b32, i32 %192] [^while.header77, i32 %559];
    i32 %449 = phi [^b32, i32 %191] [^while.header77, i32 %880];
    i1 %450 = icmp neq i32 %449, i32 0;
    cbr i1 %450(prob = 0.97), ^while.header53, ^b36;
  ^if.else19:
    i32 %451 = load i32* %1;
    i32 %452 = mul i32 %374, i32 %451;
    ubr ^while.header59;
  ^if.else20:
    i32 %453 = load i32* %1;
    i32 %454 = sdiv i32 %82, i32 %453;
    ubr ^while.header10;
  ^while.body23:
    i32 %455 = and i32 %372, i32 %373;
    i1 %456 = ztrunc i32 %455 to i1;
    cbr i1 %456(prob = 0.5), ^if.then37, ^b49;
  ^if.else21:
    i1 %457 = ztrunc i32 %266 to i1;
    cbr i1 %457(prob = 0.5), ^if.then36, ^b42;
  ^while.header47:
    i32 %458 = phi [^while.header43, i32 %365] [^b59, i32 %730];
    i32 %459 = phi [^while.header43, i32 %364] [^b59, i32 %729];
    i32 %460 = phi [^while.header43, i32 0] [^b59, i32 %728];
    i32 %461 = phi [^while.header43, i32 0] [^b59, i32 %731];
    i1 %462 = icmp slt i32 %461, i32 16;
    cbr i1 %462(prob = 0.97), ^while.body29, ^while.header58;
  ^b39:
    i1 %463 = icmp neq i32 %331, i32 0;
    cbr i1 %463(prob = 0.5), ^while.header55, ^b47;
  ^while.header48:
    i32 %464 = phi [^while.header44, i32 1] [^b53, i32 0];
    i32 %465 = phi [^while.header44, i32 %369] [^b53, i32 %649];
    i32 %466 = phi [^while.header44, i32 0] [^b53, i32 %648];
    i32 %467 = phi [^while.header44, i32 0] [^b53, i32 %650];
    i1 %468 = icmp slt i32 %467, i32 16;
    cbr i1 %468(prob = 0.97), ^while.body24, ^b50;
  ^while.header49:
    i32 %469 = phi [^while.header38, i32 0] [^b54, i32 %651];
    i32 %470 = phi [^while.header38, i32 %271] [^b54, i32 %653];
    i32 %471 = phi [^while.header38, i32 %270] [^b54, i32 %652];
    i32 %472 = phi [^while.header38, i32 0] [^b54, i32 %654];
    i1 %473 = icmp slt i32 %472, i32 16;
    cbr i1 %473(prob = 0.97), ^while.body25, ^if.else24;
  ^while.header50:
    i32 %474 = phi [^while.header39, i32 0] [^b55, i32 %655];
    i32 %475 = phi [^while.header39, i32 %274] [^b55, i32 %657];
    i32 %476 = phi [^while.header39, i32 %273] [^b55, i32 %656];
    i32 %477 = phi [^while.header39, i32 0] [^b55, i32 %658];
    i1 %478 = icmp slt i32 %477, i32 16;
    cbr i1 %478(prob = 0.97), ^while.body26, ^if.else25;
  ^b40:
    i1 %479 = icmp neq i32 %351, i32 0;
    cbr i1 %479(prob = 0.5), ^while.header56, ^b48;
  ^while.header51:
    i32 %480 = phi [^if.else9, i32 0] [^b56, i32 %659];
    i32 %481 = phi [^if.else9, i32 65535] [^b56, i32 %661];
    i32 %482 = phi [^if.else9, i32 %321] [^b56, i32 %660];
    i32 %483 = phi [^if.else9, i32 0] [^b56, i32 %662];
    i1 %484 = icmp slt i32 %483, i32 16;
    cbr i1 %484(prob = 0.97), ^while.body27, ^while.header19;
  ^while.header52:
    i32 %485 = phi [^if.else10, i32 65535] [^b57, i32 %665];
    i32 %486 = phi [^if.else10, i32 %323] [^b57, i32 %664];
    i32 %487 = phi [^if.else10, i32 0] [^b57, i32 %663];
    i32 %488 = phi [^if.else10, i32 0] [^b57, i32 %666];
    i1 %489 = icmp slt i32 %488, i32 16;
    cbr i1 %489(prob = 0.97), ^while.body28, ^while.header20;
  ^if.else22:
    i1 %490 = icmp sgt i32 %120, i32 32767;
    cbr i1 %490(prob = 0.5), ^if.then40, ^if.else28;
  ^if.else23:
    i1 %491 = icmp sgt i32 %125, i32 32767;
    cbr i1 %491(prob = 0.5), ^if.then41, ^if.else29;
  ^if.then29:
    i32* %492 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %257];
    i32 %493 = load i32* %492;
    i32 %494 = add i32 %256, i32 %493;
    ubr ^b41;
  ^if.then30:
    i32* %495 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %268];
    i32 %496 = load i32* %495;
    i32 %497 = add i32 %265, i32 %496;
    ubr ^b42;
  ^if.then31:
    i32* %498 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %257];
    i32 %499 = load i32* %498;
    i32 %500 = add i32 %256, i32 %499;
    ubr ^b41;
  ^b41:
    i32 %501 = phi [^if.then26, i32 %256] [^if.else18, i32 %256] [^if.then29, i32 %494] [^if.then31, i32 %500];
    i32 %502 = sdiv i32 %255, i32 2;
    i32 %503 = sdiv i32 %254, i32 2;
    i32 %504 = add i32 %257, i32 1;
    ubr ^while.header29;
  ^if.then32:
    i32* %505 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %332];
    i32 %506 = load i32* %505;
    i32 %507 = add i32 %331, i32 %506;
    ubr ^b43;
  ^if.then33:
    i32* %508 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %352];
    i32 %509 = load i32* %508;
    i32 %510 = add i32 %351, i32 %509;
    ubr ^b44;
  ^if.then34:
    i32* %511 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %357];
    i32 %512 = load i32* %511;
    i32 %513 = add i32 %356, i32 %512;
    ubr ^b45;
  ^if.then35:
    i32* %514 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %362];
    i32 %515 = load i32* %514;
    i32 %516 = add i32 %359, i32 %515;
    ubr ^b46;
  ^if.then36:
    i32* %517 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %268];
    i32 %518 = load i32* %517;
    i32 %519 = add i32 %265, i32 %518;
    ubr ^b42;
  ^b42:
    i32 %520 = phi [^if.then28, i32 %265] [^if.else21, i32 %265] [^if.then30, i32 %497] [^if.then36, i32 %519];
    i32 %521 = sdiv i32 %267, i32 2;
    i32 %522 = sdiv i32 %266, i32 2;
    i32 %523 = add i32 %268, i32 1;
    ubr ^while.header31;
  ^b43:
    i32 %524 = phi [^while.body17, i32 %331] [^if.then32, i32 %507];
    i32 %525 = sdiv i32 %330, i32 2;
    i32 %526 = add i32 %332, i32 1;
    ubr ^while.header37;
  ^if.then37:
    i32* %527 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %375];
    i32 %528 = load i32* %527;
    i32 %529 = add i32 %374, i32 %528;
    ubr ^b49;
  ^b44:
    i32 %530 = phi [^while.body18, i32 %351] [^if.then33, i32 %510];
    i32 %531 = sdiv i32 %350, i32 2;
    i32 %532 = add i32 %352, i32 1;
    ubr ^while.header40;
  ^b45:
    i32 %533 = phi [^while.body19, i32 %356] [^if.then34, i32 %513];
    i32 %534 = sdiv i32 %355, i32 2;
    i32 %535 = sdiv i32 %354, i32 2;
    i32 %536 = add i32 %357, i32 1;
    ubr ^while.header41;
  ^b46:
    i32 %537 = phi [^while.body20, i32 %359] [^if.then35, i32 %516];
    i32 %538 = sdiv i32 %361, i32 2;
    i32 %539 = sdiv i32 %360, i32 2;
    i32 %540 = add i32 %362, i32 1;
    ubr ^while.header42;
  ^b47:
    i32 %541 = phi [^b39, i32 %262] [^while.header55, i32 %586];
    ubr ^while.header64;
  ^if.then38:
    i32 %542 = and i32 %336, i32 1;
    i1 %543 = icmp eq i32 %542, i32 0;
    cbr i1 %543(prob = 0.5), ^if.then42, ^b51;
  ^if.then39:
    i32 %544 = and i32 %341, i32 1;
    i1 %545 = icmp eq i32 %544, i32 0;
    cbr i1 %545(prob = 0.5), ^if.then43, ^b52;
  ^if.then40:
    i32 %546 = load i32* %1;
    i32 %547 = sdiv i32 %120, i32 %546;
    i32 %548 = add i32 %547, i32 65536;
    i32 %549 = load i32* %15;
    i32 %550 = sub i32 %548, i32 %549;
    ubr ^while.header15;
  ^b48:
    i32 %551 = phi [^b40, i32 %277] [^while.header56, i32 %593];
    ubr ^while.header65;
  ^if.then41:
    i32 %552 = load i32* %1;
    i32 %553 = sdiv i32 %125, i32 %552;
    i32 %554 = add i32 %553, i32 65536;
    i32 %555 = load i32* %15;
    i32 %556 = sub i32 %554, i32 %555;
    ubr ^while.header16;
  ^while.header53:
    i32 %557 = phi [^while.header46, i32 %449] [^b63, i32 %819];
    i32 %558 = phi [^while.header46, i32 %448] [^b63, i32 %818];
    i32 %559 = phi [^while.header46, i32 0] [^b63, i32 %817];
    i32 %560 = phi [^while.header46, i32 0] [^b63, i32 %820];
    i1 %561 = icmp slt i32 %560, i32 16;
    cbr i1 %561(prob = 0.97), ^while.body30, ^while.header62;
  ^if.else24:
    i32 %562 = load i32* %1;
    i32 %563 = mul i32 %469, i32 %562;
    ubr ^while.header67;
  ^if.else25:
    i32 %564 = load i32* %1;
    i32 %565 = mul i32 %474, i32 %564;
    ubr ^while.header68;
  ^b49:
    i32 %566 = phi [^while.body23, i32 %374] [^if.then37, i32 %529];
    i32 %567 = sdiv i32 %373, i32 2;
    i32 %568 = sdiv i32 %372, i32 2;
    i32 %569 = add i32 %375, i32 1;
    ubr ^while.header45;
  ^while.body24:
    i32 %570 = and i32 %464, i32 %465;
    i1 %571 = ztrunc i32 %570 to i1;
    cbr i1 %571(prob = 0.5), ^if.then46, ^b53;
  ^while.body25:
    i32 %572 = and i32 %470, i32 %471;
    i1 %573 = ztrunc i32 %572 to i1;
    cbr i1 %573(prob = 0.5), ^if.then47, ^b54;
  ^while.body26:
    i32 %574 = and i32 %475, i32 %476;
    i1 %575 = ztrunc i32 %574 to i1;
    cbr i1 %575(prob = 0.5), ^if.then48, ^b55;
  ^while.body27:
    i32 %576 = and i32 %481, i32 %482;
    i1 %577 = ztrunc i32 %576 to i1;
    cbr i1 %577(prob = 0.5), ^if.then49, ^b56;
  ^while.body28:
    i32 %578 = and i32 %485, i32 %486;
    i1 %579 = ztrunc i32 %578 to i1;
    cbr i1 %579(prob = 0.5), ^if.then50, ^b57;
  ^while.body29:
    i1 %580 = ztrunc i32 %459 to i1;
    cbr i1 %580(prob = 0.5), ^if.then51, ^if.else31;
  ^if.else26:
    i1 %581 = ztrunc i32 %336 to i1;
    cbr i1 %581(prob = 0.5), ^if.then44, ^b51;
  ^if.else27:
    i1 %582 = ztrunc i32 %341 to i1;
    cbr i1 %582(prob = 0.5), ^if.then45, ^b52;
  ^while.header54:
    i32 %583 = phi [^b36, i32 %191] [^while.header82, i32 %674];
    i32 %584 = phi [^b36, i32 %191] [^while.header82, i32 %999];
    i1 %585 = icmp neq i32 %584, i32 0;
    cbr i1 %585(prob = 0.97), ^while.header60, ^if.else32;
  ^while.header55:
    i32 %586 = phi [^b39, i32 %262] [^while.header83, i32 %679];
    i32 %587 = phi [^b39, i32 %261] [^while.header83, i32 %1002];
    i1 %588 = icmp neq i32 %587, i32 0;
    cbr i1 %588(prob = 0.97), ^while.header61, ^b47;
  ^if.else28:
    i32 %589 = load i32* %1;
    i32 %590 = sdiv i32 %120, i32 %589;
    ubr ^while.header15;
  ^if.else29:
    i32 %591 = load i32* %1;
    i32 %592 = sdiv i32 %125, i32 %591;
    ubr ^while.header16;
  ^while.header56:
    i32 %593 = phi [^b40, i32 %277] [^while.header84, i32 %691];
    i32 %594 = phi [^b40, i32 %276] [^while.header84, i32 %1009];
    i1 %595 = icmp neq i32 %594, i32 0;
    cbr i1 %595(prob = 0.97), ^while.header63, ^b48;
  ^while.header57:
    i32 %596 = phi [^if.else16, i32 0] [^b60, i32 %747];
    i32 %597 = phi [^if.else16, i32 65535] [^b60, i32 %749];
    i32 %598 = phi [^if.else16, i32 %424] [^b60, i32 %748];
    i32 %599 = phi [^if.else16, i32 0] [^b60, i32 %750];
    i1 %600 = icmp slt i32 %599, i32 16;
    cbr i1 %600(prob = 0.97), ^while.body31, ^while.header25;
  ^while.header58:
    i32 %601 = phi [^while.header47, i32 0] [^b61, i32 %759];
    i32 %602 = phi [^while.header47, i32 %365] [^b61, i32 %761];
    i32 %603 = phi [^while.header47, i32 %364] [^b61, i32 %760];
    i32 %604 = phi [^while.header47, i32 0] [^b61, i32 %762];
    i1 %605 = icmp slt i32 %604, i32 16;
    cbr i1 %605(prob = 0.97), ^while.body32, ^if.else30;
  ^b50:
    i1 %606 = icmp neq i32 %466, i32 0;
    cbr i1 %606(prob = 0.5), ^while.header66, ^b58;
  ^while.header59:
    i32 %607 = phi [^if.else19, i32 65535] [^b62, i32 %765];
    i32 %608 = phi [^if.else19, i32 %452] [^b62, i32 %764];
    i32 %609 = phi [^if.else19, i32 0] [^b62, i32 %763];
    i32 %610 = phi [^if.else19, i32 0] [^b62, i32 %766];
    i1 %611 = icmp slt i32 %610, i32 16;
    cbr i1 %611(prob = 0.97), ^while.body33, ^while.header27;
  ^if.then42:
    i32* %612 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %339];
    i32 %613 = load i32* %612;
    i32 %614 = add i32 %338, i32 %613;
    ubr ^b51;
  ^if.then43:
    i32* %615 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %344];
    i32 %616 = load i32* %615;
    i32 %617 = add i32 %343, i32 %616;
    ubr ^b52;
  ^if.then44:
    i32* %618 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %339];
    i32 %619 = load i32* %618;
    i32 %620 = add i32 %338, i32 %619;
    ubr ^b51;
  ^if.then45:
    i32* %621 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %344];
    i32 %622 = load i32* %621;
    i32 %623 = add i32 %343, i32 %622;
    ubr ^b52;
  ^b51:
    i32 %624 = phi [^if.then38, i32 %338] [^if.else26, i32 %338] [^if.then42, i32 %614] [^if.then44, i32 %620];
    i32 %625 = sdiv i32 %337, i32 2;
    i32 %626 = sdiv i32 %336, i32 2;
    i32 %627 = add i32 %339, i32 1;
    ubr ^while.header38;
  ^b52:
    i32 %628 = phi [^if.then39, i32 %343] [^if.else27, i32 %343] [^if.then43, i32 %617] [^if.then45, i32 %623];
    i32 %629 = sdiv i32 %342, i32 2;
    i32 %630 = sdiv i32 %341, i32 2;
    i32 %631 = add i32 %344, i32 1;
    ubr ^while.header39;
  ^if.then46:
    i32* %632 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %467];
    i32 %633 = load i32* %632;
    i32 %634 = add i32 %466, i32 %633;
    ubr ^b53;
  ^if.then47:
    i32* %635 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %472];
    i32 %636 = load i32* %635;
    i32 %637 = add i32 %469, i32 %636;
    ubr ^b54;
  ^if.then48:
    i32* %638 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %477];
    i32 %639 = load i32* %638;
    i32 %640 = add i32 %474, i32 %639;
    ubr ^b55;
  ^if.then49:
    i32* %641 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %483];
    i32 %642 = load i32* %641;
    i32 %643 = add i32 %480, i32 %642;
    ubr ^b56;
  ^if.then50:
    i32* %644 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %488];
    i32 %645 = load i32* %644;
    i32 %646 = add i32 %487, i32 %645;
    ubr ^b57;
  ^while.body30:
    i1 %647 = ztrunc i32 %558 to i1;
    cbr i1 %647(prob = 0.5), ^if.then55, ^if.else34;
  ^b53:
    i32 %648 = phi [^while.body24, i32 %466] [^if.then46, i32 %634];
    i32 %649 = sdiv i32 %465, i32 2;
    i32 %650 = add i32 %467, i32 1;
    ubr ^while.header48;
  ^b54:
    i32 %651 = phi [^while.body25, i32 %469] [^if.then47, i32 %637];
    i32 %652 = sdiv i32 %471, i32 2;
    i32 %653 = sdiv i32 %470, i32 2;
    i32 %654 = add i32 %472, i32 1;
    ubr ^while.header49;
  ^b55:
    i32 %655 = phi [^while.body26, i32 %474] [^if.then48, i32 %640];
    i32 %656 = sdiv i32 %476, i32 2;
    i32 %657 = sdiv i32 %475, i32 2;
    i32 %658 = add i32 %477, i32 1;
    ubr ^while.header50;
  ^b56:
    i32 %659 = phi [^while.body27, i32 %480] [^if.then49, i32 %643];
    i32 %660 = sdiv i32 %482, i32 2;
    i32 %661 = sdiv i32 %481, i32 2;
    i32 %662 = add i32 %483, i32 1;
    ubr ^while.header51;
  ^b57:
    i32 %663 = phi [^while.body28, i32 %487] [^if.then50, i32 %646];
    i32 %664 = sdiv i32 %486, i32 2;
    i32 %665 = sdiv i32 %485, i32 2;
    i32 %666 = add i32 %488, i32 1;
    ubr ^while.header52;
  ^while.body31:
    i32 %667 = and i32 %597, i32 %598;
    i1 %668 = ztrunc i32 %667 to i1;
    cbr i1 %668(prob = 0.5), ^if.then53, ^b60;
  ^if.then51:
    i32 %669 = and i32 %458, i32 1;
    i1 %670 = icmp eq i32 %669, i32 0;
    cbr i1 %670(prob = 0.5), ^if.then52, ^b59;
  ^b58:
    i32 %671 = phi [^b50, i32 %368] [^while.header66, i32 %705];
    ubr ^while.header75;
  ^while.header60:
    i32 %672 = phi [^while.header54, i32 %584] [^b67, i32 %925];
    i32 %673 = phi [^while.header54, i32 %583] [^b67, i32 %924];
    i32 %674 = phi [^while.header54, i32 0] [^b67, i32 %923];
    i32 %675 = phi [^while.header54, i32 0] [^b67, i32 %926];
    i1 %676 = icmp slt i32 %675, i32 16;
    cbr i1 %676(prob = 0.97), ^while.body35, ^while.header70;
  ^while.header61:
    i32 %677 = phi [^while.header55, i32 %587] [^b68, i32 %929];
    i32 %678 = phi [^while.header55, i32 %586] [^b68, i32 %928];
    i32 %679 = phi [^while.header55, i32 0] [^b68, i32 %927];
    i32 %680 = phi [^while.header55, i32 0] [^b68, i32 %930];
    i1 %681 = icmp slt i32 %680, i32 16;
    cbr i1 %681(prob = 0.97), ^while.body36, ^while.header71;
  ^if.else30:
    i32 %682 = load i32* %1;
    i32 %683 = mul i32 %601, i32 %682;
    ubr ^while.header76;
  ^while.header62:
    i32 %684 = phi [^while.header53, i32 %449] [^b64, i32 %832];
    i32 %685 = phi [^while.header53, i32 %448] [^b64, i32 %831];
    i32 %686 = phi [^while.header53, i32 0] [^b64, i32 %830];
    i32 %687 = phi [^while.header53, i32 0] [^b64, i32 %833];
    i1 %688 = icmp slt i32 %687, i32 16;
    cbr i1 %688(prob = 0.97), ^while.body34, ^if.else33;
  ^while.header63:
    i32 %689 = phi [^while.header56, i32 %594] [^b69, i32 %936];
    i32 %690 = phi [^while.header56, i32 %593] [^b69, i32 %935];
    i32 %691 = phi [^while.header56, i32 0] [^b69, i32 %934];
    i32 %692 = phi [^while.header56, i32 0] [^b69, i32 %937];
    i1 %693 = icmp slt i32 %692, i32 16;
    cbr i1 %693(prob = 0.97), ^while.body37, ^while.header74;
  ^while.body32:
    i32 %694 = and i32 %602, i32 %603;
    i1 %695 = ztrunc i32 %694 to i1;
    cbr i1 %695(prob = 0.5), ^if.then57, ^b61;
  ^while.body33:
    i32 %696 = and i32 %607, i32 %608;
    i1 %697 = ztrunc i32 %696 to i1;
    cbr i1 %697(prob = 0.5), ^if.then58, ^b62;
  ^if.else31:
    i1 %698 = ztrunc i32 %458 to i1;
    cbr i1 %698(prob = 0.5), ^if.then54, ^b59;
  ^while.header64:
    i32 %699 = phi [^b47, i32 %261] [^while.header86, i32 %773];
    i32 %700 = phi [^b47, i32 %261] [^while.header86, i32 %1088];
    i1 %701 = icmp neq i32 %700, i32 0;
    cbr i1 %701(prob = 0.97), ^while.header69, ^if.else36;
  ^while.header65:
    i32 %702 = phi [^b48, i32 %276] [^while.header87, i32 %788];
    i32 %703 = phi [^b48, i32 %276] [^while.header87, i32 %1093];
    i1 %704 = icmp neq i32 %703, i32 0;
    cbr i1 %704(prob = 0.97), ^while.header72, ^if.else37;
  ^while.header66:
    i32 %705 = phi [^b50, i32 %368] [^while.header88, i32 %793];
    i32 %706 = phi [^b50, i32 %367] [^while.header88, i32 %1098];
    i1 %707 = icmp neq i32 %706, i32 0;
    cbr i1 %707(prob = 0.97), ^while.header73, ^b58;
  ^if.else32:
    i1 %708 = icmp sgt i32 %193, i32 32767;
    cbr i1 %708(prob = 0.5), ^if.then56, ^if.else35;
  ^while.header67:
    i32 %709 = phi [^if.else24, i32 0] [^b65, i32 %856];
    i32 %710 = phi [^if.else24, i32 65535] [^b65, i32 %858];
    i32 %711 = phi [^if.else24, i32 %563] [^b65, i32 %857];
    i32 %712 = phi [^if.else24, i32 0] [^b65, i32 %859];
    i1 %713 = icmp slt i32 %712, i32 16;
    cbr i1 %713(prob = 0.97), ^while.body38, ^while.header32;
  ^while.header68:
    i32 %714 = phi [^if.else25, i32 0] [^b66, i32 %860];
    i32 %715 = phi [^if.else25, i32 65535] [^b66, i32 %862];
    i32 %716 = phi [^if.else25, i32 %565] [^b66, i32 %861];
    i32 %717 = phi [^if.else25, i32 0] [^b66, i32 %863];
    i1 %718 = icmp slt i32 %717, i32 16;
    cbr i1 %718(prob = 0.97), ^while.body39, ^while.header33;
  ^if.then52:
    i32* %719 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %461];
    i32 %720 = load i32* %719;
    i32 %721 = add i32 %460, i32 %720;
    ubr ^b59;
  ^if.then53:
    i32* %722 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %599];
    i32 %723 = load i32* %722;
    i32 %724 = add i32 %596, i32 %723;
    ubr ^b60;
  ^if.then54:
    i32* %725 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %461];
    i32 %726 = load i32* %725;
    i32 %727 = add i32 %460, i32 %726;
    ubr ^b59;
  ^b59:
    i32 %728 = phi [^if.then51, i32 %460] [^if.else31, i32 %460] [^if.then52, i32 %721] [^if.then54, i32 %727];
    i32 %729 = sdiv i32 %459, i32 2;
    i32 %730 = sdiv i32 %458, i32 2;
    i32 %731 = add i32 %461, i32 1;
    ubr ^while.header47;
  ^if.then55:
    i32 %732 = and i32 %557, i32 1;
    i1 %733 = icmp eq i32 %732, i32 0;
    cbr i1 %733(prob = 0.5), ^if.then59, ^b63;
  ^if.then56:
    i32 %734 = load i32* %1;
    i32 %735 = sdiv i32 %193, i32 %734;
    i32 %736 = add i32 %735, i32 65536;
    i32 %737 = load i32* %15;
    i32 %738 = sub i32 %736, i32 %737;
    ubr ^while.header22;
  ^if.else33:
    i32 %739 = load i32* %1;
    i32 %740 = mul i32 %686, i32 %739;
    ubr ^while.header77;
  ^if.then57:
    i32* %741 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %604];
    i32 %742 = load i32* %741;
    i32 %743 = add i32 %601, i32 %742;
    ubr ^b61;
  ^if.then58:
    i32* %744 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %610];
    i32 %745 = load i32* %744;
    i32 %746 = add i32 %609, i32 %745;
    ubr ^b62;
  ^b60:
    i32 %747 = phi [^while.body31, i32 %596] [^if.then53, i32 %724];
    i32 %748 = sdiv i32 %598, i32 2;
    i32 %749 = sdiv i32 %597, i32 2;
    i32 %750 = add i32 %599, i32 1;
    ubr ^while.header57;
  ^while.body34:
    i32 %751 = and i32 %684, i32 %685;
    i1 %752 = ztrunc i32 %751 to i1;
    cbr i1 %752(prob = 0.5), ^if.then61, ^b64;
  ^while.body35:
    i1 %753 = ztrunc i32 %673 to i1;
    cbr i1 %753(prob = 0.5), ^if.then64, ^if.else41;
  ^while.body36:
    i1 %754 = ztrunc i32 %678 to i1;
    cbr i1 %754(prob = 0.5), ^if.then65, ^if.else42;
  ^if.else34:
    i1 %755 = ztrunc i32 %557 to i1;
    cbr i1 %755(prob = 0.5), ^if.then60, ^b63;
  ^if.else35:
    i32 %756 = load i32* %1;
    i32 %757 = sdiv i32 %193, i32 %756;
    ubr ^while.header22;
  ^while.body37:
    i1 %758 = ztrunc i32 %690 to i1;
    cbr i1 %758(prob = 0.5), ^if.then67, ^if.else44;
  ^b61:
    i32 %759 = phi [^while.body32, i32 %601] [^if.then57, i32 %743];
    i32 %760 = sdiv i32 %603, i32 2;
    i32 %761 = sdiv i32 %602, i32 2;
    i32 %762 = add i32 %604, i32 1;
    ubr ^while.header58;
  ^b62:
    i32 %763 = phi [^while.body33, i32 %609] [^if.then58, i32 %746];
    i32 %764 = sdiv i32 %608, i32 2;
    i32 %765 = sdiv i32 %607, i32 2;
    i32 %766 = add i32 %610, i32 1;
    ubr ^while.header59;
  ^while.body38:
    i32 %767 = and i32 %710, i32 %711;
    i1 %768 = ztrunc i32 %767 to i1;
    cbr i1 %768(prob = 0.5), ^if.then62, ^b65;
  ^while.body39:
    i32 %769 = and i32 %715, i32 %716;
    i1 %770 = ztrunc i32 %769 to i1;
    cbr i1 %770(prob = 0.5), ^if.then63, ^b66;
  ^while.header69:
    i32 %771 = phi [^while.header64, i32 %700] [^b74, i32 %1034];
    i32 %772 = phi [^while.header64, i32 %699] [^b74, i32 %1033];
    i32 %773 = phi [^while.header64, i32 0] [^b74, i32 %1032];
    i32 %774 = phi [^while.header64, i32 0] [^b74, i32 %1035];
    i1 %775 = icmp slt i32 %774, i32 16;
    cbr i1 %775(prob = 0.97), ^while.body43, ^while.header78;
  ^while.header70:
    i32 %776 = phi [^while.header60, i32 0] [^b70, i32 %950];
    i32 %777 = phi [^while.header60, i32 %584] [^b70, i32 %952];
    i32 %778 = phi [^while.header60, i32 %583] [^b70, i32 %951];
    i32 %779 = phi [^while.header60, i32 0] [^b70, i32 %953];
    i1 %780 = icmp slt i32 %779, i32 16;
    cbr i1 %780(prob = 0.97), ^while.body40, ^if.else38;
  ^while.header71:
    i32 %781 = phi [^while.header61, i32 %587] [^b71, i32 %956];
    i32 %782 = phi [^while.header61, i32 %586] [^b71, i32 %955];
    i32 %783 = phi [^while.header61, i32 0] [^b71, i32 %954];
    i32 %784 = phi [^while.header61, i32 0] [^b71, i32 %957];
    i1 %785 = icmp slt i32 %784, i32 16;
    cbr i1 %785(prob = 0.97), ^while.body41, ^if.else39;
  ^while.header72:
    i32 %786 = phi [^while.header65, i32 %703] [^b75, i32 %1044];
    i32 %787 = phi [^while.header65, i32 %702] [^b75, i32 %1043];
    i32 %788 = phi [^while.header65, i32 0] [^b75, i32 %1042];
    i32 %789 = phi [^while.header65, i32 0] [^b75, i32 %1045];
    i1 %790 = icmp slt i32 %789, i32 16;
    cbr i1 %790(prob = 0.97), ^while.body44, ^while.header80;
  ^while.header73:
    i32 %791 = phi [^while.header66, i32 %706] [^b76, i32 %1048];
    i32 %792 = phi [^while.header66, i32 %705] [^b76, i32 %1047];
    i32 %793 = phi [^while.header66, i32 0] [^b76, i32 %1046];
    i32 %794 = phi [^while.header66, i32 0] [^b76, i32 %1049];
    i1 %795 = icmp slt i32 %794, i32 16;
    cbr i1 %795(prob = 0.97), ^while.body45, ^while.header81;
  ^while.header74:
    i32 %796 = phi [^while.header63, i32 0] [^b72, i32 %958];
    i32 %797 = phi [^while.header63, i32 %594] [^b72, i32 %960];
    i32 %798 = phi [^while.header63, i32 %593] [^b72, i32 %959];
    i32 %799 = phi [^while.header63, i32 0] [^b72, i32 %961];
    i1 %800 = icmp slt i32 %799, i32 16;
    cbr i1 %800(prob = 0.97), ^while.body42, ^if.else40;
  ^while.header75:
    i32 %801 = phi [^b58, i32 %367] [^while.header89, i32 %892];
    i32 %802 = phi [^b58, i32 %367] [^while.header89, i32 %1149];
    i1 %803 = icmp neq i32 %802, i32 0;
    cbr i1 %803(prob = 0.97), ^while.header79, ^if.else46;
  ^if.else36:
    i1 %804 = icmp sgt i32 %263, i32 32767;
    cbr i1 %804(prob = 0.5), ^if.then66, ^if.else43;
  ^while.header76:
    i32 %805 = phi [^if.else30, i32 0] [^b73, i32 %981];
    i32 %806 = phi [^if.else30, i32 65535] [^b73, i32 %983];
    i32 %807 = phi [^if.else30, i32 %683] [^b73, i32 %982];
    i32 %808 = phi [^if.else30, i32 0] [^b73, i32 %984];
    i1 %809 = icmp slt i32 %808, i32 16;
    cbr i1 %809(prob = 0.97), ^while.body46, ^while.header43;
  ^if.else37:
    i1 %810 = icmp sgt i32 %278, i32 32767;
    cbr i1 %810(prob = 0.5), ^if.then68, ^if.else45;
  ^if.then59:
    i32* %811 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %560];
    i32 %812 = load i32* %811;
    i32 %813 = add i32 %559, i32 %812;
    ubr ^b63;
  ^if.then60:
    i32* %814 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %560];
    i32 %815 = load i32* %814;
    i32 %816 = add i32 %559, i32 %815;
    ubr ^b63;
  ^b63:
    i32 %817 = phi [^if.then55, i32 %559] [^if.else34, i32 %559] [^if.then59, i32 %813] [^if.then60, i32 %816];
    i32 %818 = sdiv i32 %558, i32 2;
    i32 %819 = sdiv i32 %557, i32 2;
    i32 %820 = add i32 %560, i32 1;
    ubr ^while.header53;
  ^if.then61:
    i32* %821 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %687];
    i32 %822 = load i32* %821;
    i32 %823 = add i32 %686, i32 %822;
    ubr ^b64;
  ^if.then62:
    i32* %824 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %712];
    i32 %825 = load i32* %824;
    i32 %826 = add i32 %709, i32 %825;
    ubr ^b65;
  ^if.then63:
    i32* %827 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %717];
    i32 %828 = load i32* %827;
    i32 %829 = add i32 %714, i32 %828;
    ubr ^b66;
  ^b64:
    i32 %830 = phi [^while.body34, i32 %686] [^if.then61, i32 %823];
    i32 %831 = sdiv i32 %685, i32 2;
    i32 %832 = sdiv i32 %684, i32 2;
    i32 %833 = add i32 %687, i32 1;
    ubr ^while.header62;
  ^if.then64:
    i32 %834 = and i32 %672, i32 1;
    i1 %835 = icmp eq i32 %834, i32 0;
    cbr i1 %835(prob = 0.5), ^if.then69, ^b67;
  ^if.then65:
    i32 %836 = and i32 %677, i32 1;
    i1 %837 = icmp eq i32 %836, i32 0;
    cbr i1 %837(prob = 0.5), ^if.then70, ^b68;
  ^if.then66:
    i32 %838 = load i32* %1;
    i32 %839 = sdiv i32 %263, i32 %838;
    i32 %840 = add i32 %839, i32 65536;
    i32 %841 = load i32* %15;
    i32 %842 = sub i32 %840, i32 %841;
    ubr ^while.header30;
  ^if.then67:
    i32 %843 = and i32 %689, i32 1;
    i1 %844 = icmp eq i32 %843, i32 0;
    cbr i1 %844(prob = 0.5), ^if.then71, ^b69;
  ^if.else38:
    i32 %845 = load i32* %1;
    i32 %846 = mul i32 %776, i32 %845;
    ubr ^while.header82;
  ^if.else39:
    i32 %847 = load i32* %1;
    i32 %848 = mul i32 %783, i32 %847;
    ubr ^while.header83;
  ^if.then68:
    i32 %849 = load i32* %1;
    i32 %850 = sdiv i32 %278, i32 %849;
    i32 %851 = add i32 %850, i32 65536;
    i32 %852 = load i32* %15;
    i32 %853 = sub i32 %851, i32 %852;
    ubr ^while.header34;
  ^if.else40:
    i32 %854 = load i32* %1;
    i32 %855 = mul i32 %796, i32 %854;
    ubr ^while.header84;
  ^b65:
    i32 %856 = phi [^while.body38, i32 %709] [^if.then62, i32 %826];
    i32 %857 = sdiv i32 %711, i32 2;
    i32 %858 = sdiv i32 %710, i32 2;
    i32 %859 = add i32 %712, i32 1;
    ubr ^while.header67;
  ^b66:
    i32 %860 = phi [^while.body39, i32 %714] [^if.then63, i32 %829];
    i32 %861 = sdiv i32 %716, i32 2;
    i32 %862 = sdiv i32 %715, i32 2;
    i32 %863 = add i32 %717, i32 1;
    ubr ^while.header68;
  ^while.body40:
    i32 %864 = and i32 %777, i32 %778;
    i1 %865 = ztrunc i32 %864 to i1;
    cbr i1 %865(prob = 0.5), ^if.then75, ^b70;
  ^while.body41:
    i32 %866 = and i32 %781, i32 %782;
    i1 %867 = ztrunc i32 %866 to i1;
    cbr i1 %867(prob = 0.5), ^if.then76, ^b71;
  ^while.body42:
    i32 %868 = and i32 %797, i32 %798;
    i1 %869 = ztrunc i32 %868 to i1;
    cbr i1 %869(prob = 0.5), ^if.then77, ^b72;
  ^while.body43:
    i1 %870 = ztrunc i32 %772 to i1;
    cbr i1 %870(prob = 0.5), ^if.then79, ^if.else50;
  ^if.else41:
    i1 %871 = ztrunc i32 %672 to i1;
    cbr i1 %871(prob = 0.5), ^if.then72, ^b67;
  ^if.else42:
    i1 %872 = ztrunc i32 %677 to i1;
    cbr i1 %872(prob = 0.5), ^if.then73, ^b68;
  ^if.else43:
    i32 %873 = load i32* %1;
    i32 %874 = sdiv i32 %263, i32 %873;
    ubr ^while.header30;
  ^while.body44:
    i1 %875 = ztrunc i32 %787 to i1;
    cbr i1 %875(prob = 0.5), ^if.then80, ^if.else51;
  ^while.body45:
    i1 %876 = ztrunc i32 %792 to i1;
    cbr i1 %876(prob = 0.5), ^if.then81, ^if.else52;
  ^if.else44:
    i1 %877 = ztrunc i32 %689 to i1;
    cbr i1 %877(prob = 0.5), ^if.then74, ^b69;
  ^if.else45:
    i32 %878 = load i32* %1;
    i32 %879 = sdiv i32 %278, i32 %878;
    ubr ^while.header34;
  ^while.header77:
    i32 %880 = phi [^if.else33, i32 0] [^b77, i32 %1059];
    i32 %881 = phi [^if.else33, i32 65535] [^b77, i32 %1061];
    i32 %882 = phi [^if.else33, i32 %740] [^b77, i32 %1060];
    i32 %883 = phi [^if.else33, i32 0] [^b77, i32 %1062];
    i1 %884 = icmp slt i32 %883, i32 16;
    cbr i1 %884(prob = 0.97), ^while.body47, ^while.header46;
  ^while.body46:
    i32 %885 = and i32 %806, i32 %807;
    i1 %886 = ztrunc i32 %885 to i1;
    cbr i1 %886(prob = 0.5), ^if.then78, ^b73;
  ^while.header78:
    i32 %887 = phi [^while.header69, i32 %700] [^b78, i32 %1065];
    i32 %888 = phi [^while.header69, i32 %699] [^b78, i32 %1064];
    i32 %889 = phi [^while.header69, i32 0] [^b78, i32 %1063];
    i32 %890 = phi [^while.header69, i32 0] [^b78, i32 %1066];
    i1 %891 = icmp slt i32 %890, i32 16;
    cbr i1 %891(prob = 0.97), ^while.body48, ^if.else47;
  ^while.header79:
    i32 %892 = phi [^while.header75, i32 0] [^b81, i32 %1118];
    i32 %893 = phi [^while.header75, i32 %802] [^b81, i32 %1120];
    i32 %894 = phi [^while.header75, i32 %801] [^b81, i32 %1119];
    i32 %895 = phi [^while.header75, i32 0] [^b81, i32 %1121];
    i1 %896 = icmp slt i32 %895, i32 16;
    cbr i1 %896(prob = 0.97), ^while.body51, ^while.header85;
  ^while.header80:
    i32 %897 = phi [^while.header72, i32 %703] [^b79, i32 %1069];
    i32 %898 = phi [^while.header72, i32 %702] [^b79, i32 %1068];
    i32 %899 = phi [^while.header72, i32 0] [^b79, i32 %1067];
    i32 %900 = phi [^while.header72, i32 0] [^b79, i32 %1070];
    i1 %901 = icmp slt i32 %900, i32 16;
    cbr i1 %901(prob = 0.97), ^while.body49, ^if.else48;
  ^while.header81:
    i32 %902 = phi [^while.header73, i32 %706] [^b80, i32 %1073];
    i32 %903 = phi [^while.header73, i32 %705] [^b80, i32 %1072];
    i32 %904 = phi [^while.header73, i32 0] [^b80, i32 %1071];
    i32 %905 = phi [^while.header73, i32 0] [^b80, i32 %1074];
    i1 %906 = icmp slt i32 %905, i32 16;
    cbr i1 %906(prob = 0.97), ^while.body50, ^if.else49;
  ^if.else46:
    i1 %907 = icmp sgt i32 %369, i32 32767;
    cbr i1 %907(prob = 0.5), ^if.then82, ^if.else53;
  ^if.then69:
    i32* %908 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %675];
    i32 %909 = load i32* %908;
    i32 %910 = add i32 %674, i32 %909;
    ubr ^b67;
  ^if.then70:
    i32* %911 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %680];
    i32 %912 = load i32* %911;
    i32 %913 = add i32 %679, i32 %912;
    ubr ^b68;
  ^if.then71:
    i32* %914 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %692];
    i32 %915 = load i32* %914;
    i32 %916 = add i32 %691, i32 %915;
    ubr ^b69;
  ^if.then72:
    i32* %917 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %675];
    i32 %918 = load i32* %917;
    i32 %919 = add i32 %674, i32 %918;
    ubr ^b67;
  ^if.then73:
    i32* %920 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %680];
    i32 %921 = load i32* %920;
    i32 %922 = add i32 %679, i32 %921;
    ubr ^b68;
  ^b67:
    i32 %923 = phi [^if.then64, i32 %674] [^if.else41, i32 %674] [^if.then69, i32 %910] [^if.then72, i32 %919];
    i32 %924 = sdiv i32 %673, i32 2;
    i32 %925 = sdiv i32 %672, i32 2;
    i32 %926 = add i32 %675, i32 1;
    ubr ^while.header60;
  ^b68:
    i32 %927 = phi [^if.then65, i32 %679] [^if.else42, i32 %679] [^if.then70, i32 %913] [^if.then73, i32 %922];
    i32 %928 = sdiv i32 %678, i32 2;
    i32 %929 = sdiv i32 %677, i32 2;
    i32 %930 = add i32 %680, i32 1;
    ubr ^while.header61;
  ^if.then74:
    i32* %931 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %692];
    i32 %932 = load i32* %931;
    i32 %933 = add i32 %691, i32 %932;
    ubr ^b69;
  ^b69:
    i32 %934 = phi [^if.then67, i32 %691] [^if.else44, i32 %691] [^if.then71, i32 %916] [^if.then74, i32 %933];
    i32 %935 = sdiv i32 %690, i32 2;
    i32 %936 = sdiv i32 %689, i32 2;
    i32 %937 = add i32 %692, i32 1;
    ubr ^while.header63;
  ^if.then75:
    i32* %938 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %779];
    i32 %939 = load i32* %938;
    i32 %940 = add i32 %776, i32 %939;
    ubr ^b70;
  ^if.then76:
    i32* %941 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %784];
    i32 %942 = load i32* %941;
    i32 %943 = add i32 %783, i32 %942;
    ubr ^b71;
  ^if.then77:
    i32* %944 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %799];
    i32 %945 = load i32* %944;
    i32 %946 = add i32 %796, i32 %945;
    ubr ^b72;
  ^if.then78:
    i32* %947 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %808];
    i32 %948 = load i32* %947;
    i32 %949 = add i32 %805, i32 %948;
    ubr ^b73;
  ^b70:
    i32 %950 = phi [^while.body40, i32 %776] [^if.then75, i32 %940];
    i32 %951 = sdiv i32 %778, i32 2;
    i32 %952 = sdiv i32 %777, i32 2;
    i32 %953 = add i32 %779, i32 1;
    ubr ^while.header70;
  ^b71:
    i32 %954 = phi [^while.body41, i32 %783] [^if.then76, i32 %943];
    i32 %955 = sdiv i32 %782, i32 2;
    i32 %956 = sdiv i32 %781, i32 2;
    i32 %957 = add i32 %784, i32 1;
    ubr ^while.header71;
  ^b72:
    i32 %958 = phi [^while.body42, i32 %796] [^if.then77, i32 %946];
    i32 %959 = sdiv i32 %798, i32 2;
    i32 %960 = sdiv i32 %797, i32 2;
    i32 %961 = add i32 %799, i32 1;
    ubr ^while.header74;
  ^while.body47:
    i32 %962 = and i32 %881, i32 %882;
    i1 %963 = ztrunc i32 %962 to i1;
    cbr i1 %963(prob = 0.5), ^if.then86, ^b77;
  ^if.then79:
    i32 %964 = and i32 %771, i32 1;
    i1 %965 = icmp eq i32 %964, i32 0;
    cbr i1 %965(prob = 0.5), ^if.then83, ^b74;
  ^if.then80:
    i32 %966 = and i32 %786, i32 1;
    i1 %967 = icmp eq i32 %966, i32 0;
    cbr i1 %967(prob = 0.5), ^if.then84, ^b75;
  ^if.then81:
    i32 %968 = and i32 %791, i32 1;
    i1 %969 = icmp eq i32 %968, i32 0;
    cbr i1 %969(prob = 0.5), ^if.then85, ^b76;
  ^if.else47:
    i32 %970 = load i32* %1;
    i32 %971 = mul i32 %889, i32 %970;
    ubr ^while.header86;
  ^if.then82:
    i32 %972 = load i32* %1;
    i32 %973 = sdiv i32 %369, i32 %972;
    i32 %974 = add i32 %973, i32 65536;
    i32 %975 = load i32* %15;
    i32 %976 = sub i32 %974, i32 %975;
    ubr ^while.header44;
  ^if.else48:
    i32 %977 = load i32* %1;
    i32 %978 = mul i32 %899, i32 %977;
    ubr ^while.header87;
  ^if.else49:
    i32 %979 = load i32* %1;
    i32 %980 = mul i32 %904, i32 %979;
    ubr ^while.header88;
  ^b73:
    i32 %981 = phi [^while.body46, i32 %805] [^if.then78, i32 %949];
    i32 %982 = sdiv i32 %807, i32 2;
    i32 %983 = sdiv i32 %806, i32 2;
    i32 %984 = add i32 %808, i32 1;
    ubr ^while.header76;
  ^while.body48:
    i32 %985 = and i32 %887, i32 %888;
    i1 %986 = ztrunc i32 %985 to i1;
    cbr i1 %986(prob = 0.5), ^if.then90, ^b78;
  ^while.body49:
    i32 %987 = and i32 %897, i32 %898;
    i1 %988 = ztrunc i32 %987 to i1;
    cbr i1 %988(prob = 0.5), ^if.then91, ^b79;
  ^while.body50:
    i32 %989 = and i32 %902, i32 %903;
    i1 %990 = ztrunc i32 %989 to i1;
    cbr i1 %990(prob = 0.5), ^if.then92, ^b80;
  ^if.else50:
    i1 %991 = ztrunc i32 %771 to i1;
    cbr i1 %991(prob = 0.5), ^if.then87, ^b74;
  ^while.body51:
    i1 %992 = ztrunc i32 %894 to i1;
    cbr i1 %992(prob = 0.5), ^if.then93, ^if.else55;
  ^if.else51:
    i1 %993 = ztrunc i32 %786 to i1;
    cbr i1 %993(prob = 0.5), ^if.then88, ^b75;
  ^if.else52:
    i1 %994 = ztrunc i32 %791 to i1;
    cbr i1 %994(prob = 0.5), ^if.then89, ^b76;
  ^if.else53:
    i32 %995 = load i32* %1;
    i32 %996 = sdiv i32 %369, i32 %995;
    ubr ^while.header44;
  ^while.header82:
    i32 %997 = phi [^if.else38, i32 65535] [^b82, i32 %1127];
    i32 %998 = phi [^if.else38, i32 %846] [^b82, i32 %1126];
    i32 %999 = phi [^if.else38, i32 0] [^b82, i32 %1125];
    i32 %1000 = phi [^if.else38, i32 0] [^b82, i32 %1128];
    i1 %1001 = icmp slt i32 %1000, i32 16;
    cbr i1 %1001(prob = 0.97), ^while.body52, ^while.header54;
  ^while.header83:
    i32 %1002 = phi [^if.else39, i32 0] [^b83, i32 %1129];
    i32 %1003 = phi [^if.else39, i32 65535] [^b83, i32 %1131];
    i32 %1004 = phi [^if.else39, i32 %848] [^b83, i32 %1130];
    i32 %1005 = phi [^if.else39, i32 0] [^b83, i32 %1132];
    i1 %1006 = icmp slt i32 %1005, i32 16;
    cbr i1 %1006(prob = 0.97), ^while.body53, ^while.header55;
  ^while.header84:
    i32 %1007 = phi [^if.else40, i32 65535] [^b84, i32 %1135];
    i32 %1008 = phi [^if.else40, i32 %855] [^b84, i32 %1134];
    i32 %1009 = phi [^if.else40, i32 0] [^b84, i32 %1133];
    i32 %1010 = phi [^if.else40, i32 0] [^b84, i32 %1136];
    i1 %1011 = icmp slt i32 %1010, i32 16;
    cbr i1 %1011(prob = 0.97), ^while.body54, ^while.header56;
  ^while.header85:
    i32 %1012 = phi [^while.header79, i32 0] [^b85, i32 %1137];
    i32 %1013 = phi [^while.header79, i32 %802] [^b85, i32 %1139];
    i32 %1014 = phi [^while.header79, i32 %801] [^b85, i32 %1138];
    i32 %1015 = phi [^while.header79, i32 0] [^b85, i32 %1140];
    i1 %1016 = icmp slt i32 %1015, i32 16;
    cbr i1 %1016(prob = 0.97), ^while.body55, ^if.else54;
  ^if.then83:
    i32* %1017 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %774];
    i32 %1018 = load i32* %1017;
    i32 %1019 = add i32 %773, i32 %1018;
    ubr ^b74;
  ^if.then84:
    i32* %1020 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %789];
    i32 %1021 = load i32* %1020;
    i32 %1022 = add i32 %788, i32 %1021;
    ubr ^b75;
  ^if.then85:
    i32* %1023 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %794];
    i32 %1024 = load i32* %1023;
    i32 %1025 = add i32 %793, i32 %1024;
    ubr ^b76;
  ^if.then86:
    i32* %1026 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %883];
    i32 %1027 = load i32* %1026;
    i32 %1028 = add i32 %880, i32 %1027;
    ubr ^b77;
  ^if.then87:
    i32* %1029 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %774];
    i32 %1030 = load i32* %1029;
    i32 %1031 = add i32 %773, i32 %1030;
    ubr ^b74;
  ^b74:
    i32 %1032 = phi [^if.then79, i32 %773] [^if.else50, i32 %773] [^if.then83, i32 %1019] [^if.then87, i32 %1031];
    i32 %1033 = sdiv i32 %772, i32 2;
    i32 %1034 = sdiv i32 %771, i32 2;
    i32 %1035 = add i32 %774, i32 1;
    ubr ^while.header69;
  ^if.then88:
    i32* %1036 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %789];
    i32 %1037 = load i32* %1036;
    i32 %1038 = add i32 %788, i32 %1037;
    ubr ^b75;
  ^if.then89:
    i32* %1039 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %794];
    i32 %1040 = load i32* %1039;
    i32 %1041 = add i32 %793, i32 %1040;
    ubr ^b76;
  ^b75:
    i32 %1042 = phi [^if.then80, i32 %788] [^if.else51, i32 %788] [^if.then84, i32 %1022] [^if.then88, i32 %1038];
    i32 %1043 = sdiv i32 %787, i32 2;
    i32 %1044 = sdiv i32 %786, i32 2;
    i32 %1045 = add i32 %789, i32 1;
    ubr ^while.header72;
  ^b76:
    i32 %1046 = phi [^if.then81, i32 %793] [^if.else52, i32 %793] [^if.then85, i32 %1025] [^if.then89, i32 %1041];
    i32 %1047 = sdiv i32 %792, i32 2;
    i32 %1048 = sdiv i32 %791, i32 2;
    i32 %1049 = add i32 %794, i32 1;
    ubr ^while.header73;
  ^if.then90:
    i32* %1050 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %890];
    i32 %1051 = load i32* %1050;
    i32 %1052 = add i32 %889, i32 %1051;
    ubr ^b78;
  ^if.then91:
    i32* %1053 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %900];
    i32 %1054 = load i32* %1053;
    i32 %1055 = add i32 %899, i32 %1054;
    ubr ^b79;
  ^if.then92:
    i32* %1056 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %905];
    i32 %1057 = load i32* %1056;
    i32 %1058 = add i32 %904, i32 %1057;
    ubr ^b80;
  ^b77:
    i32 %1059 = phi [^while.body47, i32 %880] [^if.then86, i32 %1028];
    i32 %1060 = sdiv i32 %882, i32 2;
    i32 %1061 = sdiv i32 %881, i32 2;
    i32 %1062 = add i32 %883, i32 1;
    ubr ^while.header77;
  ^b78:
    i32 %1063 = phi [^while.body48, i32 %889] [^if.then90, i32 %1052];
    i32 %1064 = sdiv i32 %888, i32 2;
    i32 %1065 = sdiv i32 %887, i32 2;
    i32 %1066 = add i32 %890, i32 1;
    ubr ^while.header78;
  ^b79:
    i32 %1067 = phi [^while.body49, i32 %899] [^if.then91, i32 %1055];
    i32 %1068 = sdiv i32 %898, i32 2;
    i32 %1069 = sdiv i32 %897, i32 2;
    i32 %1070 = add i32 %900, i32 1;
    ubr ^while.header80;
  ^b80:
    i32 %1071 = phi [^while.body50, i32 %904] [^if.then92, i32 %1058];
    i32 %1072 = sdiv i32 %903, i32 2;
    i32 %1073 = sdiv i32 %902, i32 2;
    i32 %1074 = add i32 %905, i32 1;
    ubr ^while.header81;
  ^while.body52:
    i32 %1075 = and i32 %997, i32 %998;
    i1 %1076 = ztrunc i32 %1075 to i1;
    cbr i1 %1076(prob = 0.5), ^if.then95, ^b82;
  ^while.body53:
    i32 %1077 = and i32 %1003, i32 %1004;
    i1 %1078 = ztrunc i32 %1077 to i1;
    cbr i1 %1078(prob = 0.5), ^if.then96, ^b83;
  ^while.body54:
    i32 %1079 = and i32 %1007, i32 %1008;
    i1 %1080 = ztrunc i32 %1079 to i1;
    cbr i1 %1080(prob = 0.5), ^if.then97, ^b84;
  ^if.then93:
    i32 %1081 = and i32 %893, i32 1;
    i1 %1082 = icmp eq i32 %1081, i32 0;
    cbr i1 %1082(prob = 0.5), ^if.then94, ^b81;
  ^if.else54:
    i32 %1083 = load i32* %1;
    i32 %1084 = mul i32 %1012, i32 %1083;
    ubr ^while.header89;
  ^while.body55:
    i32 %1085 = and i32 %1013, i32 %1014;
    i1 %1086 = ztrunc i32 %1085 to i1;
    cbr i1 %1086(prob = 0.5), ^if.then99, ^b85;
  ^if.else55:
    i1 %1087 = ztrunc i32 %893 to i1;
    cbr i1 %1087(prob = 0.5), ^if.then98, ^b81;
  ^while.header86:
    i32 %1088 = phi [^if.else47, i32 0] [^b86, i32 %1161];
    i32 %1089 = phi [^if.else47, i32 65535] [^b86, i32 %1163];
    i32 %1090 = phi [^if.else47, i32 %971] [^b86, i32 %1162];
    i32 %1091 = phi [^if.else47, i32 0] [^b86, i32 %1164];
    i1 %1092 = icmp slt i32 %1091, i32 16;
    cbr i1 %1092(prob = 0.97), ^while.body56, ^while.header64;
  ^while.header87:
    i32 %1093 = phi [^if.else48, i32 0] [^b87, i32 %1165];
    i32 %1094 = phi [^if.else48, i32 65535] [^b87, i32 %1167];
    i32 %1095 = phi [^if.else48, i32 %978] [^b87, i32 %1166];
    i32 %1096 = phi [^if.else48, i32 0] [^b87, i32 %1168];
    i1 %1097 = icmp slt i32 %1096, i32 16;
    cbr i1 %1097(prob = 0.97), ^while.body57, ^while.header65;
  ^while.header88:
    i32 %1098 = phi [^if.else49, i32 0] [^b88, i32 %1169];
    i32 %1099 = phi [^if.else49, i32 65535] [^b88, i32 %1171];
    i32 %1100 = phi [^if.else49, i32 %980] [^b88, i32 %1170];
    i32 %1101 = phi [^if.else49, i32 0] [^b88, i32 %1172];
    i1 %1102 = icmp slt i32 %1101, i32 16;
    cbr i1 %1102(prob = 0.97), ^while.body58, ^while.header66;
  ^if.then94:
    i32* %1103 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %895];
    i32 %1104 = load i32* %1103;
    i32 %1105 = add i32 %892, i32 %1104;
    ubr ^b81;
  ^if.then95:
    i32* %1106 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1000];
    i32 %1107 = load i32* %1106;
    i32 %1108 = add i32 %999, i32 %1107;
    ubr ^b82;
  ^if.then96:
    i32* %1109 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1005];
    i32 %1110 = load i32* %1109;
    i32 %1111 = add i32 %1002, i32 %1110;
    ubr ^b83;
  ^if.then97:
    i32* %1112 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1010];
    i32 %1113 = load i32* %1112;
    i32 %1114 = add i32 %1009, i32 %1113;
    ubr ^b84;
  ^if.then98:
    i32* %1115 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %895];
    i32 %1116 = load i32* %1115;
    i32 %1117 = add i32 %892, i32 %1116;
    ubr ^b81;
  ^b81:
    i32 %1118 = phi [^if.then93, i32 %892] [^if.else55, i32 %892] [^if.then94, i32 %1105] [^if.then98, i32 %1117];
    i32 %1119 = sdiv i32 %894, i32 2;
    i32 %1120 = sdiv i32 %893, i32 2;
    i32 %1121 = add i32 %895, i32 1;
    ubr ^while.header79;
  ^if.then99:
    i32* %1122 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1015];
    i32 %1123 = load i32* %1122;
    i32 %1124 = add i32 %1012, i32 %1123;
    ubr ^b85;
  ^b82:
    i32 %1125 = phi [^while.body52, i32 %999] [^if.then95, i32 %1108];
    i32 %1126 = sdiv i32 %998, i32 2;
    i32 %1127 = sdiv i32 %997, i32 2;
    i32 %1128 = add i32 %1000, i32 1;
    ubr ^while.header82;
  ^b83:
    i32 %1129 = phi [^while.body53, i32 %1002] [^if.then96, i32 %1111];
    i32 %1130 = sdiv i32 %1004, i32 2;
    i32 %1131 = sdiv i32 %1003, i32 2;
    i32 %1132 = add i32 %1005, i32 1;
    ubr ^while.header83;
  ^b84:
    i32 %1133 = phi [^while.body54, i32 %1009] [^if.then97, i32 %1114];
    i32 %1134 = sdiv i32 %1008, i32 2;
    i32 %1135 = sdiv i32 %1007, i32 2;
    i32 %1136 = add i32 %1010, i32 1;
    ubr ^while.header84;
  ^b85:
    i32 %1137 = phi [^while.body55, i32 %1012] [^if.then99, i32 %1124];
    i32 %1138 = sdiv i32 %1014, i32 2;
    i32 %1139 = sdiv i32 %1013, i32 2;
    i32 %1140 = add i32 %1015, i32 1;
    ubr ^while.header85;
  ^while.body56:
    i32 %1141 = and i32 %1089, i32 %1090;
    i1 %1142 = ztrunc i32 %1141 to i1;
    cbr i1 %1142(prob = 0.5), ^if.then100, ^b86;
  ^while.body57:
    i32 %1143 = and i32 %1094, i32 %1095;
    i1 %1144 = ztrunc i32 %1143 to i1;
    cbr i1 %1144(prob = 0.5), ^if.then101, ^b87;
  ^while.body58:
    i32 %1145 = and i32 %1099, i32 %1100;
    i1 %1146 = ztrunc i32 %1145 to i1;
    cbr i1 %1146(prob = 0.5), ^if.then102, ^b88;
  ^while.header89:
    i32 %1147 = phi [^if.else54, i32 65535] [^b89, i32 %1180];
    i32 %1148 = phi [^if.else54, i32 %1084] [^b89, i32 %1179];
    i32 %1149 = phi [^if.else54, i32 0] [^b89, i32 %1178];
    i32 %1150 = phi [^if.else54, i32 0] [^b89, i32 %1181];
    i1 %1151 = icmp slt i32 %1150, i32 16;
    cbr i1 %1151(prob = 0.97), ^while.body59, ^while.header75;
  ^if.then100:
    i32* %1152 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1091];
    i32 %1153 = load i32* %1152;
    i32 %1154 = add i32 %1088, i32 %1153;
    ubr ^b86;
  ^if.then101:
    i32* %1155 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1096];
    i32 %1156 = load i32* %1155;
    i32 %1157 = add i32 %1093, i32 %1156;
    ubr ^b87;
  ^if.then102:
    i32* %1158 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1101];
    i32 %1159 = load i32* %1158;
    i32 %1160 = add i32 %1098, i32 %1159;
    ubr ^b88;
  ^b86:
    i32 %1161 = phi [^while.body56, i32 %1088] [^if.then100, i32 %1154];
    i32 %1162 = sdiv i32 %1090, i32 2;
    i32 %1163 = sdiv i32 %1089, i32 2;
    i32 %1164 = add i32 %1091, i32 1;
    ubr ^while.header86;
  ^b87:
    i32 %1165 = phi [^while.body57, i32 %1093] [^if.then101, i32 %1157];
    i32 %1166 = sdiv i32 %1095, i32 2;
    i32 %1167 = sdiv i32 %1094, i32 2;
    i32 %1168 = add i32 %1096, i32 1;
    ubr ^while.header87;
  ^b88:
    i32 %1169 = phi [^while.body58, i32 %1098] [^if.then102, i32 %1160];
    i32 %1170 = sdiv i32 %1100, i32 2;
    i32 %1171 = sdiv i32 %1099, i32 2;
    i32 %1172 = add i32 %1101, i32 1;
    ubr ^while.header88;
  ^while.body59:
    i32 %1173 = and i32 %1147, i32 %1148;
    i1 %1174 = ztrunc i32 %1173 to i1;
    cbr i1 %1174(prob = 0.5), ^if.then103, ^b89;
  ^if.then103:
    i32* %1175 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %1150];
    i32 %1176 = load i32* %1175;
    i32 %1177 = add i32 %1149, i32 %1176;
    ubr ^b89;
  ^b89:
    i32 %1178 = phi [^while.body59, i32 %1149] [^if.then103, i32 %1177];
    i32 %1179 = sdiv i32 %1148, i32 2;
    i32 %1180 = sdiv i32 %1147, i32 2;
    i32 %1181 = add i32 %1150, i32 1;
    ubr ^while.header89;
}
