internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [16 * i32]* %SHIFT_TABLE = alloc [16 * i32];
    i32* %0 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 0];
    store i32* %0 with i32 1;
    i32* %1 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 1];
    store i32* %1 with i32 2;
    i32* %2 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 2];
    store i32* %2 with i32 4;
    i32* %3 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 3];
    store i32* %3 with i32 8;
    i32* %4 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 4];
    store i32* %4 with i32 16;
    i32* %5 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 5];
    store i32* %5 with i32 32;
    i32* %6 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 6];
    store i32* %6 with i32 64;
    i32* %7 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 7];
    store i32* %7 with i32 128;
    i32* %8 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 8];
    store i32* %8 with i32 256;
    i32* %9 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 9];
    store i32* %9 with i32 512;
    i32* %10 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 10];
    store i32* %10 with i32 1024;
    i32* %11 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 11];
    store i32* %11 with i32 2048;
    i32* %12 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 12];
    store i32* %12 with i32 4096;
    i32* %13 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 13];
    store i32* %13 with i32 8192;
    i32* %14 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 14];
    store i32* %14 with i32 16384;
    i32* %15 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i64 15];
    store i32* %15 with i32 32768;
    call (i32) -> void @putint(i32 1);
    call (i32) -> void @putch(i32 10);
    ubr ^while.body;
^while.body:
    i32 %16 = phi [^entry, i32 2] [^b11, i32 %47];
    i32 %17 = phi [^entry, i32 1] [^b11, i32 %70];
    i32 %18 = phi [^entry, i32 1] [^b11, i32 %38];
    ubr ^while.body1;
^while.body1:
    i32 %19 = phi [^b2, i32 %31] [^while.body, i32 0];
    i32 %20 = phi [^b2, i32 %34] [^while.body, i32 0];
    i32 %21 = phi [^b2, i32 %32] [^while.body, i32 %17];
    i32 %22 = phi [^b2, i32 %33] [^while.body, i32 1];
    i32 %23 = srem i32 %21, i32 2;
    i1 %24 = scmp neq i32 %23, i32 0;
    cbr i1 %24(prob = 0.5), ^b, ^b1;
^b:
    i32 %25 = srem i32 %22, i32 2;
    i1 %26 = scmp neq i32 %25, i32 0;
    ubr ^b1;
^b1:
    i1 %27 = phi [^b, i1 %26] [^while.body1, i1 false];
    cbr i1 %27(prob = 0.5), ^if.then, ^b2;
^if.then:
    i32* %28 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %20];
    i32 %29 = load i32* %28;
    i32 %30 = add i32 %19, i32 %29;
    ubr ^b2;
^b2:
    i32 %31 = phi [^b1, i32 %19] [^if.then, i32 %30];
    i32 %32 = sdiv i32 %21, i32 2;
    i32 %33 = sdiv i32 %22, i32 2;
    i32 %34 = add i32 %20, i32 1;
    i1 %35 = scmp lt i32 %34, i32 16;
    cbr i1 %35(prob = 0.94), ^while.body1, ^b3;
^b3:
    i1 %36 = scmp neq i32 %31, i32 0;
    cbr i1 %36(prob = 0.5), ^if.then1, ^b4;
^if.then1:
    i1 %37 = scmp neq i32 %16, i32 0;
    cbr i1 %37(prob = 0.97), ^while.body2, ^b5;
^b4:
    i32 %38 = phi [^b5, i32 %43] [^b3, i32 %18];
    i1 %39 = scmp neq i32 %16, i32 0;
    cbr i1 %39(prob = 0.97), ^while.body3, ^b6;
^while.body2:
    i32 %40 = phi [^b28, i32 %120] [^if.then1, i32 %18];
    i32 %41 = phi [^b28, i32 %187] [^if.then1, i32 %16];
    i32 %42 = phi [^b28, i32 %100] [^if.then1, i32 0];
    ubr ^while.body4;
^b5:
    i32 %43 = phi [^b28, i32 %100] [^if.then1, i32 0];
    ubr ^b4;
^while.body3:
    i32 %44 = phi [^b4, i32 %16] [^b29, i32 %124];
    i32 %45 = phi [^b4, i32 %16] [^b29, i32 %197];
    i32 %46 = phi [^b4, i32 0] [^b29, i32 %102];
    ubr ^while.body5;
^b6:
    i32 %47 = phi [^b4, i32 0] [^b29, i32 %102];
    i1 %48 = scmp gt i32 %17, i32 32767;
    cbr i1 %48(prob = 0.5), ^if.then2, ^if.else;
^while.body4:
    i32 %49 = phi [^b13, i32 %78] [^while.body2, i32 0];
    i32 %50 = phi [^b13, i32 %81] [^while.body2, i32 0];
    i32 %51 = phi [^b13, i32 %79] [^while.body2, i32 %41];
    i32 %52 = phi [^b13, i32 %80] [^while.body2, i32 1];
    i32 %53 = srem i32 %51, i32 2;
    i1 %54 = scmp neq i32 %53, i32 0;
    cbr i1 %54(prob = 0.5), ^b7, ^b9;
^if.then2:
    i32 %55 = sdiv i32 %17, i32 2;
    i32 %56 = add i32 %55, i32 32768;
    ubr ^b11;
^while.body5:
    i32 %57 = phi [^while.body3, i32 0] [^b14, i32 %83];
    i32 %58 = phi [^while.body3, i32 0] [^b14, i32 %86];
    i32 %59 = phi [^while.body3, i32 %45] [^b14, i32 %84];
    i32 %60 = phi [^while.body3, i32 1] [^b14, i32 %85];
    i32 %61 = srem i32 %59, i32 2;
    i1 %62 = scmp neq i32 %61, i32 0;
    cbr i1 %62(prob = 0.5), ^b8, ^b10;
^if.else:
    i32 %63 = sdiv i32 %17, i32 2;
    ubr ^b11;
^b7:
    i32 %64 = srem i32 %52, i32 2;
    i1 %65 = scmp neq i32 %64, i32 0;
    ubr ^b9;
^b8:
    i32 %66 = srem i32 %60, i32 2;
    i1 %67 = scmp neq i32 %66, i32 0;
    ubr ^b10;
^b9:
    i1 %68 = phi [^while.body4, i1 false] [^b7, i1 %65];
    cbr i1 %68(prob = 0.5), ^if.then3, ^b13;
^b10:
    i1 %69 = phi [^while.body5, i1 false] [^b8, i1 %67];
    cbr i1 %69(prob = 0.5), ^if.then4, ^b14;
^b11:
    i32 %70 = phi [^if.then2, i32 %56] [^if.else, i32 %63];
    i1 %71 = scmp gt i32 %70, i32 0;
    cbr i1 %71(prob = 0.97), ^while.body, ^b12;
^if.then3:
    i32* %72 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %50];
    i32 %73 = load i32* %72;
    i32 %74 = add i32 %49, i32 %73;
    ubr ^b13;
^if.then4:
    i32* %75 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %58];
    i32 %76 = load i32* %75;
    i32 %77 = add i32 %57, i32 %76;
    ubr ^b14;
^b12:
    call (i32) -> void @putint(i32 %38);
    call (i32) -> void @putch(i32 10);
    ubr ^while.body6;
^b13:
    i32 %78 = phi [^if.then3, i32 %74] [^b9, i32 %49];
    i32 %79 = sdiv i32 %51, i32 2;
    i32 %80 = sdiv i32 %52, i32 2;
    i32 %81 = add i32 %50, i32 1;
    i1 %82 = scmp lt i32 %81, i32 16;
    cbr i1 %82(prob = 0.94), ^while.body4, ^b15;
^b14:
    i32 %83 = phi [^b10, i32 %57] [^if.then4, i32 %77];
    i32 %84 = sdiv i32 %59, i32 2;
    i32 %85 = sdiv i32 %60, i32 2;
    i32 %86 = add i32 %58, i32 1;
    i1 %87 = scmp lt i32 %86, i32 16;
    cbr i1 %87(prob = 0.94), ^while.body5, ^b16;
^while.body6:
    i32 %88 = phi [^b17, i32 %97] [^b12, i32 2];
    i1 %89 = scmp gt i32 %88, i32 0;
    cbr i1 %89(prob = 0.97), ^while.body7, ^b17;
^b15:
    i1 %90 = scmp neq i32 %78, i32 0;
    cbr i1 %90(prob = 0.5), ^if.then5, ^b18;
^b16:
    i1 %91 = scmp neq i32 %83, i32 0;
    cbr i1 %91(prob = 0.5), ^if.then6, ^b19;
^while.body7:
    i32 %92 = phi [^while.body6, i32 2] [^b65, i32 %291];
    i32 %93 = phi [^while.body6, i32 %88] [^b65, i32 %361];
    i32 %94 = phi [^while.body6, i32 1] [^b65, i32 %260];
    ubr ^while.body11;
^if.then5:
    i1 %95 = scmp neq i32 %40, i32 0;
    cbr i1 %95(prob = 0.97), ^while.body8, ^b20;
^b17:
    i32 %96 = phi [^while.body6, i32 1] [^b65, i32 %260];
    call (i32) -> void @putint(i32 %96);
    call (i32) -> void @putch(i32 10);
    i32 %97 = add i32 %88, i32 1;
    i1 %98 = scmp lt i32 %97, i32 16;
    cbr i1 %98(prob = 0.93), ^while.body6, ^while.body13;
^if.then6:
    i1 %99 = scmp neq i32 %44, i32 0;
    cbr i1 %99(prob = 0.97), ^while.body9, ^b21;
^b18:
    i32 %100 = phi [^b20, i32 %108] [^b15, i32 %42];
    i1 %101 = scmp neq i32 %40, i32 0;
    cbr i1 %101(prob = 0.97), ^while.body10, ^b22;
^b19:
    i32 %102 = phi [^b16, i32 %46] [^b21, i32 %117];
    i1 %103 = scmp neq i32 %44, i32 0;
    cbr i1 %103(prob = 0.97), ^while.body12, ^b23;
^while.body8:
    i32 %104 = phi [^b98, i32 %216] [^if.then5, i32 %42];
    i32 %105 = phi [^b98, i32 %470] [^if.then5, i32 %40];
    ubr ^while.body14;
^while.body9:
    i32 %106 = phi [^b101, i32 %221] [^if.then6, i32 %46];
    i32 %107 = phi [^b101, i32 %485] [^if.then6, i32 %44];
    ubr ^while.body16;
^b20:
    i32 %108 = phi [^b98, i32 %216] [^if.then5, i32 %42];
    ubr ^b18;
^while.body10:
    i32 %109 = phi [^b102, i32 %226] [^b18, i32 %40];
    i32 %110 = phi [^b102, i32 %490] [^b18, i32 %40];
    ubr ^while.body17;
^while.body11:
    i32 %111 = phi [^b27, i32 %176] [^while.body7, i32 0];
    i32 %112 = phi [^b27, i32 %179] [^while.body7, i32 0];
    i32 %113 = phi [^b27, i32 %177] [^while.body7, i32 %93];
    i32 %114 = phi [^b27, i32 %178] [^while.body7, i32 1];
    i32 %115 = srem i32 %113, i32 2;
    i1 %116 = scmp neq i32 %115, i32 0;
    cbr i1 %116(prob = 0.5), ^b24, ^b25;
^b21:
    i32 %117 = phi [^b101, i32 %221] [^if.then6, i32 %46];
    ubr ^b19;
^while.body12:
    i32 %118 = phi [^b19, i32 %44] [^b103, i32 %232];
    i32 %119 = phi [^b19, i32 %44] [^b103, i32 %495];
    ubr ^while.body18;
^b22:
    i32 %120 = phi [^b102, i32 %226] [^b18, i32 %40];
    i1 %121 = scmp gt i32 %41, i32 32767;
    cbr i1 %121(prob = 0.5), ^if.then7, ^if.else1;
^while.body13:
    i32 %122 = phi [^b17, i32 0] [^b30, i32 %199];
    i1 %123 = scmp gt i32 %122, i32 0;
    cbr i1 %123(prob = 0.97), ^while.body15, ^b26;
^b23:
    i32 %124 = phi [^b19, i32 %44] [^b103, i32 %232];
    i1 %125 = scmp gt i32 %45, i32 32767;
    cbr i1 %125(prob = 0.5), ^if.then8, ^if.else2;
^b24:
    i32 %126 = srem i32 %114, i32 2;
    i1 %127 = scmp neq i32 %126, i32 0;
    ubr ^b25;
^while.body14:
    i32 %128 = phi [^b33, i32 %216] [^while.body8, i32 0];
    i32 %129 = phi [^b33, i32 %219] [^while.body8, i32 0];
    i32 %130 = phi [^b33, i32 %217] [^while.body8, i32 %104];
    i32 %131 = phi [^b33, i32 %218] [^while.body8, i32 %105];
    i32 %132 = srem i32 %130, i32 2;
    i1 %133 = scmp neq i32 %132, i32 0;
    cbr i1 %133(prob = 0.5), ^if.then10, ^if.else3;
^if.then7:
    i32 %134 = sdiv i32 %41, i32 2;
    i32 %135 = add i32 %134, i32 32768;
    ubr ^b28;
^while.body15:
    i32 %136 = phi [^b81, i32 %364] [^while.body13, i32 2];
    i32 %137 = phi [^b81, i32 %438] [^while.body13, i32 %122];
    i32 %138 = phi [^b81, i32 %338] [^while.body13, i32 1];
    ubr ^while.body19;
^b25:
    i1 %139 = phi [^b24, i1 %127] [^while.body11, i1 false];
    cbr i1 %139(prob = 0.5), ^if.then9, ^b27;
^while.body16:
    i32 %140 = phi [^while.body9, i32 0] [^b34, i32 %221];
    i32 %141 = phi [^while.body9, i32 0] [^b34, i32 %224];
    i32 %142 = phi [^while.body9, i32 %106] [^b34, i32 %222];
    i32 %143 = phi [^while.body9, i32 %107] [^b34, i32 %223];
    i32 %144 = srem i32 %142, i32 2;
    i1 %145 = scmp neq i32 %144, i32 0;
    cbr i1 %145(prob = 0.5), ^if.then11, ^if.else4;
^if.then8:
    i32 %146 = sdiv i32 %45, i32 2;
    i32 %147 = add i32 %146, i32 32768;
    ubr ^b29;
^while.body17:
    i32 %148 = phi [^while.body10, i32 0] [^b35, i32 %226];
    i32 %149 = phi [^while.body10, i32 0] [^b35, i32 %229];
    i32 %150 = phi [^while.body10, i32 %109] [^b35, i32 %227];
    i32 %151 = phi [^while.body10, i32 %110] [^b35, i32 %228];
    i32 %152 = srem i32 %150, i32 2;
    i1 %153 = scmp neq i32 %152, i32 0;
    cbr i1 %153(prob = 0.5), ^if.then12, ^if.else5;
^if.else1:
    i32 %154 = sdiv i32 %41, i32 2;
    ubr ^b28;
^while.body18:
    i32 %155 = phi [^b37, i32 %232] [^while.body12, i32 0];
    i32 %156 = phi [^b37, i32 %235] [^while.body12, i32 0];
    i32 %157 = phi [^b37, i32 %233] [^while.body12, i32 %118];
    i32 %158 = phi [^b37, i32 %234] [^while.body12, i32 %119];
    i32 %159 = srem i32 %157, i32 2;
    i1 %160 = scmp neq i32 %159, i32 0;
    cbr i1 %160(prob = 0.5), ^if.then13, ^if.else6;
^if.else2:
    i32 %161 = sdiv i32 %45, i32 2;
    ubr ^b29;
^b26:
    i32* %162 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %122];
    i32 %163 = load i32* %162;
    i1 %164 = scmp neq i32 %163, i32 1;
    cbr i1 %164(prob = 0.5), ^b31, ^b30;
^if.then9:
    i32* %165 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %112];
    i32 %166 = load i32* %165;
    i32 %167 = add i32 %111, i32 %166;
    ubr ^b27;
^if.then10:
    i32 %168 = srem i32 %131, i32 2;
    i1 %169 = scmp eq i32 %168, i32 0;
    cbr i1 %169(prob = 0.5), ^if.then14, ^b33;
^if.then11:
    i32 %170 = srem i32 %143, i32 2;
    i1 %171 = scmp eq i32 %170, i32 0;
    cbr i1 %171(prob = 0.5), ^if.then15, ^b34;
^if.else3:
    i32 %172 = srem i32 %131, i32 2;
    i1 %173 = scmp neq i32 %172, i32 0;
    cbr i1 %173(prob = 0.5), ^if.then14, ^b33;
^if.then12:
    i32 %174 = srem i32 %151, i32 2;
    i1 %175 = scmp eq i32 %174, i32 0;
    cbr i1 %175(prob = 0.5), ^if.then16, ^b35;
^b27:
    i32 %176 = phi [^if.then9, i32 %167] [^b25, i32 %111];
    i32 %177 = sdiv i32 %113, i32 2;
    i32 %178 = sdiv i32 %114, i32 2;
    i32 %179 = add i32 %112, i32 1;
    i1 %180 = scmp lt i32 %179, i32 16;
    cbr i1 %180(prob = 0.94), ^while.body11, ^b36;
^if.else4:
    i32 %181 = srem i32 %143, i32 2;
    i1 %182 = scmp neq i32 %181, i32 0;
    cbr i1 %182(prob = 0.5), ^if.then15, ^b34;
^if.then13:
    i32 %183 = srem i32 %158, i32 2;
    i1 %184 = scmp eq i32 %183, i32 0;
    cbr i1 %184(prob = 0.5), ^if.then17, ^b37;
^if.else5:
    i32 %185 = srem i32 %151, i32 2;
    i1 %186 = scmp neq i32 %185, i32 0;
    cbr i1 %186(prob = 0.5), ^if.then16, ^b35;
^b28:
    i32 %187 = phi [^if.then7, i32 %135] [^if.else1, i32 %154];
    i1 %188 = scmp neq i32 %187, i32 0;
    cbr i1 %188(prob = 0.97), ^while.body2, ^b5;
^while.body19:
    i32 %189 = phi [^b40, i32 %262] [^while.body15, i32 0];
    i32 %190 = phi [^b40, i32 %265] [^while.body15, i32 0];
    i32 %191 = phi [^b40, i32 %263] [^while.body15, i32 %137];
    i32 %192 = phi [^b40, i32 %264] [^while.body15, i32 1];
    i32 %193 = srem i32 %191, i32 2;
    i1 %194 = scmp neq i32 %193, i32 0;
    cbr i1 %194(prob = 0.5), ^b32, ^b38;
^if.else6:
    i32 %195 = srem i32 %158, i32 2;
    i1 %196 = scmp neq i32 %195, i32 0;
    cbr i1 %196(prob = 0.5), ^if.then17, ^b37;
^b29:
    i32 %197 = phi [^if.then8, i32 %147] [^if.else2, i32 %161];
    i1 %198 = scmp neq i32 %197, i32 0;
    cbr i1 %198(prob = 0.97), ^while.body3, ^b6;
^b30:
    i32 %199 = add i32 %122, i32 1;
    i1 %200 = scmp lt i32 %199, i32 16;
    cbr i1 %200(prob = 0.94), ^while.body13, ^b31;
^b31:
    i32 %201 = phi [^b30, i32 0] [^b26, i32 1] [^b88, i32 1];
    ret i32 %201;
^if.then14:
    i32* %202 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %129];
    i32 %203 = load i32* %202;
    i32 %204 = add i32 %128, i32 %203;
    ubr ^b33;
^if.then15:
    i32* %205 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %141];
    i32 %206 = load i32* %205;
    i32 %207 = add i32 %140, i32 %206;
    ubr ^b34;
^if.then16:
    i32* %208 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %149];
    i32 %209 = load i32* %208;
    i32 %210 = add i32 %148, i32 %209;
    ubr ^b35;
^if.then17:
    i32* %211 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %156];
    i32 %212 = load i32* %211;
    i32 %213 = add i32 %155, i32 %212;
    ubr ^b37;
^b32:
    i32 %214 = srem i32 %192, i32 2;
    i1 %215 = scmp neq i32 %214, i32 0;
    ubr ^b38;
^b33:
    i32 %216 = phi [^if.then10, i32 %128] [^if.else3, i32 %128] [^if.then14, i32 %204];
    i32 %217 = sdiv i32 %130, i32 2;
    i32 %218 = sdiv i32 %131, i32 2;
    i32 %219 = add i32 %129, i32 1;
    i1 %220 = scmp lt i32 %219, i32 16;
    cbr i1 %220(prob = 0.94), ^while.body14, ^while.body20;
^b34:
    i32 %221 = phi [^if.else4, i32 %140] [^if.then11, i32 %140] [^if.then15, i32 %207];
    i32 %222 = sdiv i32 %142, i32 2;
    i32 %223 = sdiv i32 %143, i32 2;
    i32 %224 = add i32 %141, i32 1;
    i1 %225 = scmp lt i32 %224, i32 16;
    cbr i1 %225(prob = 0.94), ^while.body16, ^while.body21;
^b35:
    i32 %226 = phi [^if.else5, i32 %148] [^if.then12, i32 %148] [^if.then16, i32 %210];
    i32 %227 = sdiv i32 %150, i32 2;
    i32 %228 = sdiv i32 %151, i32 2;
    i32 %229 = add i32 %149, i32 1;
    i1 %230 = scmp lt i32 %229, i32 16;
    cbr i1 %230(prob = 0.94), ^while.body17, ^while.body22;
^b36:
    i1 %231 = scmp neq i32 %176, i32 0;
    cbr i1 %231(prob = 0.5), ^if.then19, ^b39;
^b37:
    i32 %232 = phi [^if.else6, i32 %155] [^if.then17, i32 %213] [^if.then13, i32 %155];
    i32 %233 = sdiv i32 %157, i32 2;
    i32 %234 = sdiv i32 %158, i32 2;
    i32 %235 = add i32 %156, i32 1;
    i1 %236 = scmp lt i32 %235, i32 16;
    cbr i1 %236(prob = 0.94), ^while.body18, ^while.body23;
^b38:
    i1 %237 = phi [^while.body19, i1 false] [^b32, i1 %215];
    cbr i1 %237(prob = 0.5), ^if.then18, ^b40;
^if.then18:
    i32* %238 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %190];
    i32 %239 = load i32* %238;
    i32 %240 = add i32 %189, i32 %239;
    ubr ^b40;
^while.body20:
    i32 %241 = phi [^b52, i32 %322] [^b33, i32 0];
    i32 %242 = phi [^b52, i32 %325] [^b33, i32 0];
    i32 %243 = phi [^b52, i32 %323] [^b33, i32 %104];
    i32 %244 = phi [^b52, i32 %324] [^b33, i32 %105];
    i32 %245 = srem i32 %243, i32 2;
    i1 %246 = scmp neq i32 %245, i32 0;
    cbr i1 %246(prob = 0.5), ^b41, ^b46;
^if.then19:
    i1 %247 = scmp neq i32 %92, i32 0;
    cbr i1 %247(prob = 0.97), ^while.body24, ^b44;
^while.body21:
    i32 %248 = phi [^b53, i32 %328] [^b34, i32 0];
    i32 %249 = phi [^b53, i32 %331] [^b34, i32 0];
    i32 %250 = phi [^b53, i32 %329] [^b34, i32 %106];
    i32 %251 = phi [^b53, i32 %330] [^b34, i32 %107];
    i32 %252 = srem i32 %250, i32 2;
    i1 %253 = scmp neq i32 %252, i32 0;
    cbr i1 %253(prob = 0.5), ^b42, ^b47;
^while.body22:
    i32 %254 = phi [^b35, i32 0] [^b54, i32 %333];
    i32 %255 = phi [^b35, i32 0] [^b54, i32 %336];
    i32 %256 = phi [^b35, i32 %109] [^b54, i32 %334];
    i32 %257 = phi [^b35, i32 %110] [^b54, i32 %335];
    i32 %258 = srem i32 %256, i32 2;
    i1 %259 = scmp neq i32 %258, i32 0;
    cbr i1 %259(prob = 0.5), ^b43, ^b48;
^b39:
    i32 %260 = phi [^b44, i32 %282] [^b36, i32 %94];
    i1 %261 = scmp neq i32 %92, i32 0;
    cbr i1 %261(prob = 0.97), ^while.body25, ^b49;
^b40:
    i32 %262 = phi [^b38, i32 %189] [^if.then18, i32 %240];
    i32 %263 = sdiv i32 %191, i32 2;
    i32 %264 = sdiv i32 %192, i32 2;
    i32 %265 = add i32 %190, i32 1;
    i1 %266 = scmp lt i32 %265, i32 16;
    cbr i1 %266(prob = 0.94), ^while.body19, ^b50;
^while.body23:
    i32 %267 = phi [^b37, i32 0] [^b56, i32 %340];
    i32 %268 = phi [^b37, i32 0] [^b56, i32 %343];
    i32 %269 = phi [^b37, i32 %118] [^b56, i32 %341];
    i32 %270 = phi [^b37, i32 %119] [^b56, i32 %342];
    i32 %271 = srem i32 %269, i32 2;
    i1 %272 = scmp neq i32 %271, i32 0;
    cbr i1 %272(prob = 0.5), ^b45, ^b51;
^b41:
    i32 %273 = srem i32 %244, i32 2;
    i1 %274 = scmp neq i32 %273, i32 0;
    ubr ^b46;
^while.body24:
    i32 %275 = phi [^b107, i32 %510] [^if.then19, i32 %94];
    i32 %276 = phi [^b107, i32 %577] [^if.then19, i32 %92];
    i32 %277 = phi [^b107, i32 %462] [^if.then19, i32 0];
    ubr ^while.body26;
^b42:
    i32 %278 = srem i32 %251, i32 2;
    i1 %279 = scmp neq i32 %278, i32 0;
    ubr ^b47;
^b43:
    i32 %280 = srem i32 %257, i32 2;
    i1 %281 = scmp neq i32 %280, i32 0;
    ubr ^b48;
^b44:
    i32 %282 = phi [^b107, i32 %462] [^if.then19, i32 0];
    ubr ^b39;
^while.body25:
    i32 %283 = phi [^b109, i32 %514] [^b39, i32 %92];
    i32 %284 = phi [^b109, i32 %584] [^b39, i32 %92];
    i32 %285 = phi [^b109, i32 %478] [^b39, i32 0];
    ubr ^while.body27;
^b45:
    i32 %286 = srem i32 %270, i32 2;
    i1 %287 = scmp neq i32 %286, i32 0;
    ubr ^b51;
^b46:
    i1 %288 = phi [^while.body20, i1 false] [^b41, i1 %274];
    cbr i1 %288(prob = 0.5), ^if.then20, ^b52;
^b47:
    i1 %289 = phi [^b42, i1 %279] [^while.body21, i1 false];
    cbr i1 %289(prob = 0.5), ^if.then21, ^b53;
^b48:
    i1 %290 = phi [^while.body22, i1 false] [^b43, i1 %281];
    cbr i1 %290(prob = 0.5), ^if.then22, ^b54;
^b49:
    i32 %291 = phi [^b109, i32 %478] [^b39, i32 0];
    i1 %292 = scmp gt i32 %93, i32 32767;
    cbr i1 %292(prob = 0.5), ^if.then23, ^if.else7;
^b50:
    i1 %293 = scmp neq i32 %262, i32 0;
    cbr i1 %293(prob = 0.5), ^if.then25, ^b55;
^b51:
    i1 %294 = phi [^b45, i1 %287] [^while.body23, i1 false];
    cbr i1 %294(prob = 0.5), ^if.then24, ^b56;
^if.then20:
    i32* %295 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %242];
    i32 %296 = load i32* %295;
    i32 %297 = add i32 %241, i32 %296;
    ubr ^b52;
^if.then21:
    i32* %298 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %249];
    i32 %299 = load i32* %298;
    i32 %300 = add i32 %248, i32 %299;
    ubr ^b53;
^if.then22:
    i32* %301 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %255];
    i32 %302 = load i32* %301;
    i32 %303 = add i32 %254, i32 %302;
    ubr ^b54;
^while.body26:
    i32 %304 = phi [^while.body24, i32 0] [^b68, i32 %372];
    i32 %305 = phi [^while.body24, i32 0] [^b68, i32 %375];
    i32 %306 = phi [^while.body24, i32 %276] [^b68, i32 %373];
    i32 %307 = phi [^while.body24, i32 1] [^b68, i32 %374];
    i32 %308 = srem i32 %306, i32 2;
    i1 %309 = scmp neq i32 %308, i32 0;
    cbr i1 %309(prob = 0.5), ^b57, ^b60;
^if.then23:
    i32 %310 = sdiv i32 %93, i32 2;
    i32 %311 = add i32 %310, i32 32768;
    ubr ^b65;
^if.then24:
    i32* %312 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %268];
    i32 %313 = load i32* %312;
    i32 %314 = add i32 %267, i32 %313;
    ubr ^b56;
^while.body27:
    i32 %315 = phi [^b69, i32 %391] [^while.body25, i32 0];
    i32 %316 = phi [^b69, i32 %394] [^while.body25, i32 0];
    i32 %317 = phi [^b69, i32 %392] [^while.body25, i32 %284];
    i32 %318 = phi [^b69, i32 %393] [^while.body25, i32 1];
    i32 %319 = srem i32 %317, i32 2;
    i1 %320 = scmp neq i32 %319, i32 0;
    cbr i1 %320(prob = 0.5), ^b58, ^b64;
^if.else7:
    i32 %321 = sdiv i32 %93, i32 2;
    ubr ^b65;
^b52:
    i32 %322 = phi [^if.then20, i32 %297] [^b46, i32 %241];
    i32 %323 = sdiv i32 %243, i32 2;
    i32 %324 = sdiv i32 %244, i32 2;
    i32 %325 = add i32 %242, i32 1;
    i1 %326 = scmp lt i32 %325, i32 16;
    cbr i1 %326(prob = 0.94), ^while.body20, ^b59;
^if.then25:
    i1 %327 = scmp neq i32 %136, i32 0;
    cbr i1 %327(prob = 0.97), ^while.body28, ^b61;
^b53:
    i32 %328 = phi [^if.then21, i32 %300] [^b47, i32 %248];
    i32 %329 = sdiv i32 %250, i32 2;
    i32 %330 = sdiv i32 %251, i32 2;
    i32 %331 = add i32 %249, i32 1;
    i1 %332 = scmp lt i32 %331, i32 16;
    cbr i1 %332(prob = 0.94), ^while.body21, ^b62;
^b54:
    i32 %333 = phi [^if.then22, i32 %303] [^b48, i32 %254];
    i32 %334 = sdiv i32 %256, i32 2;
    i32 %335 = sdiv i32 %257, i32 2;
    i32 %336 = add i32 %255, i32 1;
    i1 %337 = scmp lt i32 %336, i32 16;
    cbr i1 %337(prob = 0.94), ^while.body22, ^b63;
^b55:
    i32 %338 = phi [^b50, i32 %138] [^b61, i32 %354];
    i1 %339 = scmp neq i32 %136, i32 0;
    cbr i1 %339(prob = 0.97), ^while.body29, ^b67;
^b56:
    i32 %340 = phi [^b51, i32 %267] [^if.then24, i32 %314];
    i32 %341 = sdiv i32 %269, i32 2;
    i32 %342 = sdiv i32 %270, i32 2;
    i32 %343 = add i32 %268, i32 1;
    i1 %344 = scmp lt i32 %343, i32 16;
    cbr i1 %344(prob = 0.94), ^while.body23, ^b66;
^b57:
    i32 %345 = srem i32 %307, i32 2;
    i1 %346 = scmp neq i32 %345, i32 0;
    ubr ^b60;
^b58:
    i32 %347 = srem i32 %318, i32 2;
    i1 %348 = scmp neq i32 %347, i32 0;
    ubr ^b64;
^while.body28:
    i32 %349 = phi [^b116, i32 %586] [^if.then25, i32 %138];
    i32 %350 = phi [^b116, i32 %690] [^if.then25, i32 %136];
    i32 %351 = phi [^b116, i32 %551] [^if.then25, i32 0];
    ubr ^while.body30;
^b59:
    i32 %352 = mul i32 %322, i32 2;
    ubr ^while.body31;
^b60:
    i1 %353 = phi [^b57, i1 %346] [^while.body26, i1 false];
    cbr i1 %353(prob = 0.5), ^if.then26, ^b68;
^b61:
    i32 %354 = phi [^b116, i32 %551] [^if.then25, i32 0];
    ubr ^b55;
^while.body29:
    i32 %355 = phi [^b55, i32 %136] [^b117, i32 %588];
    i32 %356 = phi [^b55, i32 %136] [^b117, i32 %694];
    i32 %357 = phi [^b55, i32 0] [^b117, i32 %554];
    ubr ^while.body32;
^b62:
    i32 %358 = mul i32 %328, i32 2;
    ubr ^while.body33;
^b63:
    i32 %359 = mul i32 %333, i32 2;
    ubr ^while.body34;
^b64:
    i1 %360 = phi [^b58, i1 %348] [^while.body27, i1 false];
    cbr i1 %360(prob = 0.5), ^if.then27, ^b69;
^b65:
    i32 %361 = phi [^if.then23, i32 %311] [^if.else7, i32 %321];
    i1 %362 = scmp gt i32 %361, i32 0;
    cbr i1 %362(prob = 0.97), ^while.body7, ^b17;
^b66:
    i32 %363 = mul i32 %340, i32 2;
    ubr ^while.body35;
^b67:
    i32 %364 = phi [^b55, i32 0] [^b117, i32 %554];
    i1 %365 = scmp gt i32 %137, i32 32767;
    cbr i1 %365(prob = 0.5), ^if.then28, ^if.else8;
^if.then26:
    i32* %366 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %305];
    i32 %367 = load i32* %366;
    i32 %368 = add i32 %304, i32 %367;
    ubr ^b68;
^if.then27:
    i32* %369 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %316];
    i32 %370 = load i32* %369;
    i32 %371 = add i32 %315, i32 %370;
    ubr ^b69;
^b68:
    i32 %372 = phi [^if.then26, i32 %368] [^b60, i32 %304];
    i32 %373 = sdiv i32 %306, i32 2;
    i32 %374 = sdiv i32 %307, i32 2;
    i32 %375 = add i32 %305, i32 1;
    i1 %376 = scmp lt i32 %375, i32 16;
    cbr i1 %376(prob = 0.94), ^while.body26, ^b76;
^while.body30:
    i32 %377 = phi [^b86, i32 %465] [^while.body28, i32 0];
    i32 %378 = phi [^b86, i32 %468] [^while.body28, i32 0];
    i32 %379 = phi [^b86, i32 %466] [^while.body28, i32 %350];
    i32 %380 = phi [^b86, i32 %467] [^while.body28, i32 1];
    i32 %381 = srem i32 %379, i32 2;
    i1 %382 = scmp neq i32 %381, i32 0;
    cbr i1 %382(prob = 0.5), ^b70, ^b77;
^if.then28:
    i32 %383 = sdiv i32 %137, i32 2;
    i32 %384 = add i32 %383, i32 32768;
    ubr ^b81;
^while.body31:
    i32 %385 = phi [^b87, i32 %470] [^b59, i32 0];
    i32 %386 = phi [^b87, i32 %473] [^b59, i32 0];
    i32 %387 = phi [^b87, i32 %471] [^b59, i32 %352];
    i32 %388 = phi [^b87, i32 %472] [^b59, i32 65535];
    i32 %389 = srem i32 %387, i32 2;
    i1 %390 = scmp neq i32 %389, i32 0;
    cbr i1 %390(prob = 0.5), ^b71, ^b78;
^b69:
    i32 %391 = phi [^if.then27, i32 %371] [^b64, i32 %315];
    i32 %392 = sdiv i32 %317, i32 2;
    i32 %393 = sdiv i32 %318, i32 2;
    i32 %394 = add i32 %316, i32 1;
    i1 %395 = scmp lt i32 %394, i32 16;
    cbr i1 %395(prob = 0.94), ^while.body27, ^b79;
^while.body32:
    i32 %396 = phi [^b90, i32 %480] [^while.body29, i32 0];
    i32 %397 = phi [^b90, i32 %483] [^while.body29, i32 0];
    i32 %398 = phi [^b90, i32 %481] [^while.body29, i32 %356];
    i32 %399 = phi [^b90, i32 %482] [^while.body29, i32 1];
    i32 %400 = srem i32 %398, i32 2;
    i1 %401 = scmp neq i32 %400, i32 0;
    cbr i1 %401(prob = 0.5), ^b72, ^b80;
^if.else8:
    i32 %402 = sdiv i32 %137, i32 2;
    ubr ^b81;
^while.body33:
    i32 %403 = phi [^b91, i32 %485] [^b62, i32 0];
    i32 %404 = phi [^b91, i32 %488] [^b62, i32 0];
    i32 %405 = phi [^b91, i32 %486] [^b62, i32 %358];
    i32 %406 = phi [^b91, i32 %487] [^b62, i32 65535];
    i32 %407 = srem i32 %405, i32 2;
    i1 %408 = scmp neq i32 %407, i32 0;
    cbr i1 %408(prob = 0.5), ^b73, ^b82;
^while.body34:
    i32 %409 = phi [^b92, i32 %490] [^b63, i32 0];
    i32 %410 = phi [^b92, i32 %493] [^b63, i32 0];
    i32 %411 = phi [^b92, i32 %491] [^b63, i32 %359];
    i32 %412 = phi [^b92, i32 %492] [^b63, i32 65535];
    i32 %413 = srem i32 %411, i32 2;
    i1 %414 = scmp neq i32 %413, i32 0;
    cbr i1 %414(prob = 0.5), ^b74, ^b83;
^while.body35:
    i32 %415 = phi [^b93, i32 %495] [^b66, i32 0];
    i32 %416 = phi [^b93, i32 %498] [^b66, i32 0];
    i32 %417 = phi [^b93, i32 %496] [^b66, i32 %363];
    i32 %418 = phi [^b93, i32 %497] [^b66, i32 65535];
    i32 %419 = srem i32 %417, i32 2;
    i1 %420 = scmp neq i32 %419, i32 0;
    cbr i1 %420(prob = 0.5), ^b75, ^b84;
^b70:
    i32 %421 = srem i32 %380, i32 2;
    i1 %422 = scmp neq i32 %421, i32 0;
    ubr ^b77;
^b71:
    i32 %423 = srem i32 %388, i32 2;
    i1 %424 = scmp neq i32 %423, i32 0;
    ubr ^b78;
^b72:
    i32 %425 = srem i32 %399, i32 2;
    i1 %426 = scmp neq i32 %425, i32 0;
    ubr ^b80;
^b73:
    i32 %427 = srem i32 %406, i32 2;
    i1 %428 = scmp neq i32 %427, i32 0;
    ubr ^b82;
^b74:
    i32 %429 = srem i32 %412, i32 2;
    i1 %430 = scmp neq i32 %429, i32 0;
    ubr ^b83;
^b75:
    i32 %431 = srem i32 %418, i32 2;
    i1 %432 = scmp neq i32 %431, i32 0;
    ubr ^b84;
^b76:
    i1 %433 = scmp neq i32 %372, i32 0;
    cbr i1 %433(prob = 0.5), ^if.then34, ^b85;
^b77:
    i1 %434 = phi [^while.body30, i1 false] [^b70, i1 %422];
    cbr i1 %434(prob = 0.5), ^if.then29, ^b86;
^b78:
    i1 %435 = phi [^b71, i1 %424] [^while.body31, i1 false];
    cbr i1 %435(prob = 0.5), ^if.then30, ^b87;
^b79:
    i1 %436 = scmp neq i32 %391, i32 0;
    cbr i1 %436(prob = 0.5), ^if.then36, ^b89;
^b80:
    i1 %437 = phi [^while.body32, i1 false] [^b72, i1 %426];
    cbr i1 %437(prob = 0.5), ^if.then31, ^b90;
^b81:
    i32 %438 = phi [^if.then28, i32 %384] [^if.else8, i32 %402];
    i1 %439 = scmp gt i32 %438, i32 0;
    cbr i1 %439(prob = 0.97), ^while.body15, ^b88;
^b82:
    i1 %440 = phi [^b73, i1 %428] [^while.body33, i1 false];
    cbr i1 %440(prob = 0.5), ^if.then32, ^b91;
^b83:
    i1 %441 = phi [^b74, i1 %430] [^while.body34, i1 false];
    cbr i1 %441(prob = 0.5), ^if.then33, ^b92;
^b84:
    i1 %442 = phi [^b75, i1 %432] [^while.body35, i1 false];
    cbr i1 %442(prob = 0.5), ^if.then35, ^b93;
^if.then29:
    i32* %443 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %378];
    i32 %444 = load i32* %443;
    i32 %445 = add i32 %377, i32 %444;
    ubr ^b86;
^if.then30:
    i32* %446 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %386];
    i32 %447 = load i32* %446;
    i32 %448 = add i32 %385, i32 %447;
    ubr ^b87;
^if.then31:
    i32* %449 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %397];
    i32 %450 = load i32* %449;
    i32 %451 = add i32 %396, i32 %450;
    ubr ^b90;
^if.then32:
    i32* %452 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %404];
    i32 %453 = load i32* %452;
    i32 %454 = add i32 %403, i32 %453;
    ubr ^b91;
^if.then33:
    i32* %455 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %410];
    i32 %456 = load i32* %455;
    i32 %457 = add i32 %409, i32 %456;
    ubr ^b92;
^if.then34:
    i1 %458 = scmp neq i32 %275, i32 0;
    cbr i1 %458(prob = 0.97), ^while.body36, ^b94;
^if.then35:
    i32* %459 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %416];
    i32 %460 = load i32* %459;
    i32 %461 = add i32 %415, i32 %460;
    ubr ^b93;
^b85:
    i32 %462 = phi [^b76, i32 %277] [^b94, i32 %502];
    i1 %463 = scmp neq i32 %275, i32 0;
    cbr i1 %463(prob = 0.97), ^while.body37, ^b96;
^if.then36:
    i1 %464 = scmp neq i32 %283, i32 0;
    cbr i1 %464(prob = 0.97), ^while.body38, ^b95;
^b86:
    i32 %465 = phi [^if.then29, i32 %445] [^b77, i32 %377];
    i32 %466 = sdiv i32 %379, i32 2;
    i32 %467 = sdiv i32 %380, i32 2;
    i32 %468 = add i32 %378, i32 1;
    i1 %469 = scmp lt i32 %468, i32 16;
    cbr i1 %469(prob = 0.94), ^while.body30, ^b97;
^b87:
    i32 %470 = phi [^if.then30, i32 %448] [^b78, i32 %385];
    i32 %471 = sdiv i32 %387, i32 2;
    i32 %472 = sdiv i32 %388, i32 2;
    i32 %473 = add i32 %386, i32 1;
    i1 %474 = scmp lt i32 %473, i32 16;
    cbr i1 %474(prob = 0.94), ^while.body31, ^b98;
^b88:
    i32* %475 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %122];
    i32 %476 = load i32* %475;
    i1 %477 = scmp neq i32 %476, i32 %338;
    cbr i1 %477(prob = 0.5), ^b31, ^b30;
^b89:
    i32 %478 = phi [^b79, i32 %285] [^b95, i32 %507];
    i1 %479 = scmp neq i32 %283, i32 0;
    cbr i1 %479(prob = 0.97), ^while.body39, ^b99;
^b90:
    i32 %480 = phi [^if.then31, i32 %451] [^b80, i32 %396];
    i32 %481 = sdiv i32 %398, i32 2;
    i32 %482 = sdiv i32 %399, i32 2;
    i32 %483 = add i32 %397, i32 1;
    i1 %484 = scmp lt i32 %483, i32 16;
    cbr i1 %484(prob = 0.94), ^while.body32, ^b100;
^b91:
    i32 %485 = phi [^if.then32, i32 %454] [^b82, i32 %403];
    i32 %486 = sdiv i32 %405, i32 2;
    i32 %487 = sdiv i32 %406, i32 2;
    i32 %488 = add i32 %404, i32 1;
    i1 %489 = scmp lt i32 %488, i32 16;
    cbr i1 %489(prob = 0.94), ^while.body33, ^b101;
^b92:
    i32 %490 = phi [^b83, i32 %409] [^if.then33, i32 %457];
    i32 %491 = sdiv i32 %411, i32 2;
    i32 %492 = sdiv i32 %412, i32 2;
    i32 %493 = add i32 %410, i32 1;
    i1 %494 = scmp lt i32 %493, i32 16;
    cbr i1 %494(prob = 0.94), ^while.body34, ^b102;
^b93:
    i32 %495 = phi [^if.then35, i32 %461] [^b84, i32 %415];
    i32 %496 = sdiv i32 %417, i32 2;
    i32 %497 = sdiv i32 %418, i32 2;
    i32 %498 = add i32 %416, i32 1;
    i1 %499 = scmp lt i32 %498, i32 16;
    cbr i1 %499(prob = 0.94), ^while.body35, ^b103;
^while.body36:
    i32 %500 = phi [^if.then34, i32 %277] [^b170, i32 %602];
    i32 %501 = phi [^if.then34, i32 %275] [^b170, i32 %896];
    ubr ^while.body40;
^b94:
    i32 %502 = phi [^if.then34, i32 %277] [^b170, i32 %602];
    ubr ^b85;
^while.body37:
    i32 %503 = phi [^b85, i32 %275] [^b172, i32 %607];
    i32 %504 = phi [^b85, i32 %275] [^b172, i32 %907];
    ubr ^while.body41;
^while.body38:
    i32 %505 = phi [^if.then36, i32 %285] [^b173, i32 %612];
    i32 %506 = phi [^if.then36, i32 %283] [^b173, i32 %912];
    ubr ^while.body42;
^b95:
    i32 %507 = phi [^if.then36, i32 %285] [^b173, i32 %612];
    ubr ^b89;
^while.body39:
    i32 %508 = phi [^b89, i32 %283] [^b176, i32 %625];
    i32 %509 = phi [^b89, i32 %283] [^b176, i32 %929];
    ubr ^while.body43;
^b96:
    i32 %510 = phi [^b85, i32 %275] [^b172, i32 %607];
    i1 %511 = scmp gt i32 %276, i32 32767;
    cbr i1 %511(prob = 0.5), ^if.then37, ^if.else9;
^b97:
    i1 %512 = scmp neq i32 %465, i32 0;
    cbr i1 %512(prob = 0.5), ^if.then39, ^b104;
^b98:
    i1 %513 = scmp neq i32 %470, i32 0;
    cbr i1 %513(prob = 0.97), ^while.body8, ^b20;
^b99:
    i32 %514 = phi [^b89, i32 %283] [^b176, i32 %625];
    i1 %515 = scmp gt i32 %284, i32 32767;
    cbr i1 %515(prob = 0.5), ^if.then38, ^if.else10;
^b100:
    i1 %516 = scmp neq i32 %480, i32 0;
    cbr i1 %516(prob = 0.5), ^if.then40, ^b105;
^b101:
    i1 %517 = scmp neq i32 %485, i32 0;
    cbr i1 %517(prob = 0.97), ^while.body9, ^b21;
^b102:
    i1 %518 = scmp neq i32 %490, i32 0;
    cbr i1 %518(prob = 0.97), ^while.body10, ^b22;
^b103:
    i1 %519 = scmp neq i32 %495, i32 0;
    cbr i1 %519(prob = 0.97), ^while.body12, ^b23;
^while.body40:
    i32 %520 = phi [^b112, i32 %602] [^while.body36, i32 0];
    i32 %521 = phi [^b112, i32 %605] [^while.body36, i32 0];
    i32 %522 = phi [^b112, i32 %603] [^while.body36, i32 %500];
    i32 %523 = phi [^b112, i32 %604] [^while.body36, i32 %501];
    i32 %524 = srem i32 %522, i32 2;
    i1 %525 = scmp neq i32 %524, i32 0;
    cbr i1 %525(prob = 0.5), ^if.then41, ^if.else11;
^if.then37:
    i32 %526 = sdiv i32 %276, i32 2;
    i32 %527 = add i32 %526, i32 32768;
    ubr ^b107;
^while.body41:
    i32 %528 = phi [^while.body37, i32 0] [^b113, i32 %607];
    i32 %529 = phi [^while.body37, i32 0] [^b113, i32 %610];
    i32 %530 = phi [^while.body37, i32 %503] [^b113, i32 %608];
    i32 %531 = phi [^while.body37, i32 %504] [^b113, i32 %609];
    i32 %532 = srem i32 %530, i32 2;
    i1 %533 = scmp neq i32 %532, i32 0;
    cbr i1 %533(prob = 0.5), ^if.then42, ^if.else12;
^while.body42:
    i32 %534 = phi [^b114, i32 %612] [^while.body38, i32 0];
    i32 %535 = phi [^b114, i32 %615] [^while.body38, i32 0];
    i32 %536 = phi [^b114, i32 %613] [^while.body38, i32 %505];
    i32 %537 = phi [^b114, i32 %614] [^while.body38, i32 %506];
    i32 %538 = srem i32 %536, i32 2;
    i1 %539 = scmp neq i32 %538, i32 0;
    cbr i1 %539(prob = 0.5), ^if.then43, ^if.else13;
^if.else9:
    i32 %540 = sdiv i32 %276, i32 2;
    ubr ^b107;
^if.then38:
    i32 %541 = sdiv i32 %284, i32 2;
    i32 %542 = add i32 %541, i32 32768;
    ubr ^b109;
^while.body43:
    i32 %543 = phi [^while.body39, i32 0] [^b115, i32 %625];
    i32 %544 = phi [^while.body39, i32 0] [^b115, i32 %628];
    i32 %545 = phi [^while.body39, i32 %508] [^b115, i32 %626];
    i32 %546 = phi [^while.body39, i32 %509] [^b115, i32 %627];
    i32 %547 = srem i32 %545, i32 2;
    i1 %548 = scmp neq i32 %547, i32 0;
    cbr i1 %548(prob = 0.5), ^if.then44, ^if.else14;
^if.else10:
    i32 %549 = sdiv i32 %284, i32 2;
    ubr ^b109;
^if.then39:
    i1 %550 = scmp neq i32 %349, i32 0;
    cbr i1 %550(prob = 0.97), ^while.body44, ^b106;
^b104:
    i32 %551 = phi [^b106, i32 %566] [^b97, i32 %351];
    i1 %552 = scmp neq i32 %349, i32 0;
    cbr i1 %552(prob = 0.97), ^while.body45, ^b110;
^if.then40:
    i1 %553 = scmp neq i32 %355, i32 0;
    cbr i1 %553(prob = 0.97), ^while.body46, ^b108;
^b105:
    i32 %554 = phi [^b108, i32 %579] [^b100, i32 %357];
    i1 %555 = scmp neq i32 %355, i32 0;
    cbr i1 %555(prob = 0.97), ^while.body47, ^b111;
^if.then41:
    i32 %556 = srem i32 %523, i32 2;
    i1 %557 = scmp eq i32 %556, i32 0;
    cbr i1 %557(prob = 0.5), ^if.then45, ^b112;
^while.body44:
    i32 %558 = phi [^if.then39, i32 %351] [^b182, i32 %717];
    i32 %559 = phi [^if.then39, i32 %349] [^b182, i32 %968];
    ubr ^while.body48;
^if.else11:
    i32 %560 = srem i32 %523, i32 2;
    i1 %561 = scmp neq i32 %560, i32 0;
    cbr i1 %561(prob = 0.5), ^if.then45, ^b112;
^if.then42:
    i32 %562 = srem i32 %531, i32 2;
    i1 %563 = scmp eq i32 %562, i32 0;
    cbr i1 %563(prob = 0.5), ^if.then46, ^b113;
^if.then43:
    i32 %564 = srem i32 %537, i32 2;
    i1 %565 = scmp eq i32 %564, i32 0;
    cbr i1 %565(prob = 0.5), ^if.then47, ^b114;
^b106:
    i32 %566 = phi [^if.then39, i32 %351] [^b182, i32 %717];
    ubr ^b104;
^while.body45:
    i32 %567 = phi [^b104, i32 %349] [^b183, i32 %724];
    i32 %568 = phi [^b104, i32 %349] [^b183, i32 %973];
    ubr ^while.body49;
^while.body46:
    i32 %569 = phi [^if.then40, i32 %357] [^b184, i32 %729];
    i32 %570 = phi [^if.then40, i32 %355] [^b184, i32 %978];
    ubr ^while.body50;
^if.else12:
    i32 %571 = srem i32 %531, i32 2;
    i1 %572 = scmp neq i32 %571, i32 0;
    cbr i1 %572(prob = 0.5), ^if.then46, ^b113;
^if.else13:
    i32 %573 = srem i32 %537, i32 2;
    i1 %574 = scmp neq i32 %573, i32 0;
    cbr i1 %574(prob = 0.5), ^if.then47, ^b114;
^if.then44:
    i32 %575 = srem i32 %546, i32 2;
    i1 %576 = scmp eq i32 %575, i32 0;
    cbr i1 %576(prob = 0.5), ^if.then48, ^b115;
^b107:
    i32 %577 = phi [^if.else9, i32 %540] [^if.then37, i32 %527];
    i1 %578 = scmp neq i32 %577, i32 0;
    cbr i1 %578(prob = 0.97), ^while.body24, ^b44;
^b108:
    i32 %579 = phi [^if.then40, i32 %357] [^b184, i32 %729];
    ubr ^b105;
^while.body47:
    i32 %580 = phi [^b105, i32 %355] [^b185, i32 %735];
    i32 %581 = phi [^b105, i32 %355] [^b185, i32 %983];
    ubr ^while.body51;
^if.else14:
    i32 %582 = srem i32 %546, i32 2;
    i1 %583 = scmp neq i32 %582, i32 0;
    cbr i1 %583(prob = 0.5), ^if.then48, ^b115;
^b109:
    i32 %584 = phi [^if.then38, i32 %542] [^if.else10, i32 %549];
    i1 %585 = scmp neq i32 %584, i32 0;
    cbr i1 %585(prob = 0.97), ^while.body25, ^b49;
^b110:
    i32 %586 = phi [^b104, i32 %349] [^b183, i32 %724];
    i1 %587 = scmp gt i32 %350, i32 32767;
    cbr i1 %587(prob = 0.5), ^if.then49, ^if.else15;
^b111:
    i32 %588 = phi [^b105, i32 %355] [^b185, i32 %735];
    i1 %589 = scmp gt i32 %356, i32 32767;
    cbr i1 %589(prob = 0.5), ^if.then50, ^if.else16;
^if.then45:
    i32* %590 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %521];
    i32 %591 = load i32* %590;
    i32 %592 = add i32 %520, i32 %591;
    ubr ^b112;
^if.then46:
    i32* %593 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %529];
    i32 %594 = load i32* %593;
    i32 %595 = add i32 %528, i32 %594;
    ubr ^b113;
^if.then47:
    i32* %596 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %535];
    i32 %597 = load i32* %596;
    i32 %598 = add i32 %534, i32 %597;
    ubr ^b114;
^if.then48:
    i32* %599 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %544];
    i32 %600 = load i32* %599;
    i32 %601 = add i32 %543, i32 %600;
    ubr ^b115;
^b112:
    i32 %602 = phi [^if.then45, i32 %592] [^if.then41, i32 %520] [^if.else11, i32 %520];
    i32 %603 = sdiv i32 %522, i32 2;
    i32 %604 = sdiv i32 %523, i32 2;
    i32 %605 = add i32 %521, i32 1;
    i1 %606 = scmp lt i32 %605, i32 16;
    cbr i1 %606(prob = 0.94), ^while.body40, ^while.body52;
^b113:
    i32 %607 = phi [^if.then42, i32 %528] [^if.then46, i32 %595] [^if.else12, i32 %528];
    i32 %608 = sdiv i32 %530, i32 2;
    i32 %609 = sdiv i32 %531, i32 2;
    i32 %610 = add i32 %529, i32 1;
    i1 %611 = scmp lt i32 %610, i32 16;
    cbr i1 %611(prob = 0.94), ^while.body41, ^while.body53;
^b114:
    i32 %612 = phi [^if.then47, i32 %598] [^if.else13, i32 %534] [^if.then43, i32 %534];
    i32 %613 = sdiv i32 %536, i32 2;
    i32 %614 = sdiv i32 %537, i32 2;
    i32 %615 = add i32 %535, i32 1;
    i1 %616 = scmp lt i32 %615, i32 16;
    cbr i1 %616(prob = 0.94), ^while.body42, ^while.body54;
^while.body48:
    i32 %617 = phi [^while.body44, i32 0] [^b123, i32 %717];
    i32 %618 = phi [^while.body44, i32 0] [^b123, i32 %720];
    i32 %619 = phi [^while.body44, i32 %558] [^b123, i32 %718];
    i32 %620 = phi [^while.body44, i32 %559] [^b123, i32 %719];
    i32 %621 = srem i32 %619, i32 2;
    i1 %622 = scmp neq i32 %621, i32 0;
    cbr i1 %622(prob = 0.5), ^if.then51, ^if.else17;
^if.then49:
    i32 %623 = sdiv i32 %350, i32 2;
    i32 %624 = add i32 %623, i32 32768;
    ubr ^b116;
^b115:
    i32 %625 = phi [^if.then44, i32 %543] [^if.else14, i32 %543] [^if.then48, i32 %601];
    i32 %626 = sdiv i32 %545, i32 2;
    i32 %627 = sdiv i32 %546, i32 2;
    i32 %628 = add i32 %544, i32 1;
    i1 %629 = scmp lt i32 %628, i32 16;
    cbr i1 %629(prob = 0.94), ^while.body43, ^while.body55;
^while.body49:
    i32 %630 = phi [^while.body45, i32 0] [^b126, i32 %724];
    i32 %631 = phi [^while.body45, i32 0] [^b126, i32 %727];
    i32 %632 = phi [^while.body45, i32 %567] [^b126, i32 %725];
    i32 %633 = phi [^while.body45, i32 %568] [^b126, i32 %726];
    i32 %634 = srem i32 %632, i32 2;
    i1 %635 = scmp neq i32 %634, i32 0;
    cbr i1 %635(prob = 0.5), ^if.then52, ^if.else18;
^while.body50:
    i32 %636 = phi [^while.body46, i32 0] [^b127, i32 %729];
    i32 %637 = phi [^while.body46, i32 0] [^b127, i32 %732];
    i32 %638 = phi [^while.body46, i32 %569] [^b127, i32 %730];
    i32 %639 = phi [^while.body46, i32 %570] [^b127, i32 %731];
    i32 %640 = srem i32 %638, i32 2;
    i1 %641 = scmp neq i32 %640, i32 0;
    cbr i1 %641(prob = 0.5), ^if.then53, ^if.else19;
^if.else15:
    i32 %642 = sdiv i32 %350, i32 2;
    ubr ^b116;
^if.then50:
    i32 %643 = sdiv i32 %356, i32 2;
    i32 %644 = add i32 %643, i32 32768;
    ubr ^b117;
^while.body51:
    i32 %645 = phi [^while.body47, i32 0] [^b129, i32 %735];
    i32 %646 = phi [^while.body47, i32 0] [^b129, i32 %738];
    i32 %647 = phi [^while.body47, i32 %580] [^b129, i32 %736];
    i32 %648 = phi [^while.body47, i32 %581] [^b129, i32 %737];
    i32 %649 = srem i32 %647, i32 2;
    i1 %650 = scmp neq i32 %649, i32 0;
    cbr i1 %650(prob = 0.5), ^if.then54, ^if.else20;
^if.else16:
    i32 %651 = sdiv i32 %356, i32 2;
    ubr ^b117;
^while.body52:
    i32 %652 = phi [^b112, i32 0] [^b130, i32 %752];
    i32 %653 = phi [^b112, i32 0] [^b130, i32 %755];
    i32 %654 = phi [^b112, i32 %500] [^b130, i32 %753];
    i32 %655 = phi [^b112, i32 %501] [^b130, i32 %754];
    i32 %656 = srem i32 %654, i32 2;
    i1 %657 = scmp neq i32 %656, i32 0;
    cbr i1 %657(prob = 0.5), ^b118, ^b122;
^if.then51:
    i32 %658 = srem i32 %620, i32 2;
    i1 %659 = scmp eq i32 %658, i32 0;
    cbr i1 %659(prob = 0.5), ^if.then55, ^b123;
^while.body53:
    i32 %660 = phi [^b131, i32 %763] [^b113, i32 0];
    i32 %661 = phi [^b131, i32 %766] [^b113, i32 0];
    i32 %662 = phi [^b131, i32 %764] [^b113, i32 %503];
    i32 %663 = phi [^b131, i32 %765] [^b113, i32 %504];
    i32 %664 = srem i32 %662, i32 2;
    i1 %665 = scmp neq i32 %664, i32 0;
    cbr i1 %665(prob = 0.5), ^b119, ^b124;
^while.body54:
    i32 %666 = phi [^b114, i32 0] [^b132, i32 %768];
    i32 %667 = phi [^b114, i32 0] [^b132, i32 %771];
    i32 %668 = phi [^b114, i32 %505] [^b132, i32 %769];
    i32 %669 = phi [^b114, i32 %506] [^b132, i32 %770];
    i32 %670 = srem i32 %668, i32 2;
    i1 %671 = scmp neq i32 %670, i32 0;
    cbr i1 %671(prob = 0.5), ^b120, ^b125;
^if.else17:
    i32 %672 = srem i32 %620, i32 2;
    i1 %673 = scmp neq i32 %672, i32 0;
    cbr i1 %673(prob = 0.5), ^if.then55, ^b123;
^if.then52:
    i32 %674 = srem i32 %633, i32 2;
    i1 %675 = scmp eq i32 %674, i32 0;
    cbr i1 %675(prob = 0.5), ^if.then56, ^b126;
^if.then53:
    i32 %676 = srem i32 %639, i32 2;
    i1 %677 = scmp eq i32 %676, i32 0;
    cbr i1 %677(prob = 0.5), ^if.then57, ^b127;
^while.body55:
    i32 %678 = phi [^b115, i32 0] [^b133, i32 %785];
    i32 %679 = phi [^b115, i32 0] [^b133, i32 %788];
    i32 %680 = phi [^b115, i32 %508] [^b133, i32 %786];
    i32 %681 = phi [^b115, i32 %509] [^b133, i32 %787];
    i32 %682 = srem i32 %680, i32 2;
    i1 %683 = scmp neq i32 %682, i32 0;
    cbr i1 %683(prob = 0.5), ^b121, ^b128;
^if.else18:
    i32 %684 = srem i32 %633, i32 2;
    i1 %685 = scmp neq i32 %684, i32 0;
    cbr i1 %685(prob = 0.5), ^if.then56, ^b126;
^if.else19:
    i32 %686 = srem i32 %639, i32 2;
    i1 %687 = scmp neq i32 %686, i32 0;
    cbr i1 %687(prob = 0.5), ^if.then57, ^b127;
^if.then54:
    i32 %688 = srem i32 %648, i32 2;
    i1 %689 = scmp eq i32 %688, i32 0;
    cbr i1 %689(prob = 0.5), ^if.then58, ^b129;
^b116:
    i32 %690 = phi [^if.then49, i32 %624] [^if.else15, i32 %642];
    i1 %691 = scmp neq i32 %690, i32 0;
    cbr i1 %691(prob = 0.97), ^while.body28, ^b61;
^if.else20:
    i32 %692 = srem i32 %648, i32 2;
    i1 %693 = scmp neq i32 %692, i32 0;
    cbr i1 %693(prob = 0.5), ^if.then58, ^b129;
^b117:
    i32 %694 = phi [^if.else16, i32 %651] [^if.then50, i32 %644];
    i1 %695 = scmp neq i32 %694, i32 0;
    cbr i1 %695(prob = 0.97), ^while.body29, ^b67;
^b118:
    i32 %696 = srem i32 %655, i32 2;
    i1 %697 = scmp neq i32 %696, i32 0;
    ubr ^b122;
^if.then55:
    i32* %698 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %618];
    i32 %699 = load i32* %698;
    i32 %700 = add i32 %617, i32 %699;
    ubr ^b123;
^b119:
    i32 %701 = srem i32 %663, i32 2;
    i1 %702 = scmp neq i32 %701, i32 0;
    ubr ^b124;
^b120:
    i32 %703 = srem i32 %669, i32 2;
    i1 %704 = scmp neq i32 %703, i32 0;
    ubr ^b125;
^if.then56:
    i32* %705 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %631];
    i32 %706 = load i32* %705;
    i32 %707 = add i32 %630, i32 %706;
    ubr ^b126;
^if.then57:
    i32* %708 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %637];
    i32 %709 = load i32* %708;
    i32 %710 = add i32 %636, i32 %709;
    ubr ^b127;
^b121:
    i32 %711 = srem i32 %681, i32 2;
    i1 %712 = scmp neq i32 %711, i32 0;
    ubr ^b128;
^if.then58:
    i32* %713 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %646];
    i32 %714 = load i32* %713;
    i32 %715 = add i32 %645, i32 %714;
    ubr ^b129;
^b122:
    i1 %716 = phi [^b118, i1 %697] [^while.body52, i1 false];
    cbr i1 %716(prob = 0.5), ^if.then59, ^b130;
^b123:
    i32 %717 = phi [^if.then51, i32 %617] [^if.then55, i32 %700] [^if.else17, i32 %617];
    i32 %718 = sdiv i32 %619, i32 2;
    i32 %719 = sdiv i32 %620, i32 2;
    i32 %720 = add i32 %618, i32 1;
    i1 %721 = scmp lt i32 %720, i32 16;
    cbr i1 %721(prob = 0.94), ^while.body48, ^while.body56;
^b124:
    i1 %722 = phi [^while.body53, i1 false] [^b119, i1 %702];
    cbr i1 %722(prob = 0.5), ^if.then60, ^b131;
^b125:
    i1 %723 = phi [^while.body54, i1 false] [^b120, i1 %704];
    cbr i1 %723(prob = 0.5), ^if.then61, ^b132;
^b126:
    i32 %724 = phi [^if.then52, i32 %630] [^if.then56, i32 %707] [^if.else18, i32 %630];
    i32 %725 = sdiv i32 %632, i32 2;
    i32 %726 = sdiv i32 %633, i32 2;
    i32 %727 = add i32 %631, i32 1;
    i1 %728 = scmp lt i32 %727, i32 16;
    cbr i1 %728(prob = 0.94), ^while.body49, ^while.body57;
^b127:
    i32 %729 = phi [^if.then53, i32 %636] [^if.else19, i32 %636] [^if.then57, i32 %710];
    i32 %730 = sdiv i32 %638, i32 2;
    i32 %731 = sdiv i32 %639, i32 2;
    i32 %732 = add i32 %637, i32 1;
    i1 %733 = scmp lt i32 %732, i32 16;
    cbr i1 %733(prob = 0.94), ^while.body50, ^while.body58;
^b128:
    i1 %734 = phi [^while.body55, i1 false] [^b121, i1 %712];
    cbr i1 %734(prob = 0.5), ^if.then62, ^b133;
^b129:
    i32 %735 = phi [^if.else20, i32 %645] [^if.then54, i32 %645] [^if.then58, i32 %715];
    i32 %736 = sdiv i32 %647, i32 2;
    i32 %737 = sdiv i32 %648, i32 2;
    i32 %738 = add i32 %646, i32 1;
    i1 %739 = scmp lt i32 %738, i32 16;
    cbr i1 %739(prob = 0.94), ^while.body51, ^while.body59;
^if.then59:
    i32* %740 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %653];
    i32 %741 = load i32* %740;
    i32 %742 = add i32 %652, i32 %741;
    ubr ^b130;
^if.then60:
    i32* %743 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %661];
    i32 %744 = load i32* %743;
    i32 %745 = add i32 %660, i32 %744;
    ubr ^b131;
^if.then61:
    i32* %746 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %667];
    i32 %747 = load i32* %746;
    i32 %748 = add i32 %666, i32 %747;
    ubr ^b132;
^if.then62:
    i32* %749 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %679];
    i32 %750 = load i32* %749;
    i32 %751 = add i32 %678, i32 %750;
    ubr ^b133;
^b130:
    i32 %752 = phi [^if.then59, i32 %742] [^b122, i32 %652];
    i32 %753 = sdiv i32 %654, i32 2;
    i32 %754 = sdiv i32 %655, i32 2;
    i32 %755 = add i32 %653, i32 1;
    i1 %756 = scmp lt i32 %755, i32 16;
    cbr i1 %756(prob = 0.94), ^while.body52, ^b135;
^while.body56:
    i32 %757 = phi [^b146, i32 %842] [^b123, i32 0];
    i32 %758 = phi [^b146, i32 %845] [^b123, i32 0];
    i32 %759 = phi [^b146, i32 %843] [^b123, i32 %558];
    i32 %760 = phi [^b146, i32 %844] [^b123, i32 %559];
    i32 %761 = srem i32 %759, i32 2;
    i1 %762 = scmp neq i32 %761, i32 0;
    cbr i1 %762(prob = 0.5), ^b134, ^b142;
^b131:
    i32 %763 = phi [^b124, i32 %660] [^if.then60, i32 %745];
    i32 %764 = sdiv i32 %662, i32 2;
    i32 %765 = sdiv i32 %663, i32 2;
    i32 %766 = add i32 %661, i32 1;
    i1 %767 = scmp lt i32 %766, i32 16;
    cbr i1 %767(prob = 0.94), ^while.body53, ^b138;
^b132:
    i32 %768 = phi [^b125, i32 %666] [^if.then61, i32 %748];
    i32 %769 = sdiv i32 %668, i32 2;
    i32 %770 = sdiv i32 %669, i32 2;
    i32 %771 = add i32 %667, i32 1;
    i1 %772 = scmp lt i32 %771, i32 16;
    cbr i1 %772(prob = 0.94), ^while.body54, ^b139;
^while.body57:
    i32 %773 = phi [^b147, i32 %853] [^b126, i32 0];
    i32 %774 = phi [^b147, i32 %856] [^b126, i32 0];
    i32 %775 = phi [^b147, i32 %854] [^b126, i32 %567];
    i32 %776 = phi [^b147, i32 %855] [^b126, i32 %568];
    i32 %777 = srem i32 %775, i32 2;
    i1 %778 = scmp neq i32 %777, i32 0;
    cbr i1 %778(prob = 0.5), ^b136, ^b143;
^while.body58:
    i32 %779 = phi [^b127, i32 0] [^b148, i32 %858];
    i32 %780 = phi [^b127, i32 0] [^b148, i32 %861];
    i32 %781 = phi [^b127, i32 %569] [^b148, i32 %859];
    i32 %782 = phi [^b127, i32 %570] [^b148, i32 %860];
    i32 %783 = srem i32 %781, i32 2;
    i1 %784 = scmp neq i32 %783, i32 0;
    cbr i1 %784(prob = 0.5), ^b137, ^b144;
^b133:
    i32 %785 = phi [^b128, i32 %678] [^if.then62, i32 %751];
    i32 %786 = sdiv i32 %680, i32 2;
    i32 %787 = sdiv i32 %681, i32 2;
    i32 %788 = add i32 %679, i32 1;
    i1 %789 = scmp lt i32 %788, i32 16;
    cbr i1 %789(prob = 0.94), ^while.body55, ^b141;
^while.body59:
    i32 %790 = phi [^b149, i32 %863] [^b129, i32 0];
    i32 %791 = phi [^b149, i32 %866] [^b129, i32 0];
    i32 %792 = phi [^b149, i32 %864] [^b129, i32 %580];
    i32 %793 = phi [^b149, i32 %865] [^b129, i32 %581];
    i32 %794 = srem i32 %792, i32 2;
    i1 %795 = scmp neq i32 %794, i32 0;
    cbr i1 %795(prob = 0.5), ^b140, ^b145;
^b134:
    i32 %796 = srem i32 %760, i32 2;
    i1 %797 = scmp neq i32 %796, i32 0;
    ubr ^b142;
^b135:
    i32 %798 = mul i32 %752, i32 2;
    ubr ^while.body60;
^b136:
    i32 %799 = srem i32 %776, i32 2;
    i1 %800 = scmp neq i32 %799, i32 0;
    ubr ^b143;
^b137:
    i32 %801 = srem i32 %782, i32 2;
    i1 %802 = scmp neq i32 %801, i32 0;
    ubr ^b144;
^b138:
    i32 %803 = mul i32 %763, i32 2;
    ubr ^while.body61;
^b139:
    i32 %804 = mul i32 %768, i32 2;
    ubr ^while.body62;
^b140:
    i32 %805 = srem i32 %793, i32 2;
    i1 %806 = scmp neq i32 %805, i32 0;
    ubr ^b145;
^b141:
    i32 %807 = mul i32 %785, i32 2;
    ubr ^while.body63;
^b142:
    i1 %808 = phi [^while.body56, i1 false] [^b134, i1 %797];
    cbr i1 %808(prob = 0.5), ^if.then63, ^b146;
^b143:
    i1 %809 = phi [^b136, i1 %800] [^while.body57, i1 false];
    cbr i1 %809(prob = 0.5), ^if.then64, ^b147;
^b144:
    i1 %810 = phi [^while.body58, i1 false] [^b137, i1 %802];
    cbr i1 %810(prob = 0.5), ^if.then65, ^b148;
^b145:
    i1 %811 = phi [^while.body59, i1 false] [^b140, i1 %806];
    cbr i1 %811(prob = 0.5), ^if.then66, ^b149;
^if.then63:
    i32* %812 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %758];
    i32 %813 = load i32* %812;
    i32 %814 = add i32 %757, i32 %813;
    ubr ^b146;
^if.then64:
    i32* %815 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %774];
    i32 %816 = load i32* %815;
    i32 %817 = add i32 %773, i32 %816;
    ubr ^b147;
^if.then65:
    i32* %818 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %780];
    i32 %819 = load i32* %818;
    i32 %820 = add i32 %779, i32 %819;
    ubr ^b148;
^while.body60:
    i32 %821 = phi [^b135, i32 0] [^b162, i32 %896];
    i32 %822 = phi [^b135, i32 0] [^b162, i32 %899];
    i32 %823 = phi [^b135, i32 %798] [^b162, i32 %897];
    i32 %824 = phi [^b135, i32 65535] [^b162, i32 %898];
    i32 %825 = srem i32 %823, i32 2;
    i1 %826 = scmp neq i32 %825, i32 0;
    cbr i1 %826(prob = 0.5), ^b150, ^b155;
^if.then66:
    i32* %827 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %791];
    i32 %828 = load i32* %827;
    i32 %829 = add i32 %790, i32 %828;
    ubr ^b149;
^while.body61:
    i32 %830 = phi [^b138, i32 0] [^b163, i32 %907];
    i32 %831 = phi [^b138, i32 0] [^b163, i32 %910];
    i32 %832 = phi [^b138, i32 %803] [^b163, i32 %908];
    i32 %833 = phi [^b138, i32 65535] [^b163, i32 %909];
    i32 %834 = srem i32 %832, i32 2;
    i1 %835 = scmp neq i32 %834, i32 0;
    cbr i1 %835(prob = 0.5), ^b151, ^b158;
^while.body62:
    i32 %836 = phi [^b139, i32 0] [^b164, i32 %912];
    i32 %837 = phi [^b139, i32 0] [^b164, i32 %915];
    i32 %838 = phi [^b139, i32 %804] [^b164, i32 %913];
    i32 %839 = phi [^b139, i32 65535] [^b164, i32 %914];
    i32 %840 = srem i32 %838, i32 2;
    i1 %841 = scmp neq i32 %840, i32 0;
    cbr i1 %841(prob = 0.5), ^b152, ^b159;
^b146:
    i32 %842 = phi [^b142, i32 %757] [^if.then63, i32 %814];
    i32 %843 = sdiv i32 %759, i32 2;
    i32 %844 = sdiv i32 %760, i32 2;
    i32 %845 = add i32 %758, i32 1;
    i1 %846 = scmp lt i32 %845, i32 16;
    cbr i1 %846(prob = 0.94), ^while.body56, ^b154;
^while.body63:
    i32 %847 = phi [^b165, i32 %929] [^b141, i32 0];
    i32 %848 = phi [^b165, i32 %932] [^b141, i32 0];
    i32 %849 = phi [^b165, i32 %930] [^b141, i32 %807];
    i32 %850 = phi [^b165, i32 %931] [^b141, i32 65535];
    i32 %851 = srem i32 %849, i32 2;
    i1 %852 = scmp neq i32 %851, i32 0;
    cbr i1 %852(prob = 0.5), ^b153, ^b161;
^b147:
    i32 %853 = phi [^b143, i32 %773] [^if.then64, i32 %817];
    i32 %854 = sdiv i32 %775, i32 2;
    i32 %855 = sdiv i32 %776, i32 2;
    i32 %856 = add i32 %774, i32 1;
    i1 %857 = scmp lt i32 %856, i32 16;
    cbr i1 %857(prob = 0.94), ^while.body57, ^b156;
^b148:
    i32 %858 = phi [^b144, i32 %779] [^if.then65, i32 %820];
    i32 %859 = sdiv i32 %781, i32 2;
    i32 %860 = sdiv i32 %782, i32 2;
    i32 %861 = add i32 %780, i32 1;
    i1 %862 = scmp lt i32 %861, i32 16;
    cbr i1 %862(prob = 0.94), ^while.body58, ^b157;
^b149:
    i32 %863 = phi [^b145, i32 %790] [^if.then66, i32 %829];
    i32 %864 = sdiv i32 %792, i32 2;
    i32 %865 = sdiv i32 %793, i32 2;
    i32 %866 = add i32 %791, i32 1;
    i1 %867 = scmp lt i32 %866, i32 16;
    cbr i1 %867(prob = 0.94), ^while.body59, ^b160;
^b150:
    i32 %868 = srem i32 %824, i32 2;
    i1 %869 = scmp neq i32 %868, i32 0;
    ubr ^b155;
^b151:
    i32 %870 = srem i32 %833, i32 2;
    i1 %871 = scmp neq i32 %870, i32 0;
    ubr ^b158;
^b152:
    i32 %872 = srem i32 %839, i32 2;
    i1 %873 = scmp neq i32 %872, i32 0;
    ubr ^b159;
^b153:
    i32 %874 = srem i32 %850, i32 2;
    i1 %875 = scmp neq i32 %874, i32 0;
    ubr ^b161;
^b154:
    i32 %876 = mul i32 %842, i32 2;
    ubr ^while.body64;
^b155:
    i1 %877 = phi [^while.body60, i1 false] [^b150, i1 %869];
    cbr i1 %877(prob = 0.5), ^if.then67, ^b162;
^b156:
    i32 %878 = mul i32 %853, i32 2;
    ubr ^while.body65;
^b157:
    i32 %879 = mul i32 %858, i32 2;
    ubr ^while.body66;
^b158:
    i1 %880 = phi [^b151, i1 %871] [^while.body61, i1 false];
    cbr i1 %880(prob = 0.5), ^if.then68, ^b163;
^b159:
    i1 %881 = phi [^b152, i1 %873] [^while.body62, i1 false];
    cbr i1 %881(prob = 0.5), ^if.then69, ^b164;
^b160:
    i32 %882 = mul i32 %863, i32 2;
    ubr ^while.body67;
^b161:
    i1 %883 = phi [^while.body63, i1 false] [^b153, i1 %875];
    cbr i1 %883(prob = 0.5), ^if.then70, ^b165;
^if.then67:
    i32* %884 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %822];
    i32 %885 = load i32* %884;
    i32 %886 = add i32 %821, i32 %885;
    ubr ^b162;
^if.then68:
    i32* %887 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %831];
    i32 %888 = load i32* %887;
    i32 %889 = add i32 %830, i32 %888;
    ubr ^b163;
^if.then69:
    i32* %890 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %837];
    i32 %891 = load i32* %890;
    i32 %892 = add i32 %836, i32 %891;
    ubr ^b164;
^if.then70:
    i32* %893 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %848];
    i32 %894 = load i32* %893;
    i32 %895 = add i32 %847, i32 %894;
    ubr ^b165;
^b162:
    i32 %896 = phi [^b155, i32 %821] [^if.then67, i32 %886];
    i32 %897 = sdiv i32 %823, i32 2;
    i32 %898 = sdiv i32 %824, i32 2;
    i32 %899 = add i32 %822, i32 1;
    i1 %900 = scmp lt i32 %899, i32 16;
    cbr i1 %900(prob = 0.94), ^while.body60, ^b170;
^while.body64:
    i32 %901 = phi [^b178, i32 %968] [^b154, i32 0];
    i32 %902 = phi [^b178, i32 %971] [^b154, i32 0];
    i32 %903 = phi [^b178, i32 %969] [^b154, i32 %876];
    i32 %904 = phi [^b178, i32 %970] [^b154, i32 65535];
    i32 %905 = srem i32 %903, i32 2;
    i1 %906 = scmp neq i32 %905, i32 0;
    cbr i1 %906(prob = 0.5), ^b166, ^b171;
^b163:
    i32 %907 = phi [^b158, i32 %830] [^if.then68, i32 %889];
    i32 %908 = sdiv i32 %832, i32 2;
    i32 %909 = sdiv i32 %833, i32 2;
    i32 %910 = add i32 %831, i32 1;
    i1 %911 = scmp lt i32 %910, i32 16;
    cbr i1 %911(prob = 0.94), ^while.body61, ^b172;
^b164:
    i32 %912 = phi [^if.then69, i32 %892] [^b159, i32 %836];
    i32 %913 = sdiv i32 %838, i32 2;
    i32 %914 = sdiv i32 %839, i32 2;
    i32 %915 = add i32 %837, i32 1;
    i1 %916 = scmp lt i32 %915, i32 16;
    cbr i1 %916(prob = 0.94), ^while.body62, ^b173;
^while.body65:
    i32 %917 = phi [^b156, i32 0] [^b179, i32 %973];
    i32 %918 = phi [^b156, i32 0] [^b179, i32 %976];
    i32 %919 = phi [^b156, i32 %878] [^b179, i32 %974];
    i32 %920 = phi [^b156, i32 65535] [^b179, i32 %975];
    i32 %921 = srem i32 %919, i32 2;
    i1 %922 = scmp neq i32 %921, i32 0;
    cbr i1 %922(prob = 0.5), ^b167, ^b174;
^while.body66:
    i32 %923 = phi [^b157, i32 0] [^b180, i32 %978];
    i32 %924 = phi [^b157, i32 0] [^b180, i32 %981];
    i32 %925 = phi [^b157, i32 %879] [^b180, i32 %979];
    i32 %926 = phi [^b157, i32 65535] [^b180, i32 %980];
    i32 %927 = srem i32 %925, i32 2;
    i1 %928 = scmp neq i32 %927, i32 0;
    cbr i1 %928(prob = 0.5), ^b168, ^b175;
^b165:
    i32 %929 = phi [^b161, i32 %847] [^if.then70, i32 %895];
    i32 %930 = sdiv i32 %849, i32 2;
    i32 %931 = sdiv i32 %850, i32 2;
    i32 %932 = add i32 %848, i32 1;
    i1 %933 = scmp lt i32 %932, i32 16;
    cbr i1 %933(prob = 0.94), ^while.body63, ^b176;
^while.body67:
    i32 %934 = phi [^b181, i32 %983] [^b160, i32 0];
    i32 %935 = phi [^b181, i32 %986] [^b160, i32 0];
    i32 %936 = phi [^b181, i32 %984] [^b160, i32 %882];
    i32 %937 = phi [^b181, i32 %985] [^b160, i32 65535];
    i32 %938 = srem i32 %936, i32 2;
    i1 %939 = scmp neq i32 %938, i32 0;
    cbr i1 %939(prob = 0.5), ^b169, ^b177;
^b166:
    i32 %940 = srem i32 %904, i32 2;
    i1 %941 = scmp neq i32 %940, i32 0;
    ubr ^b171;
^b167:
    i32 %942 = srem i32 %920, i32 2;
    i1 %943 = scmp neq i32 %942, i32 0;
    ubr ^b174;
^b168:
    i32 %944 = srem i32 %926, i32 2;
    i1 %945 = scmp neq i32 %944, i32 0;
    ubr ^b175;
^b169:
    i32 %946 = srem i32 %937, i32 2;
    i1 %947 = scmp neq i32 %946, i32 0;
    ubr ^b177;
^b170:
    i1 %948 = scmp neq i32 %896, i32 0;
    cbr i1 %948(prob = 0.97), ^while.body36, ^b94;
^b171:
    i1 %949 = phi [^b166, i1 %941] [^while.body64, i1 false];
    cbr i1 %949(prob = 0.5), ^if.then71, ^b178;
^b172:
    i1 %950 = scmp neq i32 %907, i32 0;
    cbr i1 %950(prob = 0.97), ^while.body37, ^b96;
^b173:
    i1 %951 = scmp neq i32 %912, i32 0;
    cbr i1 %951(prob = 0.97), ^while.body38, ^b95;
^b174:
    i1 %952 = phi [^while.body65, i1 false] [^b167, i1 %943];
    cbr i1 %952(prob = 0.5), ^if.then72, ^b179;
^b175:
    i1 %953 = phi [^b168, i1 %945] [^while.body66, i1 false];
    cbr i1 %953(prob = 0.5), ^if.then73, ^b180;
^b176:
    i1 %954 = scmp neq i32 %929, i32 0;
    cbr i1 %954(prob = 0.97), ^while.body39, ^b99;
^b177:
    i1 %955 = phi [^while.body67, i1 false] [^b169, i1 %947];
    cbr i1 %955(prob = 0.5), ^if.then74, ^b181;
^if.then71:
    i32* %956 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %902];
    i32 %957 = load i32* %956;
    i32 %958 = add i32 %901, i32 %957;
    ubr ^b178;
^if.then72:
    i32* %959 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %918];
    i32 %960 = load i32* %959;
    i32 %961 = add i32 %917, i32 %960;
    ubr ^b179;
^if.then73:
    i32* %962 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %924];
    i32 %963 = load i32* %962;
    i32 %964 = add i32 %923, i32 %963;
    ubr ^b180;
^if.then74:
    i32* %965 = getelementptr &([16 * i32]* %SHIFT_TABLE)[i64 0][i32 %935];
    i32 %966 = load i32* %965;
    i32 %967 = add i32 %934, i32 %966;
    ubr ^b181;
^b178:
    i32 %968 = phi [^if.then71, i32 %958] [^b171, i32 %901];
    i32 %969 = sdiv i32 %903, i32 2;
    i32 %970 = sdiv i32 %904, i32 2;
    i32 %971 = add i32 %902, i32 1;
    i1 %972 = scmp lt i32 %971, i32 16;
    cbr i1 %972(prob = 0.94), ^while.body64, ^b182;
^b179:
    i32 %973 = phi [^b174, i32 %917] [^if.then72, i32 %961];
    i32 %974 = sdiv i32 %919, i32 2;
    i32 %975 = sdiv i32 %920, i32 2;
    i32 %976 = add i32 %918, i32 1;
    i1 %977 = scmp lt i32 %976, i32 16;
    cbr i1 %977(prob = 0.94), ^while.body65, ^b183;
^b180:
    i32 %978 = phi [^b175, i32 %923] [^if.then73, i32 %964];
    i32 %979 = sdiv i32 %925, i32 2;
    i32 %980 = sdiv i32 %926, i32 2;
    i32 %981 = add i32 %924, i32 1;
    i1 %982 = scmp lt i32 %981, i32 16;
    cbr i1 %982(prob = 0.94), ^while.body66, ^b184;
^b181:
    i32 %983 = phi [^b177, i32 %934] [^if.then74, i32 %967];
    i32 %984 = sdiv i32 %936, i32 2;
    i32 %985 = sdiv i32 %937, i32 2;
    i32 %986 = add i32 %935, i32 1;
    i1 %987 = scmp lt i32 %986, i32 16;
    cbr i1 %987(prob = 0.94), ^while.body67, ^b185;
^b182:
    i1 %988 = scmp neq i32 %968, i32 0;
    cbr i1 %988(prob = 0.97), ^while.body44, ^b106;
^b183:
    i1 %989 = scmp neq i32 %973, i32 0;
    cbr i1 %989(prob = 0.97), ^while.body45, ^b110;
^b184:
    i1 %990 = scmp neq i32 %978, i32 0;
    cbr i1 %990(prob = 0.97), ^while.body46, ^b108;
^b185:
    i1 %991 = scmp neq i32 %983, i32 0;
    cbr i1 %991(prob = 0.97), ^while.body47, ^b111;
}
