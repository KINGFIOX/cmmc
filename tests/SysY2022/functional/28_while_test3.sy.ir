internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @g;
internal i32* @h;
internal i32* @f;
internal i32* @e;
internal func @EightWhile() -> i32 {
^entry:
    i32* %d = alloc i32;
    i32* %c = alloc i32;
    i32* %b = alloc i32;
    i32* %a = alloc i32;
    store i32* %a with i32 0;
    store i32* %a with i32 5;
    store i32* %b with i32 0;
    store i32* %c with i32 0;
    store i32* %b with i32 6;
    store i32* %c with i32 7;
    store i32* %d with i32 0;
    store i32* %d with i32 10;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %a;
    i1 %1 = scmp lt i32 %0, i32 20;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^while.body, ^b1;
^while.body:
    i32 %4 = load i32* %a;
    i32 %5 = add i32 %4, i32 3;
    store i32* %a with i32 %5;
    ubr ^while.header1;
^b1:
    i32 %6 = load i32* %a;
    i32 %7 = load i32* %b;
    i32 %8 = load i32* %d;
    i32 %9 = add i32 %7, i32 %8;
    i32 %10 = add i32 %6, i32 %9;
    i32 %11 = load i32* %c;
    i32 %12 = add i32 %10, i32 %11;
    i32 %13 = load i32* @e;
    i32 %14 = load i32* %d;
    i32 %15 = add i32 %13, i32 %14;
    i32 %16 = load i32* @g;
    i32 %17 = sub i32 %15, i32 %16;
    i32 %18 = load i32* @h;
    i32 %19 = add i32 %17, i32 %18;
    i32 %20 = sub i32 %12, i32 %19;
    ret i32 %20;
^while.header1:
    i32 %21 = load i32* %b;
    i1 %22 = scmp lt i32 %21, i32 10;
    i32 %23 = zext i1 %22 to i32;
    i1 %24 = scmp neq i32 %23, i32 0;
    cbr i1 %24(prob = 0.97), ^while.body1, ^b2;
^while.body1:
    i32 %25 = load i32* %b;
    i32 %26 = add i32 %25, i32 1;
    store i32* %b with i32 %26;
    ubr ^while.header2;
^b2:
    i32 %27 = load i32* %b;
    i32 %28 = sub i32 %27, i32 2;
    store i32* %b with i32 %28;
    ubr ^while.header;
^while.header2:
    i32 %29 = load i32* %c;
    i1 %30 = scmp eq i32 %29, i32 7;
    i32 %31 = zext i1 %30 to i32;
    i1 %32 = scmp neq i32 %31, i32 0;
    cbr i1 %32(prob = 0.97), ^while.body2, ^b3;
^while.body2:
    i32 %33 = load i32* %c;
    i32 %34 = sub i32 %33, i32 1;
    store i32* %c with i32 %34;
    ubr ^while.header3;
^b3:
    i32 %35 = load i32* %c;
    i32 %36 = add i32 %35, i32 1;
    store i32* %c with i32 %36;
    ubr ^while.header1;
^while.header3:
    i32 %37 = load i32* %d;
    i1 %38 = scmp lt i32 %37, i32 20;
    i32 %39 = zext i1 %38 to i32;
    i1 %40 = scmp neq i32 %39, i32 0;
    cbr i1 %40(prob = 0.97), ^while.body3, ^b4;
^while.body3:
    i32 %41 = load i32* %d;
    i32 %42 = add i32 %41, i32 3;
    store i32* %d with i32 %42;
    ubr ^while.header4;
^b4:
    i32 %43 = load i32* %d;
    i32 %44 = sub i32 %43, i32 1;
    store i32* %d with i32 %44;
    ubr ^while.header2;
^while.header4:
    i32 %45 = load i32* @e;
    i1 %46 = scmp gt i32 %45, i32 1;
    i32 %47 = zext i1 %46 to i32;
    i1 %48 = scmp neq i32 %47, i32 0;
    cbr i1 %48(prob = 0.97), ^while.body4, ^b5;
^while.body4:
    i32 %49 = load i32* @e;
    i32 %50 = sub i32 %49, i32 1;
    store i32* @e with i32 %50;
    ubr ^while.header5;
^b5:
    i32 %51 = load i32* @e;
    i32 %52 = add i32 %51, i32 1;
    store i32* @e with i32 %52;
    ubr ^while.header3;
^while.header5:
    i32 %53 = load i32* @f;
    i1 %54 = scmp gt i32 %53, i32 2;
    i32 %55 = zext i1 %54 to i32;
    i1 %56 = scmp neq i32 %55, i32 0;
    cbr i1 %56(prob = 0.97), ^while.body5, ^b6;
^while.body5:
    i32 %57 = load i32* @f;
    i32 %58 = sub i32 %57, i32 2;
    store i32* @f with i32 %58;
    ubr ^while.header6;
^b6:
    i32 %59 = load i32* @f;
    i32 %60 = add i32 %59, i32 1;
    store i32* @f with i32 %60;
    ubr ^while.header4;
^while.header6:
    i32 %61 = load i32* @g;
    i1 %62 = scmp lt i32 %61, i32 3;
    i32 %63 = zext i1 %62 to i32;
    i1 %64 = scmp neq i32 %63, i32 0;
    cbr i1 %64(prob = 0.97), ^while.body6, ^b7;
^while.body6:
    i32 %65 = load i32* @g;
    i32 %66 = add i32 %65, i32 10;
    store i32* @g with i32 %66;
    ubr ^while.header7;
^b7:
    i32 %67 = load i32* @g;
    i32 %68 = sub i32 %67, i32 8;
    store i32* @g with i32 %68;
    ubr ^while.header5;
^while.header7:
    i32 %69 = load i32* @h;
    i1 %70 = scmp lt i32 %69, i32 10;
    i32 %71 = zext i1 %70 to i32;
    i1 %72 = scmp neq i32 %71, i32 0;
    cbr i1 %72(prob = 0.97), ^while.body7, ^b8;
^while.body7:
    i32 %73 = load i32* @h;
    i32 %74 = add i32 %73, i32 8;
    store i32* @h with i32 %74;
    ubr ^while.header7;
^b8:
    i32 %75 = load i32* @h;
    i32 %76 = sub i32 %75, i32 1;
    store i32* @h with i32 %76;
    ubr ^while.header6;
}
func @main() -> i32 { Entry } {
^entry:
    store i32* @g with i32 1;
    store i32* @h with i32 2;
    store i32* @e with i32 4;
    store i32* @f with i32 6;
    i32 %0 = call () -> i32 @EightWhile();
    ret i32 %0;
}
