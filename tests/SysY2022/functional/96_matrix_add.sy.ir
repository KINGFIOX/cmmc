internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [3 * f32]* %c2 = alloc [3 * f32];
    [3 * f32]* %c1 = alloc [3 * f32];
    [6 * f32]* %c0 = alloc [6 * f32];
    [3 * f32]* %b2 = alloc [3 * f32];
    [3 * f32]* %b1 = alloc [3 * f32];
    [3 * f32]* %b0 = alloc [3 * f32];
    [3 * f32]* %a2 = alloc [3 * f32];
    [3 * f32]* %a1 = alloc [3 * f32];
    [3 * f32]* %a0 = alloc [3 * f32];
    ubr ^while.header;
^while.header:
    i32 %0 = phi [^while.body, i32 %9] [^entry, i32 0];
    i1 %1 = scmp lt i32 %0, i32 3;
    cbr i1 %1(prob = 0.97), ^while.body, ^b;
^while.body:
    f32* %2 = getelementptr &([3 * f32]* %a0)[i64 0][i32 %0];
    f32 %3 = s2f i32 %0 to f32;
    store f32* %2 with f32 %3;
    f32* %4 = getelementptr &([3 * f32]* %a1)[i64 0][i32 %0];
    store f32* %4 with f32 %3;
    f32* %5 = getelementptr &([3 * f32]* %a2)[i64 0][i32 %0];
    store f32* %5 with f32 %3;
    f32* %6 = getelementptr &([3 * f32]* %b0)[i64 0][i32 %0];
    store f32* %6 with f32 %3;
    f32* %7 = getelementptr &([3 * f32]* %b1)[i64 0][i32 %0];
    store f32* %7 with f32 %3;
    f32* %8 = getelementptr &([3 * f32]* %b2)[i64 0][i32 %0];
    store f32* %8 with f32 %3;
    i32 %9 = add i32 %0, i32 1;
    ubr ^while.header;
^b:
    f32* %10 = getelementptr &([3 * f32]* %a0)[i64 0][i64 0];
    f32* %11 = getelementptr &([3 * f32]* %a1)[i64 0][i64 0];
    f32* %12 = getelementptr &([3 * f32]* %a2)[i64 0][i64 0];
    f32* %13 = getelementptr &([3 * f32]* %b0)[i64 0][i64 0];
    f32* %14 = getelementptr &([3 * f32]* %b1)[i64 0][i64 0];
    f32* %15 = getelementptr &([3 * f32]* %b2)[i64 0][i64 0];
    f32* %16 = getelementptr &([6 * f32]* %c0)[i64 0][i64 0];
    f32* %17 = getelementptr &([3 * f32]* %c1)[i64 0][i64 0];
    f32* %18 = getelementptr &([3 * f32]* %c2)[i64 0][i64 0];
    ubr ^while.header1;
^while.header1:
    i32 %19 = phi [^while.body1, i32 %39] [^b, i32 0];
    i1 %20 = scmp lt i32 %19, i32 3;
    cbr i1 %20(prob = 0.97), ^while.body1, ^while.header2;
^while.body1:
    f32* %21 = getelementptr &(f32* %16)[i32 %19];
    f32* %22 = getelementptr &(f32* %10)[i32 %19];
    f32 %23 = load f32* %22;
    f32* %24 = getelementptr &(f32* %13)[i32 %19];
    f32 %25 = load f32* %24;
    f32 %26 = fadd f32 %23, f32 %25;
    store f32* %21 with f32 %26;
    f32* %27 = getelementptr &(f32* %17)[i32 %19];
    f32* %28 = getelementptr &(f32* %11)[i32 %19];
    f32 %29 = load f32* %28;
    f32* %30 = getelementptr &(f32* %14)[i32 %19];
    f32 %31 = load f32* %30;
    f32 %32 = fadd f32 %29, f32 %31;
    store f32* %27 with f32 %32;
    f32* %33 = getelementptr &(f32* %18)[i32 %19];
    f32* %34 = getelementptr &(f32* %12)[i32 %19];
    f32 %35 = load f32* %34;
    f32* %36 = getelementptr &(f32* %15)[i32 %19];
    f32 %37 = load f32* %36;
    f32 %38 = fadd f32 %35, f32 %37;
    store f32* %33 with f32 %38;
    i32 %39 = add i32 %19, i32 1;
    ubr ^while.header1;
^while.header2:
    i32 %40 = phi [^while.header1, i32 0] [^while.body2, i32 %45];
    i1 %41 = scmp lt i32 %40, i32 3;
    cbr i1 %41(prob = 0.97), ^while.body2, ^b1;
^while.body2:
    f32* %42 = getelementptr &([6 * f32]* %c0)[i64 0][i32 %40];
    f32 %43 = load f32* %42;
    i32 %44 = f2s f32 %43 to i32;
    call (i32) -> void @putint(i32 %44);
    i32 %45 = add i32 %40, i32 1;
    ubr ^while.header2;
^b1:
    call (i32) -> void @putch(i32 10);
    ubr ^while.header3;
^while.header3:
    i32 %46 = phi [^while.body3, i32 %51] [^b1, i32 0];
    i1 %47 = scmp lt i32 %46, i32 3;
    cbr i1 %47(prob = 0.97), ^while.body3, ^b2;
^while.body3:
    f32* %48 = getelementptr &([3 * f32]* %c1)[i64 0][i32 %46];
    f32 %49 = load f32* %48;
    i32 %50 = f2s f32 %49 to i32;
    call (i32) -> void @putint(i32 %50);
    i32 %51 = add i32 %46, i32 1;
    ubr ^while.header3;
^b2:
    call (i32) -> void @putch(i32 10);
    ubr ^while.header4;
^while.header4:
    i32 %52 = phi [^while.body4, i32 %57] [^b2, i32 0];
    i1 %53 = scmp lt i32 %52, i32 3;
    cbr i1 %53(prob = 0.97), ^while.body4, ^b3;
^while.body4:
    f32* %54 = getelementptr &([3 * f32]* %c2)[i64 0][i32 %52];
    f32 %55 = load f32* %54;
    i32 %56 = f2s f32 %55 to i32;
    call (i32) -> void @putint(i32 %56);
    i32 %57 = add i32 %52, i32 1;
    ubr ^while.header4;
^b3:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
