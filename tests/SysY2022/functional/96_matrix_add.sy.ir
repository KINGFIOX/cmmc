internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoRecurse Entry } {
^entry:
    [3 * f32]* %c2 = alloc [3 * f32];
    [3 * f32]* %c1 = alloc [3 * f32];
    [6 * f32]* %c0 = alloc [6 * f32];
    [3 * f32]* %b2 = alloc [3 * f32];
    [3 * f32]* %b1 = alloc [3 * f32];
    [3 * f32]* %b0 = alloc [3 * f32];
    [3 * f32]* %a2 = alloc [3 * f32];
    [3 * f32]* %a1 = alloc [3 * f32];
    [3 * f32]* %a0 = alloc [3 * f32];
    ubr ^while.header;
^while.header:
    i32 %0 = phi [^while.body, i32 %13] [^entry, i32 0];
    i32 %1 = phi [^while.body, i32 %1] [^entry, i32 3];
    i32 %2 = phi [^while.body, i32 %2] [^entry, i32 3];
    i32 %3 = phi [^while.body, i32 %1] [^entry, i32 3];
    i32 %4 = phi [^while.body, i32 %13] [^entry, i32 0];
    i1 %5 = scmp lt i32 %4, i32 %3;
    cbr i1 %5(prob = 0.97), ^while.body, ^b;
^while.body:
    f32* %6 = getelementptr &([3 * f32]* %a0)[i64 0][i32 %0];
    f32 %7 = s2f i32 %0 to f32;
    store f32* %6 with f32 %7;
    f32* %8 = getelementptr &([3 * f32]* %a1)[i64 0][i32 %0];
    store f32* %8 with f32 %7;
    f32* %9 = getelementptr &([3 * f32]* %a2)[i64 0][i32 %0];
    store f32* %9 with f32 %7;
    f32* %10 = getelementptr &([3 * f32]* %b0)[i64 0][i32 %0];
    store f32* %10 with f32 %7;
    f32* %11 = getelementptr &([3 * f32]* %b1)[i64 0][i32 %0];
    store f32* %11 with f32 %7;
    f32* %12 = getelementptr &([3 * f32]* %b2)[i64 0][i32 %0];
    store f32* %12 with f32 %7;
    i32 %13 = add i32 %0, i32 1;
    ubr ^while.header;
^b:
    f32* %14 = getelementptr &([3 * f32]* %a0)[i64 0][i64 0];
    f32* %15 = getelementptr &([3 * f32]* %a1)[i64 0][i64 0];
    f32* %16 = getelementptr &([3 * f32]* %a2)[i64 0][i64 0];
    f32* %17 = getelementptr &([3 * f32]* %b0)[i64 0][i64 0];
    f32* %18 = getelementptr &([3 * f32]* %b1)[i64 0][i64 0];
    f32* %19 = getelementptr &([3 * f32]* %b2)[i64 0][i64 0];
    f32* %20 = getelementptr &([6 * f32]* %c0)[i64 0][i64 0];
    f32* %21 = getelementptr &([3 * f32]* %c1)[i64 0][i64 0];
    f32* %22 = getelementptr &([3 * f32]* %c2)[i64 0][i64 0];
    ubr ^while.header1;
^while.header1:
    i32 %23 = phi [^while.body1, i32 %23] [^b, i32 %1];
    i32 %24 = phi [^while.body1, i32 %24] [^b, i32 %2];
    i32 %25 = phi [^while.body1, i32 %55] [^b, i32 0];
    f32* %26 = phi [^while.body1, f32* %26] [^b, f32* %22];
    f32* %27 = phi [^while.body1, f32* %27] [^b, f32* %21];
    f32* %28 = phi [^while.body1, f32* %28] [^b, f32* %20];
    f32* %29 = phi [^while.body1, f32* %29] [^b, f32* %19];
    f32* %30 = phi [^while.body1, f32* %30] [^b, f32* %18];
    f32* %31 = phi [^while.body1, f32* %31] [^b, f32* %17];
    f32* %32 = phi [^while.body1, f32* %32] [^b, f32* %16];
    f32* %33 = phi [^while.body1, f32* %33] [^b, f32* %15];
    f32* %34 = phi [^while.body1, f32* %34] [^b, f32* %14];
    i32 %35 = phi [^b, i32 0] [^while.body1, i32 %55];
    i1 %36 = scmp lt i32 %35, i32 %23;
    cbr i1 %36(prob = 0.97), ^while.body1, ^while.header2;
^while.body1:
    f32* %37 = getelementptr &(f32* %28)[i32 %25];
    f32* %38 = getelementptr &(f32* %34)[i32 %25];
    f32 %39 = load f32* %38;
    f32* %40 = getelementptr &(f32* %31)[i32 %25];
    f32 %41 = load f32* %40;
    f32 %42 = fadd f32 %39, f32 %41;
    store f32* %37 with f32 %42;
    f32* %43 = getelementptr &(f32* %27)[i32 %25];
    f32* %44 = getelementptr &(f32* %33)[i32 %25];
    f32 %45 = load f32* %44;
    f32* %46 = getelementptr &(f32* %30)[i32 %25];
    f32 %47 = load f32* %46;
    f32 %48 = fadd f32 %45, f32 %47;
    store f32* %43 with f32 %48;
    f32* %49 = getelementptr &(f32* %26)[i32 %25];
    f32* %50 = getelementptr &(f32* %32)[i32 %25];
    f32 %51 = load f32* %50;
    f32* %52 = getelementptr &(f32* %29)[i32 %25];
    f32 %53 = load f32* %52;
    f32 %54 = fadd f32 %51, f32 %53;
    store f32* %49 with f32 %54;
    i32 %55 = add i32 %25, i32 1;
    ubr ^while.header1;
^while.header2:
    i32 %56 = phi [^while.header1, i32 0] [^while.body2, i32 %63];
    i32 %57 = phi [^while.header1, i32 %24] [^while.body2, i32 %57];
    i32 %58 = phi [^while.header1, i32 0] [^while.body2, i32 %63];
    i1 %59 = scmp lt i32 %58, i32 %57;
    cbr i1 %59(prob = 0.97), ^while.body2, ^b1;
^while.body2:
    f32* %60 = getelementptr &([6 * f32]* %c0)[i64 0][i32 %56];
    f32 %61 = load f32* %60;
    i32 %62 = f2s f32 %61 to i32;
    call (i32) -> void @putint(i32 %62);
    i32 %63 = add i32 %56, i32 1;
    ubr ^while.header2;
^b1:
    call (i32) -> void @putch(i32 10);
    ubr ^while.header3;
^while.header3:
    i32 %64 = phi [^while.body3, i32 %71] [^b1, i32 0];
    i32 %65 = phi [^while.body3, i32 %65] [^b1, i32 %57];
    i32 %66 = phi [^while.body3, i32 %71] [^b1, i32 0];
    i1 %67 = scmp lt i32 %66, i32 %65;
    cbr i1 %67(prob = 0.97), ^while.body3, ^b2;
^while.body3:
    f32* %68 = getelementptr &([3 * f32]* %c1)[i64 0][i32 %64];
    f32 %69 = load f32* %68;
    i32 %70 = f2s f32 %69 to i32;
    call (i32) -> void @putint(i32 %70);
    i32 %71 = add i32 %64, i32 1;
    ubr ^while.header3;
^b2:
    call (i32) -> void @putch(i32 10);
    ubr ^while.header4;
^while.header4:
    i32 %72 = phi [^while.body4, i32 %79] [^b2, i32 0];
    i32 %73 = phi [^while.body4, i32 %73] [^b2, i32 %65];
    i32 %74 = phi [^while.body4, i32 %79] [^b2, i32 0];
    i1 %75 = scmp lt i32 %74, i32 %73;
    cbr i1 %75(prob = 0.97), ^while.body4, ^b3;
^while.body4:
    f32* %76 = getelementptr &([3 * f32]* %c2)[i64 0][i32 %72];
    f32 %77 = load f32* %76;
    i32 %78 = f2s f32 %77 to i32;
    call (i32) -> void @putint(i32 %78);
    i32 %79 = add i32 %72, i32 1;
    ubr ^while.header4;
^b3:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
