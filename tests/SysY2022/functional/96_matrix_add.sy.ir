internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [3 * f32]* %c2 = alloc [3 * f32];
    [3 * f32]* %c1 = alloc [3 * f32];
    [6 * f32]* %c0 = alloc [6 * f32];
    [3 * f32]* %b2 = alloc [3 * f32];
    [3 * f32]* %b1 = alloc [3 * f32];
    [3 * f32]* %b0 = alloc [3 * f32];
    [3 * f32]* %a2 = alloc [3 * f32];
    [3 * f32]* %a1 = alloc [3 * f32];
    [3 * f32]* %a0 = alloc [3 * f32];
    f32* %0 = getelementptr &([3 * f32]* %a0)[i64 0][i64 0];
    store f32* %0 with f32 0;
    f32* %1 = getelementptr &([3 * f32]* %a1)[i64 0][i64 0];
    store f32* %1 with f32 0;
    f32* %2 = getelementptr &([3 * f32]* %a2)[i64 0][i64 0];
    store f32* %2 with f32 0;
    f32* %3 = getelementptr &([3 * f32]* %b0)[i64 0][i64 0];
    store f32* %3 with f32 0;
    f32* %4 = getelementptr &([3 * f32]* %b1)[i64 0][i64 0];
    store f32* %4 with f32 0;
    f32* %5 = getelementptr &([3 * f32]* %b2)[i64 0][i64 0];
    store f32* %5 with f32 0;
    f32* %6 = getelementptr &([3 * f32]* %a0)[i64 0][i64 1];
    store f32* %6 with f32 1;
    f32* %7 = getelementptr &([3 * f32]* %a1)[i64 0][i64 1];
    store f32* %7 with f32 1;
    f32* %8 = getelementptr &([3 * f32]* %a2)[i64 0][i64 1];
    store f32* %8 with f32 1;
    f32* %9 = getelementptr &([3 * f32]* %b0)[i64 0][i64 1];
    store f32* %9 with f32 1;
    f32* %10 = getelementptr &([3 * f32]* %b1)[i64 0][i64 1];
    store f32* %10 with f32 1;
    f32* %11 = getelementptr &([3 * f32]* %b2)[i64 0][i64 1];
    store f32* %11 with f32 1;
    f32* %12 = getelementptr &([3 * f32]* %a0)[i64 0][i64 2];
    store f32* %12 with f32 2;
    f32* %13 = getelementptr &([3 * f32]* %a1)[i64 0][i64 2];
    store f32* %13 with f32 2;
    f32* %14 = getelementptr &([3 * f32]* %a2)[i64 0][i64 2];
    store f32* %14 with f32 2;
    f32* %15 = getelementptr &([3 * f32]* %b0)[i64 0][i64 2];
    store f32* %15 with f32 2;
    f32* %16 = getelementptr &([3 * f32]* %b1)[i64 0][i64 2];
    store f32* %16 with f32 2;
    f32* %17 = getelementptr &([3 * f32]* %b2)[i64 0][i64 2];
    store f32* %17 with f32 2;
    f32* %18 = getelementptr &([6 * f32]* %c0)[i64 0][i64 0];
    f32* %19 = getelementptr &([3 * f32]* %c1)[i64 0][i64 0];
    f32* %20 = getelementptr &([3 * f32]* %c2)[i64 0][i64 0];
    ubr ^super.header;
  ^super.header:
    i32 %21 = phi [^entry, i32 0] [^while.body, i32 %22];
    i32 %22 = add i32 %21, i32 4;
    i1 %23 = icmp slt i32 %22, i32 3;
    cbr i1 %23(prob = 0.89), ^while.body, ^while.body1;
  ^while.body:
    f32* %24 = getelementptr &(f32* %0)[i32 %21];
    f32 %25 = load f32* %24;
    f32* %26 = getelementptr &(f32* %3)[i32 %21];
    f32 %27 = load f32* %26;
    f32 %28 = fadd f32 %25, f32 %27;
    f32* %29 = getelementptr &(f32* %18)[i32 %21];
    store f32* %29 with f32 %28;
    f32* %30 = getelementptr &(f32* %1)[i32 %21];
    f32 %31 = load f32* %30;
    f32* %32 = getelementptr &(f32* %4)[i32 %21];
    f32 %33 = load f32* %32;
    f32 %34 = fadd f32 %31, f32 %33;
    f32* %35 = getelementptr &(f32* %19)[i32 %21];
    store f32* %35 with f32 %34;
    f32* %36 = getelementptr &(f32* %2)[i32 %21];
    f32 %37 = load f32* %36;
    f32* %38 = getelementptr &(f32* %5)[i32 %21];
    f32 %39 = load f32* %38;
    f32 %40 = fadd f32 %37, f32 %39;
    f32* %41 = getelementptr &(f32* %20)[i32 %21];
    store f32* %41 with f32 %40;
    f32* %42 = getelementptr &(f32* %24)[i64 1];
    f32 %43 = load f32* %42;
    f32* %44 = getelementptr &(f32* %26)[i64 1];
    f32 %45 = load f32* %44;
    f32 %46 = fadd f32 %43, f32 %45;
    f32* %47 = getelementptr &(f32* %29)[i64 1];
    store f32* %47 with f32 %46;
    f32* %48 = getelementptr &(f32* %30)[i64 1];
    f32 %49 = load f32* %48;
    f32* %50 = getelementptr &(f32* %32)[i64 1];
    f32 %51 = load f32* %50;
    f32 %52 = fadd f32 %49, f32 %51;
    f32* %53 = getelementptr &(f32* %35)[i64 1];
    store f32* %53 with f32 %52;
    f32* %54 = getelementptr &(f32* %36)[i64 1];
    f32 %55 = load f32* %54;
    f32* %56 = getelementptr &(f32* %38)[i64 1];
    f32 %57 = load f32* %56;
    f32 %58 = fadd f32 %55, f32 %57;
    f32* %59 = getelementptr &(f32* %41)[i64 1];
    store f32* %59 with f32 %58;
    f32* %60 = getelementptr &(f32* %24)[i64 2];
    f32 %61 = load f32* %60;
    f32* %62 = getelementptr &(f32* %26)[i64 2];
    f32 %63 = load f32* %62;
    f32 %64 = fadd f32 %61, f32 %63;
    f32* %65 = getelementptr &(f32* %29)[i64 2];
    store f32* %65 with f32 %64;
    f32* %66 = getelementptr &(f32* %30)[i64 2];
    f32 %67 = load f32* %66;
    f32* %68 = getelementptr &(f32* %32)[i64 2];
    f32 %69 = load f32* %68;
    f32 %70 = fadd f32 %67, f32 %69;
    f32* %71 = getelementptr &(f32* %35)[i64 2];
    store f32* %71 with f32 %70;
    f32* %72 = getelementptr &(f32* %36)[i64 2];
    f32 %73 = load f32* %72;
    f32* %74 = getelementptr &(f32* %38)[i64 2];
    f32 %75 = load f32* %74;
    f32 %76 = fadd f32 %73, f32 %75;
    f32* %77 = getelementptr &(f32* %41)[i64 2];
    store f32* %77 with f32 %76;
    f32* %78 = getelementptr &(f32* %24)[i64 3];
    f32 %79 = load f32* %78;
    f32* %80 = getelementptr &(f32* %26)[i64 3];
    f32 %81 = load f32* %80;
    f32 %82 = fadd f32 %79, f32 %81;
    f32* %83 = getelementptr &(f32* %29)[i64 3];
    store f32* %83 with f32 %82;
    f32* %84 = getelementptr &(f32* %30)[i64 3];
    f32 %85 = load f32* %84;
    f32* %86 = getelementptr &(f32* %32)[i64 3];
    f32 %87 = load f32* %86;
    f32 %88 = fadd f32 %85, f32 %87;
    f32* %89 = getelementptr &(f32* %35)[i64 3];
    store f32* %89 with f32 %88;
    f32* %90 = getelementptr &(f32* %36)[i64 3];
    f32 %91 = load f32* %90;
    f32* %92 = getelementptr &(f32* %38)[i64 3];
    f32 %93 = load f32* %92;
    f32 %94 = fadd f32 %91, f32 %93;
    f32* %95 = getelementptr &(f32* %41)[i64 3];
    store f32* %95 with f32 %94;
    ubr ^super.header;
  ^while.body1:
    i32 %96 = phi [^super.header, i32 %21] [^while.body1, i32 %115];
    f32* %97 = getelementptr &(f32* %0)[i32 %96];
    f32 %98 = load f32* %97;
    f32* %99 = getelementptr &(f32* %3)[i32 %96];
    f32 %100 = load f32* %99;
    f32 %101 = fadd f32 %98, f32 %100;
    f32* %102 = getelementptr &(f32* %18)[i32 %96];
    store f32* %102 with f32 %101;
    f32* %103 = getelementptr &(f32* %1)[i32 %96];
    f32 %104 = load f32* %103;
    f32* %105 = getelementptr &(f32* %4)[i32 %96];
    f32 %106 = load f32* %105;
    f32 %107 = fadd f32 %104, f32 %106;
    f32* %108 = getelementptr &(f32* %19)[i32 %96];
    store f32* %108 with f32 %107;
    f32* %109 = getelementptr &(f32* %2)[i32 %96];
    f32 %110 = load f32* %109;
    f32* %111 = getelementptr &(f32* %5)[i32 %96];
    f32 %112 = load f32* %111;
    f32 %113 = fadd f32 %110, f32 %112;
    f32* %114 = getelementptr &(f32* %20)[i32 %96];
    store f32* %114 with f32 %113;
    i32 %115 = add i32 %96, i32 1;
    i1 %116 = icmp slt i32 %115, i32 3;
    cbr i1 %116(prob = 0.97), ^while.body1, ^while.body2;
  ^while.body2:
    i32 %117 = phi [^while.body1, i32 0] [^while.body2, i32 %121];
    f32* %118 = getelementptr &([6 * f32]* %c0)[i64 0][i32 %117];
    f32 %119 = load f32* %118;
    i32 %120 = f2s f32 %119 to i32;
    call (i32) -> void @putint(i32 %120);
    i32 %121 = add i32 %117, i32 1;
    i1 %122 = icmp slt i32 %121, i32 3;
    cbr i1 %122(prob = 0.67), ^while.body2, ^b;
  ^b:
    call (i32) -> void @putch(i32 10);
    ubr ^while.body3;
  ^while.body3:
    i32 %123 = phi [^b, i32 0] [^while.body3, i32 %127];
    f32* %124 = getelementptr &([3 * f32]* %c1)[i64 0][i32 %123];
    f32 %125 = load f32* %124;
    i32 %126 = f2s f32 %125 to i32;
    call (i32) -> void @putint(i32 %126);
    i32 %127 = add i32 %123, i32 1;
    i1 %128 = icmp slt i32 %127, i32 3;
    cbr i1 %128(prob = 0.67), ^while.body3, ^b1;
  ^b1:
    call (i32) -> void @putch(i32 10);
    ubr ^while.body4;
  ^while.body4:
    i32 %129 = phi [^b1, i32 0] [^while.body4, i32 %133];
    f32* %130 = getelementptr &([3 * f32]* %c2)[i64 0][i32 %129];
    f32 %131 = load f32* %130;
    i32 %132 = f2s f32 %131 to i32;
    call (i32) -> void @putint(i32 %132);
    i32 %133 = add i32 %129, i32 1;
    i1 %134 = icmp slt i32 %133, i32 3;
    cbr i1 %134(prob = 0.67), ^while.body4, ^b2;
  ^b2:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
