internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @M;
internal i32* @L;
internal i32* @N;
internal func @add(f32* %a0, f32* %a1, f32* %a2, f32* %b0, f32* %b1, f32* %b2, f32* %c0, f32* %c1, f32* %c2) -> i32 {
^entry:
    i32* %i = alloc i32;
    f32** %c21 = alloc f32*;
    f32** %c11 = alloc f32*;
    f32** %c01 = alloc f32*;
    f32** %b21 = alloc f32*;
    f32** %b11 = alloc f32*;
    f32** %b01 = alloc f32*;
    f32** %a21 = alloc f32*;
    f32** %a11 = alloc f32*;
    f32** %a01 = alloc f32*;
    store f32** %a01 with f32* %a0;
    store f32** %a11 with f32* %a1;
    store f32** %a21 with f32* %a2;
    store f32** %b01 with f32* %b0;
    store f32** %b11 with f32* %b1;
    store f32** %b21 with f32* %b2;
    store f32** %c01 with f32* %c0;
    store f32** %c11 with f32* %c1;
    store f32** %c21 with f32* %c2;
    store i32* %i with i32 0;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i32 %1 = load i32* @M;
    i1 %2 = scmp lt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %5 = load i32* %i;
    i64 %6 = sext i32 %5 to i64;
    f32* %7 = load f32** %c01;
    f32* %8 = getelementptr &(f32* %7)[i64 %6];
    i32 %9 = load i32* %i;
    i64 %10 = sext i32 %9 to i64;
    f32* %11 = load f32** %a01;
    f32* %12 = getelementptr &(f32* %11)[i64 %10];
    f32 %13 = load f32* %12;
    i32 %14 = load i32* %i;
    i64 %15 = sext i32 %14 to i64;
    f32* %16 = load f32** %b01;
    f32* %17 = getelementptr &(f32* %16)[i64 %15];
    f32 %18 = load f32* %17;
    f32 %19 = fadd f32 %13, f32 %18;
    store f32* %8 with f32 %19;
    i32 %20 = load i32* %i;
    i64 %21 = sext i32 %20 to i64;
    f32* %22 = load f32** %c11;
    f32* %23 = getelementptr &(f32* %22)[i64 %21];
    i32 %24 = load i32* %i;
    i64 %25 = sext i32 %24 to i64;
    f32* %26 = load f32** %a11;
    f32* %27 = getelementptr &(f32* %26)[i64 %25];
    f32 %28 = load f32* %27;
    i32 %29 = load i32* %i;
    i64 %30 = sext i32 %29 to i64;
    f32* %31 = load f32** %b11;
    f32* %32 = getelementptr &(f32* %31)[i64 %30];
    f32 %33 = load f32* %32;
    f32 %34 = fadd f32 %28, f32 %33;
    store f32* %23 with f32 %34;
    i32 %35 = load i32* %i;
    i64 %36 = sext i32 %35 to i64;
    f32* %37 = load f32** %c21;
    f32* %38 = getelementptr &(f32* %37)[i64 %36];
    i32 %39 = load i32* %i;
    i64 %40 = sext i32 %39 to i64;
    f32* %41 = load f32** %a21;
    f32* %42 = getelementptr &(f32* %41)[i64 %40];
    f32 %43 = load f32* %42;
    i32 %44 = load i32* %i;
    i64 %45 = sext i32 %44 to i64;
    f32* %46 = load f32** %b21;
    f32* %47 = getelementptr &(f32* %46)[i64 %45];
    f32 %48 = load f32* %47;
    f32 %49 = fadd f32 %43, f32 %48;
    store f32* %38 with f32 %49;
    i32 %50 = load i32* %i;
    i32 %51 = add i32 %50, i32 1;
    store i32* %i with i32 %51;
    ubr ^while.header;
^b:
    ret i32 0;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %x = alloc i32;
    i32* %i = alloc i32;
    [3 * f32]* %c2 = alloc [3 * f32];
    [3 * f32]* %c1 = alloc [3 * f32];
    [6 * f32]* %c0 = alloc [6 * f32];
    [3 * f32]* %b2 = alloc [3 * f32];
    [3 * f32]* %b1 = alloc [3 * f32];
    [3 * f32]* %b0 = alloc [3 * f32];
    [3 * f32]* %a2 = alloc [3 * f32];
    [3 * f32]* %a1 = alloc [3 * f32];
    [3 * f32]* %a0 = alloc [3 * f32];
    store i32* @N with i32 3;
    store i32* @M with i32 3;
    store i32* @L with i32 3;
    store i32* %i with i32 0;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i32 %1 = load i32* @M;
    i1 %2 = scmp lt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %5 = load i32* %i;
    i64 %6 = sext i32 %5 to i64;
    f32* %7 = getelementptr &([3 * f32]* %a0)[i64 0][i64 %6];
    i32 %8 = load i32* %i;
    f32 %9 = s2f i32 %8 to f32;
    store f32* %7 with f32 %9;
    i32 %10 = load i32* %i;
    i64 %11 = sext i32 %10 to i64;
    f32* %12 = getelementptr &([3 * f32]* %a1)[i64 0][i64 %11];
    i32 %13 = load i32* %i;
    f32 %14 = s2f i32 %13 to f32;
    store f32* %12 with f32 %14;
    i32 %15 = load i32* %i;
    i64 %16 = sext i32 %15 to i64;
    f32* %17 = getelementptr &([3 * f32]* %a2)[i64 0][i64 %16];
    i32 %18 = load i32* %i;
    f32 %19 = s2f i32 %18 to f32;
    store f32* %17 with f32 %19;
    i32 %20 = load i32* %i;
    i64 %21 = sext i32 %20 to i64;
    f32* %22 = getelementptr &([3 * f32]* %b0)[i64 0][i64 %21];
    i32 %23 = load i32* %i;
    f32 %24 = s2f i32 %23 to f32;
    store f32* %22 with f32 %24;
    i32 %25 = load i32* %i;
    i64 %26 = sext i32 %25 to i64;
    f32* %27 = getelementptr &([3 * f32]* %b1)[i64 0][i64 %26];
    i32 %28 = load i32* %i;
    f32 %29 = s2f i32 %28 to f32;
    store f32* %27 with f32 %29;
    i32 %30 = load i32* %i;
    i64 %31 = sext i32 %30 to i64;
    f32* %32 = getelementptr &([3 * f32]* %b2)[i64 0][i64 %31];
    i32 %33 = load i32* %i;
    f32 %34 = s2f i32 %33 to f32;
    store f32* %32 with f32 %34;
    i32 %35 = load i32* %i;
    i32 %36 = add i32 %35, i32 1;
    store i32* %i with i32 %36;
    ubr ^while.header;
^b:
    f32* %37 = getelementptr &([3 * f32]* %a0)[i64 0][i64 0];
    f32* %38 = getelementptr &([3 * f32]* %a1)[i64 0][i64 0];
    f32* %39 = getelementptr &([3 * f32]* %a2)[i64 0][i64 0];
    f32* %40 = getelementptr &([3 * f32]* %b0)[i64 0][i64 0];
    f32* %41 = getelementptr &([3 * f32]* %b1)[i64 0][i64 0];
    f32* %42 = getelementptr &([3 * f32]* %b2)[i64 0][i64 0];
    f32* %43 = getelementptr &([6 * f32]* %c0)[i64 0][i64 0];
    f32* %44 = getelementptr &([3 * f32]* %c1)[i64 0][i64 0];
    f32* %45 = getelementptr &([3 * f32]* %c2)[i64 0][i64 0];
    i32 %46 = call (f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*, f32*) -> i32 @add(f32* %37, f32* %38, f32* %39, f32* %40, f32* %41, f32* %42, f32* %43, f32* %44, f32* %45);
    store i32* %i with i32 %46;
    store i32* %x with i32 0;
    ubr ^while.header1;
^while.header1:
    i32 %47 = load i32* %i;
    i32 %48 = load i32* @N;
    i1 %49 = scmp lt i32 %47, i32 %48;
    i32 %50 = zext i1 %49 to i32;
    i1 %51 = scmp neq i32 %50, i32 0;
    cbr i1 %51(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %52 = load i32* %i;
    i64 %53 = sext i32 %52 to i64;
    f32* %54 = getelementptr &([6 * f32]* %c0)[i64 0][i64 %53];
    f32 %55 = load f32* %54;
    i32 %56 = f2s f32 %55 to i32;
    store i32* %x with i32 %56;
    i32 %57 = load i32* %x;
    call (i32) -> void @putint(i32 %57);
    i32 %58 = load i32* %i;
    i32 %59 = add i32 %58, i32 1;
    store i32* %i with i32 %59;
    ubr ^while.header1;
^b1:
    store i32* %x with i32 10;
    i32 %60 = load i32* %x;
    call (i32) -> void @putch(i32 %60);
    store i32* %i with i32 0;
    ubr ^while.header2;
^while.header2:
    i32 %61 = load i32* %i;
    i32 %62 = load i32* @N;
    i1 %63 = scmp lt i32 %61, i32 %62;
    i32 %64 = zext i1 %63 to i32;
    i1 %65 = scmp neq i32 %64, i32 0;
    cbr i1 %65(prob = 0.97), ^while.body2, ^b2;
^while.body2:
    i32 %66 = load i32* %i;
    i64 %67 = sext i32 %66 to i64;
    f32* %68 = getelementptr &([3 * f32]* %c1)[i64 0][i64 %67];
    f32 %69 = load f32* %68;
    i32 %70 = f2s f32 %69 to i32;
    store i32* %x with i32 %70;
    i32 %71 = load i32* %x;
    call (i32) -> void @putint(i32 %71);
    i32 %72 = load i32* %i;
    i32 %73 = add i32 %72, i32 1;
    store i32* %i with i32 %73;
    ubr ^while.header2;
^b2:
    store i32* %x with i32 10;
    i32 %74 = load i32* %x;
    call (i32) -> void @putch(i32 %74);
    store i32* %i with i32 0;
    ubr ^while.header3;
^while.header3:
    i32 %75 = load i32* %i;
    i32 %76 = load i32* @N;
    i1 %77 = scmp lt i32 %75, i32 %76;
    i32 %78 = zext i1 %77 to i32;
    i1 %79 = scmp neq i32 %78, i32 0;
    cbr i1 %79(prob = 0.97), ^while.body3, ^b3;
^while.body3:
    i32 %80 = load i32* %i;
    i64 %81 = sext i32 %80 to i64;
    f32* %82 = getelementptr &([3 * f32]* %c2)[i64 0][i64 %81];
    f32 %83 = load f32* %82;
    i32 %84 = f2s f32 %83 to i32;
    store i32* %x with i32 %84;
    i32 %85 = load i32* %x;
    call (i32) -> void @putint(i32 %85);
    i32 %86 = load i32* %i;
    i32 %87 = add i32 %86, i32 1;
    store i32* %i with i32 %87;
    ubr ^while.header3;
^b3:
    store i32* %x with i32 10;
    i32 %88 = load i32* %x;
    call (i32) -> void @putch(i32 %88);
    ret i32 0;
}
