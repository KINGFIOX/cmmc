internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoRecurse Entry } {
^entry:
    [3 * f32]* %c2 = alloc [3 * f32];
    [3 * f32]* %c1 = alloc [3 * f32];
    [6 * f32]* %c0 = alloc [6 * f32];
    [3 * f32]* %b2 = alloc [3 * f32];
    [3 * f32]* %b1 = alloc [3 * f32];
    [3 * f32]* %b0 = alloc [3 * f32];
    [3 * f32]* %a2 = alloc [3 * f32];
    [3 * f32]* %a1 = alloc [3 * f32];
    [3 * f32]* %a0 = alloc [3 * f32];
    ubr ^while.header;
^while.header:
    i32 %0 = phi [^while.body, i32 %11] [^entry, i32 0];
    i32 %1 = phi [^while.body, i32 %1] [^entry, i32 3];
    i32 %2 = phi [^while.body, i32 %2] [^entry, i32 3];
    i1 %3 = scmp lt i32 %0, i32 %1;
    cbr i1 %3(prob = 0.97), ^while.body, ^b;
^while.body:
    f32* %4 = getelementptr &([3 * f32]* %a0)[i64 0][i32 %0];
    f32 %5 = s2f i32 %0 to f32;
    store f32* %4 with f32 %5;
    f32* %6 = getelementptr &([3 * f32]* %a1)[i64 0][i32 %0];
    store f32* %6 with f32 %5;
    f32* %7 = getelementptr &([3 * f32]* %a2)[i64 0][i32 %0];
    store f32* %7 with f32 %5;
    f32* %8 = getelementptr &([3 * f32]* %b0)[i64 0][i32 %0];
    store f32* %8 with f32 %5;
    f32* %9 = getelementptr &([3 * f32]* %b1)[i64 0][i32 %0];
    store f32* %9 with f32 %5;
    f32* %10 = getelementptr &([3 * f32]* %b2)[i64 0][i32 %0];
    store f32* %10 with f32 %5;
    i32 %11 = add i32 %0, i32 1;
    ubr ^while.header;
^b:
    f32* %12 = getelementptr &([3 * f32]* %a0)[i64 0][i64 0];
    f32* %13 = getelementptr &([3 * f32]* %a1)[i64 0][i64 0];
    f32* %14 = getelementptr &([3 * f32]* %a2)[i64 0][i64 0];
    f32* %15 = getelementptr &([3 * f32]* %b0)[i64 0][i64 0];
    f32* %16 = getelementptr &([3 * f32]* %b1)[i64 0][i64 0];
    f32* %17 = getelementptr &([3 * f32]* %b2)[i64 0][i64 0];
    f32* %18 = getelementptr &([6 * f32]* %c0)[i64 0][i64 0];
    f32* %19 = getelementptr &([3 * f32]* %c1)[i64 0][i64 0];
    f32* %20 = getelementptr &([3 * f32]* %c2)[i64 0][i64 0];
    ubr ^while.header1;
^while.header1:
    i32 %21 = phi [^while.body1, i32 %21] [^b, i32 %1];
    i32 %22 = phi [^while.body1, i32 %22] [^b, i32 %2];
    i32 %23 = phi [^while.body1, i32 %52] [^b, i32 0];
    f32* %24 = phi [^while.body1, f32* %24] [^b, f32* %20];
    f32* %25 = phi [^while.body1, f32* %25] [^b, f32* %19];
    f32* %26 = phi [^while.body1, f32* %26] [^b, f32* %18];
    f32* %27 = phi [^while.body1, f32* %27] [^b, f32* %17];
    f32* %28 = phi [^while.body1, f32* %28] [^b, f32* %16];
    f32* %29 = phi [^while.body1, f32* %29] [^b, f32* %15];
    f32* %30 = phi [^while.body1, f32* %30] [^b, f32* %14];
    f32* %31 = phi [^while.body1, f32* %31] [^b, f32* %13];
    f32* %32 = phi [^while.body1, f32* %32] [^b, f32* %12];
    i1 %33 = scmp lt i32 %23, i32 %21;
    cbr i1 %33(prob = 0.97), ^while.body1, ^while.header2;
^while.body1:
    f32* %34 = getelementptr &(f32* %26)[i32 %23];
    f32* %35 = getelementptr &(f32* %32)[i32 %23];
    f32 %36 = load f32* %35;
    f32* %37 = getelementptr &(f32* %29)[i32 %23];
    f32 %38 = load f32* %37;
    f32 %39 = fadd f32 %36, f32 %38;
    store f32* %34 with f32 %39;
    f32* %40 = getelementptr &(f32* %25)[i32 %23];
    f32* %41 = getelementptr &(f32* %31)[i32 %23];
    f32 %42 = load f32* %41;
    f32* %43 = getelementptr &(f32* %28)[i32 %23];
    f32 %44 = load f32* %43;
    f32 %45 = fadd f32 %42, f32 %44;
    store f32* %40 with f32 %45;
    f32* %46 = getelementptr &(f32* %24)[i32 %23];
    f32* %47 = getelementptr &(f32* %30)[i32 %23];
    f32 %48 = load f32* %47;
    f32* %49 = getelementptr &(f32* %27)[i32 %23];
    f32 %50 = load f32* %49;
    f32 %51 = fadd f32 %48, f32 %50;
    store f32* %46 with f32 %51;
    i32 %52 = add i32 %23, i32 1;
    ubr ^while.header1;
^while.header2:
    i32 %53 = phi [^while.header1, i32 0] [^while.body2, i32 %59];
    i32 %54 = phi [^while.header1, i32 %22] [^while.body2, i32 %54];
    i1 %55 = scmp lt i32 %53, i32 %54;
    cbr i1 %55(prob = 0.97), ^while.body2, ^b1;
^while.body2:
    f32* %56 = getelementptr &([6 * f32]* %c0)[i64 0][i32 %53];
    f32 %57 = load f32* %56;
    i32 %58 = f2s f32 %57 to i32;
    call (i32) -> void @putint(i32 %58);
    i32 %59 = add i32 %53, i32 1;
    ubr ^while.header2;
^b1:
    call (i32) -> void @putch(i32 10);
    ubr ^while.header3;
^while.header3:
    i32 %60 = phi [^while.body3, i32 %66] [^b1, i32 0];
    i32 %61 = phi [^while.body3, i32 %61] [^b1, i32 %54];
    i1 %62 = scmp lt i32 %60, i32 %61;
    cbr i1 %62(prob = 0.97), ^while.body3, ^b2;
^while.body3:
    f32* %63 = getelementptr &([3 * f32]* %c1)[i64 0][i32 %60];
    f32 %64 = load f32* %63;
    i32 %65 = f2s f32 %64 to i32;
    call (i32) -> void @putint(i32 %65);
    i32 %66 = add i32 %60, i32 1;
    ubr ^while.header3;
^b2:
    call (i32) -> void @putch(i32 10);
    ubr ^while.header4;
^while.header4:
    i32 %67 = phi [^while.body4, i32 %73] [^b2, i32 0];
    i32 %68 = phi [^while.body4, i32 %68] [^b2, i32 %61];
    i1 %69 = scmp lt i32 %67, i32 %68;
    cbr i1 %69(prob = 0.97), ^while.body4, ^b3;
^while.body4:
    f32* %70 = getelementptr &([3 * f32]* %c2)[i64 0][i32 %67];
    f32 %71 = load f32* %70;
    i32 %72 = f2s f32 %71 to i32;
    call (i32) -> void @putint(i32 %72);
    i32 %73 = add i32 %67, i32 1;
    ubr ^while.header4;
^b3:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
