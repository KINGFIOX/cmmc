internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [3 * f32]* %c2 = alloc [3 * f32];
    [3 * f32]* %c1 = alloc [3 * f32];
    [6 * f32]* %c0 = alloc [6 * f32];
    [3 * f32]* %b2 = alloc [3 * f32];
    [3 * f32]* %b1 = alloc [3 * f32];
    [3 * f32]* %b0 = alloc [3 * f32];
    [3 * f32]* %a2 = alloc [3 * f32];
    [3 * f32]* %a1 = alloc [3 * f32];
    [3 * f32]* %a0 = alloc [3 * f32];
    f32* %0 = getelementptr &([3 * f32]* %a0)[i64 0][i64 0];
    store f32* %0 with f32 0;
    f32* %1 = getelementptr &([3 * f32]* %a1)[i64 0][i64 0];
    store f32* %1 with f32 0;
    f32* %2 = getelementptr &([3 * f32]* %a2)[i64 0][i64 0];
    store f32* %2 with f32 0;
    f32* %3 = getelementptr &([3 * f32]* %b0)[i64 0][i64 0];
    store f32* %3 with f32 0;
    f32* %4 = getelementptr &([3 * f32]* %b1)[i64 0][i64 0];
    store f32* %4 with f32 0;
    f32* %5 = getelementptr &([3 * f32]* %b2)[i64 0][i64 0];
    store f32* %5 with f32 0;
    f32* %6 = getelementptr &([3 * f32]* %a0)[i64 0][i64 1];
    store f32* %6 with f32 1;
    f32* %7 = getelementptr &([3 * f32]* %a1)[i64 0][i64 1];
    store f32* %7 with f32 1;
    f32* %8 = getelementptr &([3 * f32]* %a2)[i64 0][i64 1];
    store f32* %8 with f32 1;
    f32* %9 = getelementptr &([3 * f32]* %b0)[i64 0][i64 1];
    store f32* %9 with f32 1;
    f32* %10 = getelementptr &([3 * f32]* %b1)[i64 0][i64 1];
    store f32* %10 with f32 1;
    f32* %11 = getelementptr &([3 * f32]* %b2)[i64 0][i64 1];
    store f32* %11 with f32 1;
    f32* %12 = getelementptr &([3 * f32]* %a0)[i64 0][i64 2];
    store f32* %12 with f32 2;
    f32* %13 = getelementptr &([3 * f32]* %a1)[i64 0][i64 2];
    store f32* %13 with f32 2;
    f32* %14 = getelementptr &([3 * f32]* %a2)[i64 0][i64 2];
    store f32* %14 with f32 2;
    f32* %15 = getelementptr &([3 * f32]* %b0)[i64 0][i64 2];
    store f32* %15 with f32 2;
    f32* %16 = getelementptr &([3 * f32]* %b1)[i64 0][i64 2];
    store f32* %16 with f32 2;
    f32* %17 = getelementptr &([3 * f32]* %b2)[i64 0][i64 2];
    store f32* %17 with f32 2;
    f32* %18 = getelementptr &([6 * f32]* %c0)[i64 0][i64 0];
    f32* %19 = getelementptr &([3 * f32]* %c1)[i64 0][i64 0];
    f32* %20 = getelementptr &([3 * f32]* %c2)[i64 0][i64 0];
    ubr ^super.header;
  ^super.header:
    i32 %21 = phi [^entry, i32 0] [^while.body, i32 %22];
    i32 %22 = add i32 %21, i32 4;
    i1 %23 = icmp slt i32 %22, i32 3;
    cbr i1 %23(prob = 0.89), ^while.body, ^super.header1;
  ^while.body:
    f32* %24 = getelementptr &(f32* %0)[i32 %21];
    f32 %25 = load f32* %24;
    f32* %26 = getelementptr &(f32* %3)[i32 %21];
    f32 %27 = load f32* %26;
    f32 %28 = fadd f32 %25, f32 %27;
    f32* %29 = getelementptr &(f32* %18)[i32 %21];
    store f32* %29 with f32 %28;
    f32* %30 = getelementptr &(f32* %1)[i32 %21];
    f32 %31 = load f32* %30;
    f32* %32 = getelementptr &(f32* %4)[i32 %21];
    f32 %33 = load f32* %32;
    f32 %34 = fadd f32 %31, f32 %33;
    f32* %35 = getelementptr &(f32* %19)[i32 %21];
    store f32* %35 with f32 %34;
    f32* %36 = getelementptr &(f32* %2)[i32 %21];
    f32 %37 = load f32* %36;
    f32* %38 = getelementptr &(f32* %5)[i32 %21];
    f32 %39 = load f32* %38;
    f32 %40 = fadd f32 %37, f32 %39;
    f32* %41 = getelementptr &(f32* %20)[i32 %21];
    store f32* %41 with f32 %40;
    f32* %42 = getelementptr &(f32* %24)[i64 1];
    f32 %43 = load f32* %42;
    f32* %44 = getelementptr &(f32* %26)[i64 1];
    f32 %45 = load f32* %44;
    f32 %46 = fadd f32 %43, f32 %45;
    f32* %47 = getelementptr &(f32* %29)[i64 1];
    store f32* %47 with f32 %46;
    f32* %48 = getelementptr &(f32* %30)[i64 1];
    f32 %49 = load f32* %48;
    f32* %50 = getelementptr &(f32* %32)[i64 1];
    f32 %51 = load f32* %50;
    f32 %52 = fadd f32 %49, f32 %51;
    f32* %53 = getelementptr &(f32* %35)[i64 1];
    store f32* %53 with f32 %52;
    f32* %54 = getelementptr &(f32* %36)[i64 1];
    f32 %55 = load f32* %54;
    f32* %56 = getelementptr &(f32* %38)[i64 1];
    f32 %57 = load f32* %56;
    f32 %58 = fadd f32 %55, f32 %57;
    f32* %59 = getelementptr &(f32* %41)[i64 1];
    store f32* %59 with f32 %58;
    f32* %60 = getelementptr &(f32* %24)[i64 2];
    f32 %61 = load f32* %60;
    f32* %62 = getelementptr &(f32* %26)[i64 2];
    f32 %63 = load f32* %62;
    f32 %64 = fadd f32 %61, f32 %63;
    f32* %65 = getelementptr &(f32* %29)[i64 2];
    store f32* %65 with f32 %64;
    f32* %66 = getelementptr &(f32* %30)[i64 2];
    f32 %67 = load f32* %66;
    f32* %68 = getelementptr &(f32* %32)[i64 2];
    f32 %69 = load f32* %68;
    f32 %70 = fadd f32 %67, f32 %69;
    f32* %71 = getelementptr &(f32* %35)[i64 2];
    store f32* %71 with f32 %70;
    f32* %72 = getelementptr &(f32* %36)[i64 2];
    f32 %73 = load f32* %72;
    f32* %74 = getelementptr &(f32* %38)[i64 2];
    f32 %75 = load f32* %74;
    f32 %76 = fadd f32 %73, f32 %75;
    f32* %77 = getelementptr &(f32* %41)[i64 2];
    store f32* %77 with f32 %76;
    f32* %78 = getelementptr &(f32* %24)[i64 3];
    f32 %79 = load f32* %78;
    f32* %80 = getelementptr &(f32* %26)[i64 3];
    f32 %81 = load f32* %80;
    f32 %82 = fadd f32 %79, f32 %81;
    f32* %83 = getelementptr &(f32* %29)[i64 3];
    store f32* %83 with f32 %82;
    f32* %84 = getelementptr &(f32* %30)[i64 3];
    f32 %85 = load f32* %84;
    f32* %86 = getelementptr &(f32* %32)[i64 3];
    f32 %87 = load f32* %86;
    f32 %88 = fadd f32 %85, f32 %87;
    f32* %89 = getelementptr &(f32* %35)[i64 3];
    store f32* %89 with f32 %88;
    f32* %90 = getelementptr &(f32* %36)[i64 3];
    f32 %91 = load f32* %90;
    f32* %92 = getelementptr &(f32* %38)[i64 3];
    f32 %93 = load f32* %92;
    f32 %94 = fadd f32 %91, f32 %93;
    f32* %95 = getelementptr &(f32* %41)[i64 3];
    store f32* %95 with f32 %94;
    ubr ^super.header;
  ^super.header1:
    i32 %96 = phi [^super.header, i32 %21] [^while.body1, i32 %97];
    i32 %97 = add i32 %96, i32 4;
    i1 %98 = icmp slt i32 %97, i32 3;
    cbr i1 %98(prob = 0.89), ^while.body1, ^super.header2;
  ^while.body1:
    f32* %99 = getelementptr &(f32* %0)[i32 %96];
    f32 %100 = load f32* %99;
    f32* %101 = getelementptr &(f32* %3)[i32 %96];
    f32 %102 = load f32* %101;
    f32 %103 = fadd f32 %100, f32 %102;
    f32* %104 = getelementptr &(f32* %18)[i32 %96];
    store f32* %104 with f32 %103;
    f32* %105 = getelementptr &(f32* %1)[i32 %96];
    f32 %106 = load f32* %105;
    f32* %107 = getelementptr &(f32* %4)[i32 %96];
    f32 %108 = load f32* %107;
    f32 %109 = fadd f32 %106, f32 %108;
    f32* %110 = getelementptr &(f32* %19)[i32 %96];
    store f32* %110 with f32 %109;
    f32* %111 = getelementptr &(f32* %2)[i32 %96];
    f32 %112 = load f32* %111;
    f32* %113 = getelementptr &(f32* %5)[i32 %96];
    f32 %114 = load f32* %113;
    f32 %115 = fadd f32 %112, f32 %114;
    f32* %116 = getelementptr &(f32* %20)[i32 %96];
    store f32* %116 with f32 %115;
    f32* %117 = getelementptr &(f32* %99)[i64 1];
    f32 %118 = load f32* %117;
    f32* %119 = getelementptr &(f32* %101)[i64 1];
    f32 %120 = load f32* %119;
    f32 %121 = fadd f32 %118, f32 %120;
    f32* %122 = getelementptr &(f32* %104)[i64 1];
    store f32* %122 with f32 %121;
    f32* %123 = getelementptr &(f32* %105)[i64 1];
    f32 %124 = load f32* %123;
    f32* %125 = getelementptr &(f32* %107)[i64 1];
    f32 %126 = load f32* %125;
    f32 %127 = fadd f32 %124, f32 %126;
    f32* %128 = getelementptr &(f32* %110)[i64 1];
    store f32* %128 with f32 %127;
    f32* %129 = getelementptr &(f32* %111)[i64 1];
    f32 %130 = load f32* %129;
    f32* %131 = getelementptr &(f32* %113)[i64 1];
    f32 %132 = load f32* %131;
    f32 %133 = fadd f32 %130, f32 %132;
    f32* %134 = getelementptr &(f32* %116)[i64 1];
    store f32* %134 with f32 %133;
    f32* %135 = getelementptr &(f32* %99)[i64 2];
    f32 %136 = load f32* %135;
    f32* %137 = getelementptr &(f32* %101)[i64 2];
    f32 %138 = load f32* %137;
    f32 %139 = fadd f32 %136, f32 %138;
    f32* %140 = getelementptr &(f32* %104)[i64 2];
    store f32* %140 with f32 %139;
    f32* %141 = getelementptr &(f32* %105)[i64 2];
    f32 %142 = load f32* %141;
    f32* %143 = getelementptr &(f32* %107)[i64 2];
    f32 %144 = load f32* %143;
    f32 %145 = fadd f32 %142, f32 %144;
    f32* %146 = getelementptr &(f32* %110)[i64 2];
    store f32* %146 with f32 %145;
    f32* %147 = getelementptr &(f32* %111)[i64 2];
    f32 %148 = load f32* %147;
    f32* %149 = getelementptr &(f32* %113)[i64 2];
    f32 %150 = load f32* %149;
    f32 %151 = fadd f32 %148, f32 %150;
    f32* %152 = getelementptr &(f32* %116)[i64 2];
    store f32* %152 with f32 %151;
    f32* %153 = getelementptr &(f32* %99)[i64 3];
    f32 %154 = load f32* %153;
    f32* %155 = getelementptr &(f32* %101)[i64 3];
    f32 %156 = load f32* %155;
    f32 %157 = fadd f32 %154, f32 %156;
    f32* %158 = getelementptr &(f32* %104)[i64 3];
    store f32* %158 with f32 %157;
    f32* %159 = getelementptr &(f32* %105)[i64 3];
    f32 %160 = load f32* %159;
    f32* %161 = getelementptr &(f32* %107)[i64 3];
    f32 %162 = load f32* %161;
    f32 %163 = fadd f32 %160, f32 %162;
    f32* %164 = getelementptr &(f32* %110)[i64 3];
    store f32* %164 with f32 %163;
    f32* %165 = getelementptr &(f32* %111)[i64 3];
    f32 %166 = load f32* %165;
    f32* %167 = getelementptr &(f32* %113)[i64 3];
    f32 %168 = load f32* %167;
    f32 %169 = fadd f32 %166, f32 %168;
    f32* %170 = getelementptr &(f32* %116)[i64 3];
    store f32* %170 with f32 %169;
    ubr ^super.header1;
  ^super.header2:
    i32 %171 = phi [^super.header1, i32 %96] [^while.body2, i32 %172];
    i32 %172 = add i32 %171, i32 4;
    i1 %173 = icmp slt i32 %172, i32 3;
    cbr i1 %173(prob = 0.89), ^while.body2, ^while.body3;
  ^while.body2:
    f32* %174 = getelementptr &(f32* %0)[i32 %171];
    f32 %175 = load f32* %174;
    f32* %176 = getelementptr &(f32* %3)[i32 %171];
    f32 %177 = load f32* %176;
    f32 %178 = fadd f32 %175, f32 %177;
    f32* %179 = getelementptr &(f32* %18)[i32 %171];
    store f32* %179 with f32 %178;
    f32* %180 = getelementptr &(f32* %1)[i32 %171];
    f32 %181 = load f32* %180;
    f32* %182 = getelementptr &(f32* %4)[i32 %171];
    f32 %183 = load f32* %182;
    f32 %184 = fadd f32 %181, f32 %183;
    f32* %185 = getelementptr &(f32* %19)[i32 %171];
    store f32* %185 with f32 %184;
    f32* %186 = getelementptr &(f32* %2)[i32 %171];
    f32 %187 = load f32* %186;
    f32* %188 = getelementptr &(f32* %5)[i32 %171];
    f32 %189 = load f32* %188;
    f32 %190 = fadd f32 %187, f32 %189;
    f32* %191 = getelementptr &(f32* %20)[i32 %171];
    store f32* %191 with f32 %190;
    f32* %192 = getelementptr &(f32* %174)[i64 1];
    f32 %193 = load f32* %192;
    f32* %194 = getelementptr &(f32* %176)[i64 1];
    f32 %195 = load f32* %194;
    f32 %196 = fadd f32 %193, f32 %195;
    f32* %197 = getelementptr &(f32* %179)[i64 1];
    store f32* %197 with f32 %196;
    f32* %198 = getelementptr &(f32* %180)[i64 1];
    f32 %199 = load f32* %198;
    f32* %200 = getelementptr &(f32* %182)[i64 1];
    f32 %201 = load f32* %200;
    f32 %202 = fadd f32 %199, f32 %201;
    f32* %203 = getelementptr &(f32* %185)[i64 1];
    store f32* %203 with f32 %202;
    f32* %204 = getelementptr &(f32* %186)[i64 1];
    f32 %205 = load f32* %204;
    f32* %206 = getelementptr &(f32* %188)[i64 1];
    f32 %207 = load f32* %206;
    f32 %208 = fadd f32 %205, f32 %207;
    f32* %209 = getelementptr &(f32* %191)[i64 1];
    store f32* %209 with f32 %208;
    f32* %210 = getelementptr &(f32* %174)[i64 2];
    f32 %211 = load f32* %210;
    f32* %212 = getelementptr &(f32* %176)[i64 2];
    f32 %213 = load f32* %212;
    f32 %214 = fadd f32 %211, f32 %213;
    f32* %215 = getelementptr &(f32* %179)[i64 2];
    store f32* %215 with f32 %214;
    f32* %216 = getelementptr &(f32* %180)[i64 2];
    f32 %217 = load f32* %216;
    f32* %218 = getelementptr &(f32* %182)[i64 2];
    f32 %219 = load f32* %218;
    f32 %220 = fadd f32 %217, f32 %219;
    f32* %221 = getelementptr &(f32* %185)[i64 2];
    store f32* %221 with f32 %220;
    f32* %222 = getelementptr &(f32* %186)[i64 2];
    f32 %223 = load f32* %222;
    f32* %224 = getelementptr &(f32* %188)[i64 2];
    f32 %225 = load f32* %224;
    f32 %226 = fadd f32 %223, f32 %225;
    f32* %227 = getelementptr &(f32* %191)[i64 2];
    store f32* %227 with f32 %226;
    f32* %228 = getelementptr &(f32* %174)[i64 3];
    f32 %229 = load f32* %228;
    f32* %230 = getelementptr &(f32* %176)[i64 3];
    f32 %231 = load f32* %230;
    f32 %232 = fadd f32 %229, f32 %231;
    f32* %233 = getelementptr &(f32* %179)[i64 3];
    store f32* %233 with f32 %232;
    f32* %234 = getelementptr &(f32* %180)[i64 3];
    f32 %235 = load f32* %234;
    f32* %236 = getelementptr &(f32* %182)[i64 3];
    f32 %237 = load f32* %236;
    f32 %238 = fadd f32 %235, f32 %237;
    f32* %239 = getelementptr &(f32* %185)[i64 3];
    store f32* %239 with f32 %238;
    f32* %240 = getelementptr &(f32* %186)[i64 3];
    f32 %241 = load f32* %240;
    f32* %242 = getelementptr &(f32* %188)[i64 3];
    f32 %243 = load f32* %242;
    f32 %244 = fadd f32 %241, f32 %243;
    f32* %245 = getelementptr &(f32* %191)[i64 3];
    store f32* %245 with f32 %244;
    ubr ^super.header2;
  ^while.body3:
    i32 %246 = phi [^super.header2, i32 %171] [^while.body3, i32 %265];
    f32* %247 = getelementptr &(f32* %0)[i32 %246];
    f32 %248 = load f32* %247;
    f32* %249 = getelementptr &(f32* %3)[i32 %246];
    f32 %250 = load f32* %249;
    f32 %251 = fadd f32 %248, f32 %250;
    f32* %252 = getelementptr &(f32* %18)[i32 %246];
    store f32* %252 with f32 %251;
    f32* %253 = getelementptr &(f32* %1)[i32 %246];
    f32 %254 = load f32* %253;
    f32* %255 = getelementptr &(f32* %4)[i32 %246];
    f32 %256 = load f32* %255;
    f32 %257 = fadd f32 %254, f32 %256;
    f32* %258 = getelementptr &(f32* %19)[i32 %246];
    store f32* %258 with f32 %257;
    f32* %259 = getelementptr &(f32* %2)[i32 %246];
    f32 %260 = load f32* %259;
    f32* %261 = getelementptr &(f32* %5)[i32 %246];
    f32 %262 = load f32* %261;
    f32 %263 = fadd f32 %260, f32 %262;
    f32* %264 = getelementptr &(f32* %20)[i32 %246];
    store f32* %264 with f32 %263;
    i32 %265 = add i32 %246, i32 1;
    i1 %266 = icmp slt i32 %265, i32 3;
    cbr i1 %266(prob = 0.97), ^while.body3, ^while.body4;
  ^while.body4:
    i32 %267 = phi [^while.body3, i32 0] [^while.body4, i32 %271];
    f32* %268 = getelementptr &([6 * f32]* %c0)[i64 0][i32 %267];
    f32 %269 = load f32* %268;
    i32 %270 = f2s f32 %269 to i32;
    call (i32) -> void @putint(i32 %270);
    i32 %271 = add i32 %267, i32 1;
    i1 %272 = icmp slt i32 %271, i32 3;
    cbr i1 %272(prob = 0.67), ^while.body4, ^b;
  ^b:
    call (i32) -> void @putch(i32 10);
    ubr ^while.body5;
  ^while.body5:
    i32 %273 = phi [^b, i32 0] [^while.body5, i32 %277];
    f32* %274 = getelementptr &([3 * f32]* %c1)[i64 0][i32 %273];
    f32 %275 = load f32* %274;
    i32 %276 = f2s f32 %275 to i32;
    call (i32) -> void @putint(i32 %276);
    i32 %277 = add i32 %273, i32 1;
    i1 %278 = icmp slt i32 %277, i32 3;
    cbr i1 %278(prob = 0.67), ^while.body5, ^b1;
  ^b1:
    call (i32) -> void @putch(i32 10);
    ubr ^while.body6;
  ^while.body6:
    i32 %279 = phi [^b1, i32 0] [^while.body6, i32 %283];
    f32* %280 = getelementptr &([3 * f32]* %c2)[i64 0][i32 %279];
    f32 %281 = load f32* %280;
    i32 %282 = f2s f32 %281 to i32;
    call (i32) -> void @putint(i32 %282);
    i32 %283 = add i32 %279, i32 1;
    i1 %284 = icmp slt i32 %283, i32 3;
    cbr i1 %284(prob = 0.67), ^while.body6, ^b2;
  ^b2:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
