internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @n;
func @main() -> i32 { Entry } {
^entry:
    i32* %newline = alloc i32;
    i32* %t = alloc i32;
    i32* %b = alloc i32;
    i32* %a29 = alloc i32;
    i32* %a28 = alloc i32;
    i32* %a27 = alloc i32;
    i32* %a26 = alloc i32;
    i32* %a25 = alloc i32;
    i32* %a24 = alloc i32;
    i32* %a23 = alloc i32;
    i32* %a22 = alloc i32;
    i32* %a21 = alloc i32;
    i32* %a20 = alloc i32;
    i32* %a19 = alloc i32;
    i32* %a18 = alloc i32;
    i32* %a17 = alloc i32;
    i32* %a16 = alloc i32;
    i32* %a15 = alloc i32;
    i32* %a14 = alloc i32;
    i32* %a13 = alloc i32;
    i32* %a12 = alloc i32;
    i32* %a11 = alloc i32;
    i32* %a10 = alloc i32;
    i32* %a9 = alloc i32;
    i32* %a8 = alloc i32;
    i32* %a7 = alloc i32;
    i32* %a6 = alloc i32;
    i32* %a5 = alloc i32;
    i32* %a4 = alloc i32;
    i32* %a3 = alloc i32;
    i32* %a2 = alloc i32;
    i32* %a1 = alloc i32;
    i32* %a0 = alloc i32;
    store i32* %a0 with i32 0;
    store i32* %a1 with i32 0;
    store i32* %a2 with i32 0;
    store i32* %a3 with i32 0;
    store i32* %a4 with i32 0;
    store i32* %a5 with i32 0;
    store i32* %a6 with i32 0;
    store i32* %a7 with i32 0;
    store i32* %a8 with i32 0;
    store i32* %a9 with i32 0;
    store i32* %a10 with i32 0;
    store i32* %a11 with i32 0;
    store i32* %a12 with i32 0;
    store i32* %a13 with i32 0;
    store i32* %a14 with i32 0;
    store i32* %a15 with i32 0;
    store i32* %a16 with i32 0;
    store i32* %a17 with i32 0;
    store i32* %a18 with i32 0;
    store i32* %a19 with i32 0;
    store i32* %a20 with i32 0;
    store i32* %a21 with i32 0;
    store i32* %a22 with i32 0;
    store i32* %a23 with i32 0;
    store i32* %a24 with i32 0;
    store i32* %a25 with i32 0;
    store i32* %a26 with i32 0;
    store i32* %a27 with i32 0;
    store i32* %a28 with i32 0;
    store i32* %a29 with i32 0;
    store i32* %b with i32 0;
    i32 %0 = call () -> i32 @getint();
    store i32* %b with i32 %0;
    ubr ^while.header;
^while.header:
    i32 %1 = load i32* %b;
    i1 %2 = scmp eq i32 %1, i32 5;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b1;
^while.body:
    i32 %5 = load i32* %b;
    i32 %6 = add i32 %5, i32 1;
    store i32* %b with i32 %6;
    ubr ^while.header;
^b1:
    store i32* %a0 with i32 0;
    i32 %7 = load i32* %a0;
    i32 %8 = add i32 %7, i32 1;
    store i32* %a1 with i32 %8;
    i32 %9 = load i32* %a1;
    i32 %10 = add i32 %9, i32 1;
    store i32* %a2 with i32 %10;
    i32 %11 = load i32* %a2;
    i32 %12 = add i32 %11, i32 1;
    store i32* %a3 with i32 %12;
    i32 %13 = load i32* %a3;
    i32 %14 = add i32 %13, i32 1;
    store i32* %a4 with i32 %14;
    i32 %15 = load i32* %a4;
    i32 %16 = add i32 %15, i32 1;
    store i32* %a5 with i32 %16;
    i32 %17 = load i32* %a5;
    i32 %18 = add i32 %17, i32 1;
    store i32* %a6 with i32 %18;
    i32 %19 = load i32* %a6;
    i32 %20 = add i32 %19, i32 1;
    store i32* %a7 with i32 %20;
    i32 %21 = load i32* %a7;
    i32 %22 = add i32 %21, i32 1;
    store i32* %a8 with i32 %22;
    i32 %23 = load i32* %a8;
    i32 %24 = add i32 %23, i32 1;
    store i32* %a9 with i32 %24;
    i32 %25 = load i32* %a9;
    i32 %26 = add i32 %25, i32 1;
    store i32* %a10 with i32 %26;
    i32 %27 = load i32* %a10;
    i32 %28 = add i32 %27, i32 1;
    store i32* %a11 with i32 %28;
    i32 %29 = load i32* %a11;
    i32 %30 = add i32 %29, i32 1;
    store i32* %a12 with i32 %30;
    i32 %31 = load i32* %a12;
    i32 %32 = add i32 %31, i32 1;
    store i32* %a13 with i32 %32;
    i32 %33 = load i32* %a13;
    i32 %34 = add i32 %33, i32 1;
    store i32* %a14 with i32 %34;
    i32 %35 = load i32* %a14;
    i32 %36 = add i32 %35, i32 1;
    store i32* %a15 with i32 %36;
    i32 %37 = load i32* %a15;
    i32 %38 = add i32 %37, i32 1;
    store i32* %a16 with i32 %38;
    i32 %39 = load i32* %a16;
    i32 %40 = add i32 %39, i32 1;
    store i32* %a17 with i32 %40;
    i32 %41 = load i32* %a17;
    i32 %42 = add i32 %41, i32 1;
    store i32* %a18 with i32 %42;
    i32 %43 = load i32* %a18;
    i32 %44 = add i32 %43, i32 1;
    store i32* %a19 with i32 %44;
    i32 %45 = load i32* %a19;
    i32 %46 = add i32 %45, i32 1;
    store i32* %a20 with i32 %46;
    i32 %47 = load i32* %a20;
    i32 %48 = add i32 %47, i32 1;
    store i32* %a21 with i32 %48;
    i32 %49 = load i32* %a21;
    i32 %50 = add i32 %49, i32 1;
    store i32* %a22 with i32 %50;
    i32 %51 = load i32* %a22;
    i32 %52 = add i32 %51, i32 1;
    store i32* %a23 with i32 %52;
    i32 %53 = load i32* %a23;
    i32 %54 = add i32 %53, i32 1;
    store i32* %a24 with i32 %54;
    i32 %55 = load i32* %a24;
    i32 %56 = add i32 %55, i32 1;
    store i32* %a25 with i32 %56;
    i32 %57 = load i32* %a25;
    i32 %58 = add i32 %57, i32 1;
    store i32* %a26 with i32 %58;
    i32 %59 = load i32* %a26;
    i32 %60 = add i32 %59, i32 1;
    store i32* %a27 with i32 %60;
    i32 %61 = load i32* %a27;
    i32 %62 = add i32 %61, i32 1;
    store i32* %a28 with i32 %62;
    i32 %63 = load i32* %a28;
    i32 %64 = add i32 %63, i32 1;
    store i32* %a29 with i32 %64;
    store i32* %t with i32 0;
    i32 %65 = load i32* %a0;
    call (i32) -> void @putint(i32 %65);
    i32 %66 = load i32* %a1;
    call (i32) -> void @putint(i32 %66);
    i32 %67 = load i32* %a2;
    call (i32) -> void @putint(i32 %67);
    i32 %68 = load i32* %a3;
    call (i32) -> void @putint(i32 %68);
    i32 %69 = load i32* %a4;
    call (i32) -> void @putint(i32 %69);
    i32 %70 = load i32* %a5;
    call (i32) -> void @putint(i32 %70);
    i32 %71 = load i32* %a6;
    call (i32) -> void @putint(i32 %71);
    i32 %72 = load i32* %a7;
    call (i32) -> void @putint(i32 %72);
    i32 %73 = load i32* %a8;
    call (i32) -> void @putint(i32 %73);
    i32 %74 = load i32* %a9;
    call (i32) -> void @putint(i32 %74);
    i32 %75 = load i32* %a10;
    call (i32) -> void @putint(i32 %75);
    i32 %76 = load i32* %a11;
    call (i32) -> void @putint(i32 %76);
    i32 %77 = load i32* %a12;
    call (i32) -> void @putint(i32 %77);
    i32 %78 = load i32* %a13;
    call (i32) -> void @putint(i32 %78);
    i32 %79 = load i32* %a14;
    call (i32) -> void @putint(i32 %79);
    i32 %80 = load i32* %a15;
    call (i32) -> void @putint(i32 %80);
    i32 %81 = load i32* %a16;
    call (i32) -> void @putint(i32 %81);
    i32 %82 = load i32* %a17;
    call (i32) -> void @putint(i32 %82);
    i32 %83 = load i32* %a18;
    call (i32) -> void @putint(i32 %83);
    i32 %84 = load i32* %a19;
    call (i32) -> void @putint(i32 %84);
    i32 %85 = load i32* %a20;
    call (i32) -> void @putint(i32 %85);
    i32 %86 = load i32* %a21;
    call (i32) -> void @putint(i32 %86);
    i32 %87 = load i32* %a22;
    call (i32) -> void @putint(i32 %87);
    i32 %88 = load i32* %a23;
    call (i32) -> void @putint(i32 %88);
    i32 %89 = load i32* %a24;
    call (i32) -> void @putint(i32 %89);
    i32 %90 = load i32* %a25;
    call (i32) -> void @putint(i32 %90);
    i32 %91 = load i32* %a26;
    call (i32) -> void @putint(i32 %91);
    i32 %92 = load i32* %a27;
    call (i32) -> void @putint(i32 %92);
    i32 %93 = load i32* %a28;
    call (i32) -> void @putint(i32 %93);
    i32 %94 = load i32* %a29;
    call (i32) -> void @putint(i32 %94);
    store i32* %newline with i32 0;
    store i32* %newline with i32 10;
    i32 %95 = load i32* %newline;
    call (i32) -> void @putch(i32 %95);
    i32 %96 = load i32* %b;
    call (i32) -> void @putint(i32 %96);
    i32 %97 = load i32* %newline;
    call (i32) -> void @putch(i32 %97);
    i32 %98 = load i32* %a25;
    ret i32 %98;
}
