internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [65536 * i32]* @tape;
internal [32768 * i32]* @program;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = scmp gt i32 %0, i32 0;
    cbr i1 %1(prob = 0.97), ^while.body, ^b;
^b:
    i32 %2 = phi [^entry, i32 0] [^while.body, i32 %8];
    i32* %3 = getelementptr &([32768 * i32]* @program)[i64 0][i32 %2];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([32768 * i32]* @program)[i64 0][i64 0];
    ubr ^while.header;
^while.body:
    i32 %5 = phi [^entry, i32 0] [^while.body, i32 %8];
    i32* %6 = getelementptr &([32768 * i32]* @program)[i64 0][i32 %5];
    i32 %7 = call () -> i32 @getch();
    store i32* %6 with i32 %7;
    i32 %8 = add i32 %5, i32 1;
    i1 %9 = scmp lt i32 %8, i32 %0;
    cbr i1 %9(prob = 0.97), ^while.body, ^b;
^while.header:
    i32 %10 = phi [^b, i32 0] [^b1, i32 %18];
    i32 %11 = phi [^b, i32 0] [^b1, i32 %20];
    i32* %12 = getelementptr &(i32* %4)[i32 %11];
    i32 %13 = load i32* %12;
    i1 %14 = scmp neq i32 %13, i32 0;
    cbr i1 %14(prob = 0.97), ^while.body1, ^entry1;
^while.body1:
    i1 %15 = scmp eq i32 %13, i32 62;
    cbr i1 %15(prob = 0.5), ^if.then, ^if.else;
^entry1:
    ret i32 0;
^if.then:
    i32 %16 = add i32 %10, i32 1;
    ubr ^b1;
^if.else:
    i1 %17 = scmp eq i32 %13, i32 60;
    cbr i1 %17(prob = 0.5), ^if.then1, ^if.else1;
^b1:
    i32 %18 = phi [^if.then, i32 %16] [^if.then1, i32 %21] [^if.then2, i32 %10] [^if.then3, i32 %10] [^if.then4, i32 %10] [^if.then5, i32 %10] [^if.else5, i32 %10] [^b2, i32 %10] [^while.header1, i32 %10];
    i32 %19 = phi [^if.then, i32 %11] [^if.then1, i32 %11] [^if.then2, i32 %11] [^if.then3, i32 %11] [^if.then4, i32 %11] [^if.then5, i32 %11] [^if.else5, i32 %11] [^b2, i32 %11] [^while.header1, i32 %41];
    i32 %20 = add i32 %19, i32 1;
    ubr ^while.header;
^if.then1:
    i32 %21 = add i32 %10, i32 -1;
    ubr ^b1;
^if.else1:
    i1 %22 = scmp eq i32 %13, i32 43;
    cbr i1 %22(prob = 0.5), ^if.then2, ^if.else2;
^if.then2:
    i32* %23 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %10];
    i32 %24 = load i32* %23;
    i32 %25 = add i32 %24, i32 1;
    store i32* %23 with i32 %25;
    ubr ^b1;
^if.else2:
    i1 %26 = scmp eq i32 %13, i32 45;
    cbr i1 %26(prob = 0.5), ^if.then3, ^if.else3;
^if.then3:
    i32* %27 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %10];
    i32 %28 = load i32* %27;
    i32 %29 = add i32 %28, i32 -1;
    store i32* %27 with i32 %29;
    ubr ^b1;
^if.else3:
    i1 %30 = scmp eq i32 %13, i32 46;
    cbr i1 %30(prob = 0.5), ^if.then4, ^if.else4;
^if.then4:
    i32* %31 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %10];
    i32 %32 = load i32* %31;
    call (i32) -> void @putch(i32 %32);
    ubr ^b1;
^if.else4:
    i1 %33 = scmp eq i32 %13, i32 44;
    cbr i1 %33(prob = 0.5), ^if.then5, ^if.else5;
^if.then5:
    i32* %34 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %10];
    i32 %35 = call () -> i32 @getch();
    store i32* %34 with i32 %35;
    ubr ^b1;
^if.else5:
    i1 %36 = scmp eq i32 %13, i32 93;
    cbr i1 %36(prob = 0.5), ^b2, ^b1;
^b2:
    i32* %37 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %10];
    i32 %38 = load i32* %37;
    i1 %39 = scmp neq i32 %38, i32 0;
    cbr i1 %39(prob = 0.5), ^while.header1, ^b1;
^while.header1:
    i32 %40 = phi [^b2, i32 1] [^if.then6, i32 %47] [^if.else6, i32 %40] [^if.then7, i32 %49];
    i32 %41 = phi [^b2, i32 %11] [^if.then6, i32 %43] [^if.else6, i32 %43] [^if.then7, i32 %43];
    i1 %42 = scmp gt i32 %40, i32 0;
    cbr i1 %42(prob = 0.97), ^while.body2, ^b1;
^while.body2:
    i32 %43 = add i32 %41, i32 -1;
    i32* %44 = getelementptr &(i32* %4)[i32 %43];
    i32 %45 = load i32* %44;
    i1 %46 = scmp eq i32 %45, i32 91;
    cbr i1 %46(prob = 0.5), ^if.then6, ^if.else6;
^if.then6:
    i32 %47 = add i32 %40, i32 -1;
    ubr ^while.header1;
^if.else6:
    i1 %48 = scmp eq i32 %45, i32 93;
    cbr i1 %48(prob = 0.5), ^if.then7, ^while.header1;
^if.then7:
    i32 %49 = add i32 %40, i32 1;
    ubr ^while.header1;
}
