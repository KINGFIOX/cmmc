internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [65536 * i32]* @tape;
internal [32768 * i32]* @program;
func @main() -> i32 { NoRecurse Entry } {
^entry():
    i32* %i = alloc i32;
    i32* %len = alloc i32;
    i32 %0 = call () -> i32 @getint();
    i1 %1 = scmp lt i32 0, i32 %0;
    cbr i1 %1, [ ^while.body i32* %len, i32* %i, i32 0, i32 %0 ], [ ^b i32* %len, i32* %i, i32 0 ];
^while.body(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3):
    i32* %0 = getelementptr &([32768 * i32]* @program)[i32 0][i32 %arg2];
    i32 %1 = call () -> i32 @getch();
    store i32* %0 with i32 %1;
    i32 %2 = add i32 %arg2, i32 1;
    i1 %3 = scmp lt i32 %2, i32 %arg3;
    cbr i1 %3, [ ^while.body i32* %arg, i32* %arg1, i32 %2, i32 %arg3 ], [ ^b i32* %arg, i32* %arg1, i32 %2 ];
^b(i32* %arg, i32* %arg1, i32 %arg2):
    i32* %0 = getelementptr &([32768 * i32]* @program)[i32 0][i32 %arg2];
    store i32* %0 with i32 0;
    free i32* %arg;
    free i32* %arg1;
    i32* %1 = getelementptr &([32768 * i32]* @program)[i32 0][i32 0];
    i32** %input = alloc i32*;
    i32* %cur_char = alloc i32;
    i32* %loop = alloc i32;
    i32* %i = alloc i32;
    i32 %2 = load i32* %1;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3, [ ^while.body1 i32* %loop, i32* %cur_char, i32** %input, i32* %i, i32 0, i32* %1, i32 0 ], [ ^b1 i32** %input, i32* %cur_char, i32* %loop, i32* %i ];
^while.body1(i32* %arg, i32* %arg1, i32** %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6):
    i32* %0 = getelementptr &(i32* %arg5)[i32 %arg6];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 62;
    cbr i1 %2, [ ^if.then i32* %arg1, i32* %arg, i32* %arg3, i32** %arg2, i32 %arg4, i32* %arg5, i32 %arg6 ], [ ^indirect i32** %arg2, i32* %arg, i32* %arg3, i32* %arg1, i32 %1, i32 %arg4, i32* %arg5, i32 %1, i32 %arg6 ];
^b1(i32** %arg, i32* %arg1, i32* %arg2, i32* %arg3):
    free i32* %arg3;
    free i32* %arg2;
    free i32* %arg1;
    free i32** %arg;
    ret i32 0;
^if.then(i32* %arg, i32* %arg1, i32* %arg2, i32** %arg3, i32 %arg4, i32* %arg5, i32 %arg6):
    i32 %0 = add i32 %arg4, i32 1;
    i32 %1 = add i32 %arg6, i32 1;
    i32* %2 = getelementptr &(i32* %arg5)[i32 %1];
    i32 %3 = load i32* %2;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4, [ ^while.body1 i32* %arg1, i32* %arg, i32** %arg3, i32* %arg2, i32 %0, i32* %arg5, i32 %1 ], [ ^b1 i32** %arg3, i32* %arg, i32* %arg1, i32* %arg2 ];
^indirect(i32** %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32* %arg6, i32 %arg7, i32 %arg8):
    i1 %0 = scmp eq i32 %arg4, i32 60;
    cbr i1 %0, [ ^if.then1 i32* %arg1, i32* %arg3, i32** %arg, i32* %arg2, i32 %arg5, i32* %arg6, i32 %arg8 ], [ ^if.else i32* %arg1, i32* %arg2, i32** %arg, i32* %arg3, i32 %arg5, i32* %arg6, i32 %arg7, i32 %arg8 ];
^if.then1(i32* %arg, i32* %arg1, i32** %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6):
    i32 %0 = sub i32 %arg4, i32 1;
    ubr [ ^b2 i32* %arg, i32* %arg1, i32** %arg2, i32* %arg3, i32 %0, i32* %arg5, i32 %arg6 ];
^if.else(i32* %arg, i32* %arg1, i32** %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7):
    i1 %0 = scmp eq i32 %arg6, i32 43;
    cbr i1 %0, [ ^if.then2 i32* %arg3, i32* %arg, i32** %arg2, i32* %arg1, i32 %arg4, i32* %arg5, i32 %arg7 ], [ ^indirect1 i32** %arg2, i32* %arg1, i32* %arg, i32* %arg3, i32 %arg6, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7 ];
^if.then2(i32* %arg, i32* %arg1, i32** %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6):
    i32* %0 = getelementptr &([65536 * i32]* @tape)[i32 0][i32 %arg4];
    i32 %1 = load i32* %0;
    i32 %2 = add i32 %1, i32 1;
    store i32* %0 with i32 %2;
    ubr [ ^b2 i32* %arg1, i32* %arg, i32** %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6 ];
^b2(i32* %arg, i32* %arg1, i32** %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6):
    i32 %0 = add i32 %arg6, i32 1;
    i32* %1 = getelementptr &(i32* %arg5)[i32 %0];
    i32 %2 = load i32* %1;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3, [ ^while.body1 i32* %arg, i32* %arg1, i32** %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %0 ], [ ^b1 i32** %arg2, i32* %arg1, i32* %arg, i32* %arg3 ];
^indirect1(i32** %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32* %arg6, i32 %arg7, i32 %arg8):
    i1 %0 = scmp eq i32 %arg4, i32 45;
    cbr i1 %0, [ ^if.then3 i32* %arg2, i32* %arg3, i32** %arg, i32* %arg1, i32 %arg5, i32* %arg6, i32 %arg8 ], [ ^if.else1 i32* %arg2, i32* %arg1, i32** %arg, i32* %arg3, i32 %arg5, i32* %arg6, i32 %arg7, i32 %arg8 ];
^if.then3(i32* %arg, i32* %arg1, i32** %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6):
    i32* %0 = getelementptr &([65536 * i32]* @tape)[i32 0][i32 %arg4];
    i32 %1 = load i32* %0;
    i32 %2 = sub i32 %1, i32 1;
    store i32* %0 with i32 %2;
    ubr [ ^b2 i32* %arg, i32* %arg1, i32** %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6 ];
^if.else1(i32* %arg, i32* %arg1, i32** %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7):
    i1 %0 = scmp eq i32 %arg6, i32 46;
    cbr i1 %0, [ ^if.then4 i32* %arg3, i32* %arg, i32** %arg2, i32* %arg1, i32 %arg4, i32* %arg5, i32 %arg7 ], [ ^indirect2 i32** %arg2, i32* %arg1, i32* %arg, i32* %arg3, i32 %arg6, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7 ];
^if.then4(i32* %arg, i32* %arg1, i32** %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6):
    i32* %0 = getelementptr &([65536 * i32]* @tape)[i32 0][i32 %arg4];
    i32 %1 = load i32* %0;
    call (i32) -> void @putch(i32 %1);
    ubr [ ^b2 i32* %arg1, i32* %arg, i32** %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6 ];
^indirect2(i32** %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32* %arg6, i32 %arg7, i32 %arg8):
    i1 %0 = scmp eq i32 %arg4, i32 44;
    cbr i1 %0, [ ^if.then5 i32* %arg2, i32* %arg3, i32** %arg, i32* %arg1, i32 %arg5, i32* %arg6, i32 %arg8 ], [ ^if.else2 i32* %arg2, i32* %arg1, i32** %arg, i32* %arg3, i32 %arg5, i32* %arg6, i32 %arg7, i32 %arg8 ];
^if.then5(i32* %arg, i32* %arg1, i32** %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6):
    i32* %0 = getelementptr &([65536 * i32]* @tape)[i32 0][i32 %arg4];
    i32 %1 = call () -> i32 @getch();
    store i32* %0 with i32 %1;
    ubr [ ^b2 i32* %arg, i32* %arg1, i32** %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6 ];
^if.else2(i32* %arg, i32* %arg1, i32** %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7):
    i1 %0 = scmp eq i32 %arg6, i32 93;
    cbr i1 %0, [ ^b3 i32* %arg3, i32** %arg2, i32* %arg1, i32* %arg, i32 %arg4, i32* %arg5, i32 %arg7 ], [ ^b2 i32* %arg, i32* %arg3, i32** %arg2, i32* %arg1, i32 %arg4, i32* %arg5, i32 %arg7 ];
^b3(i32* %arg, i32** %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6):
    i32* %0 = getelementptr &([65536 * i32]* @tape)[i32 0][i32 %arg4];
    i32 %1 = load i32* %0;
    i1 %2 = scmp neq i32 %1, i32 0;
    cbr i1 %2, [ ^while.body2 i32* %arg3, i32* %arg, i32** %arg1, i32* %arg2, i32 %arg4, i32* %arg5, i32 1, i32 %arg6 ], [ ^b2 i32* %arg3, i32* %arg, i32** %arg1, i32* %arg2, i32 %arg4, i32* %arg5, i32 %arg6 ];
^while.body2(i32* %arg, i32* %arg1, i32** %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7):
    i32 %0 = sub i32 %arg7, i32 1;
    i32* %1 = getelementptr &(i32* %arg5)[i32 %0];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %2, i32 91;
    cbr i1 %3, [ ^if.then6 i32* %arg3, i32** %arg2, i32* %arg1, i32* %arg, i32 %arg4, i32* %arg5, i32 %arg6, i32 %0 ], [ ^indirect3 i32* %arg3, i32** %arg2, i32* %arg, i32* %arg1, i32 %2, i32 %arg4, i32* %arg5, i32 %arg6, i32 %0 ];
^if.then6(i32* %arg, i32** %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7):
    i32 %0 = sub i32 %arg6, i32 1;
    i1 %1 = scmp gt i32 %0, i32 0;
    cbr i1 %1, [ ^while.body2 i32* %arg3, i32* %arg2, i32** %arg1, i32* %arg, i32 %arg4, i32* %arg5, i32 %0, i32 %arg7 ], [ ^b2 i32* %arg3, i32* %arg2, i32** %arg1, i32* %arg, i32 %arg4, i32* %arg5, i32 %arg7 ];
^indirect3(i32* %arg, i32** %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32* %arg6, i32 %arg7, i32 %arg8):
    i1 %0 = scmp eq i32 %arg4, i32 93;
    cbr i1 %0, [ ^if.then7 i32* %arg3, i32** %arg1, i32* %arg, i32* %arg2, i32 %arg5, i32* %arg6, i32 %arg7, i32 %arg8 ], [ ^indirect4 i32* %arg, i32** %arg1, i32* %arg3, i32* %arg2, i32 %arg5, i32* %arg6, i32 %arg7, i32 %arg8 ];
^if.then7(i32* %arg, i32** %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7):
    i32 %0 = add i32 %arg6, i32 1;
    i1 %1 = scmp gt i32 %0, i32 0;
    cbr i1 %1, [ ^while.body2 i32* %arg3, i32* %arg, i32** %arg1, i32* %arg2, i32 %arg4, i32* %arg5, i32 %0, i32 %arg7 ], [ ^b2 i32* %arg3, i32* %arg, i32** %arg1, i32* %arg2, i32 %arg4, i32* %arg5, i32 %arg7 ];
^indirect4(i32* %arg, i32** %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7):
    i1 %0 = scmp gt i32 %arg6, i32 0;
    cbr i1 %0, [ ^while.body2 i32* %arg3, i32* %arg2, i32** %arg1, i32* %arg, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7 ], [ ^b2 i32* %arg3, i32* %arg2, i32** %arg1, i32* %arg, i32 %arg4, i32* %arg5, i32 %arg7 ];
}
