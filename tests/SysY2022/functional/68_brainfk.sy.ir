internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [65536 * i32]* @tape;
internal [32768 * i32]* @program;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    ubr ^while.header;
^while.header:
    i32 %1 = phi [^while.body, i32 %5] [^entry, i32 0];
    i1 %2 = scmp lt i32 %1, i32 %0;
    cbr i1 %2(prob = 0.97), ^while.body, ^b;
^while.body:
    i32* %3 = getelementptr &([32768 * i32]* @program)[i64 0][i32 %1];
    i32 %4 = call () -> i32 @getch();
    store i32* %3 with i32 %4;
    i32 %5 = add i32 %1, i32 1;
    ubr ^while.header;
^b:
    i32* %6 = getelementptr &([32768 * i32]* @program)[i64 0][i32 %1];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([32768 * i32]* @program)[i64 0][i64 0];
    ubr ^while.header1;
^while.header1:
    i32 %8 = phi [^b1, i32 %16] [^b, i32 0];
    i32 %9 = phi [^b1, i32 %18] [^b, i32 0];
    i32* %10 = getelementptr &(i32* %7)[i32 %9];
    i32 %11 = load i32* %10;
    i1 %12 = scmp neq i32 %11, i32 0;
    cbr i1 %12(prob = 0.97), ^while.body1, ^entry1;
^while.body1:
    i1 %13 = scmp eq i32 %11, i32 62;
    cbr i1 %13(prob = 0.5), ^if.then, ^if.else;
^entry1:
    ret i32 0;
^if.then:
    i32 %14 = add i32 %8, i32 1;
    ubr ^b1;
^if.else:
    i1 %15 = scmp eq i32 %11, i32 60;
    cbr i1 %15(prob = 0.5), ^if.then1, ^if.else1;
^b1:
    i32 %16 = phi [^while.header2, i32 %8] [^if.then5, i32 %8] [^if.then4, i32 %8] [^if.then3, i32 %8] [^b3, i32 %8] [^if.then2, i32 %8] [^if.then1, i32 %19] [^if.then, i32 %14];
    i32 %17 = phi [^while.header2, i32 %39] [^if.then5, i32 %9] [^if.then4, i32 %9] [^if.then3, i32 %9] [^b3, i32 %9] [^if.then2, i32 %9] [^if.then1, i32 %9] [^if.then, i32 %9];
    i32 %18 = add i32 %17, i32 1;
    ubr ^while.header1;
^if.then1:
    i32 %19 = add i32 %8, i32 -1;
    ubr ^b1;
^if.else1:
    i1 %20 = scmp eq i32 %11, i32 43;
    cbr i1 %20(prob = 0.5), ^if.then2, ^if.else2;
^if.then2:
    i32* %21 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %8];
    i32 %22 = load i32* %21;
    i32 %23 = add i32 %22, i32 1;
    store i32* %21 with i32 %23;
    ubr ^b1;
^if.else2:
    i1 %24 = scmp eq i32 %11, i32 45;
    cbr i1 %24(prob = 0.5), ^if.then3, ^if.else3;
^if.then3:
    i32* %25 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %8];
    i32 %26 = load i32* %25;
    i32 %27 = add i32 %26, i32 -1;
    store i32* %25 with i32 %27;
    ubr ^b1;
^if.else3:
    i1 %28 = scmp eq i32 %11, i32 46;
    cbr i1 %28(prob = 0.5), ^if.then4, ^if.else4;
^if.then4:
    i32* %29 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %8];
    i32 %30 = load i32* %29;
    call (i32) -> void @putch(i32 %30);
    ubr ^b1;
^if.else4:
    i1 %31 = scmp eq i32 %11, i32 44;
    cbr i1 %31(prob = 0.5), ^if.then5, ^if.else5;
^if.then5:
    i32* %32 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %8];
    i32 %33 = call () -> i32 @getch();
    store i32* %32 with i32 %33;
    ubr ^b1;
^if.else5:
    i1 %34 = scmp eq i32 %11, i32 93;
    cbr i1 %34(prob = 0.5), ^b2, ^b3;
^b2:
    i32* %35 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %8];
    i32 %36 = load i32* %35;
    i1 %37 = scmp neq i32 %36, i32 0;
    ubr ^b3;
^b3:
    i1 %38 = phi [^b2, i1 %37] [^if.else5, i1 false];
    cbr i1 %38(prob = 0.5), ^while.header2, ^b1;
^while.header2:
    i32 %39 = phi [^b3, i32 %9] [^if.else6, i32 %42] [^if.then7, i32 %42] [^if.then6, i32 %42];
    i32 %40 = phi [^b3, i32 1] [^if.else6, i32 %40] [^if.then7, i32 %48] [^if.then6, i32 %46];
    i1 %41 = scmp gt i32 %40, i32 0;
    cbr i1 %41(prob = 0.97), ^while.body2, ^b1;
^while.body2:
    i32 %42 = add i32 %39, i32 -1;
    i32* %43 = getelementptr &(i32* %7)[i32 %42];
    i32 %44 = load i32* %43;
    i1 %45 = scmp eq i32 %44, i32 91;
    cbr i1 %45(prob = 0.5), ^if.then6, ^if.else6;
^if.then6:
    i32 %46 = add i32 %40, i32 -1;
    ubr ^while.header2;
^if.else6:
    i1 %47 = scmp eq i32 %44, i32 93;
    cbr i1 %47(prob = 0.5), ^if.then7, ^while.header2;
^if.then7:
    i32 %48 = add i32 %40, i32 1;
    ubr ^while.header2;
}
