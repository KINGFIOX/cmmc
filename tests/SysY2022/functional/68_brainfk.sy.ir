internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [65536 * i32]* @tape;
internal [32768 * i32]* @program;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    ubr ^while.header;
^while.header:
    i32 %1 = phi [^while.body, i32 %1] [^entry, i32 0];
    i32 %2 = phi [^while.body, i32 %2] [^entry, i32 %0];
    i32 %3 = phi [^while.body, i32 %9] [^entry, i32 0];
    i32 %4 = phi [^entry, i32 %0] [^while.body, i32 %2];
    i32 %5 = phi [^entry, i32 0] [^while.body, i32 %9];
    i1 %6 = scmp lt i32 %5, i32 %4;
    cbr i1 %6(prob = 0.97), ^while.body, ^b;
^while.body:
    i32* %7 = getelementptr &([32768 * i32]* @program)[i64 0][i32 %3];
    i32 %8 = call () -> i32 @getch();
    store i32* %7 with i32 %8;
    i32 %9 = add i32 %3, i32 1;
    ubr ^while.header;
^b:
    i32* %10 = getelementptr &([32768 * i32]* @program)[i64 0][i32 %3];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([32768 * i32]* @program)[i64 0][i64 0];
    ubr ^while.header1;
^while.header1:
    i32 %12 = phi [^b1, i32 %25] [^b, i32 %1];
    i32 %13 = phi [^b1, i32 %28] [^b, i32 0];
    i32* %14 = phi [^b1, i32* %27] [^b, i32* %11];
    i32* %15 = phi [^b, i32* %11] [^b1, i32* %27];
    i32 %16 = phi [^b, i32 0] [^b1, i32 %28];
    i32* %17 = getelementptr &(i32* %15)[i32 %16];
    i32 %18 = load i32* %17;
    i1 %19 = scmp neq i32 %18, i32 0;
    cbr i1 %19(prob = 0.97), ^while.body1, ^entry1;
^while.body1:
    i32* %20 = getelementptr &(i32* %14)[i32 %13];
    i32 %21 = load i32* %20;
    i1 %22 = scmp eq i32 %21, i32 62;
    cbr i1 %22(prob = 0.5), ^if.then, ^if.else;
^entry1:
    ret i32 0;
^if.then:
    i32 %23 = add i32 %12, i32 1;
    ubr ^b1;
^if.else:
    i1 %24 = scmp eq i32 %21, i32 60;
    cbr i1 %24(prob = 0.5), ^if.then1, ^if.else1;
^b1:
    i32 %25 = phi [^while.header2, i32 %49] [^if.then5, i32 %12] [^if.then4, i32 %12] [^if.then3, i32 %12] [^b3, i32 %12] [^if.then2, i32 %12] [^if.then1, i32 %29] [^if.then, i32 %23];
    i32 %26 = phi [^while.header2, i32 %50] [^if.then5, i32 %13] [^if.then4, i32 %13] [^if.then3, i32 %13] [^b3, i32 %13] [^if.then2, i32 %13] [^if.then1, i32 %13] [^if.then, i32 %13];
    i32* %27 = phi [^while.header2, i32* %52] [^if.then5, i32* %14] [^if.then4, i32* %14] [^if.then3, i32* %14] [^b3, i32* %14] [^if.then2, i32* %14] [^if.then1, i32* %14] [^if.then, i32* %14];
    i32 %28 = add i32 %26, i32 1;
    ubr ^while.header1;
^if.then1:
    i32 %29 = add i32 %12, i32 -1;
    ubr ^b1;
^if.else1:
    i1 %30 = scmp eq i32 %21, i32 43;
    cbr i1 %30(prob = 0.5), ^if.then2, ^if.else2;
^if.then2:
    i32* %31 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %12];
    i32 %32 = load i32* %31;
    i32 %33 = add i32 %32, i32 1;
    store i32* %31 with i32 %33;
    ubr ^b1;
^if.else2:
    i1 %34 = scmp eq i32 %21, i32 45;
    cbr i1 %34(prob = 0.5), ^if.then3, ^if.else3;
^if.then3:
    i32* %35 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %12];
    i32 %36 = load i32* %35;
    i32 %37 = add i32 %36, i32 -1;
    store i32* %35 with i32 %37;
    ubr ^b1;
^if.else3:
    i1 %38 = scmp eq i32 %21, i32 46;
    cbr i1 %38(prob = 0.5), ^if.then4, ^if.else4;
^if.then4:
    i32* %39 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %12];
    i32 %40 = load i32* %39;
    call (i32) -> void @putch(i32 %40);
    ubr ^b1;
^if.else4:
    i1 %41 = scmp eq i32 %21, i32 44;
    cbr i1 %41(prob = 0.5), ^if.then5, ^if.else5;
^if.then5:
    i32* %42 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %12];
    i32 %43 = call () -> i32 @getch();
    store i32* %42 with i32 %43;
    ubr ^b1;
^if.else5:
    i1 %44 = scmp eq i32 %21, i32 93;
    cbr i1 %44(prob = 0.5), ^b2, ^b3;
^b2:
    i32* %45 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %12];
    i32 %46 = load i32* %45;
    i1 %47 = scmp neq i32 %46, i32 0;
    ubr ^b3;
^b3:
    i1 %48 = phi [^if.else5, i1 false] [^b2, i1 %47];
    cbr i1 %48(prob = 0.5), ^while.header2, ^b1;
^while.header2:
    i32 %49 = phi [^b3, i32 %12] [^if.else6, i32 %49] [^if.then7, i32 %49] [^if.then6, i32 %49];
    i32 %50 = phi [^b3, i32 %13] [^if.else6, i32 %55] [^if.then7, i32 %55] [^if.then6, i32 %55];
    i32 %51 = phi [^b3, i32 1] [^if.else6, i32 %51] [^if.then7, i32 %61] [^if.then6, i32 %59];
    i32* %52 = phi [^b3, i32* %14] [^if.else6, i32* %52] [^if.then7, i32* %52] [^if.then6, i32* %52];
    i32 %53 = phi [^b3, i32 1] [^if.else6, i32 %51] [^if.then7, i32 %61] [^if.then6, i32 %59];
    i1 %54 = scmp gt i32 %53, i32 0;
    cbr i1 %54(prob = 0.97), ^while.body2, ^b1;
^while.body2:
    i32 %55 = add i32 %50, i32 -1;
    i32* %56 = getelementptr &(i32* %52)[i32 %55];
    i32 %57 = load i32* %56;
    i1 %58 = scmp eq i32 %57, i32 91;
    cbr i1 %58(prob = 0.5), ^if.then6, ^if.else6;
^if.then6:
    i32 %59 = add i32 %51, i32 -1;
    ubr ^while.header2;
^if.else6:
    i1 %60 = scmp eq i32 %57, i32 93;
    cbr i1 %60(prob = 0.5), ^if.then7, ^while.header2;
^if.then7:
    i32 %61 = add i32 %51, i32 1;
    ubr ^while.header2;
}
