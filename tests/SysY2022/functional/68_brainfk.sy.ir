internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [65536 * i32]* @tape;
internal [32768 * i32]* @program;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    ubr ^while.header;
^while.header:
    i32 %1 = phi [^while.body, i32 %1] [^entry, i32 0];
    i32 %2 = phi [^while.body, i32 %2] [^entry, i32 %0];
    i32 %3 = phi [^while.body, i32 %7] [^entry, i32 0];
    i1 %4 = scmp lt i32 %3, i32 %2;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    i32* %5 = getelementptr &([32768 * i32]* @program)[i64 0][i32 %3];
    i32 %6 = call () -> i32 @getch();
    store i32* %5 with i32 %6;
    i32 %7 = add i32 %3, i32 1;
    ubr ^while.header;
^b:
    i32* %8 = getelementptr &([32768 * i32]* @program)[i64 0][i32 %3];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([32768 * i32]* @program)[i64 0][i64 0];
    ubr ^while.header1;
^while.header1:
    i32 %10 = phi [^b1, i32 %19] [^b, i32 %1];
    i32 %11 = phi [^b1, i32 %22] [^b, i32 0];
    i32* %12 = phi [^b1, i32* %21] [^b, i32* %9];
    i32* %13 = getelementptr &(i32* %12)[i32 %11];
    i32 %14 = load i32* %13;
    i1 %15 = scmp neq i32 %14, i32 0;
    cbr i1 %15(prob = 0.97), ^while.body1, ^entry1;
^while.body1:
    i1 %16 = scmp eq i32 %14, i32 62;
    cbr i1 %16(prob = 0.5), ^if.then, ^if.else;
^entry1:
    ret i32 0;
^if.then:
    i32 %17 = add i32 %10, i32 1;
    ubr ^b1;
^if.else:
    i1 %18 = scmp eq i32 %14, i32 60;
    cbr i1 %18(prob = 0.5), ^if.then1, ^if.else1;
^b1:
    i32 %19 = phi [^while.header2, i32 %43] [^if.then5, i32 %10] [^if.then4, i32 %10] [^b3, i32 %10] [^if.then2, i32 %10] [^if.then3, i32 %10] [^if.then1, i32 %23] [^if.then, i32 %17];
    i32 %20 = phi [^while.header2, i32 %44] [^if.then5, i32 %11] [^if.then4, i32 %11] [^b3, i32 %11] [^if.then2, i32 %11] [^if.then3, i32 %11] [^if.then1, i32 %11] [^if.then, i32 %11];
    i32* %21 = phi [^while.header2, i32* %46] [^if.then5, i32* %12] [^if.then4, i32* %12] [^b3, i32* %12] [^if.then2, i32* %12] [^if.then3, i32* %12] [^if.then1, i32* %12] [^if.then, i32* %12];
    i32 %22 = add i32 %20, i32 1;
    ubr ^while.header1;
^if.then1:
    i32 %23 = add i32 %10, i32 -1;
    ubr ^b1;
^if.else1:
    i1 %24 = scmp eq i32 %14, i32 43;
    cbr i1 %24(prob = 0.5), ^if.then2, ^if.else2;
^if.then2:
    i32* %25 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %10];
    i32 %26 = load i32* %25;
    i32 %27 = add i32 %26, i32 1;
    store i32* %25 with i32 %27;
    ubr ^b1;
^if.else2:
    i1 %28 = scmp eq i32 %14, i32 45;
    cbr i1 %28(prob = 0.5), ^if.then3, ^if.else3;
^if.then3:
    i32* %29 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %10];
    i32 %30 = load i32* %29;
    i32 %31 = add i32 %30, i32 -1;
    store i32* %29 with i32 %31;
    ubr ^b1;
^if.else3:
    i1 %32 = scmp eq i32 %14, i32 46;
    cbr i1 %32(prob = 0.5), ^if.then4, ^if.else4;
^if.then4:
    i32* %33 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %10];
    i32 %34 = load i32* %33;
    call (i32) -> void @putch(i32 %34);
    ubr ^b1;
^if.else4:
    i1 %35 = scmp eq i32 %14, i32 44;
    cbr i1 %35(prob = 0.5), ^if.then5, ^if.else5;
^if.then5:
    i32* %36 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %10];
    i32 %37 = call () -> i32 @getch();
    store i32* %36 with i32 %37;
    ubr ^b1;
^if.else5:
    i1 %38 = scmp eq i32 %14, i32 93;
    cbr i1 %38(prob = 0.5), ^b2, ^b3;
^b2:
    i32* %39 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %10];
    i32 %40 = load i32* %39;
    i1 %41 = scmp neq i32 %40, i32 0;
    ubr ^b3;
^b3:
    i1 %42 = phi [^b2, i1 %41] [^if.else5, i1 false];
    cbr i1 %42(prob = 0.5), ^while.header2, ^b1;
^while.header2:
    i32 %43 = phi [^b3, i32 %10] [^if.else6, i32 %43] [^if.then7, i32 %43] [^if.then6, i32 %43];
    i32 %44 = phi [^b3, i32 %11] [^if.else6, i32 %48] [^if.then7, i32 %48] [^if.then6, i32 %48];
    i32 %45 = phi [^b3, i32 1] [^if.else6, i32 %45] [^if.then7, i32 %54] [^if.then6, i32 %52];
    i32* %46 = phi [^b3, i32* %12] [^if.else6, i32* %46] [^if.then7, i32* %46] [^if.then6, i32* %46];
    i1 %47 = scmp gt i32 %45, i32 0;
    cbr i1 %47(prob = 0.97), ^while.body2, ^b1;
^while.body2:
    i32 %48 = add i32 %44, i32 -1;
    i32* %49 = getelementptr &(i32* %46)[i32 %48];
    i32 %50 = load i32* %49;
    i1 %51 = scmp eq i32 %50, i32 91;
    cbr i1 %51(prob = 0.5), ^if.then6, ^if.else6;
^if.then6:
    i32 %52 = add i32 %45, i32 -1;
    ubr ^while.header2;
^if.else6:
    i1 %53 = scmp eq i32 %50, i32 93;
    cbr i1 %53(prob = 0.5), ^if.then7, ^while.header2;
^if.then7:
    i32 %54 = add i32 %45, i32 1;
    ubr ^while.header2;
}
