internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [65536 * i32]* @tape;
internal [32768 * i32]* @program;
func @main() -> i32 { NoRecurse Entry } {
^entry():
    i32 %0 = call () -> i32 @getint();
    i1 %1 = scmp lt i32 0, i32 %0;
    cbr i1 %1, [ ^while.body i32 0, i32 %0 ], [ ^b i32 0 ];
^while.body(i32 %arg, i32 %arg1):
    i32* %0 = getelementptr &([32768 * i32]* @program)[i32 0][i32 %arg];
    i32 %1 = call () -> i32 @getch();
    store i32* %0 with i32 %1;
    i32 %2 = add i32 %arg, i32 1;
    i1 %3 = scmp lt i32 %2, i32 %arg1;
    cbr i1 %3, [ ^while.body i32 %2, i32 %arg1 ], [ ^b i32 %2 ];
^b(i32 %arg):
    i32* %0 = getelementptr &([32768 * i32]* @program)[i32 0][i32 %arg];
    store i32* %0 with i32 0;
    i32* %1 = getelementptr &([32768 * i32]* @program)[i32 0][i32 0];
    i32 %2 = load i32* %1;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3, [ ^while.body1 i32 0, i32 0 ], [ ^entry1 ];
^while.body1(i32 %arg, i32 %arg1):
    i32* %0 = getelementptr &([32768 * i32]* @program)[i32 0][i32 %arg1];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 62;
    cbr i1 %2, [ ^if.then i32 %arg, i32 %arg1 ], [ ^indirect i32 %1, i32 %arg, i32 %1, i32 %arg1 ];
^entry1():
    ret i32 0;
^if.then(i32 %arg, i32 %arg1):
    i32 %0 = add i32 %arg, i32 1;
    i32 %1 = add i32 %arg1, i32 1;
    i32* %2 = getelementptr &([32768 * i32]* @program)[i32 0][i32 %1];
    i32 %3 = load i32* %2;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4, [ ^while.body1 i32 %0, i32 %1 ], [ ^entry1 ];
^indirect(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i1 %0 = scmp eq i32 %arg, i32 60;
    cbr i1 %0, [ ^if.then1 i32 %arg1, i32 %arg3 ], [ ^if.else i32 %arg1, i32 %arg2, i32 %arg3 ];
^if.then1(i32 %arg, i32 %arg1):
    i32 %0 = sub i32 %arg, i32 1;
    ubr [ ^b1 i32 %0, i32 %arg1 ];
^if.else(i32 %arg, i32 %arg1, i32 %arg2):
    i1 %0 = scmp eq i32 %arg1, i32 43;
    cbr i1 %0, [ ^if.then2 i32 %arg, i32 %arg2 ], [ ^indirect1 i32 %arg1, i32 %arg, i32 %arg1, i32 %arg2 ];
^if.then2(i32 %arg, i32 %arg1):
    i32* %0 = getelementptr &([65536 * i32]* @tape)[i32 0][i32 %arg];
    i32 %1 = load i32* %0;
    i32 %2 = add i32 %1, i32 1;
    store i32* %0 with i32 %2;
    ubr [ ^b1 i32 %arg, i32 %arg1 ];
^b1(i32 %arg, i32 %arg1):
    i32 %0 = add i32 %arg1, i32 1;
    i32* %1 = getelementptr &([32768 * i32]* @program)[i32 0][i32 %0];
    i32 %2 = load i32* %1;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3, [ ^while.body1 i32 %arg, i32 %0 ], [ ^entry1 ];
^indirect1(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i1 %0 = scmp eq i32 %arg, i32 45;
    cbr i1 %0, [ ^if.then3 i32 %arg1, i32 %arg3 ], [ ^if.else1 i32 %arg1, i32 %arg2, i32 %arg3 ];
^if.then3(i32 %arg, i32 %arg1):
    i32* %0 = getelementptr &([65536 * i32]* @tape)[i32 0][i32 %arg];
    i32 %1 = load i32* %0;
    i32 %2 = sub i32 %1, i32 1;
    store i32* %0 with i32 %2;
    ubr [ ^b1 i32 %arg, i32 %arg1 ];
^if.else1(i32 %arg, i32 %arg1, i32 %arg2):
    i1 %0 = scmp eq i32 %arg1, i32 46;
    cbr i1 %0, [ ^if.then4 i32 %arg, i32 %arg2 ], [ ^indirect2 i32 %arg1, i32 %arg, i32 %arg1, i32 %arg2 ];
^if.then4(i32 %arg, i32 %arg1):
    i32* %0 = getelementptr &([65536 * i32]* @tape)[i32 0][i32 %arg];
    i32 %1 = load i32* %0;
    call (i32) -> void @putch(i32 %1);
    ubr [ ^b1 i32 %arg, i32 %arg1 ];
^indirect2(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i1 %0 = scmp eq i32 %arg, i32 44;
    cbr i1 %0, [ ^if.then5 i32 %arg1, i32 %arg3 ], [ ^if.else2 i32 %arg1, i32 %arg2, i32 %arg3 ];
^if.then5(i32 %arg, i32 %arg1):
    i32* %0 = getelementptr &([65536 * i32]* @tape)[i32 0][i32 %arg];
    i32 %1 = call () -> i32 @getch();
    store i32* %0 with i32 %1;
    ubr [ ^b1 i32 %arg, i32 %arg1 ];
^if.else2(i32 %arg, i32 %arg1, i32 %arg2):
    i1 %0 = scmp eq i32 %arg1, i32 93;
    cbr i1 %0, [ ^b2 i32 %arg, i32 %arg2 ], [ ^b1 i32 %arg, i32 %arg2 ];
^b2(i32 %arg, i32 %arg1):
    i32* %0 = getelementptr &([65536 * i32]* @tape)[i32 0][i32 %arg];
    i32 %1 = load i32* %0;
    i1 %2 = scmp neq i32 %1, i32 0;
    cbr i1 %2, [ ^while.body2 i32 %arg, i32 1, i32 %arg1 ], [ ^b1 i32 %arg, i32 %arg1 ];
^while.body2(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = sub i32 %arg2, i32 1;
    i32* %1 = getelementptr &([32768 * i32]* @program)[i32 0][i32 %0];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %2, i32 91;
    cbr i1 %3, [ ^if.then6 i32 %arg, i32 %arg1, i32 %0 ], [ ^indirect3 i32 %2, i32 %arg, i32 %arg1, i32 %0 ];
^if.then6(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = sub i32 %arg1, i32 1;
    i1 %1 = scmp gt i32 %0, i32 0;
    cbr i1 %1, [ ^while.body2 i32 %arg, i32 %0, i32 %arg2 ], [ ^b1 i32 %arg, i32 %arg2 ];
^indirect3(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i1 %0 = scmp eq i32 %arg, i32 93;
    cbr i1 %0, [ ^if.then7 i32 %arg1, i32 %arg2, i32 %arg3 ], [ ^indirect4 i32 %arg1, i32 %arg2, i32 %arg3 ];
^if.then7(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = add i32 %arg1, i32 1;
    i1 %1 = scmp gt i32 %0, i32 0;
    cbr i1 %1, [ ^while.body2 i32 %arg, i32 %0, i32 %arg2 ], [ ^b1 i32 %arg, i32 %arg2 ];
^indirect4(i32 %arg, i32 %arg1, i32 %arg2):
    i1 %0 = scmp gt i32 %arg1, i32 0;
    cbr i1 %0, [ ^while.body2 i32 %arg, i32 %arg1, i32 %arg2 ], [ ^b1 i32 %arg, i32 %arg2 ];
}
