internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [65536 * i32]* @tape;
internal [32768 * i32]* @program;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    cbr i1 %1(prob = 0.97), ^prebody, ^b;
  ^prebody:
    [32768 * i32]* %2 = ptrcast [32768 * i32]* @program to [32768 * i32]*;
    ubr ^while.body;
  ^b:
    i32 %3 = phi [^entry, i32 0] [^while.body, i32 %11];
    [32768 * i32]* %4 = ptrcast [32768 * i32]* @program to [32768 * i32]*;
    i32* %5 = getelementptr &([32768 * i32]* %4)[i64 0][i32 %3];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([32768 * i32]* %4)[i64 0][i64 0];
    [65536 * i32]* %7 = ptrcast [65536 * i32]* @tape to [65536 * i32]*;
    ubr ^while.header;
  ^while.body:
    i32 %8 = phi [^prebody, i32 0] [^while.body, i32 %11];
    i32 %9 = call () -> i32 @getch();
    i32* %10 = getelementptr &([32768 * i32]* %2)[i64 0][i32 %8];
    store i32* %10 with i32 %9;
    i32 %11 = add i32 %8, i32 1;
    i1 %12 = icmp sgt i32 %0, i32 %11;
    cbr i1 %12(prob = 0.97), ^while.body, ^b;
  ^while.header:
    i32 %13 = phi [^b, i32 0] [^b1, i32 %21];
    i32 %14 = phi [^b, i32 0] [^b1, i32 %23];
    i32* %15 = getelementptr &(i32* %6)[i32 %14];
    i32 %16 = load i32* %15;
    i1 %17 = icmp neq i32 %16, i32 0;
    cbr i1 %17(prob = 0.97), ^while.body1, ^entry1;
  ^while.body1:
    i1 %18 = icmp eq i32 %16, i32 62;
    cbr i1 %18(prob = 0.5), ^if.then, ^if.else;
  ^entry1:
    ret i32 0;
  ^if.then:
    i32 %19 = add i32 %13, i32 1;
    ubr ^b1;
  ^if.else:
    i1 %20 = icmp eq i32 %16, i32 60;
    cbr i1 %20(prob = 0.5), ^if.then1, ^if.else1;
  ^b1:
    i32 %21 = phi [^if.then, i32 %19] [^if.then1, i32 %24] [^if.then2, i32 %13] [^if.then3, i32 %13] [^if.then4, i32 %13] [^if.then5, i32 %13] [^if.else5, i32 %13] [^b2, i32 %13] [^while.header1, i32 %13];
    i32 %22 = phi [^if.then, i32 %14] [^if.then1, i32 %14] [^if.then2, i32 %14] [^if.then3, i32 %14] [^if.then4, i32 %14] [^if.then5, i32 %14] [^if.else5, i32 %14] [^b2, i32 %14] [^while.header1, i32 %43];
    i32 %23 = add i32 %22, i32 1;
    ubr ^while.header;
  ^if.then1:
    i32 %24 = add i32 %13, i32 -1;
    ubr ^b1;
  ^if.else1:
    i1 %25 = icmp eq i32 %16, i32 43;
    cbr i1 %25(prob = 0.5), ^if.then2, ^if.else2;
  ^if.then2:
    i32* %26 = getelementptr &([65536 * i32]* %7)[i64 0][i32 %13];
    i32 %27 = load i32* %26;
    i32 %28 = add i32 %27, i32 1;
    store i32* %26 with i32 %28;
    ubr ^b1;
  ^if.else2:
    i1 %29 = icmp eq i32 %16, i32 45;
    cbr i1 %29(prob = 0.5), ^if.then3, ^if.else3;
  ^if.then3:
    i32* %30 = getelementptr &([65536 * i32]* %7)[i64 0][i32 %13];
    i32 %31 = load i32* %30;
    i32 %32 = add i32 %31, i32 -1;
    store i32* %30 with i32 %32;
    ubr ^b1;
  ^if.else3:
    i1 %33 = icmp eq i32 %16, i32 46;
    cbr i1 %33(prob = 0.5), ^if.then4, ^if.else4;
  ^if.then4:
    i32* %34 = getelementptr &([65536 * i32]* %7)[i64 0][i32 %13];
    i32 %35 = load i32* %34;
    call (i32) -> void @putch(i32 %35);
    ubr ^b1;
  ^if.else4:
    i1 %36 = icmp eq i32 %16, i32 44;
    cbr i1 %36(prob = 0.5), ^if.then5, ^if.else5;
  ^if.then5:
    i32 %37 = call () -> i32 @getch();
    i32* %38 = getelementptr &([65536 * i32]* %7)[i64 0][i32 %13];
    store i32* %38 with i32 %37;
    ubr ^b1;
  ^if.else5:
    i1 %39 = icmp eq i32 %16, i32 93;
    cbr i1 %39(prob = 0.5), ^b2, ^b1;
  ^b2:
    i32* %40 = getelementptr &([65536 * i32]* %7)[i64 0][i32 %13];
    i32 %41 = load i32* %40;
    i1 %42 = icmp neq i32 %41, i32 0;
    cbr i1 %42(prob = 0.5), ^while.header1, ^b1;
  ^while.header1:
    i32 %43 = phi [^b2, i32 %14] [^if.then6, i32 %46] [^if.else6, i32 %46];
    i32 %44 = phi [^b2, i32 1] [^if.then6, i32 %50] [^if.else6, i32 %53];
    i1 %45 = icmp sgt i32 %44, i32 0;
    cbr i1 %45(prob = 0.97), ^while.body2, ^b1;
  ^while.body2:
    i32 %46 = add i32 %43, i32 -1;
    i32* %47 = getelementptr &(i32* %6)[i32 %46];
    i32 %48 = load i32* %47;
    i1 %49 = icmp eq i32 %48, i32 91;
    cbr i1 %49(prob = 0.5), ^if.then6, ^if.else6;
  ^if.then6:
    i32 %50 = add i32 %44, i32 -1;
    ubr ^while.header1;
  ^if.else6:
    i1 %51 = icmp eq i32 %48, i32 93;
    i32 %52 = add i32 %44, i32 1;
    i32 %53 = select i1 %51 ? i32 %52 : i32 %44;
    ubr ^while.header1;
}
