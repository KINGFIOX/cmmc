internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [65536 * i32]* @tape;
internal [32768 * i32]* @program;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = scmp gt i32 %0, i32 0;
    cbr i1 %1(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %2 = phi [^entry, i32 0] [^while.body, i32 %5];
    i32* %3 = getelementptr &([32768 * i32]* @program)[i64 0][i32 %2];
    i32 %4 = call () -> i32 @getch();
    store i32* %3 with i32 %4;
    i32 %5 = add i32 %2, i32 1;
    i1 %6 = scmp lt i32 %5, i32 %0;
    cbr i1 %6(prob = 0.97), ^while.body, ^b;
^b:
    i32 %7 = phi [^entry, i32 0] [^while.body, i32 %5];
    i32* %8 = getelementptr &([32768 * i32]* @program)[i64 0][i32 %7];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([32768 * i32]* @program)[i64 0][i64 0];
    i32 %10 = load i32* %9;
    i1 %11 = scmp neq i32 %10, i32 0;
    cbr i1 %11(prob = 0.97), ^while.body1, ^entry1;
^while.body1:
    i32 %12 = phi [^b, i32 0] [^b1, i32 %20];
    i32 %13 = phi [^b, i32 0] [^b1, i32 %22];
    i32* %14 = getelementptr &(i32* %9)[i32 %13];
    i32 %15 = load i32* %14;
    i1 %16 = scmp eq i32 %15, i32 62;
    cbr i1 %16(prob = 0.5), ^if.then, ^if.else;
^entry1:
    ret i32 0;
^if.then:
    i32 %17 = add i32 %12, i32 1;
    ubr ^b1;
^if.else:
    i1 %18 = scmp eq i32 %15, i32 60;
    cbr i1 %18(prob = 0.5), ^if.then1, ^if.else1;
^if.then1:
    i32 %19 = add i32 %12, i32 -1;
    ubr ^b1;
^b1:
    i32 %20 = phi [^if.then, i32 %17] [^if.then1, i32 %19] [^if.then2, i32 %12] [^if.then3, i32 %12] [^if.then4, i32 %12] [^if.then5, i32 %12] [^if.else5, i32 %12] [^b2, i32 %12] [^b3, i32 %12];
    i32 %21 = phi [^if.then, i32 %13] [^if.then1, i32 %13] [^if.then2, i32 %13] [^if.then3, i32 %13] [^if.then4, i32 %13] [^if.then5, i32 %13] [^if.else5, i32 %13] [^b2, i32 %13] [^b3, i32 %46];
    i32 %22 = add i32 %21, i32 1;
    i32* %23 = getelementptr &(i32* %9)[i32 %22];
    i32 %24 = load i32* %23;
    i1 %25 = scmp neq i32 %24, i32 0;
    cbr i1 %25(prob = 0.97), ^while.body1, ^entry1;
^if.else1:
    i1 %26 = scmp eq i32 %15, i32 43;
    cbr i1 %26(prob = 0.5), ^if.then2, ^if.else2;
^if.then2:
    i32* %27 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %12];
    i32 %28 = load i32* %27;
    i32 %29 = add i32 %28, i32 1;
    store i32* %27 with i32 %29;
    ubr ^b1;
^if.else2:
    i1 %30 = scmp eq i32 %15, i32 45;
    cbr i1 %30(prob = 0.5), ^if.then3, ^if.else3;
^if.then3:
    i32* %31 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %12];
    i32 %32 = load i32* %31;
    i32 %33 = add i32 %32, i32 -1;
    store i32* %31 with i32 %33;
    ubr ^b1;
^if.else3:
    i1 %34 = scmp eq i32 %15, i32 46;
    cbr i1 %34(prob = 0.5), ^if.then4, ^if.else4;
^if.then4:
    i32* %35 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %12];
    i32 %36 = load i32* %35;
    call (i32) -> void @putch(i32 %36);
    ubr ^b1;
^if.else4:
    i1 %37 = scmp eq i32 %15, i32 44;
    cbr i1 %37(prob = 0.5), ^if.then5, ^if.else5;
^if.then5:
    i32* %38 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %12];
    i32 %39 = call () -> i32 @getch();
    store i32* %38 with i32 %39;
    ubr ^b1;
^if.else5:
    i1 %40 = scmp eq i32 %15, i32 93;
    cbr i1 %40(prob = 0.5), ^b2, ^b1;
^b2:
    i32* %41 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %12];
    i32 %42 = load i32* %41;
    i1 %43 = scmp neq i32 %42, i32 0;
    cbr i1 %43(prob = 0.5), ^while.body2, ^b1;
^while.body2:
    i32 %44 = phi [^b2, i32 1] [^b3, i32 %53];
    i32 %45 = phi [^b2, i32 %13] [^b3, i32 %46];
    i32 %46 = add i32 %45, i32 -1;
    i32* %47 = getelementptr &(i32* %9)[i32 %46];
    i32 %48 = load i32* %47;
    i1 %49 = scmp eq i32 %48, i32 91;
    cbr i1 %49(prob = 0.5), ^if.then6, ^if.else6;
^if.then6:
    i32 %50 = add i32 %44, i32 -1;
    ubr ^b3;
^if.else6:
    i1 %51 = scmp eq i32 %48, i32 93;
    cbr i1 %51(prob = 0.5), ^if.then7, ^b3;
^if.then7:
    i32 %52 = add i32 %44, i32 1;
    ubr ^b3;
^b3:
    i32 %53 = phi [^if.then6, i32 %50] [^if.else6, i32 %44] [^if.then7, i32 %52];
    i1 %54 = scmp gt i32 %53, i32 0;
    cbr i1 %54(prob = 0.97), ^while.body2, ^b1;
}
