internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [65536 * i32]* @tape;
internal [32768 * i32]* @program;
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    [32768 * i32]* %2 = ptrcast [32768 * i32]* @program to [32768 * i32]*;
    cbr i1 %1(prob = 0.97), ^while.body, ^b;
  ^b:
    i32 %3 = phi [^entry, i32 0] [^while.body, i32 %10];
    i32* %4 = getelementptr &([32768 * i32]* %2)[i64 0][i32 %3];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([32768 * i32]* %2)[i64 0][i64 0];
    [65536 * i32]* %6 = ptrcast [65536 * i32]* @tape to [65536 * i32]*;
    ubr ^while.header;
  ^while.body:
    i32 %7 = phi [^entry, i32 0] [^while.body, i32 %10];
    i32 %8 = call () -> i32 @getch();
    i32* %9 = getelementptr &([32768 * i32]* %2)[i64 0][i32 %7];
    store i32* %9 with i32 %8;
    i32 %10 = add i32 %7, i32 1;
    i1 %11 = icmp sgt i32 %0, i32 %10;
    cbr i1 %11(prob = 0.97), ^while.body, ^b;
  ^while.header:
    i32 %12 = phi [^b, i32 0] [^b1, i32 %20];
    i32 %13 = phi [^b, i32 0] [^b1, i32 %22];
    i32* %14 = getelementptr &(i32* %5)[i32 %13];
    i32 %15 = load i32* %14;
    i1 %16 = icmp neq i32 %15, i32 0;
    cbr i1 %16(prob = 0.97), ^while.body1, ^entry1;
  ^while.body1:
    i1 %17 = icmp eq i32 %15, i32 62;
    cbr i1 %17(prob = 0.5), ^if.then, ^if.else;
  ^entry1:
    ret i32 0;
  ^if.then:
    i32 %18 = add i32 %12, i32 1;
    ubr ^b1;
  ^if.else:
    i1 %19 = icmp eq i32 %15, i32 60;
    cbr i1 %19(prob = 0.5), ^if.then1, ^if.else1;
  ^b1:
    i32 %20 = phi [^if.then, i32 %18] [^if.then1, i32 %23] [^if.then2, i32 %12] [^if.then3, i32 %12] [^if.then4, i32 %12] [^if.then5, i32 %12] [^if.else5, i32 %12] [^b2, i32 %12] [^while.header1, i32 %12];
    i32 %21 = phi [^if.then, i32 %13] [^if.then1, i32 %13] [^if.then2, i32 %13] [^if.then3, i32 %13] [^if.then4, i32 %13] [^if.then5, i32 %13] [^if.else5, i32 %13] [^b2, i32 %13] [^while.header1, i32 %43];
    i32 %22 = add i32 %21, i32 1;
    ubr ^while.header;
  ^if.then1:
    i32 %23 = add i32 %12, i32 -1;
    ubr ^b1;
  ^if.else1:
    i1 %24 = icmp eq i32 %15, i32 43;
    cbr i1 %24(prob = 0.5), ^if.then2, ^if.else2;
  ^if.then2:
    i32* %25 = getelementptr &([65536 * i32]* %6)[i64 0][i32 %12];
    i32 %26 = load i32* %25;
    i32 %27 = add i32 %26, i32 1;
    store i32* %25 with i32 %27;
    ubr ^b1;
  ^if.else2:
    i1 %28 = icmp eq i32 %15, i32 45;
    cbr i1 %28(prob = 0.5), ^if.then3, ^if.else3;
  ^if.then3:
    i32* %29 = getelementptr &([65536 * i32]* %6)[i64 0][i32 %12];
    i32 %30 = load i32* %29;
    i32 %31 = add i32 %30, i32 -1;
    store i32* %29 with i32 %31;
    ubr ^b1;
  ^if.else3:
    i1 %32 = icmp eq i32 %15, i32 46;
    cbr i1 %32(prob = 0.5), ^if.then4, ^if.else4;
  ^if.then4:
    i32* %33 = getelementptr &([65536 * i32]* %6)[i64 0][i32 %12];
    i32 %34 = load i32* %33;
    call (i32) -> void @putch(i32 %34);
    ubr ^b1;
  ^if.else4:
    i1 %35 = icmp eq i32 %15, i32 44;
    cbr i1 %35(prob = 0.5), ^if.then5, ^if.else5;
  ^if.then5:
    i32 %36 = call () -> i32 @getch();
    i32* %37 = getelementptr &([65536 * i32]* %6)[i64 0][i32 %12];
    store i32* %37 with i32 %36;
    ubr ^b1;
  ^if.else5:
    i1 %38 = icmp eq i32 %15, i32 93;
    cbr i1 %38(prob = 0.5), ^b2, ^b1;
  ^b2:
    i32* %39 = getelementptr &([65536 * i32]* %6)[i64 0][i32 %12];
    i32 %40 = load i32* %39;
    i1 %41 = icmp neq i32 %40, i32 0;
    cbr i1 %41(prob = 0.5), ^while.header1, ^b1;
  ^while.header1:
    i32 %42 = phi [^b2, i32 1] [^if.then6, i32 %49] [^if.else6, i32 %52];
    i32 %43 = phi [^b2, i32 %13] [^if.then6, i32 %45] [^if.else6, i32 %45];
    i1 %44 = icmp sgt i32 %42, i32 0;
    cbr i1 %44(prob = 0.97), ^while.body2, ^b1;
  ^while.body2:
    i32 %45 = add i32 %43, i32 -1;
    i32* %46 = getelementptr &(i32* %5)[i32 %45];
    i32 %47 = load i32* %46;
    i1 %48 = icmp eq i32 %47, i32 91;
    cbr i1 %48(prob = 0.5), ^if.then6, ^if.else6;
  ^if.then6:
    i32 %49 = add i32 %42, i32 -1;
    ubr ^while.header1;
  ^if.else6:
    i1 %50 = icmp eq i32 %47, i32 93;
    i32 %51 = add i32 %42, i32 1;
    i32 %52 = select i1 %50 ? i32 %51 : i32 %42;
    ubr ^while.header1;
}
