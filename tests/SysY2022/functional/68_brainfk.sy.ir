internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [65536 * i32]* @tape, align 8 { Flexible };
internal [32768 * i32]* @program, align 8 { Flexible };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    [32768 * i32]* %2 = ptrcast [32768 * i32]* @program to [32768 * i32]*;
    i32* %3 = getelementptr &([32768 * i32]* %2)[i64 0][i64 0];
    cbr i1 %1(prob = 0.984615), ^while.body, ^b;
  ^while.body:
    i32* %4 = phi [^entry, i32* %3] [^while.body, i32* %9];
    i32 %5 = phi [^entry, i32 0] [^while.body, i32 %7];
    i32 %6 = call () -> i32 @getch();
    store i32* %4 with i32 %6;
    i32 %7 = add i32 %5, i32 1;
    i1 %8 = icmp sgt i32 %0, i32 %7;
    i32* %9 = getelementptr &([32768 * i32]* %2)[i64 0][i32 %7];
    cbr i1 %8(prob = 0.984615), ^while.body, ^b;
  ^b:
    i32* %10 = phi [^entry, i32* %3] [^while.body, i32* %9];
    store i32* %10 with i32 0;
    i32 %11 = load i32* %3;
    i1 %12 = icmp neq i32 %11, i32 0;
    [65536 * i32]* %13 = ptrcast [65536 * i32]* @tape to [65536 * i32]*;
    cbr i1 %12(prob = 0.984615), ^while.body1, ^b1;
  ^while.body1:
    i32 %14 = phi [^b, i32 0] [^b2, i32 %22];
    i32 %15 = phi [^b, i32 0] [^b2, i32 %24];
    i32* %16 = getelementptr &(i32* %3)[i32 %15];
    i32 %17 = load i32* %16;
    i1 %18 = icmp eq i32 %17, i32 62;
    cbr i1 %18(prob = 0.5), ^if.then, ^if.else;
  ^b1:
    ret i32 0;
  ^if.then:
    i32 %19 = add i32 %14, i32 1;
    ubr ^b2;
  ^if.else:
    i1 %20 = icmp eq i32 %17, i32 60;
    cbr i1 %20(prob = 0.5), ^if.then1, ^if.else1;
  ^if.then1:
    i32 %21 = add i32 %14, i32 -1;
    ubr ^b2;
  ^b2:
    i32 %22 = phi [^if.then, i32 %19] [^if.then1, i32 %21] [^if.then2, i32 %14] [^if.then3, i32 %14] [^if.then4, i32 %14] [^if.then5, i32 %14] [^if.else5, i32 %14] [^b3, i32 %14] [^while.header, i32 %14];
    i32 %23 = phi [^if.then, i32 %15] [^if.then1, i32 %15] [^if.then2, i32 %15] [^if.then3, i32 %15] [^if.then4, i32 %15] [^if.then5, i32 %15] [^if.else5, i32 %15] [^b3, i32 %15] [^while.header, i32 %46];
    i32 %24 = add i32 %23, i32 1;
    i32* %25 = getelementptr &(i32* %3)[i32 %24];
    i32 %26 = load i32* %25;
    i1 %27 = icmp neq i32 %26, i32 0;
    cbr i1 %27(prob = 0.984615), ^while.body1, ^b1;
  ^if.else1:
    i1 %28 = icmp eq i32 %17, i32 43;
    cbr i1 %28(prob = 0.5), ^if.then2, ^if.else2;
  ^if.then2:
    i32* %29 = getelementptr &([65536 * i32]* %13)[i64 0][i32 %14];
    i32 %30 = load i32* %29;
    i32 %31 = add i32 %30, i32 1;
    store i32* %29 with i32 %31;
    ubr ^b2;
  ^if.else2:
    i1 %32 = icmp eq i32 %17, i32 45;
    cbr i1 %32(prob = 0.5), ^if.then3, ^if.else3;
  ^if.then3:
    i32* %33 = getelementptr &([65536 * i32]* %13)[i64 0][i32 %14];
    i32 %34 = load i32* %33;
    i32 %35 = add i32 %34, i32 -1;
    store i32* %33 with i32 %35;
    ubr ^b2;
  ^if.else3:
    i1 %36 = icmp eq i32 %17, i32 46;
    cbr i1 %36(prob = 0.5), ^if.then4, ^if.else4;
  ^if.then4:
    i32* %37 = getelementptr &([65536 * i32]* %13)[i64 0][i32 %14];
    i32 %38 = load i32* %37;
    call (i32) -> void @putch(i32 %38);
    ubr ^b2;
  ^if.else4:
    i1 %39 = icmp eq i32 %17, i32 44;
    cbr i1 %39(prob = 0.5), ^if.then5, ^if.else5;
  ^if.then5:
    i32 %40 = call () -> i32 @getch();
    i32* %41 = getelementptr &([65536 * i32]* %13)[i64 0][i32 %14];
    store i32* %41 with i32 %40;
    ubr ^b2;
  ^if.else5:
    i1 %42 = icmp eq i32 %17, i32 93;
    cbr i1 %42(prob = 0.5), ^b3, ^b2;
  ^b3:
    i32* %43 = getelementptr &([65536 * i32]* %13)[i64 0][i32 %14];
    i32 %44 = load i32* %43;
    i1 %45 = icmp neq i32 %44, i32 0;
    cbr i1 %45(prob = 0.5), ^while.header, ^b2;
  ^while.header:
    i32 %46 = phi [^b3, i32 %15] [^if.then6, i32 %49] [^if.else6, i32 %49];
    i32 %47 = phi [^b3, i32 1] [^if.then6, i32 %53] [^if.else6, i32 %56];
    i1 %48 = icmp sgt i32 %47, i32 0;
    cbr i1 %48(prob = 0.984615), ^while.body2, ^b2;
  ^while.body2:
    i32 %49 = add i32 %46, i32 -1;
    i32* %50 = getelementptr &(i32* %3)[i32 %49];
    i32 %51 = load i32* %50;
    i1 %52 = icmp eq i32 %51, i32 91;
    cbr i1 %52(prob = 0.5), ^if.then6, ^if.else6;
  ^if.then6:
    i32 %53 = add i32 %47, i32 -1;
    ubr ^while.header;
  ^if.else6:
    i1 %54 = icmp eq i32 %51, i32 93;
    i32 %55 = zext i1 %54 to i32;
    i32 %56 = add i32 %47, i32 %55;
    ubr ^while.header;
}
