internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @TAPE_LEN { ReadOnly } = 65536;
internal i32* @BUFFER_LEN { ReadOnly } = 32768;
internal [65536 * i32]* @tape;
internal [32768 * i32]* @program;
internal i32* @ptr = 0;
internal func @read_program() -> void {
^entry:
    i32* %len = alloc i32;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    i32 %0 = call () -> i32 @getint();
    store i32* %len with i32 %0;
    ubr ^while.header;
^while.header:
    i32 %1 = load i32* %i;
    i32 %2 = load i32* %len;
    i1 %3 = scmp lt i32 %1, i32 %2;
    i32 %4 = zext i1 %3 to i32;
    i1 %5 = scmp neq i32 %4, i32 0;
    cbr i1 %5(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %6 = load i32* %i;
    i64 %7 = sext i32 %6 to i64;
    i32* %8 = getelementptr &([32768 * i32]* @program)[i64 0][i64 %7];
    i32 %9 = call () -> i32 @getch();
    store i32* %8 with i32 %9;
    i32 %10 = load i32* %i;
    i32 %11 = add i32 %10, i32 1;
    store i32* %i with i32 %11;
    ubr ^while.header;
^b:
    i32 %12 = load i32* %i;
    i64 %13 = sext i32 %12 to i64;
    i32* %14 = getelementptr &([32768 * i32]* @program)[i64 0][i64 %13];
    store i32* %14 with i32 0;
    ret;
}
internal func @interpret(i32* %input) -> void {
^entry:
    i32* %i = alloc i32;
    i32* %loop = alloc i32;
    i32* %cur_char = alloc i32;
    i32** %input1 = alloc i32*;
    store i32** %input1 with i32* %input;
    store i32* %cur_char with i32 0;
    store i32* %loop with i32 0;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i64 %1 = sext i32 %0 to i64;
    i32* %2 = load i32** %input1;
    i32* %3 = getelementptr &(i32* %2)[i64 %1];
    i32 %4 = load i32* %3;
    i1 %5 = scmp neq i32 %4, i32 0;
    cbr i1 %5(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %6 = load i32* %i;
    i64 %7 = sext i32 %6 to i64;
    i32* %8 = load i32** %input1;
    i32* %9 = getelementptr &(i32* %8)[i64 %7];
    i32 %10 = load i32* %9;
    store i32* %cur_char with i32 %10;
    i32 %11 = load i32* %cur_char;
    i1 %12 = scmp eq i32 %11, i32 62;
    i32 %13 = zext i1 %12 to i32;
    i1 %14 = scmp neq i32 %13, i32 0;
    cbr i1 %14(prob = 0.5), ^if.then, ^if.else;
^b:
    ret;
^if.then:
    i32 %15 = load i32* @ptr;
    i32 %16 = add i32 %15, i32 1;
    store i32* @ptr with i32 %16;
    ubr ^b1;
^if.else:
    i32 %17 = load i32* %cur_char;
    i1 %18 = scmp eq i32 %17, i32 60;
    i32 %19 = zext i1 %18 to i32;
    i1 %20 = scmp neq i32 %19, i32 0;
    cbr i1 %20(prob = 0.5), ^if.then1, ^if.else1;
^b1:
    i32 %21 = load i32* %i;
    i32 %22 = add i32 %21, i32 1;
    store i32* %i with i32 %22;
    ubr ^while.header;
^if.then1:
    i32 %23 = load i32* @ptr;
    i32 %24 = sub i32 %23, i32 1;
    store i32* @ptr with i32 %24;
    ubr ^b2;
^if.else1:
    i32 %25 = load i32* %cur_char;
    i1 %26 = scmp eq i32 %25, i32 43;
    i32 %27 = zext i1 %26 to i32;
    i1 %28 = scmp neq i32 %27, i32 0;
    cbr i1 %28(prob = 0.5), ^if.then2, ^if.else2;
^b2:
    ubr ^b1;
^if.then2:
    i32 %29 = load i32* @ptr;
    i64 %30 = sext i32 %29 to i64;
    i32* %31 = getelementptr &([65536 * i32]* @tape)[i64 0][i64 %30];
    i32 %32 = load i32* @ptr;
    i64 %33 = sext i32 %32 to i64;
    i32* %34 = getelementptr &([65536 * i32]* @tape)[i64 0][i64 %33];
    i32 %35 = load i32* %34;
    i32 %36 = add i32 %35, i32 1;
    store i32* %31 with i32 %36;
    ubr ^b3;
^if.else2:
    i32 %37 = load i32* %cur_char;
    i1 %38 = scmp eq i32 %37, i32 45;
    i32 %39 = zext i1 %38 to i32;
    i1 %40 = scmp neq i32 %39, i32 0;
    cbr i1 %40(prob = 0.5), ^if.then3, ^if.else3;
^b3:
    ubr ^b2;
^if.then3:
    i32 %41 = load i32* @ptr;
    i64 %42 = sext i32 %41 to i64;
    i32* %43 = getelementptr &([65536 * i32]* @tape)[i64 0][i64 %42];
    i32 %44 = load i32* @ptr;
    i64 %45 = sext i32 %44 to i64;
    i32* %46 = getelementptr &([65536 * i32]* @tape)[i64 0][i64 %45];
    i32 %47 = load i32* %46;
    i32 %48 = sub i32 %47, i32 1;
    store i32* %43 with i32 %48;
    ubr ^b4;
^if.else3:
    i32 %49 = load i32* %cur_char;
    i1 %50 = scmp eq i32 %49, i32 46;
    i32 %51 = zext i1 %50 to i32;
    i1 %52 = scmp neq i32 %51, i32 0;
    cbr i1 %52(prob = 0.5), ^if.then4, ^if.else4;
^b4:
    ubr ^b3;
^if.then4:
    i32 %53 = load i32* @ptr;
    i64 %54 = sext i32 %53 to i64;
    i32* %55 = getelementptr &([65536 * i32]* @tape)[i64 0][i64 %54];
    i32 %56 = load i32* %55;
    call (i32) -> void @putch(i32 %56);
    ubr ^b5;
^if.else4:
    i32 %57 = load i32* %cur_char;
    i1 %58 = scmp eq i32 %57, i32 44;
    i32 %59 = zext i1 %58 to i32;
    i1 %60 = scmp neq i32 %59, i32 0;
    cbr i1 %60(prob = 0.5), ^if.then5, ^if.else5;
^b5:
    ubr ^b4;
^if.then5:
    i32 %61 = load i32* @ptr;
    i64 %62 = sext i32 %61 to i64;
    i32* %63 = getelementptr &([65536 * i32]* @tape)[i64 0][i64 %62];
    i32 %64 = call () -> i32 @getch();
    store i32* %63 with i32 %64;
    ubr ^b6;
^if.else5:
    i32 %65 = load i32* %cur_char;
    i1 %66 = scmp eq i32 %65, i32 93;
    i32 %67 = zext i1 %66 to i32;
    i1 %68 = scmp neq i32 %67, i32 0;
    cbr i1 %68(prob = 0.5), ^b7, ^b8;
^b6:
    ubr ^b5;
^b7:
    i32 %69 = load i32* @ptr;
    i64 %70 = sext i32 %69 to i64;
    i32* %71 = getelementptr &([65536 * i32]* @tape)[i64 0][i64 %70];
    i32 %72 = load i32* %71;
    i1 %73 = scmp neq i32 %72, i32 0;
    ubr ^b8;
^b8:
    i1 %74 = phi [^b7, i1 %73] [^if.else5, i1 false];
    i32 %75 = zext i1 %74 to i32;
    i1 %76 = scmp neq i32 %75, i32 0;
    cbr i1 %76(prob = 0.5), ^if.then6, ^b9;
^if.then6:
    store i32* %loop with i32 1;
    ubr ^while.header1;
^b9:
    ubr ^b6;
^while.header1:
    i32 %77 = load i32* %loop;
    i1 %78 = scmp gt i32 %77, i32 0;
    i32 %79 = zext i1 %78 to i32;
    i1 %80 = scmp neq i32 %79, i32 0;
    cbr i1 %80(prob = 0.97), ^while.body1, ^b10;
^b10:
    ubr ^b9;
^while.body1:
    i32 %81 = load i32* %i;
    i32 %82 = sub i32 %81, i32 1;
    store i32* %i with i32 %82;
    i32 %83 = load i32* %i;
    i64 %84 = sext i32 %83 to i64;
    i32* %85 = load i32** %input1;
    i32* %86 = getelementptr &(i32* %85)[i64 %84];
    i32 %87 = load i32* %86;
    store i32* %cur_char with i32 %87;
    i32 %88 = load i32* %cur_char;
    i1 %89 = scmp eq i32 %88, i32 91;
    i32 %90 = zext i1 %89 to i32;
    i1 %91 = scmp neq i32 %90, i32 0;
    cbr i1 %91(prob = 0.5), ^if.then7, ^if.else6;
^if.then7:
    i32 %92 = load i32* %loop;
    i32 %93 = sub i32 %92, i32 1;
    store i32* %loop with i32 %93;
    ubr ^b11;
^if.else6:
    i32 %94 = load i32* %cur_char;
    i1 %95 = scmp eq i32 %94, i32 93;
    i32 %96 = zext i1 %95 to i32;
    i1 %97 = scmp neq i32 %96, i32 0;
    cbr i1 %97(prob = 0.5), ^if.then8, ^b12;
^b11:
    ubr ^while.header1;
^if.then8:
    i32 %98 = load i32* %loop;
    i32 %99 = add i32 %98, i32 1;
    store i32* %loop with i32 %99;
    ubr ^b12;
^b12:
    ubr ^b11;
}
func @main() -> i32 { Entry } {
^entry:
    call () -> void @read_program();
    i32* %0 = getelementptr &([32768 * i32]* @program)[i64 0][i64 0];
    call (i32*) -> void @interpret(i32* %0);
    ret i32 0;
}
