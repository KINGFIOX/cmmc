internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry():
    [10000 * i32]* %a1 = alloc [10000 * i32];
    [10000 * i32]* %a2 = alloc [10000 * i32];
    [10000 * i32]* %a3 = alloc [10000 * i32];
    i32* %0 = getelementptr &([10000 * i32]* %a1)[i64 0][i64 9992];
    i32* %1 = getelementptr &([10000 * i32]* %a1)[i64 0][i64 9993];
    i32* %2 = getelementptr &([10000 * i32]* %a1)[i64 0][i64 9994];
    i32* %3 = getelementptr &([10000 * i32]* %a1)[i64 0][i64 9995];
    i32* %4 = getelementptr &([10000 * i32]* %a1)[i64 0][i64 9996];
    i32* %5 = getelementptr &([10000 * i32]* %a1)[i64 0][i64 9997];
    i32* %6 = getelementptr &([10000 * i32]* %a1)[i64 0][i64 9998];
    i32* %7 = getelementptr &([10000 * i32]* %a1)[i64 0][i64 9999];
    ubr [ ^while.body [10000 * i32]* %a3, [10000 * i32]* %a1, [10000 * i32]* %a2, i32 0, i32* %7, i32* %6, i32* %5, i32* %4, i32* %3, i32* %2, i32* %1, i32* %0, i32* %0, i32* %1, i32* %2, i32* %3, i32* %4, i32* %5, i32* %6, i32* %7 ];
^while.body([10000 * i32]* %arg, [10000 * i32]* %arg1, [10000 * i32]* %arg2, i32 %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17, i32* %arg18, i32* %arg19):
    i32* %0 = getelementptr &([10000 * i32]* %arg1)[i64 0][i32 %arg3];
    i32 %1 = mul i32 %arg3, i32 %arg3;
    i32 %2 = srem i32 %1, i32 10;
    store i32* %0 with i32 %2;
    i32 %3 = add i32 %arg3, i32 1;
    i32* %4 = getelementptr &(i32* %0)[i64 1];
    i32 %5 = mul i32 %3, i32 %3;
    i32 %6 = srem i32 %5, i32 10;
    store i32* %4 with i32 %6;
    i32 %7 = add i32 %arg3, i32 2;
    i32* %8 = getelementptr &(i32* %0)[i64 2];
    i32 %9 = mul i32 %7, i32 %7;
    i32 %10 = srem i32 %9, i32 10;
    store i32* %8 with i32 %10;
    i32 %11 = add i32 %arg3, i32 3;
    i32* %12 = getelementptr &(i32* %0)[i64 3];
    i32 %13 = mul i32 %11, i32 %11;
    i32 %14 = srem i32 %13, i32 10;
    store i32* %12 with i32 %14;
    i32 %15 = add i32 %arg3, i32 4;
    i32* %16 = getelementptr &(i32* %0)[i64 4];
    i32 %17 = mul i32 %15, i32 %15;
    i32 %18 = srem i32 %17, i32 10;
    store i32* %16 with i32 %18;
    i32 %19 = add i32 %arg3, i32 5;
    i32* %20 = getelementptr &(i32* %0)[i64 5];
    i32 %21 = mul i32 %19, i32 %19;
    i32 %22 = srem i32 %21, i32 10;
    store i32* %20 with i32 %22;
    i32 %23 = add i32 %arg3, i32 6;
    i32* %24 = getelementptr &(i32* %0)[i64 6];
    i32 %25 = mul i32 %23, i32 %23;
    i32 %26 = srem i32 %25, i32 10;
    store i32* %24 with i32 %26;
    i32 %27 = add i32 %arg3, i32 7;
    i32* %28 = getelementptr &(i32* %0)[i64 7];
    i32 %29 = mul i32 %27, i32 %27;
    i32 %30 = srem i32 %29, i32 10;
    store i32* %28 with i32 %30;
    i32 %31 = add i32 %arg3, i32 8;
    i32* %32 = getelementptr &(i32* %0)[i64 8];
    i32 %33 = mul i32 %31, i32 %31;
    i32 %34 = srem i32 %33, i32 10;
    store i32* %32 with i32 %34;
    i32 %35 = add i32 %arg3, i32 9;
    i32* %36 = getelementptr &(i32* %0)[i64 9];
    i32 %37 = mul i32 %35, i32 %35;
    i32 %38 = srem i32 %37, i32 10;
    store i32* %36 with i32 %38;
    i32 %39 = add i32 %arg3, i32 10;
    i32* %40 = getelementptr &(i32* %0)[i64 10];
    i32 %41 = mul i32 %39, i32 %39;
    i32 %42 = srem i32 %41, i32 10;
    store i32* %40 with i32 %42;
    i32 %43 = add i32 %arg3, i32 11;
    i32* %44 = getelementptr &(i32* %0)[i64 11];
    i32 %45 = mul i32 %43, i32 %43;
    i32 %46 = srem i32 %45, i32 10;
    store i32* %44 with i32 %46;
    i32 %47 = add i32 %arg3, i32 12;
    i32* %48 = getelementptr &(i32* %0)[i64 12];
    i32 %49 = mul i32 %47, i32 %47;
    i32 %50 = srem i32 %49, i32 10;
    store i32* %48 with i32 %50;
    i32 %51 = add i32 %arg3, i32 13;
    i32* %52 = getelementptr &(i32* %0)[i64 13];
    i32 %53 = mul i32 %51, i32 %51;
    i32 %54 = srem i32 %53, i32 10;
    store i32* %52 with i32 %54;
    i32 %55 = add i32 %arg3, i32 14;
    i32* %56 = getelementptr &(i32* %0)[i64 14];
    i32 %57 = mul i32 %55, i32 %55;
    i32 %58 = srem i32 %57, i32 10;
    store i32* %56 with i32 %58;
    i32 %59 = add i32 %arg3, i32 15;
    i32* %60 = getelementptr &(i32* %0)[i64 15];
    i32 %61 = mul i32 %59, i32 %59;
    i32 %62 = srem i32 %61, i32 10;
    store i32* %60 with i32 %62;
    i32 %63 = add i32 %arg3, i32 16;
    i1 %64 = scmp lt i32 %63, i32 9984;
    cbr i1 %64(prob = 1), [ ^while.body [10000 * i32]* %arg, [10000 * i32]* %arg1, [10000 * i32]* %arg2, i32 %63, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17, i32* %arg18, i32* %arg19 ], [ ^while.body1 [10000 * i32]* %arg, [10000 * i32]* %arg1, [10000 * i32]* %arg2, i32* %arg11, i32* %arg10, i32* %arg9, i32* %arg8, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg19, i32* %arg18, i32* %arg17, i32* %arg16, i32* %arg15, i32* %arg14, i32* %arg13, i32* %arg12 ];
^while.body1([10000 * i32]* %arg, [10000 * i32]* %arg1, [10000 * i32]* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17, i32* %arg18):
    i32* %0 = getelementptr &([10000 * i32]* %arg1)[i64 0][i64 9984];
    store i32* %0 with i32 6;
    i32* %1 = getelementptr &([10000 * i32]* %arg1)[i64 0][i64 9985];
    store i32* %1 with i32 5;
    i32* %2 = getelementptr &([10000 * i32]* %arg1)[i64 0][i64 9986];
    store i32* %2 with i32 6;
    i32* %3 = getelementptr &([10000 * i32]* %arg1)[i64 0][i64 9987];
    store i32* %3 with i32 9;
    i32* %4 = getelementptr &([10000 * i32]* %arg1)[i64 0][i64 9988];
    store i32* %4 with i32 4;
    i32* %5 = getelementptr &([10000 * i32]* %arg1)[i64 0][i64 9989];
    store i32* %5 with i32 1;
    i32* %6 = getelementptr &([10000 * i32]* %arg1)[i64 0][i64 9990];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([10000 * i32]* %arg1)[i64 0][i64 9991];
    store i32* %7 with i32 1;
    store i32* %arg18 with i32 4;
    store i32* %arg17 with i32 9;
    store i32* %arg16 with i32 6;
    store i32* %arg15 with i32 5;
    store i32* %arg14 with i32 6;
    store i32* %arg13 with i32 9;
    store i32* %arg12 with i32 4;
    store i32* %arg11 with i32 1;
    ubr [ ^while.body2 [10000 * i32]* %arg, [10000 * i32]* %arg1, [10000 * i32]* %arg2, i32 0, i32* %arg10, i32* %arg9, i32* %arg8, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32* %0, i32* %arg13, i32* %arg14, i32* %arg11, i32* %arg12, i32* %arg17, i32* %arg16, i32* %arg15, i32* %1, i32* %2, i32* %4, i32* %5, i32* %6, i32* %7, i32* %3, i32* %arg18 ];
^while.body2([10000 * i32]* %arg, [10000 * i32]* %arg1, [10000 * i32]* %arg2, i32 %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32* %arg22, i32* %arg23, i32* %arg24, i32* %arg25, i32* %arg26, i32* %arg27):
    i32* %0 = getelementptr &([10000 * i32]* %arg2)[i64 0][i32 %arg3];
    i32* %1 = getelementptr &([10000 * i32]* %arg1)[i64 0][i32 %arg3];
    i32 %2 = load i32* %1;
    i32 %3 = mul i32 %2, i32 %2;
    i32 %4 = srem i32 %3, i32 10;
    store i32* %0 with i32 %4;
    i32* %5 = getelementptr &(i32* %0)[i64 1];
    i32* %6 = getelementptr &(i32* %1)[i64 1];
    i32 %7 = load i32* %6;
    i32 %8 = mul i32 %7, i32 %7;
    i32 %9 = srem i32 %8, i32 10;
    store i32* %5 with i32 %9;
    i32* %10 = getelementptr &(i32* %0)[i64 2];
    i32* %11 = getelementptr &(i32* %1)[i64 2];
    i32 %12 = load i32* %11;
    i32 %13 = mul i32 %12, i32 %12;
    i32 %14 = srem i32 %13, i32 10;
    store i32* %10 with i32 %14;
    i32* %15 = getelementptr &(i32* %0)[i64 3];
    i32* %16 = getelementptr &(i32* %1)[i64 3];
    i32 %17 = load i32* %16;
    i32 %18 = mul i32 %17, i32 %17;
    i32 %19 = srem i32 %18, i32 10;
    store i32* %15 with i32 %19;
    i32* %20 = getelementptr &(i32* %0)[i64 4];
    i32* %21 = getelementptr &(i32* %1)[i64 4];
    i32 %22 = load i32* %21;
    i32 %23 = mul i32 %22, i32 %22;
    i32 %24 = srem i32 %23, i32 10;
    store i32* %20 with i32 %24;
    i32* %25 = getelementptr &(i32* %0)[i64 5];
    i32* %26 = getelementptr &(i32* %1)[i64 5];
    i32 %27 = load i32* %26;
    i32 %28 = mul i32 %27, i32 %27;
    i32 %29 = srem i32 %28, i32 10;
    store i32* %25 with i32 %29;
    i32* %30 = getelementptr &(i32* %0)[i64 6];
    i32* %31 = getelementptr &(i32* %1)[i64 6];
    i32 %32 = load i32* %31;
    i32 %33 = mul i32 %32, i32 %32;
    i32 %34 = srem i32 %33, i32 10;
    store i32* %30 with i32 %34;
    i32* %35 = getelementptr &(i32* %0)[i64 7];
    i32* %36 = getelementptr &(i32* %1)[i64 7];
    i32 %37 = load i32* %36;
    i32 %38 = mul i32 %37, i32 %37;
    i32 %39 = srem i32 %38, i32 10;
    store i32* %35 with i32 %39;
    i32* %40 = getelementptr &(i32* %0)[i64 8];
    i32* %41 = getelementptr &(i32* %1)[i64 8];
    i32 %42 = load i32* %41;
    i32 %43 = mul i32 %42, i32 %42;
    i32 %44 = srem i32 %43, i32 10;
    store i32* %40 with i32 %44;
    i32* %45 = getelementptr &(i32* %0)[i64 9];
    i32* %46 = getelementptr &(i32* %1)[i64 9];
    i32 %47 = load i32* %46;
    i32 %48 = mul i32 %47, i32 %47;
    i32 %49 = srem i32 %48, i32 10;
    store i32* %45 with i32 %49;
    i32* %50 = getelementptr &(i32* %0)[i64 10];
    i32* %51 = getelementptr &(i32* %1)[i64 10];
    i32 %52 = load i32* %51;
    i32 %53 = mul i32 %52, i32 %52;
    i32 %54 = srem i32 %53, i32 10;
    store i32* %50 with i32 %54;
    i32* %55 = getelementptr &(i32* %0)[i64 11];
    i32* %56 = getelementptr &(i32* %1)[i64 11];
    i32 %57 = load i32* %56;
    i32 %58 = mul i32 %57, i32 %57;
    i32 %59 = srem i32 %58, i32 10;
    store i32* %55 with i32 %59;
    i32* %60 = getelementptr &(i32* %0)[i64 12];
    i32* %61 = getelementptr &(i32* %1)[i64 12];
    i32 %62 = load i32* %61;
    i32 %63 = mul i32 %62, i32 %62;
    i32 %64 = srem i32 %63, i32 10;
    store i32* %60 with i32 %64;
    i32* %65 = getelementptr &(i32* %0)[i64 13];
    i32* %66 = getelementptr &(i32* %1)[i64 13];
    i32 %67 = load i32* %66;
    i32 %68 = mul i32 %67, i32 %67;
    i32 %69 = srem i32 %68, i32 10;
    store i32* %65 with i32 %69;
    i32* %70 = getelementptr &(i32* %0)[i64 14];
    i32* %71 = getelementptr &(i32* %1)[i64 14];
    i32 %72 = load i32* %71;
    i32 %73 = mul i32 %72, i32 %72;
    i32 %74 = srem i32 %73, i32 10;
    store i32* %70 with i32 %74;
    i32* %75 = getelementptr &(i32* %0)[i64 15];
    i32* %76 = getelementptr &(i32* %1)[i64 15];
    i32 %77 = load i32* %76;
    i32 %78 = mul i32 %77, i32 %77;
    i32 %79 = srem i32 %78, i32 10;
    store i32* %75 with i32 %79;
    i32 %80 = add i32 %arg3, i32 16;
    i1 %81 = scmp lt i32 %80, i32 9984;
    cbr i1 %81(prob = 1), [ ^while.body2 [10000 * i32]* %arg, [10000 * i32]* %arg1, [10000 * i32]* %arg2, i32 %80, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32* %arg22, i32* %arg23, i32* %arg24, i32* %arg25, i32* %arg26, i32* %arg27 ], [ ^while.body3 [10000 * i32]* %arg, [10000 * i32]* %arg1, [10000 * i32]* %arg2, i32* %arg11, i32* %arg10, i32* %arg9, i32* %arg8, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg12, i32* %arg15, i32* %arg16, i32* %arg20, i32* %arg21, i32* %arg22, i32* %arg23, i32* %arg24, i32* %arg25, i32* %arg26, i32* %arg27, i32* %arg17, i32* %arg18, i32* %arg19, i32* %arg14, i32* %arg13 ];
^while.body3([10000 * i32]* %arg, [10000 * i32]* %arg1, [10000 * i32]* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32* %arg22, i32* %arg23, i32* %arg24, i32* %arg25, i32* %arg26):
    i32* %0 = getelementptr &([10000 * i32]* %arg2)[i64 0][i64 9984];
    i32 %1 = load i32* %arg11;
    i32 %2 = mul i32 %1, i32 %1;
    i32 %3 = srem i32 %2, i32 10;
    store i32* %0 with i32 %3;
    i32* %4 = getelementptr &([10000 * i32]* %arg2)[i64 0][i64 9985];
    i32 %5 = load i32* %arg14;
    i32 %6 = mul i32 %5, i32 %5;
    i32 %7 = srem i32 %6, i32 10;
    store i32* %4 with i32 %7;
    i32* %8 = getelementptr &([10000 * i32]* %arg2)[i64 0][i64 9986];
    i32 %9 = load i32* %arg15;
    i32 %10 = mul i32 %9, i32 %9;
    i32 %11 = srem i32 %10, i32 10;
    store i32* %8 with i32 %11;
    i32* %12 = getelementptr &([10000 * i32]* %arg2)[i64 0][i64 9987];
    i32 %13 = load i32* %arg20;
    i32 %14 = mul i32 %13, i32 %13;
    i32 %15 = srem i32 %14, i32 10;
    store i32* %12 with i32 %15;
    i32* %16 = getelementptr &([10000 * i32]* %arg2)[i64 0][i64 9988];
    i32 %17 = load i32* %arg16;
    i32 %18 = mul i32 %17, i32 %17;
    i32 %19 = srem i32 %18, i32 10;
    store i32* %16 with i32 %19;
    i32* %20 = getelementptr &([10000 * i32]* %arg2)[i64 0][i64 9989];
    i32 %21 = load i32* %arg17;
    i32 %22 = mul i32 %21, i32 %21;
    i32 %23 = srem i32 %22, i32 10;
    store i32* %20 with i32 %23;
    i32* %24 = getelementptr &([10000 * i32]* %arg2)[i64 0][i64 9990];
    i32 %25 = load i32* %arg18;
    i32 %26 = mul i32 %25, i32 %25;
    i32 %27 = srem i32 %26, i32 10;
    store i32* %24 with i32 %27;
    i32* %28 = getelementptr &([10000 * i32]* %arg2)[i64 0][i64 9991];
    i32 %29 = load i32* %arg19;
    i32 %30 = mul i32 %29, i32 %29;
    i32 %31 = srem i32 %30, i32 10;
    store i32* %28 with i32 %31;
    i32* %32 = getelementptr &([10000 * i32]* %arg2)[i64 0][i64 9992];
    i32 %33 = load i32* %arg21;
    i32 %34 = mul i32 %33, i32 %33;
    i32 %35 = srem i32 %34, i32 10;
    store i32* %32 with i32 %35;
    i32* %36 = getelementptr &([10000 * i32]* %arg2)[i64 0][i64 9993];
    i32 %37 = load i32* %arg22;
    i32 %38 = mul i32 %37, i32 %37;
    i32 %39 = srem i32 %38, i32 10;
    store i32* %36 with i32 %39;
    i32* %40 = getelementptr &([10000 * i32]* %arg2)[i64 0][i64 9994];
    i32 %41 = load i32* %arg23;
    i32 %42 = mul i32 %41, i32 %41;
    i32 %43 = srem i32 %42, i32 10;
    store i32* %40 with i32 %43;
    i32* %44 = getelementptr &([10000 * i32]* %arg2)[i64 0][i64 9995];
    i32 %45 = load i32* %arg24;
    i32 %46 = mul i32 %45, i32 %45;
    i32 %47 = srem i32 %46, i32 10;
    store i32* %44 with i32 %47;
    i32* %48 = getelementptr &([10000 * i32]* %arg2)[i64 0][i64 9996];
    i32 %49 = load i32* %arg25;
    i32 %50 = mul i32 %49, i32 %49;
    i32 %51 = srem i32 %50, i32 10;
    store i32* %48 with i32 %51;
    i32* %52 = getelementptr &([10000 * i32]* %arg2)[i64 0][i64 9997];
    i32 %53 = load i32* %arg26;
    i32 %54 = mul i32 %53, i32 %53;
    i32 %55 = srem i32 %54, i32 10;
    store i32* %52 with i32 %55;
    i32* %56 = getelementptr &([10000 * i32]* %arg2)[i64 0][i64 9998];
    i32 %57 = load i32* %arg13;
    i32 %58 = mul i32 %57, i32 %57;
    i32 %59 = srem i32 %58, i32 10;
    store i32* %56 with i32 %59;
    i32* %60 = getelementptr &([10000 * i32]* %arg2)[i64 0][i64 9999];
    i32 %61 = load i32* %arg12;
    i32 %62 = mul i32 %61, i32 %61;
    i32 %63 = srem i32 %62, i32 10;
    store i32* %60 with i32 %63;
    ubr [ ^while.body4 [10000 * i32]* %arg1, [10000 * i32]* %arg, [10000 * i32]* %arg2, i32 0, i32* %arg10, i32* %arg9, i32* %arg8, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3, i32* %0, i32* %arg11, i32* %56, i32* %4, i32* %60, i32* %8, i32* %arg21, i32* %arg26, i32* %arg15, i32* %12, i32* %16, i32* %20, i32* %arg17, i32* %40, i32* %24, i32* %arg19, i32* %arg22, i32* %arg18, i32* %48, i32* %28, i32* %arg23, i32* %arg13, i32* %arg20, i32* %36, i32* %arg12, i32* %arg16, i32* %44, i32* %arg24, i32* %52, i32* %32, i32* %arg14, i32* %arg25 ];
^while.body4([10000 * i32]* %arg, [10000 * i32]* %arg1, [10000 * i32]* %arg2, i32 %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32* %arg22, i32* %arg23, i32* %arg24, i32* %arg25, i32* %arg26, i32* %arg27, i32* %arg28, i32* %arg29, i32* %arg30, i32* %arg31, i32* %arg32, i32* %arg33, i32* %arg34, i32* %arg35, i32* %arg36, i32* %arg37, i32* %arg38, i32* %arg39, i32* %arg40, i32* %arg41, i32* %arg42, i32* %arg43):
    i32* %0 = getelementptr &([10000 * i32]* %arg1)[i64 0][i32 %arg3];
    i32* %1 = getelementptr &([10000 * i32]* %arg2)[i64 0][i32 %arg3];
    i32 %2 = load i32* %1;
    i32 %3 = mul i32 %2, i32 %2;
    i32 %4 = srem i32 %3, i32 100;
    i32* %5 = getelementptr &([10000 * i32]* %arg)[i64 0][i32 %arg3];
    i32 %6 = load i32* %5;
    i32 %7 = add i32 %4, i32 %6;
    store i32* %0 with i32 %7;
    i32* %8 = getelementptr &(i32* %0)[i64 1];
    i32* %9 = getelementptr &(i32* %1)[i64 1];
    i32 %10 = load i32* %9;
    i32 %11 = mul i32 %10, i32 %10;
    i32 %12 = srem i32 %11, i32 100;
    i32* %13 = getelementptr &(i32* %5)[i64 1];
    i32 %14 = load i32* %13;
    i32 %15 = add i32 %12, i32 %14;
    store i32* %8 with i32 %15;
    i32* %16 = getelementptr &(i32* %0)[i64 2];
    i32* %17 = getelementptr &(i32* %1)[i64 2];
    i32 %18 = load i32* %17;
    i32 %19 = mul i32 %18, i32 %18;
    i32 %20 = srem i32 %19, i32 100;
    i32* %21 = getelementptr &(i32* %5)[i64 2];
    i32 %22 = load i32* %21;
    i32 %23 = add i32 %20, i32 %22;
    store i32* %16 with i32 %23;
    i32* %24 = getelementptr &(i32* %0)[i64 3];
    i32* %25 = getelementptr &(i32* %1)[i64 3];
    i32 %26 = load i32* %25;
    i32 %27 = mul i32 %26, i32 %26;
    i32 %28 = srem i32 %27, i32 100;
    i32* %29 = getelementptr &(i32* %5)[i64 3];
    i32 %30 = load i32* %29;
    i32 %31 = add i32 %28, i32 %30;
    store i32* %24 with i32 %31;
    i32* %32 = getelementptr &(i32* %0)[i64 4];
    i32* %33 = getelementptr &(i32* %1)[i64 4];
    i32 %34 = load i32* %33;
    i32 %35 = mul i32 %34, i32 %34;
    i32 %36 = srem i32 %35, i32 100;
    i32* %37 = getelementptr &(i32* %5)[i64 4];
    i32 %38 = load i32* %37;
    i32 %39 = add i32 %36, i32 %38;
    store i32* %32 with i32 %39;
    i32* %40 = getelementptr &(i32* %0)[i64 5];
    i32* %41 = getelementptr &(i32* %1)[i64 5];
    i32 %42 = load i32* %41;
    i32 %43 = mul i32 %42, i32 %42;
    i32 %44 = srem i32 %43, i32 100;
    i32* %45 = getelementptr &(i32* %5)[i64 5];
    i32 %46 = load i32* %45;
    i32 %47 = add i32 %44, i32 %46;
    store i32* %40 with i32 %47;
    i32* %48 = getelementptr &(i32* %0)[i64 6];
    i32* %49 = getelementptr &(i32* %1)[i64 6];
    i32 %50 = load i32* %49;
    i32 %51 = mul i32 %50, i32 %50;
    i32 %52 = srem i32 %51, i32 100;
    i32* %53 = getelementptr &(i32* %5)[i64 6];
    i32 %54 = load i32* %53;
    i32 %55 = add i32 %52, i32 %54;
    store i32* %48 with i32 %55;
    i32* %56 = getelementptr &(i32* %0)[i64 7];
    i32* %57 = getelementptr &(i32* %1)[i64 7];
    i32 %58 = load i32* %57;
    i32 %59 = mul i32 %58, i32 %58;
    i32 %60 = srem i32 %59, i32 100;
    i32* %61 = getelementptr &(i32* %5)[i64 7];
    i32 %62 = load i32* %61;
    i32 %63 = add i32 %60, i32 %62;
    store i32* %56 with i32 %63;
    i32* %64 = getelementptr &(i32* %0)[i64 8];
    i32* %65 = getelementptr &(i32* %1)[i64 8];
    i32 %66 = load i32* %65;
    i32 %67 = mul i32 %66, i32 %66;
    i32 %68 = srem i32 %67, i32 100;
    i32* %69 = getelementptr &(i32* %5)[i64 8];
    i32 %70 = load i32* %69;
    i32 %71 = add i32 %68, i32 %70;
    store i32* %64 with i32 %71;
    i32* %72 = getelementptr &(i32* %0)[i64 9];
    i32* %73 = getelementptr &(i32* %1)[i64 9];
    i32 %74 = load i32* %73;
    i32 %75 = mul i32 %74, i32 %74;
    i32 %76 = srem i32 %75, i32 100;
    i32* %77 = getelementptr &(i32* %5)[i64 9];
    i32 %78 = load i32* %77;
    i32 %79 = add i32 %76, i32 %78;
    store i32* %72 with i32 %79;
    i32* %80 = getelementptr &(i32* %0)[i64 10];
    i32* %81 = getelementptr &(i32* %1)[i64 10];
    i32 %82 = load i32* %81;
    i32 %83 = mul i32 %82, i32 %82;
    i32 %84 = srem i32 %83, i32 100;
    i32* %85 = getelementptr &(i32* %5)[i64 10];
    i32 %86 = load i32* %85;
    i32 %87 = add i32 %84, i32 %86;
    store i32* %80 with i32 %87;
    i32* %88 = getelementptr &(i32* %0)[i64 11];
    i32* %89 = getelementptr &(i32* %1)[i64 11];
    i32 %90 = load i32* %89;
    i32 %91 = mul i32 %90, i32 %90;
    i32 %92 = srem i32 %91, i32 100;
    i32* %93 = getelementptr &(i32* %5)[i64 11];
    i32 %94 = load i32* %93;
    i32 %95 = add i32 %92, i32 %94;
    store i32* %88 with i32 %95;
    i32* %96 = getelementptr &(i32* %0)[i64 12];
    i32* %97 = getelementptr &(i32* %1)[i64 12];
    i32 %98 = load i32* %97;
    i32 %99 = mul i32 %98, i32 %98;
    i32 %100 = srem i32 %99, i32 100;
    i32* %101 = getelementptr &(i32* %5)[i64 12];
    i32 %102 = load i32* %101;
    i32 %103 = add i32 %100, i32 %102;
    store i32* %96 with i32 %103;
    i32* %104 = getelementptr &(i32* %0)[i64 13];
    i32* %105 = getelementptr &(i32* %1)[i64 13];
    i32 %106 = load i32* %105;
    i32 %107 = mul i32 %106, i32 %106;
    i32 %108 = srem i32 %107, i32 100;
    i32* %109 = getelementptr &(i32* %5)[i64 13];
    i32 %110 = load i32* %109;
    i32 %111 = add i32 %108, i32 %110;
    store i32* %104 with i32 %111;
    i32* %112 = getelementptr &(i32* %0)[i64 14];
    i32* %113 = getelementptr &(i32* %1)[i64 14];
    i32 %114 = load i32* %113;
    i32 %115 = mul i32 %114, i32 %114;
    i32 %116 = srem i32 %115, i32 100;
    i32* %117 = getelementptr &(i32* %5)[i64 14];
    i32 %118 = load i32* %117;
    i32 %119 = add i32 %116, i32 %118;
    store i32* %112 with i32 %119;
    i32* %120 = getelementptr &(i32* %0)[i64 15];
    i32* %121 = getelementptr &(i32* %1)[i64 15];
    i32 %122 = load i32* %121;
    i32 %123 = mul i32 %122, i32 %122;
    i32 %124 = srem i32 %123, i32 100;
    i32* %125 = getelementptr &(i32* %5)[i64 15];
    i32 %126 = load i32* %125;
    i32 %127 = add i32 %124, i32 %126;
    store i32* %120 with i32 %127;
    i32 %128 = add i32 %arg3, i32 16;
    i1 %129 = scmp lt i32 %128, i32 9984;
    cbr i1 %129(prob = 1), [ ^while.body4 [10000 * i32]* %arg, [10000 * i32]* %arg1, [10000 * i32]* %arg2, i32 %128, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32* %arg22, i32* %arg23, i32* %arg24, i32* %arg25, i32* %arg26, i32* %arg27, i32* %arg28, i32* %arg29, i32* %arg30, i32* %arg31, i32* %arg32, i32* %arg33, i32* %arg34, i32* %arg35, i32* %arg36, i32* %arg37, i32* %arg38, i32* %arg39, i32* %arg40, i32* %arg41, i32* %arg42, i32* %arg43 ], [ ^while.body5 [10000 * i32]* %arg, [10000 * i32]* %arg1, [10000 * i32]* %arg2, i32* %arg11, i32* %arg10, i32* %arg9, i32* %arg8, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg13, i32* %arg12, i32* %arg26, i32* %arg25, i32* %arg24, i32* %arg23, i32* %arg22, i32* %arg18, i32* %arg21, i32* %arg17, i32* %arg16, i32* %arg15, i32* %arg20, i32* %arg19, i32* %arg14, i32* %arg27, i32* %arg28, i32* %arg29, i32* %arg30, i32* %arg31, i32* %arg32, i32* %arg36, i32* %arg37, i32* %arg38, i32* %arg39, i32* %arg40, i32* %arg41, i32* %arg42, i32* %arg43, i32* %arg35, i32* %arg34, i32* %arg33 ];
^while.body5([10000 * i32]* %arg, [10000 * i32]* %arg1, [10000 * i32]* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32* %arg22, i32* %arg23, i32* %arg24, i32* %arg25, i32* %arg26, i32* %arg27, i32* %arg28, i32* %arg29, i32* %arg30, i32* %arg31, i32* %arg32, i32* %arg33, i32* %arg34, i32* %arg35, i32* %arg36, i32* %arg37, i32* %arg38, i32* %arg39, i32* %arg40, i32* %arg41, i32* %arg42):
    i32* %0 = getelementptr &([10000 * i32]* %arg1)[i64 0][i64 9984];
    i32 %1 = load i32* %arg12;
    i32 %2 = mul i32 %1, i32 %1;
    i32 %3 = srem i32 %2, i32 100;
    i32 %4 = load i32* %arg11;
    i32 %5 = add i32 %3, i32 %4;
    store i32* %0 with i32 %5;
    i32* %6 = getelementptr &([10000 * i32]* %arg1)[i64 0][i64 9985];
    i32 %7 = load i32* %arg22;
    i32 %8 = mul i32 %7, i32 %7;
    i32 %9 = srem i32 %8, i32 100;
    i32 %10 = load i32* %arg38;
    i32 %11 = add i32 %9, i32 %10;
    store i32* %6 with i32 %11;
    i32* %12 = getelementptr &([10000 * i32]* %arg1)[i64 0][i64 9986];
    i32 %13 = load i32* %arg20;
    i32 %14 = mul i32 %13, i32 %13;
    i32 %15 = srem i32 %14, i32 100;
    i32 %16 = load i32* %arg23;
    i32 %17 = add i32 %15, i32 %16;
    store i32* %12 with i32 %17;
    i32* %18 = getelementptr &([10000 * i32]* %arg1)[i64 0][i64 9987];
    i32 %19 = load i32* %arg19;
    i32 %20 = mul i32 %19, i32 %19;
    i32 %21 = srem i32 %20, i32 100;
    i32 %22 = load i32* %arg41;
    i32 %23 = add i32 %21, i32 %22;
    store i32* %18 with i32 %23;
    i32* %24 = getelementptr &([10000 * i32]* %arg1)[i64 0][i64 9988];
    i32 %25 = load i32* %arg17;
    i32 %26 = mul i32 %25, i32 %25;
    i32 %27 = srem i32 %26, i32 100;
    i32 %28 = load i32* %arg33;
    i32 %29 = add i32 %27, i32 %28;
    store i32* %24 with i32 %29;
    i32* %30 = getelementptr &([10000 * i32]* %arg1)[i64 0][i64 9989];
    i32 %31 = load i32* %arg16;
    i32 %32 = mul i32 %31, i32 %31;
    i32 %33 = srem i32 %32, i32 100;
    i32 %34 = load i32* %arg15;
    i32 %35 = add i32 %33, i32 %34;
    store i32* %30 with i32 %35;
    i32* %36 = getelementptr &([10000 * i32]* %arg1)[i64 0][i64 9990];
    i32 %37 = load i32* %arg13;
    i32 %38 = mul i32 %37, i32 %37;
    i32 %39 = srem i32 %38, i32 100;
    i32 %40 = load i32* %arg28;
    i32 %41 = add i32 %39, i32 %40;
    store i32* %36 with i32 %41;
    i32* %42 = getelementptr &([10000 * i32]* %arg1)[i64 0][i64 9991];
    i32 %43 = load i32* %arg30;
    i32 %44 = mul i32 %43, i32 %43;
    i32 %45 = srem i32 %44, i32 100;
    i32 %46 = load i32* %arg26;
    i32 %47 = add i32 %45, i32 %46;
    store i32* %42 with i32 %47;
    i32* %48 = getelementptr &([10000 * i32]* %arg1)[i64 0][i64 9992];
    i32 %49 = load i32* %arg37;
    i32 %50 = mul i32 %49, i32 %49;
    i32 %51 = srem i32 %50, i32 100;
    i32 %52 = load i32* %arg18;
    i32 %53 = add i32 %51, i32 %52;
    store i32* %48 with i32 %53;
    i32* %54 = getelementptr &([10000 * i32]* %arg1)[i64 0][i64 9993];
    i32 %55 = load i32* %arg40;
    i32 %56 = mul i32 %55, i32 %55;
    i32 %57 = srem i32 %56, i32 100;
    i32 %58 = load i32* %arg27;
    i32 %59 = add i32 %57, i32 %58;
    store i32* %54 with i32 %59;
    i32* %60 = getelementptr &([10000 * i32]* %arg1)[i64 0][i64 9994];
    i32 %61 = load i32* %arg14;
    i32 %62 = mul i32 %61, i32 %61;
    i32 %63 = srem i32 %62, i32 100;
    i32 %64 = load i32* %arg31;
    i32 %65 = add i32 %63, i32 %64;
    store i32* %60 with i32 %65;
    i32* %66 = getelementptr &([10000 * i32]* %arg1)[i64 0][i64 9995];
    i32 %67 = load i32* %arg34;
    i32 %68 = mul i32 %67, i32 %67;
    i32 %69 = srem i32 %68, i32 100;
    i32 %70 = load i32* %arg35;
    i32 %71 = add i32 %69, i32 %70;
    store i32* %66 with i32 %71;
    i32* %72 = getelementptr &([10000 * i32]* %arg1)[i64 0][i64 9996];
    i32 %73 = load i32* %arg29;
    i32 %74 = mul i32 %73, i32 %73;
    i32 %75 = srem i32 %74, i32 100;
    i32 %76 = load i32* %arg39;
    i32 %77 = add i32 %75, i32 %76;
    store i32* %72 with i32 %77;
    i32* %78 = getelementptr &([10000 * i32]* %arg1)[i64 0][i64 9997];
    i32 %79 = load i32* %arg36;
    i32 %80 = mul i32 %79, i32 %79;
    i32 %81 = srem i32 %80, i32 100;
    i32 %82 = load i32* %arg24;
    i32 %83 = add i32 %81, i32 %82;
    store i32* %78 with i32 %83;
    i32* %84 = getelementptr &([10000 * i32]* %arg1)[i64 0][i64 9998];
    i32 %85 = load i32* %arg25;
    i32 %86 = mul i32 %85, i32 %85;
    i32 %87 = srem i32 %86, i32 100;
    i32 %88 = load i32* %arg42;
    i32 %89 = add i32 %87, i32 %88;
    store i32* %84 with i32 %89;
    i32* %90 = getelementptr &([10000 * i32]* %arg1)[i64 0][i64 9999];
    i32 %91 = load i32* %arg21;
    i32 %92 = mul i32 %91, i32 %91;
    i32 %93 = srem i32 %92, i32 100;
    i32 %94 = load i32* %arg32;
    i32 %95 = add i32 %93, i32 %94;
    store i32* %90 with i32 %95;
    ubr [ ^while.body6 [10000 * i32]* %arg, [10000 * i32]* %arg1, [10000 * i32]* %arg2, i32 0, i32 0, i32* %arg10, i32* %arg9, i32* %arg8, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg3 ];
^while.body6([10000 * i32]* %arg, [10000 * i32]* %arg1, [10000 * i32]* %arg2, i32 %arg3, i32 %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12):
    i1 %0 = scmp lt i32 %arg3, i32 10;
    cbr i1 %0(prob = 0.5), [ ^indirect [10000 * i32]* %arg, [10000 * i32]* %arg2, [10000 * i32]* %arg1, i32 %arg3, i32 %arg3, i32 %arg4, i32* %arg12, i32* %arg11, i32* %arg10, i32* %arg9, i32* %arg8, i32* %arg7, i32* %arg6, i32* %arg5 ], [ ^indirect1 [10000 * i32]* %arg1, [10000 * i32]* %arg, [10000 * i32]* %arg2, i32 %arg3, i32 %arg3, i32 %arg4, i32* %arg12, i32* %arg11, i32* %arg10, i32* %arg9, i32* %arg8, i32* %arg7, i32* %arg6, i32* %arg5 ];
^indirect([10000 * i32]* %arg, [10000 * i32]* %arg1, [10000 * i32]* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13):
    i32* %0 = getelementptr &([10000 * i32]* %arg2)[i64 0][i32 %arg3];
    i32 %1 = load i32* %0;
    i32 %2 = add i32 %1, i32 %arg5;
    i32 %3 = srem i32 %2, i32 1333;
    call (i32) -> void @putint(i32 %3);
    i32 %4 = add i32 %arg4, i32 1;
    i1 %5 = scmp lt i32 %4, i32 10000;
    cbr i1 %5(prob = 0.97), [ ^while.body6 [10000 * i32]* %arg, [10000 * i32]* %arg2, [10000 * i32]* %arg1, i32 %4, i32 %3, i32* %arg13, i32* %arg12, i32* %arg11, i32* %arg10, i32* %arg9, i32* %arg8, i32* %arg7, i32* %arg6 ], [ ^b i32 %3 ];
^indirect1([10000 * i32]* %arg, [10000 * i32]* %arg1, [10000 * i32]* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13):
    i1 %0 = scmp lt i32 %arg3, i32 20;
    cbr i1 %0(prob = 0.5), [ ^while.body7 [10000 * i32]* %arg1, [10000 * i32]* %arg2, [10000 * i32]* %arg, i32 %arg4, i32 %arg5, i32 5000, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13 ], [ ^if.else [10000 * i32]* %arg1, [10000 * i32]* %arg, [10000 * i32]* %arg2, i32 %arg4, i32 %arg5, i32* %arg13, i32* %arg12, i32* %arg11, i32* %arg10, i32* %arg9, i32* %arg8, i32* %arg7, i32* %arg6 ];
^while.body7([10000 * i32]* %arg, [10000 * i32]* %arg1, [10000 * i32]* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13):
    i32* %0 = getelementptr &([10000 * i32]* %arg2)[i64 0][i32 %arg3];
    i32 %1 = load i32* %0;
    i32 %2 = add i32 %arg4, i32 %1;
    i32* %3 = getelementptr &([10000 * i32]* %arg)[i64 0][i32 %arg5];
    i32 %4 = load i32* %3;
    i32 %5 = sub i32 %2, i32 %4;
    i32 %6 = add i32 %1, i32 %5;
    i32* %7 = getelementptr &(i32* %3)[i64 1];
    i32 %8 = load i32* %7;
    i32 %9 = sub i32 %6, i32 %8;
    i32 %10 = add i32 %1, i32 %9;
    i32* %11 = getelementptr &(i32* %3)[i64 2];
    i32 %12 = load i32* %11;
    i32 %13 = sub i32 %10, i32 %12;
    i32 %14 = add i32 %1, i32 %13;
    i32* %15 = getelementptr &(i32* %3)[i64 3];
    i32 %16 = load i32* %15;
    i32 %17 = sub i32 %14, i32 %16;
    i32 %18 = add i32 %1, i32 %17;
    i32* %19 = getelementptr &(i32* %3)[i64 4];
    i32 %20 = load i32* %19;
    i32 %21 = sub i32 %18, i32 %20;
    i32 %22 = add i32 %1, i32 %21;
    i32* %23 = getelementptr &(i32* %3)[i64 5];
    i32 %24 = load i32* %23;
    i32 %25 = sub i32 %22, i32 %24;
    i32 %26 = add i32 %1, i32 %25;
    i32* %27 = getelementptr &(i32* %3)[i64 6];
    i32 %28 = load i32* %27;
    i32 %29 = sub i32 %26, i32 %28;
    i32 %30 = add i32 %1, i32 %29;
    i32* %31 = getelementptr &(i32* %3)[i64 7];
    i32 %32 = load i32* %31;
    i32 %33 = sub i32 %30, i32 %32;
    i32 %34 = add i32 %1, i32 %33;
    i32* %35 = getelementptr &(i32* %3)[i64 8];
    i32 %36 = load i32* %35;
    i32 %37 = sub i32 %34, i32 %36;
    i32 %38 = add i32 %1, i32 %37;
    i32* %39 = getelementptr &(i32* %3)[i64 9];
    i32 %40 = load i32* %39;
    i32 %41 = sub i32 %38, i32 %40;
    i32 %42 = add i32 %1, i32 %41;
    i32* %43 = getelementptr &(i32* %3)[i64 10];
    i32 %44 = load i32* %43;
    i32 %45 = sub i32 %42, i32 %44;
    i32 %46 = add i32 %1, i32 %45;
    i32* %47 = getelementptr &(i32* %3)[i64 11];
    i32 %48 = load i32* %47;
    i32 %49 = sub i32 %46, i32 %48;
    i32 %50 = add i32 %1, i32 %49;
    i32* %51 = getelementptr &(i32* %3)[i64 12];
    i32 %52 = load i32* %51;
    i32 %53 = sub i32 %50, i32 %52;
    i32 %54 = add i32 %1, i32 %53;
    i32* %55 = getelementptr &(i32* %3)[i64 13];
    i32 %56 = load i32* %55;
    i32 %57 = sub i32 %54, i32 %56;
    i32 %58 = add i32 %1, i32 %57;
    i32* %59 = getelementptr &(i32* %3)[i64 14];
    i32 %60 = load i32* %59;
    i32 %61 = sub i32 %58, i32 %60;
    i32 %62 = add i32 %1, i32 %61;
    i32* %63 = getelementptr &(i32* %3)[i64 15];
    i32 %64 = load i32* %63;
    i32 %65 = sub i32 %62, i32 %64;
    i32 %66 = add i32 %arg5, i32 16;
    i1 %67 = scmp lt i32 %66, i32 9992;
    cbr i1 %67(prob = 1), [ ^while.body7 [10000 * i32]* %arg, [10000 * i32]* %arg1, [10000 * i32]* %arg2, i32 %arg3, i32 %65, i32 %66, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13 ], [ ^while.body8 [10000 * i32]* %arg, [10000 * i32]* %arg1, [10000 * i32]* %arg2, i32 %arg3, i32 %65, i32* %arg13, i32* %arg12, i32* %arg11, i32* %arg10, i32* %arg9, i32* %arg8, i32* %arg7, i32* %arg6 ];
^if.else([10000 * i32]* %arg, [10000 * i32]* %arg1, [10000 * i32]* %arg2, i32 %arg3, i32 %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12):
    i1 %0 = scmp lt i32 %arg3, i32 30;
    cbr i1 %0(prob = 0.5), [ ^while.body9 [10000 * i32]* %arg1, [10000 * i32]* %arg2, [10000 * i32]* %arg, i32 %arg3, i32 %arg4, i32 5000, i32* %arg12, i32* %arg11, i32* %arg10, i32* %arg9, i32* %arg8, i32* %arg7, i32* %arg6, i32* %arg5 ], [ ^indirect2 [10000 * i32]* %arg, [10000 * i32]* %arg2, [10000 * i32]* %arg1, i32 %arg3, i32 %arg4, i32* %arg12, i32* %arg11, i32* %arg10, i32* %arg9, i32* %arg8, i32* %arg7, i32* %arg6, i32* %arg5 ];
^b(i32 %arg):
    ret i32 %arg;
^while.body8([10000 * i32]* %arg, [10000 * i32]* %arg1, [10000 * i32]* %arg2, i32 %arg3, i32 %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12):
    i32* %0 = getelementptr &([10000 * i32]* %arg2)[i64 0][i32 %arg3];
    i32 %1 = load i32* %0;
    i32 %2 = add i32 %arg4, i32 %1;
    i32 %3 = load i32* %arg12;
    i32 %4 = sub i32 %2, i32 %3;
    i32 %5 = add i32 %1, i32 %4;
    i32 %6 = load i32* %arg11;
    i32 %7 = sub i32 %5, i32 %6;
    i32 %8 = add i32 %1, i32 %7;
    i32 %9 = load i32* %arg10;
    i32 %10 = sub i32 %8, i32 %9;
    i32 %11 = add i32 %1, i32 %10;
    i32 %12 = load i32* %arg9;
    i32 %13 = sub i32 %11, i32 %12;
    i32 %14 = add i32 %1, i32 %13;
    i32 %15 = load i32* %arg8;
    i32 %16 = sub i32 %14, i32 %15;
    i32 %17 = add i32 %1, i32 %16;
    i32 %18 = load i32* %arg7;
    i32 %19 = sub i32 %17, i32 %18;
    i32 %20 = add i32 %1, i32 %19;
    i32 %21 = load i32* %arg6;
    i32 %22 = sub i32 %20, i32 %21;
    i32 %23 = add i32 %1, i32 %22;
    i32 %24 = load i32* %arg5;
    i32 %25 = sub i32 %23, i32 %24;
    ubr [ ^b1 [10000 * i32]* %arg, [10000 * i32]* %arg1, [10000 * i32]* %arg2, i32 %arg3, i32 %25, i32* %arg12, i32* %arg11, i32* %arg10, i32* %arg9, i32* %arg8, i32* %arg7, i32* %arg6, i32* %arg5 ];
^while.body9([10000 * i32]* %arg, [10000 * i32]* %arg1, [10000 * i32]* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13):
    i1 %0 = scmp gt i32 %arg5, i32 2233;
    cbr i1 %0(prob = 0.5), [ ^indirect3 [10000 * i32]* %arg2, [10000 * i32]* %arg1, [10000 * i32]* %arg, i32 %arg5, i32 %arg3, i32 %arg4, i32* %arg13, i32* %arg12, i32* %arg11, i32* %arg10, i32* %arg9, i32* %arg8, i32* %arg7, i32* %arg6 ], [ ^indirect4 [10000 * i32]* %arg2, [10000 * i32]* %arg1, [10000 * i32]* %arg, i32 %arg5, i32 %arg3, i32 %arg4, i32* %arg13, i32* %arg12, i32* %arg11, i32* %arg10, i32* %arg9, i32* %arg8, i32* %arg7, i32* %arg6 ];
^indirect2([10000 * i32]* %arg, [10000 * i32]* %arg1, [10000 * i32]* %arg2, i32 %arg3, i32 %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12):
    i32* %0 = getelementptr &([10000 * i32]* %arg2)[i64 0][i32 %arg3];
    i32 %1 = load i32* %0;
    i32 %2 = mul i32 %1, i32 9;
    i32 %3 = add i32 %2, i32 %arg4;
    i32 %4 = srem i32 %3, i32 99988;
    i32 %5 = add i32 %arg3, i32 1;
    i1 %6 = scmp lt i32 %5, i32 10000;
    cbr i1 %6(prob = 0.97), [ ^while.body6 [10000 * i32]* %arg, [10000 * i32]* %arg2, [10000 * i32]* %arg1, i32 %5, i32 %4, i32* %arg12, i32* %arg11, i32* %arg10, i32* %arg9, i32* %arg8, i32* %arg7, i32* %arg6, i32* %arg5 ], [ ^b i32 %4 ];
^b1([10000 * i32]* %arg, [10000 * i32]* %arg1, [10000 * i32]* %arg2, i32 %arg3, i32 %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12):
    call (i32) -> void @putint(i32 %arg4);
    i32 %0 = add i32 %arg3, i32 1;
    i1 %1 = scmp lt i32 %0, i32 10000;
    cbr i1 %1(prob = 0.97), [ ^while.body6 [10000 * i32]* %arg, [10000 * i32]* %arg2, [10000 * i32]* %arg1, i32 %0, i32 %arg4, i32* %arg12, i32* %arg11, i32* %arg10, i32* %arg9, i32* %arg8, i32* %arg7, i32* %arg6, i32* %arg5 ], [ ^b i32 %arg4 ];
^indirect3([10000 * i32]* %arg, [10000 * i32]* %arg1, [10000 * i32]* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13):
    i32* %0 = getelementptr &([10000 * i32]* %arg1)[i64 0][i32 %arg4];
    i32 %1 = load i32* %0;
    i32 %2 = add i32 %1, i32 %arg5;
    i32* %3 = getelementptr &([10000 * i32]* %arg)[i64 0][i32 %arg3];
    i32 %4 = load i32* %3;
    i32 %5 = sub i32 %2, i32 %4;
    i32 %6 = add i32 %arg3, i32 1;
    i1 %7 = scmp lt i32 %6, i32 10000;
    cbr i1 %7(prob = 0.97), [ ^while.body9 [10000 * i32]* %arg2, [10000 * i32]* %arg1, [10000 * i32]* %arg, i32 %arg4, i32 %5, i32 %6, i32* %arg13, i32* %arg12, i32* %arg11, i32* %arg10, i32* %arg9, i32* %arg8, i32* %arg7, i32* %arg6 ], [ ^b1 [10000 * i32]* %arg, [10000 * i32]* %arg1, [10000 * i32]* %arg2, i32 %arg4, i32 %5, i32* %arg13, i32* %arg12, i32* %arg11, i32* %arg10, i32* %arg9, i32* %arg8, i32* %arg7, i32* %arg6 ];
^indirect4([10000 * i32]* %arg, [10000 * i32]* %arg1, [10000 * i32]* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13):
    i32* %0 = getelementptr &([10000 * i32]* %arg)[i64 0][i32 %arg4];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &([10000 * i32]* %arg2)[i64 0][i32 %arg3];
    i32 %3 = load i32* %2;
    i32 %4 = add i32 %1, i32 %3;
    i32 %5 = add i32 %4, i32 %arg5;
    i32 %6 = srem i32 %5, i32 13333;
    i32 %7 = add i32 %arg3, i32 2;
    i1 %8 = scmp lt i32 %7, i32 10000;
    cbr i1 %8(prob = 0.97), [ ^while.body9 [10000 * i32]* %arg2, [10000 * i32]* %arg1, [10000 * i32]* %arg, i32 %arg4, i32 %6, i32 %7, i32* %arg13, i32* %arg12, i32* %arg11, i32* %arg10, i32* %arg9, i32* %arg8, i32* %arg7, i32* %arg6 ], [ ^b1 [10000 * i32]* %arg, [10000 * i32]* %arg1, [10000 * i32]* %arg2, i32 %arg4, i32 %6, i32* %arg13, i32* %arg12, i32* %arg11, i32* %arg10, i32* %arg9, i32* %arg8, i32* %arg7, i32* %arg6 ];
}
