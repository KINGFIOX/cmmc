internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [10000 * i32]* %a1 = alloc [10000 * i32];
    [10000 * i32]* %a2 = alloc [10000 * i32];
    [10000 * i32]* %a3 = alloc [10000 * i32];
    ubr ^while.body;
^while.body:
    i32 %0 = phi [^entry, i32 0] [^while.body, i32 %16];
    i32 %1 = add i32 %0, i32 1;
    i32 %2 = add i32 %0, i32 2;
    i32 %3 = add i32 %0, i32 3;
    i32 %4 = add i32 %0, i32 4;
    i32 %5 = add i32 %0, i32 5;
    i32 %6 = add i32 %0, i32 6;
    i32 %7 = add i32 %0, i32 7;
    i32 %8 = add i32 %0, i32 8;
    i32 %9 = add i32 %0, i32 9;
    i32 %10 = add i32 %0, i32 10;
    i32 %11 = add i32 %0, i32 11;
    i32 %12 = add i32 %0, i32 12;
    i32 %13 = add i32 %0, i32 13;
    i32 %14 = add i32 %0, i32 14;
    i32 %15 = add i32 %0, i32 15;
    i32 %16 = add i32 %0, i32 16;
    i32 %17 = mul i32 %0, i32 %0;
    i32 %18 = mul i32 %1, i32 %1;
    i32 %19 = mul i32 %2, i32 %2;
    i32 %20 = mul i32 %3, i32 %3;
    i32 %21 = mul i32 %4, i32 %4;
    i32 %22 = mul i32 %5, i32 %5;
    i32 %23 = mul i32 %6, i32 %6;
    i32 %24 = mul i32 %7, i32 %7;
    i32 %25 = mul i32 %8, i32 %8;
    i32 %26 = mul i32 %9, i32 %9;
    i32 %27 = mul i32 %10, i32 %10;
    i32 %28 = mul i32 %11, i32 %11;
    i32 %29 = mul i32 %12, i32 %12;
    i32 %30 = mul i32 %13, i32 %13;
    i32 %31 = mul i32 %14, i32 %14;
    i32 %32 = mul i32 %15, i32 %15;
    i32 %33 = srem i32 %17, i32 10;
    i32 %34 = srem i32 %18, i32 10;
    i32 %35 = srem i32 %19, i32 10;
    i32 %36 = srem i32 %20, i32 10;
    i32 %37 = srem i32 %21, i32 10;
    i32 %38 = srem i32 %22, i32 10;
    i32 %39 = srem i32 %23, i32 10;
    i32 %40 = srem i32 %24, i32 10;
    i32 %41 = srem i32 %25, i32 10;
    i32 %42 = srem i32 %26, i32 10;
    i32 %43 = srem i32 %27, i32 10;
    i32 %44 = srem i32 %28, i32 10;
    i32 %45 = srem i32 %29, i32 10;
    i32 %46 = srem i32 %30, i32 10;
    i32 %47 = srem i32 %31, i32 10;
    i32 %48 = srem i32 %32, i32 10;
    i1 %49 = scmp lt i32 %16, i32 10000;
    i32* %50 = getelementptr &([10000 * i32]* %a1)[i64 0][i32 %0];
    store i32* %50 with i32 %33;
    i32* %51 = getelementptr &(i32* %50)[i64 1];
    store i32* %51 with i32 %34;
    i32* %52 = getelementptr &(i32* %50)[i64 2];
    store i32* %52 with i32 %35;
    i32* %53 = getelementptr &(i32* %50)[i64 3];
    store i32* %53 with i32 %36;
    i32* %54 = getelementptr &(i32* %50)[i64 4];
    store i32* %54 with i32 %37;
    i32* %55 = getelementptr &(i32* %50)[i64 5];
    store i32* %55 with i32 %38;
    i32* %56 = getelementptr &(i32* %50)[i64 6];
    store i32* %56 with i32 %39;
    i32* %57 = getelementptr &(i32* %50)[i64 7];
    store i32* %57 with i32 %40;
    i32* %58 = getelementptr &(i32* %50)[i64 8];
    store i32* %58 with i32 %41;
    i32* %59 = getelementptr &(i32* %50)[i64 9];
    store i32* %59 with i32 %42;
    i32* %60 = getelementptr &(i32* %50)[i64 10];
    store i32* %60 with i32 %43;
    i32* %61 = getelementptr &(i32* %50)[i64 11];
    store i32* %61 with i32 %44;
    i32* %62 = getelementptr &(i32* %50)[i64 12];
    store i32* %62 with i32 %45;
    i32* %63 = getelementptr &(i32* %50)[i64 13];
    store i32* %63 with i32 %46;
    i32* %64 = getelementptr &(i32* %50)[i64 14];
    store i32* %64 with i32 %47;
    i32* %65 = getelementptr &(i32* %50)[i64 15];
    store i32* %65 with i32 %48;
    cbr i1 %49(prob = 1), ^while.body, ^while.body1;
^while.body1:
    i32 %66 = phi [^while.body, i32 0] [^while.body1, i32 %67];
    i32 %67 = add i32 %66, i32 16;
    i1 %68 = scmp lt i32 %67, i32 10000;
    i32* %69 = getelementptr &([10000 * i32]* %a1)[i64 0][i32 %66];
    i32 %70 = load i32* %69;
    i32 %71 = mul i32 %70, i32 %70;
    i32 %72 = srem i32 %71, i32 10;
    i32* %73 = getelementptr &(i32* %69)[i64 1];
    i32* %74 = getelementptr &(i32* %69)[i64 2];
    i32* %75 = getelementptr &(i32* %69)[i64 3];
    i32* %76 = getelementptr &(i32* %69)[i64 4];
    i32* %77 = getelementptr &(i32* %69)[i64 5];
    i32* %78 = getelementptr &(i32* %69)[i64 6];
    i32* %79 = getelementptr &(i32* %69)[i64 7];
    i32* %80 = getelementptr &(i32* %69)[i64 8];
    i32* %81 = getelementptr &(i32* %69)[i64 9];
    i32* %82 = getelementptr &(i32* %69)[i64 10];
    i32* %83 = getelementptr &(i32* %69)[i64 11];
    i32* %84 = getelementptr &(i32* %69)[i64 12];
    i32* %85 = getelementptr &(i32* %69)[i64 13];
    i32* %86 = getelementptr &(i32* %69)[i64 14];
    i32* %87 = getelementptr &(i32* %69)[i64 15];
    i32* %88 = getelementptr &([10000 * i32]* %a2)[i64 0][i32 %66];
    store i32* %88 with i32 %72;
    i32 %89 = load i32* %73;
    i32 %90 = mul i32 %89, i32 %89;
    i32 %91 = srem i32 %90, i32 10;
    i32* %92 = getelementptr &(i32* %88)[i64 1];
    store i32* %92 with i32 %91;
    i32 %93 = load i32* %74;
    i32 %94 = mul i32 %93, i32 %93;
    i32 %95 = srem i32 %94, i32 10;
    i32* %96 = getelementptr &(i32* %88)[i64 2];
    store i32* %96 with i32 %95;
    i32 %97 = load i32* %75;
    i32 %98 = mul i32 %97, i32 %97;
    i32 %99 = srem i32 %98, i32 10;
    i32* %100 = getelementptr &(i32* %88)[i64 3];
    store i32* %100 with i32 %99;
    i32 %101 = load i32* %76;
    i32 %102 = mul i32 %101, i32 %101;
    i32 %103 = srem i32 %102, i32 10;
    i32* %104 = getelementptr &(i32* %88)[i64 4];
    store i32* %104 with i32 %103;
    i32 %105 = load i32* %77;
    i32 %106 = mul i32 %105, i32 %105;
    i32 %107 = srem i32 %106, i32 10;
    i32* %108 = getelementptr &(i32* %88)[i64 5];
    store i32* %108 with i32 %107;
    i32 %109 = load i32* %78;
    i32 %110 = mul i32 %109, i32 %109;
    i32 %111 = srem i32 %110, i32 10;
    i32* %112 = getelementptr &(i32* %88)[i64 6];
    store i32* %112 with i32 %111;
    i32 %113 = load i32* %79;
    i32 %114 = mul i32 %113, i32 %113;
    i32 %115 = srem i32 %114, i32 10;
    i32* %116 = getelementptr &(i32* %88)[i64 7];
    store i32* %116 with i32 %115;
    i32 %117 = load i32* %80;
    i32 %118 = mul i32 %117, i32 %117;
    i32 %119 = srem i32 %118, i32 10;
    i32* %120 = getelementptr &(i32* %88)[i64 8];
    store i32* %120 with i32 %119;
    i32 %121 = load i32* %81;
    i32 %122 = mul i32 %121, i32 %121;
    i32 %123 = srem i32 %122, i32 10;
    i32* %124 = getelementptr &(i32* %88)[i64 9];
    store i32* %124 with i32 %123;
    i32 %125 = load i32* %82;
    i32 %126 = mul i32 %125, i32 %125;
    i32 %127 = srem i32 %126, i32 10;
    i32* %128 = getelementptr &(i32* %88)[i64 10];
    store i32* %128 with i32 %127;
    i32 %129 = load i32* %83;
    i32 %130 = mul i32 %129, i32 %129;
    i32 %131 = srem i32 %130, i32 10;
    i32* %132 = getelementptr &(i32* %88)[i64 11];
    store i32* %132 with i32 %131;
    i32 %133 = load i32* %84;
    i32 %134 = mul i32 %133, i32 %133;
    i32 %135 = srem i32 %134, i32 10;
    i32* %136 = getelementptr &(i32* %88)[i64 12];
    store i32* %136 with i32 %135;
    i32 %137 = load i32* %85;
    i32 %138 = mul i32 %137, i32 %137;
    i32 %139 = srem i32 %138, i32 10;
    i32* %140 = getelementptr &(i32* %88)[i64 13];
    store i32* %140 with i32 %139;
    i32 %141 = load i32* %86;
    i32 %142 = mul i32 %141, i32 %141;
    i32 %143 = srem i32 %142, i32 10;
    i32* %144 = getelementptr &(i32* %88)[i64 14];
    store i32* %144 with i32 %143;
    i32 %145 = load i32* %87;
    i32 %146 = mul i32 %145, i32 %145;
    i32 %147 = srem i32 %146, i32 10;
    i32* %148 = getelementptr &(i32* %88)[i64 15];
    store i32* %148 with i32 %147;
    cbr i1 %68(prob = 1), ^while.body1, ^while.body2;
^while.body2:
    i32 %149 = phi [^while.body1, i32 0] [^while.body2, i32 %150];
    i32 %150 = add i32 %149, i32 16;
    i1 %151 = scmp lt i32 %150, i32 10000;
    i32* %152 = getelementptr &([10000 * i32]* %a1)[i64 0][i32 %149];
    i32* %153 = getelementptr &(i32* %152)[i64 1];
    i32* %154 = getelementptr &(i32* %152)[i64 2];
    i32* %155 = getelementptr &(i32* %152)[i64 3];
    i32* %156 = getelementptr &(i32* %152)[i64 4];
    i32* %157 = getelementptr &(i32* %152)[i64 5];
    i32* %158 = getelementptr &(i32* %152)[i64 6];
    i32* %159 = getelementptr &(i32* %152)[i64 7];
    i32* %160 = getelementptr &(i32* %152)[i64 8];
    i32* %161 = getelementptr &(i32* %152)[i64 9];
    i32* %162 = getelementptr &(i32* %152)[i64 10];
    i32* %163 = getelementptr &(i32* %152)[i64 11];
    i32* %164 = getelementptr &(i32* %152)[i64 12];
    i32* %165 = getelementptr &(i32* %152)[i64 13];
    i32* %166 = getelementptr &(i32* %152)[i64 14];
    i32* %167 = getelementptr &(i32* %152)[i64 15];
    i32* %168 = getelementptr &([10000 * i32]* %a2)[i64 0][i32 %149];
    i32 %169 = load i32* %168;
    i32 %170 = load i32* %152;
    i32 %171 = mul i32 %169, i32 %169;
    i32 %172 = srem i32 %171, i32 100;
    i32 %173 = add i32 %172, i32 %170;
    i32* %174 = getelementptr &(i32* %168)[i64 1];
    i32* %175 = getelementptr &(i32* %168)[i64 2];
    i32* %176 = getelementptr &(i32* %168)[i64 3];
    i32* %177 = getelementptr &(i32* %168)[i64 4];
    i32* %178 = getelementptr &(i32* %168)[i64 5];
    i32* %179 = getelementptr &(i32* %168)[i64 6];
    i32* %180 = getelementptr &(i32* %168)[i64 7];
    i32* %181 = getelementptr &(i32* %168)[i64 8];
    i32* %182 = getelementptr &(i32* %168)[i64 9];
    i32* %183 = getelementptr &(i32* %168)[i64 10];
    i32* %184 = getelementptr &(i32* %168)[i64 11];
    i32* %185 = getelementptr &(i32* %168)[i64 12];
    i32* %186 = getelementptr &(i32* %168)[i64 13];
    i32* %187 = getelementptr &(i32* %168)[i64 14];
    i32* %188 = getelementptr &(i32* %168)[i64 15];
    i32* %189 = getelementptr &([10000 * i32]* %a3)[i64 0][i32 %149];
    store i32* %189 with i32 %173;
    i32 %190 = load i32* %174;
    i32 %191 = load i32* %153;
    i32 %192 = mul i32 %190, i32 %190;
    i32 %193 = srem i32 %192, i32 100;
    i32 %194 = add i32 %193, i32 %191;
    i32* %195 = getelementptr &(i32* %189)[i64 1];
    store i32* %195 with i32 %194;
    i32 %196 = load i32* %175;
    i32 %197 = load i32* %154;
    i32 %198 = mul i32 %196, i32 %196;
    i32 %199 = srem i32 %198, i32 100;
    i32 %200 = add i32 %199, i32 %197;
    i32* %201 = getelementptr &(i32* %189)[i64 2];
    store i32* %201 with i32 %200;
    i32 %202 = load i32* %176;
    i32 %203 = load i32* %155;
    i32 %204 = mul i32 %202, i32 %202;
    i32 %205 = srem i32 %204, i32 100;
    i32 %206 = add i32 %205, i32 %203;
    i32* %207 = getelementptr &(i32* %189)[i64 3];
    store i32* %207 with i32 %206;
    i32 %208 = load i32* %177;
    i32 %209 = load i32* %156;
    i32 %210 = mul i32 %208, i32 %208;
    i32 %211 = srem i32 %210, i32 100;
    i32 %212 = add i32 %211, i32 %209;
    i32* %213 = getelementptr &(i32* %189)[i64 4];
    store i32* %213 with i32 %212;
    i32 %214 = load i32* %178;
    i32 %215 = load i32* %157;
    i32 %216 = mul i32 %214, i32 %214;
    i32 %217 = srem i32 %216, i32 100;
    i32 %218 = add i32 %217, i32 %215;
    i32* %219 = getelementptr &(i32* %189)[i64 5];
    store i32* %219 with i32 %218;
    i32 %220 = load i32* %179;
    i32 %221 = load i32* %158;
    i32 %222 = mul i32 %220, i32 %220;
    i32 %223 = srem i32 %222, i32 100;
    i32 %224 = add i32 %223, i32 %221;
    i32* %225 = getelementptr &(i32* %189)[i64 6];
    store i32* %225 with i32 %224;
    i32 %226 = load i32* %180;
    i32 %227 = load i32* %159;
    i32 %228 = mul i32 %226, i32 %226;
    i32 %229 = srem i32 %228, i32 100;
    i32 %230 = add i32 %229, i32 %227;
    i32* %231 = getelementptr &(i32* %189)[i64 7];
    store i32* %231 with i32 %230;
    i32 %232 = load i32* %181;
    i32 %233 = load i32* %160;
    i32 %234 = mul i32 %232, i32 %232;
    i32 %235 = srem i32 %234, i32 100;
    i32 %236 = add i32 %235, i32 %233;
    i32* %237 = getelementptr &(i32* %189)[i64 8];
    store i32* %237 with i32 %236;
    i32 %238 = load i32* %182;
    i32 %239 = load i32* %161;
    i32 %240 = mul i32 %238, i32 %238;
    i32 %241 = srem i32 %240, i32 100;
    i32 %242 = add i32 %241, i32 %239;
    i32* %243 = getelementptr &(i32* %189)[i64 9];
    store i32* %243 with i32 %242;
    i32 %244 = load i32* %183;
    i32 %245 = load i32* %162;
    i32 %246 = mul i32 %244, i32 %244;
    i32 %247 = srem i32 %246, i32 100;
    i32 %248 = add i32 %247, i32 %245;
    i32* %249 = getelementptr &(i32* %189)[i64 10];
    store i32* %249 with i32 %248;
    i32 %250 = load i32* %184;
    i32 %251 = load i32* %163;
    i32 %252 = mul i32 %250, i32 %250;
    i32 %253 = srem i32 %252, i32 100;
    i32 %254 = add i32 %253, i32 %251;
    i32* %255 = getelementptr &(i32* %189)[i64 11];
    store i32* %255 with i32 %254;
    i32 %256 = load i32* %185;
    i32 %257 = load i32* %164;
    i32 %258 = mul i32 %256, i32 %256;
    i32 %259 = srem i32 %258, i32 100;
    i32 %260 = add i32 %259, i32 %257;
    i32* %261 = getelementptr &(i32* %189)[i64 12];
    store i32* %261 with i32 %260;
    i32 %262 = load i32* %186;
    i32 %263 = load i32* %165;
    i32 %264 = mul i32 %262, i32 %262;
    i32 %265 = srem i32 %264, i32 100;
    i32 %266 = add i32 %265, i32 %263;
    i32* %267 = getelementptr &(i32* %189)[i64 13];
    store i32* %267 with i32 %266;
    i32 %268 = load i32* %187;
    i32 %269 = load i32* %166;
    i32 %270 = mul i32 %268, i32 %268;
    i32 %271 = srem i32 %270, i32 100;
    i32 %272 = add i32 %271, i32 %269;
    i32* %273 = getelementptr &(i32* %189)[i64 14];
    store i32* %273 with i32 %272;
    i32 %274 = load i32* %188;
    i32 %275 = load i32* %167;
    i32 %276 = mul i32 %274, i32 %274;
    i32 %277 = srem i32 %276, i32 100;
    i32 %278 = add i32 %277, i32 %275;
    i32* %279 = getelementptr &(i32* %189)[i64 15];
    store i32* %279 with i32 %278;
    cbr i1 %151(prob = 1), ^while.body2, ^while.body3;
^while.body3:
    i32 %280 = phi [^while.body2, i32 0] [^b, i32 %292];
    i32 %281 = phi [^while.body2, i32 0] [^b, i32 %291];
    i1 %282 = scmp lt i32 %280, i32 10;
    i32* %283 = getelementptr &([10000 * i32]* %a1)[i64 0][i32 %280];
    i32* %284 = getelementptr &([10000 * i32]* %a2)[i64 0][i32 %280];
    cbr i1 %282(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32* %285 = getelementptr &([10000 * i32]* %a3)[i64 0][i32 %280];
    i32 %286 = load i32* %285;
    i32 %287 = add i32 %281, i32 %286;
    i32 %288 = srem i32 %287, i32 1333;
    call (i32) -> void @putint(i32 %288);
    ubr ^b;
^if.else:
    i1 %289 = scmp lt i32 %280, i32 20;
    cbr i1 %289(prob = 0.5), ^if.then1, ^if.else1;
^if.then1:
    i32* %290 = getelementptr &([10000 * i32]* %a3)[i64 0][i32 %280];
    ubr ^while.body4;
^b:
    i32 %291 = phi [^if.then, i32 %288] [^if.else2, i32 %368] [^b1, i32 %418];
    i32 %292 = add i32 %280, i32 1;
    i1 %293 = scmp lt i32 %292, i32 10000;
    cbr i1 %293(prob = 1), ^while.body3, ^entry1;
^if.else1:
    i1 %294 = scmp lt i32 %280, i32 30;
    cbr i1 %294(prob = 0.5), ^while.body5, ^if.else2;
^while.body4:
    i32 %295 = phi [^if.then1, i32 %281] [^while.body4, i32 %363];
    i32 %296 = phi [^if.then1, i32 5000] [^while.body4, i32 %299];
    i32 %297 = load i32* %290;
    i32 %298 = add i32 %295, i32 %297;
    i32 %299 = add i32 %296, i32 16;
    i1 %300 = scmp lt i32 %299, i32 9992;
    i32* %301 = getelementptr &([10000 * i32]* %a1)[i64 0][i32 %296];
    i32 %302 = load i32* %301;
    i32 %303 = sub i32 %298, i32 %302;
    i32 %304 = add i32 %297, i32 %303;
    i32* %305 = getelementptr &(i32* %301)[i64 1];
    i32 %306 = load i32* %305;
    i32 %307 = sub i32 %304, i32 %306;
    i32 %308 = add i32 %297, i32 %307;
    i32* %309 = getelementptr &(i32* %301)[i64 2];
    i32 %310 = load i32* %309;
    i32 %311 = sub i32 %308, i32 %310;
    i32 %312 = add i32 %297, i32 %311;
    i32* %313 = getelementptr &(i32* %301)[i64 3];
    i32 %314 = load i32* %313;
    i32 %315 = sub i32 %312, i32 %314;
    i32 %316 = add i32 %297, i32 %315;
    i32* %317 = getelementptr &(i32* %301)[i64 4];
    i32 %318 = load i32* %317;
    i32 %319 = sub i32 %316, i32 %318;
    i32 %320 = add i32 %297, i32 %319;
    i32* %321 = getelementptr &(i32* %301)[i64 5];
    i32 %322 = load i32* %321;
    i32 %323 = sub i32 %320, i32 %322;
    i32 %324 = add i32 %297, i32 %323;
    i32* %325 = getelementptr &(i32* %301)[i64 6];
    i32 %326 = load i32* %325;
    i32 %327 = sub i32 %324, i32 %326;
    i32 %328 = add i32 %297, i32 %327;
    i32* %329 = getelementptr &(i32* %301)[i64 7];
    i32 %330 = load i32* %329;
    i32 %331 = sub i32 %328, i32 %330;
    i32 %332 = add i32 %297, i32 %331;
    i32* %333 = getelementptr &(i32* %301)[i64 8];
    i32 %334 = load i32* %333;
    i32 %335 = sub i32 %332, i32 %334;
    i32 %336 = add i32 %297, i32 %335;
    i32* %337 = getelementptr &(i32* %301)[i64 9];
    i32 %338 = load i32* %337;
    i32 %339 = sub i32 %336, i32 %338;
    i32 %340 = add i32 %297, i32 %339;
    i32* %341 = getelementptr &(i32* %301)[i64 10];
    i32 %342 = load i32* %341;
    i32 %343 = sub i32 %340, i32 %342;
    i32 %344 = add i32 %297, i32 %343;
    i32* %345 = getelementptr &(i32* %301)[i64 11];
    i32 %346 = load i32* %345;
    i32 %347 = sub i32 %344, i32 %346;
    i32 %348 = add i32 %297, i32 %347;
    i32* %349 = getelementptr &(i32* %301)[i64 12];
    i32 %350 = load i32* %349;
    i32 %351 = sub i32 %348, i32 %350;
    i32 %352 = add i32 %297, i32 %351;
    i32* %353 = getelementptr &(i32* %301)[i64 13];
    i32 %354 = load i32* %353;
    i32 %355 = sub i32 %352, i32 %354;
    i32 %356 = add i32 %297, i32 %355;
    i32* %357 = getelementptr &(i32* %301)[i64 14];
    i32 %358 = load i32* %357;
    i32 %359 = sub i32 %356, i32 %358;
    i32 %360 = add i32 %297, i32 %359;
    i32* %361 = getelementptr &(i32* %301)[i64 15];
    i32 %362 = load i32* %361;
    i32 %363 = sub i32 %360, i32 %362;
    cbr i1 %300(prob = 1), ^while.body4, ^while.body6;
^if.else2:
    i32* %364 = getelementptr &([10000 * i32]* %a3)[i64 0][i32 %280];
    i32 %365 = load i32* %364;
    i32 %366 = mul i32 %365, i32 9;
    i32 %367 = add i32 %281, i32 %366;
    i32 %368 = srem i32 %367, i32 99988;
    ubr ^b;
^while.body5:
    i32 %369 = phi [^if.else1, i32 %281] [^b2, i32 %419];
    i32 %370 = phi [^if.else1, i32 5000] [^b2, i32 %420];
    i1 %371 = scmp gt i32 %370, i32 2233;
    cbr i1 %371(prob = 0.5), ^if.then2, ^if.else3;
^entry1:
    ret i32 %291;
^while.body6:
    i32 %372 = load i32* %290;
    i32 %373 = add i32 %363, i32 %372;
    i32* %374 = getelementptr &([10000 * i32]* %a1)[i64 0][i32 %299];
    i32 %375 = load i32* %374;
    i32 %376 = sub i32 %373, i32 %375;
    i32 %377 = add i32 %372, i32 %376;
    i32* %378 = getelementptr &(i32* %374)[i64 1];
    i32 %379 = load i32* %378;
    i32 %380 = sub i32 %377, i32 %379;
    i32 %381 = add i32 %372, i32 %380;
    i32* %382 = getelementptr &(i32* %374)[i64 2];
    i32 %383 = load i32* %382;
    i32 %384 = sub i32 %381, i32 %383;
    i32 %385 = add i32 %372, i32 %384;
    i32* %386 = getelementptr &(i32* %374)[i64 3];
    i32 %387 = load i32* %386;
    i32 %388 = sub i32 %385, i32 %387;
    i32 %389 = add i32 %372, i32 %388;
    i32* %390 = getelementptr &(i32* %374)[i64 4];
    i32 %391 = load i32* %390;
    i32 %392 = sub i32 %389, i32 %391;
    i32 %393 = add i32 %372, i32 %392;
    i32* %394 = getelementptr &(i32* %374)[i64 5];
    i32 %395 = load i32* %394;
    i32 %396 = sub i32 %393, i32 %395;
    i32 %397 = add i32 %372, i32 %396;
    i32* %398 = getelementptr &(i32* %374)[i64 6];
    i32 %399 = load i32* %398;
    i32 %400 = sub i32 %397, i32 %399;
    i32 %401 = add i32 %372, i32 %400;
    i32* %402 = getelementptr &(i32* %374)[i64 7];
    i32 %403 = load i32* %402;
    i32 %404 = sub i32 %401, i32 %403;
    ubr ^b1;
^if.then2:
    i32 %405 = load i32* %284;
    i32 %406 = add i32 %369, i32 %405;
    i32 %407 = add i32 %370, i32 1;
    i32* %408 = getelementptr &([10000 * i32]* %a1)[i64 0][i32 %370];
    i32 %409 = load i32* %408;
    i32 %410 = sub i32 %406, i32 %409;
    ubr ^b2;
^if.else3:
    i32 %411 = load i32* %283;
    i32 %412 = add i32 %369, i32 %411;
    i32 %413 = add i32 %370, i32 2;
    i32* %414 = getelementptr &([10000 * i32]* %a3)[i64 0][i32 %370];
    i32 %415 = load i32* %414;
    i32 %416 = add i32 %412, i32 %415;
    i32 %417 = srem i32 %416, i32 13333;
    ubr ^b2;
^b1:
    i32 %418 = phi [^while.body6, i32 %404] [^b2, i32 %419];
    call (i32) -> void @putint(i32 %418);
    ubr ^b;
^b2:
    i32 %419 = phi [^if.then2, i32 %410] [^if.else3, i32 %417];
    i32 %420 = phi [^if.then2, i32 %407] [^if.else3, i32 %413];
    i1 %421 = scmp lt i32 %420, i32 10000;
    cbr i1 %421(prob = 0.97), ^while.body5, ^b1;
}
