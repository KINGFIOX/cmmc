internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [10000 * i32]* %0 = ptrcast [10000 * i32]* @a1 to [10000 * i32]*;
    [10000 * i32]* %1 = ptrcast [10000 * i32]* @a2 to [10000 * i32]*;
    [10000 * i32]* %2 = ptrcast [10000 * i32]* @a3 to [10000 * i32]*;
    ubr ^while.body;
  ^while.body:
    i32 %3 = phi [^entry, i32 16] [^while.body, i32 %101];
    i32 %4 = phi [^entry, i32 15] [^while.body, i32 %99];
    i32 %5 = phi [^entry, i32 14] [^while.body, i32 %98];
    i32 %6 = phi [^entry, i32 13] [^while.body, i32 %97];
    i32 %7 = phi [^entry, i32 12] [^while.body, i32 %96];
    i32 %8 = phi [^entry, i32 11] [^while.body, i32 %95];
    i32 %9 = phi [^entry, i32 10] [^while.body, i32 %94];
    i32 %10 = phi [^entry, i32 9] [^while.body, i32 %93];
    i32 %11 = phi [^entry, i32 8] [^while.body, i32 %92];
    i32 %12 = phi [^entry, i32 7] [^while.body, i32 %91];
    i32 %13 = phi [^entry, i32 6] [^while.body, i32 %90];
    i32 %14 = phi [^entry, i32 5] [^while.body, i32 %89];
    i32 %15 = phi [^entry, i32 4] [^while.body, i32 %88];
    i32 %16 = phi [^entry, i32 3] [^while.body, i32 %87];
    i32 %17 = phi [^entry, i32 2] [^while.body, i32 %86];
    i32 %18 = phi [^entry, i32 0] [^while.body, i32 %83];
    i32 %19 = phi [^entry, i32 1] [^while.body, i32 %100];
    i32 %20 = phi [^entry, i32 0] [^while.body, i32 %84];
    i32* %21 = getelementptr &([10000 * i32]* %0)[i64 0][i32 %20];
    i32 %22 = srem i32 %18, i32 10;
    store i32* %21 with i32 %22;
    i32* %23 = getelementptr &(i32* %21)[i64 1];
    i32 %24 = add i32 %18, i32 %19;
    i32 %25 = srem i32 %24, i32 10;
    store i32* %23 with i32 %25;
    i32 %26 = add i32 %17, i32 2;
    i32 %27 = add i32 %18, i32 %26;
    i32 %28 = srem i32 %27, i32 10;
    i32* %29 = getelementptr &(i32* %21)[i64 2];
    store i32* %29 with i32 %28;
    i32 %30 = add i32 %16, i32 6;
    i32 %31 = add i32 %18, i32 %30;
    i32 %32 = srem i32 %31, i32 10;
    i32* %33 = getelementptr &(i32* %21)[i64 3];
    store i32* %33 with i32 %32;
    i32 %34 = add i32 %15, i32 12;
    i32 %35 = add i32 %18, i32 %34;
    i32 %36 = srem i32 %35, i32 10;
    i32* %37 = getelementptr &(i32* %21)[i64 4];
    store i32* %37 with i32 %36;
    i32 %38 = add i32 %14, i32 20;
    i32 %39 = add i32 %18, i32 %38;
    i32 %40 = srem i32 %39, i32 10;
    i32* %41 = getelementptr &(i32* %21)[i64 5];
    store i32* %41 with i32 %40;
    i32 %42 = add i32 %13, i32 30;
    i32 %43 = add i32 %18, i32 %42;
    i32 %44 = srem i32 %43, i32 10;
    i32* %45 = getelementptr &(i32* %21)[i64 6];
    store i32* %45 with i32 %44;
    i32 %46 = add i32 %12, i32 42;
    i32 %47 = add i32 %18, i32 %46;
    i32 %48 = srem i32 %47, i32 10;
    i32* %49 = getelementptr &(i32* %21)[i64 7];
    store i32* %49 with i32 %48;
    i32 %50 = add i32 %11, i32 56;
    i32 %51 = add i32 %18, i32 %50;
    i32 %52 = srem i32 %51, i32 10;
    i32* %53 = getelementptr &(i32* %21)[i64 8];
    store i32* %53 with i32 %52;
    i32 %54 = add i32 %10, i32 72;
    i32 %55 = add i32 %18, i32 %54;
    i32 %56 = srem i32 %55, i32 10;
    i32* %57 = getelementptr &(i32* %21)[i64 9];
    store i32* %57 with i32 %56;
    i32 %58 = add i32 %9, i32 90;
    i32 %59 = add i32 %18, i32 %58;
    i32 %60 = srem i32 %59, i32 10;
    i32* %61 = getelementptr &(i32* %21)[i64 10];
    store i32* %61 with i32 %60;
    i32 %62 = add i32 %8, i32 110;
    i32 %63 = add i32 %18, i32 %62;
    i32 %64 = srem i32 %63, i32 10;
    i32* %65 = getelementptr &(i32* %21)[i64 11];
    store i32* %65 with i32 %64;
    i32 %66 = add i32 %7, i32 132;
    i32 %67 = add i32 %18, i32 %66;
    i32 %68 = srem i32 %67, i32 10;
    i32* %69 = getelementptr &(i32* %21)[i64 12];
    store i32* %69 with i32 %68;
    i32 %70 = add i32 %6, i32 156;
    i32 %71 = add i32 %18, i32 %70;
    i32 %72 = srem i32 %71, i32 10;
    i32* %73 = getelementptr &(i32* %21)[i64 13];
    store i32* %73 with i32 %72;
    i32 %74 = add i32 %5, i32 182;
    i32 %75 = add i32 %18, i32 %74;
    i32 %76 = srem i32 %75, i32 10;
    i32* %77 = getelementptr &(i32* %21)[i64 14];
    store i32* %77 with i32 %76;
    i32 %78 = add i32 %4, i32 210;
    i32 %79 = add i32 %18, i32 %78;
    i32 %80 = srem i32 %79, i32 10;
    i32* %81 = getelementptr &(i32* %21)[i64 15];
    store i32* %81 with i32 %80;
    i32 %82 = add i32 %3, i32 240;
    i32 %83 = add i32 %18, i32 %82;
    i32 %84 = add i32 %20, i32 16;
    i1 %85 = icmp slt i32 %84, i32 10000;
    i32 %86 = add i32 %17, i32 64;
    i32 %87 = add i32 %16, i32 96;
    i32 %88 = add i32 %15, i32 128;
    i32 %89 = add i32 %14, i32 160;
    i32 %90 = add i32 %13, i32 192;
    i32 %91 = add i32 %12, i32 224;
    i32 %92 = add i32 %11, i32 256;
    i32 %93 = add i32 %10, i32 288;
    i32 %94 = add i32 %9, i32 320;
    i32 %95 = add i32 %8, i32 352;
    i32 %96 = add i32 %7, i32 384;
    i32 %97 = add i32 %6, i32 416;
    i32 %98 = add i32 %5, i32 448;
    i32 %99 = add i32 %4, i32 480;
    i32 %100 = add i32 %19, i32 32;
    i32 %101 = add i32 %3, i32 512;
    cbr i1 %85(prob = 1), ^while.body, ^while.body1;
  ^while.body1:
    i32 %102 = phi [^while.body, i32 0] [^while.body1, i32 %183];
    i32* %103 = getelementptr &([10000 * i32]* %0)[i64 0][i32 %102];
    i32 %104 = load i32* %103;
    i32 %105 = mul i32 %104, i32 %104;
    i32 %106 = srem i32 %105, i32 10;
    i32* %107 = getelementptr &([10000 * i32]* %1)[i64 0][i32 %102];
    store i32* %107 with i32 %106;
    i32* %108 = getelementptr &(i32* %103)[i64 1];
    i32 %109 = load i32* %108;
    i32 %110 = mul i32 %109, i32 %109;
    i32 %111 = srem i32 %110, i32 10;
    i32* %112 = getelementptr &(i32* %107)[i64 1];
    store i32* %112 with i32 %111;
    i32* %113 = getelementptr &(i32* %103)[i64 2];
    i32 %114 = load i32* %113;
    i32 %115 = mul i32 %114, i32 %114;
    i32 %116 = srem i32 %115, i32 10;
    i32* %117 = getelementptr &(i32* %107)[i64 2];
    store i32* %117 with i32 %116;
    i32* %118 = getelementptr &(i32* %103)[i64 3];
    i32 %119 = load i32* %118;
    i32 %120 = mul i32 %119, i32 %119;
    i32 %121 = srem i32 %120, i32 10;
    i32* %122 = getelementptr &(i32* %107)[i64 3];
    store i32* %122 with i32 %121;
    i32* %123 = getelementptr &(i32* %103)[i64 4];
    i32 %124 = load i32* %123;
    i32 %125 = mul i32 %124, i32 %124;
    i32 %126 = srem i32 %125, i32 10;
    i32* %127 = getelementptr &(i32* %107)[i64 4];
    store i32* %127 with i32 %126;
    i32* %128 = getelementptr &(i32* %103)[i64 5];
    i32 %129 = load i32* %128;
    i32 %130 = mul i32 %129, i32 %129;
    i32 %131 = srem i32 %130, i32 10;
    i32* %132 = getelementptr &(i32* %107)[i64 5];
    store i32* %132 with i32 %131;
    i32* %133 = getelementptr &(i32* %103)[i64 6];
    i32 %134 = load i32* %133;
    i32 %135 = mul i32 %134, i32 %134;
    i32 %136 = srem i32 %135, i32 10;
    i32* %137 = getelementptr &(i32* %107)[i64 6];
    store i32* %137 with i32 %136;
    i32* %138 = getelementptr &(i32* %103)[i64 7];
    i32 %139 = load i32* %138;
    i32 %140 = mul i32 %139, i32 %139;
    i32 %141 = srem i32 %140, i32 10;
    i32* %142 = getelementptr &(i32* %107)[i64 7];
    store i32* %142 with i32 %141;
    i32* %143 = getelementptr &(i32* %103)[i64 8];
    i32 %144 = load i32* %143;
    i32 %145 = mul i32 %144, i32 %144;
    i32 %146 = srem i32 %145, i32 10;
    i32* %147 = getelementptr &(i32* %107)[i64 8];
    store i32* %147 with i32 %146;
    i32* %148 = getelementptr &(i32* %103)[i64 9];
    i32 %149 = load i32* %148;
    i32 %150 = mul i32 %149, i32 %149;
    i32 %151 = srem i32 %150, i32 10;
    i32* %152 = getelementptr &(i32* %107)[i64 9];
    store i32* %152 with i32 %151;
    i32* %153 = getelementptr &(i32* %103)[i64 10];
    i32 %154 = load i32* %153;
    i32 %155 = mul i32 %154, i32 %154;
    i32 %156 = srem i32 %155, i32 10;
    i32* %157 = getelementptr &(i32* %107)[i64 10];
    store i32* %157 with i32 %156;
    i32* %158 = getelementptr &(i32* %103)[i64 11];
    i32 %159 = load i32* %158;
    i32 %160 = mul i32 %159, i32 %159;
    i32 %161 = srem i32 %160, i32 10;
    i32* %162 = getelementptr &(i32* %107)[i64 11];
    store i32* %162 with i32 %161;
    i32* %163 = getelementptr &(i32* %103)[i64 12];
    i32 %164 = load i32* %163;
    i32 %165 = mul i32 %164, i32 %164;
    i32 %166 = srem i32 %165, i32 10;
    i32* %167 = getelementptr &(i32* %107)[i64 12];
    store i32* %167 with i32 %166;
    i32* %168 = getelementptr &(i32* %103)[i64 13];
    i32 %169 = load i32* %168;
    i32 %170 = mul i32 %169, i32 %169;
    i32 %171 = srem i32 %170, i32 10;
    i32* %172 = getelementptr &(i32* %107)[i64 13];
    store i32* %172 with i32 %171;
    i32* %173 = getelementptr &(i32* %103)[i64 14];
    i32 %174 = load i32* %173;
    i32 %175 = mul i32 %174, i32 %174;
    i32 %176 = srem i32 %175, i32 10;
    i32* %177 = getelementptr &(i32* %107)[i64 14];
    store i32* %177 with i32 %176;
    i32* %178 = getelementptr &(i32* %103)[i64 15];
    i32 %179 = load i32* %178;
    i32 %180 = mul i32 %179, i32 %179;
    i32 %181 = srem i32 %180, i32 10;
    i32* %182 = getelementptr &(i32* %107)[i64 15];
    store i32* %182 with i32 %181;
    i32 %183 = add i32 %102, i32 16;
    i1 %184 = icmp slt i32 %183, i32 10000;
    cbr i1 %184(prob = 1), ^while.body1, ^while.body2;
  ^while.body2:
    i32 %185 = phi [^while.body1, i32 0] [^while.body2, i32 %218];
    i32* %186 = getelementptr &([10000 * i32]* %1)[i64 0][i32 %185];
    i32 %187 = load i32* %186;
    i32 %188 = mul i32 %187, i32 %187;
    i32 %189 = srem i32 %188, i32 100;
    i32* %190 = getelementptr &([10000 * i32]* %0)[i64 0][i32 %185];
    i32 %191 = load i32* %190;
    i32 %192 = add i32 %189, i32 %191;
    i32* %193 = getelementptr &([10000 * i32]* %2)[i64 0][i32 %185];
    store i32* %193 with i32 %192;
    i32* %194 = getelementptr &(i32* %186)[i64 1];
    i32 %195 = load i32* %194;
    i32 %196 = mul i32 %195, i32 %195;
    i32 %197 = srem i32 %196, i32 100;
    i32* %198 = getelementptr &(i32* %190)[i64 1];
    i32 %199 = load i32* %198;
    i32 %200 = add i32 %197, i32 %199;
    i32* %201 = getelementptr &(i32* %193)[i64 1];
    store i32* %201 with i32 %200;
    i32* %202 = getelementptr &(i32* %186)[i64 2];
    i32 %203 = load i32* %202;
    i32 %204 = mul i32 %203, i32 %203;
    i32 %205 = srem i32 %204, i32 100;
    i32* %206 = getelementptr &(i32* %190)[i64 2];
    i32 %207 = load i32* %206;
    i32 %208 = add i32 %205, i32 %207;
    i32* %209 = getelementptr &(i32* %193)[i64 2];
    store i32* %209 with i32 %208;
    i32* %210 = getelementptr &(i32* %186)[i64 3];
    i32 %211 = load i32* %210;
    i32 %212 = mul i32 %211, i32 %211;
    i32 %213 = srem i32 %212, i32 100;
    i32* %214 = getelementptr &(i32* %190)[i64 3];
    i32 %215 = load i32* %214;
    i32 %216 = add i32 %213, i32 %215;
    i32* %217 = getelementptr &(i32* %193)[i64 3];
    store i32* %217 with i32 %216;
    i32 %218 = add i32 %185, i32 4;
    i1 %219 = icmp slt i32 %218, i32 10000;
    cbr i1 %219(prob = 1), ^while.body2, ^while.header;
  ^while.header:
    i32 %220 = phi [^while.body2, i32 0] [^if.then, i32 %230] [^if.else2, i32 %239] [^while.body5, i32 %342] [^b, i32 %308];
    i32 %221 = phi [^while.body2, i32 0] [^if.then, i32 %226] [^if.else2, i32 %226] [^while.body5, i32 %226] [^b, i32 %226];
    i1 %222 = icmp slt i32 %221, i32 10000;
    cbr i1 %222(prob = 0.97), ^while.body3, ^entry1;
  ^while.body3:
    i32* %223 = getelementptr &([10000 * i32]* %0)[i64 0][i32 %221];
    i32* %224 = getelementptr &([10000 * i32]* %1)[i64 0][i32 %221];
    i1 %225 = icmp slt i32 %221, i32 10;
    i32 %226 = add i32 %221, i32 1;
    cbr i1 %225(prob = 0.5), ^if.then, ^if.else;
  ^entry1:
    ret i32 %220;
  ^if.then:
    i32* %227 = getelementptr &([10000 * i32]* %2)[i64 0][i32 %221];
    i32 %228 = load i32* %227;
    i32 %229 = add i32 %220, i32 %228;
    i32 %230 = srem i32 %229, i32 1333;
    call (i32) -> void @putint(i32 %230);
    ubr ^while.header;
  ^if.else:
    i1 %231 = icmp slt i32 %221, i32 20;
    cbr i1 %231(prob = 0.5), ^prebody, ^if.else1;
  ^prebody:
    i32* %232 = getelementptr &([10000 * i32]* %2)[i64 0][i32 %221];
    i32 %233 = load i32* %232;
    ubr ^while.body4;
  ^if.else1:
    i1 %234 = icmp slt i32 %221, i32 30;
    cbr i1 %234(prob = 0.5), ^while.header1, ^if.else2;
  ^if.else2:
    i32* %235 = getelementptr &([10000 * i32]* %2)[i64 0][i32 %221];
    i32 %236 = load i32* %235;
    i32 %237 = mul i32 %236, i32 9;
    i32 %238 = add i32 %220, i32 %237;
    i32 %239 = srem i32 %238, i32 99988;
    ubr ^while.header;
  ^while.body4:
    i32 %240 = phi [^prebody, i32 5000] [^while.body4, i32 %306];
    i32 %241 = phi [^prebody, i32 %220] [^while.body4, i32 %305];
    i32* %242 = getelementptr &([10000 * i32]* %0)[i64 0][i32 %240];
    i32 %243 = load i32* %242;
    i32 %244 = add i32 %233, i32 %241;
    i32 %245 = sub i32 %244, i32 %243;
    i32 %246 = add i32 %233, i32 %245;
    i32* %247 = getelementptr &(i32* %242)[i64 1];
    i32 %248 = load i32* %247;
    i32 %249 = sub i32 %246, i32 %248;
    i32 %250 = add i32 %233, i32 %249;
    i32* %251 = getelementptr &(i32* %242)[i64 2];
    i32 %252 = load i32* %251;
    i32 %253 = sub i32 %250, i32 %252;
    i32 %254 = add i32 %233, i32 %253;
    i32* %255 = getelementptr &(i32* %242)[i64 3];
    i32 %256 = load i32* %255;
    i32 %257 = sub i32 %254, i32 %256;
    i32 %258 = add i32 %233, i32 %257;
    i32* %259 = getelementptr &(i32* %242)[i64 4];
    i32 %260 = load i32* %259;
    i32 %261 = sub i32 %258, i32 %260;
    i32 %262 = add i32 %233, i32 %261;
    i32* %263 = getelementptr &(i32* %242)[i64 5];
    i32 %264 = load i32* %263;
    i32 %265 = sub i32 %262, i32 %264;
    i32 %266 = add i32 %233, i32 %265;
    i32* %267 = getelementptr &(i32* %242)[i64 6];
    i32 %268 = load i32* %267;
    i32 %269 = sub i32 %266, i32 %268;
    i32 %270 = add i32 %233, i32 %269;
    i32* %271 = getelementptr &(i32* %242)[i64 7];
    i32 %272 = load i32* %271;
    i32 %273 = sub i32 %270, i32 %272;
    i32 %274 = add i32 %233, i32 %273;
    i32* %275 = getelementptr &(i32* %242)[i64 8];
    i32 %276 = load i32* %275;
    i32 %277 = sub i32 %274, i32 %276;
    i32 %278 = add i32 %233, i32 %277;
    i32* %279 = getelementptr &(i32* %242)[i64 9];
    i32 %280 = load i32* %279;
    i32 %281 = sub i32 %278, i32 %280;
    i32 %282 = add i32 %233, i32 %281;
    i32* %283 = getelementptr &(i32* %242)[i64 10];
    i32 %284 = load i32* %283;
    i32 %285 = sub i32 %282, i32 %284;
    i32 %286 = add i32 %233, i32 %285;
    i32* %287 = getelementptr &(i32* %242)[i64 11];
    i32 %288 = load i32* %287;
    i32 %289 = sub i32 %286, i32 %288;
    i32 %290 = add i32 %233, i32 %289;
    i32* %291 = getelementptr &(i32* %242)[i64 12];
    i32 %292 = load i32* %291;
    i32 %293 = sub i32 %290, i32 %292;
    i32 %294 = add i32 %233, i32 %293;
    i32* %295 = getelementptr &(i32* %242)[i64 13];
    i32 %296 = load i32* %295;
    i32 %297 = sub i32 %294, i32 %296;
    i32 %298 = add i32 %233, i32 %297;
    i32* %299 = getelementptr &(i32* %242)[i64 14];
    i32 %300 = load i32* %299;
    i32 %301 = sub i32 %298, i32 %300;
    i32 %302 = add i32 %233, i32 %301;
    i32* %303 = getelementptr &(i32* %242)[i64 15];
    i32 %304 = load i32* %303;
    i32 %305 = sub i32 %302, i32 %304;
    i32 %306 = add i32 %240, i32 16;
    i1 %307 = icmp slt i32 %306, i32 9992;
    cbr i1 %307(prob = 1), ^while.body4, ^while.body5;
  ^while.header1:
    i32 %308 = phi [^if.else1, i32 %220] [^if.then1, i32 %348] [^if.else3, i32 %355];
    i32 %309 = phi [^if.else1, i32 5000] [^if.then1, i32 %349] [^if.else3, i32 %356];
    i1 %310 = icmp slt i32 %309, i32 10000;
    cbr i1 %310(prob = 0.97), ^while.body6, ^b;
  ^while.body5:
    i32* %311 = getelementptr &([10000 * i32]* %0)[i64 0][i32 %306];
    i32 %312 = load i32* %311;
    i32 %313 = add i32 %233, i32 %305;
    i32 %314 = sub i32 %313, i32 %312;
    i32 %315 = add i32 %233, i32 %314;
    i32* %316 = getelementptr &(i32* %311)[i64 1];
    i32 %317 = load i32* %316;
    i32 %318 = sub i32 %315, i32 %317;
    i32 %319 = add i32 %233, i32 %318;
    i32* %320 = getelementptr &(i32* %311)[i64 2];
    i32 %321 = load i32* %320;
    i32 %322 = sub i32 %319, i32 %321;
    i32 %323 = add i32 %233, i32 %322;
    i32* %324 = getelementptr &(i32* %311)[i64 3];
    i32 %325 = load i32* %324;
    i32 %326 = sub i32 %323, i32 %325;
    i32 %327 = add i32 %233, i32 %326;
    i32* %328 = getelementptr &(i32* %311)[i64 4];
    i32 %329 = load i32* %328;
    i32 %330 = sub i32 %327, i32 %329;
    i32 %331 = add i32 %233, i32 %330;
    i32* %332 = getelementptr &(i32* %311)[i64 5];
    i32 %333 = load i32* %332;
    i32 %334 = sub i32 %331, i32 %333;
    i32 %335 = add i32 %233, i32 %334;
    i32* %336 = getelementptr &(i32* %311)[i64 6];
    i32 %337 = load i32* %336;
    i32 %338 = sub i32 %335, i32 %337;
    i32 %339 = add i32 %233, i32 %338;
    i32* %340 = getelementptr &(i32* %311)[i64 7];
    i32 %341 = load i32* %340;
    i32 %342 = sub i32 %339, i32 %341;
    call (i32) -> void @putint(i32 %342);
    ubr ^while.header;
  ^b:
    call (i32) -> void @putint(i32 %308);
    ubr ^while.header;
  ^while.body6:
    i1 %343 = icmp sgt i32 %309, i32 2233;
    cbr i1 %343(prob = 0.5), ^if.then1, ^if.else3;
  ^if.then1:
    i32 %344 = load i32* %224;
    i32 %345 = add i32 %308, i32 %344;
    i32* %346 = getelementptr &([10000 * i32]* %0)[i64 0][i32 %309];
    i32 %347 = load i32* %346;
    i32 %348 = sub i32 %345, i32 %347;
    i32 %349 = add i32 %309, i32 1;
    ubr ^while.header1;
  ^if.else3:
    i32* %350 = getelementptr &([10000 * i32]* %2)[i64 0][i32 %309];
    i32 %351 = load i32* %223;
    i32 %352 = load i32* %350;
    i32 %353 = add i32 %308, i32 %351;
    i32 %354 = add i32 %352, i32 %353;
    i32 %355 = srem i32 %354, i32 13333;
    i32 %356 = add i32 %309, i32 2;
    ubr ^while.header1;
}
internal [10000 * i32]* @a1, align 8 { Flexible };
internal [10000 * i32]* @a2, align 8 { Flexible };
internal [10000 * i32]* @a3, align 8 { Flexible };
