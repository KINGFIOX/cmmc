internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [10000 * i32]* %0 = ptrcast [10000 * i32]* @a1 to [10000 * i32]*;
    [10000 * i32]* %1 = ptrcast [10000 * i32]* @a3 to [10000 * i32]*;
    [10000 * i32]* %2 = ptrcast [10000 * i32]* @a2 to [10000 * i32]*;
    ubr ^while.body;
  ^while.body:
    i32 %3 = phi [^entry, i32 10] [^while.body, i32 %91];
    i32 %4 = phi [^entry, i32 9] [^while.body, i32 %90];
    i32 %5 = phi [^entry, i32 7] [^while.body, i32 %89];
    i32 %6 = phi [^entry, i32 6] [^while.body, i32 %88];
    i32 %7 = phi [^entry, i32 5] [^while.body, i32 %87];
    i32 %8 = phi [^entry, i32 3] [^while.body, i32 %86];
    i32 %9 = phi [^entry, i32 0] [^while.body, i32 %83];
    i32 %10 = phi [^entry, i32 1] [^while.body, i32 %92];
    i32 %11 = phi [^entry, i32 0] [^while.body, i32 %84];
    i32* %12 = getelementptr &([10000 * i32]* %0)[i64 0][i32 %11];
    i32 %13 = srem i32 %9, i32 10;
    store i32* %12 with i32 %13;
    i32* %14 = getelementptr &(i32* %12)[i64 1];
    i32 %15 = add i32 %9, i32 %10;
    i32 %16 = srem i32 %15, i32 10;
    store i32* %14 with i32 %16;
    i32 %17 = add i32 %10, i32 1;
    i32 %18 = mul i32 %17, i32 2;
    i32 %19 = add i32 %9, i32 %18;
    i32 %20 = srem i32 %19, i32 10;
    i32* %21 = getelementptr &(i32* %12)[i64 2];
    store i32* %21 with i32 %20;
    i32 %22 = add i32 %8, i32 6;
    i32 %23 = add i32 %9, i32 %22;
    i32 %24 = srem i32 %23, i32 10;
    i32* %25 = getelementptr &(i32* %12)[i64 3];
    store i32* %25 with i32 %24;
    i32 %26 = mul i32 %10, i32 4;
    i32 %27 = add i32 %26, i32 12;
    i32 %28 = add i32 %9, i32 %27;
    i32 %29 = srem i32 %28, i32 10;
    i32* %30 = getelementptr &(i32* %12)[i64 4];
    store i32* %30 with i32 %29;
    i32 %31 = add i32 %7, i32 20;
    i32 %32 = add i32 %9, i32 %31;
    i32 %33 = srem i32 %32, i32 10;
    i32* %34 = getelementptr &(i32* %12)[i64 5];
    store i32* %34 with i32 %33;
    i32 %35 = add i32 %6, i32 30;
    i32 %36 = add i32 %9, i32 %35;
    i32 %37 = srem i32 %36, i32 10;
    i32* %38 = getelementptr &(i32* %12)[i64 6];
    store i32* %38 with i32 %37;
    i32 %39 = add i32 %5, i32 42;
    i32 %40 = add i32 %9, i32 %39;
    i32 %41 = srem i32 %40, i32 10;
    i32* %42 = getelementptr &(i32* %12)[i64 7];
    store i32* %42 with i32 %41;
    i32 %43 = mul i32 %10, i32 8;
    i32 %44 = add i32 %43, i32 56;
    i32 %45 = add i32 %9, i32 %44;
    i32 %46 = srem i32 %45, i32 10;
    i32* %47 = getelementptr &(i32* %12)[i64 8];
    store i32* %47 with i32 %46;
    i32 %48 = add i32 %4, i32 72;
    i32 %49 = add i32 %9, i32 %48;
    i32 %50 = srem i32 %49, i32 10;
    i32* %51 = getelementptr &(i32* %12)[i64 9];
    store i32* %51 with i32 %50;
    i32 %52 = add i32 %3, i32 90;
    i32 %53 = add i32 %9, i32 %52;
    i32 %54 = srem i32 %53, i32 10;
    i32* %55 = getelementptr &(i32* %12)[i64 10];
    store i32* %55 with i32 %54;
    i32 %56 = mul i32 %10, i32 11;
    i32 %57 = add i32 %56, i32 110;
    i32 %58 = add i32 %9, i32 %57;
    i32 %59 = srem i32 %58, i32 10;
    i32* %60 = getelementptr &(i32* %12)[i64 11];
    store i32* %60 with i32 %59;
    i32 %61 = mul i32 %10, i32 12;
    i32 %62 = add i32 %61, i32 132;
    i32 %63 = add i32 %9, i32 %62;
    i32 %64 = srem i32 %63, i32 10;
    i32* %65 = getelementptr &(i32* %12)[i64 12];
    store i32* %65 with i32 %64;
    i32 %66 = mul i32 %10, i32 13;
    i32 %67 = add i32 %66, i32 156;
    i32 %68 = add i32 %9, i32 %67;
    i32 %69 = srem i32 %68, i32 10;
    i32* %70 = getelementptr &(i32* %12)[i64 13];
    store i32* %70 with i32 %69;
    i32 %71 = mul i32 %10, i32 14;
    i32 %72 = add i32 %71, i32 182;
    i32 %73 = add i32 %9, i32 %72;
    i32 %74 = srem i32 %73, i32 10;
    i32* %75 = getelementptr &(i32* %12)[i64 14];
    store i32* %75 with i32 %74;
    i32 %76 = mul i32 %10, i32 15;
    i32 %77 = add i32 %76, i32 210;
    i32 %78 = add i32 %9, i32 %77;
    i32 %79 = srem i32 %78, i32 10;
    i32* %80 = getelementptr &(i32* %12)[i64 15];
    store i32* %80 with i32 %79;
    i32 %81 = mul i32 %10, i32 16;
    i32 %82 = add i32 %81, i32 240;
    i32 %83 = add i32 %9, i32 %82;
    i32 %84 = add i32 %11, i32 16;
    i1 %85 = icmp slt i32 %84, i32 10000;
    i32 %86 = add i32 %8, i32 96;
    i32 %87 = add i32 %7, i32 160;
    i32 %88 = add i32 %6, i32 192;
    i32 %89 = add i32 %5, i32 224;
    i32 %90 = add i32 %4, i32 288;
    i32 %91 = add i32 %3, i32 320;
    i32 %92 = add i32 %10, i32 32;
    cbr i1 %85(prob = 0.9984), ^while.body, ^while.body1;
  ^while.body1:
    i32 %93 = phi [^while.body, i32 0] [^while.body1, i32 %174];
    i32* %94 = getelementptr &([10000 * i32]* %0)[i64 0][i32 %93];
    i32 %95 = load i32* %94;
    i32 %96 = mul i32 %95, i32 %95;
    i32 %97 = srem i32 %96, i32 10;
    i32* %98 = getelementptr &([10000 * i32]* %2)[i64 0][i32 %93];
    store i32* %98 with i32 %97;
    i32* %99 = getelementptr &(i32* %94)[i64 1];
    i32 %100 = load i32* %99;
    i32 %101 = mul i32 %100, i32 %100;
    i32 %102 = srem i32 %101, i32 10;
    i32* %103 = getelementptr &(i32* %98)[i64 1];
    store i32* %103 with i32 %102;
    i32* %104 = getelementptr &(i32* %94)[i64 2];
    i32 %105 = load i32* %104;
    i32 %106 = mul i32 %105, i32 %105;
    i32 %107 = srem i32 %106, i32 10;
    i32* %108 = getelementptr &(i32* %98)[i64 2];
    store i32* %108 with i32 %107;
    i32* %109 = getelementptr &(i32* %94)[i64 3];
    i32 %110 = load i32* %109;
    i32 %111 = mul i32 %110, i32 %110;
    i32 %112 = srem i32 %111, i32 10;
    i32* %113 = getelementptr &(i32* %98)[i64 3];
    store i32* %113 with i32 %112;
    i32* %114 = getelementptr &(i32* %94)[i64 4];
    i32 %115 = load i32* %114;
    i32 %116 = mul i32 %115, i32 %115;
    i32 %117 = srem i32 %116, i32 10;
    i32* %118 = getelementptr &(i32* %98)[i64 4];
    store i32* %118 with i32 %117;
    i32* %119 = getelementptr &(i32* %94)[i64 5];
    i32 %120 = load i32* %119;
    i32 %121 = mul i32 %120, i32 %120;
    i32 %122 = srem i32 %121, i32 10;
    i32* %123 = getelementptr &(i32* %98)[i64 5];
    store i32* %123 with i32 %122;
    i32* %124 = getelementptr &(i32* %94)[i64 6];
    i32 %125 = load i32* %124;
    i32 %126 = mul i32 %125, i32 %125;
    i32 %127 = srem i32 %126, i32 10;
    i32* %128 = getelementptr &(i32* %98)[i64 6];
    store i32* %128 with i32 %127;
    i32* %129 = getelementptr &(i32* %94)[i64 7];
    i32 %130 = load i32* %129;
    i32 %131 = mul i32 %130, i32 %130;
    i32 %132 = srem i32 %131, i32 10;
    i32* %133 = getelementptr &(i32* %98)[i64 7];
    store i32* %133 with i32 %132;
    i32* %134 = getelementptr &(i32* %94)[i64 8];
    i32 %135 = load i32* %134;
    i32 %136 = mul i32 %135, i32 %135;
    i32 %137 = srem i32 %136, i32 10;
    i32* %138 = getelementptr &(i32* %98)[i64 8];
    store i32* %138 with i32 %137;
    i32* %139 = getelementptr &(i32* %94)[i64 9];
    i32 %140 = load i32* %139;
    i32 %141 = mul i32 %140, i32 %140;
    i32 %142 = srem i32 %141, i32 10;
    i32* %143 = getelementptr &(i32* %98)[i64 9];
    store i32* %143 with i32 %142;
    i32* %144 = getelementptr &(i32* %94)[i64 10];
    i32 %145 = load i32* %144;
    i32 %146 = mul i32 %145, i32 %145;
    i32 %147 = srem i32 %146, i32 10;
    i32* %148 = getelementptr &(i32* %98)[i64 10];
    store i32* %148 with i32 %147;
    i32* %149 = getelementptr &(i32* %94)[i64 11];
    i32 %150 = load i32* %149;
    i32 %151 = mul i32 %150, i32 %150;
    i32 %152 = srem i32 %151, i32 10;
    i32* %153 = getelementptr &(i32* %98)[i64 11];
    store i32* %153 with i32 %152;
    i32* %154 = getelementptr &(i32* %94)[i64 12];
    i32 %155 = load i32* %154;
    i32 %156 = mul i32 %155, i32 %155;
    i32 %157 = srem i32 %156, i32 10;
    i32* %158 = getelementptr &(i32* %98)[i64 12];
    store i32* %158 with i32 %157;
    i32* %159 = getelementptr &(i32* %94)[i64 13];
    i32 %160 = load i32* %159;
    i32 %161 = mul i32 %160, i32 %160;
    i32 %162 = srem i32 %161, i32 10;
    i32* %163 = getelementptr &(i32* %98)[i64 13];
    store i32* %163 with i32 %162;
    i32* %164 = getelementptr &(i32* %94)[i64 14];
    i32 %165 = load i32* %164;
    i32 %166 = mul i32 %165, i32 %165;
    i32 %167 = srem i32 %166, i32 10;
    i32* %168 = getelementptr &(i32* %98)[i64 14];
    store i32* %168 with i32 %167;
    i32* %169 = getelementptr &(i32* %94)[i64 15];
    i32 %170 = load i32* %169;
    i32 %171 = mul i32 %170, i32 %170;
    i32 %172 = srem i32 %171, i32 10;
    i32* %173 = getelementptr &(i32* %98)[i64 15];
    store i32* %173 with i32 %172;
    i32 %174 = add i32 %93, i32 16;
    i1 %175 = icmp slt i32 %174, i32 10000;
    cbr i1 %175(prob = 0.9984), ^while.body1, ^while.body2;
  ^while.body2:
    i32 %176 = phi [^while.body1, i32 0] [^while.body2, i32 %209];
    i32* %177 = getelementptr &([10000 * i32]* %2)[i64 0][i32 %176];
    i32 %178 = load i32* %177;
    i32 %179 = mul i32 %178, i32 %178;
    i32 %180 = srem i32 %179, i32 100;
    i32* %181 = getelementptr &([10000 * i32]* %0)[i64 0][i32 %176];
    i32 %182 = load i32* %181;
    i32 %183 = add i32 %180, i32 %182;
    i32* %184 = getelementptr &([10000 * i32]* %1)[i64 0][i32 %176];
    store i32* %184 with i32 %183;
    i32* %185 = getelementptr &(i32* %177)[i64 1];
    i32 %186 = load i32* %185;
    i32 %187 = mul i32 %186, i32 %186;
    i32 %188 = srem i32 %187, i32 100;
    i32* %189 = getelementptr &(i32* %181)[i64 1];
    i32 %190 = load i32* %189;
    i32 %191 = add i32 %188, i32 %190;
    i32* %192 = getelementptr &(i32* %184)[i64 1];
    store i32* %192 with i32 %191;
    i32* %193 = getelementptr &(i32* %177)[i64 2];
    i32 %194 = load i32* %193;
    i32 %195 = mul i32 %194, i32 %194;
    i32 %196 = srem i32 %195, i32 100;
    i32* %197 = getelementptr &(i32* %181)[i64 2];
    i32 %198 = load i32* %197;
    i32 %199 = add i32 %196, i32 %198;
    i32* %200 = getelementptr &(i32* %184)[i64 2];
    store i32* %200 with i32 %199;
    i32* %201 = getelementptr &(i32* %177)[i64 3];
    i32 %202 = load i32* %201;
    i32 %203 = mul i32 %202, i32 %202;
    i32 %204 = srem i32 %203, i32 100;
    i32* %205 = getelementptr &(i32* %181)[i64 3];
    i32 %206 = load i32* %205;
    i32 %207 = add i32 %204, i32 %206;
    i32* %208 = getelementptr &(i32* %184)[i64 3];
    store i32* %208 with i32 %207;
    i32 %209 = add i32 %176, i32 4;
    i1 %210 = icmp slt i32 %209, i32 10000;
    cbr i1 %210(prob = 0.9996), ^while.body2, ^while.body3;
  ^while.body3:
    i32 %211 = phi [^while.body2, i32 0] [^b, i32 %223];
    i32 %212 = phi [^while.body2, i32 0] [^b, i32 %222];
    i32* %213 = getelementptr &([10000 * i32]* %1)[i64 0][i32 %211];
    i32* %214 = getelementptr &([10000 * i32]* %2)[i64 0][i32 %211];
    i32* %215 = getelementptr &([10000 * i32]* %0)[i64 0][i32 %211];
    i1 %216 = icmp slt i32 %211, i32 10;
    cbr i1 %216(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %217 = load i32* %213;
    i32 %218 = add i32 %212, i32 %217;
    i32 %219 = srem i32 %218, i32 1333;
    call (i32) -> void @putint(i32 %219);
    ubr ^b;
  ^if.else:
    i1 %220 = icmp slt i32 %211, i32 20;
    cbr i1 %220(prob = 0.5), ^prebody, ^if.else1;
  ^prebody:
    i32 %221 = load i32* %213;
    ubr ^while.body4;
  ^b:
    i32 %222 = phi [^if.then, i32 %219] [^if.else2, i32 %229] [^while.body5, i32 %332] [^b2, i32 %298];
    i32 %223 = add i32 %211, i32 1;
    i1 %224 = icmp slt i32 %223, i32 10000;
    cbr i1 %224(prob = 0.9999), ^while.body3, ^b1;
  ^if.else1:
    i1 %225 = icmp slt i32 %211, i32 30;
    cbr i1 %225(prob = 0.5), ^while.header, ^if.else2;
  ^if.else2:
    i32 %226 = load i32* %213;
    i32 %227 = mul i32 %226, i32 9;
    i32 %228 = add i32 %212, i32 %227;
    i32 %229 = srem i32 %228, i32 99988;
    ubr ^b;
  ^while.body4:
    i32 %230 = phi [^prebody, i32 5000] [^while.body4, i32 %296];
    i32 %231 = phi [^prebody, i32 %212] [^while.body4, i32 %295];
    i32* %232 = getelementptr &([10000 * i32]* %0)[i64 0][i32 %230];
    i32 %233 = load i32* %232;
    i32 %234 = add i32 %221, i32 %231;
    i32 %235 = sub i32 %234, i32 %233;
    i32 %236 = add i32 %221, i32 %235;
    i32* %237 = getelementptr &(i32* %232)[i64 1];
    i32 %238 = load i32* %237;
    i32 %239 = sub i32 %236, i32 %238;
    i32 %240 = add i32 %221, i32 %239;
    i32* %241 = getelementptr &(i32* %232)[i64 2];
    i32 %242 = load i32* %241;
    i32 %243 = sub i32 %240, i32 %242;
    i32 %244 = add i32 %221, i32 %243;
    i32* %245 = getelementptr &(i32* %232)[i64 3];
    i32 %246 = load i32* %245;
    i32 %247 = sub i32 %244, i32 %246;
    i32 %248 = add i32 %221, i32 %247;
    i32* %249 = getelementptr &(i32* %232)[i64 4];
    i32 %250 = load i32* %249;
    i32 %251 = sub i32 %248, i32 %250;
    i32 %252 = add i32 %221, i32 %251;
    i32* %253 = getelementptr &(i32* %232)[i64 5];
    i32 %254 = load i32* %253;
    i32 %255 = sub i32 %252, i32 %254;
    i32 %256 = add i32 %221, i32 %255;
    i32* %257 = getelementptr &(i32* %232)[i64 6];
    i32 %258 = load i32* %257;
    i32 %259 = sub i32 %256, i32 %258;
    i32 %260 = add i32 %221, i32 %259;
    i32* %261 = getelementptr &(i32* %232)[i64 7];
    i32 %262 = load i32* %261;
    i32 %263 = sub i32 %260, i32 %262;
    i32 %264 = add i32 %221, i32 %263;
    i32* %265 = getelementptr &(i32* %232)[i64 8];
    i32 %266 = load i32* %265;
    i32 %267 = sub i32 %264, i32 %266;
    i32 %268 = add i32 %221, i32 %267;
    i32* %269 = getelementptr &(i32* %232)[i64 9];
    i32 %270 = load i32* %269;
    i32 %271 = sub i32 %268, i32 %270;
    i32 %272 = add i32 %221, i32 %271;
    i32* %273 = getelementptr &(i32* %232)[i64 10];
    i32 %274 = load i32* %273;
    i32 %275 = sub i32 %272, i32 %274;
    i32 %276 = add i32 %221, i32 %275;
    i32* %277 = getelementptr &(i32* %232)[i64 11];
    i32 %278 = load i32* %277;
    i32 %279 = sub i32 %276, i32 %278;
    i32 %280 = add i32 %221, i32 %279;
    i32* %281 = getelementptr &(i32* %232)[i64 12];
    i32 %282 = load i32* %281;
    i32 %283 = sub i32 %280, i32 %282;
    i32 %284 = add i32 %221, i32 %283;
    i32* %285 = getelementptr &(i32* %232)[i64 13];
    i32 %286 = load i32* %285;
    i32 %287 = sub i32 %284, i32 %286;
    i32 %288 = add i32 %221, i32 %287;
    i32* %289 = getelementptr &(i32* %232)[i64 14];
    i32 %290 = load i32* %289;
    i32 %291 = sub i32 %288, i32 %290;
    i32 %292 = add i32 %221, i32 %291;
    i32* %293 = getelementptr &(i32* %232)[i64 15];
    i32 %294 = load i32* %293;
    i32 %295 = sub i32 %292, i32 %294;
    i32 %296 = add i32 %230, i32 16;
    i1 %297 = icmp slt i32 %296, i32 9992;
    cbr i1 %297(prob = 0.996795), ^while.body4, ^while.body5;
  ^while.header:
    i32 %298 = phi [^if.else1, i32 %212] [^if.then1, i32 %338] [^if.else3, i32 %345];
    i32 %299 = phi [^if.else1, i32 5000] [^if.then1, i32 %339] [^if.else3, i32 %346];
    i1 %300 = icmp slt i32 %299, i32 10000;
    cbr i1 %300(prob = 0.984615), ^while.body6, ^b2;
  ^b1:
    ret i32 %222;
  ^while.body5:
    i32 %301 = add i32 %221, i32 %295;
    i32* %302 = getelementptr &(i32* %232)[i64 16];
    i32 %303 = load i32* %302;
    i32 %304 = sub i32 %301, i32 %303;
    i32 %305 = add i32 %221, i32 %304;
    i32* %306 = getelementptr &(i32* %232)[i64 17];
    i32 %307 = load i32* %306;
    i32 %308 = sub i32 %305, i32 %307;
    i32 %309 = add i32 %221, i32 %308;
    i32* %310 = getelementptr &(i32* %232)[i64 18];
    i32 %311 = load i32* %310;
    i32 %312 = sub i32 %309, i32 %311;
    i32 %313 = add i32 %221, i32 %312;
    i32* %314 = getelementptr &(i32* %232)[i64 19];
    i32 %315 = load i32* %314;
    i32 %316 = sub i32 %313, i32 %315;
    i32 %317 = add i32 %221, i32 %316;
    i32* %318 = getelementptr &(i32* %232)[i64 20];
    i32 %319 = load i32* %318;
    i32 %320 = sub i32 %317, i32 %319;
    i32 %321 = add i32 %221, i32 %320;
    i32* %322 = getelementptr &(i32* %232)[i64 21];
    i32 %323 = load i32* %322;
    i32 %324 = sub i32 %321, i32 %323;
    i32 %325 = add i32 %221, i32 %324;
    i32* %326 = getelementptr &(i32* %232)[i64 22];
    i32 %327 = load i32* %326;
    i32 %328 = sub i32 %325, i32 %327;
    i32 %329 = add i32 %221, i32 %328;
    i32* %330 = getelementptr &(i32* %232)[i64 23];
    i32 %331 = load i32* %330;
    i32 %332 = sub i32 %329, i32 %331;
    call (i32) -> void @putint(i32 %332);
    ubr ^b;
  ^b2:
    call (i32) -> void @putint(i32 %298);
    ubr ^b;
  ^while.body6:
    i1 %333 = icmp sgt i32 %299, i32 2233;
    cbr i1 %333(prob = 0.5), ^if.then1, ^if.else3;
  ^if.then1:
    i32 %334 = load i32* %214;
    i32 %335 = add i32 %298, i32 %334;
    i32* %336 = getelementptr &([10000 * i32]* %0)[i64 0][i32 %299];
    i32 %337 = load i32* %336;
    i32 %338 = sub i32 %335, i32 %337;
    i32 %339 = add i32 %299, i32 1;
    ubr ^while.header;
  ^if.else3:
    i32* %340 = getelementptr &([10000 * i32]* %1)[i64 0][i32 %299];
    i32 %341 = load i32* %215;
    i32 %342 = load i32* %340;
    i32 %343 = add i32 %298, i32 %341;
    i32 %344 = add i32 %342, i32 %343;
    i32 %345 = srem i32 %344, i32 13333;
    i32 %346 = add i32 %299, i32 2;
    ubr ^while.header;
}
internal [10000 * i32]* @a1, align 8 { Flexible };
internal [10000 * i32]* @a2, align 8 { Flexible };
internal [10000 * i32]* @a3, align 8 { Flexible };
