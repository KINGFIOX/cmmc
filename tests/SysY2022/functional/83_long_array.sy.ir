internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [10000 * i32]* %a1 = alloc [10000 * i32];
    [10000 * i32]* %a2 = alloc [10000 * i32];
    [10000 * i32]* %a3 = alloc [10000 * i32];
    ubr ^while.body;
  ^while.body:
    i32 %0 = phi [^entry, i32 0] [^while.body, i32 %64];
    i32 %1 = mul i32 %0, i32 %0;
    i32 %2 = srem i32 %1, i32 10;
    i32* %3 = getelementptr &([10000 * i32]* %a1)[i64 0][i32 %0];
    store i32* %3 with i32 %2;
    i32 %4 = add i32 %0, i32 1;
    i32 %5 = mul i32 %4, i32 %4;
    i32 %6 = srem i32 %5, i32 10;
    i32* %7 = getelementptr &(i32* %3)[i64 1];
    store i32* %7 with i32 %6;
    i32 %8 = add i32 %0, i32 2;
    i32 %9 = mul i32 %8, i32 %8;
    i32 %10 = srem i32 %9, i32 10;
    i32* %11 = getelementptr &(i32* %3)[i64 2];
    store i32* %11 with i32 %10;
    i32 %12 = add i32 %0, i32 3;
    i32 %13 = mul i32 %12, i32 %12;
    i32 %14 = srem i32 %13, i32 10;
    i32* %15 = getelementptr &(i32* %3)[i64 3];
    store i32* %15 with i32 %14;
    i32 %16 = add i32 %0, i32 4;
    i32 %17 = mul i32 %16, i32 %16;
    i32 %18 = srem i32 %17, i32 10;
    i32* %19 = getelementptr &(i32* %3)[i64 4];
    store i32* %19 with i32 %18;
    i32 %20 = add i32 %0, i32 5;
    i32 %21 = mul i32 %20, i32 %20;
    i32 %22 = srem i32 %21, i32 10;
    i32* %23 = getelementptr &(i32* %3)[i64 5];
    store i32* %23 with i32 %22;
    i32 %24 = add i32 %0, i32 6;
    i32 %25 = mul i32 %24, i32 %24;
    i32 %26 = srem i32 %25, i32 10;
    i32* %27 = getelementptr &(i32* %3)[i64 6];
    store i32* %27 with i32 %26;
    i32 %28 = add i32 %0, i32 7;
    i32 %29 = mul i32 %28, i32 %28;
    i32 %30 = srem i32 %29, i32 10;
    i32* %31 = getelementptr &(i32* %3)[i64 7];
    store i32* %31 with i32 %30;
    i32 %32 = add i32 %0, i32 8;
    i32 %33 = mul i32 %32, i32 %32;
    i32 %34 = srem i32 %33, i32 10;
    i32* %35 = getelementptr &(i32* %3)[i64 8];
    store i32* %35 with i32 %34;
    i32 %36 = add i32 %0, i32 9;
    i32 %37 = mul i32 %36, i32 %36;
    i32 %38 = srem i32 %37, i32 10;
    i32* %39 = getelementptr &(i32* %3)[i64 9];
    store i32* %39 with i32 %38;
    i32 %40 = add i32 %0, i32 10;
    i32 %41 = mul i32 %40, i32 %40;
    i32 %42 = srem i32 %41, i32 10;
    i32* %43 = getelementptr &(i32* %3)[i64 10];
    store i32* %43 with i32 %42;
    i32 %44 = add i32 %0, i32 11;
    i32 %45 = mul i32 %44, i32 %44;
    i32 %46 = srem i32 %45, i32 10;
    i32* %47 = getelementptr &(i32* %3)[i64 11];
    store i32* %47 with i32 %46;
    i32 %48 = add i32 %0, i32 12;
    i32 %49 = mul i32 %48, i32 %48;
    i32 %50 = srem i32 %49, i32 10;
    i32* %51 = getelementptr &(i32* %3)[i64 12];
    store i32* %51 with i32 %50;
    i32 %52 = add i32 %0, i32 13;
    i32 %53 = mul i32 %52, i32 %52;
    i32 %54 = srem i32 %53, i32 10;
    i32* %55 = getelementptr &(i32* %3)[i64 13];
    store i32* %55 with i32 %54;
    i32 %56 = add i32 %0, i32 14;
    i32 %57 = mul i32 %56, i32 %56;
    i32 %58 = srem i32 %57, i32 10;
    i32* %59 = getelementptr &(i32* %3)[i64 14];
    store i32* %59 with i32 %58;
    i32 %60 = add i32 %0, i32 15;
    i32 %61 = mul i32 %60, i32 %60;
    i32 %62 = srem i32 %61, i32 10;
    i32* %63 = getelementptr &(i32* %3)[i64 15];
    store i32* %63 with i32 %62;
    i32 %64 = add i32 %0, i32 16;
    i1 %65 = scmp lt i32 %64, i32 10000;
    cbr i1 %65(prob = 1), ^while.body, ^while.body1;
  ^while.body1:
    i32 %66 = phi [^while.body, i32 0] [^while.body1, i32 %147];
    i32* %67 = getelementptr &([10000 * i32]* %a1)[i64 0][i32 %66];
    i32 %68 = load i32* %67;
    i32 %69 = mul i32 %68, i32 %68;
    i32 %70 = srem i32 %69, i32 10;
    i32* %71 = getelementptr &([10000 * i32]* %a2)[i64 0][i32 %66];
    store i32* %71 with i32 %70;
    i32* %72 = getelementptr &(i32* %67)[i64 1];
    i32 %73 = load i32* %72;
    i32 %74 = mul i32 %73, i32 %73;
    i32 %75 = srem i32 %74, i32 10;
    i32* %76 = getelementptr &(i32* %71)[i64 1];
    store i32* %76 with i32 %75;
    i32* %77 = getelementptr &(i32* %67)[i64 2];
    i32 %78 = load i32* %77;
    i32 %79 = mul i32 %78, i32 %78;
    i32 %80 = srem i32 %79, i32 10;
    i32* %81 = getelementptr &(i32* %71)[i64 2];
    store i32* %81 with i32 %80;
    i32* %82 = getelementptr &(i32* %67)[i64 3];
    i32 %83 = load i32* %82;
    i32 %84 = mul i32 %83, i32 %83;
    i32 %85 = srem i32 %84, i32 10;
    i32* %86 = getelementptr &(i32* %71)[i64 3];
    store i32* %86 with i32 %85;
    i32* %87 = getelementptr &(i32* %67)[i64 4];
    i32 %88 = load i32* %87;
    i32 %89 = mul i32 %88, i32 %88;
    i32 %90 = srem i32 %89, i32 10;
    i32* %91 = getelementptr &(i32* %71)[i64 4];
    store i32* %91 with i32 %90;
    i32* %92 = getelementptr &(i32* %67)[i64 5];
    i32 %93 = load i32* %92;
    i32 %94 = mul i32 %93, i32 %93;
    i32 %95 = srem i32 %94, i32 10;
    i32* %96 = getelementptr &(i32* %71)[i64 5];
    store i32* %96 with i32 %95;
    i32* %97 = getelementptr &(i32* %67)[i64 6];
    i32 %98 = load i32* %97;
    i32 %99 = mul i32 %98, i32 %98;
    i32 %100 = srem i32 %99, i32 10;
    i32* %101 = getelementptr &(i32* %71)[i64 6];
    store i32* %101 with i32 %100;
    i32* %102 = getelementptr &(i32* %67)[i64 7];
    i32 %103 = load i32* %102;
    i32 %104 = mul i32 %103, i32 %103;
    i32 %105 = srem i32 %104, i32 10;
    i32* %106 = getelementptr &(i32* %71)[i64 7];
    store i32* %106 with i32 %105;
    i32* %107 = getelementptr &(i32* %67)[i64 8];
    i32 %108 = load i32* %107;
    i32 %109 = mul i32 %108, i32 %108;
    i32 %110 = srem i32 %109, i32 10;
    i32* %111 = getelementptr &(i32* %71)[i64 8];
    store i32* %111 with i32 %110;
    i32* %112 = getelementptr &(i32* %67)[i64 9];
    i32 %113 = load i32* %112;
    i32 %114 = mul i32 %113, i32 %113;
    i32 %115 = srem i32 %114, i32 10;
    i32* %116 = getelementptr &(i32* %71)[i64 9];
    store i32* %116 with i32 %115;
    i32* %117 = getelementptr &(i32* %67)[i64 10];
    i32 %118 = load i32* %117;
    i32 %119 = mul i32 %118, i32 %118;
    i32 %120 = srem i32 %119, i32 10;
    i32* %121 = getelementptr &(i32* %71)[i64 10];
    store i32* %121 with i32 %120;
    i32* %122 = getelementptr &(i32* %67)[i64 11];
    i32 %123 = load i32* %122;
    i32 %124 = mul i32 %123, i32 %123;
    i32 %125 = srem i32 %124, i32 10;
    i32* %126 = getelementptr &(i32* %71)[i64 11];
    store i32* %126 with i32 %125;
    i32* %127 = getelementptr &(i32* %67)[i64 12];
    i32 %128 = load i32* %127;
    i32 %129 = mul i32 %128, i32 %128;
    i32 %130 = srem i32 %129, i32 10;
    i32* %131 = getelementptr &(i32* %71)[i64 12];
    store i32* %131 with i32 %130;
    i32* %132 = getelementptr &(i32* %67)[i64 13];
    i32 %133 = load i32* %132;
    i32 %134 = mul i32 %133, i32 %133;
    i32 %135 = srem i32 %134, i32 10;
    i32* %136 = getelementptr &(i32* %71)[i64 13];
    store i32* %136 with i32 %135;
    i32* %137 = getelementptr &(i32* %67)[i64 14];
    i32 %138 = load i32* %137;
    i32 %139 = mul i32 %138, i32 %138;
    i32 %140 = srem i32 %139, i32 10;
    i32* %141 = getelementptr &(i32* %71)[i64 14];
    store i32* %141 with i32 %140;
    i32* %142 = getelementptr &(i32* %67)[i64 15];
    i32 %143 = load i32* %142;
    i32 %144 = mul i32 %143, i32 %143;
    i32 %145 = srem i32 %144, i32 10;
    i32* %146 = getelementptr &(i32* %71)[i64 15];
    store i32* %146 with i32 %145;
    i32 %147 = add i32 %66, i32 16;
    i1 %148 = scmp lt i32 %147, i32 10000;
    cbr i1 %148(prob = 1), ^while.body1, ^while.body2;
  ^while.body2:
    i32 %149 = phi [^while.body1, i32 0] [^while.body2, i32 %278];
    i32* %150 = getelementptr &([10000 * i32]* %a2)[i64 0][i32 %149];
    i32 %151 = load i32* %150;
    i32 %152 = mul i32 %151, i32 %151;
    i32 %153 = srem i32 %152, i32 100;
    i32* %154 = getelementptr &([10000 * i32]* %a1)[i64 0][i32 %149];
    i32 %155 = load i32* %154;
    i32 %156 = add i32 %153, i32 %155;
    i32* %157 = getelementptr &([10000 * i32]* %a3)[i64 0][i32 %149];
    store i32* %157 with i32 %156;
    i32* %158 = getelementptr &(i32* %150)[i64 1];
    i32 %159 = load i32* %158;
    i32 %160 = mul i32 %159, i32 %159;
    i32 %161 = srem i32 %160, i32 100;
    i32* %162 = getelementptr &(i32* %154)[i64 1];
    i32 %163 = load i32* %162;
    i32 %164 = add i32 %161, i32 %163;
    i32* %165 = getelementptr &(i32* %157)[i64 1];
    store i32* %165 with i32 %164;
    i32* %166 = getelementptr &(i32* %150)[i64 2];
    i32 %167 = load i32* %166;
    i32 %168 = mul i32 %167, i32 %167;
    i32 %169 = srem i32 %168, i32 100;
    i32* %170 = getelementptr &(i32* %154)[i64 2];
    i32 %171 = load i32* %170;
    i32 %172 = add i32 %169, i32 %171;
    i32* %173 = getelementptr &(i32* %157)[i64 2];
    store i32* %173 with i32 %172;
    i32* %174 = getelementptr &(i32* %150)[i64 3];
    i32 %175 = load i32* %174;
    i32 %176 = mul i32 %175, i32 %175;
    i32 %177 = srem i32 %176, i32 100;
    i32* %178 = getelementptr &(i32* %154)[i64 3];
    i32 %179 = load i32* %178;
    i32 %180 = add i32 %177, i32 %179;
    i32* %181 = getelementptr &(i32* %157)[i64 3];
    store i32* %181 with i32 %180;
    i32* %182 = getelementptr &(i32* %150)[i64 4];
    i32 %183 = load i32* %182;
    i32 %184 = mul i32 %183, i32 %183;
    i32 %185 = srem i32 %184, i32 100;
    i32* %186 = getelementptr &(i32* %154)[i64 4];
    i32 %187 = load i32* %186;
    i32 %188 = add i32 %185, i32 %187;
    i32* %189 = getelementptr &(i32* %157)[i64 4];
    store i32* %189 with i32 %188;
    i32* %190 = getelementptr &(i32* %150)[i64 5];
    i32 %191 = load i32* %190;
    i32 %192 = mul i32 %191, i32 %191;
    i32 %193 = srem i32 %192, i32 100;
    i32* %194 = getelementptr &(i32* %154)[i64 5];
    i32 %195 = load i32* %194;
    i32 %196 = add i32 %193, i32 %195;
    i32* %197 = getelementptr &(i32* %157)[i64 5];
    store i32* %197 with i32 %196;
    i32* %198 = getelementptr &(i32* %150)[i64 6];
    i32 %199 = load i32* %198;
    i32 %200 = mul i32 %199, i32 %199;
    i32 %201 = srem i32 %200, i32 100;
    i32* %202 = getelementptr &(i32* %154)[i64 6];
    i32 %203 = load i32* %202;
    i32 %204 = add i32 %201, i32 %203;
    i32* %205 = getelementptr &(i32* %157)[i64 6];
    store i32* %205 with i32 %204;
    i32* %206 = getelementptr &(i32* %150)[i64 7];
    i32 %207 = load i32* %206;
    i32 %208 = mul i32 %207, i32 %207;
    i32 %209 = srem i32 %208, i32 100;
    i32* %210 = getelementptr &(i32* %154)[i64 7];
    i32 %211 = load i32* %210;
    i32 %212 = add i32 %209, i32 %211;
    i32* %213 = getelementptr &(i32* %157)[i64 7];
    store i32* %213 with i32 %212;
    i32* %214 = getelementptr &(i32* %150)[i64 8];
    i32 %215 = load i32* %214;
    i32 %216 = mul i32 %215, i32 %215;
    i32 %217 = srem i32 %216, i32 100;
    i32* %218 = getelementptr &(i32* %154)[i64 8];
    i32 %219 = load i32* %218;
    i32 %220 = add i32 %217, i32 %219;
    i32* %221 = getelementptr &(i32* %157)[i64 8];
    store i32* %221 with i32 %220;
    i32* %222 = getelementptr &(i32* %150)[i64 9];
    i32 %223 = load i32* %222;
    i32 %224 = mul i32 %223, i32 %223;
    i32 %225 = srem i32 %224, i32 100;
    i32* %226 = getelementptr &(i32* %154)[i64 9];
    i32 %227 = load i32* %226;
    i32 %228 = add i32 %225, i32 %227;
    i32* %229 = getelementptr &(i32* %157)[i64 9];
    store i32* %229 with i32 %228;
    i32* %230 = getelementptr &(i32* %150)[i64 10];
    i32 %231 = load i32* %230;
    i32 %232 = mul i32 %231, i32 %231;
    i32 %233 = srem i32 %232, i32 100;
    i32* %234 = getelementptr &(i32* %154)[i64 10];
    i32 %235 = load i32* %234;
    i32 %236 = add i32 %233, i32 %235;
    i32* %237 = getelementptr &(i32* %157)[i64 10];
    store i32* %237 with i32 %236;
    i32* %238 = getelementptr &(i32* %150)[i64 11];
    i32 %239 = load i32* %238;
    i32 %240 = mul i32 %239, i32 %239;
    i32 %241 = srem i32 %240, i32 100;
    i32* %242 = getelementptr &(i32* %154)[i64 11];
    i32 %243 = load i32* %242;
    i32 %244 = add i32 %241, i32 %243;
    i32* %245 = getelementptr &(i32* %157)[i64 11];
    store i32* %245 with i32 %244;
    i32* %246 = getelementptr &(i32* %150)[i64 12];
    i32 %247 = load i32* %246;
    i32 %248 = mul i32 %247, i32 %247;
    i32 %249 = srem i32 %248, i32 100;
    i32* %250 = getelementptr &(i32* %154)[i64 12];
    i32 %251 = load i32* %250;
    i32 %252 = add i32 %249, i32 %251;
    i32* %253 = getelementptr &(i32* %157)[i64 12];
    store i32* %253 with i32 %252;
    i32* %254 = getelementptr &(i32* %150)[i64 13];
    i32 %255 = load i32* %254;
    i32 %256 = mul i32 %255, i32 %255;
    i32 %257 = srem i32 %256, i32 100;
    i32* %258 = getelementptr &(i32* %154)[i64 13];
    i32 %259 = load i32* %258;
    i32 %260 = add i32 %257, i32 %259;
    i32* %261 = getelementptr &(i32* %157)[i64 13];
    store i32* %261 with i32 %260;
    i32* %262 = getelementptr &(i32* %150)[i64 14];
    i32 %263 = load i32* %262;
    i32 %264 = mul i32 %263, i32 %263;
    i32 %265 = srem i32 %264, i32 100;
    i32* %266 = getelementptr &(i32* %154)[i64 14];
    i32 %267 = load i32* %266;
    i32 %268 = add i32 %265, i32 %267;
    i32* %269 = getelementptr &(i32* %157)[i64 14];
    store i32* %269 with i32 %268;
    i32* %270 = getelementptr &(i32* %150)[i64 15];
    i32 %271 = load i32* %270;
    i32 %272 = mul i32 %271, i32 %271;
    i32 %273 = srem i32 %272, i32 100;
    i32* %274 = getelementptr &(i32* %154)[i64 15];
    i32 %275 = load i32* %274;
    i32 %276 = add i32 %273, i32 %275;
    i32* %277 = getelementptr &(i32* %157)[i64 15];
    store i32* %277 with i32 %276;
    i32 %278 = add i32 %149, i32 16;
    i1 %279 = scmp lt i32 %278, i32 10000;
    cbr i1 %279(prob = 1), ^while.body2, ^while.header;
  ^while.header:
    i32 %280 = phi [^while.body2, i32 0] [^b, i32 %292];
    i32 %281 = phi [^while.body2, i32 0] [^b, i32 %291];
    i1 %282 = scmp lt i32 %280, i32 10000;
    cbr i1 %282(prob = 0.97), ^while.body3, ^entry1;
  ^while.body3:
    i32* %283 = getelementptr &([10000 * i32]* %a1)[i64 0][i32 %280];
    i32* %284 = getelementptr &([10000 * i32]* %a2)[i64 0][i32 %280];
    i32* %285 = getelementptr &([10000 * i32]* %a3)[i64 0][i32 %280];
    i1 %286 = scmp lt i32 %280, i32 10;
    cbr i1 %286(prob = 0.5), ^if.then, ^if.else;
  ^entry1:
    ret i32 %281;
  ^if.then:
    i32 %287 = load i32* %285;
    i32 %288 = add i32 %281, i32 %287;
    i32 %289 = srem i32 %288, i32 1333;
    call (i32) -> void @putint(i32 %289);
    ubr ^b;
  ^if.else:
    i1 %290 = scmp lt i32 %280, i32 20;
    cbr i1 %290(prob = 0.5), ^while.header1, ^if.else1;
  ^b:
    i32 %291 = phi [^if.then, i32 %289] [^b1, i32 %303] [^if.else2, i32 %307];
    i32 %292 = add i32 %280, i32 1;
    ubr ^while.header;
  ^while.header1:
    i32 %293 = phi [^if.else, i32 5000] [^while.body4, i32 %302];
    i32 %294 = phi [^if.else, i32 %281] [^while.body4, i32 %301];
    i1 %295 = scmp lt i32 %293, i32 10000;
    cbr i1 %295(prob = 0.97), ^while.body4, ^b1;
  ^if.else1:
    i1 %296 = scmp lt i32 %280, i32 30;
    cbr i1 %296(prob = 0.5), ^while.header2, ^if.else2;
  ^while.body4:
    i32 %297 = load i32* %285;
    i32 %298 = add i32 %294, i32 %297;
    i32* %299 = getelementptr &([10000 * i32]* %a1)[i64 0][i32 %293];
    i32 %300 = load i32* %299;
    i32 %301 = sub i32 %298, i32 %300;
    i32 %302 = add i32 %293, i32 1;
    ubr ^while.header1;
  ^b1:
    i32 %303 = phi [^while.header1, i32 %294] [^while.header2, i32 %308];
    call (i32) -> void @putint(i32 %303);
    ubr ^b;
  ^if.else2:
    i32 %304 = load i32* %285;
    i32 %305 = mul i32 %304, i32 9;
    i32 %306 = add i32 %281, i32 %305;
    i32 %307 = srem i32 %306, i32 99988;
    ubr ^b;
  ^while.header2:
    i32 %308 = phi [^if.else1, i32 %281] [^if.then1, i32 %316] [^if.else3, i32 %323];
    i32 %309 = phi [^if.else1, i32 5000] [^if.then1, i32 %317] [^if.else3, i32 %324];
    i1 %310 = scmp lt i32 %309, i32 10000;
    cbr i1 %310(prob = 0.97), ^while.body5, ^b1;
  ^while.body5:
    i1 %311 = scmp gt i32 %309, i32 2233;
    cbr i1 %311(prob = 0.5), ^if.then1, ^if.else3;
  ^if.then1:
    i32 %312 = load i32* %284;
    i32 %313 = add i32 %308, i32 %312;
    i32* %314 = getelementptr &([10000 * i32]* %a1)[i64 0][i32 %309];
    i32 %315 = load i32* %314;
    i32 %316 = sub i32 %313, i32 %315;
    i32 %317 = add i32 %309, i32 1;
    ubr ^while.header2;
  ^if.else3:
    i32 %318 = load i32* %283;
    i32* %319 = getelementptr &([10000 * i32]* %a3)[i64 0][i32 %309];
    i32 %320 = load i32* %319;
    i32 %321 = add i32 %308, i32 %318;
    i32 %322 = add i32 %321, i32 %320;
    i32 %323 = srem i32 %322, i32 13333;
    i32 %324 = add i32 %309, i32 2;
    ubr ^while.header2;
}
