internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [10000 * i32]* %a1 = alloc [10000 * i32];
    [10000 * i32]* %a2 = alloc [10000 * i32];
    [10000 * i32]* %a3 = alloc [10000 * i32];
    ubr ^while.header;
^while.header:
    i32 %0 = phi [^while.body, i32 %5] [^entry, i32 0];
    i1 %1 = scmp lt i32 %0, i32 10000;
    cbr i1 %1(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i32* %2 = getelementptr &([10000 * i32]* %a1)[i64 0][i32 %0];
    i32 %3 = mul i32 %0, i32 %0;
    i32 %4 = srem i32 %3, i32 10;
    store i32* %2 with i32 %4;
    i32 %5 = add i32 %0, i32 1;
    ubr ^while.header;
^while.header1:
    i32 %6 = phi [^while.body1, i32 %13] [^while.header, i32 0];
    i1 %7 = scmp lt i32 %6, i32 10000;
    cbr i1 %7(prob = 0.97), ^while.body1, ^while.header2;
^while.body1:
    i32* %8 = getelementptr &([10000 * i32]* %a2)[i64 0][i32 %6];
    i32* %9 = getelementptr &([10000 * i32]* %a1)[i64 0][i32 %6];
    i32 %10 = load i32* %9;
    i32 %11 = mul i32 %10, i32 %10;
    i32 %12 = srem i32 %11, i32 10;
    store i32* %8 with i32 %12;
    i32 %13 = add i32 %6, i32 1;
    ubr ^while.header1;
^while.header2:
    i32 %14 = phi [^while.header1, i32 0] [^while.body2, i32 %24];
    i1 %15 = scmp lt i32 %14, i32 10000;
    cbr i1 %15(prob = 0.97), ^while.body2, ^while.header3;
^while.body2:
    i32* %16 = getelementptr &([10000 * i32]* %a3)[i64 0][i32 %14];
    i32* %17 = getelementptr &([10000 * i32]* %a2)[i64 0][i32 %14];
    i32 %18 = load i32* %17;
    i32 %19 = mul i32 %18, i32 %18;
    i32 %20 = srem i32 %19, i32 100;
    i32* %21 = getelementptr &([10000 * i32]* %a1)[i64 0][i32 %14];
    i32 %22 = load i32* %21;
    i32 %23 = add i32 %20, i32 %22;
    store i32* %16 with i32 %23;
    i32 %24 = add i32 %14, i32 1;
    ubr ^while.header2;
^while.header3:
    i32 %25 = phi [^while.header2, i32 0] [^b1, i32 %37];
    i32 %26 = phi [^while.header2, i32 0] [^b1, i32 %38];
    i1 %27 = scmp lt i32 %26, i32 10000;
    cbr i1 %27(prob = 0.97), ^while.body3, ^b;
^while.body3:
    i1 %28 = scmp lt i32 %26, i32 10;
    i32* %29 = getelementptr &([10000 * i32]* %a2)[i64 0][i32 %26];
    i32* %30 = getelementptr &([10000 * i32]* %a1)[i64 0][i32 %26];
    cbr i1 %28(prob = 0.5), ^if.then, ^if.else;
^b:
    ret i32 %25;
^if.then:
    i32* %31 = getelementptr &([10000 * i32]* %a3)[i64 0][i32 %26];
    i32 %32 = load i32* %31;
    i32 %33 = add i32 %32, i32 %25;
    i32 %34 = srem i32 %33, i32 1333;
    call (i32) -> void @putint(i32 %34);
    ubr ^b1;
^if.else:
    i1 %35 = scmp lt i32 %26, i32 20;
    i32* %36 = getelementptr &([10000 * i32]* %a3)[i64 0][i32 %26];
    cbr i1 %35(prob = 0.5), ^while.header4, ^if.else1;
^b1:
    i32 %37 = phi [^b2, i32 %49] [^if.else2, i32 %54] [^if.then, i32 %34];
    i32 %38 = add i32 %26, i32 1;
    ubr ^while.header3;
^while.header4:
    i32 %39 = phi [^if.else, i32 5000] [^while.body4, i32 %48];
    i32 %40 = phi [^if.else, i32 %25] [^while.body4, i32 %47];
    i1 %41 = scmp lt i32 %39, i32 10000;
    cbr i1 %41(prob = 0.97), ^while.body4, ^b2;
^if.else1:
    i1 %42 = scmp lt i32 %26, i32 30;
    cbr i1 %42(prob = 0.5), ^while.header5, ^if.else2;
^while.body4:
    i32 %43 = load i32* %36;
    i32 %44 = add i32 %43, i32 %40;
    i32* %45 = getelementptr &([10000 * i32]* %a1)[i64 0][i32 %39];
    i32 %46 = load i32* %45;
    i32 %47 = sub i32 %44, i32 %46;
    i32 %48 = add i32 %39, i32 1;
    ubr ^while.header4;
^b2:
    i32 %49 = phi [^while.header5, i32 %56] [^while.header4, i32 %40];
    call (i32) -> void @putint(i32 %49);
    ubr ^b1;
^if.else2:
    i32* %50 = getelementptr &([10000 * i32]* %a3)[i64 0][i32 %26];
    i32 %51 = load i32* %50;
    i32 %52 = mul i32 %51, i32 9;
    i32 %53 = add i32 %52, i32 %25;
    i32 %54 = srem i32 %53, i32 99988;
    ubr ^b1;
^while.header5:
    i32 %55 = phi [^if.else3, i32 %71] [^if.else1, i32 5000] [^if.then1, i32 %64];
    i32 %56 = phi [^if.else3, i32 %70] [^if.else1, i32 %25] [^if.then1, i32 %63];
    i1 %57 = scmp lt i32 %55, i32 10000;
    cbr i1 %57(prob = 0.97), ^while.body5, ^b2;
^while.body5:
    i1 %58 = scmp gt i32 %55, i32 2233;
    cbr i1 %58(prob = 0.5), ^if.then1, ^if.else3;
^if.then1:
    i32 %59 = load i32* %29;
    i32 %60 = add i32 %59, i32 %56;
    i32* %61 = getelementptr &([10000 * i32]* %a1)[i64 0][i32 %55];
    i32 %62 = load i32* %61;
    i32 %63 = sub i32 %60, i32 %62;
    i32 %64 = add i32 %55, i32 1;
    ubr ^while.header5;
^if.else3:
    i32 %65 = load i32* %30;
    i32* %66 = getelementptr &([10000 * i32]* %a3)[i64 0][i32 %55];
    i32 %67 = load i32* %66;
    i32 %68 = add i32 %65, i32 %67;
    i32 %69 = add i32 %68, i32 %56;
    i32 %70 = srem i32 %69, i32 13333;
    i32 %71 = add i32 %55, i32 2;
    ubr ^while.header5;
}
