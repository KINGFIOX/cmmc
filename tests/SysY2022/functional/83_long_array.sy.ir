internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [10000 * i32]* %0 = ptrcast [10000 * i32]* @a1 to [10000 * i32]*;
    ubr ^while.body;
  ^while.body:
    i32 %1 = phi [^entry, i32 16] [^while.body, i32 %99];
    i32 %2 = phi [^entry, i32 15] [^while.body, i32 %97];
    i32 %3 = phi [^entry, i32 14] [^while.body, i32 %96];
    i32 %4 = phi [^entry, i32 13] [^while.body, i32 %95];
    i32 %5 = phi [^entry, i32 12] [^while.body, i32 %94];
    i32 %6 = phi [^entry, i32 11] [^while.body, i32 %93];
    i32 %7 = phi [^entry, i32 10] [^while.body, i32 %92];
    i32 %8 = phi [^entry, i32 9] [^while.body, i32 %91];
    i32 %9 = phi [^entry, i32 8] [^while.body, i32 %90];
    i32 %10 = phi [^entry, i32 7] [^while.body, i32 %89];
    i32 %11 = phi [^entry, i32 6] [^while.body, i32 %88];
    i32 %12 = phi [^entry, i32 5] [^while.body, i32 %87];
    i32 %13 = phi [^entry, i32 4] [^while.body, i32 %86];
    i32 %14 = phi [^entry, i32 3] [^while.body, i32 %85];
    i32 %15 = phi [^entry, i32 2] [^while.body, i32 %84];
    i32 %16 = phi [^entry, i32 0] [^while.body, i32 %81];
    i32 %17 = phi [^entry, i32 1] [^while.body, i32 %98];
    i32 %18 = phi [^entry, i32 0] [^while.body, i32 %82];
    i32* %19 = getelementptr &([10000 * i32]* %0)[i64 0][i32 %18];
    i32 %20 = srem i32 %16, i32 10;
    store i32* %19 with i32 %20;
    i32* %21 = getelementptr &(i32* %19)[i64 1];
    i32 %22 = add i32 %16, i32 %17;
    i32 %23 = srem i32 %22, i32 10;
    store i32* %21 with i32 %23;
    i32 %24 = add i32 %15, i32 2;
    i32 %25 = add i32 %16, i32 %24;
    i32 %26 = srem i32 %25, i32 10;
    i32* %27 = getelementptr &(i32* %19)[i64 2];
    store i32* %27 with i32 %26;
    i32 %28 = add i32 %14, i32 6;
    i32 %29 = add i32 %16, i32 %28;
    i32 %30 = srem i32 %29, i32 10;
    i32* %31 = getelementptr &(i32* %19)[i64 3];
    store i32* %31 with i32 %30;
    i32 %32 = add i32 %13, i32 12;
    i32 %33 = add i32 %16, i32 %32;
    i32 %34 = srem i32 %33, i32 10;
    i32* %35 = getelementptr &(i32* %19)[i64 4];
    store i32* %35 with i32 %34;
    i32 %36 = add i32 %12, i32 20;
    i32 %37 = add i32 %16, i32 %36;
    i32 %38 = srem i32 %37, i32 10;
    i32* %39 = getelementptr &(i32* %19)[i64 5];
    store i32* %39 with i32 %38;
    i32 %40 = add i32 %11, i32 30;
    i32 %41 = add i32 %16, i32 %40;
    i32 %42 = srem i32 %41, i32 10;
    i32* %43 = getelementptr &(i32* %19)[i64 6];
    store i32* %43 with i32 %42;
    i32 %44 = add i32 %10, i32 42;
    i32 %45 = add i32 %16, i32 %44;
    i32 %46 = srem i32 %45, i32 10;
    i32* %47 = getelementptr &(i32* %19)[i64 7];
    store i32* %47 with i32 %46;
    i32 %48 = add i32 %9, i32 56;
    i32 %49 = add i32 %16, i32 %48;
    i32 %50 = srem i32 %49, i32 10;
    i32* %51 = getelementptr &(i32* %19)[i64 8];
    store i32* %51 with i32 %50;
    i32 %52 = add i32 %8, i32 72;
    i32 %53 = add i32 %16, i32 %52;
    i32 %54 = srem i32 %53, i32 10;
    i32* %55 = getelementptr &(i32* %19)[i64 9];
    store i32* %55 with i32 %54;
    i32 %56 = add i32 %7, i32 90;
    i32 %57 = add i32 %16, i32 %56;
    i32 %58 = srem i32 %57, i32 10;
    i32* %59 = getelementptr &(i32* %19)[i64 10];
    store i32* %59 with i32 %58;
    i32 %60 = add i32 %6, i32 110;
    i32 %61 = add i32 %16, i32 %60;
    i32 %62 = srem i32 %61, i32 10;
    i32* %63 = getelementptr &(i32* %19)[i64 11];
    store i32* %63 with i32 %62;
    i32 %64 = add i32 %5, i32 132;
    i32 %65 = add i32 %16, i32 %64;
    i32 %66 = srem i32 %65, i32 10;
    i32* %67 = getelementptr &(i32* %19)[i64 12];
    store i32* %67 with i32 %66;
    i32 %68 = add i32 %4, i32 156;
    i32 %69 = add i32 %16, i32 %68;
    i32 %70 = srem i32 %69, i32 10;
    i32* %71 = getelementptr &(i32* %19)[i64 13];
    store i32* %71 with i32 %70;
    i32 %72 = add i32 %3, i32 182;
    i32 %73 = add i32 %16, i32 %72;
    i32 %74 = srem i32 %73, i32 10;
    i32* %75 = getelementptr &(i32* %19)[i64 14];
    store i32* %75 with i32 %74;
    i32 %76 = add i32 %2, i32 210;
    i32 %77 = add i32 %16, i32 %76;
    i32 %78 = srem i32 %77, i32 10;
    i32* %79 = getelementptr &(i32* %19)[i64 15];
    store i32* %79 with i32 %78;
    i32 %80 = add i32 %1, i32 240;
    i32 %81 = add i32 %16, i32 %80;
    i32 %82 = add i32 %18, i32 16;
    i1 %83 = icmp slt i32 %82, i32 10000;
    i32 %84 = add i32 %15, i32 64;
    i32 %85 = add i32 %14, i32 96;
    i32 %86 = add i32 %13, i32 128;
    i32 %87 = add i32 %12, i32 160;
    i32 %88 = add i32 %11, i32 192;
    i32 %89 = add i32 %10, i32 224;
    i32 %90 = add i32 %9, i32 256;
    i32 %91 = add i32 %8, i32 288;
    i32 %92 = add i32 %7, i32 320;
    i32 %93 = add i32 %6, i32 352;
    i32 %94 = add i32 %5, i32 384;
    i32 %95 = add i32 %4, i32 416;
    i32 %96 = add i32 %3, i32 448;
    i32 %97 = add i32 %2, i32 480;
    i32 %98 = add i32 %17, i32 32;
    i32 %99 = add i32 %1, i32 512;
    cbr i1 %83(prob = 0.9984), ^while.body, ^prebody;
  ^prebody:
    [10000 * i32]* %100 = ptrcast [10000 * i32]* @a2 to [10000 * i32]*;
    ubr ^while.body1;
  ^while.body1:
    i32 %101 = phi [^prebody, i32 0] [^while.body1, i32 %182];
    i32* %102 = getelementptr &([10000 * i32]* %0)[i64 0][i32 %101];
    i32 %103 = load i32* %102;
    i32 %104 = mul i32 %103, i32 %103;
    i32 %105 = srem i32 %104, i32 10;
    i32* %106 = getelementptr &([10000 * i32]* %100)[i64 0][i32 %101];
    store i32* %106 with i32 %105;
    i32* %107 = getelementptr &(i32* %102)[i64 1];
    i32 %108 = load i32* %107;
    i32 %109 = mul i32 %108, i32 %108;
    i32 %110 = srem i32 %109, i32 10;
    i32* %111 = getelementptr &(i32* %106)[i64 1];
    store i32* %111 with i32 %110;
    i32* %112 = getelementptr &(i32* %102)[i64 2];
    i32 %113 = load i32* %112;
    i32 %114 = mul i32 %113, i32 %113;
    i32 %115 = srem i32 %114, i32 10;
    i32* %116 = getelementptr &(i32* %106)[i64 2];
    store i32* %116 with i32 %115;
    i32* %117 = getelementptr &(i32* %102)[i64 3];
    i32 %118 = load i32* %117;
    i32 %119 = mul i32 %118, i32 %118;
    i32 %120 = srem i32 %119, i32 10;
    i32* %121 = getelementptr &(i32* %106)[i64 3];
    store i32* %121 with i32 %120;
    i32* %122 = getelementptr &(i32* %102)[i64 4];
    i32 %123 = load i32* %122;
    i32 %124 = mul i32 %123, i32 %123;
    i32 %125 = srem i32 %124, i32 10;
    i32* %126 = getelementptr &(i32* %106)[i64 4];
    store i32* %126 with i32 %125;
    i32* %127 = getelementptr &(i32* %102)[i64 5];
    i32 %128 = load i32* %127;
    i32 %129 = mul i32 %128, i32 %128;
    i32 %130 = srem i32 %129, i32 10;
    i32* %131 = getelementptr &(i32* %106)[i64 5];
    store i32* %131 with i32 %130;
    i32* %132 = getelementptr &(i32* %102)[i64 6];
    i32 %133 = load i32* %132;
    i32 %134 = mul i32 %133, i32 %133;
    i32 %135 = srem i32 %134, i32 10;
    i32* %136 = getelementptr &(i32* %106)[i64 6];
    store i32* %136 with i32 %135;
    i32* %137 = getelementptr &(i32* %102)[i64 7];
    i32 %138 = load i32* %137;
    i32 %139 = mul i32 %138, i32 %138;
    i32 %140 = srem i32 %139, i32 10;
    i32* %141 = getelementptr &(i32* %106)[i64 7];
    store i32* %141 with i32 %140;
    i32* %142 = getelementptr &(i32* %102)[i64 8];
    i32 %143 = load i32* %142;
    i32 %144 = mul i32 %143, i32 %143;
    i32 %145 = srem i32 %144, i32 10;
    i32* %146 = getelementptr &(i32* %106)[i64 8];
    store i32* %146 with i32 %145;
    i32* %147 = getelementptr &(i32* %102)[i64 9];
    i32 %148 = load i32* %147;
    i32 %149 = mul i32 %148, i32 %148;
    i32 %150 = srem i32 %149, i32 10;
    i32* %151 = getelementptr &(i32* %106)[i64 9];
    store i32* %151 with i32 %150;
    i32* %152 = getelementptr &(i32* %102)[i64 10];
    i32 %153 = load i32* %152;
    i32 %154 = mul i32 %153, i32 %153;
    i32 %155 = srem i32 %154, i32 10;
    i32* %156 = getelementptr &(i32* %106)[i64 10];
    store i32* %156 with i32 %155;
    i32* %157 = getelementptr &(i32* %102)[i64 11];
    i32 %158 = load i32* %157;
    i32 %159 = mul i32 %158, i32 %158;
    i32 %160 = srem i32 %159, i32 10;
    i32* %161 = getelementptr &(i32* %106)[i64 11];
    store i32* %161 with i32 %160;
    i32* %162 = getelementptr &(i32* %102)[i64 12];
    i32 %163 = load i32* %162;
    i32 %164 = mul i32 %163, i32 %163;
    i32 %165 = srem i32 %164, i32 10;
    i32* %166 = getelementptr &(i32* %106)[i64 12];
    store i32* %166 with i32 %165;
    i32* %167 = getelementptr &(i32* %102)[i64 13];
    i32 %168 = load i32* %167;
    i32 %169 = mul i32 %168, i32 %168;
    i32 %170 = srem i32 %169, i32 10;
    i32* %171 = getelementptr &(i32* %106)[i64 13];
    store i32* %171 with i32 %170;
    i32* %172 = getelementptr &(i32* %102)[i64 14];
    i32 %173 = load i32* %172;
    i32 %174 = mul i32 %173, i32 %173;
    i32 %175 = srem i32 %174, i32 10;
    i32* %176 = getelementptr &(i32* %106)[i64 14];
    store i32* %176 with i32 %175;
    i32* %177 = getelementptr &(i32* %102)[i64 15];
    i32 %178 = load i32* %177;
    i32 %179 = mul i32 %178, i32 %178;
    i32 %180 = srem i32 %179, i32 10;
    i32* %181 = getelementptr &(i32* %106)[i64 15];
    store i32* %181 with i32 %180;
    i32 %182 = add i32 %101, i32 16;
    i1 %183 = icmp slt i32 %182, i32 10000;
    cbr i1 %183(prob = 0.9984), ^while.body1, ^prebody1;
  ^prebody1:
    [10000 * i32]* %184 = ptrcast [10000 * i32]* @a3 to [10000 * i32]*;
    ubr ^while.body2;
  ^while.body2:
    i32 %185 = phi [^prebody1, i32 0] [^while.body2, i32 %218];
    i32* %186 = getelementptr &([10000 * i32]* %100)[i64 0][i32 %185];
    i32 %187 = load i32* %186;
    i32 %188 = mul i32 %187, i32 %187;
    i32 %189 = srem i32 %188, i32 100;
    i32* %190 = getelementptr &([10000 * i32]* %0)[i64 0][i32 %185];
    i32 %191 = load i32* %190;
    i32 %192 = add i32 %189, i32 %191;
    i32* %193 = getelementptr &([10000 * i32]* %184)[i64 0][i32 %185];
    store i32* %193 with i32 %192;
    i32* %194 = getelementptr &(i32* %186)[i64 1];
    i32 %195 = load i32* %194;
    i32 %196 = mul i32 %195, i32 %195;
    i32 %197 = srem i32 %196, i32 100;
    i32* %198 = getelementptr &(i32* %190)[i64 1];
    i32 %199 = load i32* %198;
    i32 %200 = add i32 %197, i32 %199;
    i32* %201 = getelementptr &(i32* %193)[i64 1];
    store i32* %201 with i32 %200;
    i32* %202 = getelementptr &(i32* %186)[i64 2];
    i32 %203 = load i32* %202;
    i32 %204 = mul i32 %203, i32 %203;
    i32 %205 = srem i32 %204, i32 100;
    i32* %206 = getelementptr &(i32* %190)[i64 2];
    i32 %207 = load i32* %206;
    i32 %208 = add i32 %205, i32 %207;
    i32* %209 = getelementptr &(i32* %193)[i64 2];
    store i32* %209 with i32 %208;
    i32* %210 = getelementptr &(i32* %186)[i64 3];
    i32 %211 = load i32* %210;
    i32 %212 = mul i32 %211, i32 %211;
    i32 %213 = srem i32 %212, i32 100;
    i32* %214 = getelementptr &(i32* %190)[i64 3];
    i32 %215 = load i32* %214;
    i32 %216 = add i32 %213, i32 %215;
    i32* %217 = getelementptr &(i32* %193)[i64 3];
    store i32* %217 with i32 %216;
    i32 %218 = add i32 %185, i32 4;
    i1 %219 = icmp slt i32 %218, i32 10000;
    cbr i1 %219(prob = 0.9996), ^while.body2, ^while.header;
  ^while.header:
    i32 %220 = phi [^while.body2, i32 0] [^if.then, i32 %230] [^if.else2, i32 %305] [^while.body5, i32 %340] [^b1, i32 %306];
    i32 %221 = phi [^while.body2, i32 0] [^if.then, i32 %227] [^if.else2, i32 %227] [^while.body5, i32 %227] [^b1, i32 %227];
    i1 %222 = icmp slt i32 %221, i32 10000;
    cbr i1 %222(prob = 0.984615), ^while.body3, ^b;
  ^while.body3:
    i32* %223 = getelementptr &([10000 * i32]* %0)[i64 0][i32 %221];
    i32* %224 = getelementptr &([10000 * i32]* %100)[i64 0][i32 %221];
    i32* %225 = getelementptr &([10000 * i32]* %184)[i64 0][i32 %221];
    i1 %226 = icmp slt i32 %221, i32 10;
    i32 %227 = add i32 %221, i32 1;
    cbr i1 %226(prob = 0.5), ^if.then, ^if.else;
  ^b:
    ret i32 %220;
  ^if.then:
    i32 %228 = load i32* %225;
    i32 %229 = add i32 %220, i32 %228;
    i32 %230 = srem i32 %229, i32 1333;
    call (i32) -> void @putint(i32 %230);
    ubr ^while.header;
  ^if.else:
    i1 %231 = icmp slt i32 %221, i32 20;
    cbr i1 %231(prob = 0.5), ^prebody2, ^if.else1;
  ^prebody2:
    i32 %232 = load i32* %225;
    ubr ^while.body4;
  ^if.else1:
    i1 %233 = icmp slt i32 %221, i32 30;
    cbr i1 %233(prob = 0.5), ^while.header1, ^if.else2;
  ^while.body4:
    i32 %234 = phi [^prebody2, i32 5000] [^while.body4, i32 %300];
    i32 %235 = phi [^prebody2, i32 %220] [^while.body4, i32 %299];
    i32* %236 = getelementptr &([10000 * i32]* %0)[i64 0][i32 %234];
    i32 %237 = load i32* %236;
    i32 %238 = add i32 %232, i32 %235;
    i32 %239 = sub i32 %238, i32 %237;
    i32 %240 = add i32 %232, i32 %239;
    i32* %241 = getelementptr &(i32* %236)[i64 1];
    i32 %242 = load i32* %241;
    i32 %243 = sub i32 %240, i32 %242;
    i32 %244 = add i32 %232, i32 %243;
    i32* %245 = getelementptr &(i32* %236)[i64 2];
    i32 %246 = load i32* %245;
    i32 %247 = sub i32 %244, i32 %246;
    i32 %248 = add i32 %232, i32 %247;
    i32* %249 = getelementptr &(i32* %236)[i64 3];
    i32 %250 = load i32* %249;
    i32 %251 = sub i32 %248, i32 %250;
    i32 %252 = add i32 %232, i32 %251;
    i32* %253 = getelementptr &(i32* %236)[i64 4];
    i32 %254 = load i32* %253;
    i32 %255 = sub i32 %252, i32 %254;
    i32 %256 = add i32 %232, i32 %255;
    i32* %257 = getelementptr &(i32* %236)[i64 5];
    i32 %258 = load i32* %257;
    i32 %259 = sub i32 %256, i32 %258;
    i32 %260 = add i32 %232, i32 %259;
    i32* %261 = getelementptr &(i32* %236)[i64 6];
    i32 %262 = load i32* %261;
    i32 %263 = sub i32 %260, i32 %262;
    i32 %264 = add i32 %232, i32 %263;
    i32* %265 = getelementptr &(i32* %236)[i64 7];
    i32 %266 = load i32* %265;
    i32 %267 = sub i32 %264, i32 %266;
    i32 %268 = add i32 %232, i32 %267;
    i32* %269 = getelementptr &(i32* %236)[i64 8];
    i32 %270 = load i32* %269;
    i32 %271 = sub i32 %268, i32 %270;
    i32 %272 = add i32 %232, i32 %271;
    i32* %273 = getelementptr &(i32* %236)[i64 9];
    i32 %274 = load i32* %273;
    i32 %275 = sub i32 %272, i32 %274;
    i32 %276 = add i32 %232, i32 %275;
    i32* %277 = getelementptr &(i32* %236)[i64 10];
    i32 %278 = load i32* %277;
    i32 %279 = sub i32 %276, i32 %278;
    i32 %280 = add i32 %232, i32 %279;
    i32* %281 = getelementptr &(i32* %236)[i64 11];
    i32 %282 = load i32* %281;
    i32 %283 = sub i32 %280, i32 %282;
    i32 %284 = add i32 %232, i32 %283;
    i32* %285 = getelementptr &(i32* %236)[i64 12];
    i32 %286 = load i32* %285;
    i32 %287 = sub i32 %284, i32 %286;
    i32 %288 = add i32 %232, i32 %287;
    i32* %289 = getelementptr &(i32* %236)[i64 13];
    i32 %290 = load i32* %289;
    i32 %291 = sub i32 %288, i32 %290;
    i32 %292 = add i32 %232, i32 %291;
    i32* %293 = getelementptr &(i32* %236)[i64 14];
    i32 %294 = load i32* %293;
    i32 %295 = sub i32 %292, i32 %294;
    i32 %296 = add i32 %232, i32 %295;
    i32* %297 = getelementptr &(i32* %236)[i64 15];
    i32 %298 = load i32* %297;
    i32 %299 = sub i32 %296, i32 %298;
    i32 %300 = add i32 %234, i32 16;
    i1 %301 = icmp slt i32 %300, i32 9992;
    cbr i1 %301(prob = 0.996795), ^while.body4, ^while.body5;
  ^if.else2:
    i32 %302 = load i32* %225;
    i32 %303 = mul i32 %302, i32 9;
    i32 %304 = add i32 %220, i32 %303;
    i32 %305 = srem i32 %304, i32 99988;
    ubr ^while.header;
  ^while.header1:
    i32 %306 = phi [^if.else1, i32 %220] [^if.then1, i32 %346] [^if.else3, i32 %353];
    i32 %307 = phi [^if.else1, i32 5000] [^if.then1, i32 %347] [^if.else3, i32 %354];
    i1 %308 = icmp slt i32 %307, i32 10000;
    cbr i1 %308(prob = 0.984615), ^while.body6, ^b1;
  ^while.body5:
    i32 %309 = add i32 %232, i32 %299;
    i32* %310 = getelementptr &(i32* %236)[i64 16];
    i32 %311 = load i32* %310;
    i32 %312 = sub i32 %309, i32 %311;
    i32 %313 = add i32 %232, i32 %312;
    i32* %314 = getelementptr &(i32* %236)[i64 17];
    i32 %315 = load i32* %314;
    i32 %316 = sub i32 %313, i32 %315;
    i32 %317 = add i32 %232, i32 %316;
    i32* %318 = getelementptr &(i32* %236)[i64 18];
    i32 %319 = load i32* %318;
    i32 %320 = sub i32 %317, i32 %319;
    i32 %321 = add i32 %232, i32 %320;
    i32* %322 = getelementptr &(i32* %236)[i64 19];
    i32 %323 = load i32* %322;
    i32 %324 = sub i32 %321, i32 %323;
    i32 %325 = add i32 %232, i32 %324;
    i32* %326 = getelementptr &(i32* %236)[i64 20];
    i32 %327 = load i32* %326;
    i32 %328 = sub i32 %325, i32 %327;
    i32 %329 = add i32 %232, i32 %328;
    i32* %330 = getelementptr &(i32* %236)[i64 21];
    i32 %331 = load i32* %330;
    i32 %332 = sub i32 %329, i32 %331;
    i32 %333 = add i32 %232, i32 %332;
    i32* %334 = getelementptr &(i32* %236)[i64 22];
    i32 %335 = load i32* %334;
    i32 %336 = sub i32 %333, i32 %335;
    i32 %337 = add i32 %232, i32 %336;
    i32* %338 = getelementptr &(i32* %236)[i64 23];
    i32 %339 = load i32* %338;
    i32 %340 = sub i32 %337, i32 %339;
    call (i32) -> void @putint(i32 %340);
    ubr ^while.header;
  ^b1:
    call (i32) -> void @putint(i32 %306);
    ubr ^while.header;
  ^while.body6:
    i1 %341 = icmp sgt i32 %307, i32 2233;
    cbr i1 %341(prob = 0.5), ^if.then1, ^if.else3;
  ^if.then1:
    i32 %342 = load i32* %224;
    i32 %343 = add i32 %306, i32 %342;
    i32* %344 = getelementptr &([10000 * i32]* %0)[i64 0][i32 %307];
    i32 %345 = load i32* %344;
    i32 %346 = sub i32 %343, i32 %345;
    i32 %347 = add i32 %307, i32 1;
    ubr ^while.header1;
  ^if.else3:
    i32* %348 = getelementptr &([10000 * i32]* %184)[i64 0][i32 %307];
    i32 %349 = load i32* %223;
    i32 %350 = load i32* %348;
    i32 %351 = add i32 %306, i32 %349;
    i32 %352 = add i32 %350, i32 %351;
    i32 %353 = srem i32 %352, i32 13333;
    i32 %354 = add i32 %307, i32 2;
    ubr ^while.header1;
}
internal [10000 * i32]* @a1, align 8 { Flexible };
internal [10000 * i32]* @a2, align 8 { Flexible };
internal [10000 * i32]* @a3, align 8 { Flexible };
