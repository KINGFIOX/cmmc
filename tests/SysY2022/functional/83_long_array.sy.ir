internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [10000 * i32]* %0 = ptrcast [10000 * i32]* @a1 to [10000 * i32]*;
    [10000 * i32]* %1 = ptrcast [10000 * i32]* @a2 to [10000 * i32]*;
    [10000 * i32]* %2 = ptrcast [10000 * i32]* @a3 to [10000 * i32]*;
    ubr ^while.body;
  ^while.body:
    i32 %3 = phi [^entry, i32 0] [^while.body, i32 %67];
    i32* %4 = getelementptr &([10000 * i32]* %0)[i64 0][i32 %3];
    i32 %5 = mul i32 %3, i32 %3;
    i32 %6 = srem i32 %5, i32 10;
    store i32* %4 with i32 %6;
    i32* %7 = getelementptr &(i32* %4)[i64 1];
    i32 %8 = add i32 %3, i32 1;
    i32 %9 = mul i32 %8, i32 %8;
    i32 %10 = srem i32 %9, i32 10;
    store i32* %7 with i32 %10;
    i32* %11 = getelementptr &(i32* %4)[i64 2];
    i32 %12 = add i32 %3, i32 2;
    i32 %13 = mul i32 %12, i32 %12;
    i32 %14 = srem i32 %13, i32 10;
    store i32* %11 with i32 %14;
    i32* %15 = getelementptr &(i32* %4)[i64 3];
    i32 %16 = add i32 %3, i32 3;
    i32 %17 = mul i32 %16, i32 %16;
    i32 %18 = srem i32 %17, i32 10;
    store i32* %15 with i32 %18;
    i32* %19 = getelementptr &(i32* %4)[i64 4];
    i32 %20 = add i32 %3, i32 4;
    i32 %21 = mul i32 %20, i32 %20;
    i32 %22 = srem i32 %21, i32 10;
    store i32* %19 with i32 %22;
    i32* %23 = getelementptr &(i32* %4)[i64 5];
    i32 %24 = add i32 %3, i32 5;
    i32 %25 = mul i32 %24, i32 %24;
    i32 %26 = srem i32 %25, i32 10;
    store i32* %23 with i32 %26;
    i32* %27 = getelementptr &(i32* %4)[i64 6];
    i32 %28 = add i32 %3, i32 6;
    i32 %29 = mul i32 %28, i32 %28;
    i32 %30 = srem i32 %29, i32 10;
    store i32* %27 with i32 %30;
    i32* %31 = getelementptr &(i32* %4)[i64 7];
    i32 %32 = add i32 %3, i32 7;
    i32 %33 = mul i32 %32, i32 %32;
    i32 %34 = srem i32 %33, i32 10;
    store i32* %31 with i32 %34;
    i32* %35 = getelementptr &(i32* %4)[i64 8];
    i32 %36 = add i32 %3, i32 8;
    i32 %37 = mul i32 %36, i32 %36;
    i32 %38 = srem i32 %37, i32 10;
    store i32* %35 with i32 %38;
    i32* %39 = getelementptr &(i32* %4)[i64 9];
    i32 %40 = add i32 %3, i32 9;
    i32 %41 = mul i32 %40, i32 %40;
    i32 %42 = srem i32 %41, i32 10;
    store i32* %39 with i32 %42;
    i32* %43 = getelementptr &(i32* %4)[i64 10];
    i32 %44 = add i32 %3, i32 10;
    i32 %45 = mul i32 %44, i32 %44;
    i32 %46 = srem i32 %45, i32 10;
    store i32* %43 with i32 %46;
    i32* %47 = getelementptr &(i32* %4)[i64 11];
    i32 %48 = add i32 %3, i32 11;
    i32 %49 = mul i32 %48, i32 %48;
    i32 %50 = srem i32 %49, i32 10;
    store i32* %47 with i32 %50;
    i32* %51 = getelementptr &(i32* %4)[i64 12];
    i32 %52 = add i32 %3, i32 12;
    i32 %53 = mul i32 %52, i32 %52;
    i32 %54 = srem i32 %53, i32 10;
    store i32* %51 with i32 %54;
    i32* %55 = getelementptr &(i32* %4)[i64 13];
    i32 %56 = add i32 %3, i32 13;
    i32 %57 = mul i32 %56, i32 %56;
    i32 %58 = srem i32 %57, i32 10;
    store i32* %55 with i32 %58;
    i32* %59 = getelementptr &(i32* %4)[i64 14];
    i32 %60 = add i32 %3, i32 14;
    i32 %61 = mul i32 %60, i32 %60;
    i32 %62 = srem i32 %61, i32 10;
    store i32* %59 with i32 %62;
    i32* %63 = getelementptr &(i32* %4)[i64 15];
    i32 %64 = add i32 %3, i32 15;
    i32 %65 = mul i32 %64, i32 %64;
    i32 %66 = srem i32 %65, i32 10;
    store i32* %63 with i32 %66;
    i32 %67 = add i32 %3, i32 16;
    i1 %68 = icmp slt i32 %67, i32 10000;
    cbr i1 %68(prob = 1), ^while.body, ^while.body1;
  ^while.body1:
    i32 %69 = phi [^while.body, i32 0] [^while.body1, i32 %150];
    i32* %70 = getelementptr &([10000 * i32]* %0)[i64 0][i32 %69];
    i32 %71 = load i32* %70;
    i32 %72 = mul i32 %71, i32 %71;
    i32 %73 = srem i32 %72, i32 10;
    i32* %74 = getelementptr &([10000 * i32]* %1)[i64 0][i32 %69];
    store i32* %74 with i32 %73;
    i32* %75 = getelementptr &(i32* %70)[i64 1];
    i32 %76 = load i32* %75;
    i32 %77 = mul i32 %76, i32 %76;
    i32 %78 = srem i32 %77, i32 10;
    i32* %79 = getelementptr &(i32* %74)[i64 1];
    store i32* %79 with i32 %78;
    i32* %80 = getelementptr &(i32* %70)[i64 2];
    i32 %81 = load i32* %80;
    i32 %82 = mul i32 %81, i32 %81;
    i32 %83 = srem i32 %82, i32 10;
    i32* %84 = getelementptr &(i32* %74)[i64 2];
    store i32* %84 with i32 %83;
    i32* %85 = getelementptr &(i32* %70)[i64 3];
    i32 %86 = load i32* %85;
    i32 %87 = mul i32 %86, i32 %86;
    i32 %88 = srem i32 %87, i32 10;
    i32* %89 = getelementptr &(i32* %74)[i64 3];
    store i32* %89 with i32 %88;
    i32* %90 = getelementptr &(i32* %70)[i64 4];
    i32 %91 = load i32* %90;
    i32 %92 = mul i32 %91, i32 %91;
    i32 %93 = srem i32 %92, i32 10;
    i32* %94 = getelementptr &(i32* %74)[i64 4];
    store i32* %94 with i32 %93;
    i32* %95 = getelementptr &(i32* %70)[i64 5];
    i32 %96 = load i32* %95;
    i32 %97 = mul i32 %96, i32 %96;
    i32 %98 = srem i32 %97, i32 10;
    i32* %99 = getelementptr &(i32* %74)[i64 5];
    store i32* %99 with i32 %98;
    i32* %100 = getelementptr &(i32* %70)[i64 6];
    i32 %101 = load i32* %100;
    i32 %102 = mul i32 %101, i32 %101;
    i32 %103 = srem i32 %102, i32 10;
    i32* %104 = getelementptr &(i32* %74)[i64 6];
    store i32* %104 with i32 %103;
    i32* %105 = getelementptr &(i32* %70)[i64 7];
    i32 %106 = load i32* %105;
    i32 %107 = mul i32 %106, i32 %106;
    i32 %108 = srem i32 %107, i32 10;
    i32* %109 = getelementptr &(i32* %74)[i64 7];
    store i32* %109 with i32 %108;
    i32* %110 = getelementptr &(i32* %70)[i64 8];
    i32 %111 = load i32* %110;
    i32 %112 = mul i32 %111, i32 %111;
    i32 %113 = srem i32 %112, i32 10;
    i32* %114 = getelementptr &(i32* %74)[i64 8];
    store i32* %114 with i32 %113;
    i32* %115 = getelementptr &(i32* %70)[i64 9];
    i32 %116 = load i32* %115;
    i32 %117 = mul i32 %116, i32 %116;
    i32 %118 = srem i32 %117, i32 10;
    i32* %119 = getelementptr &(i32* %74)[i64 9];
    store i32* %119 with i32 %118;
    i32* %120 = getelementptr &(i32* %70)[i64 10];
    i32 %121 = load i32* %120;
    i32 %122 = mul i32 %121, i32 %121;
    i32 %123 = srem i32 %122, i32 10;
    i32* %124 = getelementptr &(i32* %74)[i64 10];
    store i32* %124 with i32 %123;
    i32* %125 = getelementptr &(i32* %70)[i64 11];
    i32 %126 = load i32* %125;
    i32 %127 = mul i32 %126, i32 %126;
    i32 %128 = srem i32 %127, i32 10;
    i32* %129 = getelementptr &(i32* %74)[i64 11];
    store i32* %129 with i32 %128;
    i32* %130 = getelementptr &(i32* %70)[i64 12];
    i32 %131 = load i32* %130;
    i32 %132 = mul i32 %131, i32 %131;
    i32 %133 = srem i32 %132, i32 10;
    i32* %134 = getelementptr &(i32* %74)[i64 12];
    store i32* %134 with i32 %133;
    i32* %135 = getelementptr &(i32* %70)[i64 13];
    i32 %136 = load i32* %135;
    i32 %137 = mul i32 %136, i32 %136;
    i32 %138 = srem i32 %137, i32 10;
    i32* %139 = getelementptr &(i32* %74)[i64 13];
    store i32* %139 with i32 %138;
    i32* %140 = getelementptr &(i32* %70)[i64 14];
    i32 %141 = load i32* %140;
    i32 %142 = mul i32 %141, i32 %141;
    i32 %143 = srem i32 %142, i32 10;
    i32* %144 = getelementptr &(i32* %74)[i64 14];
    store i32* %144 with i32 %143;
    i32* %145 = getelementptr &(i32* %70)[i64 15];
    i32 %146 = load i32* %145;
    i32 %147 = mul i32 %146, i32 %146;
    i32 %148 = srem i32 %147, i32 10;
    i32* %149 = getelementptr &(i32* %74)[i64 15];
    store i32* %149 with i32 %148;
    i32 %150 = add i32 %69, i32 16;
    i1 %151 = icmp slt i32 %150, i32 10000;
    cbr i1 %151(prob = 1), ^while.body1, ^while.body2;
  ^while.body2:
    i32 %152 = phi [^while.body1, i32 0] [^while.body2, i32 %185];
    i32* %153 = getelementptr &([10000 * i32]* %1)[i64 0][i32 %152];
    i32 %154 = load i32* %153;
    i32 %155 = mul i32 %154, i32 %154;
    i32 %156 = srem i32 %155, i32 100;
    i32* %157 = getelementptr &([10000 * i32]* %0)[i64 0][i32 %152];
    i32 %158 = load i32* %157;
    i32 %159 = add i32 %156, i32 %158;
    i32* %160 = getelementptr &([10000 * i32]* %2)[i64 0][i32 %152];
    store i32* %160 with i32 %159;
    i32* %161 = getelementptr &(i32* %153)[i64 1];
    i32 %162 = load i32* %161;
    i32 %163 = mul i32 %162, i32 %162;
    i32 %164 = srem i32 %163, i32 100;
    i32* %165 = getelementptr &(i32* %157)[i64 1];
    i32 %166 = load i32* %165;
    i32 %167 = add i32 %164, i32 %166;
    i32* %168 = getelementptr &(i32* %160)[i64 1];
    store i32* %168 with i32 %167;
    i32* %169 = getelementptr &(i32* %153)[i64 2];
    i32 %170 = load i32* %169;
    i32 %171 = mul i32 %170, i32 %170;
    i32 %172 = srem i32 %171, i32 100;
    i32* %173 = getelementptr &(i32* %157)[i64 2];
    i32 %174 = load i32* %173;
    i32 %175 = add i32 %172, i32 %174;
    i32* %176 = getelementptr &(i32* %160)[i64 2];
    store i32* %176 with i32 %175;
    i32* %177 = getelementptr &(i32* %153)[i64 3];
    i32 %178 = load i32* %177;
    i32 %179 = mul i32 %178, i32 %178;
    i32 %180 = srem i32 %179, i32 100;
    i32* %181 = getelementptr &(i32* %157)[i64 3];
    i32 %182 = load i32* %181;
    i32 %183 = add i32 %180, i32 %182;
    i32* %184 = getelementptr &(i32* %160)[i64 3];
    store i32* %184 with i32 %183;
    i32 %185 = add i32 %152, i32 4;
    i1 %186 = icmp slt i32 %185, i32 10000;
    cbr i1 %186(prob = 1), ^while.body2, ^while.header;
  ^while.header:
    i32 %187 = phi [^while.body2, i32 0] [^if.then, i32 %196] [^if.else2, i32 %272] [^while.body5, i32 %308] [^b, i32 %274];
    i32 %188 = phi [^while.body2, i32 0] [^if.then, i32 %197] [^if.else2, i32 %273] [^while.body5, i32 %309] [^b, i32 %310];
    i1 %189 = icmp slt i32 %188, i32 10000;
    cbr i1 %189(prob = 0.97), ^while.body3, ^entry1;
  ^while.body3:
    i32* %190 = getelementptr &([10000 * i32]* %0)[i64 0][i32 %188];
    i32* %191 = getelementptr &([10000 * i32]* %1)[i64 0][i32 %188];
    i32* %192 = getelementptr &([10000 * i32]* %2)[i64 0][i32 %188];
    i1 %193 = icmp slt i32 %188, i32 10;
    cbr i1 %193(prob = 0.5), ^if.then, ^if.else;
  ^entry1:
    ret i32 %187;
  ^if.then:
    i32 %194 = load i32* %192;
    i32 %195 = add i32 %187, i32 %194;
    i32 %196 = srem i32 %195, i32 1333;
    call (i32) -> void @putint(i32 %196);
    i32 %197 = add i32 %188, i32 1;
    ubr ^while.header;
  ^if.else:
    i1 %198 = icmp slt i32 %188, i32 20;
    cbr i1 %198(prob = 0.5), ^indirect, ^if.else1;
  ^indirect:
    i32 %199 = load i32* %192;
    ubr ^while.body4;
  ^if.else1:
    i1 %200 = icmp slt i32 %188, i32 30;
    cbr i1 %200(prob = 0.5), ^while.header1, ^if.else2;
  ^while.body4:
    i32 %201 = phi [^indirect, i32 5000] [^while.body4, i32 %267];
    i32 %202 = phi [^indirect, i32 %187] [^while.body4, i32 %266];
    i32* %203 = getelementptr &([10000 * i32]* %0)[i64 0][i32 %201];
    i32 %204 = load i32* %203;
    i32 %205 = add i32 %199, i32 %202;
    i32 %206 = sub i32 %205, i32 %204;
    i32 %207 = add i32 %199, i32 %206;
    i32* %208 = getelementptr &(i32* %203)[i64 1];
    i32 %209 = load i32* %208;
    i32 %210 = sub i32 %207, i32 %209;
    i32 %211 = add i32 %199, i32 %210;
    i32* %212 = getelementptr &(i32* %203)[i64 2];
    i32 %213 = load i32* %212;
    i32 %214 = sub i32 %211, i32 %213;
    i32 %215 = add i32 %199, i32 %214;
    i32* %216 = getelementptr &(i32* %203)[i64 3];
    i32 %217 = load i32* %216;
    i32 %218 = sub i32 %215, i32 %217;
    i32 %219 = add i32 %199, i32 %218;
    i32* %220 = getelementptr &(i32* %203)[i64 4];
    i32 %221 = load i32* %220;
    i32 %222 = sub i32 %219, i32 %221;
    i32 %223 = add i32 %199, i32 %222;
    i32* %224 = getelementptr &(i32* %203)[i64 5];
    i32 %225 = load i32* %224;
    i32 %226 = sub i32 %223, i32 %225;
    i32 %227 = add i32 %199, i32 %226;
    i32* %228 = getelementptr &(i32* %203)[i64 6];
    i32 %229 = load i32* %228;
    i32 %230 = sub i32 %227, i32 %229;
    i32 %231 = add i32 %199, i32 %230;
    i32* %232 = getelementptr &(i32* %203)[i64 7];
    i32 %233 = load i32* %232;
    i32 %234 = sub i32 %231, i32 %233;
    i32 %235 = add i32 %199, i32 %234;
    i32* %236 = getelementptr &(i32* %203)[i64 8];
    i32 %237 = load i32* %236;
    i32 %238 = sub i32 %235, i32 %237;
    i32 %239 = add i32 %199, i32 %238;
    i32* %240 = getelementptr &(i32* %203)[i64 9];
    i32 %241 = load i32* %240;
    i32 %242 = sub i32 %239, i32 %241;
    i32 %243 = add i32 %199, i32 %242;
    i32* %244 = getelementptr &(i32* %203)[i64 10];
    i32 %245 = load i32* %244;
    i32 %246 = sub i32 %243, i32 %245;
    i32 %247 = add i32 %199, i32 %246;
    i32* %248 = getelementptr &(i32* %203)[i64 11];
    i32 %249 = load i32* %248;
    i32 %250 = sub i32 %247, i32 %249;
    i32 %251 = add i32 %199, i32 %250;
    i32* %252 = getelementptr &(i32* %203)[i64 12];
    i32 %253 = load i32* %252;
    i32 %254 = sub i32 %251, i32 %253;
    i32 %255 = add i32 %199, i32 %254;
    i32* %256 = getelementptr &(i32* %203)[i64 13];
    i32 %257 = load i32* %256;
    i32 %258 = sub i32 %255, i32 %257;
    i32 %259 = add i32 %199, i32 %258;
    i32* %260 = getelementptr &(i32* %203)[i64 14];
    i32 %261 = load i32* %260;
    i32 %262 = sub i32 %259, i32 %261;
    i32 %263 = add i32 %199, i32 %262;
    i32* %264 = getelementptr &(i32* %203)[i64 15];
    i32 %265 = load i32* %264;
    i32 %266 = sub i32 %263, i32 %265;
    i32 %267 = add i32 %201, i32 16;
    i1 %268 = icmp slt i32 %267, i32 9992;
    cbr i1 %268(prob = 1), ^while.body4, ^while.body5;
  ^if.else2:
    i32 %269 = load i32* %192;
    i32 %270 = mul i32 %269, i32 9;
    i32 %271 = add i32 %187, i32 %270;
    i32 %272 = srem i32 %271, i32 99988;
    i32 %273 = add i32 %188, i32 1;
    ubr ^while.header;
  ^while.header1:
    i32 %274 = phi [^if.else1, i32 %187] [^if.then1, i32 %316] [^if.else3, i32 %323];
    i32 %275 = phi [^if.else1, i32 5000] [^if.then1, i32 %317] [^if.else3, i32 %324];
    i1 %276 = icmp slt i32 %275, i32 10000;
    cbr i1 %276(prob = 0.97), ^while.body6, ^b;
  ^while.body5:
    i32* %277 = getelementptr &([10000 * i32]* %0)[i64 0][i32 %267];
    i32 %278 = load i32* %277;
    i32 %279 = add i32 %199, i32 %266;
    i32 %280 = sub i32 %279, i32 %278;
    i32 %281 = add i32 %199, i32 %280;
    i32* %282 = getelementptr &(i32* %277)[i64 1];
    i32 %283 = load i32* %282;
    i32 %284 = sub i32 %281, i32 %283;
    i32 %285 = add i32 %199, i32 %284;
    i32* %286 = getelementptr &(i32* %277)[i64 2];
    i32 %287 = load i32* %286;
    i32 %288 = sub i32 %285, i32 %287;
    i32 %289 = add i32 %199, i32 %288;
    i32* %290 = getelementptr &(i32* %277)[i64 3];
    i32 %291 = load i32* %290;
    i32 %292 = sub i32 %289, i32 %291;
    i32 %293 = add i32 %199, i32 %292;
    i32* %294 = getelementptr &(i32* %277)[i64 4];
    i32 %295 = load i32* %294;
    i32 %296 = sub i32 %293, i32 %295;
    i32 %297 = add i32 %199, i32 %296;
    i32* %298 = getelementptr &(i32* %277)[i64 5];
    i32 %299 = load i32* %298;
    i32 %300 = sub i32 %297, i32 %299;
    i32 %301 = add i32 %199, i32 %300;
    i32* %302 = getelementptr &(i32* %277)[i64 6];
    i32 %303 = load i32* %302;
    i32 %304 = sub i32 %301, i32 %303;
    i32 %305 = add i32 %199, i32 %304;
    i32* %306 = getelementptr &(i32* %277)[i64 7];
    i32 %307 = load i32* %306;
    i32 %308 = sub i32 %305, i32 %307;
    call (i32) -> void @putint(i32 %308);
    i32 %309 = add i32 %188, i32 1;
    ubr ^while.header;
  ^b:
    call (i32) -> void @putint(i32 %274);
    i32 %310 = add i32 %188, i32 1;
    ubr ^while.header;
  ^while.body6:
    i1 %311 = icmp sgt i32 %275, i32 2233;
    cbr i1 %311(prob = 0.5), ^if.then1, ^if.else3;
  ^if.then1:
    i32 %312 = load i32* %191;
    i32 %313 = add i32 %274, i32 %312;
    i32* %314 = getelementptr &([10000 * i32]* %0)[i64 0][i32 %275];
    i32 %315 = load i32* %314;
    i32 %316 = sub i32 %313, i32 %315;
    i32 %317 = add i32 %275, i32 1;
    ubr ^while.header1;
  ^if.else3:
    i32* %318 = getelementptr &([10000 * i32]* %2)[i64 0][i32 %275];
    i32 %319 = load i32* %190;
    i32 %320 = load i32* %318;
    i32 %321 = add i32 %274, i32 %319;
    i32 %322 = add i32 %320, i32 %321;
    i32 %323 = srem i32 %322, i32 13333;
    i32 %324 = add i32 %275, i32 2;
    ubr ^while.header1;
}
internal [10000 * i32]* @a1;
internal [10000 * i32]* @a2;
internal [10000 * i32]* @a3;
