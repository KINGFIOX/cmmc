internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [10000 * i32]* %0 = ptrcast [10000 * i32]* @a1 to [10000 * i32]*;
    [10000 * i32]* %1 = ptrcast [10000 * i32]* @a2 to [10000 * i32]*;
    [10000 * i32]* %2 = ptrcast [10000 * i32]* @a3 to [10000 * i32]*;
    ubr ^while.body;
  ^while.body:
    i32 %3 = phi [^entry, i32 8] [^while.body, i32 %53];
    i32 %4 = phi [^entry, i32 7] [^while.body, i32 %51];
    i32 %5 = phi [^entry, i32 6] [^while.body, i32 %50];
    i32 %6 = phi [^entry, i32 5] [^while.body, i32 %49];
    i32 %7 = phi [^entry, i32 4] [^while.body, i32 %48];
    i32 %8 = phi [^entry, i32 3] [^while.body, i32 %47];
    i32 %9 = phi [^entry, i32 2] [^while.body, i32 %46];
    i32 %10 = phi [^entry, i32 0] [^while.body, i32 %43];
    i32 %11 = phi [^entry, i32 1] [^while.body, i32 %52];
    i32 %12 = phi [^entry, i32 0] [^while.body, i32 %44];
    i32* %13 = getelementptr &([10000 * i32]* %0)[i64 0][i32 %12];
    i32 %14 = srem i32 %10, i32 10;
    store i32* %13 with i32 %14;
    i32* %15 = getelementptr &(i32* %13)[i64 1];
    i32 %16 = add i32 %10, i32 %11;
    i32 %17 = srem i32 %16, i32 10;
    store i32* %15 with i32 %17;
    i32 %18 = add i32 %9, i32 2;
    i32 %19 = add i32 %10, i32 %18;
    i32 %20 = srem i32 %19, i32 10;
    i32* %21 = getelementptr &(i32* %13)[i64 2];
    store i32* %21 with i32 %20;
    i32 %22 = add i32 %8, i32 6;
    i32 %23 = add i32 %10, i32 %22;
    i32 %24 = srem i32 %23, i32 10;
    i32* %25 = getelementptr &(i32* %13)[i64 3];
    store i32* %25 with i32 %24;
    i32 %26 = add i32 %7, i32 12;
    i32 %27 = add i32 %10, i32 %26;
    i32 %28 = srem i32 %27, i32 10;
    i32* %29 = getelementptr &(i32* %13)[i64 4];
    store i32* %29 with i32 %28;
    i32 %30 = add i32 %6, i32 20;
    i32 %31 = add i32 %10, i32 %30;
    i32 %32 = srem i32 %31, i32 10;
    i32* %33 = getelementptr &(i32* %13)[i64 5];
    store i32* %33 with i32 %32;
    i32 %34 = add i32 %5, i32 30;
    i32 %35 = add i32 %10, i32 %34;
    i32 %36 = srem i32 %35, i32 10;
    i32* %37 = getelementptr &(i32* %13)[i64 6];
    store i32* %37 with i32 %36;
    i32 %38 = add i32 %4, i32 42;
    i32 %39 = add i32 %10, i32 %38;
    i32 %40 = srem i32 %39, i32 10;
    i32* %41 = getelementptr &(i32* %13)[i64 7];
    store i32* %41 with i32 %40;
    i32 %42 = add i32 %3, i32 56;
    i32 %43 = add i32 %10, i32 %42;
    i32 %44 = add i32 %12, i32 8;
    i1 %45 = icmp slt i32 %44, i32 10000;
    i32 %46 = add i32 %9, i32 32;
    i32 %47 = add i32 %8, i32 48;
    i32 %48 = add i32 %7, i32 64;
    i32 %49 = add i32 %6, i32 80;
    i32 %50 = add i32 %5, i32 96;
    i32 %51 = add i32 %4, i32 112;
    i32 %52 = add i32 %11, i32 16;
    i32 %53 = add i32 %3, i32 128;
    cbr i1 %45(prob = 0.9992), ^while.body, ^while.body1;
  ^while.body1:
    i32 %54 = phi [^while.body, i32 0] [^while.body1, i32 %95];
    i32* %55 = getelementptr &([10000 * i32]* %0)[i64 0][i32 %54];
    i32 %56 = load i32* %55;
    i32 %57 = mul i32 %56, i32 %56;
    i32 %58 = srem i32 %57, i32 10;
    i32* %59 = getelementptr &([10000 * i32]* %1)[i64 0][i32 %54];
    store i32* %59 with i32 %58;
    i32* %60 = getelementptr &(i32* %55)[i64 1];
    i32 %61 = load i32* %60;
    i32 %62 = mul i32 %61, i32 %61;
    i32 %63 = srem i32 %62, i32 10;
    i32* %64 = getelementptr &(i32* %59)[i64 1];
    store i32* %64 with i32 %63;
    i32* %65 = getelementptr &(i32* %55)[i64 2];
    i32 %66 = load i32* %65;
    i32 %67 = mul i32 %66, i32 %66;
    i32 %68 = srem i32 %67, i32 10;
    i32* %69 = getelementptr &(i32* %59)[i64 2];
    store i32* %69 with i32 %68;
    i32* %70 = getelementptr &(i32* %55)[i64 3];
    i32 %71 = load i32* %70;
    i32 %72 = mul i32 %71, i32 %71;
    i32 %73 = srem i32 %72, i32 10;
    i32* %74 = getelementptr &(i32* %59)[i64 3];
    store i32* %74 with i32 %73;
    i32* %75 = getelementptr &(i32* %55)[i64 4];
    i32 %76 = load i32* %75;
    i32 %77 = mul i32 %76, i32 %76;
    i32 %78 = srem i32 %77, i32 10;
    i32* %79 = getelementptr &(i32* %59)[i64 4];
    store i32* %79 with i32 %78;
    i32* %80 = getelementptr &(i32* %55)[i64 5];
    i32 %81 = load i32* %80;
    i32 %82 = mul i32 %81, i32 %81;
    i32 %83 = srem i32 %82, i32 10;
    i32* %84 = getelementptr &(i32* %59)[i64 5];
    store i32* %84 with i32 %83;
    i32* %85 = getelementptr &(i32* %55)[i64 6];
    i32 %86 = load i32* %85;
    i32 %87 = mul i32 %86, i32 %86;
    i32 %88 = srem i32 %87, i32 10;
    i32* %89 = getelementptr &(i32* %59)[i64 6];
    store i32* %89 with i32 %88;
    i32* %90 = getelementptr &(i32* %55)[i64 7];
    i32 %91 = load i32* %90;
    i32 %92 = mul i32 %91, i32 %91;
    i32 %93 = srem i32 %92, i32 10;
    i32* %94 = getelementptr &(i32* %59)[i64 7];
    store i32* %94 with i32 %93;
    i32 %95 = add i32 %54, i32 8;
    i1 %96 = icmp slt i32 %95, i32 10000;
    cbr i1 %96(prob = 0.9992), ^while.body1, ^while.body2;
  ^while.body2:
    i32 %97 = phi [^while.body1, i32 0] [^while.body2, i32 %162];
    i32* %98 = getelementptr &([10000 * i32]* %1)[i64 0][i32 %97];
    i32 %99 = load i32* %98;
    i32 %100 = mul i32 %99, i32 %99;
    i32 %101 = srem i32 %100, i32 100;
    i32* %102 = getelementptr &([10000 * i32]* %0)[i64 0][i32 %97];
    i32 %103 = load i32* %102;
    i32 %104 = add i32 %101, i32 %103;
    i32* %105 = getelementptr &([10000 * i32]* %2)[i64 0][i32 %97];
    store i32* %105 with i32 %104;
    i32* %106 = getelementptr &(i32* %98)[i64 1];
    i32 %107 = load i32* %106;
    i32 %108 = mul i32 %107, i32 %107;
    i32 %109 = srem i32 %108, i32 100;
    i32* %110 = getelementptr &(i32* %102)[i64 1];
    i32 %111 = load i32* %110;
    i32 %112 = add i32 %109, i32 %111;
    i32* %113 = getelementptr &(i32* %105)[i64 1];
    store i32* %113 with i32 %112;
    i32* %114 = getelementptr &(i32* %98)[i64 2];
    i32 %115 = load i32* %114;
    i32 %116 = mul i32 %115, i32 %115;
    i32 %117 = srem i32 %116, i32 100;
    i32* %118 = getelementptr &(i32* %102)[i64 2];
    i32 %119 = load i32* %118;
    i32 %120 = add i32 %117, i32 %119;
    i32* %121 = getelementptr &(i32* %105)[i64 2];
    store i32* %121 with i32 %120;
    i32* %122 = getelementptr &(i32* %98)[i64 3];
    i32 %123 = load i32* %122;
    i32 %124 = mul i32 %123, i32 %123;
    i32 %125 = srem i32 %124, i32 100;
    i32* %126 = getelementptr &(i32* %102)[i64 3];
    i32 %127 = load i32* %126;
    i32 %128 = add i32 %125, i32 %127;
    i32* %129 = getelementptr &(i32* %105)[i64 3];
    store i32* %129 with i32 %128;
    i32* %130 = getelementptr &(i32* %98)[i64 4];
    i32 %131 = load i32* %130;
    i32 %132 = mul i32 %131, i32 %131;
    i32 %133 = srem i32 %132, i32 100;
    i32* %134 = getelementptr &(i32* %102)[i64 4];
    i32 %135 = load i32* %134;
    i32 %136 = add i32 %133, i32 %135;
    i32* %137 = getelementptr &(i32* %105)[i64 4];
    store i32* %137 with i32 %136;
    i32* %138 = getelementptr &(i32* %98)[i64 5];
    i32 %139 = load i32* %138;
    i32 %140 = mul i32 %139, i32 %139;
    i32 %141 = srem i32 %140, i32 100;
    i32* %142 = getelementptr &(i32* %102)[i64 5];
    i32 %143 = load i32* %142;
    i32 %144 = add i32 %141, i32 %143;
    i32* %145 = getelementptr &(i32* %105)[i64 5];
    store i32* %145 with i32 %144;
    i32* %146 = getelementptr &(i32* %98)[i64 6];
    i32 %147 = load i32* %146;
    i32 %148 = mul i32 %147, i32 %147;
    i32 %149 = srem i32 %148, i32 100;
    i32* %150 = getelementptr &(i32* %102)[i64 6];
    i32 %151 = load i32* %150;
    i32 %152 = add i32 %149, i32 %151;
    i32* %153 = getelementptr &(i32* %105)[i64 6];
    store i32* %153 with i32 %152;
    i32* %154 = getelementptr &(i32* %98)[i64 7];
    i32 %155 = load i32* %154;
    i32 %156 = mul i32 %155, i32 %155;
    i32 %157 = srem i32 %156, i32 100;
    i32* %158 = getelementptr &(i32* %102)[i64 7];
    i32 %159 = load i32* %158;
    i32 %160 = add i32 %157, i32 %159;
    i32* %161 = getelementptr &(i32* %105)[i64 7];
    store i32* %161 with i32 %160;
    i32 %162 = add i32 %97, i32 8;
    i1 %163 = icmp slt i32 %162, i32 10000;
    cbr i1 %163(prob = 0.9992), ^while.body2, ^while.header;
  ^while.header:
    i32 %164 = phi [^while.body2, i32 0] [^if.then, i32 %174] [^if.else2, i32 %183] [^b, i32 %217] [^b1, i32 %220];
    i32 %165 = phi [^while.body2, i32 0] [^if.then, i32 %170] [^if.else2, i32 %170] [^b, i32 %170] [^b1, i32 %170];
    i1 %166 = icmp slt i32 %165, i32 10000;
    cbr i1 %166(prob = 0.984615), ^while.body3, ^entry1;
  ^while.body3:
    i32* %167 = getelementptr &([10000 * i32]* %0)[i64 0][i32 %165];
    i32* %168 = getelementptr &([10000 * i32]* %1)[i64 0][i32 %165];
    i1 %169 = icmp slt i32 %165, i32 10;
    i32 %170 = add i32 %165, i32 1;
    cbr i1 %169(prob = 0.5), ^if.then, ^if.else;
  ^entry1:
    ret i32 %164;
  ^if.then:
    i32* %171 = getelementptr &([10000 * i32]* %2)[i64 0][i32 %165];
    i32 %172 = load i32* %171;
    i32 %173 = add i32 %164, i32 %172;
    i32 %174 = srem i32 %173, i32 1333;
    call (i32) -> void @putint(i32 %174);
    ubr ^while.header;
  ^if.else:
    i1 %175 = icmp slt i32 %165, i32 20;
    cbr i1 %175(prob = 0.5), ^prebody, ^if.else1;
  ^prebody:
    i32* %176 = getelementptr &([10000 * i32]* %2)[i64 0][i32 %165];
    i32 %177 = load i32* %176;
    ubr ^while.body4;
  ^if.else1:
    i1 %178 = icmp slt i32 %165, i32 30;
    cbr i1 %178(prob = 0.5), ^while.header1, ^if.else2;
  ^if.else2:
    i32* %179 = getelementptr &([10000 * i32]* %2)[i64 0][i32 %165];
    i32 %180 = load i32* %179;
    i32 %181 = mul i32 %180, i32 9;
    i32 %182 = add i32 %164, i32 %181;
    i32 %183 = srem i32 %182, i32 99988;
    ubr ^while.header;
  ^while.body4:
    i32 %184 = phi [^prebody, i32 5000] [^while.body4, i32 %218];
    i32 %185 = phi [^prebody, i32 %164] [^while.body4, i32 %217];
    i32* %186 = getelementptr &([10000 * i32]* %0)[i64 0][i32 %184];
    i32 %187 = load i32* %186;
    i32 %188 = add i32 %177, i32 %185;
    i32 %189 = sub i32 %188, i32 %187;
    i32 %190 = add i32 %177, i32 %189;
    i32* %191 = getelementptr &(i32* %186)[i64 1];
    i32 %192 = load i32* %191;
    i32 %193 = sub i32 %190, i32 %192;
    i32 %194 = add i32 %177, i32 %193;
    i32* %195 = getelementptr &(i32* %186)[i64 2];
    i32 %196 = load i32* %195;
    i32 %197 = sub i32 %194, i32 %196;
    i32 %198 = add i32 %177, i32 %197;
    i32* %199 = getelementptr &(i32* %186)[i64 3];
    i32 %200 = load i32* %199;
    i32 %201 = sub i32 %198, i32 %200;
    i32 %202 = add i32 %177, i32 %201;
    i32* %203 = getelementptr &(i32* %186)[i64 4];
    i32 %204 = load i32* %203;
    i32 %205 = sub i32 %202, i32 %204;
    i32 %206 = add i32 %177, i32 %205;
    i32* %207 = getelementptr &(i32* %186)[i64 5];
    i32 %208 = load i32* %207;
    i32 %209 = sub i32 %206, i32 %208;
    i32 %210 = add i32 %177, i32 %209;
    i32* %211 = getelementptr &(i32* %186)[i64 6];
    i32 %212 = load i32* %211;
    i32 %213 = sub i32 %210, i32 %212;
    i32 %214 = add i32 %177, i32 %213;
    i32* %215 = getelementptr &(i32* %186)[i64 7];
    i32 %216 = load i32* %215;
    i32 %217 = sub i32 %214, i32 %216;
    i32 %218 = add i32 %184, i32 8;
    i1 %219 = icmp slt i32 %218, i32 10000;
    cbr i1 %219(prob = 0.9984), ^while.body4, ^b;
  ^while.header1:
    i32 %220 = phi [^if.else1, i32 %164] [^if.then1, i32 %228] [^if.else3, i32 %235];
    i32 %221 = phi [^if.else1, i32 5000] [^if.then1, i32 %229] [^if.else3, i32 %236];
    i1 %222 = icmp slt i32 %221, i32 10000;
    cbr i1 %222(prob = 0.984615), ^while.body5, ^b1;
  ^b:
    call (i32) -> void @putint(i32 %217);
    ubr ^while.header;
  ^b1:
    call (i32) -> void @putint(i32 %220);
    ubr ^while.header;
  ^while.body5:
    i1 %223 = icmp sgt i32 %221, i32 2233;
    cbr i1 %223(prob = 0.5), ^if.then1, ^if.else3;
  ^if.then1:
    i32 %224 = load i32* %168;
    i32 %225 = add i32 %220, i32 %224;
    i32* %226 = getelementptr &([10000 * i32]* %0)[i64 0][i32 %221];
    i32 %227 = load i32* %226;
    i32 %228 = sub i32 %225, i32 %227;
    i32 %229 = add i32 %221, i32 1;
    ubr ^while.header1;
  ^if.else3:
    i32* %230 = getelementptr &([10000 * i32]* %2)[i64 0][i32 %221];
    i32 %231 = load i32* %167;
    i32 %232 = load i32* %230;
    i32 %233 = add i32 %220, i32 %231;
    i32 %234 = add i32 %232, i32 %233;
    i32 %235 = srem i32 %234, i32 13333;
    i32 %236 = add i32 %221, i32 2;
    ubr ^while.header1;
}
internal [10000 * i32]* @a1, align 8 { Flexible };
internal [10000 * i32]* @a2, align 8 { Flexible };
internal [10000 * i32]* @a3, align 8 { Flexible };
