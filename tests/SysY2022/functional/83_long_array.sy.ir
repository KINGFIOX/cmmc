internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [10000 * i32]* %a1 = alloc [10000 * i32];
    [10000 * i32]* %a2 = alloc [10000 * i32];
    [10000 * i32]* %a3 = alloc [10000 * i32];
    ubr ^while.header;
^while.header:
    i32 %0 = phi [^while.body, i32 %7] [^entry, i32 0];
    i32 %1 = phi [^while.body, i32 %1] [^entry, i32 9];
    i32 %2 = phi [^entry, i32 0] [^while.body, i32 %7];
    i1 %3 = scmp lt i32 %2, i32 10000;
    cbr i1 %3(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i32* %4 = getelementptr &([10000 * i32]* %a1)[i64 0][i32 %0];
    i32 %5 = mul i32 %0, i32 %0;
    i32 %6 = srem i32 %5, i32 10;
    store i32* %4 with i32 %6;
    i32 %7 = add i32 %0, i32 1;
    ubr ^while.header;
^while.header1:
    i32 %8 = phi [^while.body1, i32 %17] [^while.header, i32 0];
    i32 %9 = phi [^while.body1, i32 %9] [^while.header, i32 %1];
    i32 %10 = phi [^while.body1, i32 %17] [^while.header, i32 0];
    i1 %11 = scmp lt i32 %10, i32 10000;
    cbr i1 %11(prob = 0.97), ^while.body1, ^while.header2;
^while.body1:
    i32* %12 = getelementptr &([10000 * i32]* %a2)[i64 0][i32 %8];
    i32* %13 = getelementptr &([10000 * i32]* %a1)[i64 0][i32 %8];
    i32 %14 = load i32* %13;
    i32 %15 = mul i32 %14, i32 %14;
    i32 %16 = srem i32 %15, i32 10;
    store i32* %12 with i32 %16;
    i32 %17 = add i32 %8, i32 1;
    ubr ^while.header1;
^while.header2:
    i32 %18 = phi [^while.header1, i32 0] [^while.body2, i32 %30];
    i32 %19 = phi [^while.header1, i32 %9] [^while.body2, i32 %19];
    i32 %20 = phi [^while.header1, i32 0] [^while.body2, i32 %30];
    i1 %21 = scmp lt i32 %20, i32 10000;
    cbr i1 %21(prob = 0.97), ^while.body2, ^while.header3;
^while.body2:
    i32* %22 = getelementptr &([10000 * i32]* %a3)[i64 0][i32 %18];
    i32* %23 = getelementptr &([10000 * i32]* %a2)[i64 0][i32 %18];
    i32 %24 = load i32* %23;
    i32 %25 = mul i32 %24, i32 %24;
    i32 %26 = srem i32 %25, i32 100;
    i32* %27 = getelementptr &([10000 * i32]* %a1)[i64 0][i32 %18];
    i32 %28 = load i32* %27;
    i32 %29 = add i32 %26, i32 %28;
    store i32* %22 with i32 %29;
    i32 %30 = add i32 %18, i32 1;
    ubr ^while.header2;
^while.header3:
    i32 %31 = phi [^while.header2, i32 0] [^b1, i32 %42];
    i32 %32 = phi [^while.header2, i32 0] [^b1, i32 %45];
    i32 %33 = phi [^while.header2, i32 %19] [^b1, i32 %43];
    i32 %34 = phi [^while.header2, i32 0] [^b1, i32 %45];
    i1 %35 = scmp lt i32 %34, i32 10000;
    cbr i1 %35(prob = 0.97), ^while.body3, ^b;
^while.body3:
    i1 %36 = scmp lt i32 %32, i32 10;
    cbr i1 %36(prob = 0.5), ^if.then, ^if.else;
^b:
    ret i32 %31;
^if.then:
    i32* %37 = getelementptr &([10000 * i32]* %a3)[i64 0][i32 %32];
    i32 %38 = load i32* %37;
    i32 %39 = add i32 %38, i32 %31;
    i32 %40 = srem i32 %39, i32 1333;
    call (i32) -> void @putint(i32 %40);
    ubr ^b1;
^if.else:
    i1 %41 = scmp lt i32 %32, i32 20;
    cbr i1 %41(prob = 0.5), ^while.header4, ^if.else1;
^b1:
    i32 %42 = phi [^b2, i32 %60] [^if.else2, i32 %67] [^if.then, i32 %40];
    i32 %43 = phi [^b2, i32 %62] [^if.else2, i32 %33] [^if.then, i32 %33];
    i32 %44 = phi [^b2, i32 %61] [^if.then, i32 %32] [^if.else2, i32 %32];
    i32 %45 = add i32 %44, i32 1;
    ubr ^while.header3;
^while.header4:
    i32 %46 = phi [^if.else, i32 5000] [^while.body4, i32 %59];
    i32 %47 = phi [^if.else, i32 %31] [^while.body4, i32 %58];
    i32 %48 = phi [^if.else, i32 %32] [^while.body4, i32 %48];
    i32 %49 = phi [^if.else, i32 %33] [^while.body4, i32 %49];
    i32 %50 = phi [^if.else, i32 5000] [^while.body4, i32 %59];
    i1 %51 = scmp lt i32 %50, i32 10000;
    cbr i1 %51(prob = 0.97), ^while.body4, ^b2;
^if.else1:
    i1 %52 = scmp lt i32 %32, i32 30;
    cbr i1 %52(prob = 0.5), ^while.header5, ^if.else2;
^while.body4:
    i32* %53 = getelementptr &([10000 * i32]* %a3)[i64 0][i32 %48];
    i32 %54 = load i32* %53;
    i32 %55 = add i32 %54, i32 %47;
    i32* %56 = getelementptr &([10000 * i32]* %a1)[i64 0][i32 %46];
    i32 %57 = load i32* %56;
    i32 %58 = sub i32 %55, i32 %57;
    i32 %59 = add i32 %46, i32 1;
    ubr ^while.header4;
^b2:
    i32 %60 = phi [^while.header5, i32 %69] [^while.header4, i32 %47];
    i32 %61 = phi [^while.header5, i32 %70] [^while.header4, i32 %48];
    i32 %62 = phi [^while.header5, i32 %71] [^while.header4, i32 %49];
    call (i32) -> void @putint(i32 %60);
    ubr ^b1;
^if.else2:
    i32* %63 = getelementptr &([10000 * i32]* %a3)[i64 0][i32 %32];
    i32 %64 = load i32* %63;
    i32 %65 = mul i32 %64, i32 %33;
    i32 %66 = add i32 %65, i32 %31;
    i32 %67 = srem i32 %66, i32 99988;
    ubr ^b1;
^while.header5:
    i32 %68 = phi [^if.else3, i32 %89] [^if.else1, i32 5000] [^if.then1, i32 %81];
    i32 %69 = phi [^if.else3, i32 %88] [^if.else1, i32 %31] [^if.then1, i32 %80];
    i32 %70 = phi [^if.else3, i32 %70] [^if.else1, i32 %32] [^if.then1, i32 %70];
    i32 %71 = phi [^if.else3, i32 %71] [^if.else1, i32 %33] [^if.then1, i32 %71];
    i32 %72 = phi [^if.else3, i32 %89] [^if.else1, i32 5000] [^if.then1, i32 %81];
    i1 %73 = scmp lt i32 %72, i32 10000;
    cbr i1 %73(prob = 0.97), ^while.body5, ^b2;
^while.body5:
    i1 %74 = scmp gt i32 %68, i32 2233;
    cbr i1 %74(prob = 0.5), ^if.then1, ^if.else3;
^if.then1:
    i32* %75 = getelementptr &([10000 * i32]* %a2)[i64 0][i32 %70];
    i32 %76 = load i32* %75;
    i32 %77 = add i32 %76, i32 %69;
    i32* %78 = getelementptr &([10000 * i32]* %a1)[i64 0][i32 %68];
    i32 %79 = load i32* %78;
    i32 %80 = sub i32 %77, i32 %79;
    i32 %81 = add i32 %68, i32 1;
    ubr ^while.header5;
^if.else3:
    i32* %82 = getelementptr &([10000 * i32]* %a1)[i64 0][i32 %70];
    i32 %83 = load i32* %82;
    i32* %84 = getelementptr &([10000 * i32]* %a3)[i64 0][i32 %68];
    i32 %85 = load i32* %84;
    i32 %86 = add i32 %83, i32 %85;
    i32 %87 = add i32 %86, i32 %69;
    i32 %88 = srem i32 %87, i32 13333;
    i32 %89 = add i32 %68, i32 2;
    ubr ^while.header5;
}
