internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [10000 * i32]* %a1 = alloc [10000 * i32];
    [10000 * i32]* %a2 = alloc [10000 * i32];
    [10000 * i32]* %a3 = alloc [10000 * i32];
    ubr ^while.header;
^while.header:
    i32 %0 = phi [^while.body, i32 %6] [^entry, i32 0];
    i32 %1 = phi [^while.body, i32 %1] [^entry, i32 9];
    i1 %2 = scmp lt i32 %0, i32 10000;
    cbr i1 %2(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i32* %3 = getelementptr &([10000 * i32]* %a1)[i64 0][i32 %0];
    i32 %4 = mul i32 %0, i32 %0;
    i32 %5 = srem i32 %4, i32 10;
    store i32* %3 with i32 %5;
    i32 %6 = add i32 %0, i32 1;
    ubr ^while.header;
^while.header1:
    i32 %7 = phi [^while.body1, i32 %15] [^while.header, i32 0];
    i32 %8 = phi [^while.body1, i32 %8] [^while.header, i32 %1];
    i1 %9 = scmp lt i32 %7, i32 10000;
    cbr i1 %9(prob = 0.97), ^while.body1, ^while.header2;
^while.body1:
    i32* %10 = getelementptr &([10000 * i32]* %a2)[i64 0][i32 %7];
    i32* %11 = getelementptr &([10000 * i32]* %a1)[i64 0][i32 %7];
    i32 %12 = load i32* %11;
    i32 %13 = mul i32 %12, i32 %12;
    i32 %14 = srem i32 %13, i32 10;
    store i32* %10 with i32 %14;
    i32 %15 = add i32 %7, i32 1;
    ubr ^while.header1;
^while.header2:
    i32 %16 = phi [^while.header1, i32 0] [^while.body2, i32 %27];
    i32 %17 = phi [^while.header1, i32 %8] [^while.body2, i32 %17];
    i1 %18 = scmp lt i32 %16, i32 10000;
    cbr i1 %18(prob = 0.97), ^while.body2, ^while.header3;
^while.body2:
    i32* %19 = getelementptr &([10000 * i32]* %a3)[i64 0][i32 %16];
    i32* %20 = getelementptr &([10000 * i32]* %a2)[i64 0][i32 %16];
    i32 %21 = load i32* %20;
    i32 %22 = mul i32 %21, i32 %21;
    i32 %23 = srem i32 %22, i32 100;
    i32* %24 = getelementptr &([10000 * i32]* %a1)[i64 0][i32 %16];
    i32 %25 = load i32* %24;
    i32 %26 = add i32 %23, i32 %25;
    store i32* %19 with i32 %26;
    i32 %27 = add i32 %16, i32 1;
    ubr ^while.header2;
^while.header3:
    i32 %28 = phi [^while.header2, i32 0] [^b1, i32 %38];
    i32 %29 = phi [^while.header2, i32 0] [^b1, i32 %41];
    i32 %30 = phi [^while.header2, i32 %17] [^b1, i32 %39];
    i1 %31 = scmp lt i32 %29, i32 10000;
    cbr i1 %31(prob = 0.97), ^while.body3, ^b;
^while.body3:
    i1 %32 = scmp lt i32 %29, i32 10;
    cbr i1 %32(prob = 0.5), ^if.then, ^if.else;
^b:
    ret i32 %28;
^if.then:
    i32* %33 = getelementptr &([10000 * i32]* %a3)[i64 0][i32 %29];
    i32 %34 = load i32* %33;
    i32 %35 = add i32 %34, i32 %28;
    i32 %36 = srem i32 %35, i32 1333;
    call (i32) -> void @putint(i32 %36);
    ubr ^b1;
^if.else:
    i1 %37 = scmp lt i32 %29, i32 20;
    cbr i1 %37(prob = 0.5), ^while.header4, ^if.else1;
^b1:
    i32 %38 = phi [^b2, i32 %55] [^if.else2, i32 %62] [^if.then, i32 %36];
    i32 %39 = phi [^b2, i32 %57] [^if.else2, i32 %30] [^if.then, i32 %30];
    i32 %40 = phi [^b2, i32 %56] [^if.else2, i32 %29] [^if.then, i32 %29];
    i32 %41 = add i32 %40, i32 1;
    ubr ^while.header3;
^while.header4:
    i32 %42 = phi [^if.else, i32 5000] [^while.body4, i32 %54];
    i32 %43 = phi [^if.else, i32 %28] [^while.body4, i32 %53];
    i32 %44 = phi [^if.else, i32 %29] [^while.body4, i32 %44];
    i32 %45 = phi [^if.else, i32 %30] [^while.body4, i32 %45];
    i1 %46 = scmp lt i32 %42, i32 10000;
    cbr i1 %46(prob = 0.97), ^while.body4, ^b2;
^if.else1:
    i1 %47 = scmp lt i32 %29, i32 30;
    cbr i1 %47(prob = 0.5), ^while.header5, ^if.else2;
^while.body4:
    i32* %48 = getelementptr &([10000 * i32]* %a3)[i64 0][i32 %44];
    i32 %49 = load i32* %48;
    i32 %50 = add i32 %49, i32 %43;
    i32* %51 = getelementptr &([10000 * i32]* %a1)[i64 0][i32 %42];
    i32 %52 = load i32* %51;
    i32 %53 = sub i32 %50, i32 %52;
    i32 %54 = add i32 %42, i32 1;
    ubr ^while.header4;
^b2:
    i32 %55 = phi [^while.header5, i32 %64] [^while.header4, i32 %43];
    i32 %56 = phi [^while.header5, i32 %65] [^while.header4, i32 %44];
    i32 %57 = phi [^while.header5, i32 %66] [^while.header4, i32 %45];
    call (i32) -> void @putint(i32 %55);
    ubr ^b1;
^if.else2:
    i32* %58 = getelementptr &([10000 * i32]* %a3)[i64 0][i32 %29];
    i32 %59 = load i32* %58;
    i32 %60 = mul i32 %59, i32 %30;
    i32 %61 = add i32 %60, i32 %28;
    i32 %62 = srem i32 %61, i32 99988;
    ubr ^b1;
^while.header5:
    i32 %63 = phi [^if.else3, i32 %83] [^if.else1, i32 5000] [^if.then1, i32 %75];
    i32 %64 = phi [^if.else3, i32 %82] [^if.else1, i32 %28] [^if.then1, i32 %74];
    i32 %65 = phi [^if.else3, i32 %65] [^if.else1, i32 %29] [^if.then1, i32 %65];
    i32 %66 = phi [^if.else3, i32 %66] [^if.else1, i32 %30] [^if.then1, i32 %66];
    i1 %67 = scmp lt i32 %63, i32 10000;
    cbr i1 %67(prob = 0.97), ^while.body5, ^b2;
^while.body5:
    i1 %68 = scmp gt i32 %63, i32 2233;
    cbr i1 %68(prob = 0.5), ^if.then1, ^if.else3;
^if.then1:
    i32* %69 = getelementptr &([10000 * i32]* %a2)[i64 0][i32 %65];
    i32 %70 = load i32* %69;
    i32 %71 = add i32 %70, i32 %64;
    i32* %72 = getelementptr &([10000 * i32]* %a1)[i64 0][i32 %63];
    i32 %73 = load i32* %72;
    i32 %74 = sub i32 %71, i32 %73;
    i32 %75 = add i32 %63, i32 1;
    ubr ^while.header5;
^if.else3:
    i32* %76 = getelementptr &([10000 * i32]* %a1)[i64 0][i32 %65];
    i32 %77 = load i32* %76;
    i32* %78 = getelementptr &([10000 * i32]* %a3)[i64 0][i32 %63];
    i32 %79 = load i32* %78;
    i32 %80 = add i32 %77, i32 %79;
    i32 %81 = add i32 %80, i32 %64;
    i32 %82 = srem i32 %81, i32 13333;
    i32 %83 = add i32 %63, i32 2;
    ubr ^while.header5;
}
