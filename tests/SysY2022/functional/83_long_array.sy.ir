internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [10000 * i32]* %a1 = alloc [10000 * i32];
    [10000 * i32]* %a2 = alloc [10000 * i32];
    [10000 * i32]* %a3 = alloc [10000 * i32];
    ubr ^while.body;
^while.body:
    i32 %0 = phi [^entry, i32 0] [^while.body, i32 %64];
    i32* %1 = getelementptr &([10000 * i32]* %a1)[i64 0][i32 %0];
    i32 %2 = mul i32 %0, i32 %0;
    i32 %3 = srem i32 %2, i32 10;
    store i32* %1 with i32 %3;
    i32 %4 = add i32 %0, i32 1;
    i32* %5 = getelementptr &(i32* %1)[i64 1];
    i32 %6 = mul i32 %4, i32 %4;
    i32 %7 = srem i32 %6, i32 10;
    store i32* %5 with i32 %7;
    i32 %8 = add i32 %0, i32 2;
    i32* %9 = getelementptr &(i32* %1)[i64 2];
    i32 %10 = mul i32 %8, i32 %8;
    i32 %11 = srem i32 %10, i32 10;
    store i32* %9 with i32 %11;
    i32 %12 = add i32 %0, i32 3;
    i32* %13 = getelementptr &(i32* %1)[i64 3];
    i32 %14 = mul i32 %12, i32 %12;
    i32 %15 = srem i32 %14, i32 10;
    store i32* %13 with i32 %15;
    i32 %16 = add i32 %0, i32 4;
    i32* %17 = getelementptr &(i32* %1)[i64 4];
    i32 %18 = mul i32 %16, i32 %16;
    i32 %19 = srem i32 %18, i32 10;
    store i32* %17 with i32 %19;
    i32 %20 = add i32 %0, i32 5;
    i32* %21 = getelementptr &(i32* %1)[i64 5];
    i32 %22 = mul i32 %20, i32 %20;
    i32 %23 = srem i32 %22, i32 10;
    store i32* %21 with i32 %23;
    i32 %24 = add i32 %0, i32 6;
    i32* %25 = getelementptr &(i32* %1)[i64 6];
    i32 %26 = mul i32 %24, i32 %24;
    i32 %27 = srem i32 %26, i32 10;
    store i32* %25 with i32 %27;
    i32 %28 = add i32 %0, i32 7;
    i32* %29 = getelementptr &(i32* %1)[i64 7];
    i32 %30 = mul i32 %28, i32 %28;
    i32 %31 = srem i32 %30, i32 10;
    store i32* %29 with i32 %31;
    i32 %32 = add i32 %0, i32 8;
    i32* %33 = getelementptr &(i32* %1)[i64 8];
    i32 %34 = mul i32 %32, i32 %32;
    i32 %35 = srem i32 %34, i32 10;
    store i32* %33 with i32 %35;
    i32 %36 = add i32 %0, i32 9;
    i32* %37 = getelementptr &(i32* %1)[i64 9];
    i32 %38 = mul i32 %36, i32 %36;
    i32 %39 = srem i32 %38, i32 10;
    store i32* %37 with i32 %39;
    i32 %40 = add i32 %0, i32 10;
    i32* %41 = getelementptr &(i32* %1)[i64 10];
    i32 %42 = mul i32 %40, i32 %40;
    i32 %43 = srem i32 %42, i32 10;
    store i32* %41 with i32 %43;
    i32 %44 = add i32 %0, i32 11;
    i32* %45 = getelementptr &(i32* %1)[i64 11];
    i32 %46 = mul i32 %44, i32 %44;
    i32 %47 = srem i32 %46, i32 10;
    store i32* %45 with i32 %47;
    i32 %48 = add i32 %0, i32 12;
    i32* %49 = getelementptr &(i32* %1)[i64 12];
    i32 %50 = mul i32 %48, i32 %48;
    i32 %51 = srem i32 %50, i32 10;
    store i32* %49 with i32 %51;
    i32 %52 = add i32 %0, i32 13;
    i32* %53 = getelementptr &(i32* %1)[i64 13];
    i32 %54 = mul i32 %52, i32 %52;
    i32 %55 = srem i32 %54, i32 10;
    store i32* %53 with i32 %55;
    i32 %56 = add i32 %0, i32 14;
    i32* %57 = getelementptr &(i32* %1)[i64 14];
    i32 %58 = mul i32 %56, i32 %56;
    i32 %59 = srem i32 %58, i32 10;
    store i32* %57 with i32 %59;
    i32 %60 = add i32 %0, i32 15;
    i32* %61 = getelementptr &(i32* %1)[i64 15];
    i32 %62 = mul i32 %60, i32 %60;
    i32 %63 = srem i32 %62, i32 10;
    store i32* %61 with i32 %63;
    i32 %64 = add i32 %0, i32 16;
    i1 %65 = scmp lt i32 %64, i32 10000;
    cbr i1 %65(prob = 1), ^while.body, ^while.body1;
^while.body1:
    i32 %66 = phi [^while.body, i32 0] [^while.body1, i32 %147];
    i32* %67 = getelementptr &([10000 * i32]* %a2)[i64 0][i32 %66];
    i32* %68 = getelementptr &([10000 * i32]* %a1)[i64 0][i32 %66];
    i32 %69 = load i32* %68;
    i32 %70 = mul i32 %69, i32 %69;
    i32 %71 = srem i32 %70, i32 10;
    store i32* %67 with i32 %71;
    i32* %72 = getelementptr &(i32* %67)[i64 1];
    i32* %73 = getelementptr &(i32* %68)[i64 1];
    i32 %74 = load i32* %73;
    i32 %75 = mul i32 %74, i32 %74;
    i32 %76 = srem i32 %75, i32 10;
    store i32* %72 with i32 %76;
    i32* %77 = getelementptr &(i32* %67)[i64 2];
    i32* %78 = getelementptr &(i32* %68)[i64 2];
    i32 %79 = load i32* %78;
    i32 %80 = mul i32 %79, i32 %79;
    i32 %81 = srem i32 %80, i32 10;
    store i32* %77 with i32 %81;
    i32* %82 = getelementptr &(i32* %67)[i64 3];
    i32* %83 = getelementptr &(i32* %68)[i64 3];
    i32 %84 = load i32* %83;
    i32 %85 = mul i32 %84, i32 %84;
    i32 %86 = srem i32 %85, i32 10;
    store i32* %82 with i32 %86;
    i32* %87 = getelementptr &(i32* %67)[i64 4];
    i32* %88 = getelementptr &(i32* %68)[i64 4];
    i32 %89 = load i32* %88;
    i32 %90 = mul i32 %89, i32 %89;
    i32 %91 = srem i32 %90, i32 10;
    store i32* %87 with i32 %91;
    i32* %92 = getelementptr &(i32* %67)[i64 5];
    i32* %93 = getelementptr &(i32* %68)[i64 5];
    i32 %94 = load i32* %93;
    i32 %95 = mul i32 %94, i32 %94;
    i32 %96 = srem i32 %95, i32 10;
    store i32* %92 with i32 %96;
    i32* %97 = getelementptr &(i32* %67)[i64 6];
    i32* %98 = getelementptr &(i32* %68)[i64 6];
    i32 %99 = load i32* %98;
    i32 %100 = mul i32 %99, i32 %99;
    i32 %101 = srem i32 %100, i32 10;
    store i32* %97 with i32 %101;
    i32* %102 = getelementptr &(i32* %67)[i64 7];
    i32* %103 = getelementptr &(i32* %68)[i64 7];
    i32 %104 = load i32* %103;
    i32 %105 = mul i32 %104, i32 %104;
    i32 %106 = srem i32 %105, i32 10;
    store i32* %102 with i32 %106;
    i32* %107 = getelementptr &(i32* %67)[i64 8];
    i32* %108 = getelementptr &(i32* %68)[i64 8];
    i32 %109 = load i32* %108;
    i32 %110 = mul i32 %109, i32 %109;
    i32 %111 = srem i32 %110, i32 10;
    store i32* %107 with i32 %111;
    i32* %112 = getelementptr &(i32* %67)[i64 9];
    i32* %113 = getelementptr &(i32* %68)[i64 9];
    i32 %114 = load i32* %113;
    i32 %115 = mul i32 %114, i32 %114;
    i32 %116 = srem i32 %115, i32 10;
    store i32* %112 with i32 %116;
    i32* %117 = getelementptr &(i32* %67)[i64 10];
    i32* %118 = getelementptr &(i32* %68)[i64 10];
    i32 %119 = load i32* %118;
    i32 %120 = mul i32 %119, i32 %119;
    i32 %121 = srem i32 %120, i32 10;
    store i32* %117 with i32 %121;
    i32* %122 = getelementptr &(i32* %67)[i64 11];
    i32* %123 = getelementptr &(i32* %68)[i64 11];
    i32 %124 = load i32* %123;
    i32 %125 = mul i32 %124, i32 %124;
    i32 %126 = srem i32 %125, i32 10;
    store i32* %122 with i32 %126;
    i32* %127 = getelementptr &(i32* %67)[i64 12];
    i32* %128 = getelementptr &(i32* %68)[i64 12];
    i32 %129 = load i32* %128;
    i32 %130 = mul i32 %129, i32 %129;
    i32 %131 = srem i32 %130, i32 10;
    store i32* %127 with i32 %131;
    i32* %132 = getelementptr &(i32* %67)[i64 13];
    i32* %133 = getelementptr &(i32* %68)[i64 13];
    i32 %134 = load i32* %133;
    i32 %135 = mul i32 %134, i32 %134;
    i32 %136 = srem i32 %135, i32 10;
    store i32* %132 with i32 %136;
    i32* %137 = getelementptr &(i32* %67)[i64 14];
    i32* %138 = getelementptr &(i32* %68)[i64 14];
    i32 %139 = load i32* %138;
    i32 %140 = mul i32 %139, i32 %139;
    i32 %141 = srem i32 %140, i32 10;
    store i32* %137 with i32 %141;
    i32* %142 = getelementptr &(i32* %67)[i64 15];
    i32* %143 = getelementptr &(i32* %68)[i64 15];
    i32 %144 = load i32* %143;
    i32 %145 = mul i32 %144, i32 %144;
    i32 %146 = srem i32 %145, i32 10;
    store i32* %142 with i32 %146;
    i32 %147 = add i32 %66, i32 16;
    i1 %148 = scmp lt i32 %147, i32 10000;
    cbr i1 %148(prob = 1), ^while.body1, ^while.body2;
^while.body2:
    i32 %149 = phi [^while.body1, i32 0] [^while.body2, i32 %278];
    i32* %150 = getelementptr &([10000 * i32]* %a3)[i64 0][i32 %149];
    i32* %151 = getelementptr &([10000 * i32]* %a2)[i64 0][i32 %149];
    i32 %152 = load i32* %151;
    i32 %153 = mul i32 %152, i32 %152;
    i32 %154 = srem i32 %153, i32 100;
    i32* %155 = getelementptr &([10000 * i32]* %a1)[i64 0][i32 %149];
    i32 %156 = load i32* %155;
    i32 %157 = add i32 %154, i32 %156;
    store i32* %150 with i32 %157;
    i32* %158 = getelementptr &(i32* %150)[i64 1];
    i32* %159 = getelementptr &(i32* %151)[i64 1];
    i32 %160 = load i32* %159;
    i32 %161 = mul i32 %160, i32 %160;
    i32 %162 = srem i32 %161, i32 100;
    i32* %163 = getelementptr &(i32* %155)[i64 1];
    i32 %164 = load i32* %163;
    i32 %165 = add i32 %162, i32 %164;
    store i32* %158 with i32 %165;
    i32* %166 = getelementptr &(i32* %150)[i64 2];
    i32* %167 = getelementptr &(i32* %151)[i64 2];
    i32 %168 = load i32* %167;
    i32 %169 = mul i32 %168, i32 %168;
    i32 %170 = srem i32 %169, i32 100;
    i32* %171 = getelementptr &(i32* %155)[i64 2];
    i32 %172 = load i32* %171;
    i32 %173 = add i32 %170, i32 %172;
    store i32* %166 with i32 %173;
    i32* %174 = getelementptr &(i32* %150)[i64 3];
    i32* %175 = getelementptr &(i32* %151)[i64 3];
    i32 %176 = load i32* %175;
    i32 %177 = mul i32 %176, i32 %176;
    i32 %178 = srem i32 %177, i32 100;
    i32* %179 = getelementptr &(i32* %155)[i64 3];
    i32 %180 = load i32* %179;
    i32 %181 = add i32 %178, i32 %180;
    store i32* %174 with i32 %181;
    i32* %182 = getelementptr &(i32* %150)[i64 4];
    i32* %183 = getelementptr &(i32* %151)[i64 4];
    i32 %184 = load i32* %183;
    i32 %185 = mul i32 %184, i32 %184;
    i32 %186 = srem i32 %185, i32 100;
    i32* %187 = getelementptr &(i32* %155)[i64 4];
    i32 %188 = load i32* %187;
    i32 %189 = add i32 %186, i32 %188;
    store i32* %182 with i32 %189;
    i32* %190 = getelementptr &(i32* %150)[i64 5];
    i32* %191 = getelementptr &(i32* %151)[i64 5];
    i32 %192 = load i32* %191;
    i32 %193 = mul i32 %192, i32 %192;
    i32 %194 = srem i32 %193, i32 100;
    i32* %195 = getelementptr &(i32* %155)[i64 5];
    i32 %196 = load i32* %195;
    i32 %197 = add i32 %194, i32 %196;
    store i32* %190 with i32 %197;
    i32* %198 = getelementptr &(i32* %150)[i64 6];
    i32* %199 = getelementptr &(i32* %151)[i64 6];
    i32 %200 = load i32* %199;
    i32 %201 = mul i32 %200, i32 %200;
    i32 %202 = srem i32 %201, i32 100;
    i32* %203 = getelementptr &(i32* %155)[i64 6];
    i32 %204 = load i32* %203;
    i32 %205 = add i32 %202, i32 %204;
    store i32* %198 with i32 %205;
    i32* %206 = getelementptr &(i32* %150)[i64 7];
    i32* %207 = getelementptr &(i32* %151)[i64 7];
    i32 %208 = load i32* %207;
    i32 %209 = mul i32 %208, i32 %208;
    i32 %210 = srem i32 %209, i32 100;
    i32* %211 = getelementptr &(i32* %155)[i64 7];
    i32 %212 = load i32* %211;
    i32 %213 = add i32 %210, i32 %212;
    store i32* %206 with i32 %213;
    i32* %214 = getelementptr &(i32* %150)[i64 8];
    i32* %215 = getelementptr &(i32* %151)[i64 8];
    i32 %216 = load i32* %215;
    i32 %217 = mul i32 %216, i32 %216;
    i32 %218 = srem i32 %217, i32 100;
    i32* %219 = getelementptr &(i32* %155)[i64 8];
    i32 %220 = load i32* %219;
    i32 %221 = add i32 %218, i32 %220;
    store i32* %214 with i32 %221;
    i32* %222 = getelementptr &(i32* %150)[i64 9];
    i32* %223 = getelementptr &(i32* %151)[i64 9];
    i32 %224 = load i32* %223;
    i32 %225 = mul i32 %224, i32 %224;
    i32 %226 = srem i32 %225, i32 100;
    i32* %227 = getelementptr &(i32* %155)[i64 9];
    i32 %228 = load i32* %227;
    i32 %229 = add i32 %226, i32 %228;
    store i32* %222 with i32 %229;
    i32* %230 = getelementptr &(i32* %150)[i64 10];
    i32* %231 = getelementptr &(i32* %151)[i64 10];
    i32 %232 = load i32* %231;
    i32 %233 = mul i32 %232, i32 %232;
    i32 %234 = srem i32 %233, i32 100;
    i32* %235 = getelementptr &(i32* %155)[i64 10];
    i32 %236 = load i32* %235;
    i32 %237 = add i32 %234, i32 %236;
    store i32* %230 with i32 %237;
    i32* %238 = getelementptr &(i32* %150)[i64 11];
    i32* %239 = getelementptr &(i32* %151)[i64 11];
    i32 %240 = load i32* %239;
    i32 %241 = mul i32 %240, i32 %240;
    i32 %242 = srem i32 %241, i32 100;
    i32* %243 = getelementptr &(i32* %155)[i64 11];
    i32 %244 = load i32* %243;
    i32 %245 = add i32 %242, i32 %244;
    store i32* %238 with i32 %245;
    i32* %246 = getelementptr &(i32* %150)[i64 12];
    i32* %247 = getelementptr &(i32* %151)[i64 12];
    i32 %248 = load i32* %247;
    i32 %249 = mul i32 %248, i32 %248;
    i32 %250 = srem i32 %249, i32 100;
    i32* %251 = getelementptr &(i32* %155)[i64 12];
    i32 %252 = load i32* %251;
    i32 %253 = add i32 %250, i32 %252;
    store i32* %246 with i32 %253;
    i32* %254 = getelementptr &(i32* %150)[i64 13];
    i32* %255 = getelementptr &(i32* %151)[i64 13];
    i32 %256 = load i32* %255;
    i32 %257 = mul i32 %256, i32 %256;
    i32 %258 = srem i32 %257, i32 100;
    i32* %259 = getelementptr &(i32* %155)[i64 13];
    i32 %260 = load i32* %259;
    i32 %261 = add i32 %258, i32 %260;
    store i32* %254 with i32 %261;
    i32* %262 = getelementptr &(i32* %150)[i64 14];
    i32* %263 = getelementptr &(i32* %151)[i64 14];
    i32 %264 = load i32* %263;
    i32 %265 = mul i32 %264, i32 %264;
    i32 %266 = srem i32 %265, i32 100;
    i32* %267 = getelementptr &(i32* %155)[i64 14];
    i32 %268 = load i32* %267;
    i32 %269 = add i32 %266, i32 %268;
    store i32* %262 with i32 %269;
    i32* %270 = getelementptr &(i32* %150)[i64 15];
    i32* %271 = getelementptr &(i32* %151)[i64 15];
    i32 %272 = load i32* %271;
    i32 %273 = mul i32 %272, i32 %272;
    i32 %274 = srem i32 %273, i32 100;
    i32* %275 = getelementptr &(i32* %155)[i64 15];
    i32 %276 = load i32* %275;
    i32 %277 = add i32 %274, i32 %276;
    store i32* %270 with i32 %277;
    i32 %278 = add i32 %149, i32 16;
    i1 %279 = scmp lt i32 %278, i32 10000;
    cbr i1 %279(prob = 1), ^while.body2, ^while.header;
^while.header:
    i32 %280 = phi [^while.body2, i32 0] [^b, i32 %291];
    i32 %281 = phi [^while.body2, i32 0] [^b, i32 %292];
    i1 %282 = scmp lt i32 %281, i32 10000;
    cbr i1 %282(prob = 0.97), ^while.body3, ^entry1;
^while.body3:
    i32* %283 = getelementptr &([10000 * i32]* %a1)[i64 0][i32 %281];
    i32* %284 = getelementptr &([10000 * i32]* %a2)[i64 0][i32 %281];
    i32* %285 = getelementptr &([10000 * i32]* %a3)[i64 0][i32 %281];
    i1 %286 = scmp lt i32 %281, i32 10;
    cbr i1 %286(prob = 0.5), ^if.then, ^if.else;
^entry1:
    ret i32 %280;
^if.then:
    i32 %287 = load i32* %285;
    i32 %288 = add i32 %280, i32 %287;
    i32 %289 = srem i32 %288, i32 1333;
    call (i32) -> void @putint(i32 %289);
    ubr ^b;
^if.else:
    i1 %290 = scmp lt i32 %281, i32 20;
    cbr i1 %290(prob = 0.5), ^while.header1, ^if.else1;
^b:
    i32 %291 = phi [^if.then, i32 %289] [^b1, i32 %303] [^if.else2, i32 %307];
    i32 %292 = add i32 %281, i32 1;
    ubr ^while.header;
^while.header1:
    i32 %293 = phi [^if.else, i32 5000] [^while.body4, i32 %302];
    i32 %294 = phi [^if.else, i32 %280] [^while.body4, i32 %301];
    i1 %295 = scmp lt i32 %293, i32 10000;
    cbr i1 %295(prob = 0.97), ^while.body4, ^b1;
^if.else1:
    i1 %296 = scmp lt i32 %281, i32 30;
    cbr i1 %296(prob = 0.5), ^while.header2, ^if.else2;
^while.body4:
    i32 %297 = load i32* %285;
    i32 %298 = add i32 %294, i32 %297;
    i32* %299 = getelementptr &([10000 * i32]* %a1)[i64 0][i32 %293];
    i32 %300 = load i32* %299;
    i32 %301 = sub i32 %298, i32 %300;
    i32 %302 = add i32 %293, i32 1;
    ubr ^while.header1;
^b1:
    i32 %303 = phi [^while.header1, i32 %294] [^while.header2, i32 %309];
    call (i32) -> void @putint(i32 %303);
    ubr ^b;
^if.else2:
    i32 %304 = load i32* %285;
    i32 %305 = mul i32 %304, i32 9;
    i32 %306 = add i32 %280, i32 %305;
    i32 %307 = srem i32 %306, i32 99988;
    ubr ^b;
^while.header2:
    i32 %308 = phi [^if.else1, i32 5000] [^if.then1, i32 %317] [^if.else3, i32 %324];
    i32 %309 = phi [^if.else1, i32 %280] [^if.then1, i32 %316] [^if.else3, i32 %323];
    i1 %310 = scmp lt i32 %308, i32 10000;
    cbr i1 %310(prob = 0.97), ^while.body5, ^b1;
^while.body5:
    i1 %311 = scmp gt i32 %308, i32 2233;
    cbr i1 %311(prob = 0.5), ^if.then1, ^if.else3;
^if.then1:
    i32 %312 = load i32* %284;
    i32 %313 = add i32 %309, i32 %312;
    i32* %314 = getelementptr &([10000 * i32]* %a1)[i64 0][i32 %308];
    i32 %315 = load i32* %314;
    i32 %316 = sub i32 %313, i32 %315;
    i32 %317 = add i32 %308, i32 1;
    ubr ^while.header2;
^if.else3:
    i32 %318 = load i32* %283;
    i32* %319 = getelementptr &([10000 * i32]* %a3)[i64 0][i32 %308];
    i32 %320 = load i32* %319;
    i32 %321 = add i32 %309, i32 %318;
    i32 %322 = add i32 %321, i32 %320;
    i32 %323 = srem i32 %322, i32 13333;
    i32 %324 = add i32 %308, i32 2;
    ubr ^while.header2;
}
