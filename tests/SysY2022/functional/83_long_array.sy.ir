internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [10000 * i32]* %0 = ptrcast [10000 * i32]* @a1 to [10000 * i32]*;
    [10000 * i32]* %1 = ptrcast [10000 * i32]* @a2 to [10000 * i32]*;
    [10000 * i32]* %2 = ptrcast [10000 * i32]* @a3 to [10000 * i32]*;
    ubr ^while.body;
  ^while.body:
    i32 %3 = phi [^entry, i32 4] [^while.body, i32 %29];
    i32 %4 = phi [^entry, i32 3] [^while.body, i32 %27];
    i32 %5 = phi [^entry, i32 2] [^while.body, i32 %26];
    i32 %6 = phi [^entry, i32 0] [^while.body, i32 %23];
    i32 %7 = phi [^entry, i32 1] [^while.body, i32 %28];
    i32 %8 = phi [^entry, i32 0] [^while.body, i32 %24];
    i32* %9 = getelementptr &([10000 * i32]* %0)[i64 0][i32 %8];
    i32 %10 = srem i32 %6, i32 10;
    store i32* %9 with i32 %10;
    i32* %11 = getelementptr &(i32* %9)[i64 1];
    i32 %12 = add i32 %6, i32 %7;
    i32 %13 = srem i32 %12, i32 10;
    store i32* %11 with i32 %13;
    i32 %14 = add i32 %5, i32 2;
    i32 %15 = add i32 %6, i32 %14;
    i32 %16 = srem i32 %15, i32 10;
    i32* %17 = getelementptr &(i32* %9)[i64 2];
    store i32* %17 with i32 %16;
    i32 %18 = add i32 %4, i32 6;
    i32 %19 = add i32 %6, i32 %18;
    i32 %20 = srem i32 %19, i32 10;
    i32* %21 = getelementptr &(i32* %9)[i64 3];
    store i32* %21 with i32 %20;
    i32 %22 = add i32 %3, i32 12;
    i32 %23 = add i32 %6, i32 %22;
    i32 %24 = add i32 %8, i32 4;
    i1 %25 = icmp slt i32 %24, i32 10000;
    i32 %26 = add i32 %5, i32 16;
    i32 %27 = add i32 %4, i32 24;
    i32 %28 = add i32 %7, i32 8;
    i32 %29 = add i32 %3, i32 32;
    cbr i1 %25(prob = 1), ^while.body, ^while.body1;
  ^while.body1:
    i32 %30 = phi [^while.body, i32 0] [^while.body1, i32 %51];
    i32* %31 = getelementptr &([10000 * i32]* %0)[i64 0][i32 %30];
    i32 %32 = load i32* %31;
    i32 %33 = mul i32 %32, i32 %32;
    i32 %34 = srem i32 %33, i32 10;
    i32* %35 = getelementptr &([10000 * i32]* %1)[i64 0][i32 %30];
    store i32* %35 with i32 %34;
    i32* %36 = getelementptr &(i32* %31)[i64 1];
    i32 %37 = load i32* %36;
    i32 %38 = mul i32 %37, i32 %37;
    i32 %39 = srem i32 %38, i32 10;
    i32* %40 = getelementptr &(i32* %35)[i64 1];
    store i32* %40 with i32 %39;
    i32* %41 = getelementptr &(i32* %31)[i64 2];
    i32 %42 = load i32* %41;
    i32 %43 = mul i32 %42, i32 %42;
    i32 %44 = srem i32 %43, i32 10;
    i32* %45 = getelementptr &(i32* %35)[i64 2];
    store i32* %45 with i32 %44;
    i32* %46 = getelementptr &(i32* %31)[i64 3];
    i32 %47 = load i32* %46;
    i32 %48 = mul i32 %47, i32 %47;
    i32 %49 = srem i32 %48, i32 10;
    i32* %50 = getelementptr &(i32* %35)[i64 3];
    store i32* %50 with i32 %49;
    i32 %51 = add i32 %30, i32 4;
    i1 %52 = icmp slt i32 %51, i32 10000;
    cbr i1 %52(prob = 1), ^while.body1, ^while.body2;
  ^while.body2:
    i32 %53 = phi [^while.body1, i32 0] [^while.body2, i32 %86];
    i32* %54 = getelementptr &([10000 * i32]* %1)[i64 0][i32 %53];
    i32 %55 = load i32* %54;
    i32 %56 = mul i32 %55, i32 %55;
    i32 %57 = srem i32 %56, i32 100;
    i32* %58 = getelementptr &([10000 * i32]* %0)[i64 0][i32 %53];
    i32 %59 = load i32* %58;
    i32 %60 = add i32 %57, i32 %59;
    i32* %61 = getelementptr &([10000 * i32]* %2)[i64 0][i32 %53];
    store i32* %61 with i32 %60;
    i32* %62 = getelementptr &(i32* %54)[i64 1];
    i32 %63 = load i32* %62;
    i32 %64 = mul i32 %63, i32 %63;
    i32 %65 = srem i32 %64, i32 100;
    i32* %66 = getelementptr &(i32* %58)[i64 1];
    i32 %67 = load i32* %66;
    i32 %68 = add i32 %65, i32 %67;
    i32* %69 = getelementptr &(i32* %61)[i64 1];
    store i32* %69 with i32 %68;
    i32* %70 = getelementptr &(i32* %54)[i64 2];
    i32 %71 = load i32* %70;
    i32 %72 = mul i32 %71, i32 %71;
    i32 %73 = srem i32 %72, i32 100;
    i32* %74 = getelementptr &(i32* %58)[i64 2];
    i32 %75 = load i32* %74;
    i32 %76 = add i32 %73, i32 %75;
    i32* %77 = getelementptr &(i32* %61)[i64 2];
    store i32* %77 with i32 %76;
    i32* %78 = getelementptr &(i32* %54)[i64 3];
    i32 %79 = load i32* %78;
    i32 %80 = mul i32 %79, i32 %79;
    i32 %81 = srem i32 %80, i32 100;
    i32* %82 = getelementptr &(i32* %58)[i64 3];
    i32 %83 = load i32* %82;
    i32 %84 = add i32 %81, i32 %83;
    i32* %85 = getelementptr &(i32* %61)[i64 3];
    store i32* %85 with i32 %84;
    i32 %86 = add i32 %53, i32 4;
    i1 %87 = icmp slt i32 %86, i32 10000;
    cbr i1 %87(prob = 1), ^while.body2, ^while.header;
  ^while.header:
    i32 %88 = phi [^while.body2, i32 0] [^if.then, i32 %97] [^if.else2, i32 %107] [^while.body5, i32 %211] [^b, i32 %177];
    i32 %89 = phi [^while.body2, i32 0] [^if.then, i32 %98] [^if.else2, i32 %108] [^while.body5, i32 %212] [^b, i32 %213];
    i1 %90 = icmp slt i32 %89, i32 10000;
    cbr i1 %90(prob = 0.97), ^while.body3, ^entry1;
  ^while.body3:
    i32* %91 = getelementptr &([10000 * i32]* %0)[i64 0][i32 %89];
    i32* %92 = getelementptr &([10000 * i32]* %1)[i64 0][i32 %89];
    i1 %93 = icmp slt i32 %89, i32 10;
    cbr i1 %93(prob = 0.5), ^if.then, ^if.else;
  ^entry1:
    ret i32 %88;
  ^if.then:
    i32* %94 = getelementptr &([10000 * i32]* %2)[i64 0][i32 %89];
    i32 %95 = load i32* %94;
    i32 %96 = add i32 %88, i32 %95;
    i32 %97 = srem i32 %96, i32 1333;
    call (i32) -> void @putint(i32 %97);
    i32 %98 = add i32 %89, i32 1;
    ubr ^while.header;
  ^if.else:
    i1 %99 = icmp slt i32 %89, i32 20;
    cbr i1 %99(prob = 0.5), ^prebody, ^if.else1;
  ^prebody:
    i32* %100 = getelementptr &([10000 * i32]* %2)[i64 0][i32 %89];
    i32 %101 = load i32* %100;
    ubr ^while.body4;
  ^if.else1:
    i1 %102 = icmp slt i32 %89, i32 30;
    cbr i1 %102(prob = 0.5), ^while.header1, ^if.else2;
  ^if.else2:
    i32* %103 = getelementptr &([10000 * i32]* %2)[i64 0][i32 %89];
    i32 %104 = load i32* %103;
    i32 %105 = mul i32 %104, i32 9;
    i32 %106 = add i32 %88, i32 %105;
    i32 %107 = srem i32 %106, i32 99988;
    i32 %108 = add i32 %89, i32 1;
    ubr ^while.header;
  ^while.body4:
    i32 %109 = phi [^prebody, i32 5000] [^while.body4, i32 %175];
    i32 %110 = phi [^prebody, i32 %88] [^while.body4, i32 %174];
    i32* %111 = getelementptr &([10000 * i32]* %0)[i64 0][i32 %109];
    i32 %112 = load i32* %111;
    i32 %113 = add i32 %101, i32 %110;
    i32 %114 = sub i32 %113, i32 %112;
    i32 %115 = add i32 %101, i32 %114;
    i32* %116 = getelementptr &(i32* %111)[i64 1];
    i32 %117 = load i32* %116;
    i32 %118 = sub i32 %115, i32 %117;
    i32 %119 = add i32 %101, i32 %118;
    i32* %120 = getelementptr &(i32* %111)[i64 2];
    i32 %121 = load i32* %120;
    i32 %122 = sub i32 %119, i32 %121;
    i32 %123 = add i32 %101, i32 %122;
    i32* %124 = getelementptr &(i32* %111)[i64 3];
    i32 %125 = load i32* %124;
    i32 %126 = sub i32 %123, i32 %125;
    i32 %127 = add i32 %101, i32 %126;
    i32* %128 = getelementptr &(i32* %111)[i64 4];
    i32 %129 = load i32* %128;
    i32 %130 = sub i32 %127, i32 %129;
    i32 %131 = add i32 %101, i32 %130;
    i32* %132 = getelementptr &(i32* %111)[i64 5];
    i32 %133 = load i32* %132;
    i32 %134 = sub i32 %131, i32 %133;
    i32 %135 = add i32 %101, i32 %134;
    i32* %136 = getelementptr &(i32* %111)[i64 6];
    i32 %137 = load i32* %136;
    i32 %138 = sub i32 %135, i32 %137;
    i32 %139 = add i32 %101, i32 %138;
    i32* %140 = getelementptr &(i32* %111)[i64 7];
    i32 %141 = load i32* %140;
    i32 %142 = sub i32 %139, i32 %141;
    i32 %143 = add i32 %101, i32 %142;
    i32* %144 = getelementptr &(i32* %111)[i64 8];
    i32 %145 = load i32* %144;
    i32 %146 = sub i32 %143, i32 %145;
    i32 %147 = add i32 %101, i32 %146;
    i32* %148 = getelementptr &(i32* %111)[i64 9];
    i32 %149 = load i32* %148;
    i32 %150 = sub i32 %147, i32 %149;
    i32 %151 = add i32 %101, i32 %150;
    i32* %152 = getelementptr &(i32* %111)[i64 10];
    i32 %153 = load i32* %152;
    i32 %154 = sub i32 %151, i32 %153;
    i32 %155 = add i32 %101, i32 %154;
    i32* %156 = getelementptr &(i32* %111)[i64 11];
    i32 %157 = load i32* %156;
    i32 %158 = sub i32 %155, i32 %157;
    i32 %159 = add i32 %101, i32 %158;
    i32* %160 = getelementptr &(i32* %111)[i64 12];
    i32 %161 = load i32* %160;
    i32 %162 = sub i32 %159, i32 %161;
    i32 %163 = add i32 %101, i32 %162;
    i32* %164 = getelementptr &(i32* %111)[i64 13];
    i32 %165 = load i32* %164;
    i32 %166 = sub i32 %163, i32 %165;
    i32 %167 = add i32 %101, i32 %166;
    i32* %168 = getelementptr &(i32* %111)[i64 14];
    i32 %169 = load i32* %168;
    i32 %170 = sub i32 %167, i32 %169;
    i32 %171 = add i32 %101, i32 %170;
    i32* %172 = getelementptr &(i32* %111)[i64 15];
    i32 %173 = load i32* %172;
    i32 %174 = sub i32 %171, i32 %173;
    i32 %175 = add i32 %109, i32 16;
    i1 %176 = icmp slt i32 %175, i32 9992;
    cbr i1 %176(prob = 1), ^while.body4, ^while.body5;
  ^while.header1:
    i32 %177 = phi [^if.else1, i32 %88] [^if.then1, i32 %219] [^if.else3, i32 %226];
    i32 %178 = phi [^if.else1, i32 5000] [^if.then1, i32 %220] [^if.else3, i32 %227];
    i1 %179 = icmp slt i32 %178, i32 10000;
    cbr i1 %179(prob = 0.97), ^while.body6, ^b;
  ^while.body5:
    i32* %180 = getelementptr &([10000 * i32]* %0)[i64 0][i32 %175];
    i32 %181 = load i32* %180;
    i32 %182 = add i32 %101, i32 %174;
    i32 %183 = sub i32 %182, i32 %181;
    i32 %184 = add i32 %101, i32 %183;
    i32* %185 = getelementptr &(i32* %180)[i64 1];
    i32 %186 = load i32* %185;
    i32 %187 = sub i32 %184, i32 %186;
    i32 %188 = add i32 %101, i32 %187;
    i32* %189 = getelementptr &(i32* %180)[i64 2];
    i32 %190 = load i32* %189;
    i32 %191 = sub i32 %188, i32 %190;
    i32 %192 = add i32 %101, i32 %191;
    i32* %193 = getelementptr &(i32* %180)[i64 3];
    i32 %194 = load i32* %193;
    i32 %195 = sub i32 %192, i32 %194;
    i32 %196 = add i32 %101, i32 %195;
    i32* %197 = getelementptr &(i32* %180)[i64 4];
    i32 %198 = load i32* %197;
    i32 %199 = sub i32 %196, i32 %198;
    i32 %200 = add i32 %101, i32 %199;
    i32* %201 = getelementptr &(i32* %180)[i64 5];
    i32 %202 = load i32* %201;
    i32 %203 = sub i32 %200, i32 %202;
    i32 %204 = add i32 %101, i32 %203;
    i32* %205 = getelementptr &(i32* %180)[i64 6];
    i32 %206 = load i32* %205;
    i32 %207 = sub i32 %204, i32 %206;
    i32 %208 = add i32 %101, i32 %207;
    i32* %209 = getelementptr &(i32* %180)[i64 7];
    i32 %210 = load i32* %209;
    i32 %211 = sub i32 %208, i32 %210;
    call (i32) -> void @putint(i32 %211);
    i32 %212 = add i32 %89, i32 1;
    ubr ^while.header;
  ^b:
    call (i32) -> void @putint(i32 %177);
    i32 %213 = add i32 %89, i32 1;
    ubr ^while.header;
  ^while.body6:
    i1 %214 = icmp sgt i32 %178, i32 2233;
    cbr i1 %214(prob = 0.5), ^if.then1, ^if.else3;
  ^if.then1:
    i32 %215 = load i32* %92;
    i32 %216 = add i32 %177, i32 %215;
    i32* %217 = getelementptr &([10000 * i32]* %0)[i64 0][i32 %178];
    i32 %218 = load i32* %217;
    i32 %219 = sub i32 %216, i32 %218;
    i32 %220 = add i32 %178, i32 1;
    ubr ^while.header1;
  ^if.else3:
    i32* %221 = getelementptr &([10000 * i32]* %2)[i64 0][i32 %178];
    i32 %222 = load i32* %91;
    i32 %223 = load i32* %221;
    i32 %224 = add i32 %177, i32 %222;
    i32 %225 = add i32 %223, i32 %224;
    i32 %226 = srem i32 %225, i32 13333;
    i32 %227 = add i32 %178, i32 2;
    ubr ^while.header1;
}
internal [10000 * i32]* @a1, align 8 { Flexible };
internal [10000 * i32]* @a2, align 8 { Flexible };
internal [10000 * i32]* @a3, align 8 { Flexible };
