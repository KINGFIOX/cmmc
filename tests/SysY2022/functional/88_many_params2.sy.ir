internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @func(i32 %a, [59 * i32]* %b, i32 %c, i32* %d, i32 %e, i32 %f, i32* %g, i32 %h, i32 %i) -> i32 { NoRecurse } {
^entry:
    i32* %i1 = alloc i32;
    i32* %h1 = alloc i32;
    i32* %f1 = alloc i32;
    i32* %e1 = alloc i32;
    store i32* %e1 with i32 %e;
    store i32* %f1 with i32 %f;
    store i32* %h1 with i32 %h;
    store i32* %i1 with i32 %i;
    [59 * i32]* %0 = getelementptr &([59 * i32]* %b)[i32 %a];
    ubr ^while.body;
^while.body:
    i32 %1 = phi [^entry, i32 0] [^while.body, i32 %4];
    i32* %2 = getelementptr &([59 * i32]* %0)[i64 0][i32 %1];
    i32 %3 = load i32* %2;
    call (i32) -> void @putint(i32 %3);
    i32 %4 = add i32 %1, i32 1;
    i1 %5 = scmp lt i32 %4, i32 10;
    cbr i1 %5(prob = 0.9), ^while.body, ^b1;
^b1:
    call (i32) -> void @putch(i32 10);
    i32* %6 = getelementptr &(i32* %d)[i32 %c];
    i32 %7 = load i32* %6;
    call (i32) -> void @putint(i32 %7);
    call (i32) -> void @putch(i32 10);
    i1 %8 = scmp lt i32 %i, i32 10;
    cbr i1 %8(prob = 0.97), ^while.body1, ^b2;
^while.body1:
    i32 %9 = phi [^b1, i32 %h] [^while.body1, i32 %19];
    i32 %10 = phi [^b1, i32 %i] [^while.body1, i32 %18];
    i32 %11 = mul i32 %9, i32 128875;
    i32* %12 = getelementptr &(i32* %g)[i32 %10];
    i32 %13 = srem i32 %11, i32 3724;
    store i32* %12 with i32 %13;
    i32 %14 = load i32* %e1;
    i32 %15 = load i32* %f1;
    i32 %16 = load i32* %h1;
    i32 %17 = load i32* %i1;
    i32 %18 = add i32 %17, i32 1;
    store i32* %i1 with i32 %18;
    i32 %19 = add i32 %16, i32 7;
    store i32* %h1 with i32 %19;
    i1 %20 = scmp lt i32 %18, i32 10;
    cbr i1 %20(prob = 0.97), ^while.body1, ^b2;
^b2:
    i32 %21 = phi [^b1, i32 %e] [^while.body1, i32 %14];
    i32 %22 = phi [^b1, i32 %f] [^while.body1, i32 %15];
    i32 %23 = add i32 %21, i32 %22;
    ret i32 %23;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    [53 * [59 * i32]]* %b = alloc [53 * [59 * i32]];
    [61 * [67 * i32]]* %a = alloc [61 * [67 * i32]];
    i32* %0 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 0][i64 0];
    i8* %1 = ptrcast i32* %0 to i8*;
    i8* %2 = call (i8*, i32, i64) -> i8* @cmmc::Intrinsic::memset(i8* %1, i32 0, i64 16348);
    i32* %3 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 0][i64 0];
    i8* %4 = ptrcast i32* %3 to i8*;
    i8* %5 = call (i8*, i32, i64) -> i8* @cmmc::Intrinsic::memset(i8* %4, i32 0, i64 12508);
    i32* %6 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17][i64 1];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17][i64 3];
    store i32* %7 with i32 7;
    i32* %8 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17][i64 4];
    store i32* %8 with i32 4;
    i32* %9 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17][i64 7];
    store i32* %9 with i32 9;
    i32* %10 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17][i64 11];
    store i32* %10 with i32 11;
    i32* %11 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 1];
    store i32* %11 with i32 1;
    i32* %12 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 2];
    store i32* %12 with i32 2;
    i32* %13 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 3];
    store i32* %13 with i32 3;
    i32* %14 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 9];
    store i32* %14 with i32 9;
    [59 * i32]* %15 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 0];
    i32* %16 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17][i64 0];
    i32* %17 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 0];
    i32 %18 = load i32* %17;
    i32* %19 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 34][i64 4];
    i32 %20 = load i32* %19;
    i32* %21 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 51][i64 18];
    i32 %22 = load i32* %21;
    i32 %23 = call (i32, [59 * i32]*, i32, i32*, i32, i32, i32*, i32, i32) -> i32 @func(i32 6, [59 * i32]* %15, i32 7, i32* %16, i32 3, i32 %18, i32* %17, i32 %20, i32 %22);
    i32 %24 = mul i32 %23, i32 3;
    i1 %25 = scmp gt i32 %24, i32 -1;
    [59 * i32]* %26 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6];
    cbr i1 %25(prob = 0.97), ^while.body, ^b1;
^while.body:
    i32 %27 = phi [^entry, i32 %24] [^while.body, i32 %30];
    i32* %28 = getelementptr &([59 * i32]* %26)[i64 0][i32 %27];
    i32 %29 = load i32* %28;
    call (i32) -> void @putint(i32 %29);
    call (i32) -> void @putch(i32 32);
    i32 %30 = add i32 %27, i32 -1;
    i1 %31 = scmp gt i32 %30, i32 -1;
    cbr i1 %31(prob = 0.97), ^while.body, ^b1;
^b1:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
internal func @cmmc::Intrinsic::memset() -> i8* { NoMemoryRead };
