internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [61 * [67 * i32]]* %0 = ptrcast [61 * [67 * i32]]* @a to [61 * [67 * i32]]*;
    i32* %1 = getelementptr &([61 * [67 * i32]]* %0)[i64 0][i64 0][i64 0];
    ubr ^b;
  ^b:
    i64 %2 = phi [^entry, i64 0] [^b, i64 %19];
    i32* %3 = getelementptr &(i32* %1)[i64 %2];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &(i32* %3)[i64 1];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &(i32* %3)[i64 2];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &(i32* %3)[i64 3];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &(i32* %3)[i64 4];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &(i32* %3)[i64 5];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &(i32* %3)[i64 6];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &(i32* %3)[i64 7];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &(i32* %3)[i64 8];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &(i32* %3)[i64 9];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &(i32* %3)[i64 10];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &(i32* %3)[i64 11];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &(i32* %3)[i64 12];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &(i32* %3)[i64 13];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &(i32* %3)[i64 14];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &(i32* %3)[i64 15];
    store i32* %18 with i32 0;
    i64 %19 = add i64 %2, i64 16;
    i1 %20 = scmp lt i64 %19, i64 4080;
    cbr i1 %20(prob = 1), ^b, ^b1;
  ^b1:
    i32* %21 = getelementptr &(i32* %1)[i64 %19];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &(i32* %21)[i64 1];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &(i32* %21)[i64 2];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &(i32* %21)[i64 3];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &(i32* %21)[i64 4];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &(i32* %21)[i64 5];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &(i32* %21)[i64 6];
    store i32* %27 with i32 0;
    [53 * [59 * i32]]* %28 = ptrcast [53 * [59 * i32]]* @b to [53 * [59 * i32]]*;
    i32* %29 = getelementptr &([53 * [59 * i32]]* %28)[i64 0][i64 0][i64 0];
    ubr ^b2;
  ^b2:
    i64 %30 = phi [^b1, i64 0] [^b2, i64 %47];
    i32* %31 = getelementptr &(i32* %29)[i64 %30];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &(i32* %31)[i64 1];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &(i32* %31)[i64 2];
    store i32* %33 with i32 0;
    i32* %34 = getelementptr &(i32* %31)[i64 3];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &(i32* %31)[i64 4];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &(i32* %31)[i64 5];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &(i32* %31)[i64 6];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &(i32* %31)[i64 7];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &(i32* %31)[i64 8];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &(i32* %31)[i64 9];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &(i32* %31)[i64 10];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &(i32* %31)[i64 11];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &(i32* %31)[i64 12];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &(i32* %31)[i64 13];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &(i32* %31)[i64 14];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &(i32* %31)[i64 15];
    store i32* %46 with i32 0;
    i64 %47 = add i64 %30, i64 16;
    i1 %48 = scmp lt i64 %47, i64 3120;
    cbr i1 %48(prob = 0.99), ^b2, ^b3;
  ^b3:
    i32* %49 = getelementptr &(i32* %29)[i64 %47];
    store i32* %49 with i32 0;
    i32* %50 = getelementptr &(i32* %49)[i64 1];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &(i32* %49)[i64 2];
    store i32* %51 with i32 0;
    i32* %52 = getelementptr &(i32* %49)[i64 3];
    store i32* %52 with i32 0;
    i32* %53 = getelementptr &(i32* %49)[i64 4];
    store i32* %53 with i32 0;
    i32* %54 = getelementptr &(i32* %49)[i64 5];
    store i32* %54 with i32 0;
    i32* %55 = getelementptr &(i32* %49)[i64 6];
    store i32* %55 with i32 0;
    i32* %56 = getelementptr &([61 * [67 * i32]]* %0)[i64 0][i64 17][i64 1];
    store i32* %56 with i32 6;
    i32* %57 = getelementptr &([61 * [67 * i32]]* %0)[i64 0][i64 17][i64 3];
    store i32* %57 with i32 7;
    i32* %58 = getelementptr &([61 * [67 * i32]]* %0)[i64 0][i64 17][i64 4];
    store i32* %58 with i32 4;
    i32* %59 = getelementptr &([61 * [67 * i32]]* %0)[i64 0][i64 17][i64 7];
    store i32* %59 with i32 9;
    i32* %60 = getelementptr &([61 * [67 * i32]]* %0)[i64 0][i64 17][i64 11];
    store i32* %60 with i32 11;
    i32* %61 = getelementptr &([53 * [59 * i32]]* %28)[i64 0][i64 6][i64 1];
    store i32* %61 with i32 1;
    i32* %62 = getelementptr &([53 * [59 * i32]]* %28)[i64 0][i64 6][i64 2];
    store i32* %62 with i32 2;
    i32* %63 = getelementptr &([53 * [59 * i32]]* %28)[i64 0][i64 6][i64 3];
    store i32* %63 with i32 3;
    i32* %64 = getelementptr &([53 * [59 * i32]]* %28)[i64 0][i64 6][i64 9];
    store i32* %64 with i32 9;
    i32* %65 = getelementptr &([53 * [59 * i32]]* %28)[i64 0][i64 6][i64 0];
    i32 %66 = load i32* %65;
    i32* %67 = getelementptr &([53 * [59 * i32]]* %28)[i64 0][i64 34][i64 4];
    i32 %68 = load i32* %67;
    i32* %69 = getelementptr &([53 * [59 * i32]]* %28)[i64 0][i64 51][i64 18];
    i32 %70 = load i32* %69;
    [59 * i32]* %71 = getelementptr &([53 * [59 * i32]]* %28)[i64 0][i64 6];
    ubr ^while.body;
  ^while.body:
    i32 %72 = phi [^b3, i32 0] [^while.body, i32 %75];
    i32* %73 = getelementptr &([59 * i32]* %71)[i64 0][i32 %72];
    i32 %74 = load i32* %73;
    call (i32) -> void @putint(i32 %74);
    i32 %75 = add i32 %72, i32 1;
    i1 %76 = scmp lt i32 %75, i32 10;
    cbr i1 %76(prob = 0.9), ^while.body, ^b4;
  ^b4:
    call (i32) -> void @putch(i32 10);
    i32 %77 = load i32* %59;
    call (i32) -> void @putint(i32 %77);
    call (i32) -> void @putch(i32 10);
    i1 %78 = scmp lt i32 %70, i32 10;
    cbr i1 %78(prob = 0.97), ^super.header, ^b5;
  ^super.header:
    i32 %79 = phi [^b4, i32 %68] [^while.body1, i32 %101];
    i32 %80 = phi [^b4, i32 %70] [^while.body1, i32 %81];
    i32 %81 = add i32 %80, i32 4;
    i1 %82 = scmp lt i32 %81, i32 10;
    cbr i1 %82(prob = 0.89), ^while.body1, ^super.header1;
  ^b5:
    i32 %83 = add i32 %66, i32 3;
    i32 %84 = mul i32 %83, i32 3;
    i1 %85 = scmp gt i32 %84, i32 -1;
    cbr i1 %85(prob = 0.97), ^while.body2, ^b6;
  ^while.body1:
    i32* %86 = getelementptr &(i32* %65)[i32 %80];
    i32 %87 = mul i32 %79, i32 128875;
    i32 %88 = srem i32 %87, i32 3724;
    store i32* %86 with i32 %88;
    i32* %89 = getelementptr &(i32* %86)[i64 1];
    i32 %90 = add i32 %79, i32 7;
    i32 %91 = mul i32 %90, i32 128875;
    i32 %92 = srem i32 %91, i32 3724;
    store i32* %89 with i32 %92;
    i32* %93 = getelementptr &(i32* %86)[i64 2];
    i32 %94 = add i32 %79, i32 14;
    i32 %95 = mul i32 %94, i32 128875;
    i32 %96 = srem i32 %95, i32 3724;
    store i32* %93 with i32 %96;
    i32* %97 = getelementptr &(i32* %86)[i64 3];
    i32 %98 = add i32 %79, i32 21;
    i32 %99 = mul i32 %98, i32 128875;
    i32 %100 = srem i32 %99, i32 3724;
    store i32* %97 with i32 %100;
    i32 %101 = add i32 %79, i32 28;
    ubr ^super.header;
  ^super.header1:
    i32 %102 = phi [^super.header, i32 %79] [^while.body3, i32 %126];
    i32 %103 = phi [^super.header, i32 %80] [^while.body3, i32 %104];
    i32 %104 = add i32 %103, i32 4;
    i1 %105 = scmp lt i32 %104, i32 10;
    cbr i1 %105(prob = 0.89), ^while.body3, ^super.header2;
  ^while.body2:
    i32 %106 = phi [^b5, i32 %84] [^while.body2, i32 %109];
    i32* %107 = getelementptr &([59 * i32]* %71)[i64 0][i32 %106];
    i32 %108 = load i32* %107;
    call (i32) -> void @putint(i32 %108);
    call (i32) -> void @putch(i32 32);
    i32 %109 = add i32 %106, i32 -1;
    i1 %110 = scmp gt i32 %109, i32 -1;
    cbr i1 %110(prob = 0.97), ^while.body2, ^b6;
  ^b6:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^while.body3:
    i32* %111 = getelementptr &(i32* %65)[i32 %103];
    i32 %112 = mul i32 %102, i32 128875;
    i32 %113 = srem i32 %112, i32 3724;
    store i32* %111 with i32 %113;
    i32* %114 = getelementptr &(i32* %111)[i64 1];
    i32 %115 = add i32 %102, i32 7;
    i32 %116 = mul i32 %115, i32 128875;
    i32 %117 = srem i32 %116, i32 3724;
    store i32* %114 with i32 %117;
    i32* %118 = getelementptr &(i32* %111)[i64 2];
    i32 %119 = add i32 %102, i32 14;
    i32 %120 = mul i32 %119, i32 128875;
    i32 %121 = srem i32 %120, i32 3724;
    store i32* %118 with i32 %121;
    i32* %122 = getelementptr &(i32* %111)[i64 3];
    i32 %123 = add i32 %102, i32 21;
    i32 %124 = mul i32 %123, i32 128875;
    i32 %125 = srem i32 %124, i32 3724;
    store i32* %122 with i32 %125;
    i32 %126 = add i32 %102, i32 28;
    ubr ^super.header1;
  ^super.header2:
    i32 %127 = phi [^super.header1, i32 %102] [^while.body4, i32 %146];
    i32 %128 = phi [^super.header1, i32 %103] [^while.body4, i32 %129];
    i32 %129 = add i32 %128, i32 4;
    i1 %130 = scmp lt i32 %129, i32 10;
    cbr i1 %130(prob = 0.89), ^while.body4, ^while.body5;
  ^while.body4:
    i32* %131 = getelementptr &(i32* %65)[i32 %128];
    i32 %132 = mul i32 %127, i32 128875;
    i32 %133 = srem i32 %132, i32 3724;
    store i32* %131 with i32 %133;
    i32* %134 = getelementptr &(i32* %131)[i64 1];
    i32 %135 = add i32 %127, i32 7;
    i32 %136 = mul i32 %135, i32 128875;
    i32 %137 = srem i32 %136, i32 3724;
    store i32* %134 with i32 %137;
    i32* %138 = getelementptr &(i32* %131)[i64 2];
    i32 %139 = add i32 %127, i32 14;
    i32 %140 = mul i32 %139, i32 128875;
    i32 %141 = srem i32 %140, i32 3724;
    store i32* %138 with i32 %141;
    i32* %142 = getelementptr &(i32* %131)[i64 3];
    i32 %143 = add i32 %127, i32 21;
    i32 %144 = mul i32 %143, i32 128875;
    i32 %145 = srem i32 %144, i32 3724;
    store i32* %142 with i32 %145;
    i32 %146 = add i32 %127, i32 28;
    ubr ^super.header2;
  ^while.body5:
    i32 %147 = phi [^super.header2, i32 %127] [^while.body5, i32 %154];
    i32 %148 = phi [^super.header2, i32 %128] [^while.body5, i32 %152];
    i32* %149 = getelementptr &(i32* %65)[i32 %148];
    i32 %150 = mul i32 %147, i32 128875;
    i32 %151 = srem i32 %150, i32 3724;
    store i32* %149 with i32 %151;
    i32 %152 = add i32 %148, i32 1;
    i1 %153 = scmp lt i32 %152, i32 10;
    i32 %154 = add i32 %147, i32 7;
    cbr i1 %153(prob = 0.97), ^while.body5, ^b5;
}
internal [53 * [59 * i32]]* @b;
internal [61 * [67 * i32]]* @a;
