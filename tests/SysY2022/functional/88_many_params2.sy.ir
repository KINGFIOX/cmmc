internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %e = alloc i32;
    i32* %f = alloc i32;
    i32* %h = alloc i32;
    i32* %i = alloc i32;
    [53 * [59 * i32]]* %b = alloc [53 * [59 * i32]];
    [61 * [67 * i32]]* %a = alloc [61 * [67 * i32]];
    i32* %0 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 0][i64 0];
    i8* %1 = ptrcast i32* %0 to i8*;
    i8* %2 = call (i8*, i32, i64) -> i8* @cmmc::Intrinsic::memset(i8* %1, i32 0, i64 16348);
    i32* %3 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 0][i64 0];
    i8* %4 = ptrcast i32* %3 to i8*;
    i8* %5 = call (i8*, i32, i64) -> i8* @cmmc::Intrinsic::memset(i8* %4, i32 0, i64 12508);
    i32* %6 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17][i64 1];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17][i64 3];
    store i32* %7 with i32 7;
    i32* %8 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17][i64 4];
    store i32* %8 with i32 4;
    i32* %9 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17][i64 7];
    store i32* %9 with i32 9;
    i32* %10 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17][i64 11];
    store i32* %10 with i32 11;
    i32* %11 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 1];
    store i32* %11 with i32 1;
    i32* %12 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 2];
    store i32* %12 with i32 2;
    i32* %13 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 3];
    store i32* %13 with i32 3;
    i32* %14 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 9];
    store i32* %14 with i32 9;
    [59 * i32]* %15 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 0];
    i32* %16 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17][i64 0];
    i32* %17 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 0];
    i32 %18 = load i32* %17;
    i32* %19 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 34][i64 4];
    i32 %20 = load i32* %19;
    i32* %21 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 51][i64 18];
    i32 %22 = load i32* %21;
    store i32* %e with i32 3;
    store i32* %f with i32 %18;
    store i32* %h with i32 %20;
    store i32* %i with i32 %22;
    ubr ^while.header;
^while.header:
    i32 %23 = phi [^while.body, i32 %38] [^entry, i32 0];
    i32 %24 = phi [^while.body, i32 %24] [^entry, i32 %22];
    i32 %25 = phi [^while.body, i32 %25] [^entry, i32 %20];
    i32* %26 = phi [^while.body, i32* %26] [^entry, i32* %17];
    i32 %27 = phi [^while.body, i32 %27] [^entry, i32 %18];
    i32 %28 = phi [^while.body, i32 %28] [^entry, i32 3];
    i32* %29 = phi [^while.body, i32* %29] [^entry, i32* %16];
    i32 %30 = phi [^while.body, i32 %30] [^entry, i32 7];
    [59 * i32]* %31 = phi [^while.body, [59 * i32]* %31] [^entry, [59 * i32]* %15];
    i32 %32 = phi [^while.body, i32 %32] [^entry, i32 6];
    i32 %33 = phi [^entry, i32 0] [^while.body, i32 %38];
    i1 %34 = scmp lt i32 %33, i32 10;
    cbr i1 %34(prob = 0.97), ^while.body, ^b1;
^while.body:
    [59 * i32]* %35 = getelementptr &([59 * i32]* %31)[i32 %32];
    i32* %36 = getelementptr &([59 * i32]* %35)[i64 0][i32 %23];
    i32 %37 = load i32* %36;
    call (i32) -> void @putint(i32 %37);
    i32 %38 = add i32 %23, i32 1;
    ubr ^while.header;
^b1:
    call (i32) -> void @putch(i32 10);
    i32* %39 = getelementptr &(i32* %29)[i32 %30];
    i32 %40 = load i32* %39;
    call (i32) -> void @putint(i32 %40);
    call (i32) -> void @putch(i32 10);
    ubr ^while.header1;
^while.header1:
    i32 %41 = phi [^while.body1, i32 %55] [^b1, i32 %24];
    i32 %42 = phi [^while.body1, i32 %56] [^b1, i32 %25];
    i32* %43 = phi [^while.body1, i32* %43] [^b1, i32* %26];
    i32 %44 = phi [^while.body1, i32 %53] [^b1, i32 %27];
    i32 %45 = phi [^while.body1, i32 %54] [^b1, i32 %28];
    i32 %46 = phi [^b1, i32 %24] [^while.body1, i32 %55];
    i1 %47 = scmp lt i32 %46, i32 10;
    cbr i1 %47(prob = 0.97), ^while.body1, ^b2;
^while.body1:
    i32* %48 = getelementptr &(i32* %43)[i32 %41];
    i32 %49 = mul i32 %42, i32 128875;
    i32 %50 = srem i32 %49, i32 3724;
    store i32* %48 with i32 %50;
    i32 %51 = load i32* %i;
    i32 %52 = load i32* %h;
    i32 %53 = load i32* %f;
    i32 %54 = load i32* %e;
    i32 %55 = add i32 %51, i32 1;
    store i32* %i with i32 %55;
    i32 %56 = add i32 %52, i32 7;
    store i32* %h with i32 %56;
    ubr ^while.header1;
^b2:
    i32 %57 = add i32 %45, i32 %44;
    i32 %58 = mul i32 %57, i32 3;
    ubr ^while.header2;
^while.header2:
    i32 %59 = phi [^while.body2, i32 %65] [^b2, i32 %58];
    i32 %60 = phi [^b2, i32 %58] [^while.body2, i32 %65];
    i1 %61 = scmp gt i32 %60, i32 -1;
    cbr i1 %61(prob = 0.97), ^while.body2, ^b3;
^while.body2:
    [59 * i32]* %62 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6];
    i32* %63 = getelementptr &([59 * i32]* %62)[i64 0][i32 %59];
    i32 %64 = load i32* %63;
    call (i32) -> void @putint(i32 %64);
    call (i32) -> void @putch(i32 32);
    i32 %65 = add i32 %59, i32 -1;
    ubr ^while.header2;
^b3:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
internal func @cmmc::Intrinsic::memset() -> i8* { NoMemoryRead };
