internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [53 * [59 * i32]]* %b = alloc [53 * [59 * i32]];
    [61 * [67 * i32]]* %a = alloc [61 * [67 * i32]];
    i32* %0 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 0][i64 0];
    ubr ^b1;
  ^b1:
    i64 %1 = phi [^entry, i64 0] [^b1, i64 %18];
    i32* %2 = getelementptr &(i32* %0)[i64 %1];
    store i32* %2 with i32 0;
    i32* %3 = getelementptr &(i32* %2)[i64 1];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &(i32* %2)[i64 2];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &(i32* %2)[i64 3];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &(i32* %2)[i64 4];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &(i32* %2)[i64 5];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &(i32* %2)[i64 6];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &(i32* %2)[i64 7];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &(i32* %2)[i64 8];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &(i32* %2)[i64 9];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &(i32* %2)[i64 10];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &(i32* %2)[i64 11];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &(i32* %2)[i64 12];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &(i32* %2)[i64 13];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &(i32* %2)[i64 14];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &(i32* %2)[i64 15];
    store i32* %17 with i32 0;
    i64 %18 = add i64 %1, i64 16;
    i1 %19 = scmp lt i64 %18, i64 4080;
    cbr i1 %19(prob = 1), ^b1, ^b2;
  ^b2:
    i32* %20 = getelementptr &(i32* %0)[i64 %18];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &(i32* %20)[i64 1];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &(i32* %20)[i64 2];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &(i32* %20)[i64 3];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &(i32* %20)[i64 4];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &(i32* %20)[i64 5];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &(i32* %20)[i64 6];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 0][i64 0];
    ubr ^b3;
  ^b3:
    i64 %28 = phi [^b2, i64 0] [^b3, i64 %45];
    i32* %29 = getelementptr &(i32* %27)[i64 %28];
    store i32* %29 with i32 0;
    i32* %30 = getelementptr &(i32* %29)[i64 1];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &(i32* %29)[i64 2];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &(i32* %29)[i64 3];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &(i32* %29)[i64 4];
    store i32* %33 with i32 0;
    i32* %34 = getelementptr &(i32* %29)[i64 5];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &(i32* %29)[i64 6];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &(i32* %29)[i64 7];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &(i32* %29)[i64 8];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &(i32* %29)[i64 9];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &(i32* %29)[i64 10];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &(i32* %29)[i64 11];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &(i32* %29)[i64 12];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &(i32* %29)[i64 13];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &(i32* %29)[i64 14];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &(i32* %29)[i64 15];
    store i32* %44 with i32 0;
    i64 %45 = add i64 %28, i64 16;
    i1 %46 = scmp lt i64 %45, i64 3120;
    cbr i1 %46(prob = 0.99), ^b3, ^b4;
  ^b4:
    i32* %47 = getelementptr &(i32* %27)[i64 %45];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &(i32* %47)[i64 1];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &(i32* %47)[i64 2];
    store i32* %49 with i32 0;
    i32* %50 = getelementptr &(i32* %47)[i64 3];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &(i32* %47)[i64 4];
    store i32* %51 with i32 0;
    i32* %52 = getelementptr &(i32* %47)[i64 5];
    store i32* %52 with i32 0;
    i32* %53 = getelementptr &(i32* %47)[i64 6];
    store i32* %53 with i32 0;
    i32* %54 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17][i64 1];
    store i32* %54 with i32 6;
    i32* %55 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17][i64 3];
    store i32* %55 with i32 7;
    i32* %56 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17][i64 4];
    store i32* %56 with i32 4;
    i32* %57 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17][i64 7];
    store i32* %57 with i32 9;
    i32* %58 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17][i64 11];
    store i32* %58 with i32 11;
    i32* %59 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 1];
    store i32* %59 with i32 1;
    i32* %60 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 2];
    store i32* %60 with i32 2;
    i32* %61 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 3];
    store i32* %61 with i32 3;
    i32* %62 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 9];
    store i32* %62 with i32 9;
    i32* %63 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 0];
    i32 %64 = load i32* %63;
    i32* %65 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 34][i64 4];
    i32 %66 = load i32* %65;
    i32* %67 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 51][i64 18];
    i32 %68 = load i32* %67;
    [59 * i32]* %69 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6];
    ubr ^while.body;
  ^while.body:
    i32 %70 = phi [^b4, i32 0] [^while.body, i32 %73];
    i32* %71 = getelementptr &([59 * i32]* %69)[i64 0][i32 %70];
    i32 %72 = load i32* %71;
    call (i32) -> void @putint(i32 %72);
    i32 %73 = add i32 %70, i32 1;
    i1 %74 = scmp lt i32 %73, i32 10;
    cbr i1 %74(prob = 0.9), ^while.body, ^b5;
  ^b5:
    call (i32) -> void @putch(i32 10);
    i32 %75 = load i32* %57;
    call (i32) -> void @putint(i32 %75);
    call (i32) -> void @putch(i32 10);
    i1 %76 = scmp lt i32 %68, i32 10;
    cbr i1 %76(prob = 0.97), ^super.header, ^b6;
  ^super.header:
    i32 %77 = phi [^b5, i32 %66] [^while.body1, i32 %99];
    i32 %78 = phi [^b5, i32 %68] [^while.body1, i32 %79];
    i32 %79 = add i32 %78, i32 4;
    i1 %80 = scmp lt i32 %79, i32 10;
    cbr i1 %80(prob = 0.89), ^while.body1, ^super.header1;
  ^b6:
    i32 %81 = add i32 %64, i32 3;
    i32 %82 = mul i32 %81, i32 3;
    i1 %83 = scmp gt i32 %82, i32 -1;
    cbr i1 %83(prob = 0.97), ^while.body2, ^b7;
  ^while.body1:
    i32 %84 = mul i32 %77, i32 128875;
    i32 %85 = srem i32 %84, i32 3724;
    i32* %86 = getelementptr &(i32* %63)[i32 %78];
    store i32* %86 with i32 %85;
    i32 %87 = add i32 %77, i32 7;
    i32 %88 = mul i32 %87, i32 128875;
    i32 %89 = srem i32 %88, i32 3724;
    i32* %90 = getelementptr &(i32* %86)[i64 1];
    store i32* %90 with i32 %89;
    i32 %91 = add i32 %77, i32 14;
    i32 %92 = mul i32 %91, i32 128875;
    i32 %93 = srem i32 %92, i32 3724;
    i32* %94 = getelementptr &(i32* %86)[i64 2];
    store i32* %94 with i32 %93;
    i32 %95 = add i32 %77, i32 21;
    i32 %96 = mul i32 %95, i32 128875;
    i32 %97 = srem i32 %96, i32 3724;
    i32* %98 = getelementptr &(i32* %86)[i64 3];
    store i32* %98 with i32 %97;
    i32 %99 = add i32 %77, i32 28;
    ubr ^super.header;
  ^super.header1:
    i32 %100 = phi [^super.header, i32 %77] [^while.body3, i32 %124];
    i32 %101 = phi [^super.header, i32 %78] [^while.body3, i32 %102];
    i32 %102 = add i32 %101, i32 4;
    i1 %103 = scmp lt i32 %102, i32 10;
    cbr i1 %103(prob = 0.89), ^while.body3, ^super.header2;
  ^while.body2:
    i32 %104 = phi [^b6, i32 %82] [^while.body2, i32 %107];
    i32* %105 = getelementptr &([59 * i32]* %69)[i64 0][i32 %104];
    i32 %106 = load i32* %105;
    call (i32) -> void @putint(i32 %106);
    call (i32) -> void @putch(i32 32);
    i32 %107 = add i32 %104, i32 -1;
    i1 %108 = scmp gt i32 %107, i32 -1;
    cbr i1 %108(prob = 0.97), ^while.body2, ^b7;
  ^b7:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^while.body3:
    i32 %109 = mul i32 %100, i32 128875;
    i32 %110 = srem i32 %109, i32 3724;
    i32* %111 = getelementptr &(i32* %63)[i32 %101];
    store i32* %111 with i32 %110;
    i32 %112 = add i32 %100, i32 7;
    i32 %113 = mul i32 %112, i32 128875;
    i32 %114 = srem i32 %113, i32 3724;
    i32* %115 = getelementptr &(i32* %111)[i64 1];
    store i32* %115 with i32 %114;
    i32 %116 = add i32 %100, i32 14;
    i32 %117 = mul i32 %116, i32 128875;
    i32 %118 = srem i32 %117, i32 3724;
    i32* %119 = getelementptr &(i32* %111)[i64 2];
    store i32* %119 with i32 %118;
    i32 %120 = add i32 %100, i32 21;
    i32 %121 = mul i32 %120, i32 128875;
    i32 %122 = srem i32 %121, i32 3724;
    i32* %123 = getelementptr &(i32* %111)[i64 3];
    store i32* %123 with i32 %122;
    i32 %124 = add i32 %100, i32 28;
    ubr ^super.header1;
  ^super.header2:
    i32 %125 = phi [^super.header1, i32 %100] [^while.body4, i32 %144];
    i32 %126 = phi [^super.header1, i32 %101] [^while.body4, i32 %127];
    i32 %127 = add i32 %126, i32 4;
    i1 %128 = scmp lt i32 %127, i32 10;
    cbr i1 %128(prob = 0.89), ^while.body4, ^while.body5;
  ^while.body4:
    i32 %129 = mul i32 %125, i32 128875;
    i32 %130 = srem i32 %129, i32 3724;
    i32* %131 = getelementptr &(i32* %63)[i32 %126];
    store i32* %131 with i32 %130;
    i32 %132 = add i32 %125, i32 7;
    i32 %133 = mul i32 %132, i32 128875;
    i32 %134 = srem i32 %133, i32 3724;
    i32* %135 = getelementptr &(i32* %131)[i64 1];
    store i32* %135 with i32 %134;
    i32 %136 = add i32 %125, i32 14;
    i32 %137 = mul i32 %136, i32 128875;
    i32 %138 = srem i32 %137, i32 3724;
    i32* %139 = getelementptr &(i32* %131)[i64 2];
    store i32* %139 with i32 %138;
    i32 %140 = add i32 %125, i32 21;
    i32 %141 = mul i32 %140, i32 128875;
    i32 %142 = srem i32 %141, i32 3724;
    i32* %143 = getelementptr &(i32* %131)[i64 3];
    store i32* %143 with i32 %142;
    i32 %144 = add i32 %125, i32 28;
    ubr ^super.header2;
  ^while.body5:
    i32 %145 = phi [^super.header2, i32 %125] [^while.body5, i32 %152];
    i32 %146 = phi [^super.header2, i32 %126] [^while.body5, i32 %150];
    i32 %147 = mul i32 %145, i32 128875;
    i32 %148 = srem i32 %147, i32 3724;
    i32* %149 = getelementptr &(i32* %63)[i32 %146];
    store i32* %149 with i32 %148;
    i32 %150 = add i32 %146, i32 1;
    i1 %151 = scmp lt i32 %150, i32 10;
    i32 %152 = add i32 %145, i32 7;
    cbr i1 %151(prob = 0.97), ^while.body5, ^b6;
}
