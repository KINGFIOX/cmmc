internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @func(i32 %a, [59 * i32]* %b, i32 %c, i32* %d, i32 %e, i32 %f, i32* %g, i32 %h, i32 %i) -> i32 {
^entry:
    i32* %index = alloc i32;
    i32* %i1 = alloc i32;
    i32* %h1 = alloc i32;
    i32** %g1 = alloc i32*;
    i32* %f1 = alloc i32;
    i32* %e1 = alloc i32;
    i32** %d1 = alloc i32*;
    i32* %c1 = alloc i32;
    [59 * i32]** %b1 = alloc [59 * i32]*;
    i32* %a1 = alloc i32;
    store i32* %a1 with i32 %a;
    store [59 * i32]** %b1 with [59 * i32]* %b;
    store i32* %c1 with i32 %c;
    store i32** %d1 with i32* %d;
    store i32* %e1 with i32 %e;
    store i32* %f1 with i32 %f;
    store i32** %g1 with i32* %g;
    store i32* %h1 with i32 %h;
    store i32* %i1 with i32 %i;
    store i32* %index with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %index;
    i1 %1 = scmp lt i32 %0, i32 10;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^while.body, ^b2;
^while.body:
    i32 %4 = load i32* %a1;
    i64 %5 = sext i32 %4 to i64;
    [59 * i32]* %6 = load [59 * i32]** %b1;
    [59 * i32]* %7 = getelementptr &([59 * i32]* %6)[i64 %5];
    i32 %8 = load i32* %index;
    i64 %9 = sext i32 %8 to i64;
    i32* %10 = getelementptr &([59 * i32]* %7)[i64 0][i64 %9];
    i32 %11 = load i32* %10;
    call (i32) -> void @putint(i32 %11);
    i32 %12 = load i32* %index;
    i32 %13 = add i32 %12, i32 1;
    store i32* %index with i32 %13;
    ubr ^while.header;
^b2:
    call (i32) -> void @putch(i32 10);
    i32 %14 = load i32* %c1;
    i64 %15 = sext i32 %14 to i64;
    i32* %16 = load i32** %d1;
    i32* %17 = getelementptr &(i32* %16)[i64 %15];
    i32 %18 = load i32* %17;
    call (i32) -> void @putint(i32 %18);
    call (i32) -> void @putch(i32 10);
    ubr ^while.header1;
^while.header1:
    i32 %19 = load i32* %i1;
    i1 %20 = scmp lt i32 %19, i32 10;
    i32 %21 = zext i1 %20 to i32;
    i1 %22 = scmp neq i32 %21, i32 0;
    cbr i1 %22(prob = 0.97), ^while.body1, ^b3;
^while.body1:
    i32 %23 = load i32* %i1;
    i64 %24 = sext i32 %23 to i64;
    i32* %25 = load i32** %g1;
    i32* %26 = getelementptr &(i32* %25)[i64 %24];
    i32 %27 = load i32* %h1;
    i32 %28 = mul i32 %27, i32 128875;
    i32 %29 = srem i32 %28, i32 3724;
    store i32* %26 with i32 %29;
    i32 %30 = load i32* %i1;
    i32 %31 = add i32 %30, i32 1;
    store i32* %i1 with i32 %31;
    i32 %32 = load i32* %h1;
    i32 %33 = add i32 %32, i32 7;
    store i32* %h1 with i32 %33;
    ubr ^while.header1;
^b3:
    i32 %34 = load i32* %e1;
    i32 %35 = load i32* %f1;
    i32 %36 = add i32 %34, i32 %35;
    ret i32 %36;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %ret = alloc i32;
    [53 * [59 * i32]]* %b = alloc [53 * [59 * i32]];
    [61 * [67 * i32]]* %a = alloc [61 * [67 * i32]];
    i32* %0 = getelementptr &([61 * [67 * i32]]* %a)[i64 1][i64 0][i64 0];
    i32* %1 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 0][i64 0];
    i8* %2 = ptrcast i32* %1 to i8*;
    i8* %3 = call (i8*, i32, i64) -> i8* @cmmc::Intrinsic::memset(i8* %2, i32 0, i64 16348);
    i32* %4 = getelementptr &([53 * [59 * i32]]* %b)[i64 1][i64 0][i64 0];
    i32* %5 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 0][i64 0];
    i8* %6 = ptrcast i32* %5 to i8*;
    i8* %7 = call (i8*, i32, i64) -> i8* @cmmc::Intrinsic::memset(i8* %6, i32 0, i64 12508);
    [67 * i32]* %8 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17];
    i32* %9 = getelementptr &([67 * i32]* %8)[i64 0][i64 1];
    store i32* %9 with i32 6;
    [67 * i32]* %10 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17];
    i32* %11 = getelementptr &([67 * i32]* %10)[i64 0][i64 3];
    store i32* %11 with i32 7;
    [67 * i32]* %12 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17];
    i32* %13 = getelementptr &([67 * i32]* %12)[i64 0][i64 4];
    store i32* %13 with i32 4;
    [67 * i32]* %14 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17];
    i32* %15 = getelementptr &([67 * i32]* %14)[i64 0][i64 7];
    store i32* %15 with i32 9;
    [67 * i32]* %16 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17];
    i32* %17 = getelementptr &([67 * i32]* %16)[i64 0][i64 11];
    store i32* %17 with i32 11;
    [59 * i32]* %18 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6];
    i32* %19 = getelementptr &([59 * i32]* %18)[i64 0][i64 1];
    store i32* %19 with i32 1;
    [59 * i32]* %20 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6];
    i32* %21 = getelementptr &([59 * i32]* %20)[i64 0][i64 2];
    store i32* %21 with i32 2;
    [59 * i32]* %22 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6];
    i32* %23 = getelementptr &([59 * i32]* %22)[i64 0][i64 3];
    store i32* %23 with i32 3;
    [59 * i32]* %24 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6];
    i32* %25 = getelementptr &([59 * i32]* %24)[i64 0][i64 9];
    store i32* %25 with i32 9;
    store i32* %ret with i32 0;
    [67 * i32]* %26 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17];
    i32* %27 = getelementptr &([67 * i32]* %26)[i64 0][i64 1];
    i32 %28 = load i32* %27;
    [59 * i32]* %29 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 0];
    [67 * i32]* %30 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17];
    i32* %31 = getelementptr &([67 * i32]* %30)[i64 0][i64 3];
    i32 %32 = load i32* %31;
    [67 * i32]* %33 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17];
    i32* %34 = getelementptr &([67 * i32]* %33)[i64 0][i64 0];
    [59 * i32]* %35 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6];
    i32* %36 = getelementptr &([59 * i32]* %35)[i64 0][i64 3];
    i32 %37 = load i32* %36;
    [59 * i32]* %38 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6];
    i32* %39 = getelementptr &([59 * i32]* %38)[i64 0][i64 0];
    i32 %40 = load i32* %39;
    [59 * i32]* %41 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6];
    i32* %42 = getelementptr &([59 * i32]* %41)[i64 0][i64 0];
    [59 * i32]* %43 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 34];
    i32* %44 = getelementptr &([59 * i32]* %43)[i64 0][i64 4];
    i32 %45 = load i32* %44;
    [59 * i32]* %46 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 51];
    i32* %47 = getelementptr &([59 * i32]* %46)[i64 0][i64 18];
    i32 %48 = load i32* %47;
    i32 %49 = call (i32, [59 * i32]*, i32, i32*, i32, i32, i32*, i32, i32) -> i32 @func(i32 %28, [59 * i32]* %29, i32 %32, i32* %34, i32 %37, i32 %40, i32* %42, i32 %45, i32 %48);
    i32 %50 = mul i32 %49, i32 3;
    store i32* %ret with i32 %50;
    ubr ^while.header;
^while.header:
    i32 %51 = load i32* %ret;
    i1 %52 = scmp ge i32 %51, i32 0;
    i32 %53 = zext i1 %52 to i32;
    i1 %54 = scmp neq i32 %53, i32 0;
    cbr i1 %54(prob = 0.97), ^while.body, ^b1;
^while.body:
    [59 * i32]* %55 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6];
    i32 %56 = load i32* %ret;
    i64 %57 = sext i32 %56 to i64;
    i32* %58 = getelementptr &([59 * i32]* %55)[i64 0][i64 %57];
    i32 %59 = load i32* %58;
    call (i32) -> void @putint(i32 %59);
    call (i32) -> void @putch(i32 32);
    i32 %60 = load i32* %ret;
    i32 %61 = sub i32 %60, i32 1;
    store i32* %ret with i32 %61;
    ubr ^while.header;
^b1:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
internal func @cmmc::Intrinsic::memset() -> i8* { NoMemoryRead };
