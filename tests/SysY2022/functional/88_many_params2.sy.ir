internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [53 * [59 * i32]]* %b = alloc [53 * [59 * i32]];
    [61 * [67 * i32]]* %a = alloc [61 * [67 * i32]];
    i32* %0 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 0][i64 0];
    i8* %1 = ptrcast i32* %0 to i8*;
    ubr ^super.header;
^super.header:
    i64 %2 = phi [^entry, i64 0] [^b1, i64 %3];
    i64 %3 = add i64 %2, i64 16;
    i1 %4 = scmp lt i64 %3, i64 16348;
    cbr i1 %4(prob = 0.67), ^b1, ^super.header1;
^b1:
    i8* %5 = getelementptr &(i8* %1)[i64 %2];
    store i8* %5 with i8 0;
    i8* %6 = getelementptr &(i8* %5)[i64 1];
    store i8* %6 with i8 0;
    i8* %7 = getelementptr &(i8* %5)[i64 2];
    store i8* %7 with i8 0;
    i8* %8 = getelementptr &(i8* %5)[i64 3];
    store i8* %8 with i8 0;
    i8* %9 = getelementptr &(i8* %5)[i64 4];
    store i8* %9 with i8 0;
    i8* %10 = getelementptr &(i8* %5)[i64 5];
    store i8* %10 with i8 0;
    i8* %11 = getelementptr &(i8* %5)[i64 6];
    store i8* %11 with i8 0;
    i8* %12 = getelementptr &(i8* %5)[i64 7];
    store i8* %12 with i8 0;
    i8* %13 = getelementptr &(i8* %5)[i64 8];
    store i8* %13 with i8 0;
    i8* %14 = getelementptr &(i8* %5)[i64 9];
    store i8* %14 with i8 0;
    i8* %15 = getelementptr &(i8* %5)[i64 10];
    store i8* %15 with i8 0;
    i8* %16 = getelementptr &(i8* %5)[i64 11];
    store i8* %16 with i8 0;
    i8* %17 = getelementptr &(i8* %5)[i64 12];
    store i8* %17 with i8 0;
    i8* %18 = getelementptr &(i8* %5)[i64 13];
    store i8* %18 with i8 0;
    i8* %19 = getelementptr &(i8* %5)[i64 14];
    store i8* %19 with i8 0;
    i8* %20 = getelementptr &(i8* %5)[i64 15];
    store i8* %20 with i8 0;
    ubr ^super.header;
^super.header1:
    i64 %21 = phi [^super.header, i64 %2] [^b2, i64 %22];
    i64 %22 = add i64 %21, i64 16;
    i1 %23 = scmp lt i64 %22, i64 16348;
    cbr i1 %23(prob = 0.67), ^b2, ^b3;
^b2:
    i8* %24 = getelementptr &(i8* %1)[i64 %21];
    store i8* %24 with i8 0;
    i8* %25 = getelementptr &(i8* %24)[i64 1];
    store i8* %25 with i8 0;
    i8* %26 = getelementptr &(i8* %24)[i64 2];
    store i8* %26 with i8 0;
    i8* %27 = getelementptr &(i8* %24)[i64 3];
    store i8* %27 with i8 0;
    i8* %28 = getelementptr &(i8* %24)[i64 4];
    store i8* %28 with i8 0;
    i8* %29 = getelementptr &(i8* %24)[i64 5];
    store i8* %29 with i8 0;
    i8* %30 = getelementptr &(i8* %24)[i64 6];
    store i8* %30 with i8 0;
    i8* %31 = getelementptr &(i8* %24)[i64 7];
    store i8* %31 with i8 0;
    i8* %32 = getelementptr &(i8* %24)[i64 8];
    store i8* %32 with i8 0;
    i8* %33 = getelementptr &(i8* %24)[i64 9];
    store i8* %33 with i8 0;
    i8* %34 = getelementptr &(i8* %24)[i64 10];
    store i8* %34 with i8 0;
    i8* %35 = getelementptr &(i8* %24)[i64 11];
    store i8* %35 with i8 0;
    i8* %36 = getelementptr &(i8* %24)[i64 12];
    store i8* %36 with i8 0;
    i8* %37 = getelementptr &(i8* %24)[i64 13];
    store i8* %37 with i8 0;
    i8* %38 = getelementptr &(i8* %24)[i64 14];
    store i8* %38 with i8 0;
    i8* %39 = getelementptr &(i8* %24)[i64 15];
    store i8* %39 with i8 0;
    ubr ^super.header1;
^b3:
    i64 %40 = phi [^super.header1, i64 %21] [^b3, i64 %42];
    i8* %41 = getelementptr &(i8* %1)[i64 %40];
    store i8* %41 with i8 0;
    i64 %42 = add i64 %40, i64 1;
    i1 %43 = scmp lt i64 %42, i64 16348;
    cbr i1 %43(prob = 0.97), ^b3, ^entry1;
^entry1:
    i32* %44 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 0][i64 0];
    i8* %45 = ptrcast i32* %44 to i8*;
    ubr ^super.header2;
^super.header2:
    i64 %46 = phi [^entry1, i64 0] [^b4, i64 %47];
    i64 %47 = add i64 %46, i64 16;
    i1 %48 = scmp lt i64 %47, i64 12508;
    cbr i1 %48(prob = 0.67), ^b4, ^super.header3;
^b4:
    i8* %49 = getelementptr &(i8* %45)[i64 %46];
    store i8* %49 with i8 0;
    i8* %50 = getelementptr &(i8* %49)[i64 1];
    store i8* %50 with i8 0;
    i8* %51 = getelementptr &(i8* %49)[i64 2];
    store i8* %51 with i8 0;
    i8* %52 = getelementptr &(i8* %49)[i64 3];
    store i8* %52 with i8 0;
    i8* %53 = getelementptr &(i8* %49)[i64 4];
    store i8* %53 with i8 0;
    i8* %54 = getelementptr &(i8* %49)[i64 5];
    store i8* %54 with i8 0;
    i8* %55 = getelementptr &(i8* %49)[i64 6];
    store i8* %55 with i8 0;
    i8* %56 = getelementptr &(i8* %49)[i64 7];
    store i8* %56 with i8 0;
    i8* %57 = getelementptr &(i8* %49)[i64 8];
    store i8* %57 with i8 0;
    i8* %58 = getelementptr &(i8* %49)[i64 9];
    store i8* %58 with i8 0;
    i8* %59 = getelementptr &(i8* %49)[i64 10];
    store i8* %59 with i8 0;
    i8* %60 = getelementptr &(i8* %49)[i64 11];
    store i8* %60 with i8 0;
    i8* %61 = getelementptr &(i8* %49)[i64 12];
    store i8* %61 with i8 0;
    i8* %62 = getelementptr &(i8* %49)[i64 13];
    store i8* %62 with i8 0;
    i8* %63 = getelementptr &(i8* %49)[i64 14];
    store i8* %63 with i8 0;
    i8* %64 = getelementptr &(i8* %49)[i64 15];
    store i8* %64 with i8 0;
    ubr ^super.header2;
^super.header3:
    i64 %65 = phi [^super.header2, i64 %46] [^b5, i64 %66];
    i64 %66 = add i64 %65, i64 16;
    i1 %67 = scmp lt i64 %66, i64 12508;
    cbr i1 %67(prob = 0.67), ^b5, ^b6;
^b5:
    i8* %68 = getelementptr &(i8* %45)[i64 %65];
    store i8* %68 with i8 0;
    i8* %69 = getelementptr &(i8* %68)[i64 1];
    store i8* %69 with i8 0;
    i8* %70 = getelementptr &(i8* %68)[i64 2];
    store i8* %70 with i8 0;
    i8* %71 = getelementptr &(i8* %68)[i64 3];
    store i8* %71 with i8 0;
    i8* %72 = getelementptr &(i8* %68)[i64 4];
    store i8* %72 with i8 0;
    i8* %73 = getelementptr &(i8* %68)[i64 5];
    store i8* %73 with i8 0;
    i8* %74 = getelementptr &(i8* %68)[i64 6];
    store i8* %74 with i8 0;
    i8* %75 = getelementptr &(i8* %68)[i64 7];
    store i8* %75 with i8 0;
    i8* %76 = getelementptr &(i8* %68)[i64 8];
    store i8* %76 with i8 0;
    i8* %77 = getelementptr &(i8* %68)[i64 9];
    store i8* %77 with i8 0;
    i8* %78 = getelementptr &(i8* %68)[i64 10];
    store i8* %78 with i8 0;
    i8* %79 = getelementptr &(i8* %68)[i64 11];
    store i8* %79 with i8 0;
    i8* %80 = getelementptr &(i8* %68)[i64 12];
    store i8* %80 with i8 0;
    i8* %81 = getelementptr &(i8* %68)[i64 13];
    store i8* %81 with i8 0;
    i8* %82 = getelementptr &(i8* %68)[i64 14];
    store i8* %82 with i8 0;
    i8* %83 = getelementptr &(i8* %68)[i64 15];
    store i8* %83 with i8 0;
    ubr ^super.header3;
^b6:
    i64 %84 = phi [^super.header3, i64 %65] [^b6, i64 %86];
    i8* %85 = getelementptr &(i8* %45)[i64 %84];
    store i8* %85 with i8 0;
    i64 %86 = add i64 %84, i64 1;
    i1 %87 = scmp lt i64 %86, i64 12508;
    cbr i1 %87(prob = 0.97), ^b6, ^entry2;
^entry2:
    i32* %88 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17][i64 1];
    store i32* %88 with i32 6;
    i32* %89 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17][i64 3];
    store i32* %89 with i32 7;
    i32* %90 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17][i64 4];
    store i32* %90 with i32 4;
    i32* %91 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17][i64 7];
    store i32* %91 with i32 9;
    i32* %92 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17][i64 11];
    store i32* %92 with i32 11;
    i32* %93 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 1];
    store i32* %93 with i32 1;
    i32* %94 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 2];
    store i32* %94 with i32 2;
    i32* %95 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 3];
    store i32* %95 with i32 3;
    i32* %96 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 9];
    store i32* %96 with i32 9;
    i32* %97 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 0];
    i32 %98 = load i32* %97;
    i32* %99 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 34][i64 4];
    i32 %100 = load i32* %99;
    i32* %101 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 51][i64 18];
    i32 %102 = load i32* %101;
    [59 * i32]* %103 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6];
    call (i32) -> void @putint(i32 %98);
    ubr ^indirect;
^indirect:
    i32 %104 = phi [^entry2, i32 1] [^indirect, i32 %107];
    i32* %105 = getelementptr &([59 * i32]* %103)[i64 0][i32 %104];
    i32 %106 = load i32* %105;
    call (i32) -> void @putint(i32 %106);
    i32 %107 = add i32 %104, i32 1;
    i1 %108 = scmp lt i32 %107, i32 10;
    cbr i1 %108(prob = 0.89), ^indirect, ^b7;
^b7:
    call (i32) -> void @putch(i32 10);
    i32 %109 = load i32* %91;
    call (i32) -> void @putint(i32 %109);
    call (i32) -> void @putch(i32 10);
    i1 %110 = scmp lt i32 %102, i32 10;
    cbr i1 %110(prob = 0.97), ^super.header4, ^b8;
^super.header4:
    i32 %111 = phi [^b7, i32 %100] [^while.body, i32 %181];
    i32 %112 = phi [^b7, i32 %102] [^while.body, i32 %113];
    i32 %113 = add i32 %112, i32 16;
    i1 %114 = scmp lt i32 %113, i32 10;
    cbr i1 %114(prob = 0.67), ^while.body, ^super.header5;
^b8:
    i32 %115 = add i32 %98, i32 3;
    i32 %116 = mul i32 %115, i32 3;
    i1 %117 = scmp gt i32 %116, i32 -1;
    cbr i1 %117(prob = 0.97), ^while.body1, ^b9;
^while.body:
    i32* %118 = getelementptr &(i32* %97)[i32 %112];
    i32 %119 = mul i32 %111, i32 128875;
    i32 %120 = srem i32 %119, i32 3724;
    store i32* %118 with i32 %120;
    i32 %121 = add i32 %111, i32 7;
    i32* %122 = getelementptr &(i32* %118)[i64 1];
    i32 %123 = mul i32 %121, i32 128875;
    i32 %124 = srem i32 %123, i32 3724;
    store i32* %122 with i32 %124;
    i32 %125 = add i32 %111, i32 14;
    i32* %126 = getelementptr &(i32* %118)[i64 2];
    i32 %127 = mul i32 %125, i32 128875;
    i32 %128 = srem i32 %127, i32 3724;
    store i32* %126 with i32 %128;
    i32 %129 = add i32 %111, i32 21;
    i32* %130 = getelementptr &(i32* %118)[i64 3];
    i32 %131 = mul i32 %129, i32 128875;
    i32 %132 = srem i32 %131, i32 3724;
    store i32* %130 with i32 %132;
    i32 %133 = add i32 %111, i32 28;
    i32* %134 = getelementptr &(i32* %118)[i64 4];
    i32 %135 = mul i32 %133, i32 128875;
    i32 %136 = srem i32 %135, i32 3724;
    store i32* %134 with i32 %136;
    i32 %137 = add i32 %111, i32 35;
    i32* %138 = getelementptr &(i32* %118)[i64 5];
    i32 %139 = mul i32 %137, i32 128875;
    i32 %140 = srem i32 %139, i32 3724;
    store i32* %138 with i32 %140;
    i32 %141 = add i32 %111, i32 42;
    i32* %142 = getelementptr &(i32* %118)[i64 6];
    i32 %143 = mul i32 %141, i32 128875;
    i32 %144 = srem i32 %143, i32 3724;
    store i32* %142 with i32 %144;
    i32 %145 = add i32 %111, i32 49;
    i32* %146 = getelementptr &(i32* %118)[i64 7];
    i32 %147 = mul i32 %145, i32 128875;
    i32 %148 = srem i32 %147, i32 3724;
    store i32* %146 with i32 %148;
    i32 %149 = add i32 %111, i32 56;
    i32* %150 = getelementptr &(i32* %118)[i64 8];
    i32 %151 = mul i32 %149, i32 128875;
    i32 %152 = srem i32 %151, i32 3724;
    store i32* %150 with i32 %152;
    i32 %153 = add i32 %111, i32 63;
    i32* %154 = getelementptr &(i32* %118)[i64 9];
    i32 %155 = mul i32 %153, i32 128875;
    i32 %156 = srem i32 %155, i32 3724;
    store i32* %154 with i32 %156;
    i32 %157 = add i32 %111, i32 70;
    i32* %158 = getelementptr &(i32* %118)[i64 10];
    i32 %159 = mul i32 %157, i32 128875;
    i32 %160 = srem i32 %159, i32 3724;
    store i32* %158 with i32 %160;
    i32 %161 = add i32 %111, i32 77;
    i32* %162 = getelementptr &(i32* %118)[i64 11];
    i32 %163 = mul i32 %161, i32 128875;
    i32 %164 = srem i32 %163, i32 3724;
    store i32* %162 with i32 %164;
    i32 %165 = add i32 %111, i32 84;
    i32* %166 = getelementptr &(i32* %118)[i64 12];
    i32 %167 = mul i32 %165, i32 128875;
    i32 %168 = srem i32 %167, i32 3724;
    store i32* %166 with i32 %168;
    i32 %169 = add i32 %111, i32 91;
    i32* %170 = getelementptr &(i32* %118)[i64 13];
    i32 %171 = mul i32 %169, i32 128875;
    i32 %172 = srem i32 %171, i32 3724;
    store i32* %170 with i32 %172;
    i32 %173 = add i32 %111, i32 98;
    i32* %174 = getelementptr &(i32* %118)[i64 14];
    i32 %175 = mul i32 %173, i32 128875;
    i32 %176 = srem i32 %175, i32 3724;
    store i32* %174 with i32 %176;
    i32 %177 = add i32 %111, i32 105;
    i32* %178 = getelementptr &(i32* %118)[i64 15];
    i32 %179 = mul i32 %177, i32 128875;
    i32 %180 = srem i32 %179, i32 3724;
    store i32* %178 with i32 %180;
    i32 %181 = add i32 %111, i32 112;
    ubr ^super.header4;
^super.header5:
    i32 %182 = phi [^super.header4, i32 %111] [^while.body2, i32 %254];
    i32 %183 = phi [^super.header4, i32 %112] [^while.body2, i32 %184];
    i32 %184 = add i32 %183, i32 16;
    i1 %185 = scmp lt i32 %184, i32 10;
    cbr i1 %185(prob = 0.67), ^while.body2, ^while.body3;
^while.body1:
    i32 %186 = phi [^b8, i32 %116] [^while.body1, i32 %189];
    i32* %187 = getelementptr &([59 * i32]* %103)[i64 0][i32 %186];
    i32 %188 = load i32* %187;
    call (i32) -> void @putint(i32 %188);
    call (i32) -> void @putch(i32 32);
    i32 %189 = add i32 %186, i32 -1;
    i1 %190 = scmp gt i32 %189, i32 -1;
    cbr i1 %190(prob = 0.97), ^while.body1, ^b9;
^b9:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^while.body2:
    i32* %191 = getelementptr &(i32* %97)[i32 %183];
    i32 %192 = mul i32 %182, i32 128875;
    i32 %193 = srem i32 %192, i32 3724;
    store i32* %191 with i32 %193;
    i32 %194 = add i32 %182, i32 7;
    i32* %195 = getelementptr &(i32* %191)[i64 1];
    i32 %196 = mul i32 %194, i32 128875;
    i32 %197 = srem i32 %196, i32 3724;
    store i32* %195 with i32 %197;
    i32 %198 = add i32 %182, i32 14;
    i32* %199 = getelementptr &(i32* %191)[i64 2];
    i32 %200 = mul i32 %198, i32 128875;
    i32 %201 = srem i32 %200, i32 3724;
    store i32* %199 with i32 %201;
    i32 %202 = add i32 %182, i32 21;
    i32* %203 = getelementptr &(i32* %191)[i64 3];
    i32 %204 = mul i32 %202, i32 128875;
    i32 %205 = srem i32 %204, i32 3724;
    store i32* %203 with i32 %205;
    i32 %206 = add i32 %182, i32 28;
    i32* %207 = getelementptr &(i32* %191)[i64 4];
    i32 %208 = mul i32 %206, i32 128875;
    i32 %209 = srem i32 %208, i32 3724;
    store i32* %207 with i32 %209;
    i32 %210 = add i32 %182, i32 35;
    i32* %211 = getelementptr &(i32* %191)[i64 5];
    i32 %212 = mul i32 %210, i32 128875;
    i32 %213 = srem i32 %212, i32 3724;
    store i32* %211 with i32 %213;
    i32 %214 = add i32 %182, i32 42;
    i32* %215 = getelementptr &(i32* %191)[i64 6];
    i32 %216 = mul i32 %214, i32 128875;
    i32 %217 = srem i32 %216, i32 3724;
    store i32* %215 with i32 %217;
    i32 %218 = add i32 %182, i32 49;
    i32* %219 = getelementptr &(i32* %191)[i64 7];
    i32 %220 = mul i32 %218, i32 128875;
    i32 %221 = srem i32 %220, i32 3724;
    store i32* %219 with i32 %221;
    i32 %222 = add i32 %182, i32 56;
    i32* %223 = getelementptr &(i32* %191)[i64 8];
    i32 %224 = mul i32 %222, i32 128875;
    i32 %225 = srem i32 %224, i32 3724;
    store i32* %223 with i32 %225;
    i32 %226 = add i32 %182, i32 63;
    i32* %227 = getelementptr &(i32* %191)[i64 9];
    i32 %228 = mul i32 %226, i32 128875;
    i32 %229 = srem i32 %228, i32 3724;
    store i32* %227 with i32 %229;
    i32 %230 = add i32 %182, i32 70;
    i32* %231 = getelementptr &(i32* %191)[i64 10];
    i32 %232 = mul i32 %230, i32 128875;
    i32 %233 = srem i32 %232, i32 3724;
    store i32* %231 with i32 %233;
    i32 %234 = add i32 %182, i32 77;
    i32* %235 = getelementptr &(i32* %191)[i64 11];
    i32 %236 = mul i32 %234, i32 128875;
    i32 %237 = srem i32 %236, i32 3724;
    store i32* %235 with i32 %237;
    i32 %238 = add i32 %182, i32 84;
    i32* %239 = getelementptr &(i32* %191)[i64 12];
    i32 %240 = mul i32 %238, i32 128875;
    i32 %241 = srem i32 %240, i32 3724;
    store i32* %239 with i32 %241;
    i32 %242 = add i32 %182, i32 91;
    i32* %243 = getelementptr &(i32* %191)[i64 13];
    i32 %244 = mul i32 %242, i32 128875;
    i32 %245 = srem i32 %244, i32 3724;
    store i32* %243 with i32 %245;
    i32 %246 = add i32 %182, i32 98;
    i32* %247 = getelementptr &(i32* %191)[i64 14];
    i32 %248 = mul i32 %246, i32 128875;
    i32 %249 = srem i32 %248, i32 3724;
    store i32* %247 with i32 %249;
    i32 %250 = add i32 %182, i32 105;
    i32* %251 = getelementptr &(i32* %191)[i64 15];
    i32 %252 = mul i32 %250, i32 128875;
    i32 %253 = srem i32 %252, i32 3724;
    store i32* %251 with i32 %253;
    i32 %254 = add i32 %182, i32 112;
    ubr ^super.header5;
^while.body3:
    i32 %255 = phi [^super.header5, i32 %182] [^while.body3, i32 %261];
    i32 %256 = phi [^super.header5, i32 %183] [^while.body3, i32 %260];
    i32* %257 = getelementptr &(i32* %97)[i32 %256];
    i32 %258 = mul i32 %255, i32 128875;
    i32 %259 = srem i32 %258, i32 3724;
    store i32* %257 with i32 %259;
    i32 %260 = add i32 %256, i32 1;
    i32 %261 = add i32 %255, i32 7;
    i1 %262 = scmp lt i32 %260, i32 10;
    cbr i1 %262(prob = 0.97), ^while.body3, ^b8;
}
