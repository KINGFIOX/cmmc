internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @func(i32 %a, [59 * i32]* %b, i32 %c, i32* %d, i32 %e, i32 %f, i32* %g, i32 %h, i32 %i) -> i32 { NoRecurse } {
^entry:
    [59 * i32]* %0 = getelementptr &([59 * i32]* %b)[i32 %a];
    i32* %1 = getelementptr &([59 * i32]* %0)[i64 0][i64 0];
    i32 %2 = load i32* %1;
    call (i32) -> void @putint(i32 %2);
    ubr ^indirect;
^indirect:
    i32 %3 = phi [^entry, i32 1] [^indirect, i32 %6];
    i32* %4 = getelementptr &([59 * i32]* %0)[i64 0][i32 %3];
    i32 %5 = load i32* %4;
    call (i32) -> void @putint(i32 %5);
    i32 %6 = add i32 %3, i32 1;
    i1 %7 = scmp lt i32 %6, i32 10;
    cbr i1 %7(prob = 0.89), ^indirect, ^b1;
^b1:
    call (i32) -> void @putch(i32 10);
    i32* %8 = getelementptr &(i32* %d)[i32 %c];
    i32 %9 = load i32* %8;
    call (i32) -> void @putint(i32 %9);
    call (i32) -> void @putch(i32 10);
    i1 %10 = scmp lt i32 %i, i32 10;
    cbr i1 %10(prob = 0.97), ^super.header, ^b2;
^super.header:
    i32 %11 = phi [^b1, i32 %h] [^while.body, i32 %79];
    i32 %12 = phi [^b1, i32 %i] [^while.body, i32 %13];
    i32 %13 = add i32 %12, i32 16;
    i1 %14 = scmp lt i32 %13, i32 10;
    cbr i1 %14(prob = 0.67), ^while.body, ^while.body1;
^b2:
    i32 %15 = add i32 %e, i32 %f;
    ret i32 %15;
^while.body:
    i32* %16 = getelementptr &(i32* %g)[i32 %12];
    i32 %17 = mul i32 %11, i32 128875;
    i32 %18 = srem i32 %17, i32 3724;
    store i32* %16 with i32 %18;
    i32 %19 = add i32 %11, i32 7;
    i32* %20 = getelementptr &(i32* %16)[i64 1];
    i32 %21 = mul i32 %19, i32 128875;
    i32 %22 = srem i32 %21, i32 3724;
    store i32* %20 with i32 %22;
    i32 %23 = add i32 %11, i32 14;
    i32* %24 = getelementptr &(i32* %16)[i64 2];
    i32 %25 = mul i32 %23, i32 128875;
    i32 %26 = srem i32 %25, i32 3724;
    store i32* %24 with i32 %26;
    i32 %27 = add i32 %11, i32 21;
    i32* %28 = getelementptr &(i32* %16)[i64 3];
    i32 %29 = mul i32 %27, i32 128875;
    i32 %30 = srem i32 %29, i32 3724;
    store i32* %28 with i32 %30;
    i32 %31 = add i32 %11, i32 28;
    i32* %32 = getelementptr &(i32* %16)[i64 4];
    i32 %33 = mul i32 %31, i32 128875;
    i32 %34 = srem i32 %33, i32 3724;
    store i32* %32 with i32 %34;
    i32 %35 = add i32 %11, i32 35;
    i32* %36 = getelementptr &(i32* %16)[i64 5];
    i32 %37 = mul i32 %35, i32 128875;
    i32 %38 = srem i32 %37, i32 3724;
    store i32* %36 with i32 %38;
    i32 %39 = add i32 %11, i32 42;
    i32* %40 = getelementptr &(i32* %16)[i64 6];
    i32 %41 = mul i32 %39, i32 128875;
    i32 %42 = srem i32 %41, i32 3724;
    store i32* %40 with i32 %42;
    i32 %43 = add i32 %11, i32 49;
    i32* %44 = getelementptr &(i32* %16)[i64 7];
    i32 %45 = mul i32 %43, i32 128875;
    i32 %46 = srem i32 %45, i32 3724;
    store i32* %44 with i32 %46;
    i32 %47 = add i32 %11, i32 56;
    i32* %48 = getelementptr &(i32* %16)[i64 8];
    i32 %49 = mul i32 %47, i32 128875;
    i32 %50 = srem i32 %49, i32 3724;
    store i32* %48 with i32 %50;
    i32 %51 = add i32 %11, i32 63;
    i32* %52 = getelementptr &(i32* %16)[i64 9];
    i32 %53 = mul i32 %51, i32 128875;
    i32 %54 = srem i32 %53, i32 3724;
    store i32* %52 with i32 %54;
    i32 %55 = add i32 %11, i32 70;
    i32* %56 = getelementptr &(i32* %16)[i64 10];
    i32 %57 = mul i32 %55, i32 128875;
    i32 %58 = srem i32 %57, i32 3724;
    store i32* %56 with i32 %58;
    i32 %59 = add i32 %11, i32 77;
    i32* %60 = getelementptr &(i32* %16)[i64 11];
    i32 %61 = mul i32 %59, i32 128875;
    i32 %62 = srem i32 %61, i32 3724;
    store i32* %60 with i32 %62;
    i32 %63 = add i32 %11, i32 84;
    i32* %64 = getelementptr &(i32* %16)[i64 12];
    i32 %65 = mul i32 %63, i32 128875;
    i32 %66 = srem i32 %65, i32 3724;
    store i32* %64 with i32 %66;
    i32 %67 = add i32 %11, i32 91;
    i32* %68 = getelementptr &(i32* %16)[i64 13];
    i32 %69 = mul i32 %67, i32 128875;
    i32 %70 = srem i32 %69, i32 3724;
    store i32* %68 with i32 %70;
    i32 %71 = add i32 %11, i32 98;
    i32* %72 = getelementptr &(i32* %16)[i64 14];
    i32 %73 = mul i32 %71, i32 128875;
    i32 %74 = srem i32 %73, i32 3724;
    store i32* %72 with i32 %74;
    i32 %75 = add i32 %11, i32 105;
    i32* %76 = getelementptr &(i32* %16)[i64 15];
    i32 %77 = mul i32 %75, i32 128875;
    i32 %78 = srem i32 %77, i32 3724;
    store i32* %76 with i32 %78;
    i32 %79 = add i32 %11, i32 112;
    ubr ^super.header;
^while.body1:
    i32 %80 = phi [^super.header, i32 %11] [^while.body1, i32 %86];
    i32 %81 = phi [^super.header, i32 %12] [^while.body1, i32 %85];
    i32* %82 = getelementptr &(i32* %g)[i32 %81];
    i32 %83 = mul i32 %80, i32 128875;
    i32 %84 = srem i32 %83, i32 3724;
    store i32* %82 with i32 %84;
    i32 %85 = add i32 %81, i32 1;
    i32 %86 = add i32 %80, i32 7;
    i1 %87 = scmp lt i32 %85, i32 10;
    cbr i1 %87(prob = 0.97), ^while.body1, ^b2;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    [53 * [59 * i32]]* %b = alloc [53 * [59 * i32]];
    [61 * [67 * i32]]* %a = alloc [61 * [67 * i32]];
    i32* %0 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 0][i64 0];
    i8* %1 = ptrcast i32* %0 to i8*;
    call (i8*, i64) -> void @__cmmc_builtin_memset(i8* %1, i64 16348);
    i32* %2 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 0][i64 0];
    i8* %3 = ptrcast i32* %2 to i8*;
    call (i8*, i64) -> void @__cmmc_builtin_memset(i8* %3, i64 12508);
    i32* %4 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17][i64 1];
    store i32* %4 with i32 6;
    i32* %5 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17][i64 3];
    store i32* %5 with i32 7;
    i32* %6 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17][i64 4];
    store i32* %6 with i32 4;
    i32* %7 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17][i64 7];
    store i32* %7 with i32 9;
    i32* %8 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17][i64 11];
    store i32* %8 with i32 11;
    i32* %9 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 1];
    store i32* %9 with i32 1;
    i32* %10 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 2];
    store i32* %10 with i32 2;
    i32* %11 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 3];
    store i32* %11 with i32 3;
    i32* %12 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 9];
    store i32* %12 with i32 9;
    [59 * i32]* %13 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 0];
    i32* %14 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17][i64 0];
    i32* %15 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 0];
    i32 %16 = load i32* %15;
    i32* %17 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 34][i64 4];
    i32 %18 = load i32* %17;
    i32* %19 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 51][i64 18];
    i32 %20 = load i32* %19;
    i32 %21 = call (i32, [59 * i32]*, i32, i32*, i32, i32, i32*, i32, i32) -> i32 @func(i32 6, [59 * i32]* %13, i32 7, i32* %14, i32 3, i32 %16, i32* %15, i32 %18, i32 %20);
    i32 %22 = mul i32 %21, i32 3;
    [59 * i32]* %23 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6];
    i1 %24 = scmp gt i32 %22, i32 -1;
    cbr i1 %24(prob = 0.97), ^while.body, ^b1;
^while.body:
    i32 %25 = phi [^entry, i32 %22] [^while.body, i32 %28];
    i32* %26 = getelementptr &([59 * i32]* %23)[i64 0][i32 %25];
    i32 %27 = load i32* %26;
    call (i32) -> void @putint(i32 %27);
    call (i32) -> void @putch(i32 32);
    i32 %28 = add i32 %25, i32 -1;
    i1 %29 = scmp gt i32 %28, i32 -1;
    cbr i1 %29(prob = 0.97), ^while.body, ^b1;
^b1:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
internal func @__cmmc_builtin_memset(i8* %0, i64 %1) -> void { NoMemoryRead NoRecurse } {
^b:
    ubr ^b1;
^b1:
    i64 %2 = phi [^b, i64 0] [^b1, i64 %4];
    i8* %3 = getelementptr &(i8* %0)[i64 %2];
    store i8* %3 with i8 0;
    i64 %4 = add i64 %2, i64 1;
    i1 %5 = scmp lt i64 %4, i64 %1;
    cbr i1 %5(prob = 0.97), ^b1, ^b2;
^b2:
    ret;
}
