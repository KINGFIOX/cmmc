internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoRecurse Entry } {
^entry:
    i32* %e = alloc i32;
    i32* %f = alloc i32;
    i32* %h = alloc i32;
    i32* %i = alloc i32;
    [53 * [59 * i32]]* %b = alloc [53 * [59 * i32]];
    [61 * [67 * i32]]* %a = alloc [61 * [67 * i32]];
    i32* %0 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 0][i64 0];
    i8* %1 = ptrcast i32* %0 to i8*;
    i8* %2 = call (i8*, i32, i64) -> i8* @cmmc::Intrinsic::memset(i8* %1, i32 0, i64 16348);
    i32* %3 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 0][i64 0];
    i8* %4 = ptrcast i32* %3 to i8*;
    i8* %5 = call (i8*, i32, i64) -> i8* @cmmc::Intrinsic::memset(i8* %4, i32 0, i64 12508);
    i32* %6 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17][i64 7];
    store i32* %6 with i32 9;
    i32* %7 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 1];
    store i32* %7 with i32 1;
    i32* %8 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 2];
    store i32* %8 with i32 2;
    i32* %9 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 3];
    store i32* %9 with i32 3;
    i32* %10 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 9];
    store i32* %10 with i32 9;
    i32* %11 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 0];
    i32 %12 = load i32* %11;
    i32* %13 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 34][i64 4];
    i32 %14 = load i32* %13;
    i32* %15 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 51][i64 18];
    i32 %16 = load i32* %15;
    store i32* %e with i32 3;
    store i32* %f with i32 %12;
    store i32* %h with i32 %14;
    store i32* %i with i32 %16;
    [59 * i32]* %17 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6];
    ubr ^while.header;
^while.header:
    i32 %18 = phi [^while.body, i32 %22] [^entry, i32 0];
    i1 %19 = scmp lt i32 %18, i32 10;
    cbr i1 %19(prob = 0.97), ^while.body, ^b1;
^while.body:
    i32* %20 = getelementptr &([59 * i32]* %17)[i64 0][i32 %18];
    i32 %21 = load i32* %20;
    call (i32) -> void @putint(i32 %21);
    i32 %22 = add i32 %18, i32 1;
    ubr ^while.header;
^b1:
    call (i32) -> void @putch(i32 10);
    i32 %23 = load i32* %6;
    call (i32) -> void @putint(i32 %23);
    call (i32) -> void @putch(i32 10);
    ubr ^while.header1;
^while.header1:
    i32 %24 = phi [^while.body1, i32 %36] [^b1, i32 %16];
    i32 %25 = phi [^while.body1, i32 %37] [^b1, i32 %14];
    i32 %26 = phi [^while.body1, i32 %34] [^b1, i32 %12];
    i32 %27 = phi [^while.body1, i32 %35] [^b1, i32 3];
    i1 %28 = scmp lt i32 %24, i32 10;
    cbr i1 %28(prob = 0.97), ^while.body1, ^b2;
^while.body1:
    i32* %29 = getelementptr &(i32* %11)[i32 %24];
    i32 %30 = mul i32 %25, i32 128875;
    i32 %31 = srem i32 %30, i32 3724;
    store i32* %29 with i32 %31;
    i32 %32 = load i32* %i;
    i32 %33 = load i32* %h;
    i32 %34 = load i32* %f;
    i32 %35 = load i32* %e;
    i32 %36 = add i32 %32, i32 1;
    store i32* %i with i32 %36;
    i32 %37 = add i32 %33, i32 7;
    store i32* %h with i32 %37;
    ubr ^while.header1;
^b2:
    i32 %38 = add i32 %27, i32 %26;
    i32 %39 = mul i32 %38, i32 3;
    ubr ^while.header2;
^while.header2:
    i32 %40 = phi [^while.body2, i32 %44] [^b2, i32 %39];
    i1 %41 = scmp gt i32 %40, i32 -1;
    cbr i1 %41(prob = 0.97), ^while.body2, ^b3;
^while.body2:
    i32* %42 = getelementptr &([59 * i32]* %17)[i64 0][i32 %40];
    i32 %43 = load i32* %42;
    call (i32) -> void @putint(i32 %43);
    call (i32) -> void @putch(i32 32);
    i32 %44 = add i32 %40, i32 -1;
    ubr ^while.header2;
^b3:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
internal func @cmmc::Intrinsic::memset() -> i8* { NoMemoryRead };
