internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoRecurse Entry } {
^entry():
    [61 * [67 * i32]]* %a = alloc [61 * [67 * i32]];
    i32* %0 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 0][i64 0];
    i8* %1 = ptrcast i32* %0 to i8*;
    i8* %2 = call (i8*, i32, i64) -> i8* @cmmc::Intrinsic::memset(i8* %1, i32 0, i64 16348);
    [53 * [59 * i32]]* %b = alloc [53 * [59 * i32]];
    i32* %3 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 0][i64 0];
    i8* %4 = ptrcast i32* %3 to i8*;
    i8* %5 = call (i8*, i32, i64) -> i8* @cmmc::Intrinsic::memset(i8* %4, i32 0, i64 12508);
    i32* %6 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 1];
    store i32* %6 with i32 1;
    i32* %7 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 2];
    store i32* %7 with i32 2;
    i32* %8 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 3];
    store i32* %8 with i32 3;
    i32* %9 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 9];
    store i32* %9 with i32 9;
    i32* %10 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 0];
    i32 %11 = load i32* %10;
    i32* %12 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 34][i64 4];
    i32 %13 = load i32* %12;
    i32* %14 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 51][i64 18];
    i32 %15 = load i32* %14;
    i32* %e = alloc i32;
    store i32* %e with i32 3;
    i32* %f = alloc i32;
    store i32* %f with i32 %11;
    call (i32) -> void @putint(i32 %11);
    call (i32) -> void @putint(i32 1);
    call (i32) -> void @putint(i32 2);
    call (i32) -> void @putint(i32 3);
    i32* %16 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 4];
    i32 %17 = load i32* %16;
    call (i32) -> void @putint(i32 %17);
    i32* %18 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 5];
    i32 %19 = load i32* %18;
    call (i32) -> void @putint(i32 %19);
    i32* %20 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 6];
    i32 %21 = load i32* %20;
    call (i32) -> void @putint(i32 %21);
    i32* %22 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 7];
    i32 %23 = load i32* %22;
    call (i32) -> void @putint(i32 %23);
    i32* %24 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 8];
    i32 %25 = load i32* %24;
    call (i32) -> void @putint(i32 %25);
    call (i32) -> void @putint(i32 9);
    call (i32) -> void @putch(i32 10);
    call (i32) -> void @putint(i32 9);
    call (i32) -> void @putch(i32 10);
    i1 %26 = scmp lt i32 %15, i32 10;
    cbr i1 %26(prob = 0.97), [ ^while.body i32* %f, i32* %e, [53 * [59 * i32]]* %b, i32* %10, i32 %13, i32 %15, i32 %13, i32 %15, i32 3, i32 %11 ], [ ^b [53 * [59 * i32]]* %b, i32 3, i32 %11 ];
^while.body(i32* %arg, i32* %arg1, [53 * [59 * i32]]* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i32* %0 = getelementptr &(i32* %arg3)[i32 %arg5];
    i32 %1 = mul i32 %arg4, i32 128875;
    i32 %2 = srem i32 %1, i32 3724;
    store i32* %0 with i32 %2;
    i32 %3 = add i32 %arg7, i32 1;
    i32 %4 = add i32 %arg6, i32 7;
    i1 %5 = scmp lt i32 %3, i32 10;
    cbr i1 %5(prob = 0.97), [ ^indirect i32* %arg, i32* %arg1, [53 * [59 * i32]]* %arg2, i32* %arg3, i32 %4, i32 %3, i32 %4, i32 %3 ], [ ^b [53 * [59 * i32]]* %arg2, i32 %arg8, i32 %arg9 ];
^b([53 * [59 * i32]]* %arg, i32 %arg1, i32 %arg2):
    i32 %0 = add i32 %arg1, i32 %arg2;
    i32 %1 = mul i32 %0, i32 3;
    [59 * i32]* %2 = getelementptr &([53 * [59 * i32]]* %arg)[i64 0][i64 6];
    i1 %3 = scmp gt i32 %1, i32 -1;
    cbr i1 %3(prob = 0.97), [ ^super.header [59 * i32]* %2, i32 %1 ], [ ^b1 ];
^indirect(i32* %arg, i32* %arg1, [53 * [59 * i32]]* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i32 %0 = load i32* %arg;
    i32 %1 = load i32* %arg1;
    ubr [ ^while.body i32* %arg, i32* %arg1, [53 * [59 * i32]]* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %1, i32 %0 ];
^super.header([59 * i32]* %arg, i32 %arg1):
    i32 %0 = add i32 %arg1, i32 -15;
    i1 %1 = scmp gt i32 %0, i32 -1;
    cbr i1 %1(prob = 0.67), [ ^while.body1 [59 * i32]* %arg, i32 %arg1 ], [ ^while.body2 [59 * i32]* %arg, i32 %arg1 ];
^b1():
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^while.body1([59 * i32]* %arg, i32 %arg1):
    i32* %0 = getelementptr &([59 * i32]* %arg)[i64 0][i32 %arg1];
    i32 %1 = load i32* %0;
    call (i32) -> void @putint(i32 %1);
    call (i32) -> void @putch(i32 32);
    i32* %2 = getelementptr &(i32* %0)[i64 -1];
    i32 %3 = load i32* %2;
    call (i32) -> void @putint(i32 %3);
    call (i32) -> void @putch(i32 32);
    i32* %4 = getelementptr &(i32* %0)[i64 -2];
    i32 %5 = load i32* %4;
    call (i32) -> void @putint(i32 %5);
    call (i32) -> void @putch(i32 32);
    i32* %6 = getelementptr &(i32* %0)[i64 -3];
    i32 %7 = load i32* %6;
    call (i32) -> void @putint(i32 %7);
    call (i32) -> void @putch(i32 32);
    i32* %8 = getelementptr &(i32* %0)[i64 -4];
    i32 %9 = load i32* %8;
    call (i32) -> void @putint(i32 %9);
    call (i32) -> void @putch(i32 32);
    i32* %10 = getelementptr &(i32* %0)[i64 -5];
    i32 %11 = load i32* %10;
    call (i32) -> void @putint(i32 %11);
    call (i32) -> void @putch(i32 32);
    i32* %12 = getelementptr &(i32* %0)[i64 -6];
    i32 %13 = load i32* %12;
    call (i32) -> void @putint(i32 %13);
    call (i32) -> void @putch(i32 32);
    i32* %14 = getelementptr &(i32* %0)[i64 -7];
    i32 %15 = load i32* %14;
    call (i32) -> void @putint(i32 %15);
    call (i32) -> void @putch(i32 32);
    i32* %16 = getelementptr &(i32* %0)[i64 -8];
    i32 %17 = load i32* %16;
    call (i32) -> void @putint(i32 %17);
    call (i32) -> void @putch(i32 32);
    i32* %18 = getelementptr &(i32* %0)[i64 -9];
    i32 %19 = load i32* %18;
    call (i32) -> void @putint(i32 %19);
    call (i32) -> void @putch(i32 32);
    i32* %20 = getelementptr &(i32* %0)[i64 -10];
    i32 %21 = load i32* %20;
    call (i32) -> void @putint(i32 %21);
    call (i32) -> void @putch(i32 32);
    i32* %22 = getelementptr &(i32* %0)[i64 -11];
    i32 %23 = load i32* %22;
    call (i32) -> void @putint(i32 %23);
    call (i32) -> void @putch(i32 32);
    i32* %24 = getelementptr &(i32* %0)[i64 -12];
    i32 %25 = load i32* %24;
    call (i32) -> void @putint(i32 %25);
    call (i32) -> void @putch(i32 32);
    i32* %26 = getelementptr &(i32* %0)[i64 -13];
    i32 %27 = load i32* %26;
    call (i32) -> void @putint(i32 %27);
    call (i32) -> void @putch(i32 32);
    i32* %28 = getelementptr &(i32* %0)[i64 -14];
    i32 %29 = load i32* %28;
    call (i32) -> void @putint(i32 %29);
    call (i32) -> void @putch(i32 32);
    i32* %30 = getelementptr &(i32* %0)[i64 -15];
    i32 %31 = load i32* %30;
    call (i32) -> void @putint(i32 %31);
    call (i32) -> void @putch(i32 32);
    i32 %32 = add i32 %arg1, i32 -16;
    i1 %33 = scmp gt i32 %32, i32 -1;
    cbr i1 %33(prob = 0.97), [ ^super.header [59 * i32]* %arg, i32 %32 ], [ ^b1 ];
^while.body2([59 * i32]* %arg, i32 %arg1):
    i32* %0 = getelementptr &([59 * i32]* %arg)[i64 0][i32 %arg1];
    i32 %1 = load i32* %0;
    call (i32) -> void @putint(i32 %1);
    call (i32) -> void @putch(i32 32);
    i32 %2 = add i32 %arg1, i32 -1;
    i1 %3 = scmp gt i32 %2, i32 -1;
    cbr i1 %3(prob = 0.97), [ ^while.body2 [59 * i32]* %arg, i32 %2 ], [ ^b1 ];
}
internal func @cmmc::Intrinsic::memset(i8*, i32, i64) -> i8* { NoMemoryRead };
