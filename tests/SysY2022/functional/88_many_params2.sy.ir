internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [61 * [67 * i32]]* %0 = ptrcast [61 * [67 * i32]]* @a to [61 * [67 * i32]]*;
    i32* %1 = getelementptr &([61 * [67 * i32]]* %0)[i64 0][i64 0][i64 0];
    ubr ^super.header;
  ^super.header:
    i64 %2 = phi [^entry, i64 0] [^b, i64 %3];
    i64 %3 = add i64 %2, i64 4;
    i1 %4 = scmp lt i64 %3, i64 4087;
    cbr i1 %4(prob = 0.89), ^b, ^super.header1;
  ^b:
    i32* %5 = getelementptr &(i32* %1)[i64 %2];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &(i32* %5)[i64 1];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &(i32* %5)[i64 2];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &(i32* %5)[i64 3];
    store i32* %8 with i32 0;
    ubr ^super.header;
  ^super.header1:
    i64 %9 = phi [^super.header, i64 %2] [^b1, i64 %10];
    i64 %10 = add i64 %9, i64 4;
    i1 %11 = scmp lt i64 %10, i64 4087;
    cbr i1 %11(prob = 0.89), ^b1, ^super.header2;
  ^b1:
    i32* %12 = getelementptr &(i32* %1)[i64 %9];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &(i32* %12)[i64 1];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &(i32* %12)[i64 2];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &(i32* %12)[i64 3];
    store i32* %15 with i32 0;
    ubr ^super.header1;
  ^super.header2:
    i64 %16 = phi [^super.header1, i64 %9] [^b2, i64 %17];
    i64 %17 = add i64 %16, i64 4;
    i1 %18 = scmp lt i64 %17, i64 4087;
    cbr i1 %18(prob = 0.89), ^b2, ^b3;
  ^b2:
    i32* %19 = getelementptr &(i32* %1)[i64 %16];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &(i32* %19)[i64 1];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &(i32* %19)[i64 2];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &(i32* %19)[i64 3];
    store i32* %22 with i32 0;
    ubr ^super.header2;
  ^b3:
    i64 %23 = phi [^super.header2, i64 %16] [^b3, i64 %25];
    i32* %24 = getelementptr &(i32* %1)[i64 %23];
    store i32* %24 with i32 0;
    i64 %25 = add i64 %23, i64 1;
    i1 %26 = scmp lt i64 %25, i64 4087;
    cbr i1 %26(prob = 0.97), ^b3, ^entry1;
  ^entry1:
    [53 * [59 * i32]]* %27 = ptrcast [53 * [59 * i32]]* @b to [53 * [59 * i32]]*;
    i32* %28 = getelementptr &([53 * [59 * i32]]* %27)[i64 0][i64 0][i64 0];
    ubr ^super.header3;
  ^super.header3:
    i64 %29 = phi [^entry1, i64 0] [^b4, i64 %30];
    i64 %30 = add i64 %29, i64 4;
    i1 %31 = scmp lt i64 %30, i64 3127;
    cbr i1 %31(prob = 0.89), ^b4, ^super.header4;
  ^b4:
    i32* %32 = getelementptr &(i32* %28)[i64 %29];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &(i32* %32)[i64 1];
    store i32* %33 with i32 0;
    i32* %34 = getelementptr &(i32* %32)[i64 2];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &(i32* %32)[i64 3];
    store i32* %35 with i32 0;
    ubr ^super.header3;
  ^super.header4:
    i64 %36 = phi [^super.header3, i64 %29] [^b5, i64 %37];
    i64 %37 = add i64 %36, i64 4;
    i1 %38 = scmp lt i64 %37, i64 3127;
    cbr i1 %38(prob = 0.89), ^b5, ^super.header5;
  ^b5:
    i32* %39 = getelementptr &(i32* %28)[i64 %36];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &(i32* %39)[i64 1];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &(i32* %39)[i64 2];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &(i32* %39)[i64 3];
    store i32* %42 with i32 0;
    ubr ^super.header4;
  ^super.header5:
    i64 %43 = phi [^super.header4, i64 %36] [^b6, i64 %44];
    i64 %44 = add i64 %43, i64 4;
    i1 %45 = scmp lt i64 %44, i64 3127;
    cbr i1 %45(prob = 0.89), ^b6, ^b7;
  ^b6:
    i32* %46 = getelementptr &(i32* %28)[i64 %43];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &(i32* %46)[i64 1];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &(i32* %46)[i64 2];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &(i32* %46)[i64 3];
    store i32* %49 with i32 0;
    ubr ^super.header5;
  ^b7:
    i64 %50 = phi [^super.header5, i64 %43] [^b7, i64 %52];
    i32* %51 = getelementptr &(i32* %28)[i64 %50];
    store i32* %51 with i32 0;
    i64 %52 = add i64 %50, i64 1;
    i1 %53 = scmp lt i64 %52, i64 3127;
    cbr i1 %53(prob = 0.97), ^b7, ^entry2;
  ^entry2:
    i32* %54 = getelementptr &([61 * [67 * i32]]* %0)[i64 0][i64 17][i64 7];
    store i32* %54 with i32 9;
    i32* %55 = getelementptr &([53 * [59 * i32]]* %27)[i64 0][i64 6][i64 1];
    store i32* %55 with i32 1;
    i32* %56 = getelementptr &([53 * [59 * i32]]* %27)[i64 0][i64 6][i64 2];
    store i32* %56 with i32 2;
    i32* %57 = getelementptr &([53 * [59 * i32]]* %27)[i64 0][i64 6][i64 3];
    store i32* %57 with i32 3;
    i32* %58 = getelementptr &([53 * [59 * i32]]* %27)[i64 0][i64 6][i64 9];
    store i32* %58 with i32 9;
    i32* %59 = getelementptr &([53 * [59 * i32]]* %27)[i64 0][i64 6][i64 0];
    i32 %60 = load i32* %59;
    i32* %61 = getelementptr &([53 * [59 * i32]]* %27)[i64 0][i64 34][i64 4];
    i32 %62 = load i32* %61;
    i32* %63 = getelementptr &([53 * [59 * i32]]* %27)[i64 0][i64 51][i64 18];
    i32 %64 = load i32* %63;
    [59 * i32]* %65 = getelementptr &([53 * [59 * i32]]* %27)[i64 0][i64 6];
    ubr ^while.body;
  ^while.body:
    i32 %66 = phi [^entry2, i32 0] [^while.body, i32 %69];
    i32* %67 = getelementptr &([59 * i32]* %65)[i64 0][i32 %66];
    i32 %68 = load i32* %67;
    call (i32) -> void @putint(i32 %68);
    i32 %69 = add i32 %66, i32 1;
    i1 %70 = scmp lt i32 %69, i32 10;
    cbr i1 %70(prob = 0.9), ^while.body, ^b8;
  ^b8:
    call (i32) -> void @putch(i32 10);
    i32 %71 = load i32* %54;
    call (i32) -> void @putint(i32 %71);
    call (i32) -> void @putch(i32 10);
    i1 %72 = scmp lt i32 %64, i32 10;
    cbr i1 %72(prob = 0.97), ^super.header6, ^b9;
  ^super.header6:
    i32 %73 = phi [^b8, i32 %62] [^while.body1, i32 %95];
    i32 %74 = phi [^b8, i32 %64] [^while.body1, i32 %75];
    i32 %75 = add i32 %74, i32 4;
    i1 %76 = scmp lt i32 %75, i32 10;
    cbr i1 %76(prob = 0.89), ^while.body1, ^super.header7;
  ^b9:
    i32 %77 = add i32 %60, i32 3;
    i32 %78 = mul i32 %77, i32 3;
    i1 %79 = scmp gt i32 %78, i32 -1;
    cbr i1 %79(prob = 0.97), ^while.body2, ^b10;
  ^while.body1:
    i32* %80 = getelementptr &(i32* %59)[i32 %74];
    i32 %81 = mul i32 %73, i32 128875;
    i32 %82 = srem i32 %81, i32 3724;
    store i32* %80 with i32 %82;
    i32* %83 = getelementptr &(i32* %80)[i64 1];
    i32 %84 = add i32 %73, i32 7;
    i32 %85 = mul i32 %84, i32 128875;
    i32 %86 = srem i32 %85, i32 3724;
    store i32* %83 with i32 %86;
    i32* %87 = getelementptr &(i32* %80)[i64 2];
    i32 %88 = add i32 %73, i32 14;
    i32 %89 = mul i32 %88, i32 128875;
    i32 %90 = srem i32 %89, i32 3724;
    store i32* %87 with i32 %90;
    i32* %91 = getelementptr &(i32* %80)[i64 3];
    i32 %92 = add i32 %73, i32 21;
    i32 %93 = mul i32 %92, i32 128875;
    i32 %94 = srem i32 %93, i32 3724;
    store i32* %91 with i32 %94;
    i32 %95 = add i32 %73, i32 28;
    ubr ^super.header6;
  ^super.header7:
    i32 %96 = phi [^super.header6, i32 %73] [^while.body3, i32 %120];
    i32 %97 = phi [^super.header6, i32 %74] [^while.body3, i32 %98];
    i32 %98 = add i32 %97, i32 4;
    i1 %99 = scmp lt i32 %98, i32 10;
    cbr i1 %99(prob = 0.89), ^while.body3, ^super.header8;
  ^while.body2:
    i32 %100 = phi [^b9, i32 %78] [^while.body2, i32 %103];
    i32* %101 = getelementptr &([59 * i32]* %65)[i64 0][i32 %100];
    i32 %102 = load i32* %101;
    call (i32) -> void @putint(i32 %102);
    call (i32) -> void @putch(i32 32);
    i32 %103 = add i32 %100, i32 -1;
    i1 %104 = scmp gt i32 %103, i32 -1;
    cbr i1 %104(prob = 0.97), ^while.body2, ^b10;
  ^b10:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
  ^while.body3:
    i32* %105 = getelementptr &(i32* %59)[i32 %97];
    i32 %106 = mul i32 %96, i32 128875;
    i32 %107 = srem i32 %106, i32 3724;
    store i32* %105 with i32 %107;
    i32* %108 = getelementptr &(i32* %105)[i64 1];
    i32 %109 = add i32 %96, i32 7;
    i32 %110 = mul i32 %109, i32 128875;
    i32 %111 = srem i32 %110, i32 3724;
    store i32* %108 with i32 %111;
    i32* %112 = getelementptr &(i32* %105)[i64 2];
    i32 %113 = add i32 %96, i32 14;
    i32 %114 = mul i32 %113, i32 128875;
    i32 %115 = srem i32 %114, i32 3724;
    store i32* %112 with i32 %115;
    i32* %116 = getelementptr &(i32* %105)[i64 3];
    i32 %117 = add i32 %96, i32 21;
    i32 %118 = mul i32 %117, i32 128875;
    i32 %119 = srem i32 %118, i32 3724;
    store i32* %116 with i32 %119;
    i32 %120 = add i32 %96, i32 28;
    ubr ^super.header7;
  ^super.header8:
    i32 %121 = phi [^super.header7, i32 %96] [^while.body4, i32 %140];
    i32 %122 = phi [^super.header7, i32 %97] [^while.body4, i32 %123];
    i32 %123 = add i32 %122, i32 4;
    i1 %124 = scmp lt i32 %123, i32 10;
    cbr i1 %124(prob = 0.89), ^while.body4, ^while.body5;
  ^while.body4:
    i32* %125 = getelementptr &(i32* %59)[i32 %122];
    i32 %126 = mul i32 %121, i32 128875;
    i32 %127 = srem i32 %126, i32 3724;
    store i32* %125 with i32 %127;
    i32* %128 = getelementptr &(i32* %125)[i64 1];
    i32 %129 = add i32 %121, i32 7;
    i32 %130 = mul i32 %129, i32 128875;
    i32 %131 = srem i32 %130, i32 3724;
    store i32* %128 with i32 %131;
    i32* %132 = getelementptr &(i32* %125)[i64 2];
    i32 %133 = add i32 %121, i32 14;
    i32 %134 = mul i32 %133, i32 128875;
    i32 %135 = srem i32 %134, i32 3724;
    store i32* %132 with i32 %135;
    i32* %136 = getelementptr &(i32* %125)[i64 3];
    i32 %137 = add i32 %121, i32 21;
    i32 %138 = mul i32 %137, i32 128875;
    i32 %139 = srem i32 %138, i32 3724;
    store i32* %136 with i32 %139;
    i32 %140 = add i32 %121, i32 28;
    ubr ^super.header8;
  ^while.body5:
    i32 %141 = phi [^super.header8, i32 %121] [^while.body5, i32 %148];
    i32 %142 = phi [^super.header8, i32 %122] [^while.body5, i32 %146];
    i32* %143 = getelementptr &(i32* %59)[i32 %142];
    i32 %144 = mul i32 %141, i32 128875;
    i32 %145 = srem i32 %144, i32 3724;
    store i32* %143 with i32 %145;
    i32 %146 = add i32 %142, i32 1;
    i1 %147 = scmp lt i32 %146, i32 10;
    i32 %148 = add i32 %141, i32 7;
    cbr i1 %147(prob = 0.97), ^while.body5, ^b9;
}
internal [53 * [59 * i32]]* @b;
internal [61 * [67 * i32]]* @a;
