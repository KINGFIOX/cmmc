internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @func(i32 %a, [59 * i32]* %b, i32 %c, i32* %d, i32 %e, i32 %f, i32* %g, i32 %h, i32 %i) -> i32 { NoRecurse } {
^entry:
    [59 * i32]* %0 = getelementptr &([59 * i32]* %b)[i32 %a];
    ubr ^while.body;
^while.body:
    i32 %1 = phi [^entry, i32 0] [^while.body, i32 %4];
    i32* %2 = getelementptr &([59 * i32]* %0)[i64 0][i32 %1];
    i32 %3 = load i32* %2;
    call (i32) -> void @putint(i32 %3);
    i32 %4 = add i32 %1, i32 1;
    i1 %5 = scmp lt i32 %4, i32 10;
    cbr i1 %5(prob = 0.9), ^while.body, ^b1;
^b1:
    call (i32) -> void @putch(i32 10);
    i32* %6 = getelementptr &(i32* %d)[i32 %c];
    i32 %7 = load i32* %6;
    call (i32) -> void @putint(i32 %7);
    call (i32) -> void @putch(i32 10);
    i1 %8 = scmp lt i32 %i, i32 10;
    cbr i1 %8(prob = 0.97), ^super.header, ^b2;
^super.header:
    i32 %9 = phi [^b1, i32 %h] [^while.body1, i32 %77];
    i32 %10 = phi [^b1, i32 %i] [^while.body1, i32 %11];
    i32 %11 = add i32 %10, i32 16;
    i1 %12 = scmp lt i32 %11, i32 10;
    cbr i1 %12(prob = 0.67), ^while.body1, ^while.body2;
^b2:
    i32 %13 = add i32 %e, i32 %f;
    ret i32 %13;
^while.body1:
    i32* %14 = getelementptr &(i32* %g)[i32 %10];
    i32 %15 = mul i32 %9, i32 128875;
    i32 %16 = srem i32 %15, i32 3724;
    store i32* %14 with i32 %16;
    i32 %17 = add i32 %9, i32 7;
    i32* %18 = getelementptr &(i32* %14)[i64 1];
    i32 %19 = mul i32 %17, i32 128875;
    i32 %20 = srem i32 %19, i32 3724;
    store i32* %18 with i32 %20;
    i32 %21 = add i32 %9, i32 14;
    i32* %22 = getelementptr &(i32* %14)[i64 2];
    i32 %23 = mul i32 %21, i32 128875;
    i32 %24 = srem i32 %23, i32 3724;
    store i32* %22 with i32 %24;
    i32 %25 = add i32 %9, i32 21;
    i32* %26 = getelementptr &(i32* %14)[i64 3];
    i32 %27 = mul i32 %25, i32 128875;
    i32 %28 = srem i32 %27, i32 3724;
    store i32* %26 with i32 %28;
    i32 %29 = add i32 %9, i32 28;
    i32* %30 = getelementptr &(i32* %14)[i64 4];
    i32 %31 = mul i32 %29, i32 128875;
    i32 %32 = srem i32 %31, i32 3724;
    store i32* %30 with i32 %32;
    i32 %33 = add i32 %9, i32 35;
    i32* %34 = getelementptr &(i32* %14)[i64 5];
    i32 %35 = mul i32 %33, i32 128875;
    i32 %36 = srem i32 %35, i32 3724;
    store i32* %34 with i32 %36;
    i32 %37 = add i32 %9, i32 42;
    i32* %38 = getelementptr &(i32* %14)[i64 6];
    i32 %39 = mul i32 %37, i32 128875;
    i32 %40 = srem i32 %39, i32 3724;
    store i32* %38 with i32 %40;
    i32 %41 = add i32 %9, i32 49;
    i32* %42 = getelementptr &(i32* %14)[i64 7];
    i32 %43 = mul i32 %41, i32 128875;
    i32 %44 = srem i32 %43, i32 3724;
    store i32* %42 with i32 %44;
    i32 %45 = add i32 %9, i32 56;
    i32* %46 = getelementptr &(i32* %14)[i64 8];
    i32 %47 = mul i32 %45, i32 128875;
    i32 %48 = srem i32 %47, i32 3724;
    store i32* %46 with i32 %48;
    i32 %49 = add i32 %9, i32 63;
    i32* %50 = getelementptr &(i32* %14)[i64 9];
    i32 %51 = mul i32 %49, i32 128875;
    i32 %52 = srem i32 %51, i32 3724;
    store i32* %50 with i32 %52;
    i32 %53 = add i32 %9, i32 70;
    i32* %54 = getelementptr &(i32* %14)[i64 10];
    i32 %55 = mul i32 %53, i32 128875;
    i32 %56 = srem i32 %55, i32 3724;
    store i32* %54 with i32 %56;
    i32 %57 = add i32 %9, i32 77;
    i32* %58 = getelementptr &(i32* %14)[i64 11];
    i32 %59 = mul i32 %57, i32 128875;
    i32 %60 = srem i32 %59, i32 3724;
    store i32* %58 with i32 %60;
    i32 %61 = add i32 %9, i32 84;
    i32* %62 = getelementptr &(i32* %14)[i64 12];
    i32 %63 = mul i32 %61, i32 128875;
    i32 %64 = srem i32 %63, i32 3724;
    store i32* %62 with i32 %64;
    i32 %65 = add i32 %9, i32 91;
    i32* %66 = getelementptr &(i32* %14)[i64 13];
    i32 %67 = mul i32 %65, i32 128875;
    i32 %68 = srem i32 %67, i32 3724;
    store i32* %66 with i32 %68;
    i32 %69 = add i32 %9, i32 98;
    i32* %70 = getelementptr &(i32* %14)[i64 14];
    i32 %71 = mul i32 %69, i32 128875;
    i32 %72 = srem i32 %71, i32 3724;
    store i32* %70 with i32 %72;
    i32 %73 = add i32 %9, i32 105;
    i32* %74 = getelementptr &(i32* %14)[i64 15];
    i32 %75 = mul i32 %73, i32 128875;
    i32 %76 = srem i32 %75, i32 3724;
    store i32* %74 with i32 %76;
    i32 %77 = add i32 %9, i32 112;
    ubr ^super.header;
^while.body2:
    i32 %78 = phi [^super.header, i32 %9] [^while.body2, i32 %84];
    i32 %79 = phi [^super.header, i32 %10] [^while.body2, i32 %83];
    i32* %80 = getelementptr &(i32* %g)[i32 %79];
    i32 %81 = mul i32 %78, i32 128875;
    i32 %82 = srem i32 %81, i32 3724;
    store i32* %80 with i32 %82;
    i32 %83 = add i32 %79, i32 1;
    i32 %84 = add i32 %78, i32 7;
    i1 %85 = scmp lt i32 %83, i32 10;
    cbr i1 %85(prob = 0.97), ^while.body2, ^b2;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    [53 * [59 * i32]]* %b = alloc [53 * [59 * i32]];
    [61 * [67 * i32]]* %a = alloc [61 * [67 * i32]];
    i32* %0 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 0][i64 0];
    i8* %1 = ptrcast i32* %0 to i8*;
    call (i8*, i64) -> void @__cmmc_builtin_memset(i8* %1, i64 16348);
    i32* %2 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 0][i64 0];
    i8* %3 = ptrcast i32* %2 to i8*;
    call (i8*, i64) -> void @__cmmc_builtin_memset(i8* %3, i64 12508);
    i32* %4 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17][i64 1];
    store i32* %4 with i32 6;
    i32* %5 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17][i64 3];
    store i32* %5 with i32 7;
    i32* %6 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17][i64 4];
    store i32* %6 with i32 4;
    i32* %7 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17][i64 7];
    store i32* %7 with i32 9;
    i32* %8 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17][i64 11];
    store i32* %8 with i32 11;
    i32* %9 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 1];
    store i32* %9 with i32 1;
    i32* %10 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 2];
    store i32* %10 with i32 2;
    i32* %11 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 3];
    store i32* %11 with i32 3;
    i32* %12 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 9];
    store i32* %12 with i32 9;
    [59 * i32]* %13 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 0];
    i32* %14 = getelementptr &([61 * [67 * i32]]* %a)[i64 0][i64 17][i64 0];
    i32* %15 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6][i64 0];
    i32 %16 = load i32* %15;
    i32* %17 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 34][i64 4];
    i32 %18 = load i32* %17;
    i32* %19 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 51][i64 18];
    i32 %20 = load i32* %19;
    i32 %21 = call (i32, [59 * i32]*, i32, i32*, i32, i32, i32*, i32, i32) -> i32 @func(i32 6, [59 * i32]* %13, i32 7, i32* %14, i32 3, i32 %16, i32* %15, i32 %18, i32 %20);
    i32 %22 = mul i32 %21, i32 3;
    i1 %23 = scmp gt i32 %22, i32 -1;
    [59 * i32]* %24 = getelementptr &([53 * [59 * i32]]* %b)[i64 0][i64 6];
    cbr i1 %23(prob = 0.97), ^while.body, ^b1;
^while.body:
    i32 %25 = phi [^entry, i32 %22] [^while.body, i32 %28];
    i32* %26 = getelementptr &([59 * i32]* %24)[i64 0][i32 %25];
    i32 %27 = load i32* %26;
    call (i32) -> void @putint(i32 %27);
    call (i32) -> void @putch(i32 32);
    i32 %28 = add i32 %25, i32 -1;
    i1 %29 = scmp gt i32 %28, i32 -1;
    cbr i1 %29(prob = 0.97), ^while.body, ^b1;
^b1:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
internal func @__cmmc_builtin_memset(i8* %0, i64 %1) -> void { NoMemoryRead NoRecurse } {
^b:
    ubr ^b1;
^b1:
    i64 %2 = phi [^b, i64 0] [^b1, i64 %4];
    i8* %3 = getelementptr &(i8* %0)[i64 %2];
    store i8* %3 with i8 0;
    i64 %4 = add i64 %2, i64 1;
    i1 %5 = scmp lt i64 %4, i64 %1;
    cbr i1 %5(prob = 0.97), ^b1, ^b2;
^b2:
    ret;
}
