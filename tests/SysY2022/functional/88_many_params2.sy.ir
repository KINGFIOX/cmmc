internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoRecurse Entry } {
^entry():
    [61 * [67 * i32]]* %a = alloc [61 * [67 * i32]];
    i32* %0 = getelementptr &([61 * [67 * i32]]* %a)[i32 0][i32 0][i32 0];
    i8* %1 = ptrcast i32* %0 to i8*;
    i8* %2 = call (i8*, i32, i32) -> i8* @cmmc::Intrinsic::memset(i8* %1, i32 0, i32 16348);
    [53 * [59 * i32]]* %b = alloc [53 * [59 * i32]];
    i32* %3 = getelementptr &([53 * [59 * i32]]* %b)[i32 0][i32 0][i32 0];
    i8* %4 = ptrcast i32* %3 to i8*;
    i8* %5 = call (i8*, i32, i32) -> i8* @cmmc::Intrinsic::memset(i8* %4, i32 0, i32 12508);
    i32* %6 = getelementptr &([61 * [67 * i32]]* %a)[i32 0][i32 17][i32 1];
    store i32* %6 with i32 6;
    i32* %7 = getelementptr &([61 * [67 * i32]]* %a)[i32 0][i32 17][i32 3];
    store i32* %7 with i32 7;
    i32* %8 = getelementptr &([61 * [67 * i32]]* %a)[i32 0][i32 17][i32 4];
    store i32* %8 with i32 4;
    i32* %9 = getelementptr &([61 * [67 * i32]]* %a)[i32 0][i32 17][i32 7];
    store i32* %9 with i32 9;
    i32* %10 = getelementptr &([61 * [67 * i32]]* %a)[i32 0][i32 17][i32 11];
    store i32* %10 with i32 11;
    i32* %11 = getelementptr &([53 * [59 * i32]]* %b)[i32 0][i32 6][i32 1];
    store i32* %11 with i32 1;
    i32* %12 = getelementptr &([53 * [59 * i32]]* %b)[i32 0][i32 6][i32 2];
    store i32* %12 with i32 2;
    i32* %13 = getelementptr &([53 * [59 * i32]]* %b)[i32 0][i32 6][i32 3];
    store i32* %13 with i32 3;
    i32* %14 = getelementptr &([53 * [59 * i32]]* %b)[i32 0][i32 6][i32 9];
    store i32* %14 with i32 9;
    [59 * i32]* %15 = getelementptr &([53 * [59 * i32]]* %b)[i32 0][i32 0];
    i32* %16 = getelementptr &([61 * [67 * i32]]* %a)[i32 0][i32 17][i32 0];
    i32* %17 = getelementptr &([53 * [59 * i32]]* %b)[i32 0][i32 6][i32 0];
    i32 %18 = load i32* %17;
    i32* %19 = getelementptr &([53 * [59 * i32]]* %b)[i32 0][i32 34][i32 4];
    i32 %20 = load i32* %19;
    i32* %21 = getelementptr &([53 * [59 * i32]]* %b)[i32 0][i32 51][i32 18];
    i32 %22 = load i32* %21;
    i32* %e = alloc i32;
    store i32* %e with i32 3;
    i32* %f = alloc i32;
    store i32* %f with i32 %18;
    ubr [ ^while.body i32* %f, i32* %e, [53 * [59 * i32]]* %b, [59 * i32]* %15, i32* %16, i32 %18, i32* %17, i32 %20, i32 %22, i32 0 ];
^while.body(i32* %arg, i32* %arg1, [53 * [59 * i32]]* %arg2, [59 * i32]* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    [59 * i32]* %0 = getelementptr &([59 * i32]* %arg3)[i32 6];
    i32* %1 = getelementptr &([59 * i32]* %0)[i32 0][i32 %arg9];
    i32 %2 = load i32* %1;
    call (i32) -> void @putint(i32 %2);
    i32 %3 = add i32 %arg9, i32 1;
    i1 %4 = scmp lt i32 %3, i32 10;
    cbr i1 %4, [ ^while.body i32* %arg, i32* %arg1, [53 * [59 * i32]]* %arg2, [59 * i32]* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %3 ], [ ^b i32* %arg, i32* %arg1, [53 * [59 * i32]]* %arg2, i32* %arg4, i32 %arg5, i32* %arg6, i32 %arg7, i32 %arg8 ];
^b(i32* %arg, i32* %arg1, [53 * [59 * i32]]* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7):
    call (i32) -> void @putch(i32 10);
    i32* %0 = getelementptr &(i32* %arg3)[i32 7];
    i32 %1 = load i32* %0;
    call (i32) -> void @putint(i32 %1);
    call (i32) -> void @putch(i32 10);
    i1 %2 = scmp lt i32 %arg7, i32 10;
    cbr i1 %2, [ ^while.body1 i32* %arg, i32* %arg1, [53 * [59 * i32]]* %arg2, i32* %arg5, i32 %arg6, i32 %arg7 ], [ ^b1 [53 * [59 * i32]]* %arg2, i32 3, i32 %arg4 ];
^while.body1(i32* %arg, i32* %arg1, [53 * [59 * i32]]* %arg2, i32* %arg3, i32 %arg4, i32 %arg5):
    i32* %0 = getelementptr &(i32* %arg3)[i32 %arg5];
    i32 %1 = mul i32 %arg4, i32 128875;
    i32 %2 = srem i32 %1, i32 3724;
    store i32* %0 with i32 %2;
    i32 %3 = load i32* %arg;
    i32 %4 = load i32* %arg1;
    i32 %5 = add i32 %arg5, i32 1;
    i32 %6 = add i32 %arg4, i32 7;
    i1 %7 = scmp lt i32 %5, i32 10;
    cbr i1 %7, [ ^while.body1 i32* %arg, i32* %arg1, [53 * [59 * i32]]* %arg2, i32* %arg3, i32 %6, i32 %5 ], [ ^b1 [53 * [59 * i32]]* %arg2, i32 %4, i32 %3 ];
^b1([53 * [59 * i32]]* %arg, i32 %arg1, i32 %arg2):
    i32 %0 = add i32 %arg1, i32 %arg2;
    i32 %1 = mul i32 %0, i32 3;
    i1 %2 = scmp ge i32 %1, i32 0;
    cbr i1 %2, [ ^while.body2 [53 * [59 * i32]]* %arg, i32 %1 ], [ ^b2 ];
^while.body2([53 * [59 * i32]]* %arg, i32 %arg1):
    [59 * i32]* %0 = getelementptr &([53 * [59 * i32]]* %arg)[i32 0][i32 6];
    i32* %1 = getelementptr &([59 * i32]* %0)[i32 0][i32 %arg1];
    i32 %2 = load i32* %1;
    call (i32) -> void @putint(i32 %2);
    call (i32) -> void @putch(i32 32);
    i32 %3 = sub i32 %arg1, i32 1;
    i1 %4 = scmp ge i32 %3, i32 0;
    cbr i1 %4, [ ^while.body2 [53 * [59 * i32]]* %arg, i32 %3 ], [ ^b2 ];
^b2():
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
internal func @cmmc::Intrinsic::memset(i8*, i32, i32) -> i8* { NoMemoryRead };
