internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [61 * [67 * i32]]* %0 = ptrcast [61 * [67 * i32]]* @a to [61 * [67 * i32]]*;
    i32* %1 = getelementptr &([61 * [67 * i32]]* %0)[i64 0][i64 0][i64 0];
    ubr ^b;
  ^b:
    i64 %2 = phi [^entry, i64 0] [^b, i64 %9];
    i32* %3 = getelementptr &(i32* %1)[i64 %2];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &(i32* %3)[i64 1];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &(i32* %3)[i64 2];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &(i32* %3)[i64 3];
    store i32* %6 with i32 0;
    i64 %7 = add i64 %2, i64 8;
    i1 %8 = icmp slt i64 %7, i64 4087;
    i64 %9 = add i64 %2, i64 4;
    cbr i1 %8(prob = 0.89), ^b, ^b1;
  ^b1:
    i64 %10 = phi [^b, i64 %9] [^b1, i64 %12];
    i32* %11 = getelementptr &(i32* %1)[i64 %10];
    store i32* %11 with i32 0;
    i64 %12 = add i64 %10, i64 1;
    i1 %13 = icmp slt i64 %12, i64 4087;
    cbr i1 %13(prob = 0.75), ^b1, ^entry1;
  ^entry1:
    [53 * [59 * i32]]* %14 = ptrcast [53 * [59 * i32]]* @b to [53 * [59 * i32]]*;
    i32* %15 = getelementptr &([53 * [59 * i32]]* %14)[i64 0][i64 0][i64 0];
    ubr ^b2;
  ^b2:
    i64 %16 = phi [^entry1, i64 0] [^b2, i64 %23];
    i32* %17 = getelementptr &(i32* %15)[i64 %16];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &(i32* %17)[i64 1];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &(i32* %17)[i64 2];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &(i32* %17)[i64 3];
    store i32* %20 with i32 0;
    i64 %21 = add i64 %16, i64 8;
    i1 %22 = icmp slt i64 %21, i64 3127;
    i64 %23 = add i64 %16, i64 4;
    cbr i1 %22(prob = 0.89), ^b2, ^b3;
  ^b3:
    i64 %24 = phi [^b2, i64 %23] [^b3, i64 %26];
    i32* %25 = getelementptr &(i32* %15)[i64 %24];
    store i32* %25 with i32 0;
    i64 %26 = add i64 %24, i64 1;
    i1 %27 = icmp slt i64 %26, i64 3127;
    cbr i1 %27(prob = 0.75), ^b3, ^entry2;
  ^entry2:
    i32* %28 = getelementptr &([61 * [67 * i32]]* %0)[i64 0][i64 17][i64 7];
    store i32* %28 with i32 9;
    i32* %29 = getelementptr &([53 * [59 * i32]]* %14)[i64 0][i64 6][i64 1];
    store i32* %29 with i32 1;
    i32* %30 = getelementptr &([53 * [59 * i32]]* %14)[i64 0][i64 6][i64 2];
    store i32* %30 with i32 2;
    i32* %31 = getelementptr &([53 * [59 * i32]]* %14)[i64 0][i64 6][i64 3];
    store i32* %31 with i32 3;
    i32* %32 = getelementptr &([53 * [59 * i32]]* %14)[i64 0][i64 6][i64 9];
    store i32* %32 with i32 9;
    i32* %33 = getelementptr &([53 * [59 * i32]]* %14)[i64 0][i64 6][i64 0];
    i32 %34 = load i32* %33;
    i32* %35 = getelementptr &([53 * [59 * i32]]* %14)[i64 0][i64 34][i64 4];
    i32 %36 = load i32* %35;
    i32* %37 = getelementptr &([53 * [59 * i32]]* %14)[i64 0][i64 51][i64 18];
    i32 %38 = load i32* %37;
    [59 * i32]* %39 = getelementptr &([53 * [59 * i32]]* %14)[i64 0][i64 6];
    ubr ^while.body;
  ^while.body:
    i32 %40 = phi [^entry2, i32 0] [^while.body, i32 %43];
    i32* %41 = getelementptr &([59 * i32]* %39)[i64 0][i32 %40];
    i32 %42 = load i32* %41;
    call (i32) -> void @putint(i32 %42);
    i32 %43 = add i32 %40, i32 1;
    i1 %44 = icmp slt i32 %43, i32 10;
    cbr i1 %44(prob = 0.9), ^while.body, ^b4;
  ^b4:
    call (i32) -> void @putch(i32 10);
    i32 %45 = load i32* %28;
    call (i32) -> void @putint(i32 %45);
    call (i32) -> void @putch(i32 10);
    i1 %46 = icmp slt i32 %38, i32 10;
    cbr i1 %46(prob = 0.97), ^super.header, ^b5;
  ^super.header:
    i32 %47 = add i32 %38, i32 4;
    i1 %48 = icmp slt i32 %47, i32 10;
    cbr i1 %48(prob = 0.89), ^while.body1, ^while.body2;
  ^b5:
    i32 %49 = add i32 %34, i32 3;
    i32 %50 = mul i32 %49, i32 3;
    i1 %51 = icmp sgt i32 %50, i32 -1;
    cbr i1 %51(prob = 0.97), ^while.body3, ^b6;
  ^while.body1:
    i32 %52 = phi [^super.header, i32 %36] [^while.body1, i32 %72];
    i32 %53 = phi [^super.header, i32 %38] [^while.body1, i32 %71];
    i32* %54 = getelementptr &(i32* %33)[i32 %53];
    i32 %55 = mul i32 %52, i32 128875;
    i32 %56 = srem i32 %55, i32 3724;
    store i32* %54 with i32 %56;
    i32* %57 = getelementptr &(i32* %54)[i64 1];
    i32 %58 = add i32 %52, i32 7;
    i32 %59 = mul i32 %58, i32 128875;
    i32 %60 = srem i32 %59, i32 3724;
    store i32* %57 with i32 %60;
    i32* %61 = getelementptr &(i32* %54)[i64 2];
    i32 %62 = add i32 %52, i32 14;
    i32 %63 = mul i32 %62, i32 128875;
    i32 %64 = srem i32 %63, i32 3724;
    store i32* %61 with i32 %64;
    i32* %65 = getelementptr &(i32* %54)[i64 3];
    i32 %66 = add i32 %52, i32 21;
    i32 %67 = mul i32 %66, i32 128875;
    i32 %68 = srem i32 %67, i32 3724;
    store i32* %65 with i32 %68;
    i32 %69 = add i32 %53, i32 8;
    i1 %70 = icmp slt i32 %69, i32 10;
    i32 %71 = add i32 %53, i32 4;
    i32 %72 = add i32 %52, i32 28;
    cbr i1 %70(prob = 0.89), ^while.body1, ^while.body2;
  ^while.body2:
    i32 %73 = phi [^super.header, i32 %38] [^while.body1, i32 %71] [^while.body2, i32 %78];
    i32 %74 = phi [^super.header, i32 %36] [^while.body1, i32 %72] [^while.body2, i32 %80];
    i32* %75 = getelementptr &(i32* %33)[i32 %73];
    i32 %76 = mul i32 %74, i32 128875;
    i32 %77 = srem i32 %76, i32 3724;
    store i32* %75 with i32 %77;
    i32 %78 = add i32 %73, i32 1;
    i1 %79 = icmp slt i32 %78, i32 10;
    i32 %80 = add i32 %74, i32 7;
    cbr i1 %79(prob = 0.75), ^while.body2, ^b5;
  ^while.body3:
    i32 %81 = phi [^b5, i32 %50] [^while.body3, i32 %84];
    i32* %82 = getelementptr &([59 * i32]* %39)[i64 0][i32 %81];
    i32 %83 = load i32* %82;
    call (i32) -> void @putint(i32 %83);
    call (i32) -> void @putch(i32 32);
    i32 %84 = add i32 %81, i32 -1;
    i1 %85 = icmp sgt i32 %84, i32 -1;
    cbr i1 %85(prob = 0.97), ^while.body3, ^b6;
  ^b6:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
internal [53 * [59 * i32]]* @b { Flexible };
internal [61 * [67 * i32]]* @a { Flexible };
