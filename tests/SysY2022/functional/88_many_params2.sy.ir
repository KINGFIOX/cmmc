internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
  ^entry:
    [61 * [67 * i32]]* %0 = ptrcast [61 * [67 * i32]]* @a to [61 * [67 * i32]]*;
    i32* %1 = getelementptr &([61 * [67 * i32]]* %0)[i64 0][i64 0][i64 0];
    ubr ^super.header;
  ^super.header:
    i64 %2 = phi [^entry, i64 0] [^b, i64 %3];
    i64 %3 = add i64 %2, i64 4;
    i1 %4 = icmp slt i64 %3, i64 4087;
    cbr i1 %4(prob = 0.89), ^b, ^b1;
  ^b:
    i32* %5 = getelementptr &(i32* %1)[i64 %2];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &(i32* %5)[i64 1];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &(i32* %5)[i64 2];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &(i32* %5)[i64 3];
    store i32* %8 with i32 0;
    ubr ^super.header;
  ^b1:
    i64 %9 = phi [^super.header, i64 %2] [^b1, i64 %11];
    i32* %10 = getelementptr &(i32* %1)[i64 %9];
    store i32* %10 with i32 0;
    i64 %11 = add i64 %9, i64 1;
    i1 %12 = icmp slt i64 %11, i64 4087;
    cbr i1 %12(prob = 0.75), ^b1, ^entry1;
  ^entry1:
    [53 * [59 * i32]]* %13 = ptrcast [53 * [59 * i32]]* @b to [53 * [59 * i32]]*;
    i32* %14 = getelementptr &([53 * [59 * i32]]* %13)[i64 0][i64 0][i64 0];
    ubr ^super.header1;
  ^super.header1:
    i64 %15 = phi [^entry1, i64 0] [^b2, i64 %16];
    i64 %16 = add i64 %15, i64 4;
    i1 %17 = icmp slt i64 %16, i64 3127;
    cbr i1 %17(prob = 0.89), ^b2, ^b3;
  ^b2:
    i32* %18 = getelementptr &(i32* %14)[i64 %15];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &(i32* %18)[i64 1];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &(i32* %18)[i64 2];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &(i32* %18)[i64 3];
    store i32* %21 with i32 0;
    ubr ^super.header1;
  ^b3:
    i64 %22 = phi [^super.header1, i64 %15] [^b3, i64 %24];
    i32* %23 = getelementptr &(i32* %14)[i64 %22];
    store i32* %23 with i32 0;
    i64 %24 = add i64 %22, i64 1;
    i1 %25 = icmp slt i64 %24, i64 3127;
    cbr i1 %25(prob = 0.75), ^b3, ^entry2;
  ^entry2:
    i32* %26 = getelementptr &([61 * [67 * i32]]* %0)[i64 0][i64 17][i64 7];
    store i32* %26 with i32 9;
    i32* %27 = getelementptr &([53 * [59 * i32]]* %13)[i64 0][i64 6][i64 1];
    store i32* %27 with i32 1;
    i32* %28 = getelementptr &([53 * [59 * i32]]* %13)[i64 0][i64 6][i64 2];
    store i32* %28 with i32 2;
    i32* %29 = getelementptr &([53 * [59 * i32]]* %13)[i64 0][i64 6][i64 3];
    store i32* %29 with i32 3;
    i32* %30 = getelementptr &([53 * [59 * i32]]* %13)[i64 0][i64 6][i64 9];
    store i32* %30 with i32 9;
    i32* %31 = getelementptr &([53 * [59 * i32]]* %13)[i64 0][i64 6][i64 0];
    i32 %32 = load i32* %31;
    i32* %33 = getelementptr &([53 * [59 * i32]]* %13)[i64 0][i64 34][i64 4];
    i32 %34 = load i32* %33;
    i32* %35 = getelementptr &([53 * [59 * i32]]* %13)[i64 0][i64 51][i64 18];
    i32 %36 = load i32* %35;
    [59 * i32]* %37 = getelementptr &([53 * [59 * i32]]* %13)[i64 0][i64 6];
    ubr ^while.body;
  ^while.body:
    i32 %38 = phi [^entry2, i32 0] [^while.body, i32 %41];
    i32* %39 = getelementptr &([59 * i32]* %37)[i64 0][i32 %38];
    i32 %40 = load i32* %39;
    call (i32) -> void @putint(i32 %40);
    i32 %41 = add i32 %38, i32 1;
    i1 %42 = icmp slt i32 %41, i32 10;
    cbr i1 %42(prob = 0.9), ^while.body, ^b4;
  ^b4:
    call (i32) -> void @putch(i32 10);
    i32 %43 = load i32* %26;
    call (i32) -> void @putint(i32 %43);
    call (i32) -> void @putch(i32 10);
    i1 %44 = icmp slt i32 %36, i32 10;
    cbr i1 %44(prob = 0.97), ^super.header2, ^b5;
  ^super.header2:
    i32 %45 = phi [^b4, i32 %36] [^while.body1, i32 %47];
    i32 %46 = phi [^b4, i32 %34] [^while.body1, i32 %67];
    i32 %47 = add i32 %45, i32 4;
    i1 %48 = icmp slt i32 %47, i32 10;
    cbr i1 %48(prob = 0.89), ^while.body1, ^while.body2;
  ^b5:
    i32 %49 = add i32 %32, i32 3;
    i32 %50 = mul i32 %49, i32 3;
    i1 %51 = icmp sgt i32 %50, i32 -1;
    cbr i1 %51(prob = 0.97), ^while.body3, ^b6;
  ^while.body1:
    i32* %52 = getelementptr &(i32* %31)[i32 %45];
    i32 %53 = mul i32 %46, i32 128875;
    i32 %54 = srem i32 %53, i32 3724;
    store i32* %52 with i32 %54;
    i32* %55 = getelementptr &(i32* %52)[i64 1];
    i32 %56 = add i32 %46, i32 7;
    i32 %57 = mul i32 %56, i32 128875;
    i32 %58 = srem i32 %57, i32 3724;
    store i32* %55 with i32 %58;
    i32* %59 = getelementptr &(i32* %52)[i64 2];
    i32 %60 = add i32 %46, i32 14;
    i32 %61 = mul i32 %60, i32 128875;
    i32 %62 = srem i32 %61, i32 3724;
    store i32* %59 with i32 %62;
    i32* %63 = getelementptr &(i32* %52)[i64 3];
    i32 %64 = add i32 %46, i32 21;
    i32 %65 = mul i32 %64, i32 128875;
    i32 %66 = srem i32 %65, i32 3724;
    store i32* %63 with i32 %66;
    i32 %67 = add i32 %46, i32 28;
    ubr ^super.header2;
  ^while.body2:
    i32 %68 = phi [^super.header2, i32 %45] [^while.body2, i32 %73];
    i32 %69 = phi [^super.header2, i32 %46] [^while.body2, i32 %75];
    i32* %70 = getelementptr &(i32* %31)[i32 %68];
    i32 %71 = mul i32 %69, i32 128875;
    i32 %72 = srem i32 %71, i32 3724;
    store i32* %70 with i32 %72;
    i32 %73 = add i32 %68, i32 1;
    i1 %74 = icmp slt i32 %73, i32 10;
    i32 %75 = add i32 %69, i32 7;
    cbr i1 %74(prob = 0.75), ^while.body2, ^b5;
  ^while.body3:
    i32 %76 = phi [^b5, i32 %50] [^while.body3, i32 %79];
    i32* %77 = getelementptr &([59 * i32]* %37)[i64 0][i32 %76];
    i32 %78 = load i32* %77;
    call (i32) -> void @putint(i32 %78);
    call (i32) -> void @putch(i32 32);
    i32 %79 = add i32 %76, i32 -1;
    i1 %80 = icmp sgt i32 %79, i32 -1;
    cbr i1 %80(prob = 0.97), ^while.body3, ^b6;
  ^b6:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
internal [53 * [59 * i32]]* @b;
internal [61 * [67 * i32]]* @a;
