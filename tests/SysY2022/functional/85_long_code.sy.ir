internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @QuickSort(i32* %arr, i32 %low, i32 %high, i32* %0) -> i32 {
^entry:
    i32* %k = alloc i32;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    i32* %high1 = alloc i32;
    i32* %low1 = alloc i32;
    i32** %arr1 = alloc i32*;
    store i32** %arr1 with i32* %arr;
    store i32* %low1 with i32 %low;
    store i32* %high1 with i32 %high;
    i1 %1 = scmp lt i32 %low, i32 %high;
    cbr i1 %1(prob = 0.5), ^if.then, ^b;
^if.then:
    store i32* %i with i32 %low;
    store i32* %j with i32 %high;
    store i32* %k with i32 0;
    i32* %2 = getelementptr &(i32* %arr)[i32 %low];
    i32 %3 = load i32* %2;
    store i32* %k with i32 %3;
    ubr ^while.guard;
^b:
    ret i32 0;
^while.guard:
    i32 %4 = phi [^if.then, i32 %low] [^b11, i32 %53];
    i32 %5 = phi [^if.then, i32 %high] [^b11, i32 %54];
    i32 %6 = phi [^if.then, i32 %3] [^b11, i32 %55];
    i32 %7 = add i32 %6, i32 -1;
    i1 %8 = scmp lt i32 %4, i32 %5;
    cbr i1 %8(prob = 0.5), ^b1, ^b2;
^b1:
    i32* %9 = getelementptr &(i32* %arr)[i32 %5];
    i32 %10 = load i32* %9;
    i1 %11 = scmp gt i32 %10, i32 %7;
    ubr ^b2;
^b2:
    i1 %12 = phi [^while.guard, i1 false] [^b1, i1 %11];
    cbr i1 %12(prob = 0.97), ^while.body, ^b3;
^while.body:
    i32 %13 = phi [^b2, i32 %5] [^b5, i32 %14];
    i32 %14 = add i32 %13, i32 -1;
    store i32* %j with i32 %14;
    i1 %15 = scmp lt i32 %4, i32 %14;
    cbr i1 %15(prob = 0.5), ^b4, ^b5;
^b3:
    i32 %16 = phi [^b2, i32 %5] [^b5, i32 %14];
    i1 %17 = scmp lt i32 %4, i32 %16;
    cbr i1 %17(prob = 0.5), ^if.then1, ^while.guard1;
^b4:
    i32* %18 = getelementptr &(i32* %arr)[i32 %14];
    i32 %19 = load i32* %18;
    i1 %20 = scmp gt i32 %19, i32 %7;
    ubr ^b5;
^if.then1:
    i32* %21 = getelementptr &(i32* %arr)[i32 %4];
    i32* %22 = getelementptr &(i32* %arr)[i32 %16];
    i32 %23 = load i32* %22;
    store i32* %21 with i32 %23;
    i32 %24 = load i32* %i;
    i32 %25 = load i32* %j;
    i32 %26 = load i32* %k;
    i32 %27 = add i32 %24, i32 1;
    store i32* %i with i32 %27;
    ubr ^while.guard1;
^b5:
    i1 %28 = phi [^while.body, i1 false] [^b4, i1 %20];
    cbr i1 %28(prob = 0.97), ^while.body, ^b3;
^while.guard1:
    i32 %29 = phi [^b3, i32 %4] [^if.then1, i32 %27];
    i32 %30 = phi [^b3, i32 %16] [^if.then1, i32 %25];
    i32 %31 = phi [^b3, i32 %6] [^if.then1, i32 %26];
    i1 %32 = scmp lt i32 %29, i32 %30;
    cbr i1 %32(prob = 0.5), ^b6, ^b7;
^b6:
    i32* %33 = getelementptr &(i32* %arr)[i32 %29];
    i32 %34 = load i32* %33;
    i1 %35 = scmp lt i32 %34, i32 %31;
    ubr ^b7;
^b7:
    i1 %36 = phi [^while.guard1, i1 false] [^b6, i1 %35];
    cbr i1 %36(prob = 0.97), ^while.body1, ^b8;
^while.body1:
    i32 %37 = phi [^b7, i32 %29] [^b10, i32 %38];
    i32 %38 = add i32 %37, i32 1;
    store i32* %i with i32 %38;
    i1 %39 = scmp lt i32 %38, i32 %30;
    cbr i1 %39(prob = 0.5), ^b9, ^b10;
^b8:
    i32 %40 = phi [^b7, i32 %29] [^b10, i32 %38];
    i1 %41 = scmp lt i32 %40, i32 %30;
    cbr i1 %41(prob = 0.5), ^if.then2, ^b11;
^b9:
    i32* %42 = getelementptr &(i32* %arr)[i32 %38];
    i32 %43 = load i32* %42;
    i1 %44 = scmp lt i32 %43, i32 %31;
    ubr ^b10;
^if.then2:
    i32* %45 = getelementptr &(i32* %arr)[i32 %30];
    i32* %46 = getelementptr &(i32* %arr)[i32 %40];
    i32 %47 = load i32* %46;
    store i32* %45 with i32 %47;
    i32 %48 = load i32* %i;
    i32 %49 = load i32* %j;
    i32 %50 = load i32* %k;
    i32 %51 = add i32 %49, i32 -1;
    store i32* %j with i32 %51;
    ubr ^b11;
^b10:
    i1 %52 = phi [^while.body1, i1 false] [^b9, i1 %44];
    cbr i1 %52(prob = 0.97), ^while.body1, ^b8;
^b11:
    i32 %53 = phi [^b8, i32 %40] [^if.then2, i32 %48];
    i32 %54 = phi [^b8, i32 %30] [^if.then2, i32 %51];
    i32 %55 = phi [^b8, i32 %31] [^if.then2, i32 %50];
    i1 %56 = scmp lt i32 %53, i32 %54;
    cbr i1 %56(prob = 0.97), ^while.guard, ^indirect;
^indirect:
    i32* %57 = getelementptr &(i32* %arr)[i32 %53];
    store i32* %57 with i32 %55;
    i32 %58 = load i32* %low1;
    i32 %59 = load i32* %i;
    i32 %60 = add i32 %59, i32 -1;
    i32 %61 = call (i32*, i32, i32, i32*) -> i32 @QuickSort(i32* %arr, i32 %58, i32 %60, i32* %0);
    i32* %62 = load i32** %arr1;
    i32 %63 = load i32* %high1;
    i32 %64 = load i32* %i;
    i32 %65 = add i32 %64, i32 1;
    i32 %66 = call (i32*, i32, i32, i32*) -> i32 @QuickSort(i32* %62, i32 %65, i32 %63, i32* %0);
    ubr ^b;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %n = alloc i32;
    [1000 * i32]* %count = alloc [1000 * i32];
    i32* %i = alloc i32;
    [32 * i32]* %result = alloc [32 * i32];
    [32 * i32]* %arr = alloc [32 * i32];
    store i32* %n with i32 32;
    i32* %0 = getelementptr &([32 * i32]* %result)[i64 0][i64 0];
    i32* %1 = getelementptr &([32 * i32]* %arr)[i64 0][i64 0];
    store i32* %1 with i32 7;
    i32* %2 = getelementptr &([32 * i32]* %result)[i64 0][i64 1];
    i32* %3 = getelementptr &([32 * i32]* %arr)[i64 0][i64 1];
    store i32* %3 with i32 23;
    i32* %4 = getelementptr &([32 * i32]* %result)[i64 0][i64 2];
    i32* %5 = getelementptr &([32 * i32]* %arr)[i64 0][i64 2];
    store i32* %5 with i32 89;
    i32* %6 = getelementptr &([32 * i32]* %result)[i64 0][i64 3];
    i32* %7 = getelementptr &([32 * i32]* %arr)[i64 0][i64 3];
    store i32* %7 with i32 26;
    i32* %8 = getelementptr &([32 * i32]* %result)[i64 0][i64 4];
    i32* %9 = getelementptr &([32 * i32]* %arr)[i64 0][i64 4];
    store i32* %9 with i32 282;
    i32* %10 = getelementptr &([32 * i32]* %result)[i64 0][i64 5];
    i32* %11 = getelementptr &([32 * i32]* %arr)[i64 0][i64 5];
    store i32* %11 with i32 254;
    i32* %12 = getelementptr &([32 * i32]* %result)[i64 0][i64 6];
    i32* %13 = getelementptr &([32 * i32]* %arr)[i64 0][i64 6];
    store i32* %13 with i32 27;
    i32* %14 = getelementptr &([32 * i32]* %result)[i64 0][i64 7];
    i32* %15 = getelementptr &([32 * i32]* %arr)[i64 0][i64 7];
    store i32* %15 with i32 5;
    i32* %16 = getelementptr &([32 * i32]* %result)[i64 0][i64 8];
    i32* %17 = getelementptr &([32 * i32]* %arr)[i64 0][i64 8];
    store i32* %17 with i32 83;
    i32* %18 = getelementptr &([32 * i32]* %result)[i64 0][i64 9];
    i32* %19 = getelementptr &([32 * i32]* %arr)[i64 0][i64 9];
    store i32* %19 with i32 273;
    i32* %20 = getelementptr &([32 * i32]* %result)[i64 0][i64 10];
    i32* %21 = getelementptr &([32 * i32]* %arr)[i64 0][i64 10];
    store i32* %21 with i32 574;
    i32* %22 = getelementptr &([32 * i32]* %result)[i64 0][i64 11];
    i32* %23 = getelementptr &([32 * i32]* %arr)[i64 0][i64 11];
    store i32* %23 with i32 905;
    i32* %24 = getelementptr &([32 * i32]* %result)[i64 0][i64 12];
    i32* %25 = getelementptr &([32 * i32]* %arr)[i64 0][i64 12];
    store i32* %25 with i32 354;
    i32* %26 = getelementptr &([32 * i32]* %result)[i64 0][i64 13];
    i32* %27 = getelementptr &([32 * i32]* %arr)[i64 0][i64 13];
    store i32* %27 with i32 657;
    i32* %28 = getelementptr &([32 * i32]* %result)[i64 0][i64 14];
    i32* %29 = getelementptr &([32 * i32]* %arr)[i64 0][i64 14];
    store i32* %29 with i32 935;
    i32* %30 = getelementptr &([32 * i32]* %result)[i64 0][i64 15];
    i32* %31 = getelementptr &([32 * i32]* %arr)[i64 0][i64 15];
    store i32* %31 with i32 264;
    i32* %32 = getelementptr &([32 * i32]* %result)[i64 0][i64 16];
    i32* %33 = getelementptr &([32 * i32]* %arr)[i64 0][i64 16];
    store i32* %33 with i32 639;
    i32* %34 = getelementptr &([32 * i32]* %result)[i64 0][i64 17];
    i32* %35 = getelementptr &([32 * i32]* %arr)[i64 0][i64 17];
    store i32* %35 with i32 459;
    i32* %36 = getelementptr &([32 * i32]* %result)[i64 0][i64 18];
    i32* %37 = getelementptr &([32 * i32]* %arr)[i64 0][i64 18];
    store i32* %37 with i32 29;
    i32* %38 = getelementptr &([32 * i32]* %result)[i64 0][i64 19];
    i32* %39 = getelementptr &([32 * i32]* %arr)[i64 0][i64 19];
    store i32* %39 with i32 68;
    i32* %40 = getelementptr &([32 * i32]* %result)[i64 0][i64 20];
    i32* %41 = getelementptr &([32 * i32]* %arr)[i64 0][i64 20];
    store i32* %41 with i32 929;
    i32* %42 = getelementptr &([32 * i32]* %result)[i64 0][i64 21];
    i32* %43 = getelementptr &([32 * i32]* %arr)[i64 0][i64 21];
    store i32* %43 with i32 756;
    i32* %44 = getelementptr &([32 * i32]* %result)[i64 0][i64 22];
    i32* %45 = getelementptr &([32 * i32]* %arr)[i64 0][i64 22];
    store i32* %45 with i32 452;
    i32* %46 = getelementptr &([32 * i32]* %result)[i64 0][i64 23];
    i32* %47 = getelementptr &([32 * i32]* %arr)[i64 0][i64 23];
    store i32* %47 with i32 279;
    i32* %48 = getelementptr &([32 * i32]* %result)[i64 0][i64 24];
    i32* %49 = getelementptr &([32 * i32]* %arr)[i64 0][i64 24];
    store i32* %49 with i32 58;
    i32* %50 = getelementptr &([32 * i32]* %result)[i64 0][i64 25];
    i32* %51 = getelementptr &([32 * i32]* %arr)[i64 0][i64 25];
    store i32* %51 with i32 87;
    i32* %52 = getelementptr &([32 * i32]* %result)[i64 0][i64 26];
    i32* %53 = getelementptr &([32 * i32]* %arr)[i64 0][i64 26];
    store i32* %53 with i32 96;
    i32* %54 = getelementptr &([32 * i32]* %result)[i64 0][i64 27];
    i32* %55 = getelementptr &([32 * i32]* %arr)[i64 0][i64 27];
    store i32* %55 with i32 36;
    i32* %56 = getelementptr &([32 * i32]* %result)[i64 0][i64 28];
    i32* %57 = getelementptr &([32 * i32]* %arr)[i64 0][i64 28];
    store i32* %57 with i32 39;
    i32* %58 = getelementptr &([32 * i32]* %result)[i64 0][i64 29];
    i32* %59 = getelementptr &([32 * i32]* %arr)[i64 0][i64 29];
    store i32* %59 with i32 28;
    i32* %60 = getelementptr &([32 * i32]* %result)[i64 0][i64 30];
    i32* %61 = getelementptr &([32 * i32]* %arr)[i64 0][i64 30];
    store i32* %61 with i32 1;
    i32* %62 = getelementptr &([32 * i32]* %result)[i64 0][i64 31];
    i32* %63 = getelementptr &([32 * i32]* %arr)[i64 0][i64 31];
    store i32* %63 with i32 290;
    store i32* %0 with i32 7;
    store i32* %2 with i32 23;
    store i32* %4 with i32 89;
    store i32* %6 with i32 26;
    store i32* %8 with i32 282;
    store i32* %10 with i32 254;
    store i32* %12 with i32 27;
    store i32* %14 with i32 5;
    store i32* %16 with i32 83;
    store i32* %18 with i32 273;
    store i32* %20 with i32 574;
    store i32* %22 with i32 905;
    store i32* %24 with i32 354;
    store i32* %26 with i32 657;
    store i32* %28 with i32 935;
    store i32* %30 with i32 264;
    store i32* %32 with i32 639;
    store i32* %34 with i32 459;
    store i32* %36 with i32 29;
    store i32* %38 with i32 68;
    store i32* %40 with i32 929;
    store i32* %42 with i32 756;
    store i32* %44 with i32 452;
    store i32* %46 with i32 279;
    store i32* %48 with i32 58;
    store i32* %50 with i32 87;
    store i32* %52 with i32 96;
    store i32* %54 with i32 36;
    store i32* %56 with i32 39;
    store i32* %58 with i32 28;
    store i32* %60 with i32 1;
    store i32* %62 with i32 290;
    ubr ^while.body;
^while.body:
    i32 %64 = phi [^entry, i32 0] [^while.body, i32 %65];
    i32 %65 = add i32 %64, i32 1;
    i1 %66 = scmp lt i32 %65, i32 32;
    i32* %67 = getelementptr &([32 * i32]* %result)[i64 0][i32 %64];
    i32 %68 = load i32* %67;
    call (i32) -> void @putint(i32 %68);
    cbr i1 %66(prob = 0.97), ^while.body, ^while.body1;
^while.body1:
    i32 %69 = phi [^while.body, i32 0] [^b, i32 %81];
    i32 %70 = sub i32 32, i32 %69;
    i32 %71 = add i32 %70, i32 -1;
    i1 %72 = scmp gt i32 %71, i32 0;
    cbr i1 %72(prob = 0.97), ^while.body2, ^b;
^while.body2:
    i32 %73 = phi [^while.body1, i32 0] [^b1, i32 %87];
    i32 %74 = phi [^while.body1, i32 %69] [^b1, i32 %86];
    i32* %75 = getelementptr &(i32* %0)[i32 %73];
    i32 %76 = load i32* %75;
    i32* %77 = getelementptr &(i32* %75)[i64 1];
    i32 %78 = load i32* %77;
    i1 %79 = scmp gt i32 %76, i32 %78;
    cbr i1 %79(prob = 0.5), ^if.then, ^b1;
^b:
    i32 %80 = phi [^while.body1, i32 %69] [^b1, i32 %86];
    i32 %81 = add i32 %80, i32 1;
    i1 %82 = scmp lt i32 %81, i32 31;
    cbr i1 %82(prob = 0.97), ^while.body1, ^while.body3;
^if.then:
    i32 %83 = add i32 %73, i32 1;
    i32* %84 = getelementptr &(i32* %0)[i32 %83];
    i32 %85 = load i32* %84;
    store i32* %77 with i32 %76;
    store i32* %75 with i32 %85;
    ubr ^b1;
^b1:
    i32 %86 = phi [^while.body2, i32 %74] [^if.then, i32 %69];
    i32 %87 = add i32 %73, i32 1;
    i32 %88 = sub i32 32, i32 %86;
    i32 %89 = add i32 %88, i32 -1;
    i1 %90 = scmp lt i32 %87, i32 %89;
    cbr i1 %90(prob = 0.97), ^while.body2, ^b;
^while.body3:
    i32 %91 = phi [^b, i32 0] [^while.body3, i32 %92];
    i32 %92 = add i32 %91, i32 1;
    i1 %93 = scmp lt i32 %92, i32 32;
    i32* %94 = getelementptr &([32 * i32]* %result)[i64 0][i32 %91];
    i32 %95 = load i32* %94;
    call (i32) -> void @putint(i32 %95);
    store i32* %i with i32 %92;
    cbr i1 %93(prob = 0.97), ^while.body3, ^if.then1;
^if.then1:
    i32 %96 = load i32* %32;
    i32 %97 = load i32* %30;
    i32 %98 = add i32 %96, i32 %97;
    i32 %99 = sdiv i32 %98, i32 2;
    call (i32) -> void @putint(i32 %99);
    ubr ^while.body4;
^while.body4:
    i32 %100 = phi [^if.then1, i32 0] [^while.body4, i32 %101];
    i32 %101 = add i32 %100, i32 16;
    i1 %102 = scmp lt i32 %101, i32 992;
    i32* %103 = getelementptr &([1000 * i32]* %count)[i64 0][i32 %100];
    store i32* %103 with i32 0;
    i32* %104 = getelementptr &(i32* %103)[i64 1];
    store i32* %104 with i32 0;
    i32* %105 = getelementptr &(i32* %103)[i64 2];
    store i32* %105 with i32 0;
    i32* %106 = getelementptr &(i32* %103)[i64 3];
    store i32* %106 with i32 0;
    i32* %107 = getelementptr &(i32* %103)[i64 4];
    store i32* %107 with i32 0;
    i32* %108 = getelementptr &(i32* %103)[i64 5];
    store i32* %108 with i32 0;
    i32* %109 = getelementptr &(i32* %103)[i64 6];
    store i32* %109 with i32 0;
    i32* %110 = getelementptr &(i32* %103)[i64 7];
    store i32* %110 with i32 0;
    i32* %111 = getelementptr &(i32* %103)[i64 8];
    store i32* %111 with i32 0;
    i32* %112 = getelementptr &(i32* %103)[i64 9];
    store i32* %112 with i32 0;
    i32* %113 = getelementptr &(i32* %103)[i64 10];
    store i32* %113 with i32 0;
    i32* %114 = getelementptr &(i32* %103)[i64 11];
    store i32* %114 with i32 0;
    i32* %115 = getelementptr &(i32* %103)[i64 12];
    store i32* %115 with i32 0;
    i32* %116 = getelementptr &(i32* %103)[i64 13];
    store i32* %116 with i32 0;
    i32* %117 = getelementptr &(i32* %103)[i64 14];
    store i32* %117 with i32 0;
    i32* %118 = getelementptr &(i32* %103)[i64 15];
    store i32* %118 with i32 0;
    cbr i1 %102(prob = 0.98), ^while.body4, ^while.body5;
^while.body5:
    i32* %119 = getelementptr &([1000 * i32]* %count)[i64 0][i32 %101];
    store i32* %119 with i32 0;
    i32* %120 = getelementptr &(i32* %119)[i64 1];
    store i32* %120 with i32 0;
    i32* %121 = getelementptr &(i32* %119)[i64 2];
    store i32* %121 with i32 0;
    i32* %122 = getelementptr &(i32* %119)[i64 3];
    store i32* %122 with i32 0;
    i32* %123 = getelementptr &(i32* %119)[i64 4];
    store i32* %123 with i32 0;
    i32* %124 = getelementptr &(i32* %119)[i64 5];
    store i32* %124 with i32 0;
    i32* %125 = getelementptr &(i32* %119)[i64 6];
    store i32* %125 with i32 0;
    i32* %126 = getelementptr &(i32* %119)[i64 7];
    store i32* %126 with i32 0;
    ubr ^while.body6;
^while.body6:
    i32 %127 = phi [^while.body5, i32 0] [^b2, i32 %138];
    i32 %128 = phi [^while.body5, i32 0] [^b2, i32 %136];
    i32 %129 = phi [^while.body5, i32 0] [^b2, i32 %137];
    i32* %130 = getelementptr &(i32* %0)[i32 %127];
    i32 %131 = load i32* %130;
    i32* %132 = getelementptr &([1000 * i32]* %count)[i64 0][i32 %131];
    i32 %133 = load i32* %132;
    i32 %134 = add i32 %133, i32 1;
    store i32* %132 with i32 %134;
    i1 %135 = scmp gt i32 %134, i32 %128;
    cbr i1 %135(prob = 0.5), ^if.then2, ^b2;
^if.then2:
    ubr ^b2;
^b2:
    i32 %136 = phi [^while.body6, i32 %128] [^if.then2, i32 %134];
    i32 %137 = phi [^while.body6, i32 %129] [^if.then2, i32 %131];
    i32 %138 = add i32 %127, i32 1;
    i1 %139 = scmp lt i32 %138, i32 32;
    cbr i1 %139(prob = 0.97), ^while.body6, ^b3;
^b3:
    call (i32) -> void @putint(i32 %137);
    i32 %140 = load i32* %1;
    store i32* %0 with i32 %140;
    i32 %141 = load i32* %3;
    store i32* %2 with i32 %141;
    i32 %142 = load i32* %5;
    store i32* %4 with i32 %142;
    i32 %143 = load i32* %7;
    store i32* %6 with i32 %143;
    i32 %144 = load i32* %9;
    store i32* %8 with i32 %144;
    i32 %145 = load i32* %11;
    store i32* %10 with i32 %145;
    i32 %146 = load i32* %13;
    store i32* %12 with i32 %146;
    i32 %147 = load i32* %15;
    store i32* %14 with i32 %147;
    i32 %148 = load i32* %17;
    store i32* %16 with i32 %148;
    i32 %149 = load i32* %19;
    store i32* %18 with i32 %149;
    i32 %150 = load i32* %21;
    store i32* %20 with i32 %150;
    i32 %151 = load i32* %23;
    store i32* %22 with i32 %151;
    i32 %152 = load i32* %25;
    store i32* %24 with i32 %152;
    i32 %153 = load i32* %27;
    store i32* %26 with i32 %153;
    i32 %154 = load i32* %29;
    store i32* %28 with i32 %154;
    i32 %155 = load i32* %31;
    store i32* %30 with i32 %155;
    i32 %156 = load i32* %33;
    store i32* %32 with i32 %156;
    i32 %157 = load i32* %35;
    store i32* %34 with i32 %157;
    i32 %158 = load i32* %37;
    store i32* %36 with i32 %158;
    i32 %159 = load i32* %39;
    store i32* %38 with i32 %159;
    i32 %160 = load i32* %41;
    store i32* %40 with i32 %160;
    i32 %161 = load i32* %43;
    store i32* %42 with i32 %161;
    i32 %162 = load i32* %45;
    store i32* %44 with i32 %162;
    i32 %163 = load i32* %47;
    store i32* %46 with i32 %163;
    i32 %164 = load i32* %49;
    store i32* %48 with i32 %164;
    i32 %165 = load i32* %51;
    store i32* %50 with i32 %165;
    i32 %166 = load i32* %53;
    store i32* %52 with i32 %166;
    i32 %167 = load i32* %55;
    store i32* %54 with i32 %167;
    i32 %168 = load i32* %57;
    store i32* %56 with i32 %168;
    i32 %169 = load i32* %59;
    store i32* %58 with i32 %169;
    i32 %170 = load i32* %61;
    store i32* %60 with i32 %170;
    i32 %171 = load i32* %63;
    store i32* %62 with i32 %171;
    ubr ^while.body7;
^while.body7:
    i32 %172 = phi [^b3, i32 0] [^b4, i32 %184];
    i32 %173 = sub i32 32, i32 %172;
    i32 %174 = add i32 %173, i32 -1;
    i1 %175 = scmp gt i32 %174, i32 0;
    cbr i1 %175(prob = 0.97), ^while.body8, ^b4;
^while.body8:
    i32 %176 = phi [^while.body7, i32 0] [^b5, i32 %190];
    i32 %177 = phi [^while.body7, i32 %172] [^b5, i32 %189];
    i32* %178 = getelementptr &(i32* %0)[i32 %176];
    i32 %179 = load i32* %178;
    i32* %180 = getelementptr &(i32* %178)[i64 1];
    i32 %181 = load i32* %180;
    i1 %182 = scmp gt i32 %179, i32 %181;
    cbr i1 %182(prob = 0.5), ^if.then3, ^b5;
^b4:
    i32 %183 = phi [^while.body7, i32 %172] [^b5, i32 %189];
    i32 %184 = add i32 %183, i32 1;
    i1 %185 = scmp lt i32 %184, i32 31;
    cbr i1 %185(prob = 0.97), ^while.body7, ^while.body9;
^if.then3:
    i32 %186 = add i32 %176, i32 1;
    i32* %187 = getelementptr &(i32* %0)[i32 %186];
    i32 %188 = load i32* %187;
    store i32* %180 with i32 %179;
    store i32* %178 with i32 %188;
    ubr ^b5;
^b5:
    i32 %189 = phi [^while.body8, i32 %177] [^if.then3, i32 %172];
    i32 %190 = add i32 %176, i32 1;
    i32 %191 = sub i32 32, i32 %189;
    i32 %192 = add i32 %191, i32 -1;
    i1 %193 = scmp lt i32 %190, i32 %192;
    cbr i1 %193(prob = 0.97), ^while.body8, ^b4;
^while.body9:
    i32 %194 = phi [^b4, i32 0] [^while.body9, i32 %195];
    i32 %195 = add i32 %194, i32 1;
    i1 %196 = scmp lt i32 %195, i32 32;
    i32* %197 = getelementptr &([32 * i32]* %result)[i64 0][i32 %194];
    i32 %198 = load i32* %197;
    call (i32) -> void @putint(i32 %198);
    cbr i1 %196(prob = 0.97), ^while.body9, ^while.body10;
^while.body10:
    i32 %199 = load i32* %1;
    store i32* %0 with i32 %199;
    i32 %200 = load i32* %3;
    store i32* %2 with i32 %200;
    i32 %201 = load i32* %5;
    store i32* %4 with i32 %201;
    i32 %202 = load i32* %7;
    store i32* %6 with i32 %202;
    i32 %203 = load i32* %9;
    store i32* %8 with i32 %203;
    i32 %204 = load i32* %11;
    store i32* %10 with i32 %204;
    i32 %205 = load i32* %13;
    store i32* %12 with i32 %205;
    i32 %206 = load i32* %15;
    store i32* %14 with i32 %206;
    i32 %207 = load i32* %17;
    store i32* %16 with i32 %207;
    i32 %208 = load i32* %19;
    store i32* %18 with i32 %208;
    i32 %209 = load i32* %21;
    store i32* %20 with i32 %209;
    i32 %210 = load i32* %23;
    store i32* %22 with i32 %210;
    i32 %211 = load i32* %25;
    store i32* %24 with i32 %211;
    i32 %212 = load i32* %27;
    store i32* %26 with i32 %212;
    i32 %213 = load i32* %29;
    store i32* %28 with i32 %213;
    i32 %214 = load i32* %31;
    store i32* %30 with i32 %214;
    i32 %215 = load i32* %33;
    store i32* %32 with i32 %215;
    i32 %216 = load i32* %35;
    store i32* %34 with i32 %216;
    i32 %217 = load i32* %37;
    store i32* %36 with i32 %217;
    i32 %218 = load i32* %39;
    store i32* %38 with i32 %218;
    i32 %219 = load i32* %41;
    store i32* %40 with i32 %219;
    i32 %220 = load i32* %43;
    store i32* %42 with i32 %220;
    i32 %221 = load i32* %45;
    store i32* %44 with i32 %221;
    i32 %222 = load i32* %47;
    store i32* %46 with i32 %222;
    i32 %223 = load i32* %49;
    store i32* %48 with i32 %223;
    i32 %224 = load i32* %51;
    store i32* %50 with i32 %224;
    i32 %225 = load i32* %53;
    store i32* %52 with i32 %225;
    i32 %226 = load i32* %55;
    store i32* %54 with i32 %226;
    i32 %227 = load i32* %57;
    store i32* %56 with i32 %227;
    i32 %228 = load i32* %59;
    store i32* %58 with i32 %228;
    i32 %229 = load i32* %61;
    store i32* %60 with i32 %229;
    i32 %230 = load i32* %63;
    store i32* %62 with i32 %230;
    ubr ^while.body11;
^while.body11:
    i32 %231 = phi [^while.body10, i32 1] [^b8, i32 %247];
    i32 %232 = add i32 %231, i32 -1;
    i1 %233 = scmp gt i32 %232, i32 -1;
    i32* %234 = getelementptr &(i32* %0)[i32 %231];
    i32 %235 = load i32* %234;
    cbr i1 %233(prob = 0.5), ^b6, ^b7;
^b6:
    i32* %236 = getelementptr &(i32* %0)[i32 %232];
    i32 %237 = load i32* %236;
    i1 %238 = scmp lt i32 %235, i32 %237;
    ubr ^b7;
^b7:
    i1 %239 = phi [^while.body11, i1 false] [^b6, i1 %238];
    cbr i1 %239(prob = 0.97), ^while.body12, ^b8;
^while.body12:
    i32 %240 = phi [^b7, i32 %232] [^b10, i32 %241];
    i32 %241 = add i32 %240, i32 -1;
    i1 %242 = scmp gt i32 %241, i32 -1;
    i32* %243 = getelementptr &(i32* %0)[i32 %240];
    i32 %244 = load i32* %243;
    i32* %245 = getelementptr &(i32* %243)[i64 1];
    store i32* %245 with i32 %244;
    cbr i1 %242(prob = 0.5), ^b9, ^b10;
^b8:
    i32 %246 = phi [^b7, i32 %232] [^b10, i32 %241];
    i32 %247 = add i32 %231, i32 1;
    i32 %248 = add i32 %246, i32 1;
    i1 %249 = scmp lt i32 %247, i32 32;
    i32* %250 = getelementptr &(i32* %0)[i32 %248];
    store i32* %250 with i32 %235;
    cbr i1 %249(prob = 0.97), ^while.body11, ^while.body13;
^b9:
    i32* %251 = getelementptr &(i32* %0)[i32 %241];
    i32 %252 = load i32* %251;
    i1 %253 = scmp lt i32 %235, i32 %252;
    ubr ^b10;
^b10:
    i1 %254 = phi [^while.body12, i1 false] [^b9, i1 %253];
    cbr i1 %254(prob = 0.97), ^while.body12, ^b8;
^while.body13:
    i32 %255 = phi [^b8, i32 0] [^while.body13, i32 %256];
    i32 %256 = add i32 %255, i32 1;
    i1 %257 = scmp lt i32 %256, i32 32;
    i32* %258 = getelementptr &([32 * i32]* %result)[i64 0][i32 %255];
    i32 %259 = load i32* %258;
    call (i32) -> void @putint(i32 %259);
    cbr i1 %257(prob = 0.97), ^while.body13, ^while.body14;
^while.body14:
    i32 %260 = load i32* %1;
    store i32* %0 with i32 %260;
    i32 %261 = load i32* %3;
    store i32* %2 with i32 %261;
    i32 %262 = load i32* %5;
    store i32* %4 with i32 %262;
    i32 %263 = load i32* %7;
    store i32* %6 with i32 %263;
    i32 %264 = load i32* %9;
    store i32* %8 with i32 %264;
    i32 %265 = load i32* %11;
    store i32* %10 with i32 %265;
    i32 %266 = load i32* %13;
    store i32* %12 with i32 %266;
    i32 %267 = load i32* %15;
    store i32* %14 with i32 %267;
    i32 %268 = load i32* %17;
    store i32* %16 with i32 %268;
    i32 %269 = load i32* %19;
    store i32* %18 with i32 %269;
    i32 %270 = load i32* %21;
    store i32* %20 with i32 %270;
    i32 %271 = load i32* %23;
    store i32* %22 with i32 %271;
    i32 %272 = load i32* %25;
    store i32* %24 with i32 %272;
    i32 %273 = load i32* %27;
    store i32* %26 with i32 %273;
    i32 %274 = load i32* %29;
    store i32* %28 with i32 %274;
    i32 %275 = load i32* %31;
    store i32* %30 with i32 %275;
    i32 %276 = load i32* %33;
    store i32* %32 with i32 %276;
    i32 %277 = load i32* %35;
    store i32* %34 with i32 %277;
    i32 %278 = load i32* %37;
    store i32* %36 with i32 %278;
    i32 %279 = load i32* %39;
    store i32* %38 with i32 %279;
    i32 %280 = load i32* %41;
    store i32* %40 with i32 %280;
    i32 %281 = load i32* %43;
    store i32* %42 with i32 %281;
    i32 %282 = load i32* %45;
    store i32* %44 with i32 %282;
    i32 %283 = load i32* %47;
    store i32* %46 with i32 %283;
    i32 %284 = load i32* %49;
    store i32* %48 with i32 %284;
    i32 %285 = load i32* %51;
    store i32* %50 with i32 %285;
    i32 %286 = load i32* %53;
    store i32* %52 with i32 %286;
    i32 %287 = load i32* %55;
    store i32* %54 with i32 %287;
    i32 %288 = load i32* %57;
    store i32* %56 with i32 %288;
    i32 %289 = load i32* %59;
    store i32* %58 with i32 %289;
    i32 %290 = load i32* %61;
    store i32* %60 with i32 %290;
    i32 %291 = load i32* %63;
    store i32* %62 with i32 %291;
    store i32* %i with i32 0;
    i32 %292 = call (i32*, i32, i32, i32*) -> i32 @QuickSort(i32* %0, i32 0, i32 31, i32* %n);
    i32 %293 = load i32* %i;
    i32 %294 = load i32* %n;
    i1 %295 = scmp lt i32 %293, i32 32;
    cbr i1 %295(prob = 0.97), ^while.body15, ^entry1;
^while.body15:
    i32 %296 = phi [^while.body14, i32 %293] [^while.body15, i32 %297];
    i32 %297 = add i32 %296, i32 1;
    i1 %298 = scmp lt i32 %297, i32 32;
    i32* %299 = getelementptr &([32 * i32]* %result)[i64 0][i32 %296];
    i32 %300 = load i32* %299;
    call (i32) -> void @putint(i32 %300);
    cbr i1 %298(prob = 0.97), ^while.body15, ^entry1;
^entry1:
    i1 %301 = scmp gt i32 %294, i32 0;
    cbr i1 %301(prob = 0.97), ^while.body16, ^entry2;
^while.body16:
    i32 %302 = phi [^entry1, i32 0] [^while.body16, i32 %303];
    i32 %303 = add i32 %302, i32 1;
    i1 %304 = scmp lt i32 %303, i32 %294;
    i32* %305 = getelementptr &(i32* %0)[i32 %302];
    i32* %306 = getelementptr &(i32* %1)[i32 %302];
    i32 %307 = load i32* %306;
    store i32* %305 with i32 %307;
    cbr i1 %304(prob = 0.97), ^while.body16, ^entry2;
^entry2:
    cbr i1 %301(prob = 0.97), ^while.body17, ^while.body18;
^while.body17:
    i32 %308 = phi [^entry2, i32 0] [^b11, i32 %321];
    i32 %309 = phi [^entry2, i32 0] [^b11, i32 %320];
    i32 %310 = srem i32 %308, i32 4;
    i1 %311 = scmp neq i32 %310, i32 3;
    i32* %312 = getelementptr &(i32* %0)[i32 %308];
    i32 %313 = load i32* %312;
    i32 %314 = add i32 %309, i32 %313;
    cbr i1 %311(prob = 0.5), ^if.then4, ^if.else;
^while.body18:
    i32 %315 = phi [^entry2, i32 0] [^while.body18, i32 %316] [^b11, i32 0];
    i32 %316 = add i32 %315, i32 1;
    i1 %317 = scmp lt i32 %316, i32 32;
    i32* %318 = getelementptr &([32 * i32]* %result)[i64 0][i32 %315];
    i32 %319 = load i32* %318;
    call (i32) -> void @putint(i32 %319);
    cbr i1 %317(prob = 0.97), ^while.body18, ^entry3;
^if.then4:
    store i32* %312 with i32 0;
    ubr ^b11;
^if.else:
    store i32* %312 with i32 %314;
    ubr ^b11;
^entry3:
    cbr i1 %301(prob = 0.97), ^while.body19, ^entry4;
^b11:
    i32 %320 = phi [^if.then4, i32 %314] [^if.else, i32 0];
    i32 %321 = add i32 %308, i32 1;
    i1 %322 = scmp lt i32 %321, i32 %294;
    cbr i1 %322(prob = 0.97), ^while.body17, ^while.body18;
^while.body19:
    i32 %323 = phi [^entry3, i32 0] [^while.body19, i32 %324];
    i32 %324 = add i32 %323, i32 1;
    i1 %325 = scmp lt i32 %324, i32 %294;
    i32* %326 = getelementptr &(i32* %0)[i32 %323];
    i32* %327 = getelementptr &(i32* %1)[i32 %323];
    i32 %328 = load i32* %327;
    store i32* %326 with i32 %328;
    cbr i1 %325(prob = 0.97), ^while.body19, ^entry4;
^entry4:
    cbr i1 %301(prob = 0.97), ^while.body20, ^b12;
^while.body20:
    i32 %329 = phi [^entry4, i32 0] [^b13, i32 %359];
    i32 %330 = phi [^entry4, i32 3] [^b13, i32 %355];
    i32 %331 = phi [^entry4, i32 0] [^b13, i32 %356];
    i32 %332 = phi [^entry4, i32 3] [^b13, i32 %357];
    i32 %333 = phi [^entry4, i32 0] [^b13, i32 %358];
    i32 %334 = add i32 %332, i32 -1;
    i1 %335 = scmp lt i32 %329, i32 %334;
    cbr i1 %335(prob = 0.5), ^if.then5, ^if.else1;
^b12:
    i32 %336 = phi [^entry4, i32 3] [^b13, i32 %357];
    i32 %337 = sub i32 %294, i32 %336;
    i32 %338 = add i32 %337, i32 1;
    i1 %339 = scmp lt i32 %338, i32 %294;
    cbr i1 %339(prob = 0.97), ^while.body21, ^while.body22;
^if.then5:
    i32* %340 = getelementptr &(i32* %0)[i32 %329];
    i32 %341 = load i32* %340;
    i32 %342 = add i32 %331, i32 %341;
    ubr ^b13;
^if.else1:
    i1 %343 = scmp eq i32 %329, i32 %334;
    cbr i1 %343(prob = 0.5), ^if.then6, ^if.else2;
^while.body21:
    i32 %344 = phi [^b12, i32 %338] [^while.body21, i32 %345];
    i32 %345 = add i32 %344, i32 1;
    i1 %346 = scmp lt i32 %345, i32 %294;
    i32* %347 = getelementptr &(i32* %0)[i32 %344];
    store i32* %347 with i32 0;
    cbr i1 %346(prob = 0.97), ^while.body21, ^while.body22;
^while.body22:
    i32 %348 = phi [^b12, i32 0] [^while.body21, i32 0] [^while.body22, i32 %349];
    i32 %349 = add i32 %348, i32 1;
    i1 %350 = scmp lt i32 %349, i32 32;
    i32* %351 = getelementptr &([32 * i32]* %result)[i64 0][i32 %348];
    i32 %352 = load i32* %351;
    call (i32) -> void @putint(i32 %352);
    cbr i1 %350(prob = 0.97), ^while.body22, ^b14;
^if.then6:
    i32 %353 = load i32* %0;
    i32 %354 = sdiv i32 %331, i32 %332;
    store i32* %0 with i32 %354;
    ubr ^b13;
^b13:
    i32 %355 = phi [^if.then5, i32 %330] [^if.then6, i32 %330] [^if.else2, i32 3];
    i32 %356 = phi [^if.then5, i32 %342] [^if.then6, i32 %331] [^if.else2, i32 %366];
    i32 %357 = phi [^if.then5, i32 %332] [^if.then6, i32 %330] [^if.else2, i32 3];
    i32 %358 = phi [^if.then5, i32 %333] [^if.then6, i32 %353] [^if.else2, i32 %369];
    i32 %359 = add i32 %329, i32 1;
    i1 %360 = scmp lt i32 %359, i32 %294;
    cbr i1 %360(prob = 0.97), ^while.body20, ^b12;
^if.else2:
    i32 %361 = sub i32 %329, i32 %332;
    i32 %362 = add i32 %361, i32 1;
    i32* %363 = getelementptr &(i32* %0)[i32 %329];
    i32 %364 = load i32* %363;
    i32 %365 = add i32 %331, i32 %364;
    i32 %366 = sub i32 %365, i32 %333;
    i32 %367 = sdiv i32 %366, i32 %332;
    i32* %368 = getelementptr &(i32* %0)[i32 %362];
    i32 %369 = load i32* %368;
    store i32* %368 with i32 %367;
    ubr ^b13;
^b14:
    ret i32 0;
}
