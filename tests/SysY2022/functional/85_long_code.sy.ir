internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @QuickSort(i32* %arr, i32 %low, i32 %high, i32* %0) -> i32 {
^entry:
    i32* %k = alloc i32;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    i32* %high1 = alloc i32;
    i32* %low1 = alloc i32;
    i32** %arr1 = alloc i32*;
    store i32** %arr1 with i32* %arr;
    store i32* %low1 with i32 %low;
    store i32* %high1 with i32 %high;
    i1 %1 = scmp lt i32 %low, i32 %high;
    cbr i1 %1(prob = 0.5), ^if.then, ^b;
^if.then:
    store i32* %i with i32 %low;
    store i32* %j with i32 %high;
    store i32* %k with i32 0;
    i32* %2 = getelementptr &(i32* %arr)[i32 %low];
    i32 %3 = load i32* %2;
    store i32* %k with i32 %3;
    ubr ^while.header;
^b:
    ret i32 0;
^while.header:
    i32* %4 = phi [^b7, i32* %41] [^if.then2, i32* %41] [^if.then, i32* %arr];
    i32 %5 = phi [^b7, i32 %42] [^if.then2, i32 %57] [^if.then, i32 %low];
    i32 %6 = phi [^b7, i32 %43] [^if.then2, i32 %60] [^if.then, i32 %high];
    i32 %7 = phi [^b7, i32 %44] [^if.then2, i32 %59] [^if.then, i32 %3];
    i32 %8 = phi [^b7, i32 %43] [^if.then2, i32 %60] [^if.then, i32 %high];
    i32 %9 = phi [^b7, i32 %42] [^if.then2, i32 %57] [^if.then, i32 %low];
    i1 %10 = scmp lt i32 %9, i32 %8;
    cbr i1 %10(prob = 0.97), ^while.header1, ^b1;
^b1:
    i32* %11 = getelementptr &(i32* %4)[i32 %5];
    store i32* %11 with i32 %7;
    i32 %12 = load i32* %low1;
    i32 %13 = load i32* %i;
    i32 %14 = add i32 %13, i32 -1;
    i32 %15 = call (i32*, i32, i32, i32*) -> i32 @QuickSort(i32* %4, i32 %12, i32 %14, i32* %0);
    i32* %16 = load i32** %arr1;
    i32 %17 = load i32* %high1;
    i32 %18 = load i32* %i;
    i32 %19 = add i32 %18, i32 1;
    i32 %20 = call (i32*, i32, i32, i32*) -> i32 @QuickSort(i32* %16, i32 %19, i32 %17, i32* %0);
    ubr ^b;
^while.header1:
    i32* %21 = phi [^while.header, i32* %4] [^while.body, i32* %21];
    i32 %22 = phi [^while.header, i32 %5] [^while.body, i32 %22];
    i32 %23 = phi [^while.header, i32 %6] [^while.body, i32 %32];
    i32 %24 = phi [^while.header, i32 %7] [^while.body, i32 %24];
    i32 %25 = phi [^while.header, i32 %6] [^while.body, i32 %32];
    i1 %26 = scmp lt i32 %22, i32 %25;
    cbr i1 %26(prob = 0.5), ^b2, ^b3;
^b2:
    i32* %27 = getelementptr &(i32* %21)[i32 %23];
    i32 %28 = load i32* %27;
    i32 %29 = add i32 %24, i32 -1;
    i1 %30 = scmp gt i32 %28, i32 %29;
    ubr ^b3;
^b3:
    i1 %31 = phi [^b2, i1 %30] [^while.header1, i1 false];
    cbr i1 %31(prob = 0.97), ^while.body, ^b4;
^while.body:
    i32 %32 = add i32 %23, i32 -1;
    store i32* %j with i32 %32;
    ubr ^while.header1;
^b4:
    i1 %33 = scmp lt i32 %22, i32 %23;
    cbr i1 %33(prob = 0.5), ^if.then1, ^while.header2;
^if.then1:
    i32* %34 = getelementptr &(i32* %21)[i32 %22];
    i32* %35 = getelementptr &(i32* %21)[i32 %23];
    i32 %36 = load i32* %35;
    store i32* %34 with i32 %36;
    i32 %37 = load i32* %i;
    i32 %38 = load i32* %j;
    i32 %39 = load i32* %k;
    i32 %40 = add i32 %37, i32 1;
    store i32* %i with i32 %40;
    ubr ^while.header2;
^while.header2:
    i32* %41 = phi [^while.body1, i32* %41] [^if.then1, i32* %21] [^b4, i32* %21];
    i32 %42 = phi [^while.body1, i32 %52] [^if.then1, i32 %40] [^b4, i32 %22];
    i32 %43 = phi [^while.body1, i32 %43] [^if.then1, i32 %38] [^b4, i32 %23];
    i32 %44 = phi [^while.body1, i32 %44] [^if.then1, i32 %39] [^b4, i32 %24];
    i32 %45 = phi [^while.body1, i32 %43] [^if.then1, i32 %38] [^b4, i32 %23];
    i32 %46 = phi [^while.body1, i32 %52] [^if.then1, i32 %40] [^b4, i32 %22];
    i1 %47 = scmp lt i32 %46, i32 %45;
    cbr i1 %47(prob = 0.5), ^b5, ^b6;
^b5:
    i32* %48 = getelementptr &(i32* %41)[i32 %42];
    i32 %49 = load i32* %48;
    i1 %50 = scmp lt i32 %49, i32 %44;
    ubr ^b6;
^b6:
    i1 %51 = phi [^b5, i1 %50] [^while.header2, i1 false];
    cbr i1 %51(prob = 0.97), ^while.body1, ^b7;
^while.body1:
    i32 %52 = add i32 %42, i32 1;
    store i32* %i with i32 %52;
    ubr ^while.header2;
^b7:
    i1 %53 = scmp lt i32 %42, i32 %43;
    cbr i1 %53(prob = 0.5), ^if.then2, ^while.header;
^if.then2:
    i32* %54 = getelementptr &(i32* %41)[i32 %43];
    i32* %55 = getelementptr &(i32* %41)[i32 %42];
    i32 %56 = load i32* %55;
    store i32* %54 with i32 %56;
    i32 %57 = load i32* %i;
    i32 %58 = load i32* %j;
    i32 %59 = load i32* %k;
    i32 %60 = add i32 %58, i32 -1;
    store i32* %j with i32 %60;
    ubr ^while.header;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %stride = alloc i32;
    i32* %sum = alloc i32;
    i32* %i = alloc i32;
    i32* %lastnum = alloc i32;
    i32* %i1 = alloc i32;
    i32* %stride1 = alloc i32;
    i32* %sum1 = alloc i32;
    i32* %i2 = alloc i32;
    i32* %i3 = alloc i32;
    i32* %i4 = alloc i32;
    i32* %i5 = alloc i32;
    i32* %temp = alloc i32;
    i32* %j = alloc i32;
    i32* %i6 = alloc i32;
    i32* %i7 = alloc i32;
    i32* %j1 = alloc i32;
    i32* %tmp = alloc i32;
    i32* %i8 = alloc i32;
    [1000 * i32]* %count = alloc [1000 * i32];
    i32* %i9 = alloc i32;
    i32* %j2 = alloc i32;
    i32* %tmp1 = alloc i32;
    i32* %temp1 = alloc i32;
    i32* %i10 = alloc i32;
    i32* %j3 = alloc i32;
    i32* %i11 = alloc i32;
    i32* %n = alloc i32;
    i32* %i12 = alloc i32;
    [32 * i32]* %result = alloc [32 * i32];
    [32 * i32]* %arr = alloc [32 * i32];
    store i32* %n with i32 32;
    i32* %0 = getelementptr &([32 * i32]* %arr)[i64 0][i64 0];
    store i32* %0 with i32 7;
    i32* %1 = getelementptr &([32 * i32]* %arr)[i64 0][i64 1];
    store i32* %1 with i32 23;
    i32* %2 = getelementptr &([32 * i32]* %arr)[i64 0][i64 2];
    store i32* %2 with i32 89;
    i32* %3 = getelementptr &([32 * i32]* %arr)[i64 0][i64 3];
    store i32* %3 with i32 26;
    i32* %4 = getelementptr &([32 * i32]* %arr)[i64 0][i64 4];
    store i32* %4 with i32 282;
    i32* %5 = getelementptr &([32 * i32]* %arr)[i64 0][i64 5];
    store i32* %5 with i32 254;
    i32* %6 = getelementptr &([32 * i32]* %arr)[i64 0][i64 6];
    store i32* %6 with i32 27;
    i32* %7 = getelementptr &([32 * i32]* %arr)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([32 * i32]* %arr)[i64 0][i64 8];
    store i32* %8 with i32 83;
    i32* %9 = getelementptr &([32 * i32]* %arr)[i64 0][i64 9];
    store i32* %9 with i32 273;
    i32* %10 = getelementptr &([32 * i32]* %arr)[i64 0][i64 10];
    store i32* %10 with i32 574;
    i32* %11 = getelementptr &([32 * i32]* %arr)[i64 0][i64 11];
    store i32* %11 with i32 905;
    i32* %12 = getelementptr &([32 * i32]* %arr)[i64 0][i64 12];
    store i32* %12 with i32 354;
    i32* %13 = getelementptr &([32 * i32]* %arr)[i64 0][i64 13];
    store i32* %13 with i32 657;
    i32* %14 = getelementptr &([32 * i32]* %arr)[i64 0][i64 14];
    store i32* %14 with i32 935;
    i32* %15 = getelementptr &([32 * i32]* %arr)[i64 0][i64 15];
    store i32* %15 with i32 264;
    i32* %16 = getelementptr &([32 * i32]* %arr)[i64 0][i64 16];
    store i32* %16 with i32 639;
    i32* %17 = getelementptr &([32 * i32]* %arr)[i64 0][i64 17];
    store i32* %17 with i32 459;
    i32* %18 = getelementptr &([32 * i32]* %arr)[i64 0][i64 18];
    store i32* %18 with i32 29;
    i32* %19 = getelementptr &([32 * i32]* %arr)[i64 0][i64 19];
    store i32* %19 with i32 68;
    i32* %20 = getelementptr &([32 * i32]* %arr)[i64 0][i64 20];
    store i32* %20 with i32 929;
    i32* %21 = getelementptr &([32 * i32]* %arr)[i64 0][i64 21];
    store i32* %21 with i32 756;
    i32* %22 = getelementptr &([32 * i32]* %arr)[i64 0][i64 22];
    store i32* %22 with i32 452;
    i32* %23 = getelementptr &([32 * i32]* %arr)[i64 0][i64 23];
    store i32* %23 with i32 279;
    i32* %24 = getelementptr &([32 * i32]* %arr)[i64 0][i64 24];
    store i32* %24 with i32 58;
    i32* %25 = getelementptr &([32 * i32]* %arr)[i64 0][i64 25];
    store i32* %25 with i32 87;
    i32* %26 = getelementptr &([32 * i32]* %arr)[i64 0][i64 26];
    store i32* %26 with i32 96;
    i32* %27 = getelementptr &([32 * i32]* %arr)[i64 0][i64 27];
    store i32* %27 with i32 36;
    i32* %28 = getelementptr &([32 * i32]* %arr)[i64 0][i64 28];
    store i32* %28 with i32 39;
    i32* %29 = getelementptr &([32 * i32]* %arr)[i64 0][i64 29];
    store i32* %29 with i32 28;
    i32* %30 = getelementptr &([32 * i32]* %arr)[i64 0][i64 30];
    store i32* %30 with i32 1;
    i32* %31 = getelementptr &([32 * i32]* %arr)[i64 0][i64 31];
    store i32* %31 with i32 290;
    i32* %32 = getelementptr &([32 * i32]* %result)[i64 0][i64 0];
    store i32* %i11 with i32 0;
    ubr ^while.header;
^while.header:
    i32 %33 = phi [^while.body, i32 %43] [^entry, i32 32];
    i32 %34 = phi [^while.body, i32 %45] [^entry, i32 0];
    i32* %35 = phi [^while.body, i32* %35] [^entry, i32* %32];
    i32* %36 = phi [^while.body, i32* %36] [^entry, i32* %0];
    i32 %37 = phi [^while.body, i32 %43] [^entry, i32 32];
    i32 %38 = phi [^while.body, i32 %45] [^entry, i32 0];
    i1 %39 = scmp lt i32 %38, i32 %37;
    cbr i1 %39(prob = 0.97), ^while.body, ^entry1;
^while.body:
    i32* %40 = getelementptr &(i32* %35)[i32 %34];
    i32* %41 = getelementptr &(i32* %36)[i32 %34];
    i32 %42 = load i32* %41;
    store i32* %40 with i32 %42;
    i32 %43 = load i32* %n;
    i32 %44 = load i32* %i11;
    i32 %45 = add i32 %44, i32 1;
    store i32* %i11 with i32 %45;
    ubr ^while.header;
^entry1:
    store i32* %temp1 with i32 0;
    store i32* %i10 with i32 0;
    store i32* %j3 with i32 0;
    ubr ^while.header1;
^while.header1:
    i32 %46 = phi [^while.body1, i32 %60] [^entry1, i32 %33];
    i32 %47 = phi [^while.body1, i32 %64] [^entry1, i32 0];
    i32 %48 = phi [^while.body1, i32 %63] [^entry1, i32 0];
    i32* %49 = phi [^while.body1, i32* %49] [^entry1, i32* %32];
    i32 %50 = phi [^entry1, i32 0] [^while.body1, i32 %64];
    i32 %51 = phi [^entry1, i32 0] [^while.body1, i32 %63];
    i1 %52 = scmp lt i32 %51, i32 %50;
    cbr i1 %52(prob = 0.97), ^while.body1, ^entry2;
^while.body1:
    i32* %53 = getelementptr &(i32* %49)[i32 %48];
    i32 %54 = load i32* %53;
    store i32* %temp1 with i32 %54;
    i32* %55 = getelementptr &(i32* %49)[i32 %47];
    i32 %56 = load i32* %55;
    store i32* %53 with i32 %56;
    i32 %57 = load i32* %j3;
    i32 %58 = load i32* %temp1;
    i32* %59 = getelementptr &(i32* %49)[i32 %57];
    store i32* %59 with i32 %58;
    i32 %60 = load i32* %n;
    i32 %61 = load i32* %j3;
    i32 %62 = load i32* %i10;
    i32 %63 = add i32 %62, i32 1;
    store i32* %i10 with i32 %63;
    i32 %64 = add i32 %61, i32 -1;
    store i32* %j3 with i32 %64;
    ubr ^while.header1;
^entry2:
    store i32* %i12 with i32 0;
    ubr ^while.header2;
^while.header2:
    i32 %65 = phi [^while.body2, i32 %71] [^entry2, i32 0];
    i32 %66 = phi [^while.body2, i32 %66] [^entry2, i32 %46];
    i32 %67 = phi [^entry2, i32 0] [^while.body2, i32 %71];
    i1 %68 = scmp lt i32 %67, i32 32;
    cbr i1 %68(prob = 0.97), ^while.body2, ^entry3;
^while.body2:
    i32* %69 = getelementptr &([32 * i32]* %result)[i64 0][i32 %65];
    i32 %70 = load i32* %69;
    call (i32) -> void @putint(i32 %70);
    i32 %71 = add i32 %65, i32 1;
    store i32* %i12 with i32 %71;
    ubr ^while.header2;
^entry3:
    store i32* %i9 with i32 0;
    ubr ^while.header3;
^while.header3:
    i32 %72 = phi [^b1, i32 %78] [^entry3, i32 %66];
    i32 %73 = phi [^b1, i32 %90] [^entry3, i32 0];
    i32* %74 = phi [^b1, i32* %81] [^entry3, i32* %32];
    i32 %75 = phi [^entry3, i32 0] [^b1, i32 %90];
    i32 %76 = add i32 %72, i32 -1;
    i1 %77 = scmp lt i32 %75, i32 %76;
    cbr i1 %77(prob = 0.97), ^while.body3, ^b;
^while.body3:
    store i32* %j2 with i32 0;
    ubr ^while.header4;
^b:
    store i32* %i12 with i32 0;
    ubr ^while.header5;
^while.header4:
    i32 %78 = phi [^b2, i32 %111] [^while.body3, i32 %72];
    i32 %79 = phi [^b2, i32 %114] [^while.body3, i32 0];
    i32 %80 = phi [^b2, i32 %113] [^while.body3, i32 %73];
    i32* %81 = phi [^b2, i32* %81] [^while.body3, i32* %74];
    i32 %82 = phi [^while.body3, i32 0] [^b2, i32 %114];
    i32 %83 = sub i32 %78, i32 %80;
    i32 %84 = add i32 %83, i32 -1;
    i1 %85 = scmp lt i32 %82, i32 %84;
    cbr i1 %85(prob = 0.97), ^while.body5, ^b1;
^while.header5:
    i32 %86 = phi [^while.body4, i32 %93] [^b, i32 0];
    i32 %87 = phi [^while.body4, i32 %87] [^b, i32 %72];
    i32 %88 = phi [^b, i32 0] [^while.body4, i32 %93];
    i1 %89 = scmp lt i32 %88, i32 32;
    cbr i1 %89(prob = 0.97), ^while.body4, ^entry4;
^b1:
    i32 %90 = add i32 %80, i32 1;
    store i32* %i9 with i32 %90;
    ubr ^while.header3;
^while.body4:
    i32* %91 = getelementptr &([32 * i32]* %result)[i64 0][i32 %86];
    i32 %92 = load i32* %91;
    call (i32) -> void @putint(i32 %92);
    i32 %93 = add i32 %86, i32 1;
    store i32* %i12 with i32 %93;
    ubr ^while.header5;
^while.body5:
    i32* %94 = getelementptr &(i32* %81)[i32 %79];
    i32 %95 = load i32* %94;
    i32* %96 = getelementptr &(i32* %94)[i64 1];
    i32 %97 = load i32* %96;
    i1 %98 = scmp gt i32 %95, i32 %97;
    cbr i1 %98(prob = 0.5), ^if.then, ^b2;
^entry4:
    i32 %99 = srem i32 %87, i32 2;
    i1 %100 = scmp eq i32 %99, i32 0;
    cbr i1 %100(prob = 0.5), ^if.then1, ^if.else;
^if.then:
    store i32* %tmp1 with i32 0;
    i32 %101 = add i32 %79, i32 1;
    i32* %102 = getelementptr &(i32* %81)[i32 %101];
    i32 %103 = load i32* %102;
    store i32* %tmp1 with i32 %103;
    i32 %104 = load i32* %94;
    store i32* %102 with i32 %104;
    i32 %105 = load i32* %tmp1;
    i32 %106 = load i32* %j2;
    i32* %107 = getelementptr &(i32* %81)[i32 %106];
    store i32* %107 with i32 %105;
    i32 %108 = load i32* %n;
    i32 %109 = load i32* %j2;
    i32 %110 = load i32* %i9;
    ubr ^b2;
^b2:
    i32 %111 = phi [^if.then, i32 %108] [^while.body5, i32 %78];
    i32 %112 = phi [^if.then, i32 %109] [^while.body5, i32 %79];
    i32 %113 = phi [^if.then, i32 %110] [^while.body5, i32 %80];
    i32 %114 = add i32 %112, i32 1;
    store i32* %j2 with i32 %114;
    ubr ^while.header4;
^if.then1:
    i32 %115 = sdiv i32 %87, i32 2;
    i32* %116 = getelementptr &(i32* %32)[i32 %115];
    i32 %117 = load i32* %116;
    i32* %118 = getelementptr &(i32* %116)[i64 -1];
    i32 %119 = load i32* %118;
    i32 %120 = add i32 %117, i32 %119;
    i32 %121 = sdiv i32 %120, i32 2;
    ubr ^b3;
^if.else:
    i32 %122 = sdiv i32 %87, i32 2;
    i32* %123 = getelementptr &(i32* %32)[i32 %122];
    i32 %124 = load i32* %123;
    ubr ^b3;
^b3:
    i32 %125 = phi [^if.then1, i32 %121] [^if.else, i32 %124];
    call (i32) -> void @putint(i32 %125);
    ubr ^while.header6;
^while.header6:
    i32 %126 = phi [^while.body6, i32 %126] [^b3, i32 %87];
    i32 %127 = phi [^while.body6, i32 %132] [^b3, i32 0];
    i32* %128 = phi [^while.body6, i32* %128] [^b3, i32* %32];
    i32 %129 = phi [^b3, i32 0] [^while.body6, i32 %132];
    i1 %130 = scmp lt i32 %129, i32 1000;
    cbr i1 %130(prob = 0.97), ^while.body6, ^while.header7;
^while.body6:
    i32* %131 = getelementptr &([1000 * i32]* %count)[i64 0][i32 %127];
    store i32* %131 with i32 0;
    i32 %132 = add i32 %127, i32 1;
    ubr ^while.header6;
^while.header7:
    i32 %133 = phi [^while.header6, i32 %126] [^b5, i32 %133];
    i32 %134 = phi [^while.header6, i32 0] [^b5, i32 %146];
    i32 %135 = phi [^while.header6, i32 0] [^b5, i32 %147];
    i32 %136 = phi [^while.header6, i32 0] [^b5, i32 %148];
    i32* %137 = phi [^while.header6, i32* %128] [^b5, i32* %137];
    i32 %138 = phi [^while.header6, i32 0] [^b5, i32 %148];
    i1 %139 = scmp lt i32 %138, i32 %133;
    cbr i1 %139(prob = 0.97), ^while.body7, ^b4;
^b4:
    call (i32) -> void @putint(i32 %134);
    store i32* %i8 with i32 0;
    ubr ^while.header8;
^while.body7:
    i32* %140 = getelementptr &(i32* %137)[i32 %136];
    i32 %141 = load i32* %140;
    i32* %142 = getelementptr &([1000 * i32]* %count)[i64 0][i32 %141];
    i32 %143 = load i32* %142;
    i32 %144 = add i32 %143, i32 1;
    store i32* %142 with i32 %144;
    i1 %145 = scmp gt i32 %144, i32 %135;
    cbr i1 %145(prob = 0.5), ^if.then2, ^b5;
^if.then2:
    ubr ^b5;
^b5:
    i32 %146 = phi [^if.then2, i32 %141] [^while.body7, i32 %134];
    i32 %147 = phi [^if.then2, i32 %144] [^while.body7, i32 %135];
    i32 %148 = add i32 %136, i32 1;
    ubr ^while.header7;
^while.header8:
    i32 %149 = phi [^while.body8, i32 %158] [^b4, i32 %133];
    i32 %150 = phi [^while.body8, i32 %160] [^b4, i32 0];
    i32* %151 = phi [^while.body8, i32* %151] [^b4, i32* %32];
    i32* %152 = phi [^while.body8, i32* %152] [^b4, i32* %0];
    i32 %153 = phi [^b4, i32 0] [^while.body8, i32 %160];
    i1 %154 = scmp lt i32 %153, i32 %149;
    cbr i1 %154(prob = 0.97), ^while.body8, ^b6;
^while.body8:
    i32* %155 = getelementptr &(i32* %151)[i32 %150];
    i32* %156 = getelementptr &(i32* %152)[i32 %150];
    i32 %157 = load i32* %156;
    store i32* %155 with i32 %157;
    i32 %158 = load i32* %n;
    i32 %159 = load i32* %i8;
    i32 %160 = add i32 %159, i32 1;
    store i32* %i8 with i32 %160;
    ubr ^while.header8;
^b6:
    store i32* %i7 with i32 0;
    ubr ^while.header9;
^while.header9:
    i32 %161 = phi [^b8, i32 %167] [^b6, i32 %149];
    i32 %162 = phi [^b8, i32 %179] [^b6, i32 0];
    i32* %163 = phi [^b8, i32* %170] [^b6, i32* %32];
    i32 %164 = phi [^b6, i32 0] [^b8, i32 %179];
    i32 %165 = add i32 %161, i32 -1;
    i1 %166 = scmp lt i32 %164, i32 %165;
    cbr i1 %166(prob = 0.97), ^while.body9, ^b7;
^while.body9:
    store i32* %j1 with i32 0;
    ubr ^while.header10;
^b7:
    store i32* %i12 with i32 0;
    ubr ^while.header11;
^while.header10:
    i32 %167 = phi [^b9, i32 %198] [^while.body9, i32 %161];
    i32 %168 = phi [^b9, i32 %201] [^while.body9, i32 0];
    i32 %169 = phi [^b9, i32 %200] [^while.body9, i32 %162];
    i32* %170 = phi [^b9, i32* %170] [^while.body9, i32* %163];
    i32 %171 = phi [^while.body9, i32 0] [^b9, i32 %201];
    i32 %172 = sub i32 %167, i32 %169;
    i32 %173 = add i32 %172, i32 -1;
    i1 %174 = scmp lt i32 %171, i32 %173;
    cbr i1 %174(prob = 0.97), ^while.body11, ^b8;
^while.header11:
    i32 %175 = phi [^while.body10, i32 %182] [^b7, i32 0];
    i32 %176 = phi [^while.body10, i32 %176] [^b7, i32 %161];
    i32 %177 = phi [^b7, i32 0] [^while.body10, i32 %182];
    i1 %178 = scmp lt i32 %177, i32 32;
    cbr i1 %178(prob = 0.97), ^while.body10, ^entry5;
^b8:
    i32 %179 = add i32 %169, i32 1;
    store i32* %i7 with i32 %179;
    ubr ^while.header9;
^while.body10:
    i32* %180 = getelementptr &([32 * i32]* %result)[i64 0][i32 %175];
    i32 %181 = load i32* %180;
    call (i32) -> void @putint(i32 %181);
    i32 %182 = add i32 %175, i32 1;
    store i32* %i12 with i32 %182;
    ubr ^while.header11;
^while.body11:
    i32* %183 = getelementptr &(i32* %170)[i32 %168];
    i32 %184 = load i32* %183;
    i32* %185 = getelementptr &(i32* %183)[i64 1];
    i32 %186 = load i32* %185;
    i1 %187 = scmp gt i32 %184, i32 %186;
    cbr i1 %187(prob = 0.5), ^if.then3, ^b9;
^entry5:
    store i32* %i6 with i32 0;
    ubr ^while.header12;
^if.then3:
    store i32* %tmp with i32 0;
    i32 %188 = add i32 %168, i32 1;
    i32* %189 = getelementptr &(i32* %170)[i32 %188];
    i32 %190 = load i32* %189;
    store i32* %tmp with i32 %190;
    i32 %191 = load i32* %183;
    store i32* %189 with i32 %191;
    i32 %192 = load i32* %tmp;
    i32 %193 = load i32* %j1;
    i32* %194 = getelementptr &(i32* %170)[i32 %193];
    store i32* %194 with i32 %192;
    i32 %195 = load i32* %n;
    i32 %196 = load i32* %j1;
    i32 %197 = load i32* %i7;
    ubr ^b9;
^b9:
    i32 %198 = phi [^if.then3, i32 %195] [^while.body11, i32 %167];
    i32 %199 = phi [^if.then3, i32 %196] [^while.body11, i32 %168];
    i32 %200 = phi [^if.then3, i32 %197] [^while.body11, i32 %169];
    i32 %201 = add i32 %199, i32 1;
    store i32* %j1 with i32 %201;
    ubr ^while.header10;
^while.header12:
    i32 %202 = phi [^while.body12, i32 %211] [^entry5, i32 %176];
    i32 %203 = phi [^while.body12, i32 %213] [^entry5, i32 0];
    i32* %204 = phi [^while.body12, i32* %204] [^entry5, i32* %32];
    i32* %205 = phi [^while.body12, i32* %205] [^entry5, i32* %0];
    i32 %206 = phi [^entry5, i32 0] [^while.body12, i32 %213];
    i1 %207 = scmp lt i32 %206, i32 %202;
    cbr i1 %207(prob = 0.97), ^while.body12, ^b10;
^while.body12:
    i32* %208 = getelementptr &(i32* %204)[i32 %203];
    i32* %209 = getelementptr &(i32* %205)[i32 %203];
    i32 %210 = load i32* %209;
    store i32* %208 with i32 %210;
    i32 %211 = load i32* %n;
    i32 %212 = load i32* %i6;
    i32 %213 = add i32 %212, i32 1;
    store i32* %i6 with i32 %213;
    ubr ^while.header12;
^b10:
    store i32* %i5 with i32 1;
    ubr ^while.header13;
^while.header13:
    i32 %214 = phi [^b14, i32 %247] [^b10, i32 %202];
    i32 %215 = phi [^b14, i32 %249] [^b10, i32 1];
    i32* %216 = phi [^b14, i32* %224] [^b10, i32* %32];
    i32 %217 = phi [^b10, i32 1] [^b14, i32 %249];
    i1 %218 = scmp lt i32 %217, i32 %214;
    cbr i1 %218(prob = 0.97), ^while.body13, ^b11;
^while.body13:
    store i32* %temp with i32 0;
    i32* %219 = getelementptr &(i32* %216)[i32 %215];
    i32 %220 = load i32* %219;
    store i32* %temp with i32 %220;
    i32 %221 = add i32 %215, i32 -1;
    store i32* %j with i32 %221;
    ubr ^while.header14;
^b11:
    store i32* %i12 with i32 0;
    ubr ^while.header15;
^while.header14:
    i32 %222 = phi [^while.body15, i32 %244] [^while.body13, i32 %221];
    i32 %223 = phi [^while.body15, i32 %243] [^while.body13, i32 %220];
    i32* %224 = phi [^while.body15, i32* %224] [^while.body13, i32* %216];
    i32 %225 = phi [^while.body13, i32 %221] [^while.body15, i32 %244];
    i1 %226 = scmp gt i32 %225, i32 -1;
    cbr i1 %226(prob = 0.5), ^b12, ^b13;
^while.header15:
    i32 %227 = phi [^while.body14, i32 %236] [^b11, i32 0];
    i32 %228 = phi [^while.body14, i32 %228] [^b11, i32 %214];
    i32 %229 = phi [^b11, i32 0] [^while.body14, i32 %236];
    i1 %230 = scmp lt i32 %229, i32 32;
    cbr i1 %230(prob = 0.97), ^while.body14, ^entry6;
^b12:
    i32* %231 = getelementptr &(i32* %224)[i32 %222];
    i32 %232 = load i32* %231;
    i1 %233 = scmp lt i32 %223, i32 %232;
    ubr ^b13;
^while.body14:
    i32* %234 = getelementptr &([32 * i32]* %result)[i64 0][i32 %227];
    i32 %235 = load i32* %234;
    call (i32) -> void @putint(i32 %235);
    i32 %236 = add i32 %227, i32 1;
    store i32* %i12 with i32 %236;
    ubr ^while.header15;
^entry6:
    store i32* %i4 with i32 0;
    ubr ^while.header16;
^b13:
    i1 %237 = phi [^while.header14, i1 false] [^b12, i1 %233];
    cbr i1 %237(prob = 0.97), ^while.body15, ^b14;
^while.body15:
    i32 %238 = add i32 %222, i32 1;
    i32* %239 = getelementptr &(i32* %224)[i32 %238];
    i32* %240 = getelementptr &(i32* %224)[i32 %222];
    i32 %241 = load i32* %240;
    store i32* %239 with i32 %241;
    i32 %242 = load i32* %j;
    i32 %243 = load i32* %temp;
    i32 %244 = add i32 %242, i32 -1;
    store i32* %j with i32 %244;
    ubr ^while.header14;
^b14:
    i32 %245 = add i32 %222, i32 1;
    i32* %246 = getelementptr &(i32* %224)[i32 %245];
    store i32* %246 with i32 %223;
    i32 %247 = load i32* %n;
    i32 %248 = load i32* %i5;
    i32 %249 = add i32 %248, i32 1;
    store i32* %i5 with i32 %249;
    ubr ^while.header13;
^while.header16:
    i32 %250 = phi [^while.body16, i32 %259] [^entry6, i32 %228];
    i32 %251 = phi [^while.body16, i32 %261] [^entry6, i32 0];
    i32* %252 = phi [^while.body16, i32* %252] [^entry6, i32* %32];
    i32* %253 = phi [^while.body16, i32* %253] [^entry6, i32* %0];
    i32 %254 = phi [^entry6, i32 0] [^while.body16, i32 %261];
    i1 %255 = scmp lt i32 %254, i32 %250;
    cbr i1 %255(prob = 0.97), ^while.body16, ^b15;
^while.body16:
    i32* %256 = getelementptr &(i32* %252)[i32 %251];
    i32* %257 = getelementptr &(i32* %253)[i32 %251];
    i32 %258 = load i32* %257;
    store i32* %256 with i32 %258;
    i32 %259 = load i32* %n;
    i32 %260 = load i32* %i4;
    i32 %261 = add i32 %260, i32 1;
    store i32* %i4 with i32 %261;
    ubr ^while.header16;
^b15:
    store i32* %i12 with i32 0;
    i32 %262 = call (i32*, i32, i32, i32*) -> i32 @QuickSort(i32* %32, i32 0, i32 31, i32* %n);
    i32 %263 = load i32* %i12;
    i32 %264 = load i32* %n;
    ubr ^while.header17;
^while.header17:
    i32 %265 = phi [^while.body17, i32 %271] [^b15, i32 %263];
    i32 %266 = phi [^while.body17, i32 %266] [^b15, i32 %264];
    i32 %267 = phi [^b15, i32 %263] [^while.body17, i32 %271];
    i1 %268 = scmp lt i32 %267, i32 32;
    cbr i1 %268(prob = 0.97), ^while.body17, ^entry7;
^while.body17:
    i32* %269 = getelementptr &([32 * i32]* %result)[i64 0][i32 %265];
    i32 %270 = load i32* %269;
    call (i32) -> void @putint(i32 %270);
    i32 %271 = add i32 %265, i32 1;
    store i32* %i12 with i32 %271;
    ubr ^while.header17;
^entry7:
    store i32* %i3 with i32 0;
    ubr ^while.header18;
^while.header18:
    i32 %272 = phi [^while.body18, i32 %281] [^entry7, i32 %266];
    i32 %273 = phi [^while.body18, i32 %283] [^entry7, i32 0];
    i32* %274 = phi [^while.body18, i32* %274] [^entry7, i32* %32];
    i32* %275 = phi [^while.body18, i32* %275] [^entry7, i32* %0];
    i32 %276 = phi [^entry7, i32 0] [^while.body18, i32 %283];
    i1 %277 = scmp lt i32 %276, i32 %272;
    cbr i1 %277(prob = 0.97), ^while.body18, ^b16;
^while.body18:
    i32* %278 = getelementptr &(i32* %274)[i32 %273];
    i32* %279 = getelementptr &(i32* %275)[i32 %273];
    i32 %280 = load i32* %279;
    store i32* %278 with i32 %280;
    i32 %281 = load i32* %n;
    i32 %282 = load i32* %i3;
    i32 %283 = add i32 %282, i32 1;
    store i32* %i3 with i32 %283;
    ubr ^while.header18;
^b16:
    store i32* %stride1 with i32 4;
    store i32* %sum1 with i32 0;
    store i32* %i2 with i32 0;
    ubr ^while.header19;
^while.header19:
    i32 %284 = phi [^b18, i32 %308] [^b16, i32 %272];
    i32 %285 = phi [^b18, i32 %312] [^b16, i32 0];
    i32 %286 = phi [^b18, i32 %310] [^b16, i32 0];
    i32 %287 = phi [^b18, i32 %311] [^b16, i32 4];
    i32* %288 = phi [^b18, i32* %288] [^b16, i32* %32];
    i32 %289 = phi [^b16, i32 0] [^b18, i32 %312];
    i1 %290 = scmp lt i32 %289, i32 %284;
    cbr i1 %290(prob = 0.97), ^while.body19, ^b17;
^b17:
    store i32* %i12 with i32 0;
    ubr ^while.header20;
^while.body19:
    i32* %291 = getelementptr &(i32* %288)[i32 %285];
    i32 %292 = load i32* %291;
    i32 %293 = add i32 %292, i32 %286;
    store i32* %sum1 with i32 %293;
    i32 %294 = srem i32 %285, i32 %287;
    i32 %295 = add i32 %287, i32 -1;
    i1 %296 = scmp neq i32 %294, i32 %295;
    cbr i1 %296(prob = 0.5), ^if.then4, ^if.else1;
^if.then4:
    store i32* %291 with i32 0;
    i32 %297 = load i32* %n;
    i32 %298 = load i32* %i2;
    i32 %299 = load i32* %sum1;
    i32 %300 = load i32* %stride1;
    ubr ^b18;
^if.else1:
    store i32* %291 with i32 %293;
    i32 %301 = load i32* %n;
    i32 %302 = load i32* %i2;
    i32 %303 = load i32* %stride1;
    store i32* %sum1 with i32 0;
    ubr ^b18;
^while.header20:
    i32 %304 = phi [^while.body20, i32 %315] [^b17, i32 0];
    i32 %305 = phi [^while.body20, i32 %305] [^b17, i32 %284];
    i32 %306 = phi [^b17, i32 0] [^while.body20, i32 %315];
    i1 %307 = scmp lt i32 %306, i32 32;
    cbr i1 %307(prob = 0.97), ^while.body20, ^entry8;
^b18:
    i32 %308 = phi [^if.else1, i32 %301] [^if.then4, i32 %297];
    i32 %309 = phi [^if.else1, i32 %302] [^if.then4, i32 %298];
    i32 %310 = phi [^if.else1, i32 0] [^if.then4, i32 %299];
    i32 %311 = phi [^if.else1, i32 %303] [^if.then4, i32 %300];
    i32 %312 = add i32 %309, i32 1;
    store i32* %i2 with i32 %312;
    ubr ^while.header19;
^while.body20:
    i32* %313 = getelementptr &([32 * i32]* %result)[i64 0][i32 %304];
    i32 %314 = load i32* %313;
    call (i32) -> void @putint(i32 %314);
    i32 %315 = add i32 %304, i32 1;
    store i32* %i12 with i32 %315;
    ubr ^while.header20;
^entry8:
    store i32* %i1 with i32 0;
    ubr ^while.header21;
^while.header21:
    i32 %316 = phi [^while.body21, i32 %325] [^entry8, i32 %305];
    i32 %317 = phi [^while.body21, i32 %327] [^entry8, i32 0];
    i32* %318 = phi [^while.body21, i32* %318] [^entry8, i32* %32];
    i32* %319 = phi [^while.body21, i32* %319] [^entry8, i32* %0];
    i32 %320 = phi [^entry8, i32 0] [^while.body21, i32 %327];
    i1 %321 = scmp lt i32 %320, i32 %316;
    cbr i1 %321(prob = 0.97), ^while.body21, ^b19;
^while.body21:
    i32* %322 = getelementptr &(i32* %318)[i32 %317];
    i32* %323 = getelementptr &(i32* %319)[i32 %317];
    i32 %324 = load i32* %323;
    store i32* %322 with i32 %324;
    i32 %325 = load i32* %n;
    i32 %326 = load i32* %i1;
    i32 %327 = add i32 %326, i32 1;
    store i32* %i1 with i32 %327;
    ubr ^while.header21;
^b19:
    store i32* %stride with i32 3;
    store i32* %i with i32 0;
    store i32* %sum with i32 0;
    store i32* %lastnum with i32 0;
    ubr ^while.header22;
^while.header22:
    i32 %328 = phi [^b21, i32 %349] [^b19, i32 %316];
    i32 %329 = phi [^b21, i32 %350] [^b19, i32 0];
    i32 %330 = phi [^b21, i32 %354] [^b19, i32 0];
    i32 %331 = phi [^b21, i32 %352] [^b19, i32 0];
    i32 %332 = phi [^b21, i32 %353] [^b19, i32 3];
    i32* %333 = phi [^b21, i32* %333] [^b19, i32* %32];
    i32 %334 = phi [^b19, i32 0] [^b21, i32 %354];
    i1 %335 = scmp lt i32 %334, i32 %328;
    cbr i1 %335(prob = 0.97), ^while.body22, ^b20;
^b20:
    i32 %336 = sub i32 %328, i32 %332;
    i32 %337 = add i32 %336, i32 1;
    store i32* %i with i32 %337;
    ubr ^while.header23;
^while.body22:
    i32 %338 = add i32 %332, i32 -1;
    i1 %339 = scmp lt i32 %330, i32 %338;
    cbr i1 %339(prob = 0.5), ^if.then5, ^if.else2;
^if.then5:
    i32* %340 = getelementptr &(i32* %333)[i32 %330];
    i32 %341 = load i32* %340;
    i32 %342 = add i32 %341, i32 %331;
    store i32* %sum with i32 %342;
    ubr ^b21;
^if.else2:
    i1 %343 = scmp eq i32 %330, i32 %338;
    cbr i1 %343(prob = 0.5), ^if.then6, ^if.else3;
^while.header23:
    i32 %344 = phi [^while.body23, i32 %363] [^b20, i32 %328];
    i32 %345 = phi [^while.body23, i32 %365] [^b20, i32 %337];
    i32* %346 = phi [^while.body23, i32* %346] [^b20, i32* %333];
    i32 %347 = phi [^while.body23, i32 %365] [^b20, i32 %337];
    i1 %348 = scmp lt i32 %347, i32 %344;
    cbr i1 %348(prob = 0.97), ^while.body23, ^while.header24;
^b21:
    i32 %349 = phi [^if.else3, i32 %375] [^if.then6, i32 %357] [^if.then5, i32 %328];
    i32 %350 = phi [^if.else3, i32 %376] [^if.then6, i32 %358] [^if.then5, i32 %329];
    i32 %351 = phi [^if.else3, i32 %377] [^if.then6, i32 %359] [^if.then5, i32 %330];
    i32 %352 = phi [^if.else3, i32 %378] [^if.then6, i32 %360] [^if.then5, i32 %342];
    i32 %353 = phi [^if.else3, i32 %379] [^if.then6, i32 %361] [^if.then5, i32 %332];
    i32 %354 = add i32 %351, i32 1;
    store i32* %i with i32 %354;
    ubr ^while.header22;
^if.then6:
    i32 %355 = load i32* %333;
    store i32* %lastnum with i32 %355;
    i32 %356 = sdiv i32 %331, i32 %332;
    store i32* %333 with i32 %356;
    i32 %357 = load i32* %n;
    i32 %358 = load i32* %lastnum;
    i32 %359 = load i32* %i;
    i32 %360 = load i32* %sum;
    i32 %361 = load i32* %stride;
    ubr ^b21;
^while.body23:
    i32* %362 = getelementptr &(i32* %346)[i32 %345];
    store i32* %362 with i32 0;
    i32 %363 = load i32* %n;
    i32 %364 = load i32* %i;
    i32 %365 = add i32 %364, i32 1;
    store i32* %i with i32 %365;
    ubr ^while.header23;
^if.else3:
    i32* %366 = getelementptr &(i32* %333)[i32 %330];
    i32 %367 = load i32* %366;
    i32 %368 = add i32 %367, i32 %331;
    i32 %369 = sub i32 %368, i32 %329;
    store i32* %sum with i32 %369;
    i32 %370 = sub i32 %330, i32 %332;
    i32 %371 = add i32 %370, i32 1;
    i32* %372 = getelementptr &(i32* %333)[i32 %371];
    i32 %373 = load i32* %372;
    store i32* %lastnum with i32 %373;
    i32 %374 = sdiv i32 %369, i32 %332;
    store i32* %372 with i32 %374;
    i32 %375 = load i32* %n;
    i32 %376 = load i32* %lastnum;
    i32 %377 = load i32* %i;
    i32 %378 = load i32* %sum;
    i32 %379 = load i32* %stride;
    ubr ^b21;
^while.header24:
    i32 %380 = phi [^while.header23, i32 0] [^while.body24, i32 %385];
    i32 %381 = phi [^while.header23, i32 0] [^while.body24, i32 %385];
    i1 %382 = scmp lt i32 %381, i32 32;
    cbr i1 %382(prob = 0.97), ^while.body24, ^b22;
^while.body24:
    i32* %383 = getelementptr &([32 * i32]* %result)[i64 0][i32 %380];
    i32 %384 = load i32* %383;
    call (i32) -> void @putint(i32 %384);
    i32 %385 = add i32 %380, i32 1;
    ubr ^while.header24;
^b22:
    ret i32 0;
}
