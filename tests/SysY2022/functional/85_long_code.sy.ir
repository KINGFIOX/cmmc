internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @QuickSort(i32*, i32, i32, i32*) -> i32 {
^entry(i32* %arg, i32 %arg1, i32 %arg2, i32* %arg3):
    i32** %arr = alloc i32*;
    store i32** %arr with i32* %arg;
    i32* %low = alloc i32;
    store i32* %low with i32 %arg1;
    i32* %high = alloc i32;
    store i32* %high with i32 %arg2;
    i1 %0 = scmp lt i32 %arg1, i32 %arg2;
    cbr i1 %0, [ ^indirect i32** %arr, i32* %high, i32* %low, i32* %arg, i32 %arg2, i32 %arg1, i32* %arg3, i32* %arg, i1 %0 ], [ ^b ];
^indirect(i32** %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32* %arg6, i32* %arg7, i1 %arg8):
    i32* %i = alloc i32;
    store i32* %i with i32 %arg5;
    i32* %j = alloc i32;
    store i32* %j with i32 %arg4;
    i32* %k = alloc i32;
    i32* %0 = getelementptr &(i32* %arg3)[i32 %arg5];
    i32 %1 = load i32* %0;
    store i32* %k with i32 %1;
    cbr i1 %arg8, [ ^indirect1 i32* %arg2, i32** %arg, i32* %arg1, i32* %k, i32* %j, i32* %i, i32* %arg6, i32* %arg7, i32 %arg5, i32 %arg4, i32 %1 ], [ ^b1 i32* %arg2, i32* %arg1, i32** %arg, i32* %i, i32* %arg6, i32* %arg7, i32 %arg5, i32 %1 ];
^b():
    ret i32 0;
^indirect1(i32* %arg, i32** %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i1 %0 = scmp lt i32 %arg8, i32 %arg9;
    cbr i1 %0, [ ^b2 i32* %arg, i32* %arg5, i32* %arg2, i32* %arg3, i32** %arg1, i32* %arg4, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10 ], [ ^b3 i32* %arg, i32** %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10 ];
^b1(i32* %arg, i32* %arg1, i32** %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7):
    i32* %0 = getelementptr &(i32* %arg5)[i32 %arg6];
    store i32* %0 with i32 %arg7;
    i32 %1 = load i32* %arg;
    i32 %2 = sub i32 %arg6, i32 1;
    i32 %3 = call (i32*, i32, i32, i32*) -> i32 @QuickSort(i32* %arg5, i32 %1, i32 %2, i32* %arg4);
    i32 %4 = load i32* %arg3;
    i32 %5 = load i32* %arg1;
    i32* %6 = load i32** %arg2;
    i32 %7 = add i32 %4, i32 1;
    i32 %8 = call (i32*, i32, i32, i32*) -> i32 @QuickSort(i32* %6, i32 %7, i32 %5, i32* %arg4);
    ret i32 0;
^b2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32** %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i32* %0 = getelementptr &(i32* %arg7)[i32 %arg9];
    i32 %1 = load i32* %0;
    i32 %2 = sub i32 %arg10, i32 1;
    i1 %3 = scmp gt i32 %1, i32 %2;
    cbr i1 %3, [ ^while.body i32* %arg, i32* %arg2, i32* %arg3, i32** %arg4, i32* %arg1, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10 ], [ ^b3 i32* %arg, i32** %arg4, i32* %arg2, i32* %arg3, i32* %arg5, i32* %arg1, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10 ];
^b3(i32* %arg, i32** %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i1 %0 = scmp lt i32 %arg8, i32 %arg9;
    cbr i1 %0, [ ^indirect2 i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, i32** %arg1, i32* %arg5, i32 %arg9, i32 %arg8, i32* %arg6, i32* %arg7 ], [ ^while.header i32* %arg, i32** %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg9, i32 %arg8, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10 ];
^indirect2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32** %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32* %arg8, i32* %arg9):
    i32* %0 = getelementptr &(i32* %arg9)[i32 %arg7];
    i32* %1 = getelementptr &(i32* %arg9)[i32 %arg6];
    i32 %2 = load i32* %1;
    store i32* %0 with i32 %2;
    i32 %3 = load i32* %arg2;
    i32 %4 = load i32* %arg3;
    i32 %5 = add i32 %arg7, i32 1;
    store i32* %arg5 with i32 %5;
    ubr [ ^while.header i32* %arg, i32** %arg4, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg5, i32 %4, i32 %5, i32* %arg8, i32* %arg9, i32 %5, i32 %4, i32 %3 ];
^while.body(i32* %arg, i32* %arg1, i32* %arg2, i32** %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i32 %0 = sub i32 %arg9, i32 1;
    store i32* %arg5 with i32 %0;
    i1 %1 = scmp lt i32 %arg8, i32 %0;
    cbr i1 %1, [ ^b2 i32* %arg, i32* %arg4, i32* %arg1, i32* %arg2, i32** %arg3, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %0, i32 %arg10 ], [ ^b3 i32* %arg, i32** %arg3, i32* %arg1, i32* %arg2, i32* %arg5, i32* %arg4, i32* %arg6, i32* %arg7, i32 %arg8, i32 %0, i32 %arg10 ];
^while.header(i32* %arg, i32** %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12):
    i1 %0 = scmp lt i32 %arg7, i32 %arg6;
    cbr i1 %0, [ ^b4 i32* %arg, i32* %arg4, i32* %arg2, i32* %arg3, i32** %arg1, i32* %arg5, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12 ], [ ^b5 i32* %arg3, i32* %arg2, i32* %arg, i32** %arg1, i32* %arg4, i32* %arg5, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12 ];
^b4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32** %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i32* %0 = getelementptr &(i32* %arg7)[i32 %arg8];
    i32 %1 = load i32* %0;
    i1 %2 = scmp lt i32 %1, i32 %arg10;
    cbr i1 %2, [ ^while.body1 i32* %arg, i32* %arg2, i32* %arg3, i32** %arg4, i32* %arg1, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10 ], [ ^b5 i32* %arg3, i32* %arg2, i32* %arg, i32** %arg4, i32* %arg1, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10 ];
^b5(i32* %arg, i32* %arg1, i32* %arg2, i32** %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i1 %0 = scmp lt i32 %arg8, i32 %arg9;
    cbr i1 %0, [ ^indirect3 i32* %arg2, i32* %arg1, i32* %arg, i32* %arg5, i32** %arg3, i32* %arg4, i32 %arg8, i32 %arg9, i32* %arg6, i32* %arg7 ], [ ^while.header1 i32* %arg2, i32** %arg3, i32* %arg1, i32* %arg, i32* %arg4, i32* %arg5, i32 %arg9, i32 %arg8, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10 ];
^while.body1(i32* %arg, i32* %arg1, i32* %arg2, i32** %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i32 %0 = add i32 %arg8, i32 1;
    store i32* %arg5 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 %arg9;
    cbr i1 %1, [ ^b4 i32* %arg, i32* %arg4, i32* %arg1, i32* %arg2, i32** %arg3, i32* %arg5, i32* %arg6, i32* %arg7, i32 %0, i32 %arg9, i32 %arg10 ], [ ^b5 i32* %arg2, i32* %arg1, i32* %arg, i32** %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %0, i32 %arg9, i32 %arg10 ];
^indirect3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32** %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32* %arg8, i32* %arg9):
    i32* %0 = getelementptr &(i32* %arg9)[i32 %arg7];
    i32* %1 = getelementptr &(i32* %arg9)[i32 %arg6];
    i32 %2 = load i32* %1;
    store i32* %0 with i32 %2;
    i32 %3 = load i32* %arg2;
    i32 %4 = load i32* %arg3;
    i32 %5 = sub i32 %arg7, i32 1;
    store i32* %arg5 with i32 %5;
    i1 %6 = scmp lt i32 %arg6, i32 %5;
    cbr i1 %6, [ ^indirect1 i32* %arg, i32** %arg4, i32* %arg1, i32* %arg2, i32* %arg5, i32* %arg3, i32* %arg8, i32* %arg9, i32 %4, i32 %5, i32 %3 ], [ ^b1 i32* %arg, i32* %arg1, i32** %arg4, i32* %arg3, i32* %arg8, i32* %arg9, i32 %4, i32 %3 ];
^while.header1(i32* %arg, i32** %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12):
    i1 %0 = scmp lt i32 %arg7, i32 %arg6;
    cbr i1 %0, [ ^indirect1 i32* %arg, i32** %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12 ], [ ^b1 i32* %arg, i32* %arg2, i32** %arg1, i32* %arg5, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg12 ];
}
func @main() -> i32 { NoRecurse Entry } {
^entry():
    i32* %n = alloc i32;
    store i32* %n with i32 32;
    [32 * i32]* %arr = alloc [32 * i32];
    [32 * i32]* %result = alloc [32 * i32];
    i32* %0 = getelementptr &([32 * i32]* %arr)[i32 0][i32 0];
    store i32* %0 with i32 7;
    i32* %1 = getelementptr &([32 * i32]* %arr)[i32 0][i32 1];
    store i32* %1 with i32 23;
    i32* %2 = getelementptr &([32 * i32]* %arr)[i32 0][i32 2];
    store i32* %2 with i32 89;
    i32* %3 = getelementptr &([32 * i32]* %arr)[i32 0][i32 3];
    store i32* %3 with i32 26;
    i32* %4 = getelementptr &([32 * i32]* %arr)[i32 0][i32 4];
    store i32* %4 with i32 282;
    i32* %5 = getelementptr &([32 * i32]* %arr)[i32 0][i32 5];
    store i32* %5 with i32 254;
    i32* %6 = getelementptr &([32 * i32]* %arr)[i32 0][i32 6];
    store i32* %6 with i32 27;
    i32* %7 = getelementptr &([32 * i32]* %arr)[i32 0][i32 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([32 * i32]* %arr)[i32 0][i32 8];
    store i32* %8 with i32 83;
    i32* %9 = getelementptr &([32 * i32]* %arr)[i32 0][i32 9];
    store i32* %9 with i32 273;
    i32* %10 = getelementptr &([32 * i32]* %arr)[i32 0][i32 10];
    store i32* %10 with i32 574;
    i32* %11 = getelementptr &([32 * i32]* %arr)[i32 0][i32 11];
    store i32* %11 with i32 905;
    i32* %12 = getelementptr &([32 * i32]* %arr)[i32 0][i32 12];
    store i32* %12 with i32 354;
    i32* %13 = getelementptr &([32 * i32]* %arr)[i32 0][i32 13];
    store i32* %13 with i32 657;
    i32* %14 = getelementptr &([32 * i32]* %arr)[i32 0][i32 14];
    store i32* %14 with i32 935;
    i32* %15 = getelementptr &([32 * i32]* %arr)[i32 0][i32 15];
    store i32* %15 with i32 264;
    i32* %16 = getelementptr &([32 * i32]* %arr)[i32 0][i32 16];
    store i32* %16 with i32 639;
    i32* %17 = getelementptr &([32 * i32]* %arr)[i32 0][i32 17];
    store i32* %17 with i32 459;
    i32* %18 = getelementptr &([32 * i32]* %arr)[i32 0][i32 18];
    store i32* %18 with i32 29;
    i32* %19 = getelementptr &([32 * i32]* %arr)[i32 0][i32 19];
    store i32* %19 with i32 68;
    i32* %20 = getelementptr &([32 * i32]* %arr)[i32 0][i32 20];
    store i32* %20 with i32 929;
    i32* %21 = getelementptr &([32 * i32]* %arr)[i32 0][i32 21];
    store i32* %21 with i32 756;
    i32* %22 = getelementptr &([32 * i32]* %arr)[i32 0][i32 22];
    store i32* %22 with i32 452;
    i32* %23 = getelementptr &([32 * i32]* %arr)[i32 0][i32 23];
    store i32* %23 with i32 279;
    i32* %24 = getelementptr &([32 * i32]* %arr)[i32 0][i32 24];
    store i32* %24 with i32 58;
    i32* %25 = getelementptr &([32 * i32]* %arr)[i32 0][i32 25];
    store i32* %25 with i32 87;
    i32* %26 = getelementptr &([32 * i32]* %arr)[i32 0][i32 26];
    store i32* %26 with i32 96;
    i32* %27 = getelementptr &([32 * i32]* %arr)[i32 0][i32 27];
    store i32* %27 with i32 36;
    i32* %28 = getelementptr &([32 * i32]* %arr)[i32 0][i32 28];
    store i32* %28 with i32 39;
    i32* %29 = getelementptr &([32 * i32]* %arr)[i32 0][i32 29];
    store i32* %29 with i32 28;
    i32* %30 = getelementptr &([32 * i32]* %arr)[i32 0][i32 30];
    store i32* %30 with i32 1;
    i32* %31 = getelementptr &([32 * i32]* %arr)[i32 0][i32 31];
    store i32* %31 with i32 290;
    i32* %t = alloc i32;
    i32* %32 = getelementptr &([32 * i32]* %result)[i32 0][i32 0];
    i32* %i = alloc i32;
    ubr [ ^while.body i32* %i, i32* %t, i32* %32, i32* %n, [32 * i32]* %result, [32 * i32]* %result, i32 0, [32 * i32]* %arr, [32 * i32]* %result ];
^while.body(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [32 * i32]* %arg4, [32 * i32]* %arg5, i32 %arg6, [32 * i32]* %arg7, [32 * i32]* %arg8):
    i32* %0 = getelementptr &([32 * i32]* %arg8)[i32 0][i32 %arg6];
    i32* %1 = getelementptr &([32 * i32]* %arg7)[i32 0][i32 %arg6];
    i32 %2 = load i32* %1;
    store i32* %0 with i32 %2;
    i32 %3 = add i32 %arg6, i32 1;
    store i32* %arg with i32 %3;
    i1 %4 = scmp lt i32 %3, i32 32;
    cbr i1 %4, [ ^while.body i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [32 * i32]* %arg4, [32 * i32]* %arg5, i32 %3, [32 * i32]* %arg7, [32 * i32]* %arg8 ], [ ^entry1 [32 * i32]* %arg4, i32* %arg3, i32* %arg2, i32* %arg1, [32 * i32]* %arg5, [32 * i32]* %arg7, [32 * i32]* %arg8 ];
^entry1([32 * i32]* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [32 * i32]* %arg4, [32 * i32]* %arg5, [32 * i32]* %arg6):
    i32* %i = alloc i32;
    ubr [ ^while.body1 i32* %arg3, [32 * i32]* %arg, i32* %i, i32* %arg2, i32* %arg1, [32 * i32]* %arg4, i32 0, [32 * i32]* %arg6, [32 * i32]* %arg5 ];
^while.body1(i32* %arg, [32 * i32]* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [32 * i32]* %arg5, i32 %arg6, [32 * i32]* %arg7, [32 * i32]* %arg8):
    i32* %0 = getelementptr &([32 * i32]* %arg1)[i32 0][i32 %arg6];
    i32 %1 = load i32* %0;
    call (i32) -> void @putint(i32 %1);
    i32 %2 = add i32 %arg6, i32 1;
    i1 %3 = scmp lt i32 %2, i32 32;
    cbr i1 %3, [ ^while.body1 i32* %arg, [32 * i32]* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [32 * i32]* %arg5, i32 %2, [32 * i32]* %arg7, [32 * i32]* %arg8 ], [ ^entry2 i32* %arg4, i32* %arg2, [32 * i32]* %arg1, i32* %arg, i32* %arg3, i32* %arg4, [32 * i32]* %arg5, [32 * i32]* %arg8, [32 * i32]* %arg7 ];
^entry2(i32* %arg, i32* %arg1, [32 * i32]* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, [32 * i32]* %arg6, [32 * i32]* %arg7, [32 * i32]* %arg8):
    i32* %i = alloc i32;
    i32* %j = alloc i32;
    store i32* %i with i32 0;
    ubr [ ^while.body2 i32* %i, i32* %j, i32* %arg, i32* %arg1, [32 * i32]* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, [32 * i32]* %arg6, i32 32, i32 0, [32 * i32]* %arg7, [32 * i32]* %arg8 ];
^while.body2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [32 * i32]* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, [32 * i32]* %arg8, i32 %arg9, i32 %arg10, [32 * i32]* %arg11, [32 * i32]* %arg12):
    store i32* %arg1 with i32 0;
    i32 %0 = sub i32 %arg9, i32 %arg10;
    i32 %1 = sub i32 %0, i32 1;
    i1 %2 = scmp lt i32 0, i32 %1;
    cbr i1 %2, [ ^while.body3 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [32 * i32]* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, [32 * i32]* %arg8, i32 %arg9, i32 %arg10, i32 0, [32 * i32]* %arg11, [32 * i32]* %arg12 ], [ ^indirect i32* %arg1, i32* %arg, i32 %arg10, i32* %arg2, i32* %arg3, [32 * i32]* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, [32 * i32]* %arg8, i32 %arg9, [32 * i32]* %arg11, [32 * i32]* %arg12 ];
^while.body3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [32 * i32]* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, [32 * i32]* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, [32 * i32]* %arg12, [32 * i32]* %arg13):
    i32* %0 = getelementptr &([32 * i32]* %arg13)[i32 0][i32 %arg11];
    i32 %1 = load i32* %0;
    i32 %2 = add i32 %arg11, i32 1;
    i32* %3 = getelementptr &([32 * i32]* %arg13)[i32 0][i32 %2];
    i32 %4 = load i32* %3;
    i1 %5 = scmp gt i32 %1, i32 %4;
    cbr i1 %5, [ ^indirect1 i32* %arg, i32* %arg1, i32* %0, i32* %3, i32 %4, i32 %1, i32* %arg2, i32* %arg7, i32* %arg6, i32* %arg5, [32 * i32]* %arg4, i32* %arg3, [32 * i32]* %arg8, [32 * i32]* %arg12, [32 * i32]* %arg13 ], [ ^b i32* %arg, i32* %arg1, i32 %arg11, i32* %arg2, i32* %arg3, [32 * i32]* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, [32 * i32]* %arg8, i32 %arg9, i32 %arg10, [32 * i32]* %arg12, [32 * i32]* %arg13 ];
^indirect(i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, [32 * i32]* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, [32 * i32]* %arg9, i32 %arg10, [32 * i32]* %arg11, [32 * i32]* %arg12):
    i32 %0 = add i32 %arg2, i32 1;
    store i32* %arg1 with i32 %0;
    i32 %1 = sub i32 %arg10, i32 1;
    i1 %2 = scmp lt i32 %0, i32 %1;
    cbr i1 %2, [ ^while.body2 i32* %arg1, i32* %arg, i32* %arg3, i32* %arg4, [32 * i32]* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, [32 * i32]* %arg9, i32 %arg10, i32 %0, [32 * i32]* %arg11, [32 * i32]* %arg12 ], [ ^while.body4 i32* %arg6, [32 * i32]* %arg5, i32* %arg4, i32* %arg7, i32* %arg8, [32 * i32]* %arg9, i32 %arg10, i32 0, [32 * i32]* %arg12, [32 * i32]* %arg11 ];
^indirect1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, [32 * i32]* %arg10, i32* %arg11, [32 * i32]* %arg12, [32 * i32]* %arg13, [32 * i32]* %arg14):
    store i32* %arg3 with i32 %arg5;
    store i32* %arg2 with i32 %arg4;
    i32 %0 = load i32* %arg1;
    i32 %1 = load i32* %arg;
    i32 %2 = load i32* %arg6;
    i32 %3 = add i32 %0, i32 1;
    store i32* %arg1 with i32 %3;
    i32 %4 = sub i32 %2, i32 %1;
    i32 %5 = sub i32 %4, i32 1;
    i1 %6 = scmp lt i32 %3, i32 %5;
    cbr i1 %6, [ ^while.body3 i32* %arg, i32* %arg1, i32* %arg6, i32* %arg11, [32 * i32]* %arg10, i32* %arg9, i32* %arg8, i32* %arg7, [32 * i32]* %arg12, i32 %2, i32 %1, i32 %3, [32 * i32]* %arg13, [32 * i32]* %arg14 ], [ ^indirect i32* %arg1, i32* %arg, i32 %1, i32* %arg6, i32* %arg11, [32 * i32]* %arg10, i32* %arg9, i32* %arg8, i32* %arg7, [32 * i32]* %arg12, i32 %2, [32 * i32]* %arg13, [32 * i32]* %arg14 ];
^b(i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, [32 * i32]* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, [32 * i32]* %arg9, i32 %arg10, i32 %arg11, [32 * i32]* %arg12, [32 * i32]* %arg13):
    i32 %0 = add i32 %arg2, i32 1;
    store i32* %arg1 with i32 %0;
    i32 %1 = sub i32 %arg10, i32 %arg11;
    i32 %2 = sub i32 %1, i32 1;
    i1 %3 = scmp lt i32 %0, i32 %2;
    cbr i1 %3, [ ^while.body3 i32* %arg, i32* %arg1, i32* %arg3, i32* %arg4, [32 * i32]* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, [32 * i32]* %arg9, i32 %arg10, i32 %arg11, i32 %0, [32 * i32]* %arg12, [32 * i32]* %arg13 ], [ ^indirect i32* %arg1, i32* %arg, i32 %arg11, i32* %arg3, i32* %arg4, [32 * i32]* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, [32 * i32]* %arg9, i32 %arg10, [32 * i32]* %arg12, [32 * i32]* %arg13 ];
^while.body4(i32* %arg, [32 * i32]* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [32 * i32]* %arg5, i32 %arg6, i32 %arg7, [32 * i32]* %arg8, [32 * i32]* %arg9):
    i32* %0 = getelementptr &([32 * i32]* %arg1)[i32 0][i32 %arg7];
    i32 %1 = load i32* %0;
    call (i32) -> void @putint(i32 %1);
    i32 %2 = add i32 %arg7, i32 1;
    i1 %3 = scmp lt i32 %2, i32 32;
    cbr i1 %3, [ ^while.body4 i32* %arg, [32 * i32]* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [32 * i32]* %arg5, i32 %arg6, i32 %2, [32 * i32]* %arg8, [32 * i32]* %arg9 ], [ ^entry3 i32* %arg2, i32* %arg, [32 * i32]* %arg1, i32* %arg4, i32* %arg3, [32 * i32]* %arg5, i32 %arg6, [32 * i32]* %arg9, [32 * i32]* %arg8 ];
^entry3(i32* %arg, i32* %arg1, [32 * i32]* %arg2, i32* %arg3, i32* %arg4, [32 * i32]* %arg5, i32 %arg6, [32 * i32]* %arg7, [32 * i32]* %arg8):
    i32* %mid = alloc i32;
    i32 %0 = srem i32 %arg6, i32 2;
    i1 %1 = scmp eq i32 %0, i32 0;
    cbr i1 %1, [ ^indirect2 i32* %mid, i32 %arg6, i32* %arg4, i32* %arg3, [32 * i32]* %arg2, i32* %arg1, i32* %arg, [32 * i32]* %arg5, i32 %arg6, [32 * i32]* %arg8, [32 * i32]* %arg7 ], [ ^indirect3 i32* %mid, i32 %arg6, i32* %arg4, i32* %arg3, [32 * i32]* %arg2, i32* %arg1, i32* %arg, [32 * i32]* %arg5, i32 %arg6, [32 * i32]* %arg8, [32 * i32]* %arg7 ];
^indirect2(i32* %arg, i32 %arg1, i32* %arg2, i32* %arg3, [32 * i32]* %arg4, i32* %arg5, i32* %arg6, [32 * i32]* %arg7, i32 %arg8, [32 * i32]* %arg9, [32 * i32]* %arg10):
    i32 %0 = sdiv i32 %arg1, i32 2;
    store i32* %arg with i32 %0;
    i32* %1 = getelementptr &([32 * i32]* %arg7)[i32 0][i32 %0];
    i32 %2 = load i32* %1;
    i32 %3 = sub i32 %0, i32 1;
    i32* %4 = getelementptr &([32 * i32]* %arg7)[i32 0][i32 %3];
    i32 %5 = load i32* %4;
    i32 %6 = add i32 %2, i32 %5;
    i32 %7 = sdiv i32 %6, i32 2;
    ubr [ ^b1 i32 %7, i32* %arg6, i32* %arg5, [32 * i32]* %arg4, i32* %arg3, i32* %arg2, i32 %arg8, [32 * i32]* %arg10, [32 * i32]* %arg9 ];
^indirect3(i32* %arg, i32 %arg1, i32* %arg2, i32* %arg3, [32 * i32]* %arg4, i32* %arg5, i32* %arg6, [32 * i32]* %arg7, i32 %arg8, [32 * i32]* %arg9, [32 * i32]* %arg10):
    i32 %0 = sdiv i32 %arg1, i32 2;
    store i32* %arg with i32 %0;
    i32* %1 = getelementptr &([32 * i32]* %arg7)[i32 0][i32 %0];
    i32 %2 = load i32* %1;
    ubr [ ^b1 i32 %2, i32* %arg6, i32* %arg5, [32 * i32]* %arg4, i32* %arg3, i32* %arg2, i32 %arg8, [32 * i32]* %arg10, [32 * i32]* %arg9 ];
^b1(i32 %arg, i32* %arg1, i32* %arg2, [32 * i32]* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, [32 * i32]* %arg7, [32 * i32]* %arg8):
    call (i32) -> void @putint(i32 %arg);
    [1000 * i32]* %count = alloc [1000 * i32];
    i32* %i = alloc i32;
    ubr [ ^while.body5 [1000 * i32]* %count, i32* %i, i32* %arg2, i32* %arg5, i32* %arg4, [32 * i32]* %arg3, i32* %arg1, i32 %arg6, i32 0, [32 * i32]* %arg8, [32 * i32]* %arg7 ];
^while.body5([1000 * i32]* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [32 * i32]* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, [32 * i32]* %arg9, [32 * i32]* %arg10):
    i32* %0 = getelementptr &([1000 * i32]* %arg)[i32 0][i32 %arg8];
    store i32* %0 with i32 0;
    i32 %1 = add i32 %arg8, i32 1;
    i1 %2 = scmp lt i32 %1, i32 1000;
    cbr i1 %2, [ ^while.body5 [1000 * i32]* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [32 * i32]* %arg5, i32* %arg6, i32 %arg7, i32 %1, [32 * i32]* %arg9, [32 * i32]* %arg10 ], [ ^b2 [1000 * i32]* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [32 * i32]* %arg5, i32* %arg6, i32 %arg7, [32 * i32]* %arg10, [32 * i32]* %arg9 ];
^b2([1000 * i32]* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [32 * i32]* %arg5, i32* %arg6, i32 %arg7, [32 * i32]* %arg8, [32 * i32]* %arg9):
    store i32* %arg1 with i32 0;
    i32* %max = alloc i32;
    i32* %number = alloc i32;
    store i32* %max with i32 0;
    i1 %0 = scmp lt i32 0, i32 %arg7;
    cbr i1 %0, [ ^while.body6 i32* %number, i32* %max, [1000 * i32]* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [32 * i32]* %arg5, i32* %arg6, i32 %arg7, i32 0, i32 0, i32 undef, [32 * i32]* %arg8, [32 * i32]* %arg9 ], [ ^b3 i32* %arg2, i32* %arg3, i32* %arg4, [32 * i32]* %arg5, i32* %arg6, i32 %arg7, i32 undef, [32 * i32]* %arg8, [32 * i32]* %arg9 ];
^while.body6(i32* %arg, i32* %arg1, [1000 * i32]* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, [32 * i32]* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, [32 * i32]* %arg13, [32 * i32]* %arg14):
    i32* %0 = getelementptr &([32 * i32]* %arg14)[i32 0][i32 %arg10];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &([1000 * i32]* %arg2)[i32 0][i32 %1];
    i32 %3 = load i32* %2;
    i32 %4 = add i32 %3, i32 1;
    store i32* %2 with i32 %4;
    i1 %5 = scmp gt i32 %4, i32 %arg11;
    cbr i1 %5, [ ^indirect5 i32* %arg3, i32* %arg1, [1000 * i32]* %arg2, i32* %arg, i32 %1, i32 %arg10, i32 %4, i32* %arg8, [32 * i32]* %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32 %arg9, [32 * i32]* %arg13, [32 * i32]* %arg14 ], [ ^b4 i32* %arg1, [1000 * i32]* %arg2, i32* %arg, i32* %arg3, i32 %arg10, i32* %arg4, i32* %arg5, i32* %arg6, [32 * i32]* %arg7, i32* %arg8, i32 %arg9, i32 %arg11, i32 %arg12, [32 * i32]* %arg13, [32 * i32]* %arg14 ];
^b3(i32* %arg, i32* %arg1, i32* %arg2, [32 * i32]* %arg3, i32* %arg4, i32 %arg5, i32 %arg6, [32 * i32]* %arg7, [32 * i32]* %arg8):
    call (i32) -> void @putint(i32 %arg6);
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    i1 %0 = scmp lt i32 0, i32 %arg5;
    cbr i1 %0, [ ^indirect4 i32* %i, i32* %arg2, i32* %arg, i32* %arg1, i32* %arg2, [32 * i32]* %arg3, i32* %arg4, [32 * i32]* %arg8, [32 * i32]* %arg7 ], [ ^b5 i32* %arg4, [32 * i32]* %arg3, i32* %arg2, i32* %arg1, i32* %arg, i32 %arg5, [32 * i32]* %arg7, [32 * i32]* %arg8 ];
^indirect4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [32 * i32]* %arg5, i32* %arg6, [32 * i32]* %arg7, [32 * i32]* %arg8):
    i32 %0 = load i32* %arg1;
    ubr [ ^while.body7 i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, [32 * i32]* %arg5, i32* %arg6, i32 0, i32 %0, [32 * i32]* %arg8, [32 * i32]* %arg7 ];
^indirect5(i32* %arg, i32* %arg1, [1000 * i32]* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32* %arg7, [32 * i32]* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32 %arg12, [32 * i32]* %arg13, [32 * i32]* %arg14):
    store i32* %arg1 with i32 %arg6;
    store i32* %arg3 with i32 %arg4;
    i32 %0 = add i32 %arg5, i32 1;
    store i32* %arg with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 %arg12;
    cbr i1 %1, [ ^while.body6 i32* %arg3, i32* %arg1, [1000 * i32]* %arg2, i32* %arg, i32* %arg11, i32* %arg10, i32* %arg9, [32 * i32]* %arg8, i32* %arg7, i32 %arg12, i32 %0, i32 %arg6, i32 %arg4, [32 * i32]* %arg13, [32 * i32]* %arg14 ], [ ^b3 i32* %arg11, i32* %arg10, i32* %arg9, [32 * i32]* %arg8, i32* %arg7, i32 %arg12, i32 %arg4, [32 * i32]* %arg13, [32 * i32]* %arg14 ];
^b4(i32* %arg, [1000 * i32]* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32* %arg6, i32* %arg7, [32 * i32]* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, [32 * i32]* %arg13, [32 * i32]* %arg14):
    i32 %0 = add i32 %arg4, i32 1;
    store i32* %arg3 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 %arg10;
    cbr i1 %1, [ ^while.body6 i32* %arg2, i32* %arg, [1000 * i32]* %arg1, i32* %arg3, i32* %arg5, i32* %arg6, i32* %arg7, [32 * i32]* %arg8, i32* %arg9, i32 %arg10, i32 %0, i32 %arg11, i32 %arg12, [32 * i32]* %arg13, [32 * i32]* %arg14 ], [ ^b3 i32* %arg5, i32* %arg6, i32* %arg7, [32 * i32]* %arg8, i32* %arg9, i32 %arg10, i32 %arg12, [32 * i32]* %arg13, [32 * i32]* %arg14 ];
^b5(i32* %arg, [32 * i32]* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, [32 * i32]* %arg6, [32 * i32]* %arg7):
    i32* %i = alloc i32;
    i32* %j = alloc i32;
    store i32* %i with i32 0;
    i32 %0 = sub i32 %arg5, i32 1;
    i1 %1 = scmp lt i32 0, i32 %0;
    cbr i1 %1, [ ^while.body8 i32* %i, i32* %j, i32* %arg2, i32* %arg4, i32* %arg, [32 * i32]* %arg1, i32* %arg2, i32* %arg3, i32 %arg5, i32 0, [32 * i32]* %arg6, [32 * i32]* %arg7 ], [ ^while.body9 i32* %arg4, [32 * i32]* %arg1, i32* %arg, i32* %arg3, i32* %arg2, i32 %arg5, i32 0, [32 * i32]* %arg7, [32 * i32]* %arg6 ];
^while.body7(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [32 * i32]* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, [32 * i32]* %arg8, [32 * i32]* %arg9):
    i32* %0 = getelementptr &([32 * i32]* %arg9)[i32 0][i32 %arg6];
    i32* %1 = getelementptr &([32 * i32]* %arg8)[i32 0][i32 %arg6];
    i32 %2 = load i32* %1;
    store i32* %0 with i32 %2;
    i32 %3 = add i32 %arg6, i32 1;
    store i32* %arg with i32 %3;
    i1 %4 = scmp lt i32 %3, i32 %arg7;
    cbr i1 %4, [ ^while.body7 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [32 * i32]* %arg4, i32* %arg5, i32 %3, i32 %arg7, [32 * i32]* %arg8, [32 * i32]* %arg9 ], [ ^b5 i32* %arg5, [32 * i32]* %arg4, i32* %arg3, i32* %arg2, i32* %arg1, i32 %arg7, [32 * i32]* %arg8, [32 * i32]* %arg9 ];
^while.body8(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [32 * i32]* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, [32 * i32]* %arg10, [32 * i32]* %arg11):
    store i32* %arg1 with i32 0;
    i32 %0 = sub i32 %arg8, i32 %arg9;
    i32 %1 = sub i32 %0, i32 1;
    i1 %2 = scmp lt i32 0, i32 %1;
    cbr i1 %2, [ ^while.body10 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [32 * i32]* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 0, [32 * i32]* %arg10, [32 * i32]* %arg11 ], [ ^indirect6 i32* %arg1, i32* %arg, i32 %arg9, i32* %arg2, i32* %arg3, i32* %arg4, [32 * i32]* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, [32 * i32]* %arg10, [32 * i32]* %arg11 ];
^while.body9(i32* %arg, [32 * i32]* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6, [32 * i32]* %arg7, [32 * i32]* %arg8):
    i32* %0 = getelementptr &([32 * i32]* %arg1)[i32 0][i32 %arg6];
    i32 %1 = load i32* %0;
    call (i32) -> void @putint(i32 %1);
    i32 %2 = add i32 %arg6, i32 1;
    i1 %3 = scmp lt i32 %2, i32 32;
    cbr i1 %3, [ ^while.body9 i32* %arg, [32 * i32]* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %2, [32 * i32]* %arg7, [32 * i32]* %arg8 ], [ ^entry4 i32* %arg4, i32* %arg, i32* %arg3, i32* %arg4, i32* %arg2, [32 * i32]* %arg1, i32 %arg5, [32 * i32]* %arg8, [32 * i32]* %arg7 ];
^while.body10(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [32 * i32]* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, [32 * i32]* %arg11, [32 * i32]* %arg12):
    i32* %0 = getelementptr &([32 * i32]* %arg12)[i32 0][i32 %arg10];
    i32 %1 = load i32* %0;
    i32 %2 = add i32 %arg10, i32 1;
    i32* %3 = getelementptr &([32 * i32]* %arg12)[i32 0][i32 %2];
    i32 %4 = load i32* %3;
    i1 %5 = scmp gt i32 %1, i32 %4;
    cbr i1 %5, [ ^indirect7 i32* %arg, i32* %arg1, i32* %0, i32* %3, i32 %4, i32 %1, i32* %arg2, i32* %arg7, i32* %arg6, [32 * i32]* %arg5, i32* %arg4, i32* %arg3, [32 * i32]* %arg11, [32 * i32]* %arg12 ], [ ^b6 i32* %arg, i32* %arg1, i32 %arg10, i32* %arg2, i32* %arg3, i32* %arg4, [32 * i32]* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, [32 * i32]* %arg11, [32 * i32]* %arg12 ];
^indirect6(i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, [32 * i32]* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, [32 * i32]* %arg10, [32 * i32]* %arg11):
    i32 %0 = add i32 %arg2, i32 1;
    store i32* %arg1 with i32 %0;
    i32 %1 = sub i32 %arg9, i32 1;
    i1 %2 = scmp lt i32 %0, i32 %1;
    cbr i1 %2, [ ^while.body8 i32* %arg1, i32* %arg, i32* %arg3, i32* %arg4, i32* %arg5, [32 * i32]* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %0, [32 * i32]* %arg10, [32 * i32]* %arg11 ], [ ^while.body9 i32* %arg4, [32 * i32]* %arg6, i32* %arg5, i32* %arg8, i32* %arg7, i32 %arg9, i32 0, [32 * i32]* %arg11, [32 * i32]* %arg10 ];
^entry4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [32 * i32]* %arg5, i32 %arg6, [32 * i32]* %arg7, [32 * i32]* %arg8):
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    i1 %0 = scmp lt i32 0, i32 %arg6;
    cbr i1 %0, [ ^indirect8 i32* %i, i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [32 * i32]* %arg5, [32 * i32]* %arg8, [32 * i32]* %arg7 ], [ ^b7 [32 * i32]* %arg5, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg1, i32 %arg6, [32 * i32]* %arg7, [32 * i32]* %arg8 ];
^indirect7(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32* %arg6, i32* %arg7, i32* %arg8, [32 * i32]* %arg9, i32* %arg10, i32* %arg11, [32 * i32]* %arg12, [32 * i32]* %arg13):
    store i32* %arg3 with i32 %arg5;
    store i32* %arg2 with i32 %arg4;
    i32 %0 = load i32* %arg1;
    i32 %1 = load i32* %arg;
    i32 %2 = load i32* %arg6;
    i32 %3 = add i32 %0, i32 1;
    store i32* %arg1 with i32 %3;
    i32 %4 = sub i32 %2, i32 %1;
    i32 %5 = sub i32 %4, i32 1;
    i1 %6 = scmp lt i32 %3, i32 %5;
    cbr i1 %6, [ ^while.body10 i32* %arg, i32* %arg1, i32* %arg6, i32* %arg11, i32* %arg10, [32 * i32]* %arg9, i32* %arg8, i32* %arg7, i32 %2, i32 %1, i32 %3, [32 * i32]* %arg12, [32 * i32]* %arg13 ], [ ^indirect6 i32* %arg1, i32* %arg, i32 %1, i32* %arg6, i32* %arg11, i32* %arg10, [32 * i32]* %arg9, i32* %arg8, i32* %arg7, i32 %2, [32 * i32]* %arg12, [32 * i32]* %arg13 ];
^indirect8(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, [32 * i32]* %arg6, [32 * i32]* %arg7, [32 * i32]* %arg8):
    i32 %0 = load i32* %arg1;
    ubr [ ^while.body11 i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, [32 * i32]* %arg6, i32 0, i32 %0, [32 * i32]* %arg8, [32 * i32]* %arg7 ];
^b6(i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, [32 * i32]* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, [32 * i32]* %arg11, [32 * i32]* %arg12):
    i32 %0 = add i32 %arg2, i32 1;
    store i32* %arg1 with i32 %0;
    i32 %1 = sub i32 %arg9, i32 %arg10;
    i32 %2 = sub i32 %1, i32 1;
    i1 %3 = scmp lt i32 %0, i32 %2;
    cbr i1 %3, [ ^while.body10 i32* %arg, i32* %arg1, i32* %arg3, i32* %arg4, i32* %arg5, [32 * i32]* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %0, [32 * i32]* %arg11, [32 * i32]* %arg12 ], [ ^indirect6 i32* %arg1, i32* %arg, i32 %arg10, i32* %arg3, i32* %arg4, i32* %arg5, [32 * i32]* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, [32 * i32]* %arg11, [32 * i32]* %arg12 ];
^b7([32 * i32]* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, [32 * i32]* %arg6, [32 * i32]* %arg7):
    i32* %i = alloc i32;
    store i32* %i with i32 1;
    i1 %0 = scmp lt i32 1, i32 %arg5;
    cbr i1 %0, [ ^while.body12 i32* %i, i32* %arg2, i32* %arg4, i32* %arg1, [32 * i32]* %arg, i32* %arg3, i32* %arg2, i32 1, [32 * i32]* %arg6, [32 * i32]* %arg7 ], [ ^while.body13 i32* %arg4, [32 * i32]* %arg, i32* %arg1, i32* %arg3, i32* %arg2, i32 %arg5, i32 0, [32 * i32]* %arg7, [32 * i32]* %arg6 ];
^while.body11(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [32 * i32]* %arg5, i32 %arg6, i32 %arg7, [32 * i32]* %arg8, [32 * i32]* %arg9):
    i32* %0 = getelementptr &([32 * i32]* %arg9)[i32 0][i32 %arg6];
    i32* %1 = getelementptr &([32 * i32]* %arg8)[i32 0][i32 %arg6];
    i32 %2 = load i32* %1;
    store i32* %0 with i32 %2;
    i32 %3 = add i32 %arg6, i32 1;
    store i32* %arg with i32 %3;
    i1 %4 = scmp lt i32 %3, i32 %arg7;
    cbr i1 %4, [ ^while.body11 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [32 * i32]* %arg5, i32 %3, i32 %arg7, [32 * i32]* %arg8, [32 * i32]* %arg9 ], [ ^b7 [32 * i32]* %arg5, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg1, i32 %arg7, [32 * i32]* %arg8, [32 * i32]* %arg9 ];
^while.body12(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [32 * i32]* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, [32 * i32]* %arg8, [32 * i32]* %arg9):
    i32* %temp = alloc i32;
    i32* %0 = getelementptr &([32 * i32]* %arg9)[i32 0][i32 %arg7];
    i32 %1 = load i32* %0;
    store i32* %temp with i32 %1;
    i32* %j = alloc i32;
    i32 %2 = sub i32 %arg7, i32 1;
    store i32* %j with i32 %2;
    i1 %3 = scmp gt i32 %2, i32 -1;
    cbr i1 %3, [ ^b8 i32* %arg, i32* %j, i32* %temp, i32* %arg1, i32* %arg2, i32* %arg3, [32 * i32]* %arg4, i32* %arg5, i32* %arg6, i32 %1, i32 %2, [32 * i32]* %arg8, [32 * i32]* %arg9 ], [ ^b9 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [32 * i32]* %arg4, i32* %arg5, i32* %arg6, i32 %1, i32 %2, [32 * i32]* %arg8, [32 * i32]* %arg9 ];
^while.body13(i32* %arg, [32 * i32]* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6, [32 * i32]* %arg7, [32 * i32]* %arg8):
    i32* %0 = getelementptr &([32 * i32]* %arg1)[i32 0][i32 %arg6];
    i32 %1 = load i32* %0;
    call (i32) -> void @putint(i32 %1);
    i32 %2 = add i32 %arg6, i32 1;
    i1 %3 = scmp lt i32 %2, i32 32;
    cbr i1 %3, [ ^while.body13 i32* %arg, [32 * i32]* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %2, [32 * i32]* %arg7, [32 * i32]* %arg8 ], [ ^entry5 i32* %arg4, i32* %arg2, i32* %arg, i32* %arg4, i32* %arg3, [32 * i32]* %arg1, i32 %arg5, [32 * i32]* %arg8, [32 * i32]* %arg7 ];
^b8(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, [32 * i32]* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, [32 * i32]* %arg11, [32 * i32]* %arg12):
    i32* %0 = getelementptr &([32 * i32]* %arg12)[i32 0][i32 %arg10];
    i32 %1 = load i32* %0;
    i1 %2 = scmp lt i32 %arg9, i32 %1;
    cbr i1 %2, [ ^while.body14 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg3, i32* %arg4, i32* %arg5, [32 * i32]* %arg6, i32* %arg7, i32* %arg8, i32 %arg10, [32 * i32]* %arg11, [32 * i32]* %arg12 ], [ ^b9 i32* %arg, i32* %arg3, i32* %arg4, i32* %arg5, [32 * i32]* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, [32 * i32]* %arg11, [32 * i32]* %arg12 ];
^b9(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [32 * i32]* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, [32 * i32]* %arg9, [32 * i32]* %arg10):
    i32 %0 = add i32 %arg8, i32 1;
    i32* %1 = getelementptr &([32 * i32]* %arg10)[i32 0][i32 %0];
    store i32* %1 with i32 %arg7;
    i32 %2 = load i32* %arg;
    i32 %3 = load i32* %arg1;
    i32 %4 = add i32 %2, i32 1;
    store i32* %arg with i32 %4;
    i1 %5 = scmp lt i32 %4, i32 %3;
    cbr i1 %5, [ ^while.body12 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [32 * i32]* %arg4, i32* %arg5, i32* %arg6, i32 %4, [32 * i32]* %arg9, [32 * i32]* %arg10 ], [ ^while.body13 i32* %arg2, [32 * i32]* %arg4, i32* %arg3, i32* %arg5, i32* %arg6, i32 %3, i32 0, [32 * i32]* %arg10, [32 * i32]* %arg9 ];
^entry5(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [32 * i32]* %arg5, i32 %arg6, [32 * i32]* %arg7, [32 * i32]* %arg8):
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    i1 %0 = scmp lt i32 0, i32 %arg6;
    cbr i1 %0, [ ^indirect9 i32* %i, i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [32 * i32]* %arg5, [32 * i32]* %arg8, [32 * i32]* %arg7 ], [ ^b10 [32 * i32]* %arg5, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg1, [32 * i32]* %arg7, [32 * i32]* %arg8 ];
^while.body14(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, [32 * i32]* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, [32 * i32]* %arg10, [32 * i32]* %arg11):
    i32 %0 = add i32 %arg9, i32 1;
    i32* %1 = getelementptr &([32 * i32]* %arg11)[i32 0][i32 %0];
    i32* %2 = getelementptr &([32 * i32]* %arg11)[i32 0][i32 %arg9];
    i32 %3 = load i32* %2;
    store i32* %1 with i32 %3;
    i32 %4 = load i32* %arg1;
    i32 %5 = sub i32 %arg9, i32 1;
    store i32* %arg2 with i32 %5;
    i1 %6 = scmp gt i32 %5, i32 -1;
    cbr i1 %6, [ ^b8 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg3, i32* %arg4, i32* %arg5, [32 * i32]* %arg6, i32* %arg7, i32* %arg8, i32 %4, i32 %5, [32 * i32]* %arg10, [32 * i32]* %arg11 ], [ ^b9 i32* %arg, i32* %arg3, i32* %arg4, i32* %arg5, [32 * i32]* %arg6, i32* %arg7, i32* %arg8, i32 %4, i32 %5, [32 * i32]* %arg10, [32 * i32]* %arg11 ];
^indirect9(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, [32 * i32]* %arg6, [32 * i32]* %arg7, [32 * i32]* %arg8):
    i32 %0 = load i32* %arg1;
    ubr [ ^while.body15 i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, [32 * i32]* %arg6, i32 0, i32 %0, [32 * i32]* %arg8, [32 * i32]* %arg7 ];
^b10([32 * i32]* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [32 * i32]* %arg5, [32 * i32]* %arg6):
    store i32* %arg4 with i32 0;
    store i32* %arg3 with i32 31;
    i32 %0 = call (i32*, i32, i32, i32*) -> i32 @QuickSort(i32* %arg1, i32 0, i32 31, i32* %arg2);
    i32 %1 = load i32* %arg4;
    i32 %2 = load i32* %arg2;
    i1 %3 = scmp lt i32 %1, i32 32;
    cbr i1 %3, [ ^while.body16 [32 * i32]* %arg, i32* %arg1, i32* %arg2, i32 %2, i32 %1, [32 * i32]* %arg6, [32 * i32]* %arg5 ], [ ^entry6 i32* %arg2, i32* %arg1, i32* %arg2, [32 * i32]* %arg, i32 %2, [32 * i32]* %arg5, [32 * i32]* %arg6 ];
^while.body15(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [32 * i32]* %arg5, i32 %arg6, i32 %arg7, [32 * i32]* %arg8, [32 * i32]* %arg9):
    i32* %0 = getelementptr &([32 * i32]* %arg9)[i32 0][i32 %arg6];
    i32* %1 = getelementptr &([32 * i32]* %arg8)[i32 0][i32 %arg6];
    i32 %2 = load i32* %1;
    store i32* %0 with i32 %2;
    i32 %3 = add i32 %arg6, i32 1;
    store i32* %arg with i32 %3;
    i1 %4 = scmp lt i32 %3, i32 %arg7;
    cbr i1 %4, [ ^while.body15 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [32 * i32]* %arg5, i32 %3, i32 %arg7, [32 * i32]* %arg8, [32 * i32]* %arg9 ], [ ^b10 [32 * i32]* %arg5, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg1, [32 * i32]* %arg8, [32 * i32]* %arg9 ];
^while.body16([32 * i32]* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, [32 * i32]* %arg5, [32 * i32]* %arg6):
    i32* %0 = getelementptr &([32 * i32]* %arg)[i32 0][i32 %arg4];
    i32 %1 = load i32* %0;
    call (i32) -> void @putint(i32 %1);
    i32 %2 = add i32 %arg4, i32 1;
    i1 %3 = scmp lt i32 %2, i32 32;
    cbr i1 %3, [ ^while.body16 [32 * i32]* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %2, [32 * i32]* %arg5, [32 * i32]* %arg6 ], [ ^entry6 i32* %arg2, i32* %arg1, i32* %arg2, [32 * i32]* %arg, i32 %arg3, [32 * i32]* %arg6, [32 * i32]* %arg5 ];
^entry6(i32* %arg, i32* %arg1, i32* %arg2, [32 * i32]* %arg3, i32 %arg4, [32 * i32]* %arg5, [32 * i32]* %arg6):
    i1 %0 = scmp lt i32 0, i32 %arg4;
    cbr i1 %0, [ ^indirect10 i32* %arg, i32* %arg1, i32* %arg2, [32 * i32]* %arg3, [32 * i32]* %arg6, [32 * i32]* %arg5 ], [ ^b11 [32 * i32]* %arg3, i32* %arg2, i32* %arg1, i32 %arg4, [32 * i32]* %arg5, [32 * i32]* %arg6 ];
^indirect10(i32* %arg, i32* %arg1, i32* %arg2, [32 * i32]* %arg3, [32 * i32]* %arg4, [32 * i32]* %arg5):
    i32 %0 = load i32* %arg;
    ubr [ ^while.body17 i32* %arg1, i32* %arg2, [32 * i32]* %arg3, i32 0, i32 %0, [32 * i32]* %arg5, [32 * i32]* %arg4 ];
^b11([32 * i32]* %arg, i32* %arg1, i32* %arg2, i32 %arg3, [32 * i32]* %arg4, [32 * i32]* %arg5):
    i32* %stride = alloc i32;
    store i32* %stride with i32 4;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    i1 %0 = scmp lt i32 0, i32 %arg3;
    cbr i1 %0, [ ^while.body18 i32* %stride, i32* %i, i32* %arg1, [32 * i32]* %arg, i32* %arg2, i32* %arg1, i32 4, i32 0, i32 0, [32 * i32]* %arg4, [32 * i32]* %arg5 ], [ ^while.body19 [32 * i32]* %arg, i32* %arg2, i32* %arg1, i32 %arg3, i32 0, [32 * i32]* %arg5, [32 * i32]* %arg4 ];
^while.body17(i32* %arg, i32* %arg1, [32 * i32]* %arg2, i32 %arg3, i32 %arg4, [32 * i32]* %arg5, [32 * i32]* %arg6):
    i32* %0 = getelementptr &([32 * i32]* %arg6)[i32 0][i32 %arg3];
    i32* %1 = getelementptr &([32 * i32]* %arg5)[i32 0][i32 %arg3];
    i32 %2 = load i32* %1;
    store i32* %0 with i32 %2;
    i32 %3 = add i32 %arg3, i32 1;
    i1 %4 = scmp lt i32 %3, i32 %arg4;
    cbr i1 %4, [ ^while.body17 i32* %arg, i32* %arg1, [32 * i32]* %arg2, i32 %3, i32 %arg4, [32 * i32]* %arg5, [32 * i32]* %arg6 ], [ ^b11 [32 * i32]* %arg2, i32* %arg1, i32* %arg, i32 %arg4, [32 * i32]* %arg5, [32 * i32]* %arg6 ];
^while.body18(i32* %arg, i32* %arg1, i32* %arg2, [32 * i32]* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, [32 * i32]* %arg9, [32 * i32]* %arg10):
    i32* %0 = getelementptr &([32 * i32]* %arg10)[i32 0][i32 %arg8];
    i32 %1 = load i32* %0;
    i32 %2 = add i32 %arg7, i32 %1;
    i32 %3 = srem i32 %arg8, i32 %arg6;
    i32 %4 = sub i32 %arg6, i32 1;
    i1 %5 = scmp neq i32 %3, i32 %4;
    cbr i1 %5, [ ^indirect11 i32* %arg, i32* %arg1, i32* %0, i32* %arg2, i32* %arg5, i32* %arg4, [32 * i32]* %arg3, i32 %2, [32 * i32]* %arg9, [32 * i32]* %arg10 ], [ ^indirect12 i32* %arg, i32* %arg1, i32 %2, i32* %0, i32* %arg2, i32* %arg5, i32* %arg4, [32 * i32]* %arg3, [32 * i32]* %arg9, [32 * i32]* %arg10 ];
^while.body19([32 * i32]* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, [32 * i32]* %arg5, [32 * i32]* %arg6):
    i32* %0 = getelementptr &([32 * i32]* %arg)[i32 0][i32 %arg4];
    i32 %1 = load i32* %0;
    call (i32) -> void @putint(i32 %1);
    i32 %2 = add i32 %arg4, i32 1;
    i1 %3 = scmp lt i32 %2, i32 32;
    cbr i1 %3, [ ^while.body19 [32 * i32]* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %2, [32 * i32]* %arg5, [32 * i32]* %arg6 ], [ ^entry7 i32* %arg2, i32* %arg1, i32* %arg2, [32 * i32]* %arg, i32 %arg3, [32 * i32]* %arg6, [32 * i32]* %arg5 ];
^indirect11(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, [32 * i32]* %arg6, i32 %arg7, [32 * i32]* %arg8, [32 * i32]* %arg9):
    store i32* %arg2 with i32 0;
    i32 %0 = load i32* %arg1;
    i32 %1 = load i32* %arg;
    i32 %2 = load i32* %arg3;
    i32 %3 = add i32 %0, i32 1;
    store i32* %arg1 with i32 %3;
    ubr [ ^while.header i32* %arg, i32* %arg1, i32 %3, i32* %arg3, i32* %arg4, i32* %arg5, [32 * i32]* %arg6, i32 %2, i32 %1, i32 %arg7, i32 %3, [32 * i32]* %arg8, [32 * i32]* %arg9 ];
^indirect12(i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, [32 * i32]* %arg7, [32 * i32]* %arg8, [32 * i32]* %arg9):
    store i32* %arg3 with i32 %arg2;
    i32 %0 = load i32* %arg1;
    i32 %1 = load i32* %arg;
    i32 %2 = load i32* %arg4;
    i32 %3 = add i32 %0, i32 1;
    store i32* %arg1 with i32 %3;
    ubr [ ^while.header i32* %arg, i32* %arg1, i32 %3, i32* %arg4, i32* %arg5, i32* %arg6, [32 * i32]* %arg7, i32 %2, i32 %1, i32 0, i32 %3, [32 * i32]* %arg8, [32 * i32]* %arg9 ];
^entry7(i32* %arg, i32* %arg1, i32* %arg2, [32 * i32]* %arg3, i32 %arg4, [32 * i32]* %arg5, [32 * i32]* %arg6):
    i1 %0 = scmp lt i32 0, i32 %arg4;
    cbr i1 %0, [ ^indirect13 i32* %arg, i32* %arg1, i32* %arg2, [32 * i32]* %arg3, [32 * i32]* %arg6, [32 * i32]* %arg5 ], [ ^b12 [32 * i32]* %arg3, i32* %arg2, i32* %arg1, i32 %arg4, [32 * i32]* %arg6 ];
^while.header(i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, [32 * i32]* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, [32 * i32]* %arg11, [32 * i32]* %arg12):
    i1 %0 = scmp lt i32 %arg2, i32 %arg7;
    cbr i1 %0, [ ^while.body18 i32* %arg, i32* %arg1, i32* %arg3, [32 * i32]* %arg6, i32* %arg5, i32* %arg4, i32 %arg8, i32 %arg9, i32 %arg10, [32 * i32]* %arg11, [32 * i32]* %arg12 ], [ ^while.body19 [32 * i32]* %arg6, i32* %arg5, i32* %arg4, i32 %arg7, i32 0, [32 * i32]* %arg12, [32 * i32]* %arg11 ];
^indirect13(i32* %arg, i32* %arg1, i32* %arg2, [32 * i32]* %arg3, [32 * i32]* %arg4, [32 * i32]* %arg5):
    i32 %0 = load i32* %arg;
    ubr [ ^while.body20 i32* %arg1, i32* %arg2, [32 * i32]* %arg3, i32 0, i32 %0, [32 * i32]* %arg5, [32 * i32]* %arg4 ];
^b12([32 * i32]* %arg, i32* %arg1, i32* %arg2, i32 %arg3, [32 * i32]* %arg4):
    i32* %stride = alloc i32;
    store i32* %stride with i32 3;
    i32* %sum = alloc i32;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    store i32* %sum with i32 0;
    i1 %0 = scmp lt i32 0, i32 %arg3;
    cbr i1 %0, [ ^while.body21 i32* %sum, i32* %stride, i32* %i, i32* %arg1, [32 * i32]* %arg, i32 %arg3, i32* %arg2, i32 3, i32 0, i32 0, i32 undef, [32 * i32]* %arg4 ], [ ^indirect14 i32 %arg3, i32* %arg1, [32 * i32]* %arg, i32 %arg3, i32 3, [32 * i32]* %arg4 ];
^while.body20(i32* %arg, i32* %arg1, [32 * i32]* %arg2, i32 %arg3, i32 %arg4, [32 * i32]* %arg5, [32 * i32]* %arg6):
    i32* %0 = getelementptr &([32 * i32]* %arg6)[i32 0][i32 %arg3];
    i32* %1 = getelementptr &([32 * i32]* %arg5)[i32 0][i32 %arg3];
    i32 %2 = load i32* %1;
    store i32* %0 with i32 %2;
    i32 %3 = add i32 %arg3, i32 1;
    i1 %4 = scmp lt i32 %3, i32 %arg4;
    cbr i1 %4, [ ^while.body20 i32* %arg, i32* %arg1, [32 * i32]* %arg2, i32 %3, i32 %arg4, [32 * i32]* %arg5, [32 * i32]* %arg6 ], [ ^b12 [32 * i32]* %arg2, i32* %arg1, i32* %arg, i32 %arg4, [32 * i32]* %arg6 ];
^while.body21(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [32 * i32]* %arg4, i32 %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, [32 * i32]* %arg11):
    i32 %0 = sub i32 %arg7, i32 1;
    i1 %1 = scmp lt i32 %arg9, i32 %0;
    cbr i1 %1, [ ^indirect16 i32* %arg1, i32* %arg2, i32* %arg, i32 %arg9, i32* %arg3, [32 * i32]* %arg4, i32 %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, [32 * i32]* %arg11 ], [ ^indirect17 i32* %arg, i32* %arg1, i32* %arg2, i32 %arg9, i32 %0, i32* %arg3, [32 * i32]* %arg4, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, [32 * i32]* %arg11 ];
^indirect14(i32 %arg, i32* %arg1, [32 * i32]* %arg2, i32 %arg3, i32 %arg4, [32 * i32]* %arg5):
    i32 %0 = sub i32 %arg, i32 %arg4;
    i32 %1 = add i32 %0, i32 1;
    i1 %2 = scmp lt i32 %1, i32 %arg3;
    cbr i1 %2, [ ^indirect15 i32* %arg1, [32 * i32]* %arg2, i32 %1, [32 * i32]* %arg5 ], [ ^while.body22 [32 * i32]* %arg2, i32 0 ];
^indirect15(i32* %arg, [32 * i32]* %arg1, i32 %arg2, [32 * i32]* %arg3):
    i32 %0 = load i32* %arg;
    ubr [ ^while.body23 [32 * i32]* %arg1, i32 %arg2, i32 %0, [32 * i32]* %arg3 ];
^indirect16(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32* %arg4, [32 * i32]* %arg5, i32 %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, [32 * i32]* %arg12):
    i32* %0 = getelementptr &([32 * i32]* %arg12)[i32 0][i32 %arg3];
    i32 %1 = load i32* %0;
    i32 %2 = add i32 %arg9, i32 %1;
    store i32* %arg2 with i32 %2;
    i32 %3 = add i32 %arg10, i32 1;
    store i32* %arg1 with i32 %3;
    i1 %4 = scmp lt i32 %3, i32 %arg6;
    cbr i1 %4, [ ^while.body21 i32* %arg2, i32* %arg, i32* %arg1, i32* %arg4, [32 * i32]* %arg5, i32 %arg6, i32* %arg7, i32 %arg8, i32 %2, i32 %3, i32 %arg11, [32 * i32]* %arg12 ], [ ^indirect14 i32 %arg6, i32* %arg4, [32 * i32]* %arg5, i32 %arg6, i32 %arg8, [32 * i32]* %arg12 ];
^indirect17(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32* %arg5, [32 * i32]* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, [32 * i32]* %arg12):
    i1 %0 = scmp eq i32 %arg3, i32 %arg4;
    cbr i1 %0, [ ^if.then i32* %arg2, i32* %arg1, i32* %arg, i32* %arg5, [32 * i32]* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, [32 * i32]* %arg12 ], [ ^if.else i32* %arg1, i32* %arg2, i32* %arg, i32* %arg5, [32 * i32]* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, [32 * i32]* %arg12 ];
^while.body22([32 * i32]* %arg, i32 %arg1):
    i32* %0 = getelementptr &([32 * i32]* %arg)[i32 0][i32 %arg1];
    i32 %1 = load i32* %0;
    call (i32) -> void @putint(i32 %1);
    i32 %2 = add i32 %arg1, i32 1;
    i1 %3 = scmp lt i32 %2, i32 32;
    cbr i1 %3, [ ^while.body22 [32 * i32]* %arg, i32 %2 ], [ ^b13 ];
^if.then(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [32 * i32]* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, [32 * i32]* %arg8):
    i32 %0 = load i32* %arg5;
    i32 %1 = sdiv i32 %arg7, i32 %arg6;
    store i32* %arg5 with i32 %1;
    i32 %2 = load i32* %arg;
    i32 %3 = load i32* %arg2;
    i32 %4 = load i32* %arg1;
    i32 %5 = load i32* %arg3;
    i32 %6 = add i32 %2, i32 1;
    store i32* %arg with i32 %6;
    ubr [ ^while.header1 i32* %arg1, i32* %arg2, i32* %arg, i32 %6, i32* %arg3, [32 * i32]* %arg4, i32 %5, i32* %arg5, i32 %4, i32 %3, i32 %6, i32 %0, [32 * i32]* %arg8 ];
^if.else(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [32 * i32]* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, [32 * i32]* %arg10):
    i32* %0 = getelementptr &([32 * i32]* %arg10)[i32 0][i32 %arg8];
    i32 %1 = load i32* %0;
    i32 %2 = add i32 %arg7, i32 %1;
    i32 %3 = sub i32 %2, i32 %arg9;
    store i32* %arg2 with i32 %3;
    i32 %4 = sub i32 %arg8, i32 %arg6;
    i32 %5 = add i32 %4, i32 1;
    i32* %6 = getelementptr &([32 * i32]* %arg10)[i32 0][i32 %5];
    i32 %7 = load i32* %6;
    i32 %8 = sdiv i32 %3, i32 %arg6;
    store i32* %6 with i32 %8;
    i32 %9 = load i32* %arg;
    i32 %10 = load i32* %arg3;
    i32 %11 = add i32 %arg8, i32 1;
    store i32* %arg1 with i32 %11;
    ubr [ ^while.header1 i32* %arg, i32* %arg2, i32* %arg1, i32 %11, i32* %arg3, [32 * i32]* %arg4, i32 %10, i32* %arg5, i32 %9, i32 %3, i32 %11, i32 %7, [32 * i32]* %arg10 ];
^while.body23([32 * i32]* %arg, i32 %arg1, i32 %arg2, [32 * i32]* %arg3):
    i32* %0 = getelementptr &([32 * i32]* %arg3)[i32 0][i32 %arg1];
    store i32* %0 with i32 0;
    i32 %1 = add i32 %arg1, i32 1;
    i1 %2 = scmp lt i32 %1, i32 %arg2;
    cbr i1 %2, [ ^while.body23 [32 * i32]* %arg, i32 %1, i32 %arg2, [32 * i32]* %arg3 ], [ ^while.body22 [32 * i32]* %arg, i32 0 ];
^b13():
    ret i32 0;
^while.header1(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32* %arg4, [32 * i32]* %arg5, i32 %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, [32 * i32]* %arg12):
    i1 %0 = scmp lt i32 %arg3, i32 %arg6;
    cbr i1 %0, [ ^while.body21 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg4, [32 * i32]* %arg5, i32 %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, [32 * i32]* %arg12 ], [ ^indirect14 i32 %arg6, i32* %arg4, [32 * i32]* %arg5, i32 %arg6, i32 %arg8, [32 * i32]* %arg12 ];
}
