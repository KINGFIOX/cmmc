internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @QuickSort(i32* %arr, i32 %low, i32 %high) -> void {
  ^0:
    ubr ^entry;
  ^entry:
    i32 %1 = phi [^0, i32 %low] [^b4, i32 %25];
    i1 %2 = icmp sgt i32 %high, i32 %1;
    cbr i1 %2(prob = 0.5), ^if.then, ^b;
  ^if.then:
    i32* %3 = getelementptr &(i32* %arr)[i32 %1];
    i32 %4 = load i32* %3;
    i32 %5 = add i32 %4, i32 -1;
    ubr ^while.header;
  ^b:
    ret;
  ^while.header:
    i32 %6 = phi [^if.then, i32 %high] [^b6, i32 %11] [^if.then3, i32 %39];
    i32 %7 = phi [^if.then, i32 %1] [^b6, i32 %26] [^if.then3, i32 %26];
    i1 %8 = icmp sgt i32 %6, i32 %7;
    cbr i1 %8(prob = 0.984615), ^while.header1, ^b1;
  ^b1:
    i32* %9 = getelementptr &(i32* %arr)[i32 %7];
    store i32* %9 with i32 %4;
    i32 %10 = add i32 %7, i32 -1;
    ubr ^entry1;
  ^while.header1:
    i32 %11 = phi [^while.header, i32 %6] [^while.body, i32 %18];
    i1 %12 = icmp slt i32 %7, i32 %11;
    i32* %13 = getelementptr &(i32* %arr)[i32 %11];
    cbr i1 %12(prob = 0.5), ^b2, ^b3;
  ^b2:
    i32 %14 = load i32* %13;
    i1 %15 = icmp slt i32 %5, i32 %14;
    cbr i1 %15(prob = 0.984615), ^while.body, ^b3;
  ^b3:
    cbr i1 %12(prob = 0.5), ^if.then1, ^while.header2;
  ^entry1:
    i32 %16 = phi [^b1, i32 %1] [^b10, i32 %54];
    i1 %17 = icmp sgt i32 %10, i32 %16;
    cbr i1 %17(prob = 0.5), ^if.then2, ^b4;
  ^while.body:
    i32 %18 = add i32 %11, i32 -1;
    ubr ^while.header1;
  ^if.then1:
    i32* %19 = getelementptr &(i32* %arr)[i32 %7];
    i32 %20 = load i32* %13;
    store i32* %19 with i32 %20;
    i32 %21 = add i32 %7, i32 1;
    ubr ^while.header2;
  ^if.then2:
    i32* %22 = getelementptr &(i32* %arr)[i32 %16];
    i32 %23 = load i32* %22;
    i32 %24 = add i32 %23, i32 -1;
    ubr ^while.header3;
  ^b4:
    i32 %25 = add i32 %7, i32 1;
    ubr ^entry;
  ^while.header2:
    i32 %26 = phi [^b3, i32 %7] [^if.then1, i32 %21] [^while.body1, i32 %34];
    i1 %27 = icmp sgt i32 %11, i32 %26;
    cbr i1 %27(prob = 0.5), ^b5, ^b6;
  ^while.header3:
    i32 %28 = phi [^if.then2, i32 %10] [^b12, i32 %40] [^if.then6, i32 %68];
    i32 %29 = phi [^if.then2, i32 %16] [^b12, i32 %55] [^if.then6, i32 %55];
    i1 %30 = icmp sgt i32 %28, i32 %29;
    cbr i1 %30(prob = 0.984615), ^while.header4, ^b7;
  ^b5:
    i32* %31 = getelementptr &(i32* %arr)[i32 %26];
    i32 %32 = load i32* %31;
    i1 %33 = icmp sgt i32 %4, i32 %32;
    cbr i1 %33(prob = 0.984615), ^while.body1, ^b6;
  ^b6:
    cbr i1 %27(prob = 0.5), ^if.then3, ^while.header;
  ^while.body1:
    i32 %34 = add i32 %26, i32 1;
    ubr ^while.header2;
  ^b7:
    i32* %35 = getelementptr &(i32* %arr)[i32 %29];
    store i32* %35 with i32 %23;
    i32 %36 = add i32 %29, i32 -1;
    ubr ^entry2;
  ^if.then3:
    i32* %37 = getelementptr &(i32* %arr)[i32 %26];
    i32 %38 = load i32* %37;
    store i32* %13 with i32 %38;
    i32 %39 = add i32 %11, i32 -1;
    ubr ^while.header;
  ^while.header4:
    i32 %40 = phi [^while.header3, i32 %28] [^while.body2, i32 %47];
    i1 %41 = icmp slt i32 %29, i32 %40;
    i32* %42 = getelementptr &(i32* %arr)[i32 %40];
    cbr i1 %41(prob = 0.5), ^b8, ^b9;
  ^b8:
    i32 %43 = load i32* %42;
    i1 %44 = icmp slt i32 %24, i32 %43;
    cbr i1 %44(prob = 0.984615), ^while.body2, ^b9;
  ^b9:
    cbr i1 %41(prob = 0.5), ^if.then4, ^while.header5;
  ^entry2:
    i32 %45 = phi [^b7, i32 %16] [^b16, i32 %83];
    i1 %46 = icmp sgt i32 %36, i32 %45;
    cbr i1 %46(prob = 0.5), ^if.then5, ^b10;
  ^while.body2:
    i32 %47 = add i32 %40, i32 -1;
    ubr ^while.header4;
  ^if.then4:
    i32* %48 = getelementptr &(i32* %arr)[i32 %29];
    i32 %49 = load i32* %42;
    store i32* %48 with i32 %49;
    i32 %50 = add i32 %29, i32 1;
    ubr ^while.header5;
  ^if.then5:
    i32* %51 = getelementptr &(i32* %arr)[i32 %45];
    i32 %52 = load i32* %51;
    i32 %53 = add i32 %52, i32 -1;
    ubr ^while.header6;
  ^b10:
    i32 %54 = add i32 %29, i32 1;
    ubr ^entry1;
  ^while.header5:
    i32 %55 = phi [^b9, i32 %29] [^if.then4, i32 %50] [^while.body3, i32 %63];
    i1 %56 = icmp sgt i32 %40, i32 %55;
    cbr i1 %56(prob = 0.5), ^b11, ^b12;
  ^while.header6:
    i32 %57 = phi [^if.then5, i32 %36] [^b18, i32 %69] [^if.then9, i32 %98];
    i32 %58 = phi [^if.then5, i32 %45] [^b18, i32 %84] [^if.then9, i32 %84];
    i1 %59 = icmp sgt i32 %57, i32 %58;
    cbr i1 %59(prob = 0.984615), ^while.header7, ^b13;
  ^b11:
    i32* %60 = getelementptr &(i32* %arr)[i32 %55];
    i32 %61 = load i32* %60;
    i1 %62 = icmp sgt i32 %23, i32 %61;
    cbr i1 %62(prob = 0.984615), ^while.body3, ^b12;
  ^b12:
    cbr i1 %56(prob = 0.5), ^if.then6, ^while.header3;
  ^while.body3:
    i32 %63 = add i32 %55, i32 1;
    ubr ^while.header5;
  ^b13:
    i32* %64 = getelementptr &(i32* %arr)[i32 %58];
    store i32* %64 with i32 %52;
    i32 %65 = add i32 %58, i32 -1;
    ubr ^entry3;
  ^if.then6:
    i32* %66 = getelementptr &(i32* %arr)[i32 %55];
    i32 %67 = load i32* %66;
    store i32* %42 with i32 %67;
    i32 %68 = add i32 %40, i32 -1;
    ubr ^while.header3;
  ^while.header7:
    i32 %69 = phi [^while.header6, i32 %57] [^while.body4, i32 %76];
    i1 %70 = icmp slt i32 %58, i32 %69;
    i32* %71 = getelementptr &(i32* %arr)[i32 %69];
    cbr i1 %70(prob = 0.5), ^b14, ^b15;
  ^b14:
    i32 %72 = load i32* %71;
    i1 %73 = icmp slt i32 %53, i32 %72;
    cbr i1 %73(prob = 0.984615), ^while.body4, ^b15;
  ^b15:
    cbr i1 %70(prob = 0.5), ^if.then7, ^while.header8;
  ^entry3:
    i32 %74 = phi [^b13, i32 %45] [^b19, i32 %95];
    i1 %75 = icmp sgt i32 %65, i32 %74;
    cbr i1 %75(prob = 0.5), ^if.then8, ^b16;
  ^while.body4:
    i32 %76 = add i32 %69, i32 -1;
    ubr ^while.header7;
  ^if.then7:
    i32* %77 = getelementptr &(i32* %arr)[i32 %58];
    i32 %78 = load i32* %71;
    store i32* %77 with i32 %78;
    i32 %79 = add i32 %58, i32 1;
    ubr ^while.header8;
  ^if.then8:
    i32* %80 = getelementptr &(i32* %arr)[i32 %74];
    i32 %81 = load i32* %80;
    i32 %82 = add i32 %81, i32 -1;
    ubr ^while.header9;
  ^b16:
    i32 %83 = add i32 %58, i32 1;
    ubr ^entry2;
  ^while.header8:
    i32 %84 = phi [^b15, i32 %58] [^if.then7, i32 %79] [^while.body5, i32 %92];
    i1 %85 = icmp sgt i32 %69, i32 %84;
    cbr i1 %85(prob = 0.5), ^b17, ^b18;
  ^while.header9:
    i32 %86 = phi [^if.then8, i32 %65] [^b23, i32 %99] [^if.then11, i32 %116];
    i32 %87 = phi [^if.then8, i32 %74] [^b23, i32 %108] [^if.then11, i32 %108];
    i1 %88 = icmp sgt i32 %86, i32 %87;
    cbr i1 %88(prob = 0.984615), ^while.header10, ^b19;
  ^b17:
    i32* %89 = getelementptr &(i32* %arr)[i32 %84];
    i32 %90 = load i32* %89;
    i1 %91 = icmp sgt i32 %52, i32 %90;
    cbr i1 %91(prob = 0.984615), ^while.body5, ^b18;
  ^b18:
    cbr i1 %85(prob = 0.5), ^if.then9, ^while.header6;
  ^while.body5:
    i32 %92 = add i32 %84, i32 1;
    ubr ^while.header8;
  ^b19:
    i32* %93 = getelementptr &(i32* %arr)[i32 %87];
    store i32* %93 with i32 %81;
    i32 %94 = add i32 %87, i32 -1;
    call (i32*, i32, i32) -> void @QuickSort(i32* %arr, i32 %74, i32 %94);
    i32 %95 = add i32 %87, i32 1;
    ubr ^entry3;
  ^if.then9:
    i32* %96 = getelementptr &(i32* %arr)[i32 %84];
    i32 %97 = load i32* %96;
    store i32* %71 with i32 %97;
    i32 %98 = add i32 %69, i32 -1;
    ubr ^while.header6;
  ^while.header10:
    i32 %99 = phi [^while.header9, i32 %86] [^while.body6, i32 %104];
    i1 %100 = icmp slt i32 %87, i32 %99;
    i32* %101 = getelementptr &(i32* %arr)[i32 %99];
    cbr i1 %100(prob = 0.5), ^b20, ^b21;
  ^b20:
    i32 %102 = load i32* %101;
    i1 %103 = icmp slt i32 %82, i32 %102;
    cbr i1 %103(prob = 0.984615), ^while.body6, ^b21;
  ^b21:
    cbr i1 %100(prob = 0.5), ^if.then10, ^while.header11;
  ^while.body6:
    i32 %104 = add i32 %99, i32 -1;
    ubr ^while.header10;
  ^if.then10:
    i32* %105 = getelementptr &(i32* %arr)[i32 %87];
    i32 %106 = load i32* %101;
    store i32* %105 with i32 %106;
    i32 %107 = add i32 %87, i32 1;
    ubr ^while.header11;
  ^while.header11:
    i32 %108 = phi [^b21, i32 %87] [^if.then10, i32 %107] [^while.body7, i32 %113];
    i1 %109 = icmp sgt i32 %99, i32 %108;
    cbr i1 %109(prob = 0.5), ^b22, ^b23;
  ^b22:
    i32* %110 = getelementptr &(i32* %arr)[i32 %108];
    i32 %111 = load i32* %110;
    i1 %112 = icmp sgt i32 %81, i32 %111;
    cbr i1 %112(prob = 0.984615), ^while.body7, ^b23;
  ^b23:
    cbr i1 %109(prob = 0.5), ^if.then11, ^while.header9;
  ^while.body7:
    i32 %113 = add i32 %108, i32 1;
    ubr ^while.header11;
  ^if.then11:
    i32* %114 = getelementptr &(i32* %arr)[i32 %108];
    i32 %115 = load i32* %114;
    store i32* %101 with i32 %115;
    i32 %116 = add i32 %99, i32 -1;
    ubr ^while.header9;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [32 * i32]* %result = alloc [32 * i32], align 8;
    [32 * i32]* %arr = alloc [32 * i32], align 8;
    i32* %0 = getelementptr &([32 * i32]* %arr)[i64 0][i64 0];
    store i32* %0 with i32 7;
    i32* %1 = getelementptr &([32 * i32]* %arr)[i64 0][i64 1];
    store i32* %1 with i32 23;
    i32* %2 = getelementptr &([32 * i32]* %arr)[i64 0][i64 2];
    store i32* %2 with i32 89;
    i32* %3 = getelementptr &([32 * i32]* %arr)[i64 0][i64 3];
    store i32* %3 with i32 26;
    i32* %4 = getelementptr &([32 * i32]* %arr)[i64 0][i64 4];
    store i32* %4 with i32 282;
    i32* %5 = getelementptr &([32 * i32]* %arr)[i64 0][i64 5];
    store i32* %5 with i32 254;
    i32* %6 = getelementptr &([32 * i32]* %arr)[i64 0][i64 6];
    store i32* %6 with i32 27;
    i32* %7 = getelementptr &([32 * i32]* %arr)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([32 * i32]* %arr)[i64 0][i64 8];
    store i32* %8 with i32 83;
    i32* %9 = getelementptr &([32 * i32]* %arr)[i64 0][i64 9];
    store i32* %9 with i32 273;
    i32* %10 = getelementptr &([32 * i32]* %arr)[i64 0][i64 10];
    store i32* %10 with i32 574;
    i32* %11 = getelementptr &([32 * i32]* %arr)[i64 0][i64 11];
    store i32* %11 with i32 905;
    i32* %12 = getelementptr &([32 * i32]* %arr)[i64 0][i64 12];
    store i32* %12 with i32 354;
    i32* %13 = getelementptr &([32 * i32]* %arr)[i64 0][i64 13];
    store i32* %13 with i32 657;
    i32* %14 = getelementptr &([32 * i32]* %arr)[i64 0][i64 14];
    store i32* %14 with i32 935;
    i32* %15 = getelementptr &([32 * i32]* %arr)[i64 0][i64 15];
    store i32* %15 with i32 264;
    i32* %16 = getelementptr &([32 * i32]* %arr)[i64 0][i64 16];
    store i32* %16 with i32 639;
    i32* %17 = getelementptr &([32 * i32]* %arr)[i64 0][i64 17];
    store i32* %17 with i32 459;
    i32* %18 = getelementptr &([32 * i32]* %arr)[i64 0][i64 18];
    store i32* %18 with i32 29;
    i32* %19 = getelementptr &([32 * i32]* %arr)[i64 0][i64 19];
    store i32* %19 with i32 68;
    i32* %20 = getelementptr &([32 * i32]* %arr)[i64 0][i64 20];
    store i32* %20 with i32 929;
    i32* %21 = getelementptr &([32 * i32]* %arr)[i64 0][i64 21];
    store i32* %21 with i32 756;
    i32* %22 = getelementptr &([32 * i32]* %arr)[i64 0][i64 22];
    store i32* %22 with i32 452;
    i32* %23 = getelementptr &([32 * i32]* %arr)[i64 0][i64 23];
    store i32* %23 with i32 279;
    i32* %24 = getelementptr &([32 * i32]* %arr)[i64 0][i64 24];
    store i32* %24 with i32 58;
    i32* %25 = getelementptr &([32 * i32]* %arr)[i64 0][i64 25];
    store i32* %25 with i32 87;
    i32* %26 = getelementptr &([32 * i32]* %arr)[i64 0][i64 26];
    store i32* %26 with i32 96;
    i32* %27 = getelementptr &([32 * i32]* %arr)[i64 0][i64 27];
    store i32* %27 with i32 36;
    i32* %28 = getelementptr &([32 * i32]* %arr)[i64 0][i64 28];
    store i32* %28 with i32 39;
    i32* %29 = getelementptr &([32 * i32]* %arr)[i64 0][i64 29];
    store i32* %29 with i32 28;
    i32* %30 = getelementptr &([32 * i32]* %arr)[i64 0][i64 30];
    store i32* %30 with i32 1;
    i32* %31 = getelementptr &([32 * i32]* %arr)[i64 0][i64 31];
    store i32* %31 with i32 290;
    i32* %32 = getelementptr &([32 * i32]* %result)[i64 0][i64 0];
    store i32* %32 with i32 7;
    i32* %33 = getelementptr &([32 * i32]* %result)[i64 0][i64 1];
    store i32* %33 with i32 23;
    i32* %34 = getelementptr &([32 * i32]* %result)[i64 0][i64 2];
    store i32* %34 with i32 89;
    i32* %35 = getelementptr &([32 * i32]* %result)[i64 0][i64 3];
    store i32* %35 with i32 26;
    i32* %36 = getelementptr &([32 * i32]* %result)[i64 0][i64 4];
    store i32* %36 with i32 282;
    i32* %37 = getelementptr &([32 * i32]* %result)[i64 0][i64 5];
    store i32* %37 with i32 254;
    i32* %38 = getelementptr &([32 * i32]* %result)[i64 0][i64 6];
    store i32* %38 with i32 27;
    i32* %39 = getelementptr &([32 * i32]* %result)[i64 0][i64 7];
    store i32* %39 with i32 5;
    i32* %40 = getelementptr &([32 * i32]* %result)[i64 0][i64 8];
    store i32* %40 with i32 83;
    i32* %41 = getelementptr &([32 * i32]* %result)[i64 0][i64 9];
    store i32* %41 with i32 273;
    i32* %42 = getelementptr &([32 * i32]* %result)[i64 0][i64 10];
    store i32* %42 with i32 574;
    i32* %43 = getelementptr &([32 * i32]* %result)[i64 0][i64 11];
    store i32* %43 with i32 905;
    i32* %44 = getelementptr &([32 * i32]* %result)[i64 0][i64 12];
    store i32* %44 with i32 354;
    i32* %45 = getelementptr &([32 * i32]* %result)[i64 0][i64 13];
    store i32* %45 with i32 657;
    i32* %46 = getelementptr &([32 * i32]* %result)[i64 0][i64 14];
    store i32* %46 with i32 935;
    i32* %47 = getelementptr &([32 * i32]* %result)[i64 0][i64 15];
    store i32* %47 with i32 264;
    i32* %48 = getelementptr &([32 * i32]* %result)[i64 0][i64 16];
    store i32* %48 with i32 639;
    i32* %49 = getelementptr &([32 * i32]* %result)[i64 0][i64 17];
    store i32* %49 with i32 459;
    i32* %50 = getelementptr &([32 * i32]* %result)[i64 0][i64 18];
    store i32* %50 with i32 29;
    i32* %51 = getelementptr &([32 * i32]* %result)[i64 0][i64 19];
    store i32* %51 with i32 68;
    i32* %52 = getelementptr &([32 * i32]* %result)[i64 0][i64 20];
    store i32* %52 with i32 929;
    i32* %53 = getelementptr &([32 * i32]* %result)[i64 0][i64 21];
    store i32* %53 with i32 756;
    i32* %54 = getelementptr &([32 * i32]* %result)[i64 0][i64 22];
    store i32* %54 with i32 452;
    i32* %55 = getelementptr &([32 * i32]* %result)[i64 0][i64 23];
    store i32* %55 with i32 279;
    i32* %56 = getelementptr &([32 * i32]* %result)[i64 0][i64 24];
    store i32* %56 with i32 58;
    i32* %57 = getelementptr &([32 * i32]* %result)[i64 0][i64 25];
    store i32* %57 with i32 87;
    i32* %58 = getelementptr &([32 * i32]* %result)[i64 0][i64 26];
    store i32* %58 with i32 96;
    i32* %59 = getelementptr &([32 * i32]* %result)[i64 0][i64 27];
    store i32* %59 with i32 36;
    i32* %60 = getelementptr &([32 * i32]* %result)[i64 0][i64 28];
    store i32* %60 with i32 39;
    i32* %61 = getelementptr &([32 * i32]* %result)[i64 0][i64 29];
    store i32* %61 with i32 28;
    i32* %62 = getelementptr &([32 * i32]* %result)[i64 0][i64 30];
    store i32* %62 with i32 1;
    i32* %63 = getelementptr &([32 * i32]* %result)[i64 0][i64 31];
    store i32* %63 with i32 290;
    [1000 * i32]* %64 = ptrcast [1000 * i32]* @count to [1000 * i32]*;
    ubr ^while.body;
  ^while.body:
    i32 %65 = phi [^entry, i32 0] [^while.body, i32 %68];
    i32* %66 = getelementptr &([32 * i32]* %result)[i64 0][i32 %65];
    i32 %67 = load i32* %66;
    call (i32) -> void @putint(i32 %67);
    i32 %68 = add i32 %65, i32 1;
    i1 %69 = icmp slt i32 %68, i32 32;
    cbr i1 %69(prob = 0.96875), ^while.body, ^while.header;
  ^while.header:
    i32 %70 = phi [^while.body, i32 0] [^b, i32 %81];
    i32 %71 = sub i32 32, i32 %70;
    i32 %72 = add i32 %71, i32 -1;
    i1 %73 = icmp slt i32 %70, i32 31;
    cbr i1 %73(prob = 0.984615), ^while.header1, ^while.body1;
  ^while.header1:
    i32 %74 = phi [^while.header, i32 0] [^while.body2, i32 %87] [^if.then, i32 %87];
    i1 %75 = icmp sgt i32 %72, i32 %74;
    cbr i1 %75(prob = 0.984615), ^while.body2, ^b;
  ^while.body1:
    i32 %76 = phi [^while.header, i32 0] [^while.body1, i32 %79];
    i32* %77 = getelementptr &([32 * i32]* %result)[i64 0][i32 %76];
    i32 %78 = load i32* %77;
    call (i32) -> void @putint(i32 %78);
    i32 %79 = add i32 %76, i32 1;
    i1 %80 = icmp slt i32 %79, i32 32;
    cbr i1 %80(prob = 0.96875), ^while.body1, ^entry1;
  ^b:
    i32 %81 = add i32 %70, i32 1;
    ubr ^while.header;
  ^while.body2:
    i32* %82 = getelementptr &(i32* %32)[i32 %74];
    i32 %83 = load i32* %82;
    i32* %84 = getelementptr &(i32* %82)[i64 1];
    i32 %85 = load i32* %84;
    i1 %86 = icmp sgt i32 %83, i32 %85;
    i32 %87 = add i32 %74, i32 1;
    cbr i1 %86(prob = 0.5), ^if.then, ^while.header1;
  ^entry1:
    i32 %88 = load i32* %48;
    i32 %89 = load i32* %47;
    i32 %90 = add i32 %88, i32 %89;
    i32 %91 = sdiv i32 %90, i32 2;
    call (i32) -> void @putint(i32 %91);
    ubr ^while.body3;
  ^if.then:
    store i32* %84 with i32 %83;
    store i32* %82 with i32 %85;
    ubr ^while.header1;
  ^while.body3:
    i32 %92 = phi [^entry1, i32 0] [^while.body3, i32 %157];
    i32* %93 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %92];
    store i32* %93 with i32 0;
    i32* %94 = getelementptr &(i32* %93)[i64 1];
    store i32* %94 with i32 0;
    i32* %95 = getelementptr &(i32* %93)[i64 2];
    store i32* %95 with i32 0;
    i32* %96 = getelementptr &(i32* %93)[i64 3];
    store i32* %96 with i32 0;
    i32* %97 = getelementptr &(i32* %93)[i64 4];
    store i32* %97 with i32 0;
    i32* %98 = getelementptr &(i32* %93)[i64 5];
    store i32* %98 with i32 0;
    i32* %99 = getelementptr &(i32* %93)[i64 6];
    store i32* %99 with i32 0;
    i32* %100 = getelementptr &(i32* %93)[i64 7];
    store i32* %100 with i32 0;
    i32* %101 = getelementptr &(i32* %93)[i64 8];
    store i32* %101 with i32 0;
    i32* %102 = getelementptr &(i32* %93)[i64 9];
    store i32* %102 with i32 0;
    i32* %103 = getelementptr &(i32* %93)[i64 10];
    store i32* %103 with i32 0;
    i32* %104 = getelementptr &(i32* %93)[i64 11];
    store i32* %104 with i32 0;
    i32* %105 = getelementptr &(i32* %93)[i64 12];
    store i32* %105 with i32 0;
    i32* %106 = getelementptr &(i32* %93)[i64 13];
    store i32* %106 with i32 0;
    i32* %107 = getelementptr &(i32* %93)[i64 14];
    store i32* %107 with i32 0;
    i32* %108 = getelementptr &(i32* %93)[i64 15];
    store i32* %108 with i32 0;
    i32* %109 = getelementptr &(i32* %93)[i64 16];
    store i32* %109 with i32 0;
    i32* %110 = getelementptr &(i32* %93)[i64 17];
    store i32* %110 with i32 0;
    i32* %111 = getelementptr &(i32* %93)[i64 18];
    store i32* %111 with i32 0;
    i32* %112 = getelementptr &(i32* %93)[i64 19];
    store i32* %112 with i32 0;
    i32* %113 = getelementptr &(i32* %93)[i64 20];
    store i32* %113 with i32 0;
    i32* %114 = getelementptr &(i32* %93)[i64 21];
    store i32* %114 with i32 0;
    i32* %115 = getelementptr &(i32* %93)[i64 22];
    store i32* %115 with i32 0;
    i32* %116 = getelementptr &(i32* %93)[i64 23];
    store i32* %116 with i32 0;
    i32* %117 = getelementptr &(i32* %93)[i64 24];
    store i32* %117 with i32 0;
    i32* %118 = getelementptr &(i32* %93)[i64 25];
    store i32* %118 with i32 0;
    i32* %119 = getelementptr &(i32* %93)[i64 26];
    store i32* %119 with i32 0;
    i32* %120 = getelementptr &(i32* %93)[i64 27];
    store i32* %120 with i32 0;
    i32* %121 = getelementptr &(i32* %93)[i64 28];
    store i32* %121 with i32 0;
    i32* %122 = getelementptr &(i32* %93)[i64 29];
    store i32* %122 with i32 0;
    i32* %123 = getelementptr &(i32* %93)[i64 30];
    store i32* %123 with i32 0;
    i32* %124 = getelementptr &(i32* %93)[i64 31];
    store i32* %124 with i32 0;
    i32* %125 = getelementptr &(i32* %93)[i64 32];
    store i32* %125 with i32 0;
    i32* %126 = getelementptr &(i32* %93)[i64 33];
    store i32* %126 with i32 0;
    i32* %127 = getelementptr &(i32* %93)[i64 34];
    store i32* %127 with i32 0;
    i32* %128 = getelementptr &(i32* %93)[i64 35];
    store i32* %128 with i32 0;
    i32* %129 = getelementptr &(i32* %93)[i64 36];
    store i32* %129 with i32 0;
    i32* %130 = getelementptr &(i32* %93)[i64 37];
    store i32* %130 with i32 0;
    i32* %131 = getelementptr &(i32* %93)[i64 38];
    store i32* %131 with i32 0;
    i32* %132 = getelementptr &(i32* %93)[i64 39];
    store i32* %132 with i32 0;
    i32* %133 = getelementptr &(i32* %93)[i64 40];
    store i32* %133 with i32 0;
    i32* %134 = getelementptr &(i32* %93)[i64 41];
    store i32* %134 with i32 0;
    i32* %135 = getelementptr &(i32* %93)[i64 42];
    store i32* %135 with i32 0;
    i32* %136 = getelementptr &(i32* %93)[i64 43];
    store i32* %136 with i32 0;
    i32* %137 = getelementptr &(i32* %93)[i64 44];
    store i32* %137 with i32 0;
    i32* %138 = getelementptr &(i32* %93)[i64 45];
    store i32* %138 with i32 0;
    i32* %139 = getelementptr &(i32* %93)[i64 46];
    store i32* %139 with i32 0;
    i32* %140 = getelementptr &(i32* %93)[i64 47];
    store i32* %140 with i32 0;
    i32* %141 = getelementptr &(i32* %93)[i64 48];
    store i32* %141 with i32 0;
    i32* %142 = getelementptr &(i32* %93)[i64 49];
    store i32* %142 with i32 0;
    i32* %143 = getelementptr &(i32* %93)[i64 50];
    store i32* %143 with i32 0;
    i32* %144 = getelementptr &(i32* %93)[i64 51];
    store i32* %144 with i32 0;
    i32* %145 = getelementptr &(i32* %93)[i64 52];
    store i32* %145 with i32 0;
    i32* %146 = getelementptr &(i32* %93)[i64 53];
    store i32* %146 with i32 0;
    i32* %147 = getelementptr &(i32* %93)[i64 54];
    store i32* %147 with i32 0;
    i32* %148 = getelementptr &(i32* %93)[i64 55];
    store i32* %148 with i32 0;
    i32* %149 = getelementptr &(i32* %93)[i64 56];
    store i32* %149 with i32 0;
    i32* %150 = getelementptr &(i32* %93)[i64 57];
    store i32* %150 with i32 0;
    i32* %151 = getelementptr &(i32* %93)[i64 58];
    store i32* %151 with i32 0;
    i32* %152 = getelementptr &(i32* %93)[i64 59];
    store i32* %152 with i32 0;
    i32* %153 = getelementptr &(i32* %93)[i64 60];
    store i32* %153 with i32 0;
    i32* %154 = getelementptr &(i32* %93)[i64 61];
    store i32* %154 with i32 0;
    i32* %155 = getelementptr &(i32* %93)[i64 62];
    store i32* %155 with i32 0;
    i32* %156 = getelementptr &(i32* %93)[i64 63];
    store i32* %156 with i32 0;
    i32 %157 = add i32 %92, i32 64;
    i1 %158 = icmp slt i32 %157, i32 960;
    cbr i1 %158(prob = 0.933333), ^while.body3, ^while.body4;
  ^while.body4:
    i32* %159 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %157];
    store i32* %159 with i32 0;
    i32* %160 = getelementptr &(i32* %159)[i64 1];
    store i32* %160 with i32 0;
    i32* %161 = getelementptr &(i32* %159)[i64 2];
    store i32* %161 with i32 0;
    i32* %162 = getelementptr &(i32* %159)[i64 3];
    store i32* %162 with i32 0;
    i32* %163 = getelementptr &(i32* %159)[i64 4];
    store i32* %163 with i32 0;
    i32* %164 = getelementptr &(i32* %159)[i64 5];
    store i32* %164 with i32 0;
    i32* %165 = getelementptr &(i32* %159)[i64 6];
    store i32* %165 with i32 0;
    i32* %166 = getelementptr &(i32* %159)[i64 7];
    store i32* %166 with i32 0;
    i32* %167 = getelementptr &(i32* %159)[i64 8];
    store i32* %167 with i32 0;
    i32* %168 = getelementptr &(i32* %159)[i64 9];
    store i32* %168 with i32 0;
    i32* %169 = getelementptr &(i32* %159)[i64 10];
    store i32* %169 with i32 0;
    i32* %170 = getelementptr &(i32* %159)[i64 11];
    store i32* %170 with i32 0;
    i32* %171 = getelementptr &(i32* %159)[i64 12];
    store i32* %171 with i32 0;
    i32* %172 = getelementptr &(i32* %159)[i64 13];
    store i32* %172 with i32 0;
    i32* %173 = getelementptr &(i32* %159)[i64 14];
    store i32* %173 with i32 0;
    i32* %174 = getelementptr &(i32* %159)[i64 15];
    store i32* %174 with i32 0;
    i32* %175 = getelementptr &(i32* %159)[i64 16];
    store i32* %175 with i32 0;
    i32* %176 = getelementptr &(i32* %159)[i64 17];
    store i32* %176 with i32 0;
    i32* %177 = getelementptr &(i32* %159)[i64 18];
    store i32* %177 with i32 0;
    i32* %178 = getelementptr &(i32* %159)[i64 19];
    store i32* %178 with i32 0;
    i32* %179 = getelementptr &(i32* %159)[i64 20];
    store i32* %179 with i32 0;
    i32* %180 = getelementptr &(i32* %159)[i64 21];
    store i32* %180 with i32 0;
    i32* %181 = getelementptr &(i32* %159)[i64 22];
    store i32* %181 with i32 0;
    i32* %182 = getelementptr &(i32* %159)[i64 23];
    store i32* %182 with i32 0;
    i32* %183 = getelementptr &(i32* %159)[i64 24];
    store i32* %183 with i32 0;
    i32* %184 = getelementptr &(i32* %159)[i64 25];
    store i32* %184 with i32 0;
    i32* %185 = getelementptr &(i32* %159)[i64 26];
    store i32* %185 with i32 0;
    i32* %186 = getelementptr &(i32* %159)[i64 27];
    store i32* %186 with i32 0;
    i32* %187 = getelementptr &(i32* %159)[i64 28];
    store i32* %187 with i32 0;
    i32* %188 = getelementptr &(i32* %159)[i64 29];
    store i32* %188 with i32 0;
    i32* %189 = getelementptr &(i32* %159)[i64 30];
    store i32* %189 with i32 0;
    i32* %190 = getelementptr &(i32* %159)[i64 31];
    store i32* %190 with i32 0;
    i32* %191 = getelementptr &(i32* %159)[i64 32];
    store i32* %191 with i32 0;
    i32* %192 = getelementptr &(i32* %159)[i64 33];
    store i32* %192 with i32 0;
    i32* %193 = getelementptr &(i32* %159)[i64 34];
    store i32* %193 with i32 0;
    i32* %194 = getelementptr &(i32* %159)[i64 35];
    store i32* %194 with i32 0;
    i32* %195 = getelementptr &(i32* %159)[i64 36];
    store i32* %195 with i32 0;
    i32* %196 = getelementptr &(i32* %159)[i64 37];
    store i32* %196 with i32 0;
    i32* %197 = getelementptr &(i32* %159)[i64 38];
    store i32* %197 with i32 0;
    i32* %198 = getelementptr &(i32* %159)[i64 39];
    store i32* %198 with i32 0;
    i32 %199 = load i32* %32;
    i32* %200 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %199];
    i32 %201 = load i32* %200;
    i32 %202 = add i32 %201, i32 1;
    store i32* %200 with i32 %202;
    i32 %203 = smax i32 %202, i32 0;
    i32 %204 = load i32* %33;
    i32* %205 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %204];
    i32 %206 = load i32* %205;
    i32 %207 = add i32 %206, i32 1;
    i1 %208 = icmp slt i32 %203, i32 %207;
    i1 %209 = icmp sgt i32 %202, i32 0;
    i32 %210 = select i1 %209 ? i32 %199 : i32 0;
    i32 %211 = select i1 %208 ? i32 %204 : i32 %210;
    i32 %212 = smax i32 %203, i32 %207;
    store i32* %205 with i32 %207;
    i32 %213 = load i32* %34;
    i32* %214 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %213];
    i32 %215 = load i32* %214;
    i32 %216 = add i32 %215, i32 1;
    i1 %217 = icmp slt i32 %212, i32 %216;
    i32 %218 = select i1 %217 ? i32 %213 : i32 %211;
    i32 %219 = smax i32 %212, i32 %216;
    store i32* %214 with i32 %216;
    i32 %220 = load i32* %35;
    i32* %221 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %220];
    i32 %222 = load i32* %221;
    i32 %223 = add i32 %222, i32 1;
    i1 %224 = icmp slt i32 %219, i32 %223;
    i32 %225 = select i1 %224 ? i32 %220 : i32 %218;
    i32 %226 = smax i32 %219, i32 %223;
    store i32* %221 with i32 %223;
    i32 %227 = load i32* %36;
    i32* %228 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %227];
    i32 %229 = load i32* %228;
    i32 %230 = add i32 %229, i32 1;
    i1 %231 = icmp slt i32 %226, i32 %230;
    i32 %232 = select i1 %231 ? i32 %227 : i32 %225;
    i32 %233 = smax i32 %226, i32 %230;
    store i32* %228 with i32 %230;
    i32 %234 = load i32* %37;
    i32* %235 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %234];
    i32 %236 = load i32* %235;
    i32 %237 = add i32 %236, i32 1;
    i1 %238 = icmp slt i32 %233, i32 %237;
    i32 %239 = select i1 %238 ? i32 %234 : i32 %232;
    i32 %240 = smax i32 %233, i32 %237;
    store i32* %235 with i32 %237;
    i32 %241 = load i32* %38;
    i32* %242 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %241];
    i32 %243 = load i32* %242;
    i32 %244 = add i32 %243, i32 1;
    i1 %245 = icmp slt i32 %240, i32 %244;
    i32 %246 = select i1 %245 ? i32 %241 : i32 %239;
    i32 %247 = smax i32 %240, i32 %244;
    store i32* %242 with i32 %244;
    i32 %248 = load i32* %39;
    i32* %249 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %248];
    i32 %250 = load i32* %249;
    i32 %251 = add i32 %250, i32 1;
    i1 %252 = icmp slt i32 %247, i32 %251;
    i32 %253 = select i1 %252 ? i32 %248 : i32 %246;
    i32 %254 = smax i32 %247, i32 %251;
    store i32* %249 with i32 %251;
    i32 %255 = load i32* %40;
    i32* %256 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %255];
    i32 %257 = load i32* %256;
    i32 %258 = add i32 %257, i32 1;
    i1 %259 = icmp slt i32 %254, i32 %258;
    i32 %260 = select i1 %259 ? i32 %255 : i32 %253;
    i32 %261 = smax i32 %254, i32 %258;
    store i32* %256 with i32 %258;
    i32 %262 = load i32* %41;
    i32* %263 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %262];
    i32 %264 = load i32* %263;
    i32 %265 = add i32 %264, i32 1;
    i1 %266 = icmp slt i32 %261, i32 %265;
    i32 %267 = select i1 %266 ? i32 %262 : i32 %260;
    i32 %268 = smax i32 %261, i32 %265;
    store i32* %263 with i32 %265;
    i32 %269 = load i32* %42;
    i32* %270 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %269];
    i32 %271 = load i32* %270;
    i32 %272 = add i32 %271, i32 1;
    i1 %273 = icmp slt i32 %268, i32 %272;
    i32 %274 = select i1 %273 ? i32 %269 : i32 %267;
    i32 %275 = smax i32 %268, i32 %272;
    store i32* %270 with i32 %272;
    i32 %276 = load i32* %43;
    i32* %277 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %276];
    i32 %278 = load i32* %277;
    i32 %279 = add i32 %278, i32 1;
    i1 %280 = icmp slt i32 %275, i32 %279;
    i32 %281 = select i1 %280 ? i32 %276 : i32 %274;
    i32 %282 = smax i32 %275, i32 %279;
    store i32* %277 with i32 %279;
    i32 %283 = load i32* %44;
    i32* %284 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %283];
    i32 %285 = load i32* %284;
    i32 %286 = add i32 %285, i32 1;
    i1 %287 = icmp slt i32 %282, i32 %286;
    i32 %288 = select i1 %287 ? i32 %283 : i32 %281;
    i32 %289 = smax i32 %282, i32 %286;
    store i32* %284 with i32 %286;
    i32 %290 = load i32* %45;
    i32* %291 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %290];
    i32 %292 = load i32* %291;
    i32 %293 = add i32 %292, i32 1;
    i1 %294 = icmp slt i32 %289, i32 %293;
    i32 %295 = select i1 %294 ? i32 %290 : i32 %288;
    i32 %296 = smax i32 %289, i32 %293;
    store i32* %291 with i32 %293;
    i32 %297 = load i32* %46;
    i32* %298 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %297];
    i32 %299 = load i32* %298;
    i32 %300 = add i32 %299, i32 1;
    i1 %301 = icmp slt i32 %296, i32 %300;
    i32 %302 = select i1 %301 ? i32 %297 : i32 %295;
    i32 %303 = smax i32 %296, i32 %300;
    store i32* %298 with i32 %300;
    i32 %304 = load i32* %47;
    i32* %305 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %304];
    i32 %306 = load i32* %305;
    i32 %307 = add i32 %306, i32 1;
    i1 %308 = icmp slt i32 %303, i32 %307;
    i32 %309 = select i1 %308 ? i32 %304 : i32 %302;
    i32 %310 = smax i32 %303, i32 %307;
    store i32* %305 with i32 %307;
    i32 %311 = load i32* %48;
    i32* %312 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %311];
    i32 %313 = load i32* %312;
    i32 %314 = add i32 %313, i32 1;
    i1 %315 = icmp slt i32 %310, i32 %314;
    i32 %316 = select i1 %315 ? i32 %311 : i32 %309;
    i32 %317 = smax i32 %310, i32 %314;
    store i32* %312 with i32 %314;
    i32 %318 = load i32* %49;
    i32* %319 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %318];
    i32 %320 = load i32* %319;
    i32 %321 = add i32 %320, i32 1;
    i1 %322 = icmp slt i32 %317, i32 %321;
    i32 %323 = select i1 %322 ? i32 %318 : i32 %316;
    i32 %324 = smax i32 %317, i32 %321;
    store i32* %319 with i32 %321;
    i32 %325 = load i32* %50;
    i32* %326 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %325];
    i32 %327 = load i32* %326;
    i32 %328 = add i32 %327, i32 1;
    i1 %329 = icmp slt i32 %324, i32 %328;
    i32 %330 = select i1 %329 ? i32 %325 : i32 %323;
    i32 %331 = smax i32 %324, i32 %328;
    store i32* %326 with i32 %328;
    i32 %332 = load i32* %51;
    i32* %333 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %332];
    i32 %334 = load i32* %333;
    i32 %335 = add i32 %334, i32 1;
    i1 %336 = icmp slt i32 %331, i32 %335;
    i32 %337 = select i1 %336 ? i32 %332 : i32 %330;
    i32 %338 = smax i32 %331, i32 %335;
    store i32* %333 with i32 %335;
    i32 %339 = load i32* %52;
    i32* %340 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %339];
    i32 %341 = load i32* %340;
    i32 %342 = add i32 %341, i32 1;
    i1 %343 = icmp slt i32 %338, i32 %342;
    i32 %344 = select i1 %343 ? i32 %339 : i32 %337;
    i32 %345 = smax i32 %338, i32 %342;
    store i32* %340 with i32 %342;
    i32 %346 = load i32* %53;
    i32* %347 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %346];
    i32 %348 = load i32* %347;
    i32 %349 = add i32 %348, i32 1;
    i1 %350 = icmp slt i32 %345, i32 %349;
    i32 %351 = select i1 %350 ? i32 %346 : i32 %344;
    i32 %352 = smax i32 %345, i32 %349;
    store i32* %347 with i32 %349;
    i32 %353 = load i32* %54;
    i32* %354 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %353];
    i32 %355 = load i32* %354;
    i32 %356 = add i32 %355, i32 1;
    i1 %357 = icmp slt i32 %352, i32 %356;
    i32 %358 = select i1 %357 ? i32 %353 : i32 %351;
    i32 %359 = smax i32 %352, i32 %356;
    store i32* %354 with i32 %356;
    i32 %360 = load i32* %55;
    i32* %361 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %360];
    i32 %362 = load i32* %361;
    i32 %363 = add i32 %362, i32 1;
    i1 %364 = icmp slt i32 %359, i32 %363;
    i32 %365 = select i1 %364 ? i32 %360 : i32 %358;
    i32 %366 = smax i32 %359, i32 %363;
    store i32* %361 with i32 %363;
    i32 %367 = load i32* %56;
    i32* %368 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %367];
    i32 %369 = load i32* %368;
    i32 %370 = add i32 %369, i32 1;
    i1 %371 = icmp slt i32 %366, i32 %370;
    i32 %372 = select i1 %371 ? i32 %367 : i32 %365;
    i32 %373 = smax i32 %366, i32 %370;
    store i32* %368 with i32 %370;
    i32 %374 = load i32* %57;
    i32* %375 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %374];
    i32 %376 = load i32* %375;
    i32 %377 = add i32 %376, i32 1;
    i1 %378 = icmp slt i32 %373, i32 %377;
    i32 %379 = select i1 %378 ? i32 %374 : i32 %372;
    i32 %380 = smax i32 %373, i32 %377;
    store i32* %375 with i32 %377;
    i32 %381 = load i32* %58;
    i32* %382 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %381];
    i32 %383 = load i32* %382;
    i32 %384 = add i32 %383, i32 1;
    i1 %385 = icmp slt i32 %380, i32 %384;
    i32 %386 = select i1 %385 ? i32 %381 : i32 %379;
    i32 %387 = smax i32 %380, i32 %384;
    store i32* %382 with i32 %384;
    i32 %388 = load i32* %59;
    i32* %389 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %388];
    i32 %390 = load i32* %389;
    i32 %391 = add i32 %390, i32 1;
    i1 %392 = icmp slt i32 %387, i32 %391;
    i32 %393 = select i1 %392 ? i32 %388 : i32 %386;
    i32 %394 = smax i32 %387, i32 %391;
    store i32* %389 with i32 %391;
    i32 %395 = load i32* %60;
    i32* %396 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %395];
    i32 %397 = load i32* %396;
    i32 %398 = add i32 %397, i32 1;
    i1 %399 = icmp slt i32 %394, i32 %398;
    i32 %400 = select i1 %399 ? i32 %395 : i32 %393;
    i32 %401 = smax i32 %394, i32 %398;
    store i32* %396 with i32 %398;
    i32 %402 = load i32* %61;
    i32* %403 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %402];
    i32 %404 = load i32* %403;
    i32 %405 = add i32 %404, i32 1;
    i1 %406 = icmp slt i32 %401, i32 %405;
    i32 %407 = select i1 %406 ? i32 %402 : i32 %400;
    i32 %408 = smax i32 %401, i32 %405;
    store i32* %403 with i32 %405;
    i32 %409 = load i32* %62;
    i32* %410 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %409];
    i32 %411 = load i32* %410;
    i32 %412 = add i32 %411, i32 1;
    i1 %413 = icmp slt i32 %408, i32 %412;
    i32 %414 = select i1 %413 ? i32 %409 : i32 %407;
    i32 %415 = smax i32 %408, i32 %412;
    store i32* %410 with i32 %412;
    i32 %416 = load i32* %63;
    i32* %417 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %416];
    i32 %418 = load i32* %417;
    i32 %419 = add i32 %418, i32 1;
    i1 %420 = icmp slt i32 %415, i32 %419;
    i32 %421 = select i1 %420 ? i32 %416 : i32 %414;
    store i32* %417 with i32 %419;
    call (i32) -> void @putint(i32 %421);
    i32 %422 = load i32* %0;
    store i32* %32 with i32 %422;
    i32 %423 = load i32* %1;
    store i32* %33 with i32 %423;
    i32 %424 = load i32* %2;
    store i32* %34 with i32 %424;
    i32 %425 = load i32* %3;
    store i32* %35 with i32 %425;
    i32 %426 = load i32* %4;
    store i32* %36 with i32 %426;
    i32 %427 = load i32* %5;
    store i32* %37 with i32 %427;
    i32 %428 = load i32* %6;
    store i32* %38 with i32 %428;
    i32 %429 = load i32* %7;
    store i32* %39 with i32 %429;
    i32 %430 = load i32* %8;
    store i32* %40 with i32 %430;
    i32 %431 = load i32* %9;
    store i32* %41 with i32 %431;
    i32 %432 = load i32* %10;
    store i32* %42 with i32 %432;
    i32 %433 = load i32* %11;
    store i32* %43 with i32 %433;
    i32 %434 = load i32* %12;
    store i32* %44 with i32 %434;
    i32 %435 = load i32* %13;
    store i32* %45 with i32 %435;
    i32 %436 = load i32* %14;
    store i32* %46 with i32 %436;
    i32 %437 = load i32* %15;
    store i32* %47 with i32 %437;
    i32 %438 = load i32* %16;
    store i32* %48 with i32 %438;
    i32 %439 = load i32* %17;
    store i32* %49 with i32 %439;
    i32 %440 = load i32* %18;
    store i32* %50 with i32 %440;
    i32 %441 = load i32* %19;
    store i32* %51 with i32 %441;
    i32 %442 = load i32* %20;
    store i32* %52 with i32 %442;
    i32 %443 = load i32* %21;
    store i32* %53 with i32 %443;
    i32 %444 = load i32* %22;
    store i32* %54 with i32 %444;
    i32 %445 = load i32* %23;
    store i32* %55 with i32 %445;
    i32 %446 = load i32* %24;
    store i32* %56 with i32 %446;
    i32 %447 = load i32* %25;
    store i32* %57 with i32 %447;
    i32 %448 = load i32* %26;
    store i32* %58 with i32 %448;
    i32 %449 = load i32* %27;
    store i32* %59 with i32 %449;
    i32 %450 = load i32* %28;
    store i32* %60 with i32 %450;
    i32 %451 = load i32* %29;
    store i32* %61 with i32 %451;
    i32 %452 = load i32* %30;
    store i32* %62 with i32 %452;
    i32 %453 = load i32* %31;
    store i32* %63 with i32 %453;
    ubr ^while.header2;
  ^while.header2:
    i32 %454 = phi [^while.body4, i32 0] [^b1, i32 %465];
    i32 %455 = sub i32 32, i32 %454;
    i32 %456 = add i32 %455, i32 -1;
    i1 %457 = icmp slt i32 %454, i32 31;
    cbr i1 %457(prob = 0.984615), ^while.header3, ^while.body5;
  ^while.header3:
    i32 %458 = phi [^while.header2, i32 0] [^while.body6, i32 %471] [^if.then1, i32 %471];
    i1 %459 = icmp sgt i32 %456, i32 %458;
    cbr i1 %459(prob = 0.984615), ^while.body6, ^b1;
  ^while.body5:
    i32 %460 = phi [^while.header2, i32 0] [^while.body5, i32 %463];
    i32* %461 = getelementptr &([32 * i32]* %result)[i64 0][i32 %460];
    i32 %462 = load i32* %461;
    call (i32) -> void @putint(i32 %462);
    i32 %463 = add i32 %460, i32 1;
    i1 %464 = icmp slt i32 %463, i32 32;
    cbr i1 %464(prob = 0.96875), ^while.body5, ^while.body7;
  ^b1:
    i32 %465 = add i32 %454, i32 1;
    ubr ^while.header2;
  ^while.body6:
    i32* %466 = getelementptr &(i32* %32)[i32 %458];
    i32 %467 = load i32* %466;
    i32* %468 = getelementptr &(i32* %466)[i64 1];
    i32 %469 = load i32* %468;
    i1 %470 = icmp sgt i32 %467, i32 %469;
    i32 %471 = add i32 %458, i32 1;
    cbr i1 %470(prob = 0.5), ^if.then1, ^while.header3;
  ^while.body7:
    i32 %472 = load i32* %0;
    store i32* %32 with i32 %472;
    i32 %473 = load i32* %1;
    store i32* %33 with i32 %473;
    i32 %474 = load i32* %2;
    store i32* %34 with i32 %474;
    i32 %475 = load i32* %3;
    store i32* %35 with i32 %475;
    i32 %476 = load i32* %4;
    store i32* %36 with i32 %476;
    i32 %477 = load i32* %5;
    store i32* %37 with i32 %477;
    i32 %478 = load i32* %6;
    store i32* %38 with i32 %478;
    i32 %479 = load i32* %7;
    store i32* %39 with i32 %479;
    i32 %480 = load i32* %8;
    store i32* %40 with i32 %480;
    i32 %481 = load i32* %9;
    store i32* %41 with i32 %481;
    i32 %482 = load i32* %10;
    store i32* %42 with i32 %482;
    i32 %483 = load i32* %11;
    store i32* %43 with i32 %483;
    i32 %484 = load i32* %12;
    store i32* %44 with i32 %484;
    i32 %485 = load i32* %13;
    store i32* %45 with i32 %485;
    i32 %486 = load i32* %14;
    store i32* %46 with i32 %486;
    i32 %487 = load i32* %15;
    store i32* %47 with i32 %487;
    i32 %488 = load i32* %16;
    store i32* %48 with i32 %488;
    i32 %489 = load i32* %17;
    store i32* %49 with i32 %489;
    i32 %490 = load i32* %18;
    store i32* %50 with i32 %490;
    i32 %491 = load i32* %19;
    store i32* %51 with i32 %491;
    i32 %492 = load i32* %20;
    store i32* %52 with i32 %492;
    i32 %493 = load i32* %21;
    store i32* %53 with i32 %493;
    i32 %494 = load i32* %22;
    store i32* %54 with i32 %494;
    i32 %495 = load i32* %23;
    store i32* %55 with i32 %495;
    i32 %496 = load i32* %24;
    store i32* %56 with i32 %496;
    i32 %497 = load i32* %25;
    store i32* %57 with i32 %497;
    i32 %498 = load i32* %26;
    store i32* %58 with i32 %498;
    i32 %499 = load i32* %27;
    store i32* %59 with i32 %499;
    i32 %500 = load i32* %28;
    store i32* %60 with i32 %500;
    i32 %501 = load i32* %29;
    store i32* %61 with i32 %501;
    i32 %502 = load i32* %30;
    store i32* %62 with i32 %502;
    i32 %503 = load i32* %31;
    store i32* %63 with i32 %503;
    ubr ^while.header4;
  ^if.then1:
    store i32* %468 with i32 %467;
    store i32* %466 with i32 %469;
    ubr ^while.header3;
  ^while.header4:
    i32 %504 = phi [^while.body7, i32 1] [^b2, i32 %550];
    i1 %505 = icmp slt i32 %504, i32 32;
    cbr i1 %505(prob = 0.984615), ^while.body8, ^while.body9;
  ^while.body8:
    i32* %506 = getelementptr &(i32* %32)[i32 %504];
    i32 %507 = load i32* %506;
    i32 %508 = add i32 %504, i32 -1;
    ubr ^while.header5;
  ^while.body9:
    i32 %509 = phi [^while.header4, i32 0] [^while.body9, i32 %512];
    i32* %510 = getelementptr &([32 * i32]* %result)[i64 0][i32 %509];
    i32 %511 = load i32* %510;
    call (i32) -> void @putint(i32 %511);
    i32 %512 = add i32 %509, i32 1;
    i1 %513 = icmp slt i32 %512, i32 32;
    cbr i1 %513(prob = 0.96875), ^while.body9, ^while.body10;
  ^while.header5:
    i32 %514 = phi [^while.body8, i32 %508] [^while.body12, i32 %559];
    i32 %515 = add i32 %514, i32 1;
    i32* %516 = getelementptr &(i32* %32)[i32 %515];
    i1 %517 = icmp sgt i32 %514, i32 -1;
    cbr i1 %517(prob = 0.5), ^b3, ^b2;
  ^while.body10:
    i32 %518 = load i32* %0;
    store i32* %32 with i32 %518;
    i32 %519 = load i32* %1;
    store i32* %33 with i32 %519;
    i32 %520 = load i32* %2;
    store i32* %34 with i32 %520;
    i32 %521 = load i32* %3;
    store i32* %35 with i32 %521;
    i32 %522 = load i32* %4;
    store i32* %36 with i32 %522;
    i32 %523 = load i32* %5;
    store i32* %37 with i32 %523;
    i32 %524 = load i32* %6;
    store i32* %38 with i32 %524;
    i32 %525 = load i32* %7;
    store i32* %39 with i32 %525;
    i32 %526 = load i32* %8;
    store i32* %40 with i32 %526;
    i32 %527 = load i32* %9;
    store i32* %41 with i32 %527;
    i32 %528 = load i32* %10;
    store i32* %42 with i32 %528;
    i32 %529 = load i32* %11;
    store i32* %43 with i32 %529;
    i32 %530 = load i32* %12;
    store i32* %44 with i32 %530;
    i32 %531 = load i32* %13;
    store i32* %45 with i32 %531;
    i32 %532 = load i32* %14;
    store i32* %46 with i32 %532;
    i32 %533 = load i32* %15;
    store i32* %47 with i32 %533;
    i32 %534 = load i32* %16;
    store i32* %48 with i32 %534;
    i32 %535 = load i32* %17;
    store i32* %49 with i32 %535;
    i32 %536 = load i32* %18;
    store i32* %50 with i32 %536;
    i32 %537 = load i32* %19;
    store i32* %51 with i32 %537;
    i32 %538 = load i32* %20;
    store i32* %52 with i32 %538;
    i32 %539 = load i32* %21;
    store i32* %53 with i32 %539;
    i32 %540 = load i32* %22;
    store i32* %54 with i32 %540;
    i32 %541 = load i32* %23;
    store i32* %55 with i32 %541;
    i32 %542 = load i32* %24;
    store i32* %56 with i32 %542;
    i32 %543 = load i32* %25;
    store i32* %57 with i32 %543;
    i32 %544 = load i32* %26;
    store i32* %58 with i32 %544;
    i32 %545 = load i32* %27;
    store i32* %59 with i32 %545;
    i32 %546 = load i32* %28;
    store i32* %60 with i32 %546;
    i32 %547 = load i32* %29;
    store i32* %61 with i32 %547;
    i32 %548 = load i32* %30;
    store i32* %62 with i32 %548;
    i32 %549 = load i32* %31;
    store i32* %63 with i32 %549;
    call (i32*, i32, i32) -> void @QuickSort(i32* %32, i32 0, i32 31);
    ubr ^while.body11;
  ^b2:
    store i32* %516 with i32 %507;
    i32 %550 = add i32 %504, i32 1;
    ubr ^while.header4;
  ^b3:
    i32* %551 = getelementptr &(i32* %32)[i32 %514];
    i32 %552 = load i32* %551;
    i1 %553 = icmp slt i32 %507, i32 %552;
    cbr i1 %553(prob = 0.984615), ^while.body12, ^b2;
  ^while.body11:
    i32 %554 = phi [^while.body10, i32 0] [^while.body11, i32 %557];
    i32* %555 = getelementptr &([32 * i32]* %result)[i64 0][i32 %554];
    i32 %556 = load i32* %555;
    call (i32) -> void @putint(i32 %556);
    i32 %557 = add i32 %554, i32 1;
    i1 %558 = icmp slt i32 %557, i32 32;
    cbr i1 %558(prob = 0.96875), ^while.body11, ^while.body13;
  ^while.body12:
    store i32* %516 with i32 %552;
    i32 %559 = add i32 %514, i32 -1;
    ubr ^while.header5;
  ^while.body13:
    i32 %560 = load i32* %0;
    store i32* %32 with i32 %560;
    i32 %561 = load i32* %1;
    store i32* %33 with i32 %561;
    i32 %562 = load i32* %2;
    store i32* %34 with i32 %562;
    i32 %563 = load i32* %3;
    store i32* %35 with i32 %563;
    i32 %564 = load i32* %4;
    store i32* %36 with i32 %564;
    i32 %565 = load i32* %5;
    store i32* %37 with i32 %565;
    i32 %566 = load i32* %6;
    store i32* %38 with i32 %566;
    i32 %567 = load i32* %7;
    store i32* %39 with i32 %567;
    i32 %568 = load i32* %8;
    store i32* %40 with i32 %568;
    i32 %569 = load i32* %9;
    store i32* %41 with i32 %569;
    i32 %570 = load i32* %10;
    store i32* %42 with i32 %570;
    i32 %571 = load i32* %11;
    store i32* %43 with i32 %571;
    i32 %572 = load i32* %12;
    store i32* %44 with i32 %572;
    i32 %573 = load i32* %13;
    store i32* %45 with i32 %573;
    i32 %574 = load i32* %14;
    store i32* %46 with i32 %574;
    i32 %575 = load i32* %15;
    store i32* %47 with i32 %575;
    i32 %576 = load i32* %16;
    store i32* %48 with i32 %576;
    i32 %577 = load i32* %17;
    store i32* %49 with i32 %577;
    i32 %578 = load i32* %18;
    store i32* %50 with i32 %578;
    i32 %579 = load i32* %19;
    store i32* %51 with i32 %579;
    i32 %580 = load i32* %20;
    store i32* %52 with i32 %580;
    i32 %581 = load i32* %21;
    store i32* %53 with i32 %581;
    i32 %582 = load i32* %22;
    store i32* %54 with i32 %582;
    i32 %583 = load i32* %23;
    store i32* %55 with i32 %583;
    i32 %584 = load i32* %24;
    store i32* %56 with i32 %584;
    i32 %585 = load i32* %25;
    store i32* %57 with i32 %585;
    i32 %586 = load i32* %26;
    store i32* %58 with i32 %586;
    i32 %587 = load i32* %27;
    store i32* %59 with i32 %587;
    i32 %588 = load i32* %28;
    store i32* %60 with i32 %588;
    i32 %589 = load i32* %29;
    store i32* %61 with i32 %589;
    i32 %590 = load i32* %30;
    store i32* %62 with i32 %590;
    i32 %591 = load i32* %31;
    store i32* %63 with i32 %591;
    ubr ^while.header6;
  ^while.header6:
    i32 %592 = phi [^while.body13, i32 0] [^if.then2, i32 %597] [^if.else, i32 0];
    i32 %593 = phi [^while.body13, i32 0] [^if.then2, i32 %600] [^if.else, i32 %600];
    i1 %594 = icmp slt i32 %593, i32 32;
    cbr i1 %594(prob = 0.984615), ^while.body14, ^while.body15;
  ^while.body14:
    i32* %595 = getelementptr &(i32* %32)[i32 %593];
    i32 %596 = load i32* %595;
    i32 %597 = add i32 %592, i32 %596;
    i32 %598 = and i32 %593, i32 3;
    i1 %599 = icmp neq i32 %598, i32 3;
    i32 %600 = add i32 %593, i32 1;
    cbr i1 %599(prob = 0.5), ^if.then2, ^if.else;
  ^while.body15:
    i32 %601 = phi [^while.header6, i32 0] [^while.body15, i32 %604];
    i32* %602 = getelementptr &([32 * i32]* %result)[i64 0][i32 %601];
    i32 %603 = load i32* %602;
    call (i32) -> void @putint(i32 %603);
    i32 %604 = add i32 %601, i32 1;
    i1 %605 = icmp slt i32 %604, i32 32;
    cbr i1 %605(prob = 0.96875), ^while.body15, ^while.body16;
  ^if.then2:
    store i32* %595 with i32 0;
    ubr ^while.header6;
  ^if.else:
    store i32* %595 with i32 %597;
    ubr ^while.header6;
  ^while.body16:
    i32 %606 = load i32* %0;
    store i32* %32 with i32 %606;
    i32 %607 = load i32* %1;
    store i32* %33 with i32 %607;
    i32 %608 = load i32* %2;
    store i32* %34 with i32 %608;
    i32 %609 = load i32* %3;
    store i32* %35 with i32 %609;
    i32 %610 = load i32* %4;
    store i32* %36 with i32 %610;
    i32 %611 = load i32* %5;
    store i32* %37 with i32 %611;
    i32 %612 = load i32* %6;
    store i32* %38 with i32 %612;
    i32 %613 = load i32* %7;
    store i32* %39 with i32 %613;
    i32 %614 = load i32* %8;
    store i32* %40 with i32 %614;
    i32 %615 = load i32* %9;
    store i32* %41 with i32 %615;
    i32 %616 = load i32* %10;
    store i32* %42 with i32 %616;
    i32 %617 = load i32* %11;
    store i32* %43 with i32 %617;
    i32 %618 = load i32* %12;
    store i32* %44 with i32 %618;
    i32 %619 = load i32* %13;
    store i32* %45 with i32 %619;
    i32 %620 = load i32* %14;
    store i32* %46 with i32 %620;
    i32 %621 = load i32* %15;
    store i32* %47 with i32 %621;
    i32 %622 = load i32* %16;
    store i32* %48 with i32 %622;
    i32 %623 = load i32* %17;
    store i32* %49 with i32 %623;
    i32 %624 = load i32* %18;
    store i32* %50 with i32 %624;
    i32 %625 = load i32* %19;
    store i32* %51 with i32 %625;
    i32 %626 = load i32* %20;
    store i32* %52 with i32 %626;
    i32 %627 = load i32* %21;
    store i32* %53 with i32 %627;
    i32 %628 = load i32* %22;
    store i32* %54 with i32 %628;
    i32 %629 = load i32* %23;
    store i32* %55 with i32 %629;
    i32 %630 = load i32* %24;
    store i32* %56 with i32 %630;
    i32 %631 = load i32* %25;
    store i32* %57 with i32 %631;
    i32 %632 = load i32* %26;
    store i32* %58 with i32 %632;
    i32 %633 = load i32* %27;
    store i32* %59 with i32 %633;
    i32 %634 = load i32* %28;
    store i32* %60 with i32 %634;
    i32 %635 = load i32* %29;
    store i32* %61 with i32 %635;
    i32 %636 = load i32* %30;
    store i32* %62 with i32 %636;
    i32 %637 = load i32* %31;
    store i32* %63 with i32 %637;
    ubr ^while.header7;
  ^while.header7:
    i32 %638 = phi [^while.body16, i32 0] [^if.then3, i32 %638] [^if.then4, i32 %653] [^if.else2, i32 %661];
    i32 %639 = phi [^while.body16, i32 0] [^if.then3, i32 %645] [^if.then4, i32 %639] [^if.else2, i32 %658];
    i32 %640 = phi [^while.body16, i32 0] [^if.then3, i32 %646] [^if.then4, i32 3] [^if.else2, i32 %662];
    i1 %641 = icmp slt i32 %640, i32 32;
    cbr i1 %641(prob = 0.984615), ^while.body18, ^while.body17;
  ^while.body17 {scalar}:
    store i32* %62 with i32 0;
    store i32* %63 with i32 0;
    ubr ^while.body19;
  ^while.body18:
    i1 %642 = icmp slt i32 %640, i32 2;
    cbr i1 %642(prob = 0.5), ^if.then3, ^if.else1;
  ^if.then3:
    i32* %643 = getelementptr &(i32* %32)[i32 %640];
    i32 %644 = load i32* %643;
    i32 %645 = add i32 %639, i32 %644;
    i32 %646 = add i32 %640, i32 1;
    ubr ^while.header7;
  ^if.else1:
    i1 %647 = icmp eq i32 %640, i32 2;
    cbr i1 %647(prob = 0.5), ^if.then4, ^if.else2;
  ^while.body19:
    i32 %648 = phi [^while.body17, i32 0] [^while.body19, i32 %651];
    i32* %649 = getelementptr &([32 * i32]* %result)[i64 0][i32 %648];
    i32 %650 = load i32* %649;
    call (i32) -> void @putint(i32 %650);
    i32 %651 = add i32 %648, i32 1;
    i1 %652 = icmp slt i32 %651, i32 32;
    cbr i1 %652(prob = 0.96875), ^while.body19, ^b4;
  ^if.then4:
    i32 %653 = load i32* %32;
    i32 %654 = sdiv i32 %639, i32 3;
    store i32* %32 with i32 %654;
    ubr ^while.header7;
  ^if.else2:
    i32* %655 = getelementptr &(i32* %32)[i32 %640];
    i32 %656 = load i32* %655;
    i32 %657 = add i32 %639, i32 %656;
    i32 %658 = sub i32 %657, i32 %638;
    i32 %659 = sdiv i32 %658, i32 3;
    i32* %660 = getelementptr &(i32* %655)[i64 -2];
    i32 %661 = load i32* %660;
    store i32* %660 with i32 %659;
    i32 %662 = add i32 %640, i32 1;
    ubr ^while.header7;
  ^b4:
    ret i32 0;
}
internal [1000 * i32]* @count, align 8 { Flexible };
