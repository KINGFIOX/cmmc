internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @QuickSort(i32* %arr, i32 %low, i32 %high, i32* %0) -> i32 {
^entry:
    i32* %k = alloc i32;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    i32* %high1 = alloc i32;
    i32* %low1 = alloc i32;
    i32** %arr1 = alloc i32*;
    store i32** %arr1 with i32* %arr;
    store i32* %low1 with i32 %low;
    store i32* %high1 with i32 %high;
    i1 %1 = scmp lt i32 %low, i32 %high;
    cbr i1 %1(prob = 0.5), ^if.then, ^b;
^if.then:
    store i32* %i with i32 %low;
    store i32* %j with i32 %high;
    store i32* %k with i32 0;
    i32* %2 = getelementptr &(i32* %arr)[i32 %low];
    i32 %3 = load i32* %2;
    store i32* %k with i32 %3;
    ubr ^while.header;
^b:
    ret i32 0;
^while.header:
    i32* %4 = phi [^b7, i32* %37] [^if.then2, i32* %37] [^if.then, i32* %arr];
    i32 %5 = phi [^b7, i32 %38] [^if.then2, i32 %50] [^if.then, i32 %low];
    i32 %6 = phi [^b7, i32 %39] [^if.then2, i32 %53] [^if.then, i32 %high];
    i32 %7 = phi [^b7, i32 %40] [^if.then2, i32 %52] [^if.then, i32 %3];
    i1 %8 = scmp lt i32 %5, i32 %6;
    cbr i1 %8(prob = 0.97), ^while.header1, ^b1;
^b1:
    i32* %9 = getelementptr &(i32* %4)[i32 %5];
    store i32* %9 with i32 %7;
    i32 %10 = load i32* %low1;
    i32 %11 = load i32* %i;
    i32 %12 = add i32 %11, i32 -1;
    i32 %13 = call (i32*, i32, i32, i32*) -> i32 @QuickSort(i32* %4, i32 %10, i32 %12, i32* %0);
    i32* %14 = load i32** %arr1;
    i32 %15 = load i32* %high1;
    i32 %16 = load i32* %i;
    i32 %17 = add i32 %16, i32 1;
    i32 %18 = call (i32*, i32, i32, i32*) -> i32 @QuickSort(i32* %14, i32 %17, i32 %15, i32* %0);
    ubr ^b;
^while.header1:
    i32* %19 = phi [^while.header, i32* %4] [^while.body, i32* %19];
    i32 %20 = phi [^while.header, i32 %5] [^while.body, i32 %20];
    i32 %21 = phi [^while.header, i32 %6] [^while.body, i32 %29];
    i32 %22 = phi [^while.header, i32 %7] [^while.body, i32 %22];
    i1 %23 = scmp lt i32 %20, i32 %21;
    cbr i1 %23(prob = 0.5), ^b2, ^b3;
^b2:
    i32* %24 = getelementptr &(i32* %19)[i32 %21];
    i32 %25 = load i32* %24;
    i32 %26 = add i32 %22, i32 -1;
    i1 %27 = scmp gt i32 %25, i32 %26;
    ubr ^b3;
^b3:
    i1 %28 = phi [^b2, i1 %27] [^while.header1, i1 false];
    cbr i1 %28(prob = 0.97), ^while.body, ^b4;
^while.body:
    i32 %29 = add i32 %21, i32 -1;
    store i32* %j with i32 %29;
    ubr ^while.header1;
^b4:
    cbr i1 %23(prob = 0.5), ^if.then1, ^while.header2;
^if.then1:
    i32* %30 = getelementptr &(i32* %19)[i32 %20];
    i32* %31 = getelementptr &(i32* %19)[i32 %21];
    i32 %32 = load i32* %31;
    store i32* %30 with i32 %32;
    i32 %33 = load i32* %i;
    i32 %34 = load i32* %j;
    i32 %35 = load i32* %k;
    i32 %36 = add i32 %33, i32 1;
    store i32* %i with i32 %36;
    ubr ^while.header2;
^while.header2:
    i32* %37 = phi [^while.body1, i32* %37] [^if.then1, i32* %19] [^b4, i32* %19];
    i32 %38 = phi [^while.body1, i32 %46] [^if.then1, i32 %36] [^b4, i32 %20];
    i32 %39 = phi [^while.body1, i32 %39] [^if.then1, i32 %34] [^b4, i32 %21];
    i32 %40 = phi [^while.body1, i32 %40] [^if.then1, i32 %35] [^b4, i32 %22];
    i1 %41 = scmp lt i32 %38, i32 %39;
    cbr i1 %41(prob = 0.5), ^b5, ^b6;
^b5:
    i32* %42 = getelementptr &(i32* %37)[i32 %38];
    i32 %43 = load i32* %42;
    i1 %44 = scmp lt i32 %43, i32 %40;
    ubr ^b6;
^b6:
    i1 %45 = phi [^b5, i1 %44] [^while.header2, i1 false];
    cbr i1 %45(prob = 0.97), ^while.body1, ^b7;
^while.body1:
    i32 %46 = add i32 %38, i32 1;
    store i32* %i with i32 %46;
    ubr ^while.header2;
^b7:
    cbr i1 %41(prob = 0.5), ^if.then2, ^while.header;
^if.then2:
    i32* %47 = getelementptr &(i32* %37)[i32 %39];
    i32* %48 = getelementptr &(i32* %37)[i32 %38];
    i32 %49 = load i32* %48;
    store i32* %47 with i32 %49;
    i32 %50 = load i32* %i;
    i32 %51 = load i32* %j;
    i32 %52 = load i32* %k;
    i32 %53 = add i32 %51, i32 -1;
    store i32* %j with i32 %53;
    ubr ^while.header;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %stride = alloc i32;
    i32* %sum = alloc i32;
    i32* %i = alloc i32;
    i32* %lastnum = alloc i32;
    i32* %i1 = alloc i32;
    i32* %stride1 = alloc i32;
    i32* %sum1 = alloc i32;
    i32* %i2 = alloc i32;
    i32* %i3 = alloc i32;
    i32* %i4 = alloc i32;
    i32* %i5 = alloc i32;
    i32* %temp = alloc i32;
    i32* %j = alloc i32;
    i32* %i6 = alloc i32;
    i32* %i7 = alloc i32;
    i32* %j1 = alloc i32;
    i32* %tmp = alloc i32;
    i32* %i8 = alloc i32;
    [1000 * i32]* %count = alloc [1000 * i32];
    i32* %i9 = alloc i32;
    i32* %j2 = alloc i32;
    i32* %tmp1 = alloc i32;
    i32* %temp1 = alloc i32;
    i32* %i10 = alloc i32;
    i32* %j3 = alloc i32;
    i32* %i11 = alloc i32;
    i32* %n = alloc i32;
    i32* %i12 = alloc i32;
    [32 * i32]* %result = alloc [32 * i32];
    [32 * i32]* %arr = alloc [32 * i32];
    store i32* %n with i32 32;
    i32* %0 = getelementptr &([32 * i32]* %arr)[i64 0][i64 0];
    store i32* %0 with i32 7;
    i32* %1 = getelementptr &([32 * i32]* %arr)[i64 0][i64 1];
    store i32* %1 with i32 23;
    i32* %2 = getelementptr &([32 * i32]* %arr)[i64 0][i64 2];
    store i32* %2 with i32 89;
    i32* %3 = getelementptr &([32 * i32]* %arr)[i64 0][i64 3];
    store i32* %3 with i32 26;
    i32* %4 = getelementptr &([32 * i32]* %arr)[i64 0][i64 4];
    store i32* %4 with i32 282;
    i32* %5 = getelementptr &([32 * i32]* %arr)[i64 0][i64 5];
    store i32* %5 with i32 254;
    i32* %6 = getelementptr &([32 * i32]* %arr)[i64 0][i64 6];
    store i32* %6 with i32 27;
    i32* %7 = getelementptr &([32 * i32]* %arr)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([32 * i32]* %arr)[i64 0][i64 8];
    store i32* %8 with i32 83;
    i32* %9 = getelementptr &([32 * i32]* %arr)[i64 0][i64 9];
    store i32* %9 with i32 273;
    i32* %10 = getelementptr &([32 * i32]* %arr)[i64 0][i64 10];
    store i32* %10 with i32 574;
    i32* %11 = getelementptr &([32 * i32]* %arr)[i64 0][i64 11];
    store i32* %11 with i32 905;
    i32* %12 = getelementptr &([32 * i32]* %arr)[i64 0][i64 12];
    store i32* %12 with i32 354;
    i32* %13 = getelementptr &([32 * i32]* %arr)[i64 0][i64 13];
    store i32* %13 with i32 657;
    i32* %14 = getelementptr &([32 * i32]* %arr)[i64 0][i64 14];
    store i32* %14 with i32 935;
    i32* %15 = getelementptr &([32 * i32]* %arr)[i64 0][i64 15];
    store i32* %15 with i32 264;
    i32* %16 = getelementptr &([32 * i32]* %arr)[i64 0][i64 16];
    store i32* %16 with i32 639;
    i32* %17 = getelementptr &([32 * i32]* %arr)[i64 0][i64 17];
    store i32* %17 with i32 459;
    i32* %18 = getelementptr &([32 * i32]* %arr)[i64 0][i64 18];
    store i32* %18 with i32 29;
    i32* %19 = getelementptr &([32 * i32]* %arr)[i64 0][i64 19];
    store i32* %19 with i32 68;
    i32* %20 = getelementptr &([32 * i32]* %arr)[i64 0][i64 20];
    store i32* %20 with i32 929;
    i32* %21 = getelementptr &([32 * i32]* %arr)[i64 0][i64 21];
    store i32* %21 with i32 756;
    i32* %22 = getelementptr &([32 * i32]* %arr)[i64 0][i64 22];
    store i32* %22 with i32 452;
    i32* %23 = getelementptr &([32 * i32]* %arr)[i64 0][i64 23];
    store i32* %23 with i32 279;
    i32* %24 = getelementptr &([32 * i32]* %arr)[i64 0][i64 24];
    store i32* %24 with i32 58;
    i32* %25 = getelementptr &([32 * i32]* %arr)[i64 0][i64 25];
    store i32* %25 with i32 87;
    i32* %26 = getelementptr &([32 * i32]* %arr)[i64 0][i64 26];
    store i32* %26 with i32 96;
    i32* %27 = getelementptr &([32 * i32]* %arr)[i64 0][i64 27];
    store i32* %27 with i32 36;
    i32* %28 = getelementptr &([32 * i32]* %arr)[i64 0][i64 28];
    store i32* %28 with i32 39;
    i32* %29 = getelementptr &([32 * i32]* %arr)[i64 0][i64 29];
    store i32* %29 with i32 28;
    i32* %30 = getelementptr &([32 * i32]* %arr)[i64 0][i64 30];
    store i32* %30 with i32 1;
    i32* %31 = getelementptr &([32 * i32]* %arr)[i64 0][i64 31];
    store i32* %31 with i32 290;
    i32* %32 = getelementptr &([32 * i32]* %result)[i64 0][i64 0];
    store i32* %i11 with i32 0;
    ubr ^while.header;
^while.header:
    i32 %33 = phi [^while.body, i32 %41] [^entry, i32 32];
    i32 %34 = phi [^while.body, i32 %43] [^entry, i32 0];
    i32* %35 = phi [^while.body, i32* %35] [^entry, i32* %32];
    i32* %36 = phi [^while.body, i32* %36] [^entry, i32* %0];
    i1 %37 = scmp lt i32 %34, i32 %33;
    cbr i1 %37(prob = 0.97), ^while.body, ^entry1;
^while.body:
    i32* %38 = getelementptr &(i32* %35)[i32 %34];
    i32* %39 = getelementptr &(i32* %36)[i32 %34];
    i32 %40 = load i32* %39;
    store i32* %38 with i32 %40;
    i32 %41 = load i32* %n;
    i32 %42 = load i32* %i11;
    i32 %43 = add i32 %42, i32 1;
    store i32* %i11 with i32 %43;
    ubr ^while.header;
^entry1:
    store i32* %temp1 with i32 0;
    store i32* %i10 with i32 0;
    store i32* %j3 with i32 0;
    ubr ^while.header1;
^while.header1:
    i32 %44 = phi [^while.body1, i32 %56] [^entry1, i32 %33];
    i32 %45 = phi [^while.body1, i32 %60] [^entry1, i32 0];
    i32 %46 = phi [^while.body1, i32 %59] [^entry1, i32 0];
    i32* %47 = phi [^while.body1, i32* %47] [^entry1, i32* %32];
    i1 %48 = scmp lt i32 %46, i32 %45;
    cbr i1 %48(prob = 0.97), ^while.body1, ^entry2;
^while.body1:
    i32* %49 = getelementptr &(i32* %47)[i32 %46];
    i32 %50 = load i32* %49;
    store i32* %temp1 with i32 %50;
    i32* %51 = getelementptr &(i32* %47)[i32 %45];
    i32 %52 = load i32* %51;
    store i32* %49 with i32 %52;
    i32 %53 = load i32* %j3;
    i32 %54 = load i32* %temp1;
    i32* %55 = getelementptr &(i32* %47)[i32 %53];
    store i32* %55 with i32 %54;
    i32 %56 = load i32* %n;
    i32 %57 = load i32* %j3;
    i32 %58 = load i32* %i10;
    i32 %59 = add i32 %58, i32 1;
    store i32* %i10 with i32 %59;
    i32 %60 = add i32 %57, i32 -1;
    store i32* %j3 with i32 %60;
    ubr ^while.header1;
^entry2:
    store i32* %i12 with i32 0;
    ubr ^while.header2;
^while.header2:
    i32 %61 = phi [^while.body2, i32 %66] [^entry2, i32 0];
    i32 %62 = phi [^while.body2, i32 %62] [^entry2, i32 %44];
    i1 %63 = scmp lt i32 %61, i32 32;
    cbr i1 %63(prob = 0.97), ^while.body2, ^entry3;
^while.body2:
    i32* %64 = getelementptr &([32 * i32]* %result)[i64 0][i32 %61];
    i32 %65 = load i32* %64;
    call (i32) -> void @putint(i32 %65);
    i32 %66 = add i32 %61, i32 1;
    store i32* %i12 with i32 %66;
    ubr ^while.header2;
^entry3:
    store i32* %i9 with i32 0;
    ubr ^while.header3;
^while.header3:
    i32 %67 = phi [^b1, i32 %72] [^entry3, i32 %62];
    i32 %68 = phi [^b1, i32 %82] [^entry3, i32 0];
    i32* %69 = phi [^b1, i32* %75] [^entry3, i32* %32];
    i32 %70 = add i32 %67, i32 -1;
    i1 %71 = scmp lt i32 %68, i32 %70;
    cbr i1 %71(prob = 0.97), ^while.body3, ^b;
^while.body3:
    store i32* %j2 with i32 0;
    ubr ^while.header4;
^b:
    store i32* %i12 with i32 0;
    ubr ^while.header5;
^while.header4:
    i32 %72 = phi [^b2, i32 %103] [^while.body3, i32 %67];
    i32 %73 = phi [^b2, i32 %106] [^while.body3, i32 0];
    i32 %74 = phi [^b2, i32 %105] [^while.body3, i32 %68];
    i32* %75 = phi [^b2, i32* %75] [^while.body3, i32* %69];
    i32 %76 = sub i32 %72, i32 %74;
    i32 %77 = add i32 %76, i32 -1;
    i1 %78 = scmp lt i32 %73, i32 %77;
    cbr i1 %78(prob = 0.97), ^while.body5, ^b1;
^while.header5:
    i32 %79 = phi [^while.body4, i32 %85] [^b, i32 0];
    i32 %80 = phi [^while.body4, i32 %80] [^b, i32 %67];
    i1 %81 = scmp lt i32 %79, i32 32;
    cbr i1 %81(prob = 0.97), ^while.body4, ^entry4;
^b1:
    i32 %82 = add i32 %74, i32 1;
    store i32* %i9 with i32 %82;
    ubr ^while.header3;
^while.body4:
    i32* %83 = getelementptr &([32 * i32]* %result)[i64 0][i32 %79];
    i32 %84 = load i32* %83;
    call (i32) -> void @putint(i32 %84);
    i32 %85 = add i32 %79, i32 1;
    store i32* %i12 with i32 %85;
    ubr ^while.header5;
^while.body5:
    i32* %86 = getelementptr &(i32* %75)[i32 %73];
    i32 %87 = load i32* %86;
    i32* %88 = getelementptr &(i32* %86)[i64 1];
    i32 %89 = load i32* %88;
    i1 %90 = scmp gt i32 %87, i32 %89;
    cbr i1 %90(prob = 0.5), ^if.then, ^b2;
^entry4:
    i32 %91 = srem i32 %80, i32 2;
    i1 %92 = scmp eq i32 %91, i32 0;
    cbr i1 %92(prob = 0.5), ^if.then1, ^if.else;
^if.then:
    store i32* %tmp1 with i32 0;
    i32 %93 = add i32 %73, i32 1;
    i32* %94 = getelementptr &(i32* %75)[i32 %93];
    i32 %95 = load i32* %94;
    store i32* %tmp1 with i32 %95;
    i32 %96 = load i32* %86;
    store i32* %94 with i32 %96;
    i32 %97 = load i32* %tmp1;
    i32 %98 = load i32* %j2;
    i32* %99 = getelementptr &(i32* %75)[i32 %98];
    store i32* %99 with i32 %97;
    i32 %100 = load i32* %n;
    i32 %101 = load i32* %j2;
    i32 %102 = load i32* %i9;
    ubr ^b2;
^b2:
    i32 %103 = phi [^if.then, i32 %100] [^while.body5, i32 %72];
    i32 %104 = phi [^if.then, i32 %101] [^while.body5, i32 %73];
    i32 %105 = phi [^if.then, i32 %102] [^while.body5, i32 %74];
    i32 %106 = add i32 %104, i32 1;
    store i32* %j2 with i32 %106;
    ubr ^while.header4;
^if.then1:
    i32 %107 = sdiv i32 %80, i32 2;
    i32* %108 = getelementptr &(i32* %32)[i32 %107];
    i32 %109 = load i32* %108;
    i32* %110 = getelementptr &(i32* %108)[i64 -1];
    i32 %111 = load i32* %110;
    i32 %112 = add i32 %109, i32 %111;
    i32 %113 = sdiv i32 %112, i32 2;
    ubr ^b3;
^if.else:
    i32 %114 = sdiv i32 %80, i32 2;
    i32* %115 = getelementptr &(i32* %32)[i32 %114];
    i32 %116 = load i32* %115;
    ubr ^b3;
^b3:
    i32 %117 = phi [^if.then1, i32 %113] [^if.else, i32 %116];
    call (i32) -> void @putint(i32 %117);
    ubr ^while.header6;
^while.header6:
    i32 %118 = phi [^while.body6, i32 %118] [^b3, i32 %80];
    i32 %119 = phi [^while.body6, i32 %123] [^b3, i32 0];
    i32* %120 = phi [^while.body6, i32* %120] [^b3, i32* %32];
    i1 %121 = scmp lt i32 %119, i32 1000;
    cbr i1 %121(prob = 0.97), ^while.body6, ^while.header7;
^while.body6:
    i32* %122 = getelementptr &([1000 * i32]* %count)[i64 0][i32 %119];
    store i32* %122 with i32 0;
    i32 %123 = add i32 %119, i32 1;
    ubr ^while.header6;
^while.header7:
    i32 %124 = phi [^while.header6, i32 %118] [^b5, i32 %124];
    i32 %125 = phi [^while.header6, i32 0] [^b5, i32 %136];
    i32 %126 = phi [^while.header6, i32 0] [^b5, i32 %137];
    i32 %127 = phi [^while.header6, i32 0] [^b5, i32 %138];
    i32* %128 = phi [^while.header6, i32* %120] [^b5, i32* %128];
    i1 %129 = scmp lt i32 %127, i32 %124;
    cbr i1 %129(prob = 0.97), ^while.body7, ^b4;
^b4:
    call (i32) -> void @putint(i32 %125);
    store i32* %i8 with i32 0;
    ubr ^while.header8;
^while.body7:
    i32* %130 = getelementptr &(i32* %128)[i32 %127];
    i32 %131 = load i32* %130;
    i32* %132 = getelementptr &([1000 * i32]* %count)[i64 0][i32 %131];
    i32 %133 = load i32* %132;
    i32 %134 = add i32 %133, i32 1;
    store i32* %132 with i32 %134;
    i1 %135 = scmp gt i32 %134, i32 %126;
    cbr i1 %135(prob = 0.5), ^if.then2, ^b5;
^if.then2:
    ubr ^b5;
^b5:
    i32 %136 = phi [^if.then2, i32 %131] [^while.body7, i32 %125];
    i32 %137 = phi [^if.then2, i32 %134] [^while.body7, i32 %126];
    i32 %138 = add i32 %127, i32 1;
    ubr ^while.header7;
^while.header8:
    i32 %139 = phi [^while.body8, i32 %147] [^b4, i32 %124];
    i32 %140 = phi [^while.body8, i32 %149] [^b4, i32 0];
    i32* %141 = phi [^while.body8, i32* %141] [^b4, i32* %32];
    i32* %142 = phi [^while.body8, i32* %142] [^b4, i32* %0];
    i1 %143 = scmp lt i32 %140, i32 %139;
    cbr i1 %143(prob = 0.97), ^while.body8, ^b6;
^while.body8:
    i32* %144 = getelementptr &(i32* %141)[i32 %140];
    i32* %145 = getelementptr &(i32* %142)[i32 %140];
    i32 %146 = load i32* %145;
    store i32* %144 with i32 %146;
    i32 %147 = load i32* %n;
    i32 %148 = load i32* %i8;
    i32 %149 = add i32 %148, i32 1;
    store i32* %i8 with i32 %149;
    ubr ^while.header8;
^b6:
    store i32* %i7 with i32 0;
    ubr ^while.header9;
^while.header9:
    i32 %150 = phi [^b8, i32 %155] [^b6, i32 %139];
    i32 %151 = phi [^b8, i32 %165] [^b6, i32 0];
    i32* %152 = phi [^b8, i32* %158] [^b6, i32* %32];
    i32 %153 = add i32 %150, i32 -1;
    i1 %154 = scmp lt i32 %151, i32 %153;
    cbr i1 %154(prob = 0.97), ^while.body9, ^b7;
^while.body9:
    store i32* %j1 with i32 0;
    ubr ^while.header10;
^b7:
    store i32* %i12 with i32 0;
    ubr ^while.header11;
^while.header10:
    i32 %155 = phi [^b9, i32 %184] [^while.body9, i32 %150];
    i32 %156 = phi [^b9, i32 %187] [^while.body9, i32 0];
    i32 %157 = phi [^b9, i32 %186] [^while.body9, i32 %151];
    i32* %158 = phi [^b9, i32* %158] [^while.body9, i32* %152];
    i32 %159 = sub i32 %155, i32 %157;
    i32 %160 = add i32 %159, i32 -1;
    i1 %161 = scmp lt i32 %156, i32 %160;
    cbr i1 %161(prob = 0.97), ^while.body11, ^b8;
^while.header11:
    i32 %162 = phi [^while.body10, i32 %168] [^b7, i32 0];
    i32 %163 = phi [^while.body10, i32 %163] [^b7, i32 %150];
    i1 %164 = scmp lt i32 %162, i32 32;
    cbr i1 %164(prob = 0.97), ^while.body10, ^entry5;
^b8:
    i32 %165 = add i32 %157, i32 1;
    store i32* %i7 with i32 %165;
    ubr ^while.header9;
^while.body10:
    i32* %166 = getelementptr &([32 * i32]* %result)[i64 0][i32 %162];
    i32 %167 = load i32* %166;
    call (i32) -> void @putint(i32 %167);
    i32 %168 = add i32 %162, i32 1;
    store i32* %i12 with i32 %168;
    ubr ^while.header11;
^while.body11:
    i32* %169 = getelementptr &(i32* %158)[i32 %156];
    i32 %170 = load i32* %169;
    i32* %171 = getelementptr &(i32* %169)[i64 1];
    i32 %172 = load i32* %171;
    i1 %173 = scmp gt i32 %170, i32 %172;
    cbr i1 %173(prob = 0.5), ^if.then3, ^b9;
^entry5:
    store i32* %i6 with i32 0;
    ubr ^while.header12;
^if.then3:
    store i32* %tmp with i32 0;
    i32 %174 = add i32 %156, i32 1;
    i32* %175 = getelementptr &(i32* %158)[i32 %174];
    i32 %176 = load i32* %175;
    store i32* %tmp with i32 %176;
    i32 %177 = load i32* %169;
    store i32* %175 with i32 %177;
    i32 %178 = load i32* %tmp;
    i32 %179 = load i32* %j1;
    i32* %180 = getelementptr &(i32* %158)[i32 %179];
    store i32* %180 with i32 %178;
    i32 %181 = load i32* %n;
    i32 %182 = load i32* %j1;
    i32 %183 = load i32* %i7;
    ubr ^b9;
^b9:
    i32 %184 = phi [^if.then3, i32 %181] [^while.body11, i32 %155];
    i32 %185 = phi [^if.then3, i32 %182] [^while.body11, i32 %156];
    i32 %186 = phi [^if.then3, i32 %183] [^while.body11, i32 %157];
    i32 %187 = add i32 %185, i32 1;
    store i32* %j1 with i32 %187;
    ubr ^while.header10;
^while.header12:
    i32 %188 = phi [^while.body12, i32 %196] [^entry5, i32 %163];
    i32 %189 = phi [^while.body12, i32 %198] [^entry5, i32 0];
    i32* %190 = phi [^while.body12, i32* %190] [^entry5, i32* %32];
    i32* %191 = phi [^while.body12, i32* %191] [^entry5, i32* %0];
    i1 %192 = scmp lt i32 %189, i32 %188;
    cbr i1 %192(prob = 0.97), ^while.body12, ^b10;
^while.body12:
    i32* %193 = getelementptr &(i32* %190)[i32 %189];
    i32* %194 = getelementptr &(i32* %191)[i32 %189];
    i32 %195 = load i32* %194;
    store i32* %193 with i32 %195;
    i32 %196 = load i32* %n;
    i32 %197 = load i32* %i6;
    i32 %198 = add i32 %197, i32 1;
    store i32* %i6 with i32 %198;
    ubr ^while.header12;
^b10:
    store i32* %i5 with i32 1;
    ubr ^while.header13;
^while.header13:
    i32 %199 = phi [^b14, i32 %229] [^b10, i32 %188];
    i32 %200 = phi [^b14, i32 %231] [^b10, i32 1];
    i32* %201 = phi [^b14, i32* %208] [^b10, i32* %32];
    i1 %202 = scmp lt i32 %200, i32 %199;
    cbr i1 %202(prob = 0.97), ^while.body13, ^b11;
^while.body13:
    store i32* %temp with i32 0;
    i32* %203 = getelementptr &(i32* %201)[i32 %200];
    i32 %204 = load i32* %203;
    store i32* %temp with i32 %204;
    i32 %205 = add i32 %200, i32 -1;
    store i32* %j with i32 %205;
    ubr ^while.header14;
^b11:
    store i32* %i12 with i32 0;
    ubr ^while.header15;
^while.header14:
    i32 %206 = phi [^while.body15, i32 %226] [^while.body13, i32 %205];
    i32 %207 = phi [^while.body15, i32 %225] [^while.body13, i32 %204];
    i32* %208 = phi [^while.body15, i32* %208] [^while.body13, i32* %201];
    i1 %209 = scmp gt i32 %206, i32 -1;
    cbr i1 %209(prob = 0.5), ^b12, ^b13;
^while.header15:
    i32 %210 = phi [^while.body14, i32 %218] [^b11, i32 0];
    i32 %211 = phi [^while.body14, i32 %211] [^b11, i32 %199];
    i1 %212 = scmp lt i32 %210, i32 32;
    cbr i1 %212(prob = 0.97), ^while.body14, ^entry6;
^b12:
    i32* %213 = getelementptr &(i32* %208)[i32 %206];
    i32 %214 = load i32* %213;
    i1 %215 = scmp lt i32 %207, i32 %214;
    ubr ^b13;
^while.body14:
    i32* %216 = getelementptr &([32 * i32]* %result)[i64 0][i32 %210];
    i32 %217 = load i32* %216;
    call (i32) -> void @putint(i32 %217);
    i32 %218 = add i32 %210, i32 1;
    store i32* %i12 with i32 %218;
    ubr ^while.header15;
^entry6:
    store i32* %i4 with i32 0;
    ubr ^while.header16;
^b13:
    i1 %219 = phi [^while.header14, i1 false] [^b12, i1 %215];
    cbr i1 %219(prob = 0.97), ^while.body15, ^b14;
^while.body15:
    i32 %220 = add i32 %206, i32 1;
    i32* %221 = getelementptr &(i32* %208)[i32 %220];
    i32* %222 = getelementptr &(i32* %208)[i32 %206];
    i32 %223 = load i32* %222;
    store i32* %221 with i32 %223;
    i32 %224 = load i32* %j;
    i32 %225 = load i32* %temp;
    i32 %226 = add i32 %224, i32 -1;
    store i32* %j with i32 %226;
    ubr ^while.header14;
^b14:
    i32 %227 = add i32 %206, i32 1;
    i32* %228 = getelementptr &(i32* %208)[i32 %227];
    store i32* %228 with i32 %207;
    i32 %229 = load i32* %n;
    i32 %230 = load i32* %i5;
    i32 %231 = add i32 %230, i32 1;
    store i32* %i5 with i32 %231;
    ubr ^while.header13;
^while.header16:
    i32 %232 = phi [^while.body16, i32 %240] [^entry6, i32 %211];
    i32 %233 = phi [^while.body16, i32 %242] [^entry6, i32 0];
    i32* %234 = phi [^while.body16, i32* %234] [^entry6, i32* %32];
    i32* %235 = phi [^while.body16, i32* %235] [^entry6, i32* %0];
    i1 %236 = scmp lt i32 %233, i32 %232;
    cbr i1 %236(prob = 0.97), ^while.body16, ^b15;
^while.body16:
    i32* %237 = getelementptr &(i32* %234)[i32 %233];
    i32* %238 = getelementptr &(i32* %235)[i32 %233];
    i32 %239 = load i32* %238;
    store i32* %237 with i32 %239;
    i32 %240 = load i32* %n;
    i32 %241 = load i32* %i4;
    i32 %242 = add i32 %241, i32 1;
    store i32* %i4 with i32 %242;
    ubr ^while.header16;
^b15:
    store i32* %i12 with i32 0;
    i32 %243 = call (i32*, i32, i32, i32*) -> i32 @QuickSort(i32* %32, i32 0, i32 31, i32* %n);
    i32 %244 = load i32* %i12;
    i32 %245 = load i32* %n;
    ubr ^while.header17;
^while.header17:
    i32 %246 = phi [^while.body17, i32 %251] [^b15, i32 %244];
    i32 %247 = phi [^while.body17, i32 %247] [^b15, i32 %245];
    i1 %248 = scmp lt i32 %246, i32 32;
    cbr i1 %248(prob = 0.97), ^while.body17, ^entry7;
^while.body17:
    i32* %249 = getelementptr &([32 * i32]* %result)[i64 0][i32 %246];
    i32 %250 = load i32* %249;
    call (i32) -> void @putint(i32 %250);
    i32 %251 = add i32 %246, i32 1;
    store i32* %i12 with i32 %251;
    ubr ^while.header17;
^entry7:
    store i32* %i3 with i32 0;
    ubr ^while.header18;
^while.header18:
    i32 %252 = phi [^while.body18, i32 %260] [^entry7, i32 %247];
    i32 %253 = phi [^while.body18, i32 %262] [^entry7, i32 0];
    i32* %254 = phi [^while.body18, i32* %254] [^entry7, i32* %32];
    i32* %255 = phi [^while.body18, i32* %255] [^entry7, i32* %0];
    i1 %256 = scmp lt i32 %253, i32 %252;
    cbr i1 %256(prob = 0.97), ^while.body18, ^b16;
^while.body18:
    i32* %257 = getelementptr &(i32* %254)[i32 %253];
    i32* %258 = getelementptr &(i32* %255)[i32 %253];
    i32 %259 = load i32* %258;
    store i32* %257 with i32 %259;
    i32 %260 = load i32* %n;
    i32 %261 = load i32* %i3;
    i32 %262 = add i32 %261, i32 1;
    store i32* %i3 with i32 %262;
    ubr ^while.header18;
^b16:
    store i32* %stride1 with i32 4;
    store i32* %sum1 with i32 0;
    store i32* %i2 with i32 0;
    ubr ^while.header19;
^while.header19:
    i32 %263 = phi [^b18, i32 %285] [^b16, i32 %252];
    i32 %264 = phi [^b18, i32 %289] [^b16, i32 0];
    i32 %265 = phi [^b18, i32 %287] [^b16, i32 0];
    i32 %266 = phi [^b18, i32 %288] [^b16, i32 4];
    i32* %267 = phi [^b18, i32* %267] [^b16, i32* %32];
    i1 %268 = scmp lt i32 %264, i32 %263;
    cbr i1 %268(prob = 0.97), ^while.body19, ^b17;
^b17:
    store i32* %i12 with i32 0;
    ubr ^while.header20;
^while.body19:
    i32* %269 = getelementptr &(i32* %267)[i32 %264];
    i32 %270 = load i32* %269;
    i32 %271 = add i32 %270, i32 %265;
    store i32* %sum1 with i32 %271;
    i32 %272 = srem i32 %264, i32 %266;
    i32 %273 = add i32 %266, i32 -1;
    i1 %274 = scmp neq i32 %272, i32 %273;
    cbr i1 %274(prob = 0.5), ^if.then4, ^if.else1;
^if.then4:
    store i32* %269 with i32 0;
    i32 %275 = load i32* %n;
    i32 %276 = load i32* %i2;
    i32 %277 = load i32* %sum1;
    i32 %278 = load i32* %stride1;
    ubr ^b18;
^if.else1:
    store i32* %269 with i32 %271;
    i32 %279 = load i32* %n;
    i32 %280 = load i32* %i2;
    i32 %281 = load i32* %stride1;
    store i32* %sum1 with i32 0;
    ubr ^b18;
^while.header20:
    i32 %282 = phi [^while.body20, i32 %292] [^b17, i32 0];
    i32 %283 = phi [^while.body20, i32 %283] [^b17, i32 %263];
    i1 %284 = scmp lt i32 %282, i32 32;
    cbr i1 %284(prob = 0.97), ^while.body20, ^entry8;
^b18:
    i32 %285 = phi [^if.else1, i32 %279] [^if.then4, i32 %275];
    i32 %286 = phi [^if.else1, i32 %280] [^if.then4, i32 %276];
    i32 %287 = phi [^if.else1, i32 0] [^if.then4, i32 %277];
    i32 %288 = phi [^if.else1, i32 %281] [^if.then4, i32 %278];
    i32 %289 = add i32 %286, i32 1;
    store i32* %i2 with i32 %289;
    ubr ^while.header19;
^while.body20:
    i32* %290 = getelementptr &([32 * i32]* %result)[i64 0][i32 %282];
    i32 %291 = load i32* %290;
    call (i32) -> void @putint(i32 %291);
    i32 %292 = add i32 %282, i32 1;
    store i32* %i12 with i32 %292;
    ubr ^while.header20;
^entry8:
    store i32* %i1 with i32 0;
    ubr ^while.header21;
^while.header21:
    i32 %293 = phi [^while.body21, i32 %301] [^entry8, i32 %283];
    i32 %294 = phi [^while.body21, i32 %303] [^entry8, i32 0];
    i32* %295 = phi [^while.body21, i32* %295] [^entry8, i32* %32];
    i32* %296 = phi [^while.body21, i32* %296] [^entry8, i32* %0];
    i1 %297 = scmp lt i32 %294, i32 %293;
    cbr i1 %297(prob = 0.97), ^while.body21, ^b19;
^while.body21:
    i32* %298 = getelementptr &(i32* %295)[i32 %294];
    i32* %299 = getelementptr &(i32* %296)[i32 %294];
    i32 %300 = load i32* %299;
    store i32* %298 with i32 %300;
    i32 %301 = load i32* %n;
    i32 %302 = load i32* %i1;
    i32 %303 = add i32 %302, i32 1;
    store i32* %i1 with i32 %303;
    ubr ^while.header21;
^b19:
    store i32* %stride with i32 3;
    store i32* %i with i32 0;
    store i32* %sum with i32 0;
    store i32* %lastnum with i32 0;
    ubr ^while.header22;
^while.header22:
    i32 %304 = phi [^b21, i32 %323] [^b19, i32 %293];
    i32 %305 = phi [^b21, i32 %324] [^b19, i32 0];
    i32 %306 = phi [^b21, i32 %328] [^b19, i32 0];
    i32 %307 = phi [^b21, i32 %326] [^b19, i32 0];
    i32 %308 = phi [^b21, i32 %327] [^b19, i32 3];
    i32* %309 = phi [^b21, i32* %309] [^b19, i32* %32];
    i1 %310 = scmp lt i32 %306, i32 %304;
    cbr i1 %310(prob = 0.97), ^while.body22, ^b20;
^b20:
    i32 %311 = sub i32 %304, i32 %308;
    i32 %312 = add i32 %311, i32 1;
    store i32* %i with i32 %312;
    ubr ^while.header23;
^while.body22:
    i32 %313 = add i32 %308, i32 -1;
    i1 %314 = scmp lt i32 %306, i32 %313;
    cbr i1 %314(prob = 0.5), ^if.then5, ^if.else2;
^if.then5:
    i32* %315 = getelementptr &(i32* %309)[i32 %306];
    i32 %316 = load i32* %315;
    i32 %317 = add i32 %316, i32 %307;
    store i32* %sum with i32 %317;
    ubr ^b21;
^if.else2:
    i1 %318 = scmp eq i32 %306, i32 %313;
    cbr i1 %318(prob = 0.5), ^if.then6, ^if.else3;
^while.header23:
    i32 %319 = phi [^while.body23, i32 %337] [^b20, i32 %304];
    i32 %320 = phi [^while.body23, i32 %339] [^b20, i32 %312];
    i32* %321 = phi [^while.body23, i32* %321] [^b20, i32* %309];
    i1 %322 = scmp lt i32 %320, i32 %319;
    cbr i1 %322(prob = 0.97), ^while.body23, ^while.header24;
^b21:
    i32 %323 = phi [^if.else3, i32 %349] [^if.then6, i32 %331] [^if.then5, i32 %304];
    i32 %324 = phi [^if.else3, i32 %350] [^if.then6, i32 %332] [^if.then5, i32 %305];
    i32 %325 = phi [^if.else3, i32 %351] [^if.then6, i32 %333] [^if.then5, i32 %306];
    i32 %326 = phi [^if.else3, i32 %352] [^if.then6, i32 %334] [^if.then5, i32 %317];
    i32 %327 = phi [^if.else3, i32 %353] [^if.then6, i32 %335] [^if.then5, i32 %308];
    i32 %328 = add i32 %325, i32 1;
    store i32* %i with i32 %328;
    ubr ^while.header22;
^if.then6:
    i32 %329 = load i32* %309;
    store i32* %lastnum with i32 %329;
    i32 %330 = sdiv i32 %307, i32 %308;
    store i32* %309 with i32 %330;
    i32 %331 = load i32* %n;
    i32 %332 = load i32* %lastnum;
    i32 %333 = load i32* %i;
    i32 %334 = load i32* %sum;
    i32 %335 = load i32* %stride;
    ubr ^b21;
^while.body23:
    i32* %336 = getelementptr &(i32* %321)[i32 %320];
    store i32* %336 with i32 0;
    i32 %337 = load i32* %n;
    i32 %338 = load i32* %i;
    i32 %339 = add i32 %338, i32 1;
    store i32* %i with i32 %339;
    ubr ^while.header23;
^if.else3:
    i32* %340 = getelementptr &(i32* %309)[i32 %306];
    i32 %341 = load i32* %340;
    i32 %342 = add i32 %341, i32 %307;
    i32 %343 = sub i32 %342, i32 %305;
    store i32* %sum with i32 %343;
    i32 %344 = sub i32 %306, i32 %308;
    i32 %345 = add i32 %344, i32 1;
    i32* %346 = getelementptr &(i32* %309)[i32 %345];
    i32 %347 = load i32* %346;
    store i32* %lastnum with i32 %347;
    i32 %348 = sdiv i32 %343, i32 %308;
    store i32* %346 with i32 %348;
    i32 %349 = load i32* %n;
    i32 %350 = load i32* %lastnum;
    i32 %351 = load i32* %i;
    i32 %352 = load i32* %sum;
    i32 %353 = load i32* %stride;
    ubr ^b21;
^while.header24:
    i32 %354 = phi [^while.header23, i32 0] [^while.body24, i32 %358];
    i1 %355 = scmp lt i32 %354, i32 32;
    cbr i1 %355(prob = 0.97), ^while.body24, ^b22;
^while.body24:
    i32* %356 = getelementptr &([32 * i32]* %result)[i64 0][i32 %354];
    i32 %357 = load i32* %356;
    call (i32) -> void @putint(i32 %357);
    i32 %358 = add i32 %354, i32 1;
    ubr ^while.header24;
^b22:
    ret i32 0;
}
