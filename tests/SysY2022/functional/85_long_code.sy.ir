internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @QuickSort(i32* %arr, i32 %low, i32 %high) -> void {
  ^0:
    ubr ^entry;
  ^entry:
    i32 %1 = phi [^0, i32 %low] [^b1, i32 %11];
    i1 %2 = icmp sgt i32 %high, i32 %1;
    cbr i1 %2(prob = 0.5), ^if.then, ^b;
  ^if.then:
    i32* %3 = getelementptr &(i32* %arr)[i32 %1];
    i32 %4 = load i32* %3;
    i32 %5 = add i32 %4, i32 -1;
    ubr ^while.header;
  ^b:
    ret;
  ^while.header:
    i32 %6 = phi [^if.then, i32 %high] [^b5, i32 %12] [^if.then2, i32 %31];
    i32 %7 = phi [^if.then, i32 %1] [^b5, i32 %22] [^if.then2, i32 %22];
    i1 %8 = icmp sgt i32 %6, i32 %7;
    cbr i1 %8(prob = 0.97), ^while.header1, ^b1;
  ^b1:
    i32* %9 = getelementptr &(i32* %arr)[i32 %7];
    store i32* %9 with i32 %4;
    i32 %10 = add i32 %7, i32 -1;
    call (i32*, i32, i32) -> void @QuickSort(i32* %arr, i32 %1, i32 %10);
    i32 %11 = add i32 %7, i32 1;
    ubr ^entry;
  ^while.header1:
    i32 %12 = phi [^while.header, i32 %6] [^while.body, i32 %17];
    i1 %13 = icmp slt i32 %7, i32 %12;
    cbr i1 %13(prob = 0.5), ^b2, ^b3;
  ^b2:
    i32* %14 = getelementptr &(i32* %arr)[i32 %12];
    i32 %15 = load i32* %14;
    i1 %16 = icmp slt i32 %5, i32 %15;
    cbr i1 %16(prob = 0.97), ^while.body, ^b3;
  ^b3:
    cbr i1 %13(prob = 0.5), ^if.then1, ^while.header2;
  ^while.body:
    i32 %17 = add i32 %12, i32 -1;
    ubr ^while.header1;
  ^if.then1:
    i32* %18 = getelementptr &(i32* %arr)[i32 %12];
    i32 %19 = load i32* %18;
    i32* %20 = getelementptr &(i32* %arr)[i32 %7];
    store i32* %20 with i32 %19;
    i32 %21 = add i32 %7, i32 1;
    ubr ^while.header2;
  ^while.header2:
    i32 %22 = phi [^b3, i32 %7] [^if.then1, i32 %21] [^while.body1, i32 %27];
    i1 %23 = icmp sgt i32 %12, i32 %22;
    cbr i1 %23(prob = 0.5), ^b4, ^b5;
  ^b4:
    i32* %24 = getelementptr &(i32* %arr)[i32 %22];
    i32 %25 = load i32* %24;
    i1 %26 = icmp sgt i32 %4, i32 %25;
    cbr i1 %26(prob = 0.97), ^while.body1, ^b5;
  ^b5:
    cbr i1 %23(prob = 0.5), ^if.then2, ^while.header;
  ^while.body1:
    i32 %27 = add i32 %22, i32 1;
    ubr ^while.header2;
  ^if.then2:
    i32* %28 = getelementptr &(i32* %arr)[i32 %22];
    i32 %29 = load i32* %28;
    i32* %30 = getelementptr &(i32* %arr)[i32 %12];
    store i32* %30 with i32 %29;
    i32 %31 = add i32 %12, i32 -1;
    ubr ^while.header;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [32 * i32]* %result = alloc [32 * i32];
    [32 * i32]* %arr = alloc [32 * i32];
    i32* %0 = getelementptr &([32 * i32]* %arr)[i64 0][i64 0];
    store i32* %0 with i32 7;
    i32* %1 = getelementptr &([32 * i32]* %arr)[i64 0][i64 1];
    store i32* %1 with i32 23;
    i32* %2 = getelementptr &([32 * i32]* %arr)[i64 0][i64 2];
    store i32* %2 with i32 89;
    i32* %3 = getelementptr &([32 * i32]* %arr)[i64 0][i64 3];
    store i32* %3 with i32 26;
    i32* %4 = getelementptr &([32 * i32]* %arr)[i64 0][i64 4];
    store i32* %4 with i32 282;
    i32* %5 = getelementptr &([32 * i32]* %arr)[i64 0][i64 5];
    store i32* %5 with i32 254;
    i32* %6 = getelementptr &([32 * i32]* %arr)[i64 0][i64 6];
    store i32* %6 with i32 27;
    i32* %7 = getelementptr &([32 * i32]* %arr)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([32 * i32]* %arr)[i64 0][i64 8];
    store i32* %8 with i32 83;
    i32* %9 = getelementptr &([32 * i32]* %arr)[i64 0][i64 9];
    store i32* %9 with i32 273;
    i32* %10 = getelementptr &([32 * i32]* %arr)[i64 0][i64 10];
    store i32* %10 with i32 574;
    i32* %11 = getelementptr &([32 * i32]* %arr)[i64 0][i64 11];
    store i32* %11 with i32 905;
    i32* %12 = getelementptr &([32 * i32]* %arr)[i64 0][i64 12];
    store i32* %12 with i32 354;
    i32* %13 = getelementptr &([32 * i32]* %arr)[i64 0][i64 13];
    store i32* %13 with i32 657;
    i32* %14 = getelementptr &([32 * i32]* %arr)[i64 0][i64 14];
    store i32* %14 with i32 935;
    i32* %15 = getelementptr &([32 * i32]* %arr)[i64 0][i64 15];
    store i32* %15 with i32 264;
    i32* %16 = getelementptr &([32 * i32]* %arr)[i64 0][i64 16];
    store i32* %16 with i32 639;
    i32* %17 = getelementptr &([32 * i32]* %arr)[i64 0][i64 17];
    store i32* %17 with i32 459;
    i32* %18 = getelementptr &([32 * i32]* %arr)[i64 0][i64 18];
    store i32* %18 with i32 29;
    i32* %19 = getelementptr &([32 * i32]* %arr)[i64 0][i64 19];
    store i32* %19 with i32 68;
    i32* %20 = getelementptr &([32 * i32]* %arr)[i64 0][i64 20];
    store i32* %20 with i32 929;
    i32* %21 = getelementptr &([32 * i32]* %arr)[i64 0][i64 21];
    store i32* %21 with i32 756;
    i32* %22 = getelementptr &([32 * i32]* %arr)[i64 0][i64 22];
    store i32* %22 with i32 452;
    i32* %23 = getelementptr &([32 * i32]* %arr)[i64 0][i64 23];
    store i32* %23 with i32 279;
    i32* %24 = getelementptr &([32 * i32]* %arr)[i64 0][i64 24];
    store i32* %24 with i32 58;
    i32* %25 = getelementptr &([32 * i32]* %arr)[i64 0][i64 25];
    store i32* %25 with i32 87;
    i32* %26 = getelementptr &([32 * i32]* %arr)[i64 0][i64 26];
    store i32* %26 with i32 96;
    i32* %27 = getelementptr &([32 * i32]* %arr)[i64 0][i64 27];
    store i32* %27 with i32 36;
    i32* %28 = getelementptr &([32 * i32]* %arr)[i64 0][i64 28];
    store i32* %28 with i32 39;
    i32* %29 = getelementptr &([32 * i32]* %arr)[i64 0][i64 29];
    store i32* %29 with i32 28;
    i32* %30 = getelementptr &([32 * i32]* %arr)[i64 0][i64 30];
    store i32* %30 with i32 1;
    i32* %31 = getelementptr &([32 * i32]* %arr)[i64 0][i64 31];
    store i32* %31 with i32 290;
    i32* %32 = getelementptr &([32 * i32]* %result)[i64 0][i64 0];
    store i32* %32 with i32 7;
    i32* %33 = getelementptr &([32 * i32]* %result)[i64 0][i64 1];
    store i32* %33 with i32 23;
    i32* %34 = getelementptr &([32 * i32]* %result)[i64 0][i64 2];
    store i32* %34 with i32 89;
    i32* %35 = getelementptr &([32 * i32]* %result)[i64 0][i64 3];
    store i32* %35 with i32 26;
    i32* %36 = getelementptr &([32 * i32]* %result)[i64 0][i64 4];
    store i32* %36 with i32 282;
    i32* %37 = getelementptr &([32 * i32]* %result)[i64 0][i64 5];
    store i32* %37 with i32 254;
    i32* %38 = getelementptr &([32 * i32]* %result)[i64 0][i64 6];
    store i32* %38 with i32 27;
    i32* %39 = getelementptr &([32 * i32]* %result)[i64 0][i64 7];
    store i32* %39 with i32 5;
    i32* %40 = getelementptr &([32 * i32]* %result)[i64 0][i64 8];
    store i32* %40 with i32 83;
    i32* %41 = getelementptr &([32 * i32]* %result)[i64 0][i64 9];
    store i32* %41 with i32 273;
    i32* %42 = getelementptr &([32 * i32]* %result)[i64 0][i64 10];
    store i32* %42 with i32 574;
    i32* %43 = getelementptr &([32 * i32]* %result)[i64 0][i64 11];
    store i32* %43 with i32 905;
    i32* %44 = getelementptr &([32 * i32]* %result)[i64 0][i64 12];
    store i32* %44 with i32 354;
    i32* %45 = getelementptr &([32 * i32]* %result)[i64 0][i64 13];
    store i32* %45 with i32 657;
    i32* %46 = getelementptr &([32 * i32]* %result)[i64 0][i64 14];
    store i32* %46 with i32 935;
    i32* %47 = getelementptr &([32 * i32]* %result)[i64 0][i64 15];
    store i32* %47 with i32 264;
    i32* %48 = getelementptr &([32 * i32]* %result)[i64 0][i64 16];
    store i32* %48 with i32 639;
    i32* %49 = getelementptr &([32 * i32]* %result)[i64 0][i64 17];
    store i32* %49 with i32 459;
    i32* %50 = getelementptr &([32 * i32]* %result)[i64 0][i64 18];
    store i32* %50 with i32 29;
    i32* %51 = getelementptr &([32 * i32]* %result)[i64 0][i64 19];
    store i32* %51 with i32 68;
    i32* %52 = getelementptr &([32 * i32]* %result)[i64 0][i64 20];
    store i32* %52 with i32 929;
    i32* %53 = getelementptr &([32 * i32]* %result)[i64 0][i64 21];
    store i32* %53 with i32 756;
    i32* %54 = getelementptr &([32 * i32]* %result)[i64 0][i64 22];
    store i32* %54 with i32 452;
    i32* %55 = getelementptr &([32 * i32]* %result)[i64 0][i64 23];
    store i32* %55 with i32 279;
    i32* %56 = getelementptr &([32 * i32]* %result)[i64 0][i64 24];
    store i32* %56 with i32 58;
    i32* %57 = getelementptr &([32 * i32]* %result)[i64 0][i64 25];
    store i32* %57 with i32 87;
    i32* %58 = getelementptr &([32 * i32]* %result)[i64 0][i64 26];
    store i32* %58 with i32 96;
    i32* %59 = getelementptr &([32 * i32]* %result)[i64 0][i64 27];
    store i32* %59 with i32 36;
    i32* %60 = getelementptr &([32 * i32]* %result)[i64 0][i64 28];
    store i32* %60 with i32 39;
    i32* %61 = getelementptr &([32 * i32]* %result)[i64 0][i64 29];
    store i32* %61 with i32 28;
    i32* %62 = getelementptr &([32 * i32]* %result)[i64 0][i64 30];
    store i32* %62 with i32 1;
    i32* %63 = getelementptr &([32 * i32]* %result)[i64 0][i64 31];
    store i32* %63 with i32 290;
    [1000 * i32]* %64 = ptrcast [1000 * i32]* @count to [1000 * i32]*;
    ubr ^while.body;
  ^while.body:
    i32 %65 = phi [^entry, i32 0] [^while.body, i32 %68];
    i32* %66 = getelementptr &([32 * i32]* %result)[i64 0][i32 %65];
    i32 %67 = load i32* %66;
    call (i32) -> void @putint(i32 %67);
    i32 %68 = add i32 %65, i32 1;
    i1 %69 = icmp slt i32 %68, i32 32;
    cbr i1 %69(prob = 0.97), ^while.body, ^while.header;
  ^while.header:
    i32 %70 = phi [^while.body, i32 0] [^b, i32 %81];
    i32 %71 = sub i32 32, i32 %70;
    i32 %72 = add i32 %71, i32 -1;
    i1 %73 = icmp slt i32 %70, i32 31;
    cbr i1 %73(prob = 0.97), ^while.header1, ^while.body1;
  ^while.header1:
    i32 %74 = phi [^while.header, i32 0] [^while.body2, i32 %87] [^if.then1, i32 %87];
    i1 %75 = icmp sgt i32 %72, i32 %74;
    cbr i1 %75(prob = 0.97), ^while.body2, ^b;
  ^while.body1:
    i32 %76 = phi [^while.header, i32 0] [^while.body1, i32 %79];
    i32* %77 = getelementptr &([32 * i32]* %result)[i64 0][i32 %76];
    i32 %78 = load i32* %77;
    call (i32) -> void @putint(i32 %78);
    i32 %79 = add i32 %76, i32 1;
    i1 %80 = icmp slt i32 %79, i32 32;
    cbr i1 %80(prob = 0.97), ^while.body1, ^if.then;
  ^b:
    i32 %81 = add i32 %70, i32 1;
    ubr ^while.header;
  ^while.body2:
    i32* %82 = getelementptr &(i32* %32)[i32 %74];
    i32 %83 = load i32* %82;
    i32* %84 = getelementptr &(i32* %82)[i64 1];
    i32 %85 = load i32* %84;
    i1 %86 = icmp sgt i32 %83, i32 %85;
    i32 %87 = add i32 %74, i32 1;
    cbr i1 %86(prob = 0.5), ^if.then1, ^while.header1;
  ^if.then:
    i32 %88 = load i32* %48;
    i32 %89 = load i32* %47;
    i32 %90 = add i32 %88, i32 %89;
    i32 %91 = sdiv i32 %90, i32 2;
    call (i32) -> void @putint(i32 %91);
    ubr ^while.body3;
  ^if.then1:
    store i32* %84 with i32 %83;
    store i32* %82 with i32 %85;
    ubr ^while.header1;
  ^while.body3:
    i32 %92 = phi [^if.then, i32 0] [^while.body3, i32 %157];
    i32* %93 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %92];
    store i32* %93 with i32 0;
    i32* %94 = getelementptr &(i32* %93)[i64 1];
    store i32* %94 with i32 0;
    i32* %95 = getelementptr &(i32* %93)[i64 2];
    store i32* %95 with i32 0;
    i32* %96 = getelementptr &(i32* %93)[i64 3];
    store i32* %96 with i32 0;
    i32* %97 = getelementptr &(i32* %93)[i64 4];
    store i32* %97 with i32 0;
    i32* %98 = getelementptr &(i32* %93)[i64 5];
    store i32* %98 with i32 0;
    i32* %99 = getelementptr &(i32* %93)[i64 6];
    store i32* %99 with i32 0;
    i32* %100 = getelementptr &(i32* %93)[i64 7];
    store i32* %100 with i32 0;
    i32* %101 = getelementptr &(i32* %93)[i64 8];
    store i32* %101 with i32 0;
    i32* %102 = getelementptr &(i32* %93)[i64 9];
    store i32* %102 with i32 0;
    i32* %103 = getelementptr &(i32* %93)[i64 10];
    store i32* %103 with i32 0;
    i32* %104 = getelementptr &(i32* %93)[i64 11];
    store i32* %104 with i32 0;
    i32* %105 = getelementptr &(i32* %93)[i64 12];
    store i32* %105 with i32 0;
    i32* %106 = getelementptr &(i32* %93)[i64 13];
    store i32* %106 with i32 0;
    i32* %107 = getelementptr &(i32* %93)[i64 14];
    store i32* %107 with i32 0;
    i32* %108 = getelementptr &(i32* %93)[i64 15];
    store i32* %108 with i32 0;
    i32* %109 = getelementptr &(i32* %93)[i64 16];
    store i32* %109 with i32 0;
    i32* %110 = getelementptr &(i32* %93)[i64 17];
    store i32* %110 with i32 0;
    i32* %111 = getelementptr &(i32* %93)[i64 18];
    store i32* %111 with i32 0;
    i32* %112 = getelementptr &(i32* %93)[i64 19];
    store i32* %112 with i32 0;
    i32* %113 = getelementptr &(i32* %93)[i64 20];
    store i32* %113 with i32 0;
    i32* %114 = getelementptr &(i32* %93)[i64 21];
    store i32* %114 with i32 0;
    i32* %115 = getelementptr &(i32* %93)[i64 22];
    store i32* %115 with i32 0;
    i32* %116 = getelementptr &(i32* %93)[i64 23];
    store i32* %116 with i32 0;
    i32* %117 = getelementptr &(i32* %93)[i64 24];
    store i32* %117 with i32 0;
    i32* %118 = getelementptr &(i32* %93)[i64 25];
    store i32* %118 with i32 0;
    i32* %119 = getelementptr &(i32* %93)[i64 26];
    store i32* %119 with i32 0;
    i32* %120 = getelementptr &(i32* %93)[i64 27];
    store i32* %120 with i32 0;
    i32* %121 = getelementptr &(i32* %93)[i64 28];
    store i32* %121 with i32 0;
    i32* %122 = getelementptr &(i32* %93)[i64 29];
    store i32* %122 with i32 0;
    i32* %123 = getelementptr &(i32* %93)[i64 30];
    store i32* %123 with i32 0;
    i32* %124 = getelementptr &(i32* %93)[i64 31];
    store i32* %124 with i32 0;
    i32* %125 = getelementptr &(i32* %93)[i64 32];
    store i32* %125 with i32 0;
    i32* %126 = getelementptr &(i32* %93)[i64 33];
    store i32* %126 with i32 0;
    i32* %127 = getelementptr &(i32* %93)[i64 34];
    store i32* %127 with i32 0;
    i32* %128 = getelementptr &(i32* %93)[i64 35];
    store i32* %128 with i32 0;
    i32* %129 = getelementptr &(i32* %93)[i64 36];
    store i32* %129 with i32 0;
    i32* %130 = getelementptr &(i32* %93)[i64 37];
    store i32* %130 with i32 0;
    i32* %131 = getelementptr &(i32* %93)[i64 38];
    store i32* %131 with i32 0;
    i32* %132 = getelementptr &(i32* %93)[i64 39];
    store i32* %132 with i32 0;
    i32* %133 = getelementptr &(i32* %93)[i64 40];
    store i32* %133 with i32 0;
    i32* %134 = getelementptr &(i32* %93)[i64 41];
    store i32* %134 with i32 0;
    i32* %135 = getelementptr &(i32* %93)[i64 42];
    store i32* %135 with i32 0;
    i32* %136 = getelementptr &(i32* %93)[i64 43];
    store i32* %136 with i32 0;
    i32* %137 = getelementptr &(i32* %93)[i64 44];
    store i32* %137 with i32 0;
    i32* %138 = getelementptr &(i32* %93)[i64 45];
    store i32* %138 with i32 0;
    i32* %139 = getelementptr &(i32* %93)[i64 46];
    store i32* %139 with i32 0;
    i32* %140 = getelementptr &(i32* %93)[i64 47];
    store i32* %140 with i32 0;
    i32* %141 = getelementptr &(i32* %93)[i64 48];
    store i32* %141 with i32 0;
    i32* %142 = getelementptr &(i32* %93)[i64 49];
    store i32* %142 with i32 0;
    i32* %143 = getelementptr &(i32* %93)[i64 50];
    store i32* %143 with i32 0;
    i32* %144 = getelementptr &(i32* %93)[i64 51];
    store i32* %144 with i32 0;
    i32* %145 = getelementptr &(i32* %93)[i64 52];
    store i32* %145 with i32 0;
    i32* %146 = getelementptr &(i32* %93)[i64 53];
    store i32* %146 with i32 0;
    i32* %147 = getelementptr &(i32* %93)[i64 54];
    store i32* %147 with i32 0;
    i32* %148 = getelementptr &(i32* %93)[i64 55];
    store i32* %148 with i32 0;
    i32* %149 = getelementptr &(i32* %93)[i64 56];
    store i32* %149 with i32 0;
    i32* %150 = getelementptr &(i32* %93)[i64 57];
    store i32* %150 with i32 0;
    i32* %151 = getelementptr &(i32* %93)[i64 58];
    store i32* %151 with i32 0;
    i32* %152 = getelementptr &(i32* %93)[i64 59];
    store i32* %152 with i32 0;
    i32* %153 = getelementptr &(i32* %93)[i64 60];
    store i32* %153 with i32 0;
    i32* %154 = getelementptr &(i32* %93)[i64 61];
    store i32* %154 with i32 0;
    i32* %155 = getelementptr &(i32* %93)[i64 62];
    store i32* %155 with i32 0;
    i32* %156 = getelementptr &(i32* %93)[i64 63];
    store i32* %156 with i32 0;
    i32 %157 = add i32 %92, i32 64;
    i1 %158 = icmp slt i32 %157, i32 960;
    cbr i1 %158(prob = 0.93), ^while.body3, ^while.body4;
  ^while.body4:
    i32* %159 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %157];
    store i32* %159 with i32 0;
    i32* %160 = getelementptr &(i32* %159)[i64 1];
    store i32* %160 with i32 0;
    i32* %161 = getelementptr &(i32* %159)[i64 2];
    store i32* %161 with i32 0;
    i32* %162 = getelementptr &(i32* %159)[i64 3];
    store i32* %162 with i32 0;
    i32* %163 = getelementptr &(i32* %159)[i64 4];
    store i32* %163 with i32 0;
    i32* %164 = getelementptr &(i32* %159)[i64 5];
    store i32* %164 with i32 0;
    i32* %165 = getelementptr &(i32* %159)[i64 6];
    store i32* %165 with i32 0;
    i32* %166 = getelementptr &(i32* %159)[i64 7];
    store i32* %166 with i32 0;
    i32* %167 = getelementptr &(i32* %159)[i64 8];
    store i32* %167 with i32 0;
    i32* %168 = getelementptr &(i32* %159)[i64 9];
    store i32* %168 with i32 0;
    i32* %169 = getelementptr &(i32* %159)[i64 10];
    store i32* %169 with i32 0;
    i32* %170 = getelementptr &(i32* %159)[i64 11];
    store i32* %170 with i32 0;
    i32* %171 = getelementptr &(i32* %159)[i64 12];
    store i32* %171 with i32 0;
    i32* %172 = getelementptr &(i32* %159)[i64 13];
    store i32* %172 with i32 0;
    i32* %173 = getelementptr &(i32* %159)[i64 14];
    store i32* %173 with i32 0;
    i32* %174 = getelementptr &(i32* %159)[i64 15];
    store i32* %174 with i32 0;
    i32* %175 = getelementptr &(i32* %159)[i64 16];
    store i32* %175 with i32 0;
    i32* %176 = getelementptr &(i32* %159)[i64 17];
    store i32* %176 with i32 0;
    i32* %177 = getelementptr &(i32* %159)[i64 18];
    store i32* %177 with i32 0;
    i32* %178 = getelementptr &(i32* %159)[i64 19];
    store i32* %178 with i32 0;
    i32* %179 = getelementptr &(i32* %159)[i64 20];
    store i32* %179 with i32 0;
    i32* %180 = getelementptr &(i32* %159)[i64 21];
    store i32* %180 with i32 0;
    i32* %181 = getelementptr &(i32* %159)[i64 22];
    store i32* %181 with i32 0;
    i32* %182 = getelementptr &(i32* %159)[i64 23];
    store i32* %182 with i32 0;
    i32* %183 = getelementptr &(i32* %159)[i64 24];
    store i32* %183 with i32 0;
    i32* %184 = getelementptr &(i32* %159)[i64 25];
    store i32* %184 with i32 0;
    i32* %185 = getelementptr &(i32* %159)[i64 26];
    store i32* %185 with i32 0;
    i32* %186 = getelementptr &(i32* %159)[i64 27];
    store i32* %186 with i32 0;
    i32* %187 = getelementptr &(i32* %159)[i64 28];
    store i32* %187 with i32 0;
    i32* %188 = getelementptr &(i32* %159)[i64 29];
    store i32* %188 with i32 0;
    i32* %189 = getelementptr &(i32* %159)[i64 30];
    store i32* %189 with i32 0;
    i32* %190 = getelementptr &(i32* %159)[i64 31];
    store i32* %190 with i32 0;
    i32* %191 = getelementptr &(i32* %159)[i64 32];
    store i32* %191 with i32 0;
    i32* %192 = getelementptr &(i32* %159)[i64 33];
    store i32* %192 with i32 0;
    i32* %193 = getelementptr &(i32* %159)[i64 34];
    store i32* %193 with i32 0;
    i32* %194 = getelementptr &(i32* %159)[i64 35];
    store i32* %194 with i32 0;
    i32* %195 = getelementptr &(i32* %159)[i64 36];
    store i32* %195 with i32 0;
    i32* %196 = getelementptr &(i32* %159)[i64 37];
    store i32* %196 with i32 0;
    i32* %197 = getelementptr &(i32* %159)[i64 38];
    store i32* %197 with i32 0;
    i32* %198 = getelementptr &(i32* %159)[i64 39];
    store i32* %198 with i32 0;
    ubr ^while.body5;
  ^while.body5:
    i32 %199 = phi [^while.body4, i32 0] [^while.body5, i32 %232];
    i32 %200 = phi [^while.body4, i32 0] [^while.body5, i32 %233];
    i32 %201 = phi [^while.body4, i32 0] [^while.body5, i32 %236];
    i32* %202 = getelementptr &(i32* %32)[i32 %201];
    i32 %203 = load i32* %202;
    i32* %204 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %203];
    i32 %205 = load i32* %204;
    i32 %206 = add i32 %205, i32 1;
    store i32* %204 with i32 %206;
    i32 %207 = smax i32 %200, i32 %206;
    i32* %208 = getelementptr &(i32* %202)[i64 1];
    i32 %209 = load i32* %208;
    i32* %210 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %209];
    i32 %211 = load i32* %210;
    i32 %212 = add i32 %211, i32 1;
    i1 %213 = icmp slt i32 %207, i32 %212;
    i1 %214 = icmp slt i32 %200, i32 %206;
    i32 %215 = select i1 %214 ? i32 %203 : i32 %199;
    i32 %216 = select i1 %213 ? i32 %209 : i32 %215;
    i32 %217 = smax i32 %207, i32 %212;
    store i32* %210 with i32 %212;
    i32* %218 = getelementptr &(i32* %202)[i64 2];
    i32 %219 = load i32* %218;
    i32* %220 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %219];
    i32 %221 = load i32* %220;
    i32 %222 = add i32 %221, i32 1;
    i1 %223 = icmp slt i32 %217, i32 %222;
    i32 %224 = select i1 %223 ? i32 %219 : i32 %216;
    i32 %225 = smax i32 %217, i32 %222;
    store i32* %220 with i32 %222;
    i32* %226 = getelementptr &(i32* %202)[i64 3];
    i32 %227 = load i32* %226;
    i32* %228 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %227];
    i32 %229 = load i32* %228;
    i32 %230 = add i32 %229, i32 1;
    i1 %231 = icmp slt i32 %225, i32 %230;
    i32 %232 = select i1 %231 ? i32 %227 : i32 %224;
    i32 %233 = smax i32 %225, i32 %230;
    store i32* %228 with i32 %230;
    i32 %234 = add i32 %201, i32 8;
    i1 %235 = icmp slt i32 %234, i32 32;
    i32 %236 = add i32 %201, i32 4;
    cbr i1 %235(prob = 0.89), ^while.body5, ^while.body6;
  ^while.body6:
    i32 %237 = phi [^while.body5, i32 %236] [^while.body6, i32 %248];
    i32 %238 = phi [^while.body5, i32 %233] [^while.body6, i32 %247];
    i32 %239 = phi [^while.body5, i32 %232] [^while.body6, i32 %246];
    i32* %240 = getelementptr &(i32* %32)[i32 %237];
    i32 %241 = load i32* %240;
    i32* %242 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %241];
    i32 %243 = load i32* %242;
    i32 %244 = add i32 %243, i32 1;
    i1 %245 = icmp slt i32 %238, i32 %244;
    i32 %246 = select i1 %245 ? i32 %241 : i32 %239;
    store i32* %242 with i32 %244;
    i32 %247 = smax i32 %238, i32 %244;
    i32 %248 = add i32 %237, i32 1;
    i1 %249 = icmp slt i32 %248, i32 32;
    cbr i1 %249(prob = 0.75), ^while.body6, ^b1;
  ^b1:
    call (i32) -> void @putint(i32 %246);
    ubr ^while.body7;
  ^while.body7:
    i32 %250 = phi [^b1, i32 0] [^while.body7, i32 %265];
    i32* %251 = getelementptr &(i32* %0)[i32 %250];
    i32 %252 = load i32* %251;
    i32* %253 = getelementptr &(i32* %32)[i32 %250];
    store i32* %253 with i32 %252;
    i32* %254 = getelementptr &(i32* %251)[i64 1];
    i32 %255 = load i32* %254;
    i32* %256 = getelementptr &(i32* %253)[i64 1];
    store i32* %256 with i32 %255;
    i32* %257 = getelementptr &(i32* %251)[i64 2];
    i32 %258 = load i32* %257;
    i32* %259 = getelementptr &(i32* %253)[i64 2];
    store i32* %259 with i32 %258;
    i32* %260 = getelementptr &(i32* %251)[i64 3];
    i32 %261 = load i32* %260;
    i32* %262 = getelementptr &(i32* %253)[i64 3];
    store i32* %262 with i32 %261;
    i32 %263 = add i32 %250, i32 8;
    i1 %264 = icmp slt i32 %263, i32 32;
    i32 %265 = add i32 %250, i32 4;
    cbr i1 %264(prob = 0.89), ^while.body7, ^while.body8;
  ^while.body8:
    i32 %266 = phi [^while.body7, i32 %265] [^while.body8, i32 %270];
    i32* %267 = getelementptr &(i32* %0)[i32 %266];
    i32 %268 = load i32* %267;
    i32* %269 = getelementptr &(i32* %32)[i32 %266];
    store i32* %269 with i32 %268;
    i32 %270 = add i32 %266, i32 1;
    i1 %271 = icmp slt i32 %270, i32 32;
    cbr i1 %271(prob = 0.75), ^while.body8, ^while.header2;
  ^while.header2:
    i32 %272 = phi [^while.body8, i32 0] [^b2, i32 %283];
    i32 %273 = sub i32 32, i32 %272;
    i32 %274 = add i32 %273, i32 -1;
    i1 %275 = icmp slt i32 %272, i32 31;
    cbr i1 %275(prob = 0.97), ^while.header3, ^while.body9;
  ^while.header3:
    i32 %276 = phi [^while.header2, i32 0] [^while.body10, i32 %289] [^if.then2, i32 %289];
    i1 %277 = icmp sgt i32 %274, i32 %276;
    cbr i1 %277(prob = 0.97), ^while.body10, ^b2;
  ^while.body9:
    i32 %278 = phi [^while.header2, i32 0] [^while.body9, i32 %281];
    i32* %279 = getelementptr &([32 * i32]* %result)[i64 0][i32 %278];
    i32 %280 = load i32* %279;
    call (i32) -> void @putint(i32 %280);
    i32 %281 = add i32 %278, i32 1;
    i1 %282 = icmp slt i32 %281, i32 32;
    cbr i1 %282(prob = 0.97), ^while.body9, ^while.body11;
  ^b2:
    i32 %283 = add i32 %272, i32 1;
    ubr ^while.header2;
  ^while.body10:
    i32* %284 = getelementptr &(i32* %32)[i32 %276];
    i32 %285 = load i32* %284;
    i32* %286 = getelementptr &(i32* %284)[i64 1];
    i32 %287 = load i32* %286;
    i1 %288 = icmp sgt i32 %285, i32 %287;
    i32 %289 = add i32 %276, i32 1;
    cbr i1 %288(prob = 0.5), ^if.then2, ^while.header3;
  ^while.body11:
    i32 %290 = phi [^while.body9, i32 0] [^while.body11, i32 %305];
    i32* %291 = getelementptr &(i32* %0)[i32 %290];
    i32 %292 = load i32* %291;
    i32* %293 = getelementptr &(i32* %32)[i32 %290];
    store i32* %293 with i32 %292;
    i32* %294 = getelementptr &(i32* %291)[i64 1];
    i32 %295 = load i32* %294;
    i32* %296 = getelementptr &(i32* %293)[i64 1];
    store i32* %296 with i32 %295;
    i32* %297 = getelementptr &(i32* %291)[i64 2];
    i32 %298 = load i32* %297;
    i32* %299 = getelementptr &(i32* %293)[i64 2];
    store i32* %299 with i32 %298;
    i32* %300 = getelementptr &(i32* %291)[i64 3];
    i32 %301 = load i32* %300;
    i32* %302 = getelementptr &(i32* %293)[i64 3];
    store i32* %302 with i32 %301;
    i32 %303 = add i32 %290, i32 8;
    i1 %304 = icmp slt i32 %303, i32 32;
    i32 %305 = add i32 %290, i32 4;
    cbr i1 %304(prob = 0.89), ^while.body11, ^while.body12;
  ^if.then2:
    store i32* %286 with i32 %285;
    store i32* %284 with i32 %287;
    ubr ^while.header3;
  ^while.body12:
    i32 %306 = phi [^while.body11, i32 %305] [^while.body12, i32 %310];
    i32* %307 = getelementptr &(i32* %0)[i32 %306];
    i32 %308 = load i32* %307;
    i32* %309 = getelementptr &(i32* %32)[i32 %306];
    store i32* %309 with i32 %308;
    i32 %310 = add i32 %306, i32 1;
    i1 %311 = icmp slt i32 %310, i32 32;
    cbr i1 %311(prob = 0.75), ^while.body12, ^while.header4;
  ^while.header4:
    i32 %312 = phi [^while.body12, i32 1] [^b3, i32 %342];
    i1 %313 = icmp slt i32 %312, i32 32;
    cbr i1 %313(prob = 0.97), ^while.body13, ^while.body14;
  ^while.body13:
    i32* %314 = getelementptr &(i32* %32)[i32 %312];
    i32 %315 = load i32* %314;
    i32 %316 = add i32 %312, i32 -1;
    ubr ^while.header5;
  ^while.body14:
    i32 %317 = phi [^while.header4, i32 0] [^while.body14, i32 %320];
    i32* %318 = getelementptr &([32 * i32]* %result)[i64 0][i32 %317];
    i32 %319 = load i32* %318;
    call (i32) -> void @putint(i32 %319);
    i32 %320 = add i32 %317, i32 1;
    i1 %321 = icmp slt i32 %320, i32 32;
    cbr i1 %321(prob = 0.97), ^while.body14, ^while.body15;
  ^while.header5:
    i32 %322 = phi [^while.body13, i32 %316] [^while.body17, i32 %354];
    i1 %323 = icmp sgt i32 %322, i32 -1;
    cbr i1 %323(prob = 0.5), ^b4, ^b3;
  ^while.body15:
    i32 %324 = phi [^while.body14, i32 0] [^while.body15, i32 %339];
    i32* %325 = getelementptr &(i32* %0)[i32 %324];
    i32 %326 = load i32* %325;
    i32* %327 = getelementptr &(i32* %32)[i32 %324];
    store i32* %327 with i32 %326;
    i32* %328 = getelementptr &(i32* %325)[i64 1];
    i32 %329 = load i32* %328;
    i32* %330 = getelementptr &(i32* %327)[i64 1];
    store i32* %330 with i32 %329;
    i32* %331 = getelementptr &(i32* %325)[i64 2];
    i32 %332 = load i32* %331;
    i32* %333 = getelementptr &(i32* %327)[i64 2];
    store i32* %333 with i32 %332;
    i32* %334 = getelementptr &(i32* %325)[i64 3];
    i32 %335 = load i32* %334;
    i32* %336 = getelementptr &(i32* %327)[i64 3];
    store i32* %336 with i32 %335;
    i32 %337 = add i32 %324, i32 8;
    i1 %338 = icmp slt i32 %337, i32 32;
    i32 %339 = add i32 %324, i32 4;
    cbr i1 %338(prob = 0.89), ^while.body15, ^while.body16;
  ^b3:
    i32 %340 = add i32 %322, i32 1;
    i32* %341 = getelementptr &(i32* %32)[i32 %340];
    store i32* %341 with i32 %315;
    i32 %342 = add i32 %312, i32 1;
    ubr ^while.header4;
  ^b4:
    i32* %343 = getelementptr &(i32* %32)[i32 %322];
    i32 %344 = load i32* %343;
    i1 %345 = icmp slt i32 %315, i32 %344;
    cbr i1 %345(prob = 0.97), ^while.body17, ^b3;
  ^while.body16:
    i32 %346 = phi [^while.body15, i32 %339] [^while.body16, i32 %350];
    i32* %347 = getelementptr &(i32* %0)[i32 %346];
    i32 %348 = load i32* %347;
    i32* %349 = getelementptr &(i32* %32)[i32 %346];
    store i32* %349 with i32 %348;
    i32 %350 = add i32 %346, i32 1;
    i1 %351 = icmp slt i32 %350, i32 32;
    cbr i1 %351(prob = 0.75), ^while.body16, ^b5;
  ^while.body17:
    i32 %352 = add i32 %322, i32 1;
    i32* %353 = getelementptr &(i32* %32)[i32 %352];
    store i32* %353 with i32 %344;
    i32 %354 = add i32 %322, i32 -1;
    ubr ^while.header5;
  ^b5:
    call (i32*, i32, i32) -> void @QuickSort(i32* %32, i32 0, i32 31);
    ubr ^while.body18;
  ^while.body18:
    i32 %355 = phi [^b5, i32 0] [^while.body18, i32 %358];
    i32* %356 = getelementptr &([32 * i32]* %result)[i64 0][i32 %355];
    i32 %357 = load i32* %356;
    call (i32) -> void @putint(i32 %357);
    i32 %358 = add i32 %355, i32 1;
    i1 %359 = icmp slt i32 %358, i32 32;
    cbr i1 %359(prob = 0.97), ^while.body18, ^while.body19;
  ^while.body19:
    i32 %360 = phi [^while.body18, i32 0] [^while.body19, i32 %375];
    i32* %361 = getelementptr &(i32* %0)[i32 %360];
    i32 %362 = load i32* %361;
    i32* %363 = getelementptr &(i32* %32)[i32 %360];
    store i32* %363 with i32 %362;
    i32* %364 = getelementptr &(i32* %361)[i64 1];
    i32 %365 = load i32* %364;
    i32* %366 = getelementptr &(i32* %363)[i64 1];
    store i32* %366 with i32 %365;
    i32* %367 = getelementptr &(i32* %361)[i64 2];
    i32 %368 = load i32* %367;
    i32* %369 = getelementptr &(i32* %363)[i64 2];
    store i32* %369 with i32 %368;
    i32* %370 = getelementptr &(i32* %361)[i64 3];
    i32 %371 = load i32* %370;
    i32* %372 = getelementptr &(i32* %363)[i64 3];
    store i32* %372 with i32 %371;
    i32 %373 = add i32 %360, i32 8;
    i1 %374 = icmp slt i32 %373, i32 32;
    i32 %375 = add i32 %360, i32 4;
    cbr i1 %374(prob = 0.89), ^while.body19, ^while.body20;
  ^while.body20:
    i32 %376 = phi [^while.body19, i32 %375] [^while.body20, i32 %380];
    i32* %377 = getelementptr &(i32* %0)[i32 %376];
    i32 %378 = load i32* %377;
    i32* %379 = getelementptr &(i32* %32)[i32 %376];
    store i32* %379 with i32 %378;
    i32 %380 = add i32 %376, i32 1;
    i1 %381 = icmp slt i32 %380, i32 32;
    cbr i1 %381(prob = 0.75), ^while.body20, ^while.header6;
  ^while.header6:
    i32 %382 = phi [^while.body20, i32 0] [^if.then3, i32 %387] [^if.else, i32 0];
    i32 %383 = phi [^while.body20, i32 0] [^if.then3, i32 %395] [^if.else, i32 %396];
    i1 %384 = icmp slt i32 %383, i32 32;
    cbr i1 %384(prob = 0.97), ^while.body21, ^while.body22;
  ^while.body21:
    i32* %385 = getelementptr &(i32* %32)[i32 %383];
    i32 %386 = load i32* %385;
    i32 %387 = add i32 %382, i32 %386;
    i32 %388 = and i32 %383, i32 3;
    i1 %389 = icmp neq i32 %388, i32 3;
    cbr i1 %389(prob = 0.5), ^if.then3, ^if.else;
  ^while.body22:
    i32 %390 = phi [^while.header6, i32 0] [^while.body22, i32 %393];
    i32* %391 = getelementptr &([32 * i32]* %result)[i64 0][i32 %390];
    i32 %392 = load i32* %391;
    call (i32) -> void @putint(i32 %392);
    i32 %393 = add i32 %390, i32 1;
    i1 %394 = icmp slt i32 %393, i32 32;
    cbr i1 %394(prob = 0.97), ^while.body22, ^while.body23;
  ^if.then3:
    store i32* %385 with i32 0;
    i32 %395 = add i32 %383, i32 1;
    ubr ^while.header6;
  ^if.else:
    store i32* %385 with i32 %387;
    i32 %396 = add i32 %383, i32 1;
    ubr ^while.header6;
  ^while.body23:
    i32 %397 = phi [^while.body22, i32 0] [^while.body23, i32 %412];
    i32* %398 = getelementptr &(i32* %0)[i32 %397];
    i32 %399 = load i32* %398;
    i32* %400 = getelementptr &(i32* %32)[i32 %397];
    store i32* %400 with i32 %399;
    i32* %401 = getelementptr &(i32* %398)[i64 1];
    i32 %402 = load i32* %401;
    i32* %403 = getelementptr &(i32* %400)[i64 1];
    store i32* %403 with i32 %402;
    i32* %404 = getelementptr &(i32* %398)[i64 2];
    i32 %405 = load i32* %404;
    i32* %406 = getelementptr &(i32* %400)[i64 2];
    store i32* %406 with i32 %405;
    i32* %407 = getelementptr &(i32* %398)[i64 3];
    i32 %408 = load i32* %407;
    i32* %409 = getelementptr &(i32* %400)[i64 3];
    store i32* %409 with i32 %408;
    i32 %410 = add i32 %397, i32 8;
    i1 %411 = icmp slt i32 %410, i32 32;
    i32 %412 = add i32 %397, i32 4;
    cbr i1 %411(prob = 0.89), ^while.body23, ^while.body24;
  ^while.body24:
    i32 %413 = phi [^while.body23, i32 %412] [^while.body24, i32 %417];
    i32* %414 = getelementptr &(i32* %0)[i32 %413];
    i32 %415 = load i32* %414;
    i32* %416 = getelementptr &(i32* %32)[i32 %413];
    store i32* %416 with i32 %415;
    i32 %417 = add i32 %413, i32 1;
    i1 %418 = icmp slt i32 %417, i32 32;
    cbr i1 %418(prob = 0.75), ^while.body24, ^while.header7;
  ^while.header7:
    i32 %419 = phi [^while.body24, i32 0] [^if.then4, i32 %419] [^if.then5, i32 %434] [^if.else2, i32 %442];
    i32 %420 = phi [^while.body24, i32 0] [^if.then4, i32 %426] [^if.then5, i32 %420] [^if.else2, i32 %439];
    i32 %421 = phi [^while.body24, i32 0] [^if.then4, i32 %427] [^if.then5, i32 3] [^if.else2, i32 %443];
    i1 %422 = icmp slt i32 %421, i32 32;
    cbr i1 %422(prob = 0.97), ^while.body26, ^while.body25;
  ^while.body25:
    store i32* %62 with i32 0;
    store i32* %63 with i32 0;
    ubr ^while.body27;
  ^while.body26:
    i1 %423 = icmp slt i32 %421, i32 2;
    cbr i1 %423(prob = 0.5), ^if.then4, ^if.else1;
  ^if.then4:
    i32* %424 = getelementptr &(i32* %32)[i32 %421];
    i32 %425 = load i32* %424;
    i32 %426 = add i32 %420, i32 %425;
    i32 %427 = add i32 %421, i32 1;
    ubr ^while.header7;
  ^if.else1:
    i1 %428 = icmp eq i32 %421, i32 2;
    cbr i1 %428(prob = 0.5), ^if.then5, ^if.else2;
  ^while.body27:
    i32 %429 = phi [^while.body25, i32 0] [^while.body27, i32 %432];
    i32* %430 = getelementptr &([32 * i32]* %result)[i64 0][i32 %429];
    i32 %431 = load i32* %430;
    call (i32) -> void @putint(i32 %431);
    i32 %432 = add i32 %429, i32 1;
    i1 %433 = icmp slt i32 %432, i32 32;
    cbr i1 %433(prob = 0.97), ^while.body27, ^b6;
  ^if.then5:
    i32 %434 = load i32* %32;
    i32 %435 = sdiv i32 %420, i32 3;
    store i32* %32 with i32 %435;
    ubr ^while.header7;
  ^if.else2:
    i32* %436 = getelementptr &(i32* %32)[i32 %421];
    i32 %437 = load i32* %436;
    i32 %438 = add i32 %420, i32 %437;
    i32 %439 = sub i32 %438, i32 %419;
    i32 %440 = sdiv i32 %439, i32 3;
    i32* %441 = getelementptr &(i32* %436)[i64 -2];
    i32 %442 = load i32* %441;
    store i32* %441 with i32 %440;
    i32 %443 = add i32 %421, i32 1;
    ubr ^while.header7;
  ^b6:
    ret i32 0;
}
internal [1000 * i32]* @count { Flexible };
