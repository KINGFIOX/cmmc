internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @n;
internal func @bubblesort(i32* %arr) -> i32 {
^entry:
    i32* %tmp = alloc i32;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    i32** %arr1 = alloc i32*;
    store i32** %arr1 with i32* %arr;
    store i32* %i with i32 0;
    store i32* %j with i32 0;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i32 %1 = load i32* @n;
    i32 %2 = sub i32 %1, i32 1;
    i1 %3 = scmp lt i32 %0, i32 %2;
    i32 %4 = zext i1 %3 to i32;
    i1 %5 = scmp neq i32 %4, i32 0;
    cbr i1 %5(prob = 0.97), ^while.body, ^b;
^while.body:
    store i32* %j with i32 0;
    ubr ^while.header1;
^b:
    ret i32 0;
^while.header1:
    i32 %6 = load i32* %j;
    i32 %7 = load i32* @n;
    i32 %8 = load i32* %i;
    i32 %9 = sub i32 %7, i32 %8;
    i32 %10 = sub i32 %9, i32 1;
    i1 %11 = scmp lt i32 %6, i32 %10;
    i32 %12 = zext i1 %11 to i32;
    i1 %13 = scmp neq i32 %12, i32 0;
    cbr i1 %13(prob = 0.97), ^while.body1, ^b1;
^b1:
    i32 %14 = load i32* %i;
    i32 %15 = add i32 %14, i32 1;
    store i32* %i with i32 %15;
    ubr ^while.header;
^while.body1:
    i32 %16 = load i32* %j;
    i64 %17 = sext i32 %16 to i64;
    i32* %18 = load i32** %arr1;
    i32* %19 = getelementptr &(i32* %18)[i64 %17];
    i32 %20 = load i32* %19;
    i32 %21 = load i32* %j;
    i32 %22 = add i32 %21, i32 1;
    i64 %23 = sext i32 %22 to i64;
    i32* %24 = load i32** %arr1;
    i32* %25 = getelementptr &(i32* %24)[i64 %23];
    i32 %26 = load i32* %25;
    i1 %27 = scmp gt i32 %20, i32 %26;
    i32 %28 = zext i1 %27 to i32;
    i1 %29 = scmp neq i32 %28, i32 0;
    cbr i1 %29(prob = 0.5), ^if.then, ^b2;
^if.then:
    store i32* %tmp with i32 0;
    i32 %30 = load i32* %j;
    i32 %31 = add i32 %30, i32 1;
    i64 %32 = sext i32 %31 to i64;
    i32* %33 = load i32** %arr1;
    i32* %34 = getelementptr &(i32* %33)[i64 %32];
    i32 %35 = load i32* %34;
    store i32* %tmp with i32 %35;
    i32 %36 = load i32* %j;
    i32 %37 = add i32 %36, i32 1;
    i64 %38 = sext i32 %37 to i64;
    i32* %39 = load i32** %arr1;
    i32* %40 = getelementptr &(i32* %39)[i64 %38];
    i32 %41 = load i32* %j;
    i64 %42 = sext i32 %41 to i64;
    i32* %43 = load i32** %arr1;
    i32* %44 = getelementptr &(i32* %43)[i64 %42];
    i32 %45 = load i32* %44;
    store i32* %40 with i32 %45;
    i32 %46 = load i32* %j;
    i64 %47 = sext i32 %46 to i64;
    i32* %48 = load i32** %arr1;
    i32* %49 = getelementptr &(i32* %48)[i64 %47];
    i32 %50 = load i32* %tmp;
    store i32* %49 with i32 %50;
    ubr ^b2;
^b2:
    i32 %51 = load i32* %j;
    i32 %52 = add i32 %51, i32 1;
    store i32* %j with i32 %52;
    ubr ^while.header1;
}
internal func @insertsort(i32* %a) -> i32 {
^entry:
    i32* %j = alloc i32;
    i32* %temp = alloc i32;
    i32* %i = alloc i32;
    i32** %a1 = alloc i32*;
    store i32** %a1 with i32* %a;
    store i32* %i with i32 0;
    store i32* %i with i32 1;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i32 %1 = load i32* @n;
    i1 %2 = scmp lt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    store i32* %temp with i32 0;
    i32 %5 = load i32* %i;
    i64 %6 = sext i32 %5 to i64;
    i32* %7 = load i32** %a1;
    i32* %8 = getelementptr &(i32* %7)[i64 %6];
    i32 %9 = load i32* %8;
    store i32* %temp with i32 %9;
    store i32* %j with i32 0;
    i32 %10 = load i32* %i;
    i32 %11 = sub i32 %10, i32 1;
    store i32* %j with i32 %11;
    ubr ^while.header1;
^b:
    ret i32 0;
^while.header1:
    i32 %12 = load i32* %j;
    i1 %13 = scmp gt i32 %12, i32 -1;
    i32 %14 = zext i1 %13 to i32;
    i1 %15 = scmp neq i32 %14, i32 0;
    cbr i1 %15(prob = 0.5), ^b1, ^b2;
^b1:
    i32 %16 = load i32* %temp;
    i32 %17 = load i32* %j;
    i64 %18 = sext i32 %17 to i64;
    i32* %19 = load i32** %a1;
    i32* %20 = getelementptr &(i32* %19)[i64 %18];
    i32 %21 = load i32* %20;
    i1 %22 = scmp lt i32 %16, i32 %21;
    i32 %23 = zext i1 %22 to i32;
    i1 %24 = scmp neq i32 %23, i32 0;
    ubr ^b2;
^b2:
    i1 %25 = phi [^b1, i1 %24] [^while.header1, i1 false];
    i32 %26 = zext i1 %25 to i32;
    i1 %27 = scmp neq i32 %26, i32 0;
    cbr i1 %27(prob = 0.97), ^while.body1, ^b3;
^while.body1:
    i32 %28 = load i32* %j;
    i32 %29 = add i32 %28, i32 1;
    i64 %30 = sext i32 %29 to i64;
    i32* %31 = load i32** %a1;
    i32* %32 = getelementptr &(i32* %31)[i64 %30];
    i32 %33 = load i32* %j;
    i64 %34 = sext i32 %33 to i64;
    i32* %35 = load i32** %a1;
    i32* %36 = getelementptr &(i32* %35)[i64 %34];
    i32 %37 = load i32* %36;
    store i32* %32 with i32 %37;
    i32 %38 = load i32* %j;
    i32 %39 = sub i32 %38, i32 1;
    store i32* %j with i32 %39;
    ubr ^while.header1;
^b3:
    i32 %40 = load i32* %j;
    i32 %41 = add i32 %40, i32 1;
    i64 %42 = sext i32 %41 to i64;
    i32* %43 = load i32** %a1;
    i32* %44 = getelementptr &(i32* %43)[i64 %42];
    i32 %45 = load i32* %temp;
    store i32* %44 with i32 %45;
    i32 %46 = load i32* %i;
    i32 %47 = add i32 %46, i32 1;
    store i32* %i with i32 %47;
    ubr ^while.header;
}
internal func @QuickSort(i32* %arr, i32 %low, i32 %high) -> i32 {
^entry:
    i32* %tmp = alloc i32;
    i32* %k = alloc i32;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    i32* %high1 = alloc i32;
    i32* %low1 = alloc i32;
    i32** %arr1 = alloc i32*;
    store i32** %arr1 with i32* %arr;
    store i32* %low1 with i32 %low;
    store i32* %high1 with i32 %high;
    i32 %0 = load i32* %low1;
    i32 %1 = load i32* %high1;
    i1 %2 = scmp lt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.5), ^if.then, ^b;
^if.then:
    store i32* %i with i32 0;
    i32 %5 = load i32* %low1;
    store i32* %i with i32 %5;
    store i32* %j with i32 0;
    i32 %6 = load i32* %high1;
    store i32* %j with i32 %6;
    store i32* %k with i32 0;
    i32 %7 = load i32* %low1;
    i64 %8 = sext i32 %7 to i64;
    i32* %9 = load i32** %arr1;
    i32* %10 = getelementptr &(i32* %9)[i64 %8];
    i32 %11 = load i32* %10;
    store i32* %k with i32 %11;
    ubr ^while.header;
^b:
    ret i32 0;
^while.header:
    i32 %12 = load i32* %i;
    i32 %13 = load i32* %j;
    i1 %14 = scmp lt i32 %12, i32 %13;
    i32 %15 = zext i1 %14 to i32;
    i1 %16 = scmp neq i32 %15, i32 0;
    cbr i1 %16(prob = 0.97), ^while.body, ^b1;
^while.body:
    ubr ^while.header1;
^b1:
    i32 %17 = load i32* %i;
    i64 %18 = sext i32 %17 to i64;
    i32* %19 = load i32** %arr1;
    i32* %20 = getelementptr &(i32* %19)[i64 %18];
    i32 %21 = load i32* %k;
    store i32* %20 with i32 %21;
    store i32* %tmp with i32 0;
    i32 %22 = load i32* %i;
    i32 %23 = sub i32 %22, i32 1;
    store i32* %tmp with i32 %23;
    i32* %24 = load i32** %arr1;
    i32 %25 = load i32* %low1;
    i32 %26 = load i32* %tmp;
    i32 %27 = call (i32*, i32, i32) -> i32 @QuickSort(i32* %24, i32 %25, i32 %26);
    store i32* %tmp with i32 %27;
    i32 %28 = load i32* %i;
    i32 %29 = add i32 %28, i32 1;
    store i32* %tmp with i32 %29;
    i32* %30 = load i32** %arr1;
    i32 %31 = load i32* %tmp;
    i32 %32 = load i32* %high1;
    i32 %33 = call (i32*, i32, i32) -> i32 @QuickSort(i32* %30, i32 %31, i32 %32);
    store i32* %tmp with i32 %33;
    ubr ^b;
^while.header1:
    i32 %34 = load i32* %i;
    i32 %35 = load i32* %j;
    i1 %36 = scmp lt i32 %34, i32 %35;
    i32 %37 = zext i1 %36 to i32;
    i1 %38 = scmp neq i32 %37, i32 0;
    cbr i1 %38(prob = 0.5), ^b2, ^b3;
^b2:
    i32 %39 = load i32* %j;
    i64 %40 = sext i32 %39 to i64;
    i32* %41 = load i32** %arr1;
    i32* %42 = getelementptr &(i32* %41)[i64 %40];
    i32 %43 = load i32* %42;
    i32 %44 = load i32* %k;
    i32 %45 = sub i32 %44, i32 1;
    i1 %46 = scmp gt i32 %43, i32 %45;
    i32 %47 = zext i1 %46 to i32;
    i1 %48 = scmp neq i32 %47, i32 0;
    ubr ^b3;
^b3:
    i1 %49 = phi [^b2, i1 %48] [^while.header1, i1 false];
    i32 %50 = zext i1 %49 to i32;
    i1 %51 = scmp neq i32 %50, i32 0;
    cbr i1 %51(prob = 0.97), ^while.body1, ^b4;
^while.body1:
    i32 %52 = load i32* %j;
    i32 %53 = sub i32 %52, i32 1;
    store i32* %j with i32 %53;
    ubr ^while.header1;
^b4:
    i32 %54 = load i32* %i;
    i32 %55 = load i32* %j;
    i1 %56 = scmp lt i32 %54, i32 %55;
    i32 %57 = zext i1 %56 to i32;
    i1 %58 = scmp neq i32 %57, i32 0;
    cbr i1 %58(prob = 0.5), ^if.then1, ^b5;
^if.then1:
    i32 %59 = load i32* %i;
    i64 %60 = sext i32 %59 to i64;
    i32* %61 = load i32** %arr1;
    i32* %62 = getelementptr &(i32* %61)[i64 %60];
    i32 %63 = load i32* %j;
    i64 %64 = sext i32 %63 to i64;
    i32* %65 = load i32** %arr1;
    i32* %66 = getelementptr &(i32* %65)[i64 %64];
    i32 %67 = load i32* %66;
    store i32* %62 with i32 %67;
    i32 %68 = load i32* %i;
    i32 %69 = add i32 %68, i32 1;
    store i32* %i with i32 %69;
    ubr ^b5;
^b5:
    ubr ^while.header2;
^while.header2:
    i32 %70 = load i32* %i;
    i32 %71 = load i32* %j;
    i1 %72 = scmp lt i32 %70, i32 %71;
    i32 %73 = zext i1 %72 to i32;
    i1 %74 = scmp neq i32 %73, i32 0;
    cbr i1 %74(prob = 0.5), ^b6, ^b7;
^b6:
    i32 %75 = load i32* %i;
    i64 %76 = sext i32 %75 to i64;
    i32* %77 = load i32** %arr1;
    i32* %78 = getelementptr &(i32* %77)[i64 %76];
    i32 %79 = load i32* %78;
    i32 %80 = load i32* %k;
    i1 %81 = scmp lt i32 %79, i32 %80;
    i32 %82 = zext i1 %81 to i32;
    i1 %83 = scmp neq i32 %82, i32 0;
    ubr ^b7;
^b7:
    i1 %84 = phi [^b6, i1 %83] [^while.header2, i1 false];
    i32 %85 = zext i1 %84 to i32;
    i1 %86 = scmp neq i32 %85, i32 0;
    cbr i1 %86(prob = 0.97), ^while.body2, ^b8;
^while.body2:
    i32 %87 = load i32* %i;
    i32 %88 = add i32 %87, i32 1;
    store i32* %i with i32 %88;
    ubr ^while.header2;
^b8:
    i32 %89 = load i32* %i;
    i32 %90 = load i32* %j;
    i1 %91 = scmp lt i32 %89, i32 %90;
    i32 %92 = zext i1 %91 to i32;
    i1 %93 = scmp neq i32 %92, i32 0;
    cbr i1 %93(prob = 0.5), ^if.then2, ^b9;
^if.then2:
    i32 %94 = load i32* %j;
    i64 %95 = sext i32 %94 to i64;
    i32* %96 = load i32** %arr1;
    i32* %97 = getelementptr &(i32* %96)[i64 %95];
    i32 %98 = load i32* %i;
    i64 %99 = sext i32 %98 to i64;
    i32* %100 = load i32** %arr1;
    i32* %101 = getelementptr &(i32* %100)[i64 %99];
    i32 %102 = load i32* %101;
    store i32* %97 with i32 %102;
    i32 %103 = load i32* %j;
    i32 %104 = sub i32 %103, i32 1;
    store i32* %j with i32 %104;
    ubr ^b9;
^b9:
    ubr ^while.header;
}
internal func @getMid(i32* %arr) -> i32 {
^entry:
    i32* %mid = alloc i32;
    i32** %arr1 = alloc i32*;
    store i32** %arr1 with i32* %arr;
    store i32* %mid with i32 0;
    i32 %0 = load i32* @n;
    i32 %1 = srem i32 %0, i32 2;
    i1 %2 = scmp eq i32 %1, i32 0;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32 %5 = load i32* @n;
    i32 %6 = sdiv i32 %5, i32 2;
    store i32* %mid with i32 %6;
    i32 %7 = load i32* %mid;
    i64 %8 = sext i32 %7 to i64;
    i32* %9 = load i32** %arr1;
    i32* %10 = getelementptr &(i32* %9)[i64 %8];
    i32 %11 = load i32* %10;
    i32 %12 = load i32* %mid;
    i32 %13 = sub i32 %12, i32 1;
    i64 %14 = sext i32 %13 to i64;
    i32* %15 = load i32** %arr1;
    i32* %16 = getelementptr &(i32* %15)[i64 %14];
    i32 %17 = load i32* %16;
    i32 %18 = add i32 %11, i32 %17;
    i32 %19 = sdiv i32 %18, i32 2;
    ret i32 %19;
^if.else:
    i32 %20 = load i32* @n;
    i32 %21 = sdiv i32 %20, i32 2;
    store i32* %mid with i32 %21;
    i32 %22 = load i32* %mid;
    i64 %23 = sext i32 %22 to i64;
    i32* %24 = load i32** %arr1;
    i32* %25 = getelementptr &(i32* %24)[i64 %23];
    i32 %26 = load i32* %25;
    ret i32 %26;
^b:
    unreachable;
}
internal func @getMost(i32* %arr) -> i32 {
^entry:
    i32* %num = alloc i32;
    i32* %number = alloc i32;
    i32* %max = alloc i32;
    i32* %i = alloc i32;
    [1000 * i32]* %count = alloc [1000 * i32];
    i32** %arr1 = alloc i32*;
    store i32** %arr1 with i32* %arr;
    store i32* %i with i32 0;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i1 %1 = scmp lt i32 %0, i32 1000;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %4 = load i32* %i;
    i64 %5 = sext i32 %4 to i64;
    i32* %6 = getelementptr &([1000 * i32]* %count)[i64 0][i64 %5];
    store i32* %6 with i32 0;
    i32 %7 = load i32* %i;
    i32 %8 = add i32 %7, i32 1;
    store i32* %i with i32 %8;
    ubr ^while.header;
^b:
    store i32* %i with i32 0;
    store i32* %max with i32 0;
    store i32* %number with i32 0;
    store i32* %max with i32 0;
    ubr ^while.header1;
^while.header1:
    i32 %9 = load i32* %i;
    i32 %10 = load i32* @n;
    i1 %11 = scmp lt i32 %9, i32 %10;
    i32 %12 = zext i1 %11 to i32;
    i1 %13 = scmp neq i32 %12, i32 0;
    cbr i1 %13(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    store i32* %num with i32 0;
    i32 %14 = load i32* %i;
    i64 %15 = sext i32 %14 to i64;
    i32* %16 = load i32** %arr1;
    i32* %17 = getelementptr &(i32* %16)[i64 %15];
    i32 %18 = load i32* %17;
    store i32* %num with i32 %18;
    i32 %19 = load i32* %num;
    i64 %20 = sext i32 %19 to i64;
    i32* %21 = getelementptr &([1000 * i32]* %count)[i64 0][i64 %20];
    i32 %22 = load i32* %num;
    i64 %23 = sext i32 %22 to i64;
    i32* %24 = getelementptr &([1000 * i32]* %count)[i64 0][i64 %23];
    i32 %25 = load i32* %24;
    i32 %26 = add i32 %25, i32 1;
    store i32* %21 with i32 %26;
    i32 %27 = load i32* %num;
    i64 %28 = sext i32 %27 to i64;
    i32* %29 = getelementptr &([1000 * i32]* %count)[i64 0][i64 %28];
    i32 %30 = load i32* %29;
    i32 %31 = load i32* %max;
    i1 %32 = scmp gt i32 %30, i32 %31;
    i32 %33 = zext i1 %32 to i32;
    i1 %34 = scmp neq i32 %33, i32 0;
    cbr i1 %34(prob = 0.5), ^if.then, ^b2;
^b1:
    i32 %35 = load i32* %number;
    ret i32 %35;
^if.then:
    i32 %36 = load i32* %num;
    i64 %37 = sext i32 %36 to i64;
    i32* %38 = getelementptr &([1000 * i32]* %count)[i64 0][i64 %37];
    i32 %39 = load i32* %38;
    store i32* %max with i32 %39;
    i32 %40 = load i32* %num;
    store i32* %number with i32 %40;
    ubr ^b2;
^b2:
    i32 %41 = load i32* %i;
    i32 %42 = add i32 %41, i32 1;
    store i32* %i with i32 %42;
    ubr ^while.header1;
}
internal func @revert(i32* %arr) -> i32 {
^entry:
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    i32* %temp = alloc i32;
    i32** %arr1 = alloc i32*;
    store i32** %arr1 with i32* %arr;
    store i32* %temp with i32 0;
    store i32* %i with i32 0;
    store i32* %j with i32 0;
    store i32* %i with i32 0;
    store i32* %j with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i32 %1 = load i32* %j;
    i1 %2 = scmp lt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %5 = load i32* %i;
    i64 %6 = sext i32 %5 to i64;
    i32* %7 = load i32** %arr1;
    i32* %8 = getelementptr &(i32* %7)[i64 %6];
    i32 %9 = load i32* %8;
    store i32* %temp with i32 %9;
    i32 %10 = load i32* %i;
    i64 %11 = sext i32 %10 to i64;
    i32* %12 = load i32** %arr1;
    i32* %13 = getelementptr &(i32* %12)[i64 %11];
    i32 %14 = load i32* %j;
    i64 %15 = sext i32 %14 to i64;
    i32* %16 = load i32** %arr1;
    i32* %17 = getelementptr &(i32* %16)[i64 %15];
    i32 %18 = load i32* %17;
    store i32* %13 with i32 %18;
    i32 %19 = load i32* %j;
    i64 %20 = sext i32 %19 to i64;
    i32* %21 = load i32** %arr1;
    i32* %22 = getelementptr &(i32* %21)[i64 %20];
    i32 %23 = load i32* %temp;
    store i32* %22 with i32 %23;
    i32 %24 = load i32* %i;
    i32 %25 = add i32 %24, i32 1;
    store i32* %i with i32 %25;
    i32 %26 = load i32* %j;
    i32 %27 = sub i32 %26, i32 1;
    store i32* %j with i32 %27;
    ubr ^while.header;
^b:
    ret i32 0;
}
internal func @arrCopy(i32* %src, i32* %target) -> i32 {
^entry:
    i32* %i = alloc i32;
    i32** %target1 = alloc i32*;
    i32** %src1 = alloc i32*;
    store i32** %src1 with i32* %src;
    store i32** %target1 with i32* %target;
    store i32* %i with i32 0;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i32 %1 = load i32* @n;
    i1 %2 = scmp lt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %5 = load i32* %i;
    i64 %6 = sext i32 %5 to i64;
    i32* %7 = load i32** %target1;
    i32* %8 = getelementptr &(i32* %7)[i64 %6];
    i32 %9 = load i32* %i;
    i64 %10 = sext i32 %9 to i64;
    i32* %11 = load i32** %src1;
    i32* %12 = getelementptr &(i32* %11)[i64 %10];
    i32 %13 = load i32* %12;
    store i32* %8 with i32 %13;
    i32 %14 = load i32* %i;
    i32 %15 = add i32 %14, i32 1;
    store i32* %i with i32 %15;
    ubr ^while.header;
^b:
    ret i32 0;
}
internal func @calSum(i32* %arr, i32 %stride) -> i32 {
^entry:
    i32* %i = alloc i32;
    i32* %sum = alloc i32;
    i32* %stride1 = alloc i32;
    i32** %arr1 = alloc i32*;
    store i32** %arr1 with i32* %arr;
    store i32* %stride1 with i32 %stride;
    store i32* %sum with i32 0;
    store i32* %sum with i32 0;
    store i32* %i with i32 0;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i32 %1 = load i32* @n;
    i1 %2 = scmp lt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %5 = load i32* %sum;
    i32 %6 = load i32* %i;
    i64 %7 = sext i32 %6 to i64;
    i32* %8 = load i32** %arr1;
    i32* %9 = getelementptr &(i32* %8)[i64 %7];
    i32 %10 = load i32* %9;
    i32 %11 = add i32 %5, i32 %10;
    store i32* %sum with i32 %11;
    i32 %12 = load i32* %i;
    i32 %13 = load i32* %stride1;
    i32 %14 = srem i32 %12, i32 %13;
    i32 %15 = load i32* %stride1;
    i32 %16 = sub i32 %15, i32 1;
    i1 %17 = scmp neq i32 %14, i32 %16;
    i32 %18 = zext i1 %17 to i32;
    i1 %19 = scmp neq i32 %18, i32 0;
    cbr i1 %19(prob = 0.5), ^if.then, ^if.else;
^b:
    ret i32 0;
^if.then:
    i32 %20 = load i32* %i;
    i64 %21 = sext i32 %20 to i64;
    i32* %22 = load i32** %arr1;
    i32* %23 = getelementptr &(i32* %22)[i64 %21];
    store i32* %23 with i32 0;
    ubr ^b1;
^if.else:
    i32 %24 = load i32* %i;
    i64 %25 = sext i32 %24 to i64;
    i32* %26 = load i32** %arr1;
    i32* %27 = getelementptr &(i32* %26)[i64 %25];
    i32 %28 = load i32* %sum;
    store i32* %27 with i32 %28;
    store i32* %sum with i32 0;
    ubr ^b1;
^b1:
    i32 %29 = load i32* %i;
    i32 %30 = add i32 %29, i32 1;
    store i32* %i with i32 %30;
    ubr ^while.header;
}
internal func @avgPooling(i32* %arr, i32 %stride) -> i32 {
^entry:
    i32* %lastnum = alloc i32;
    i32* %i = alloc i32;
    i32* %sum = alloc i32;
    i32* %stride1 = alloc i32;
    i32** %arr1 = alloc i32*;
    store i32** %arr1 with i32* %arr;
    store i32* %stride1 with i32 %stride;
    store i32* %sum with i32 0;
    store i32* %i with i32 0;
    store i32* %i with i32 0;
    store i32* %sum with i32 0;
    store i32* %lastnum with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i32 %1 = load i32* @n;
    i1 %2 = scmp lt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^b:
    i32 %5 = load i32* @n;
    i32 %6 = load i32* %stride1;
    i32 %7 = sub i32 %5, i32 %6;
    i32 %8 = add i32 %7, i32 1;
    store i32* %i with i32 %8;
    ubr ^while.header1;
^while.body:
    i32 %9 = load i32* %i;
    i32 %10 = load i32* %stride1;
    i32 %11 = sub i32 %10, i32 1;
    i1 %12 = scmp lt i32 %9, i32 %11;
    i32 %13 = zext i1 %12 to i32;
    i1 %14 = scmp neq i32 %13, i32 0;
    cbr i1 %14(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32 %15 = load i32* %sum;
    i32 %16 = load i32* %i;
    i64 %17 = sext i32 %16 to i64;
    i32* %18 = load i32** %arr1;
    i32* %19 = getelementptr &(i32* %18)[i64 %17];
    i32 %20 = load i32* %19;
    i32 %21 = add i32 %15, i32 %20;
    store i32* %sum with i32 %21;
    ubr ^b1;
^if.else:
    i32 %22 = load i32* %i;
    i32 %23 = load i32* %stride1;
    i32 %24 = sub i32 %23, i32 1;
    i1 %25 = scmp eq i32 %22, i32 %24;
    i32 %26 = zext i1 %25 to i32;
    i1 %27 = scmp neq i32 %26, i32 0;
    cbr i1 %27(prob = 0.5), ^if.then1, ^if.else1;
^while.header1:
    i32 %28 = load i32* %i;
    i32 %29 = load i32* @n;
    i1 %30 = scmp lt i32 %28, i32 %29;
    i32 %31 = zext i1 %30 to i32;
    i1 %32 = scmp neq i32 %31, i32 0;
    cbr i1 %32(prob = 0.97), ^while.body1, ^b2;
^b1:
    i32 %33 = load i32* %i;
    i32 %34 = add i32 %33, i32 1;
    store i32* %i with i32 %34;
    ubr ^while.header;
^if.then1:
    i32* %35 = load i32** %arr1;
    i32* %36 = getelementptr &(i32* %35)[i64 0];
    i32 %37 = load i32* %36;
    store i32* %lastnum with i32 %37;
    i32* %38 = load i32** %arr1;
    i32* %39 = getelementptr &(i32* %38)[i64 0];
    i32 %40 = load i32* %sum;
    i32 %41 = load i32* %stride1;
    i32 %42 = sdiv i32 %40, i32 %41;
    store i32* %39 with i32 %42;
    ubr ^b3;
^while.body1:
    i32 %43 = load i32* %i;
    i64 %44 = sext i32 %43 to i64;
    i32* %45 = load i32** %arr1;
    i32* %46 = getelementptr &(i32* %45)[i64 %44];
    store i32* %46 with i32 0;
    i32 %47 = load i32* %i;
    i32 %48 = add i32 %47, i32 1;
    store i32* %i with i32 %48;
    ubr ^while.header1;
^if.else1:
    i32 %49 = load i32* %sum;
    i32 %50 = load i32* %i;
    i64 %51 = sext i32 %50 to i64;
    i32* %52 = load i32** %arr1;
    i32* %53 = getelementptr &(i32* %52)[i64 %51];
    i32 %54 = load i32* %53;
    i32 %55 = add i32 %49, i32 %54;
    i32 %56 = load i32* %lastnum;
    i32 %57 = sub i32 %55, i32 %56;
    store i32* %sum with i32 %57;
    i32 %58 = load i32* %i;
    i32 %59 = load i32* %stride1;
    i32 %60 = sub i32 %58, i32 %59;
    i32 %61 = add i32 %60, i32 1;
    i64 %62 = sext i32 %61 to i64;
    i32* %63 = load i32** %arr1;
    i32* %64 = getelementptr &(i32* %63)[i64 %62];
    i32 %65 = load i32* %64;
    store i32* %lastnum with i32 %65;
    i32 %66 = load i32* %i;
    i32 %67 = load i32* %stride1;
    i32 %68 = sub i32 %66, i32 %67;
    i32 %69 = add i32 %68, i32 1;
    i64 %70 = sext i32 %69 to i64;
    i32* %71 = load i32** %arr1;
    i32* %72 = getelementptr &(i32* %71)[i64 %70];
    i32 %73 = load i32* %sum;
    i32 %74 = load i32* %stride1;
    i32 %75 = sdiv i32 %73, i32 %74;
    store i32* %72 with i32 %75;
    ubr ^b3;
^b2:
    ret i32 0;
^b3:
    ubr ^b1;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %i = alloc i32;
    i32* %t = alloc i32;
    [32 * i32]* %result = alloc [32 * i32];
    [32 * i32]* %arr = alloc [32 * i32];
    store i32* @n with i32 32;
    i32* %0 = getelementptr &([32 * i32]* %arr)[i64 0][i64 0];
    store i32* %0 with i32 7;
    i32* %1 = getelementptr &([32 * i32]* %arr)[i64 0][i64 1];
    store i32* %1 with i32 23;
    i32* %2 = getelementptr &([32 * i32]* %arr)[i64 0][i64 2];
    store i32* %2 with i32 89;
    i32* %3 = getelementptr &([32 * i32]* %arr)[i64 0][i64 3];
    store i32* %3 with i32 26;
    i32* %4 = getelementptr &([32 * i32]* %arr)[i64 0][i64 4];
    store i32* %4 with i32 282;
    i32* %5 = getelementptr &([32 * i32]* %arr)[i64 0][i64 5];
    store i32* %5 with i32 254;
    i32* %6 = getelementptr &([32 * i32]* %arr)[i64 0][i64 6];
    store i32* %6 with i32 27;
    i32* %7 = getelementptr &([32 * i32]* %arr)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([32 * i32]* %arr)[i64 0][i64 8];
    store i32* %8 with i32 83;
    i32* %9 = getelementptr &([32 * i32]* %arr)[i64 0][i64 9];
    store i32* %9 with i32 273;
    i32* %10 = getelementptr &([32 * i32]* %arr)[i64 0][i64 10];
    store i32* %10 with i32 574;
    i32* %11 = getelementptr &([32 * i32]* %arr)[i64 0][i64 11];
    store i32* %11 with i32 905;
    i32* %12 = getelementptr &([32 * i32]* %arr)[i64 0][i64 12];
    store i32* %12 with i32 354;
    i32* %13 = getelementptr &([32 * i32]* %arr)[i64 0][i64 13];
    store i32* %13 with i32 657;
    i32* %14 = getelementptr &([32 * i32]* %arr)[i64 0][i64 14];
    store i32* %14 with i32 935;
    i32* %15 = getelementptr &([32 * i32]* %arr)[i64 0][i64 15];
    store i32* %15 with i32 264;
    i32* %16 = getelementptr &([32 * i32]* %arr)[i64 0][i64 16];
    store i32* %16 with i32 639;
    i32* %17 = getelementptr &([32 * i32]* %arr)[i64 0][i64 17];
    store i32* %17 with i32 459;
    i32* %18 = getelementptr &([32 * i32]* %arr)[i64 0][i64 18];
    store i32* %18 with i32 29;
    i32* %19 = getelementptr &([32 * i32]* %arr)[i64 0][i64 19];
    store i32* %19 with i32 68;
    i32* %20 = getelementptr &([32 * i32]* %arr)[i64 0][i64 20];
    store i32* %20 with i32 929;
    i32* %21 = getelementptr &([32 * i32]* %arr)[i64 0][i64 21];
    store i32* %21 with i32 756;
    i32* %22 = getelementptr &([32 * i32]* %arr)[i64 0][i64 22];
    store i32* %22 with i32 452;
    i32* %23 = getelementptr &([32 * i32]* %arr)[i64 0][i64 23];
    store i32* %23 with i32 279;
    i32* %24 = getelementptr &([32 * i32]* %arr)[i64 0][i64 24];
    store i32* %24 with i32 58;
    i32* %25 = getelementptr &([32 * i32]* %arr)[i64 0][i64 25];
    store i32* %25 with i32 87;
    i32* %26 = getelementptr &([32 * i32]* %arr)[i64 0][i64 26];
    store i32* %26 with i32 96;
    i32* %27 = getelementptr &([32 * i32]* %arr)[i64 0][i64 27];
    store i32* %27 with i32 36;
    i32* %28 = getelementptr &([32 * i32]* %arr)[i64 0][i64 28];
    store i32* %28 with i32 39;
    i32* %29 = getelementptr &([32 * i32]* %arr)[i64 0][i64 29];
    store i32* %29 with i32 28;
    i32* %30 = getelementptr &([32 * i32]* %arr)[i64 0][i64 30];
    store i32* %30 with i32 1;
    i32* %31 = getelementptr &([32 * i32]* %arr)[i64 0][i64 31];
    store i32* %31 with i32 290;
    store i32* %t with i32 0;
    i32* %32 = getelementptr &([32 * i32]* %arr)[i64 0][i64 0];
    i32* %33 = getelementptr &([32 * i32]* %result)[i64 0][i64 0];
    i32 %34 = call (i32*, i32*) -> i32 @arrCopy(i32* %32, i32* %33);
    store i32* %t with i32 %34;
    i32* %35 = getelementptr &([32 * i32]* %result)[i64 0][i64 0];
    i32 %36 = call (i32*) -> i32 @revert(i32* %35);
    store i32* %t with i32 %36;
    store i32* %i with i32 0;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %37 = load i32* %i;
    i1 %38 = scmp lt i32 %37, i32 32;
    i32 %39 = zext i1 %38 to i32;
    i1 %40 = scmp neq i32 %39, i32 0;
    cbr i1 %40(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %41 = load i32* %i;
    i64 %42 = sext i32 %41 to i64;
    i32* %43 = getelementptr &([32 * i32]* %result)[i64 0][i64 %42];
    i32 %44 = load i32* %43;
    store i32* %t with i32 %44;
    i32 %45 = load i32* %t;
    call (i32) -> void @putint(i32 %45);
    i32 %46 = load i32* %i;
    i32 %47 = add i32 %46, i32 1;
    store i32* %i with i32 %47;
    ubr ^while.header;
^b:
    i32* %48 = getelementptr &([32 * i32]* %result)[i64 0][i64 0];
    i32 %49 = call (i32*) -> i32 @bubblesort(i32* %48);
    store i32* %t with i32 %49;
    store i32* %i with i32 0;
    ubr ^while.header1;
^while.header1:
    i32 %50 = load i32* %i;
    i1 %51 = scmp lt i32 %50, i32 32;
    i32 %52 = zext i1 %51 to i32;
    i1 %53 = scmp neq i32 %52, i32 0;
    cbr i1 %53(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %54 = load i32* %i;
    i64 %55 = sext i32 %54 to i64;
    i32* %56 = getelementptr &([32 * i32]* %result)[i64 0][i64 %55];
    i32 %57 = load i32* %56;
    store i32* %t with i32 %57;
    i32 %58 = load i32* %t;
    call (i32) -> void @putint(i32 %58);
    i32 %59 = load i32* %i;
    i32 %60 = add i32 %59, i32 1;
    store i32* %i with i32 %60;
    ubr ^while.header1;
^b1:
    i32* %61 = getelementptr &([32 * i32]* %result)[i64 0][i64 0];
    i32 %62 = call (i32*) -> i32 @getMid(i32* %61);
    store i32* %t with i32 %62;
    i32 %63 = load i32* %t;
    call (i32) -> void @putint(i32 %63);
    i32* %64 = getelementptr &([32 * i32]* %result)[i64 0][i64 0];
    i32 %65 = call (i32*) -> i32 @getMost(i32* %64);
    store i32* %t with i32 %65;
    i32 %66 = load i32* %t;
    call (i32) -> void @putint(i32 %66);
    i32* %67 = getelementptr &([32 * i32]* %arr)[i64 0][i64 0];
    i32* %68 = getelementptr &([32 * i32]* %result)[i64 0][i64 0];
    i32 %69 = call (i32*, i32*) -> i32 @arrCopy(i32* %67, i32* %68);
    store i32* %t with i32 %69;
    i32* %70 = getelementptr &([32 * i32]* %result)[i64 0][i64 0];
    i32 %71 = call (i32*) -> i32 @bubblesort(i32* %70);
    store i32* %t with i32 %71;
    store i32* %i with i32 0;
    ubr ^while.header2;
^while.header2:
    i32 %72 = load i32* %i;
    i1 %73 = scmp lt i32 %72, i32 32;
    i32 %74 = zext i1 %73 to i32;
    i1 %75 = scmp neq i32 %74, i32 0;
    cbr i1 %75(prob = 0.97), ^while.body2, ^b2;
^while.body2:
    i32 %76 = load i32* %i;
    i64 %77 = sext i32 %76 to i64;
    i32* %78 = getelementptr &([32 * i32]* %result)[i64 0][i64 %77];
    i32 %79 = load i32* %78;
    store i32* %t with i32 %79;
    i32 %80 = load i32* %t;
    call (i32) -> void @putint(i32 %80);
    i32 %81 = load i32* %i;
    i32 %82 = add i32 %81, i32 1;
    store i32* %i with i32 %82;
    ubr ^while.header2;
^b2:
    i32* %83 = getelementptr &([32 * i32]* %arr)[i64 0][i64 0];
    i32* %84 = getelementptr &([32 * i32]* %result)[i64 0][i64 0];
    i32 %85 = call (i32*, i32*) -> i32 @arrCopy(i32* %83, i32* %84);
    store i32* %t with i32 %85;
    i32* %86 = getelementptr &([32 * i32]* %result)[i64 0][i64 0];
    i32 %87 = call (i32*) -> i32 @insertsort(i32* %86);
    store i32* %t with i32 %87;
    store i32* %i with i32 0;
    ubr ^while.header3;
^while.header3:
    i32 %88 = load i32* %i;
    i1 %89 = scmp lt i32 %88, i32 32;
    i32 %90 = zext i1 %89 to i32;
    i1 %91 = scmp neq i32 %90, i32 0;
    cbr i1 %91(prob = 0.97), ^while.body3, ^b3;
^while.body3:
    i32 %92 = load i32* %i;
    i64 %93 = sext i32 %92 to i64;
    i32* %94 = getelementptr &([32 * i32]* %result)[i64 0][i64 %93];
    i32 %95 = load i32* %94;
    store i32* %t with i32 %95;
    i32 %96 = load i32* %t;
    call (i32) -> void @putint(i32 %96);
    i32 %97 = load i32* %i;
    i32 %98 = add i32 %97, i32 1;
    store i32* %i with i32 %98;
    ubr ^while.header3;
^b3:
    i32* %99 = getelementptr &([32 * i32]* %arr)[i64 0][i64 0];
    i32* %100 = getelementptr &([32 * i32]* %result)[i64 0][i64 0];
    i32 %101 = call (i32*, i32*) -> i32 @arrCopy(i32* %99, i32* %100);
    store i32* %t with i32 %101;
    store i32* %i with i32 0;
    store i32* %t with i32 31;
    i32* %102 = getelementptr &([32 * i32]* %result)[i64 0][i64 0];
    i32 %103 = load i32* %i;
    i32 %104 = load i32* %t;
    i32 %105 = call (i32*, i32, i32) -> i32 @QuickSort(i32* %102, i32 %103, i32 %104);
    store i32* %t with i32 %105;
    ubr ^while.header4;
^while.header4:
    i32 %106 = load i32* %i;
    i1 %107 = scmp lt i32 %106, i32 32;
    i32 %108 = zext i1 %107 to i32;
    i1 %109 = scmp neq i32 %108, i32 0;
    cbr i1 %109(prob = 0.97), ^while.body4, ^b4;
^while.body4:
    i32 %110 = load i32* %i;
    i64 %111 = sext i32 %110 to i64;
    i32* %112 = getelementptr &([32 * i32]* %result)[i64 0][i64 %111];
    i32 %113 = load i32* %112;
    store i32* %t with i32 %113;
    i32 %114 = load i32* %t;
    call (i32) -> void @putint(i32 %114);
    i32 %115 = load i32* %i;
    i32 %116 = add i32 %115, i32 1;
    store i32* %i with i32 %116;
    ubr ^while.header4;
^b4:
    i32* %117 = getelementptr &([32 * i32]* %arr)[i64 0][i64 0];
    i32* %118 = getelementptr &([32 * i32]* %result)[i64 0][i64 0];
    i32 %119 = call (i32*, i32*) -> i32 @arrCopy(i32* %117, i32* %118);
    store i32* %t with i32 %119;
    i32* %120 = getelementptr &([32 * i32]* %result)[i64 0][i64 0];
    i32 %121 = call (i32*, i32) -> i32 @calSum(i32* %120, i32 4);
    store i32* %t with i32 %121;
    store i32* %i with i32 0;
    ubr ^while.header5;
^while.header5:
    i32 %122 = load i32* %i;
    i1 %123 = scmp lt i32 %122, i32 32;
    i32 %124 = zext i1 %123 to i32;
    i1 %125 = scmp neq i32 %124, i32 0;
    cbr i1 %125(prob = 0.97), ^while.body5, ^b5;
^while.body5:
    i32 %126 = load i32* %i;
    i64 %127 = sext i32 %126 to i64;
    i32* %128 = getelementptr &([32 * i32]* %result)[i64 0][i64 %127];
    i32 %129 = load i32* %128;
    store i32* %t with i32 %129;
    i32 %130 = load i32* %t;
    call (i32) -> void @putint(i32 %130);
    i32 %131 = load i32* %i;
    i32 %132 = add i32 %131, i32 1;
    store i32* %i with i32 %132;
    ubr ^while.header5;
^b5:
    i32* %133 = getelementptr &([32 * i32]* %arr)[i64 0][i64 0];
    i32* %134 = getelementptr &([32 * i32]* %result)[i64 0][i64 0];
    i32 %135 = call (i32*, i32*) -> i32 @arrCopy(i32* %133, i32* %134);
    store i32* %t with i32 %135;
    i32* %136 = getelementptr &([32 * i32]* %result)[i64 0][i64 0];
    i32 %137 = call (i32*, i32) -> i32 @avgPooling(i32* %136, i32 3);
    store i32* %t with i32 %137;
    store i32* %i with i32 0;
    ubr ^while.header6;
^while.header6:
    i32 %138 = load i32* %i;
    i1 %139 = scmp lt i32 %138, i32 32;
    i32 %140 = zext i1 %139 to i32;
    i1 %141 = scmp neq i32 %140, i32 0;
    cbr i1 %141(prob = 0.97), ^while.body6, ^b6;
^while.body6:
    i32 %142 = load i32* %i;
    i64 %143 = sext i32 %142 to i64;
    i32* %144 = getelementptr &([32 * i32]* %result)[i64 0][i64 %143];
    i32 %145 = load i32* %144;
    store i32* %t with i32 %145;
    i32 %146 = load i32* %t;
    call (i32) -> void @putint(i32 %146);
    i32 %147 = load i32* %i;
    i32 %148 = add i32 %147, i32 1;
    store i32* %i with i32 %148;
    ubr ^while.header6;
^b6:
    ret i32 0;
}
