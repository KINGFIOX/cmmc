internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @QuickSort(i32* %arr, i32 %low, i32 %high) -> void {
  ^0:
    ubr ^entry;
  ^entry:
    i32 %1 = phi [^0, i32 %low] [^b1, i32 %11];
    i1 %2 = icmp sgt i32 %high, i32 %1;
    cbr i1 %2(prob = 0.5), ^if.then, ^b;
  ^if.then:
    i32* %3 = getelementptr &(i32* %arr)[i32 %1];
    i32 %4 = load i32* %3;
    i32 %5 = add i32 %4, i32 -1;
    ubr ^while.header;
  ^b:
    ret;
  ^while.header:
    i32 %6 = phi [^if.then, i32 %high] [^b7, i32 %12] [^if.then2, i32 %33];
    i32 %7 = phi [^if.then, i32 %1] [^b7, i32 %23] [^if.then2, i32 %23];
    i1 %8 = icmp sgt i32 %6, i32 %7;
    cbr i1 %8(prob = 0.97), ^while.header1, ^b1;
  ^b1:
    i32* %9 = getelementptr &(i32* %arr)[i32 %7];
    store i32* %9 with i32 %4;
    i32 %10 = add i32 %7, i32 -1;
    call (i32*, i32, i32) -> void @QuickSort(i32* %arr, i32 %1, i32 %10);
    i32 %11 = add i32 %7, i32 1;
    ubr ^entry;
  ^while.header1:
    i32 %12 = phi [^while.header, i32 %6] [^while.body, i32 %18];
    i1 %13 = icmp slt i32 %7, i32 %12;
    cbr i1 %13(prob = 0.5), ^b2, ^b3;
  ^b2:
    i32* %14 = getelementptr &(i32* %arr)[i32 %12];
    i32 %15 = load i32* %14;
    i1 %16 = icmp slt i32 %5, i32 %15;
    ubr ^b3;
  ^b3:
    i1 %17 = phi [^while.header1, i1 false] [^b2, i1 %16];
    cbr i1 %17(prob = 0.97), ^while.body, ^b4;
  ^while.body:
    i32 %18 = add i32 %12, i32 -1;
    ubr ^while.header1;
  ^b4:
    cbr i1 %13(prob = 0.5), ^if.then1, ^while.header2;
  ^if.then1:
    i32* %19 = getelementptr &(i32* %arr)[i32 %12];
    i32 %20 = load i32* %19;
    i32* %21 = getelementptr &(i32* %arr)[i32 %7];
    store i32* %21 with i32 %20;
    i32 %22 = add i32 %7, i32 1;
    ubr ^while.header2;
  ^while.header2:
    i32 %23 = phi [^b4, i32 %7] [^if.then1, i32 %22] [^while.body1, i32 %29];
    i1 %24 = icmp sgt i32 %12, i32 %23;
    cbr i1 %24(prob = 0.5), ^b5, ^b6;
  ^b5:
    i32* %25 = getelementptr &(i32* %arr)[i32 %23];
    i32 %26 = load i32* %25;
    i1 %27 = icmp sgt i32 %4, i32 %26;
    ubr ^b6;
  ^b6:
    i1 %28 = phi [^while.header2, i1 false] [^b5, i1 %27];
    cbr i1 %28(prob = 0.97), ^while.body1, ^b7;
  ^while.body1:
    i32 %29 = add i32 %23, i32 1;
    ubr ^while.header2;
  ^b7:
    cbr i1 %24(prob = 0.5), ^if.then2, ^while.header;
  ^if.then2:
    i32* %30 = getelementptr &(i32* %arr)[i32 %23];
    i32 %31 = load i32* %30;
    i32* %32 = getelementptr &(i32* %arr)[i32 %12];
    store i32* %32 with i32 %31;
    i32 %33 = add i32 %12, i32 -1;
    ubr ^while.header;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [32 * i32]* %result = alloc [32 * i32];
    [32 * i32]* %arr = alloc [32 * i32];
    i32* %0 = getelementptr &([32 * i32]* %arr)[i64 0][i64 0];
    store i32* %0 with i32 7;
    i32* %1 = getelementptr &([32 * i32]* %arr)[i64 0][i64 1];
    store i32* %1 with i32 23;
    i32* %2 = getelementptr &([32 * i32]* %arr)[i64 0][i64 2];
    store i32* %2 with i32 89;
    i32* %3 = getelementptr &([32 * i32]* %arr)[i64 0][i64 3];
    store i32* %3 with i32 26;
    i32* %4 = getelementptr &([32 * i32]* %arr)[i64 0][i64 4];
    store i32* %4 with i32 282;
    i32* %5 = getelementptr &([32 * i32]* %arr)[i64 0][i64 5];
    store i32* %5 with i32 254;
    i32* %6 = getelementptr &([32 * i32]* %arr)[i64 0][i64 6];
    store i32* %6 with i32 27;
    i32* %7 = getelementptr &([32 * i32]* %arr)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([32 * i32]* %arr)[i64 0][i64 8];
    store i32* %8 with i32 83;
    i32* %9 = getelementptr &([32 * i32]* %arr)[i64 0][i64 9];
    store i32* %9 with i32 273;
    i32* %10 = getelementptr &([32 * i32]* %arr)[i64 0][i64 10];
    store i32* %10 with i32 574;
    i32* %11 = getelementptr &([32 * i32]* %arr)[i64 0][i64 11];
    store i32* %11 with i32 905;
    i32* %12 = getelementptr &([32 * i32]* %arr)[i64 0][i64 12];
    store i32* %12 with i32 354;
    i32* %13 = getelementptr &([32 * i32]* %arr)[i64 0][i64 13];
    store i32* %13 with i32 657;
    i32* %14 = getelementptr &([32 * i32]* %arr)[i64 0][i64 14];
    store i32* %14 with i32 935;
    i32* %15 = getelementptr &([32 * i32]* %arr)[i64 0][i64 15];
    store i32* %15 with i32 264;
    i32* %16 = getelementptr &([32 * i32]* %arr)[i64 0][i64 16];
    store i32* %16 with i32 639;
    i32* %17 = getelementptr &([32 * i32]* %arr)[i64 0][i64 17];
    store i32* %17 with i32 459;
    i32* %18 = getelementptr &([32 * i32]* %arr)[i64 0][i64 18];
    store i32* %18 with i32 29;
    i32* %19 = getelementptr &([32 * i32]* %arr)[i64 0][i64 19];
    store i32* %19 with i32 68;
    i32* %20 = getelementptr &([32 * i32]* %arr)[i64 0][i64 20];
    store i32* %20 with i32 929;
    i32* %21 = getelementptr &([32 * i32]* %arr)[i64 0][i64 21];
    store i32* %21 with i32 756;
    i32* %22 = getelementptr &([32 * i32]* %arr)[i64 0][i64 22];
    store i32* %22 with i32 452;
    i32* %23 = getelementptr &([32 * i32]* %arr)[i64 0][i64 23];
    store i32* %23 with i32 279;
    i32* %24 = getelementptr &([32 * i32]* %arr)[i64 0][i64 24];
    store i32* %24 with i32 58;
    i32* %25 = getelementptr &([32 * i32]* %arr)[i64 0][i64 25];
    store i32* %25 with i32 87;
    i32* %26 = getelementptr &([32 * i32]* %arr)[i64 0][i64 26];
    store i32* %26 with i32 96;
    i32* %27 = getelementptr &([32 * i32]* %arr)[i64 0][i64 27];
    store i32* %27 with i32 36;
    i32* %28 = getelementptr &([32 * i32]* %arr)[i64 0][i64 28];
    store i32* %28 with i32 39;
    i32* %29 = getelementptr &([32 * i32]* %arr)[i64 0][i64 29];
    store i32* %29 with i32 28;
    i32* %30 = getelementptr &([32 * i32]* %arr)[i64 0][i64 30];
    store i32* %30 with i32 1;
    i32* %31 = getelementptr &([32 * i32]* %arr)[i64 0][i64 31];
    store i32* %31 with i32 290;
    i32* %32 = getelementptr &([32 * i32]* %result)[i64 0][i64 0];
    store i32* %32 with i32 7;
    i32* %33 = getelementptr &([32 * i32]* %result)[i64 0][i64 1];
    store i32* %33 with i32 23;
    i32* %34 = getelementptr &([32 * i32]* %result)[i64 0][i64 2];
    store i32* %34 with i32 89;
    i32* %35 = getelementptr &([32 * i32]* %result)[i64 0][i64 3];
    store i32* %35 with i32 26;
    i32* %36 = getelementptr &([32 * i32]* %result)[i64 0][i64 4];
    store i32* %36 with i32 282;
    i32* %37 = getelementptr &([32 * i32]* %result)[i64 0][i64 5];
    store i32* %37 with i32 254;
    i32* %38 = getelementptr &([32 * i32]* %result)[i64 0][i64 6];
    store i32* %38 with i32 27;
    i32* %39 = getelementptr &([32 * i32]* %result)[i64 0][i64 7];
    store i32* %39 with i32 5;
    i32* %40 = getelementptr &([32 * i32]* %result)[i64 0][i64 8];
    store i32* %40 with i32 83;
    i32* %41 = getelementptr &([32 * i32]* %result)[i64 0][i64 9];
    store i32* %41 with i32 273;
    i32* %42 = getelementptr &([32 * i32]* %result)[i64 0][i64 10];
    store i32* %42 with i32 574;
    i32* %43 = getelementptr &([32 * i32]* %result)[i64 0][i64 11];
    store i32* %43 with i32 905;
    i32* %44 = getelementptr &([32 * i32]* %result)[i64 0][i64 12];
    store i32* %44 with i32 354;
    i32* %45 = getelementptr &([32 * i32]* %result)[i64 0][i64 13];
    store i32* %45 with i32 657;
    i32* %46 = getelementptr &([32 * i32]* %result)[i64 0][i64 14];
    store i32* %46 with i32 935;
    i32* %47 = getelementptr &([32 * i32]* %result)[i64 0][i64 15];
    store i32* %47 with i32 264;
    i32* %48 = getelementptr &([32 * i32]* %result)[i64 0][i64 16];
    store i32* %48 with i32 639;
    i32* %49 = getelementptr &([32 * i32]* %result)[i64 0][i64 17];
    store i32* %49 with i32 459;
    i32* %50 = getelementptr &([32 * i32]* %result)[i64 0][i64 18];
    store i32* %50 with i32 29;
    i32* %51 = getelementptr &([32 * i32]* %result)[i64 0][i64 19];
    store i32* %51 with i32 68;
    i32* %52 = getelementptr &([32 * i32]* %result)[i64 0][i64 20];
    store i32* %52 with i32 929;
    i32* %53 = getelementptr &([32 * i32]* %result)[i64 0][i64 21];
    store i32* %53 with i32 756;
    i32* %54 = getelementptr &([32 * i32]* %result)[i64 0][i64 22];
    store i32* %54 with i32 452;
    i32* %55 = getelementptr &([32 * i32]* %result)[i64 0][i64 23];
    store i32* %55 with i32 279;
    i32* %56 = getelementptr &([32 * i32]* %result)[i64 0][i64 24];
    store i32* %56 with i32 58;
    i32* %57 = getelementptr &([32 * i32]* %result)[i64 0][i64 25];
    store i32* %57 with i32 87;
    i32* %58 = getelementptr &([32 * i32]* %result)[i64 0][i64 26];
    store i32* %58 with i32 96;
    i32* %59 = getelementptr &([32 * i32]* %result)[i64 0][i64 27];
    store i32* %59 with i32 36;
    i32* %60 = getelementptr &([32 * i32]* %result)[i64 0][i64 28];
    store i32* %60 with i32 39;
    i32* %61 = getelementptr &([32 * i32]* %result)[i64 0][i64 29];
    store i32* %61 with i32 28;
    i32* %62 = getelementptr &([32 * i32]* %result)[i64 0][i64 30];
    store i32* %62 with i32 1;
    i32* %63 = getelementptr &([32 * i32]* %result)[i64 0][i64 31];
    store i32* %63 with i32 290;
    [1000 * i32]* %64 = ptrcast [1000 * i32]* @count to [1000 * i32]*;
    ubr ^while.body;
  ^while.body:
    i32 %65 = phi [^entry, i32 0] [^while.body, i32 %68];
    i32* %66 = getelementptr &([32 * i32]* %result)[i64 0][i32 %65];
    i32 %67 = load i32* %66;
    call (i32) -> void @putint(i32 %67);
    i32 %68 = add i32 %65, i32 1;
    i1 %69 = icmp slt i32 %68, i32 32;
    cbr i1 %69(prob = 0.97), ^while.body, ^while.header;
  ^while.header:
    i32 %70 = phi [^while.body, i32 0] [^b, i32 %81];
    i32 %71 = sub i32 32, i32 %70;
    i32 %72 = add i32 %71, i32 -1;
    i1 %73 = icmp slt i32 %70, i32 31;
    cbr i1 %73(prob = 0.97), ^while.header1, ^while.body1;
  ^while.header1:
    i32 %74 = phi [^while.header, i32 0] [^while.body2, i32 %87] [^if.then1, i32 %87];
    i1 %75 = icmp sgt i32 %72, i32 %74;
    cbr i1 %75(prob = 0.97), ^while.body2, ^b;
  ^while.body1:
    i32 %76 = phi [^while.header, i32 0] [^while.body1, i32 %79];
    i32* %77 = getelementptr &([32 * i32]* %result)[i64 0][i32 %76];
    i32 %78 = load i32* %77;
    call (i32) -> void @putint(i32 %78);
    i32 %79 = add i32 %76, i32 1;
    i1 %80 = icmp slt i32 %79, i32 32;
    cbr i1 %80(prob = 0.97), ^while.body1, ^if.then;
  ^b:
    i32 %81 = add i32 %70, i32 1;
    ubr ^while.header;
  ^while.body2:
    i32* %82 = getelementptr &(i32* %32)[i32 %74];
    i32 %83 = load i32* %82;
    i32* %84 = getelementptr &(i32* %82)[i64 1];
    i32 %85 = load i32* %84;
    i1 %86 = icmp sgt i32 %83, i32 %85;
    i32 %87 = add i32 %74, i32 1;
    cbr i1 %86(prob = 0.5), ^if.then1, ^while.header1;
  ^if.then:
    i32 %88 = load i32* %48;
    i32 %89 = load i32* %47;
    i32 %90 = add i32 %88, i32 %89;
    i32 %91 = sdiv i32 %90, i32 2;
    call (i32) -> void @putint(i32 %91);
    ubr ^while.body3;
  ^if.then1:
    store i32* %84 with i32 %83;
    store i32* %82 with i32 %85;
    ubr ^while.header1;
  ^while.body3:
    i32 %92 = phi [^if.then, i32 0] [^while.body3, i32 %109];
    i32* %93 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %92];
    store i32* %93 with i32 0;
    i32* %94 = getelementptr &(i32* %93)[i64 1];
    store i32* %94 with i32 0;
    i32* %95 = getelementptr &(i32* %93)[i64 2];
    store i32* %95 with i32 0;
    i32* %96 = getelementptr &(i32* %93)[i64 3];
    store i32* %96 with i32 0;
    i32* %97 = getelementptr &(i32* %93)[i64 4];
    store i32* %97 with i32 0;
    i32* %98 = getelementptr &(i32* %93)[i64 5];
    store i32* %98 with i32 0;
    i32* %99 = getelementptr &(i32* %93)[i64 6];
    store i32* %99 with i32 0;
    i32* %100 = getelementptr &(i32* %93)[i64 7];
    store i32* %100 with i32 0;
    i32* %101 = getelementptr &(i32* %93)[i64 8];
    store i32* %101 with i32 0;
    i32* %102 = getelementptr &(i32* %93)[i64 9];
    store i32* %102 with i32 0;
    i32* %103 = getelementptr &(i32* %93)[i64 10];
    store i32* %103 with i32 0;
    i32* %104 = getelementptr &(i32* %93)[i64 11];
    store i32* %104 with i32 0;
    i32* %105 = getelementptr &(i32* %93)[i64 12];
    store i32* %105 with i32 0;
    i32* %106 = getelementptr &(i32* %93)[i64 13];
    store i32* %106 with i32 0;
    i32* %107 = getelementptr &(i32* %93)[i64 14];
    store i32* %107 with i32 0;
    i32* %108 = getelementptr &(i32* %93)[i64 15];
    store i32* %108 with i32 0;
    i32 %109 = add i32 %92, i32 16;
    i1 %110 = icmp slt i32 %109, i32 992;
    cbr i1 %110(prob = 0.98), ^while.body3, ^while.body4;
  ^while.body4:
    i32* %111 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %109];
    store i32* %111 with i32 0;
    i32* %112 = getelementptr &(i32* %111)[i64 1];
    store i32* %112 with i32 0;
    i32* %113 = getelementptr &(i32* %111)[i64 2];
    store i32* %113 with i32 0;
    i32* %114 = getelementptr &(i32* %111)[i64 3];
    store i32* %114 with i32 0;
    i32* %115 = getelementptr &(i32* %111)[i64 4];
    store i32* %115 with i32 0;
    i32* %116 = getelementptr &(i32* %111)[i64 5];
    store i32* %116 with i32 0;
    i32* %117 = getelementptr &(i32* %111)[i64 6];
    store i32* %117 with i32 0;
    i32* %118 = getelementptr &(i32* %111)[i64 7];
    store i32* %118 with i32 0;
    ubr ^super.header;
  ^super.header:
    i32 %119 = phi [^while.body4, i32 0] [^while.body5, i32 %122];
    i32 %120 = phi [^while.body4, i32 0] [^while.body5, i32 %155];
    i32 %121 = phi [^while.body4, i32 0] [^while.body5, i32 %154];
    i32 %122 = add i32 %119, i32 4;
    i1 %123 = icmp slt i32 %122, i32 32;
    cbr i1 %123(prob = 0.89), ^while.body5, ^super.header1;
  ^while.body5:
    i32* %124 = getelementptr &(i32* %32)[i32 %119];
    i32 %125 = load i32* %124;
    i32* %126 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %125];
    i32 %127 = load i32* %126;
    i32 %128 = add i32 %127, i32 1;
    store i32* %126 with i32 %128;
    i32 %129 = smax i32 %120, i32 %128;
    i32* %130 = getelementptr &(i32* %124)[i64 1];
    i32 %131 = load i32* %130;
    i32* %132 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %131];
    i32 %133 = load i32* %132;
    i32 %134 = add i32 %133, i32 1;
    i1 %135 = icmp slt i32 %129, i32 %134;
    i1 %136 = icmp slt i32 %120, i32 %128;
    i32 %137 = select i1 %136 ? i32 %125 : i32 %121;
    i32 %138 = select i1 %135 ? i32 %131 : i32 %137;
    i32 %139 = smax i32 %129, i32 %134;
    store i32* %132 with i32 %134;
    i32* %140 = getelementptr &(i32* %124)[i64 2];
    i32 %141 = load i32* %140;
    i32* %142 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %141];
    i32 %143 = load i32* %142;
    i32 %144 = add i32 %143, i32 1;
    i1 %145 = icmp slt i32 %139, i32 %144;
    i32 %146 = select i1 %145 ? i32 %141 : i32 %138;
    i32 %147 = smax i32 %139, i32 %144;
    store i32* %142 with i32 %144;
    i32* %148 = getelementptr &(i32* %124)[i64 3];
    i32 %149 = load i32* %148;
    i32* %150 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %149];
    i32 %151 = load i32* %150;
    i32 %152 = add i32 %151, i32 1;
    i1 %153 = icmp slt i32 %147, i32 %152;
    i32 %154 = select i1 %153 ? i32 %149 : i32 %146;
    i32 %155 = smax i32 %147, i32 %152;
    store i32* %150 with i32 %152;
    ubr ^super.header;
  ^super.header1:
    i32 %156 = phi [^super.header, i32 %119] [^while.body6, i32 %159];
    i32 %157 = phi [^super.header, i32 %120] [^while.body6, i32 %192];
    i32 %158 = phi [^super.header, i32 %121] [^while.body6, i32 %191];
    i32 %159 = add i32 %156, i32 4;
    i1 %160 = icmp slt i32 %159, i32 32;
    cbr i1 %160(prob = 0.89), ^while.body6, ^super.header2;
  ^while.body6:
    i32* %161 = getelementptr &(i32* %32)[i32 %156];
    i32 %162 = load i32* %161;
    i32* %163 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %162];
    i32 %164 = load i32* %163;
    i32 %165 = add i32 %164, i32 1;
    store i32* %163 with i32 %165;
    i32 %166 = smax i32 %157, i32 %165;
    i32* %167 = getelementptr &(i32* %161)[i64 1];
    i32 %168 = load i32* %167;
    i32* %169 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %168];
    i32 %170 = load i32* %169;
    i32 %171 = add i32 %170, i32 1;
    i1 %172 = icmp slt i32 %166, i32 %171;
    i1 %173 = icmp slt i32 %157, i32 %165;
    i32 %174 = select i1 %173 ? i32 %162 : i32 %158;
    i32 %175 = select i1 %172 ? i32 %168 : i32 %174;
    i32 %176 = smax i32 %166, i32 %171;
    store i32* %169 with i32 %171;
    i32* %177 = getelementptr &(i32* %161)[i64 2];
    i32 %178 = load i32* %177;
    i32* %179 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %178];
    i32 %180 = load i32* %179;
    i32 %181 = add i32 %180, i32 1;
    i1 %182 = icmp slt i32 %176, i32 %181;
    i32 %183 = select i1 %182 ? i32 %178 : i32 %175;
    i32 %184 = smax i32 %176, i32 %181;
    store i32* %179 with i32 %181;
    i32* %185 = getelementptr &(i32* %161)[i64 3];
    i32 %186 = load i32* %185;
    i32* %187 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %186];
    i32 %188 = load i32* %187;
    i32 %189 = add i32 %188, i32 1;
    i1 %190 = icmp slt i32 %184, i32 %189;
    i32 %191 = select i1 %190 ? i32 %186 : i32 %183;
    i32 %192 = smax i32 %184, i32 %189;
    store i32* %187 with i32 %189;
    ubr ^super.header1;
  ^super.header2:
    i32 %193 = phi [^super.header1, i32 %156] [^while.body7, i32 %196];
    i32 %194 = phi [^super.header1, i32 %157] [^while.body7, i32 %229];
    i32 %195 = phi [^super.header1, i32 %158] [^while.body7, i32 %228];
    i32 %196 = add i32 %193, i32 4;
    i1 %197 = icmp slt i32 %196, i32 32;
    cbr i1 %197(prob = 0.89), ^while.body7, ^while.body8;
  ^while.body7:
    i32* %198 = getelementptr &(i32* %32)[i32 %193];
    i32 %199 = load i32* %198;
    i32* %200 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %199];
    i32 %201 = load i32* %200;
    i32 %202 = add i32 %201, i32 1;
    store i32* %200 with i32 %202;
    i32 %203 = smax i32 %194, i32 %202;
    i32* %204 = getelementptr &(i32* %198)[i64 1];
    i32 %205 = load i32* %204;
    i32* %206 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %205];
    i32 %207 = load i32* %206;
    i32 %208 = add i32 %207, i32 1;
    i1 %209 = icmp slt i32 %203, i32 %208;
    i1 %210 = icmp slt i32 %194, i32 %202;
    i32 %211 = select i1 %210 ? i32 %199 : i32 %195;
    i32 %212 = select i1 %209 ? i32 %205 : i32 %211;
    i32 %213 = smax i32 %203, i32 %208;
    store i32* %206 with i32 %208;
    i32* %214 = getelementptr &(i32* %198)[i64 2];
    i32 %215 = load i32* %214;
    i32* %216 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %215];
    i32 %217 = load i32* %216;
    i32 %218 = add i32 %217, i32 1;
    i1 %219 = icmp slt i32 %213, i32 %218;
    i32 %220 = select i1 %219 ? i32 %215 : i32 %212;
    i32 %221 = smax i32 %213, i32 %218;
    store i32* %216 with i32 %218;
    i32* %222 = getelementptr &(i32* %198)[i64 3];
    i32 %223 = load i32* %222;
    i32* %224 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %223];
    i32 %225 = load i32* %224;
    i32 %226 = add i32 %225, i32 1;
    i1 %227 = icmp slt i32 %221, i32 %226;
    i32 %228 = select i1 %227 ? i32 %223 : i32 %220;
    i32 %229 = smax i32 %221, i32 %226;
    store i32* %224 with i32 %226;
    ubr ^super.header2;
  ^while.body8:
    i32 %230 = phi [^super.header2, i32 %193] [^while.body8, i32 %241];
    i32 %231 = phi [^super.header2, i32 %194] [^while.body8, i32 %240];
    i32 %232 = phi [^super.header2, i32 %195] [^while.body8, i32 %239];
    i32* %233 = getelementptr &(i32* %32)[i32 %230];
    i32 %234 = load i32* %233;
    i32* %235 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %234];
    i32 %236 = load i32* %235;
    i32 %237 = add i32 %236, i32 1;
    i1 %238 = icmp slt i32 %231, i32 %237;
    i32 %239 = select i1 %238 ? i32 %234 : i32 %232;
    store i32* %235 with i32 %237;
    i32 %240 = smax i32 %231, i32 %237;
    i32 %241 = add i32 %230, i32 1;
    i1 %242 = icmp slt i32 %241, i32 32;
    cbr i1 %242(prob = 0.97), ^while.body8, ^b1;
  ^b1:
    call (i32) -> void @putint(i32 %239);
    ubr ^super.header3;
  ^super.header3:
    i32 %243 = phi [^b1, i32 0] [^while.body9, i32 %244];
    i32 %244 = add i32 %243, i32 4;
    i1 %245 = icmp slt i32 %244, i32 32;
    cbr i1 %245(prob = 0.89), ^while.body9, ^super.header4;
  ^while.body9:
    i32* %246 = getelementptr &(i32* %0)[i32 %243];
    i32 %247 = load i32* %246;
    i32* %248 = getelementptr &(i32* %32)[i32 %243];
    store i32* %248 with i32 %247;
    i32* %249 = getelementptr &(i32* %246)[i64 1];
    i32 %250 = load i32* %249;
    i32* %251 = getelementptr &(i32* %248)[i64 1];
    store i32* %251 with i32 %250;
    i32* %252 = getelementptr &(i32* %246)[i64 2];
    i32 %253 = load i32* %252;
    i32* %254 = getelementptr &(i32* %248)[i64 2];
    store i32* %254 with i32 %253;
    i32* %255 = getelementptr &(i32* %246)[i64 3];
    i32 %256 = load i32* %255;
    i32* %257 = getelementptr &(i32* %248)[i64 3];
    store i32* %257 with i32 %256;
    ubr ^super.header3;
  ^super.header4:
    i32 %258 = phi [^super.header3, i32 %243] [^while.body10, i32 %259];
    i32 %259 = add i32 %258, i32 4;
    i1 %260 = icmp slt i32 %259, i32 32;
    cbr i1 %260(prob = 0.89), ^while.body10, ^while.body11;
  ^while.body10:
    i32* %261 = getelementptr &(i32* %0)[i32 %258];
    i32 %262 = load i32* %261;
    i32* %263 = getelementptr &(i32* %32)[i32 %258];
    store i32* %263 with i32 %262;
    i32* %264 = getelementptr &(i32* %261)[i64 1];
    i32 %265 = load i32* %264;
    i32* %266 = getelementptr &(i32* %263)[i64 1];
    store i32* %266 with i32 %265;
    i32* %267 = getelementptr &(i32* %261)[i64 2];
    i32 %268 = load i32* %267;
    i32* %269 = getelementptr &(i32* %263)[i64 2];
    store i32* %269 with i32 %268;
    i32* %270 = getelementptr &(i32* %261)[i64 3];
    i32 %271 = load i32* %270;
    i32* %272 = getelementptr &(i32* %263)[i64 3];
    store i32* %272 with i32 %271;
    ubr ^super.header4;
  ^while.body11:
    i32 %273 = phi [^super.header4, i32 %258] [^while.body11, i32 %277];
    i32* %274 = getelementptr &(i32* %0)[i32 %273];
    i32 %275 = load i32* %274;
    i32* %276 = getelementptr &(i32* %32)[i32 %273];
    store i32* %276 with i32 %275;
    i32 %277 = add i32 %273, i32 1;
    i1 %278 = icmp slt i32 %277, i32 32;
    cbr i1 %278(prob = 0.97), ^while.body11, ^while.header2;
  ^while.header2:
    i32 %279 = phi [^while.body11, i32 0] [^b2, i32 %290];
    i32 %280 = sub i32 32, i32 %279;
    i32 %281 = add i32 %280, i32 -1;
    i1 %282 = icmp slt i32 %279, i32 31;
    cbr i1 %282(prob = 0.97), ^while.header3, ^while.body12;
  ^while.header3:
    i32 %283 = phi [^while.header2, i32 0] [^while.body13, i32 %296] [^if.then2, i32 %296];
    i1 %284 = icmp sgt i32 %281, i32 %283;
    cbr i1 %284(prob = 0.97), ^while.body13, ^b2;
  ^while.body12:
    i32 %285 = phi [^while.header2, i32 0] [^while.body12, i32 %288];
    i32* %286 = getelementptr &([32 * i32]* %result)[i64 0][i32 %285];
    i32 %287 = load i32* %286;
    call (i32) -> void @putint(i32 %287);
    i32 %288 = add i32 %285, i32 1;
    i1 %289 = icmp slt i32 %288, i32 32;
    cbr i1 %289(prob = 0.97), ^while.body12, ^super.header5;
  ^b2:
    i32 %290 = add i32 %279, i32 1;
    ubr ^while.header2;
  ^while.body13:
    i32* %291 = getelementptr &(i32* %32)[i32 %283];
    i32 %292 = load i32* %291;
    i32* %293 = getelementptr &(i32* %291)[i64 1];
    i32 %294 = load i32* %293;
    i1 %295 = icmp sgt i32 %292, i32 %294;
    i32 %296 = add i32 %283, i32 1;
    cbr i1 %295(prob = 0.5), ^if.then2, ^while.header3;
  ^super.header5:
    i32 %297 = phi [^while.body12, i32 0] [^while.body14, i32 %298];
    i32 %298 = add i32 %297, i32 4;
    i1 %299 = icmp slt i32 %298, i32 32;
    cbr i1 %299(prob = 0.89), ^while.body14, ^super.header6;
  ^if.then2:
    store i32* %293 with i32 %292;
    store i32* %291 with i32 %294;
    ubr ^while.header3;
  ^while.body14:
    i32* %300 = getelementptr &(i32* %0)[i32 %297];
    i32 %301 = load i32* %300;
    i32* %302 = getelementptr &(i32* %32)[i32 %297];
    store i32* %302 with i32 %301;
    i32* %303 = getelementptr &(i32* %300)[i64 1];
    i32 %304 = load i32* %303;
    i32* %305 = getelementptr &(i32* %302)[i64 1];
    store i32* %305 with i32 %304;
    i32* %306 = getelementptr &(i32* %300)[i64 2];
    i32 %307 = load i32* %306;
    i32* %308 = getelementptr &(i32* %302)[i64 2];
    store i32* %308 with i32 %307;
    i32* %309 = getelementptr &(i32* %300)[i64 3];
    i32 %310 = load i32* %309;
    i32* %311 = getelementptr &(i32* %302)[i64 3];
    store i32* %311 with i32 %310;
    ubr ^super.header5;
  ^super.header6:
    i32 %312 = phi [^super.header5, i32 %297] [^while.body15, i32 %313];
    i32 %313 = add i32 %312, i32 4;
    i1 %314 = icmp slt i32 %313, i32 32;
    cbr i1 %314(prob = 0.89), ^while.body15, ^while.body16;
  ^while.body15:
    i32* %315 = getelementptr &(i32* %0)[i32 %312];
    i32 %316 = load i32* %315;
    i32* %317 = getelementptr &(i32* %32)[i32 %312];
    store i32* %317 with i32 %316;
    i32* %318 = getelementptr &(i32* %315)[i64 1];
    i32 %319 = load i32* %318;
    i32* %320 = getelementptr &(i32* %317)[i64 1];
    store i32* %320 with i32 %319;
    i32* %321 = getelementptr &(i32* %315)[i64 2];
    i32 %322 = load i32* %321;
    i32* %323 = getelementptr &(i32* %317)[i64 2];
    store i32* %323 with i32 %322;
    i32* %324 = getelementptr &(i32* %315)[i64 3];
    i32 %325 = load i32* %324;
    i32* %326 = getelementptr &(i32* %317)[i64 3];
    store i32* %326 with i32 %325;
    ubr ^super.header6;
  ^while.body16:
    i32 %327 = phi [^super.header6, i32 %312] [^while.body16, i32 %331];
    i32* %328 = getelementptr &(i32* %0)[i32 %327];
    i32 %329 = load i32* %328;
    i32* %330 = getelementptr &(i32* %32)[i32 %327];
    store i32* %330 with i32 %329;
    i32 %331 = add i32 %327, i32 1;
    i1 %332 = icmp slt i32 %331, i32 32;
    cbr i1 %332(prob = 0.97), ^while.body16, ^while.header4;
  ^while.header4:
    i32 %333 = phi [^while.body16, i32 1] [^b5, i32 %374];
    i1 %334 = icmp slt i32 %333, i32 32;
    cbr i1 %334(prob = 0.97), ^while.body17, ^while.body18;
  ^while.body17:
    i32* %335 = getelementptr &(i32* %32)[i32 %333];
    i32 %336 = load i32* %335;
    i32 %337 = add i32 %333, i32 -1;
    ubr ^while.header5;
  ^while.body18:
    i32 %338 = phi [^while.header4, i32 0] [^while.body18, i32 %341];
    i32* %339 = getelementptr &([32 * i32]* %result)[i64 0][i32 %338];
    i32 %340 = load i32* %339;
    call (i32) -> void @putint(i32 %340);
    i32 %341 = add i32 %338, i32 1;
    i1 %342 = icmp slt i32 %341, i32 32;
    cbr i1 %342(prob = 0.97), ^while.body18, ^super.header7;
  ^while.header5:
    i32 %343 = phi [^while.body17, i32 %337] [^while.body20, i32 %371];
    i1 %344 = icmp sgt i32 %343, i32 -1;
    cbr i1 %344(prob = 0.5), ^b3, ^b4;
  ^super.header7:
    i32 %345 = phi [^while.body18, i32 0] [^while.body19, i32 %346];
    i32 %346 = add i32 %345, i32 4;
    i1 %347 = icmp slt i32 %346, i32 32;
    cbr i1 %347(prob = 0.89), ^while.body19, ^super.header8;
  ^b3:
    i32* %348 = getelementptr &(i32* %32)[i32 %343];
    i32 %349 = load i32* %348;
    i1 %350 = icmp slt i32 %336, i32 %349;
    ubr ^b4;
  ^while.body19:
    i32* %351 = getelementptr &(i32* %0)[i32 %345];
    i32 %352 = load i32* %351;
    i32* %353 = getelementptr &(i32* %32)[i32 %345];
    store i32* %353 with i32 %352;
    i32* %354 = getelementptr &(i32* %351)[i64 1];
    i32 %355 = load i32* %354;
    i32* %356 = getelementptr &(i32* %353)[i64 1];
    store i32* %356 with i32 %355;
    i32* %357 = getelementptr &(i32* %351)[i64 2];
    i32 %358 = load i32* %357;
    i32* %359 = getelementptr &(i32* %353)[i64 2];
    store i32* %359 with i32 %358;
    i32* %360 = getelementptr &(i32* %351)[i64 3];
    i32 %361 = load i32* %360;
    i32* %362 = getelementptr &(i32* %353)[i64 3];
    store i32* %362 with i32 %361;
    ubr ^super.header7;
  ^b4:
    i1 %363 = phi [^while.header5, i1 false] [^b3, i1 %350];
    cbr i1 %363(prob = 0.97), ^while.body20, ^b5;
  ^super.header8:
    i32 %364 = phi [^super.header7, i32 %345] [^while.body21, i32 %365];
    i32 %365 = add i32 %364, i32 4;
    i1 %366 = icmp slt i32 %365, i32 32;
    cbr i1 %366(prob = 0.89), ^while.body21, ^while.body22;
  ^while.body20:
    i32 %367 = add i32 %343, i32 1;
    i32* %368 = getelementptr &(i32* %32)[i32 %367];
    i32* %369 = getelementptr &(i32* %32)[i32 %343];
    i32 %370 = load i32* %369;
    store i32* %368 with i32 %370;
    i32 %371 = add i32 %343, i32 -1;
    ubr ^while.header5;
  ^b5:
    i32 %372 = add i32 %343, i32 1;
    i32* %373 = getelementptr &(i32* %32)[i32 %372];
    store i32* %373 with i32 %336;
    i32 %374 = add i32 %333, i32 1;
    ubr ^while.header4;
  ^while.body21:
    i32* %375 = getelementptr &(i32* %0)[i32 %364];
    i32 %376 = load i32* %375;
    i32* %377 = getelementptr &(i32* %32)[i32 %364];
    store i32* %377 with i32 %376;
    i32* %378 = getelementptr &(i32* %375)[i64 1];
    i32 %379 = load i32* %378;
    i32* %380 = getelementptr &(i32* %377)[i64 1];
    store i32* %380 with i32 %379;
    i32* %381 = getelementptr &(i32* %375)[i64 2];
    i32 %382 = load i32* %381;
    i32* %383 = getelementptr &(i32* %377)[i64 2];
    store i32* %383 with i32 %382;
    i32* %384 = getelementptr &(i32* %375)[i64 3];
    i32 %385 = load i32* %384;
    i32* %386 = getelementptr &(i32* %377)[i64 3];
    store i32* %386 with i32 %385;
    ubr ^super.header8;
  ^while.body22:
    i32 %387 = phi [^super.header8, i32 %364] [^while.body22, i32 %391];
    i32* %388 = getelementptr &(i32* %0)[i32 %387];
    i32 %389 = load i32* %388;
    i32* %390 = getelementptr &(i32* %32)[i32 %387];
    store i32* %390 with i32 %389;
    i32 %391 = add i32 %387, i32 1;
    i1 %392 = icmp slt i32 %391, i32 32;
    cbr i1 %392(prob = 0.97), ^while.body22, ^b6;
  ^b6:
    call (i32*, i32, i32) -> void @QuickSort(i32* %32, i32 0, i32 31);
    ubr ^while.body23;
  ^while.body23:
    i32 %393 = phi [^b6, i32 0] [^while.body23, i32 %396];
    i32* %394 = getelementptr &([32 * i32]* %result)[i64 0][i32 %393];
    i32 %395 = load i32* %394;
    call (i32) -> void @putint(i32 %395);
    i32 %396 = add i32 %393, i32 1;
    i1 %397 = icmp slt i32 %396, i32 32;
    cbr i1 %397(prob = 0.97), ^while.body23, ^super.header9;
  ^super.header9:
    i32 %398 = phi [^while.body23, i32 0] [^while.body24, i32 %399];
    i32 %399 = add i32 %398, i32 4;
    i1 %400 = icmp slt i32 %399, i32 32;
    cbr i1 %400(prob = 0.89), ^while.body24, ^super.header10;
  ^while.body24:
    i32* %401 = getelementptr &(i32* %0)[i32 %398];
    i32 %402 = load i32* %401;
    i32* %403 = getelementptr &(i32* %32)[i32 %398];
    store i32* %403 with i32 %402;
    i32* %404 = getelementptr &(i32* %401)[i64 1];
    i32 %405 = load i32* %404;
    i32* %406 = getelementptr &(i32* %403)[i64 1];
    store i32* %406 with i32 %405;
    i32* %407 = getelementptr &(i32* %401)[i64 2];
    i32 %408 = load i32* %407;
    i32* %409 = getelementptr &(i32* %403)[i64 2];
    store i32* %409 with i32 %408;
    i32* %410 = getelementptr &(i32* %401)[i64 3];
    i32 %411 = load i32* %410;
    i32* %412 = getelementptr &(i32* %403)[i64 3];
    store i32* %412 with i32 %411;
    ubr ^super.header9;
  ^super.header10:
    i32 %413 = phi [^super.header9, i32 %398] [^while.body25, i32 %414];
    i32 %414 = add i32 %413, i32 4;
    i1 %415 = icmp slt i32 %414, i32 32;
    cbr i1 %415(prob = 0.89), ^while.body25, ^while.body26;
  ^while.body25:
    i32* %416 = getelementptr &(i32* %0)[i32 %413];
    i32 %417 = load i32* %416;
    i32* %418 = getelementptr &(i32* %32)[i32 %413];
    store i32* %418 with i32 %417;
    i32* %419 = getelementptr &(i32* %416)[i64 1];
    i32 %420 = load i32* %419;
    i32* %421 = getelementptr &(i32* %418)[i64 1];
    store i32* %421 with i32 %420;
    i32* %422 = getelementptr &(i32* %416)[i64 2];
    i32 %423 = load i32* %422;
    i32* %424 = getelementptr &(i32* %418)[i64 2];
    store i32* %424 with i32 %423;
    i32* %425 = getelementptr &(i32* %416)[i64 3];
    i32 %426 = load i32* %425;
    i32* %427 = getelementptr &(i32* %418)[i64 3];
    store i32* %427 with i32 %426;
    ubr ^super.header10;
  ^while.body26:
    i32 %428 = phi [^super.header10, i32 %413] [^while.body26, i32 %432];
    i32* %429 = getelementptr &(i32* %0)[i32 %428];
    i32 %430 = load i32* %429;
    i32* %431 = getelementptr &(i32* %32)[i32 %428];
    store i32* %431 with i32 %430;
    i32 %432 = add i32 %428, i32 1;
    i1 %433 = icmp slt i32 %432, i32 32;
    cbr i1 %433(prob = 0.97), ^while.body26, ^while.header6;
  ^while.header6:
    i32 %434 = phi [^while.body26, i32 0] [^if.then3, i32 %439] [^if.else, i32 0];
    i32 %435 = phi [^while.body26, i32 0] [^if.then3, i32 %447] [^if.else, i32 %448];
    i1 %436 = icmp slt i32 %435, i32 32;
    cbr i1 %436(prob = 0.97), ^while.body27, ^while.body28;
  ^while.body27:
    i32* %437 = getelementptr &(i32* %32)[i32 %435];
    i32 %438 = load i32* %437;
    i32 %439 = add i32 %434, i32 %438;
    i32 %440 = srem i32 %435, i32 4;
    i1 %441 = icmp neq i32 %440, i32 3;
    cbr i1 %441(prob = 0.5), ^if.then3, ^if.else;
  ^while.body28:
    i32 %442 = phi [^while.header6, i32 0] [^while.body28, i32 %445];
    i32* %443 = getelementptr &([32 * i32]* %result)[i64 0][i32 %442];
    i32 %444 = load i32* %443;
    call (i32) -> void @putint(i32 %444);
    i32 %445 = add i32 %442, i32 1;
    i1 %446 = icmp slt i32 %445, i32 32;
    cbr i1 %446(prob = 0.97), ^while.body28, ^super.header11;
  ^if.then3:
    store i32* %437 with i32 0;
    i32 %447 = add i32 %435, i32 1;
    ubr ^while.header6;
  ^if.else:
    store i32* %437 with i32 %439;
    i32 %448 = add i32 %435, i32 1;
    ubr ^while.header6;
  ^super.header11:
    i32 %449 = phi [^while.body28, i32 0] [^while.body29, i32 %450];
    i32 %450 = add i32 %449, i32 4;
    i1 %451 = icmp slt i32 %450, i32 32;
    cbr i1 %451(prob = 0.89), ^while.body29, ^super.header12;
  ^while.body29:
    i32* %452 = getelementptr &(i32* %0)[i32 %449];
    i32 %453 = load i32* %452;
    i32* %454 = getelementptr &(i32* %32)[i32 %449];
    store i32* %454 with i32 %453;
    i32* %455 = getelementptr &(i32* %452)[i64 1];
    i32 %456 = load i32* %455;
    i32* %457 = getelementptr &(i32* %454)[i64 1];
    store i32* %457 with i32 %456;
    i32* %458 = getelementptr &(i32* %452)[i64 2];
    i32 %459 = load i32* %458;
    i32* %460 = getelementptr &(i32* %454)[i64 2];
    store i32* %460 with i32 %459;
    i32* %461 = getelementptr &(i32* %452)[i64 3];
    i32 %462 = load i32* %461;
    i32* %463 = getelementptr &(i32* %454)[i64 3];
    store i32* %463 with i32 %462;
    ubr ^super.header11;
  ^super.header12:
    i32 %464 = phi [^super.header11, i32 %449] [^while.body30, i32 %465];
    i32 %465 = add i32 %464, i32 4;
    i1 %466 = icmp slt i32 %465, i32 32;
    cbr i1 %466(prob = 0.89), ^while.body30, ^while.body31;
  ^while.body30:
    i32* %467 = getelementptr &(i32* %0)[i32 %464];
    i32 %468 = load i32* %467;
    i32* %469 = getelementptr &(i32* %32)[i32 %464];
    store i32* %469 with i32 %468;
    i32* %470 = getelementptr &(i32* %467)[i64 1];
    i32 %471 = load i32* %470;
    i32* %472 = getelementptr &(i32* %469)[i64 1];
    store i32* %472 with i32 %471;
    i32* %473 = getelementptr &(i32* %467)[i64 2];
    i32 %474 = load i32* %473;
    i32* %475 = getelementptr &(i32* %469)[i64 2];
    store i32* %475 with i32 %474;
    i32* %476 = getelementptr &(i32* %467)[i64 3];
    i32 %477 = load i32* %476;
    i32* %478 = getelementptr &(i32* %469)[i64 3];
    store i32* %478 with i32 %477;
    ubr ^super.header12;
  ^while.body31:
    i32 %479 = phi [^super.header12, i32 %464] [^while.body31, i32 %483];
    i32* %480 = getelementptr &(i32* %0)[i32 %479];
    i32 %481 = load i32* %480;
    i32* %482 = getelementptr &(i32* %32)[i32 %479];
    store i32* %482 with i32 %481;
    i32 %483 = add i32 %479, i32 1;
    i1 %484 = icmp slt i32 %483, i32 32;
    cbr i1 %484(prob = 0.97), ^while.body31, ^while.header7;
  ^while.header7:
    i32 %485 = phi [^while.body31, i32 0] [^if.then4, i32 %485] [^if.then5, i32 %505] [^if.else2, i32 %518];
    i32 %486 = phi [^while.body31, i32 0] [^if.then4, i32 %495] [^if.then5, i32 %486] [^if.else2, i32 %515];
    i32 %487 = phi [^while.body31, i32 0] [^if.then4, i32 %496] [^if.then5, i32 %507] [^if.else2, i32 %519];
    i1 %488 = icmp slt i32 %487, i32 32;
    cbr i1 %488(prob = 0.97), ^while.body32, ^super.header13;
  ^while.body32:
    i1 %489 = icmp slt i32 %487, i32 2;
    cbr i1 %489(prob = 0.5), ^if.then4, ^if.else1;
  ^super.header13:
    i32 %490 = phi [^while.header7, i32 30] [^while.body33, i32 %491];
    i32 %491 = add i32 %490, i32 4;
    i1 %492 = icmp slt i32 %491, i32 32;
    cbr i1 %492(prob = 0.89), ^while.body33, ^super.header14;
  ^if.then4:
    i32* %493 = getelementptr &(i32* %32)[i32 %487];
    i32 %494 = load i32* %493;
    i32 %495 = add i32 %486, i32 %494;
    i32 %496 = add i32 %487, i32 1;
    ubr ^while.header7;
  ^while.body33:
    i32* %497 = getelementptr &(i32* %32)[i32 %490];
    store i32* %497 with i32 0;
    i32* %498 = getelementptr &(i32* %497)[i64 1];
    store i32* %498 with i32 0;
    i32* %499 = getelementptr &(i32* %497)[i64 2];
    store i32* %499 with i32 0;
    i32* %500 = getelementptr &(i32* %497)[i64 3];
    store i32* %500 with i32 0;
    ubr ^super.header13;
  ^if.else1:
    i1 %501 = icmp eq i32 %487, i32 2;
    cbr i1 %501(prob = 0.5), ^if.then5, ^if.else2;
  ^super.header14:
    i32 %502 = phi [^super.header13, i32 %490] [^while.body34, i32 %503];
    i32 %503 = add i32 %502, i32 4;
    i1 %504 = icmp slt i32 %503, i32 32;
    cbr i1 %504(prob = 0.89), ^while.body34, ^while.body35;
  ^if.then5:
    i32 %505 = load i32* %32;
    i32 %506 = sdiv i32 %486, i32 3;
    store i32* %32 with i32 %506;
    i32 %507 = add i32 %487, i32 1;
    ubr ^while.header7;
  ^while.body34:
    i32* %508 = getelementptr &(i32* %32)[i32 %502];
    store i32* %508 with i32 0;
    i32* %509 = getelementptr &(i32* %508)[i64 1];
    store i32* %509 with i32 0;
    i32* %510 = getelementptr &(i32* %508)[i64 2];
    store i32* %510 with i32 0;
    i32* %511 = getelementptr &(i32* %508)[i64 3];
    store i32* %511 with i32 0;
    ubr ^super.header14;
  ^if.else2:
    i32* %512 = getelementptr &(i32* %32)[i32 %487];
    i32 %513 = load i32* %512;
    i32 %514 = add i32 %486, i32 %513;
    i32 %515 = sub i32 %514, i32 %485;
    i32 %516 = sdiv i32 %515, i32 3;
    i32* %517 = getelementptr &(i32* %512)[i64 -2];
    i32 %518 = load i32* %517;
    store i32* %517 with i32 %516;
    i32 %519 = add i32 %487, i32 1;
    ubr ^while.header7;
  ^while.body35:
    i32 %520 = phi [^super.header14, i32 %502] [^while.body35, i32 %522];
    i32* %521 = getelementptr &(i32* %32)[i32 %520];
    store i32* %521 with i32 0;
    i32 %522 = add i32 %520, i32 1;
    i1 %523 = icmp slt i32 %522, i32 32;
    cbr i1 %523(prob = 0.97), ^while.body35, ^while.body36;
  ^while.body36:
    i32 %524 = phi [^while.body35, i32 0] [^while.body36, i32 %527];
    i32* %525 = getelementptr &([32 * i32]* %result)[i64 0][i32 %524];
    i32 %526 = load i32* %525;
    call (i32) -> void @putint(i32 %526);
    i32 %527 = add i32 %524, i32 1;
    i1 %528 = icmp slt i32 %527, i32 32;
    cbr i1 %528(prob = 0.97), ^while.body36, ^b7;
  ^b7:
    ret i32 0;
}
internal [1000 * i32]* @count;
