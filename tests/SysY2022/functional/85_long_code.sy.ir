internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @QuickSort(i32* %arr, i32 %low, i32 %high) -> i32 {
  ^0:
    ubr ^entry;
  ^entry:
    i32 %1 = phi [^0, i32 %low] [^b1, i32 %12];
    i1 %2 = scmp lt i32 %1, i32 %high;
    cbr i1 %2(prob = 0.5), ^if.then, ^b;
  ^if.then:
    i32* %3 = getelementptr &(i32* %arr)[i32 %1];
    i32 %4 = load i32* %3;
    i32 %5 = add i32 %4, i32 -1;
    ubr ^while.header;
  ^b:
    ret i32 undef;
  ^while.header:
    i32 %6 = phi [^if.then, i32 %high] [^b7, i32 %13] [^if.then2, i32 %34];
    i32 %7 = phi [^if.then, i32 %1] [^b7, i32 %24] [^if.then2, i32 %24];
    i1 %8 = scmp lt i32 %7, i32 %6;
    cbr i1 %8(prob = 0.97), ^while.header1, ^b1;
  ^b1:
    i32* %9 = getelementptr &(i32* %arr)[i32 %7];
    store i32* %9 with i32 %4;
    i32 %10 = add i32 %7, i32 -1;
    i32 %11 = call (i32*, i32, i32) -> i32 @QuickSort(i32* %arr, i32 %1, i32 %10);
    i32 %12 = add i32 %7, i32 1;
    ubr ^entry;
  ^while.header1:
    i32 %13 = phi [^while.header, i32 %6] [^while.body, i32 %19];
    i1 %14 = scmp lt i32 %7, i32 %13;
    cbr i1 %14(prob = 0.5), ^b2, ^b3;
  ^b2:
    i32* %15 = getelementptr &(i32* %arr)[i32 %13];
    i32 %16 = load i32* %15;
    i1 %17 = scmp gt i32 %16, i32 %5;
    ubr ^b3;
  ^b3:
    i1 %18 = phi [^while.header1, i1 false] [^b2, i1 %17];
    cbr i1 %18(prob = 0.97), ^while.body, ^b4;
  ^while.body:
    i32 %19 = add i32 %13, i32 -1;
    ubr ^while.header1;
  ^b4:
    cbr i1 %14(prob = 0.5), ^if.then1, ^while.header2;
  ^if.then1:
    i32* %20 = getelementptr &(i32* %arr)[i32 %13];
    i32 %21 = load i32* %20;
    i32* %22 = getelementptr &(i32* %arr)[i32 %7];
    store i32* %22 with i32 %21;
    i32 %23 = add i32 %7, i32 1;
    ubr ^while.header2;
  ^while.header2:
    i32 %24 = phi [^b4, i32 %7] [^if.then1, i32 %23] [^while.body1, i32 %30];
    i1 %25 = scmp lt i32 %24, i32 %13;
    cbr i1 %25(prob = 0.5), ^b5, ^b6;
  ^b5:
    i32* %26 = getelementptr &(i32* %arr)[i32 %24];
    i32 %27 = load i32* %26;
    i1 %28 = scmp lt i32 %27, i32 %4;
    ubr ^b6;
  ^b6:
    i1 %29 = phi [^while.header2, i1 false] [^b5, i1 %28];
    cbr i1 %29(prob = 0.97), ^while.body1, ^b7;
  ^while.body1:
    i32 %30 = add i32 %24, i32 1;
    ubr ^while.header2;
  ^b7:
    cbr i1 %25(prob = 0.5), ^if.then2, ^while.header;
  ^if.then2:
    i32* %31 = getelementptr &(i32* %arr)[i32 %24];
    i32 %32 = load i32* %31;
    i32* %33 = getelementptr &(i32* %arr)[i32 %13];
    store i32* %33 with i32 %32;
    i32 %34 = add i32 %13, i32 -1;
    ubr ^while.header;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [1000 * i32]* %count = alloc [1000 * i32];
    [32 * i32]* %result = alloc [32 * i32];
    [32 * i32]* %arr = alloc [32 * i32];
    i32* %0 = getelementptr &([32 * i32]* %arr)[i64 0][i64 0];
    store i32* %0 with i32 7;
    i32* %1 = getelementptr &([32 * i32]* %arr)[i64 0][i64 1];
    store i32* %1 with i32 23;
    i32* %2 = getelementptr &([32 * i32]* %arr)[i64 0][i64 2];
    store i32* %2 with i32 89;
    i32* %3 = getelementptr &([32 * i32]* %arr)[i64 0][i64 3];
    store i32* %3 with i32 26;
    i32* %4 = getelementptr &([32 * i32]* %arr)[i64 0][i64 4];
    store i32* %4 with i32 282;
    i32* %5 = getelementptr &([32 * i32]* %arr)[i64 0][i64 5];
    store i32* %5 with i32 254;
    i32* %6 = getelementptr &([32 * i32]* %arr)[i64 0][i64 6];
    store i32* %6 with i32 27;
    i32* %7 = getelementptr &([32 * i32]* %arr)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([32 * i32]* %arr)[i64 0][i64 8];
    store i32* %8 with i32 83;
    i32* %9 = getelementptr &([32 * i32]* %arr)[i64 0][i64 9];
    store i32* %9 with i32 273;
    i32* %10 = getelementptr &([32 * i32]* %arr)[i64 0][i64 10];
    store i32* %10 with i32 574;
    i32* %11 = getelementptr &([32 * i32]* %arr)[i64 0][i64 11];
    store i32* %11 with i32 905;
    i32* %12 = getelementptr &([32 * i32]* %arr)[i64 0][i64 12];
    store i32* %12 with i32 354;
    i32* %13 = getelementptr &([32 * i32]* %arr)[i64 0][i64 13];
    store i32* %13 with i32 657;
    i32* %14 = getelementptr &([32 * i32]* %arr)[i64 0][i64 14];
    store i32* %14 with i32 935;
    i32* %15 = getelementptr &([32 * i32]* %arr)[i64 0][i64 15];
    store i32* %15 with i32 264;
    i32* %16 = getelementptr &([32 * i32]* %arr)[i64 0][i64 16];
    store i32* %16 with i32 639;
    i32* %17 = getelementptr &([32 * i32]* %arr)[i64 0][i64 17];
    store i32* %17 with i32 459;
    i32* %18 = getelementptr &([32 * i32]* %arr)[i64 0][i64 18];
    store i32* %18 with i32 29;
    i32* %19 = getelementptr &([32 * i32]* %arr)[i64 0][i64 19];
    store i32* %19 with i32 68;
    i32* %20 = getelementptr &([32 * i32]* %arr)[i64 0][i64 20];
    store i32* %20 with i32 929;
    i32* %21 = getelementptr &([32 * i32]* %arr)[i64 0][i64 21];
    store i32* %21 with i32 756;
    i32* %22 = getelementptr &([32 * i32]* %arr)[i64 0][i64 22];
    store i32* %22 with i32 452;
    i32* %23 = getelementptr &([32 * i32]* %arr)[i64 0][i64 23];
    store i32* %23 with i32 279;
    i32* %24 = getelementptr &([32 * i32]* %arr)[i64 0][i64 24];
    store i32* %24 with i32 58;
    i32* %25 = getelementptr &([32 * i32]* %arr)[i64 0][i64 25];
    store i32* %25 with i32 87;
    i32* %26 = getelementptr &([32 * i32]* %arr)[i64 0][i64 26];
    store i32* %26 with i32 96;
    i32* %27 = getelementptr &([32 * i32]* %arr)[i64 0][i64 27];
    store i32* %27 with i32 36;
    i32* %28 = getelementptr &([32 * i32]* %arr)[i64 0][i64 28];
    store i32* %28 with i32 39;
    i32* %29 = getelementptr &([32 * i32]* %arr)[i64 0][i64 29];
    store i32* %29 with i32 28;
    i32* %30 = getelementptr &([32 * i32]* %arr)[i64 0][i64 30];
    store i32* %30 with i32 1;
    i32* %31 = getelementptr &([32 * i32]* %arr)[i64 0][i64 31];
    store i32* %31 with i32 290;
    i32* %32 = getelementptr &([32 * i32]* %result)[i64 0][i64 0];
    store i32* %32 with i32 7;
    i32* %33 = getelementptr &([32 * i32]* %result)[i64 0][i64 1];
    store i32* %33 with i32 23;
    i32* %34 = getelementptr &([32 * i32]* %result)[i64 0][i64 2];
    store i32* %34 with i32 89;
    i32* %35 = getelementptr &([32 * i32]* %result)[i64 0][i64 3];
    store i32* %35 with i32 26;
    i32* %36 = getelementptr &([32 * i32]* %result)[i64 0][i64 4];
    store i32* %36 with i32 282;
    i32* %37 = getelementptr &([32 * i32]* %result)[i64 0][i64 5];
    store i32* %37 with i32 254;
    i32* %38 = getelementptr &([32 * i32]* %result)[i64 0][i64 6];
    store i32* %38 with i32 27;
    i32* %39 = getelementptr &([32 * i32]* %result)[i64 0][i64 7];
    store i32* %39 with i32 5;
    i32* %40 = getelementptr &([32 * i32]* %result)[i64 0][i64 8];
    store i32* %40 with i32 83;
    i32* %41 = getelementptr &([32 * i32]* %result)[i64 0][i64 9];
    store i32* %41 with i32 273;
    i32* %42 = getelementptr &([32 * i32]* %result)[i64 0][i64 10];
    store i32* %42 with i32 574;
    i32* %43 = getelementptr &([32 * i32]* %result)[i64 0][i64 11];
    store i32* %43 with i32 905;
    i32* %44 = getelementptr &([32 * i32]* %result)[i64 0][i64 12];
    store i32* %44 with i32 354;
    i32* %45 = getelementptr &([32 * i32]* %result)[i64 0][i64 13];
    store i32* %45 with i32 657;
    i32* %46 = getelementptr &([32 * i32]* %result)[i64 0][i64 14];
    store i32* %46 with i32 935;
    i32* %47 = getelementptr &([32 * i32]* %result)[i64 0][i64 15];
    store i32* %47 with i32 264;
    i32* %48 = getelementptr &([32 * i32]* %result)[i64 0][i64 16];
    store i32* %48 with i32 639;
    i32* %49 = getelementptr &([32 * i32]* %result)[i64 0][i64 17];
    store i32* %49 with i32 459;
    i32* %50 = getelementptr &([32 * i32]* %result)[i64 0][i64 18];
    store i32* %50 with i32 29;
    i32* %51 = getelementptr &([32 * i32]* %result)[i64 0][i64 19];
    store i32* %51 with i32 68;
    i32* %52 = getelementptr &([32 * i32]* %result)[i64 0][i64 20];
    store i32* %52 with i32 929;
    i32* %53 = getelementptr &([32 * i32]* %result)[i64 0][i64 21];
    store i32* %53 with i32 756;
    i32* %54 = getelementptr &([32 * i32]* %result)[i64 0][i64 22];
    store i32* %54 with i32 452;
    i32* %55 = getelementptr &([32 * i32]* %result)[i64 0][i64 23];
    store i32* %55 with i32 279;
    i32* %56 = getelementptr &([32 * i32]* %result)[i64 0][i64 24];
    store i32* %56 with i32 58;
    i32* %57 = getelementptr &([32 * i32]* %result)[i64 0][i64 25];
    store i32* %57 with i32 87;
    i32* %58 = getelementptr &([32 * i32]* %result)[i64 0][i64 26];
    store i32* %58 with i32 96;
    i32* %59 = getelementptr &([32 * i32]* %result)[i64 0][i64 27];
    store i32* %59 with i32 36;
    i32* %60 = getelementptr &([32 * i32]* %result)[i64 0][i64 28];
    store i32* %60 with i32 39;
    i32* %61 = getelementptr &([32 * i32]* %result)[i64 0][i64 29];
    store i32* %61 with i32 28;
    i32* %62 = getelementptr &([32 * i32]* %result)[i64 0][i64 30];
    store i32* %62 with i32 1;
    i32* %63 = getelementptr &([32 * i32]* %result)[i64 0][i64 31];
    store i32* %63 with i32 290;
    ubr ^while.body;
  ^while.body:
    i32 %64 = phi [^entry, i32 0] [^while.body, i32 %67];
    i32* %65 = getelementptr &([32 * i32]* %result)[i64 0][i32 %64];
    i32 %66 = load i32* %65;
    call (i32) -> void @putint(i32 %66);
    i32 %67 = add i32 %64, i32 1;
    i1 %68 = scmp lt i32 %67, i32 32;
    cbr i1 %68(prob = 0.97), ^while.body, ^while.header;
  ^while.header:
    i32 %69 = phi [^while.body, i32 0] [^b, i32 %80];
    i32 %70 = sub i32 32, i32 %69;
    i32 %71 = add i32 %70, i32 -1;
    i1 %72 = scmp lt i32 %69, i32 31;
    cbr i1 %72(prob = 0.97), ^while.header1, ^while.body1;
  ^while.header1:
    i32 %73 = phi [^while.header, i32 0] [^b1, i32 %93];
    i1 %74 = scmp lt i32 %73, i32 %71;
    cbr i1 %74(prob = 0.97), ^while.body2, ^b;
  ^while.body1:
    i32 %75 = phi [^while.header, i32 0] [^while.body1, i32 %78];
    i32* %76 = getelementptr &([32 * i32]* %result)[i64 0][i32 %75];
    i32 %77 = load i32* %76;
    call (i32) -> void @putint(i32 %77);
    i32 %78 = add i32 %75, i32 1;
    i1 %79 = scmp lt i32 %78, i32 32;
    cbr i1 %79(prob = 0.97), ^while.body1, ^if.then;
  ^b:
    i32 %80 = add i32 %69, i32 1;
    ubr ^while.header;
  ^while.body2:
    i32* %81 = getelementptr &(i32* %32)[i32 %73];
    i32 %82 = load i32* %81;
    i32* %83 = getelementptr &(i32* %81)[i64 1];
    i32 %84 = load i32* %83;
    i1 %85 = scmp gt i32 %82, i32 %84;
    cbr i1 %85(prob = 0.5), ^if.then1, ^b1;
  ^if.then:
    i32 %86 = load i32* %48;
    i32 %87 = load i32* %47;
    i32 %88 = add i32 %86, i32 %87;
    i32 %89 = sdiv i32 %88, i32 2;
    call (i32) -> void @putint(i32 %89);
    ubr ^while.body3;
  ^if.then1:
    i32 %90 = add i32 %73, i32 1;
    i32* %91 = getelementptr &(i32* %32)[i32 %90];
    i32 %92 = load i32* %91;
    store i32* %91 with i32 %82;
    store i32* %81 with i32 %92;
    ubr ^b1;
  ^b1:
    i32 %93 = add i32 %73, i32 1;
    ubr ^while.header1;
  ^while.body3:
    i32 %94 = phi [^if.then, i32 0] [^while.body3, i32 %111];
    i32* %95 = getelementptr &([1000 * i32]* %count)[i64 0][i32 %94];
    store i32* %95 with i32 0;
    i32* %96 = getelementptr &(i32* %95)[i64 1];
    store i32* %96 with i32 0;
    i32* %97 = getelementptr &(i32* %95)[i64 2];
    store i32* %97 with i32 0;
    i32* %98 = getelementptr &(i32* %95)[i64 3];
    store i32* %98 with i32 0;
    i32* %99 = getelementptr &(i32* %95)[i64 4];
    store i32* %99 with i32 0;
    i32* %100 = getelementptr &(i32* %95)[i64 5];
    store i32* %100 with i32 0;
    i32* %101 = getelementptr &(i32* %95)[i64 6];
    store i32* %101 with i32 0;
    i32* %102 = getelementptr &(i32* %95)[i64 7];
    store i32* %102 with i32 0;
    i32* %103 = getelementptr &(i32* %95)[i64 8];
    store i32* %103 with i32 0;
    i32* %104 = getelementptr &(i32* %95)[i64 9];
    store i32* %104 with i32 0;
    i32* %105 = getelementptr &(i32* %95)[i64 10];
    store i32* %105 with i32 0;
    i32* %106 = getelementptr &(i32* %95)[i64 11];
    store i32* %106 with i32 0;
    i32* %107 = getelementptr &(i32* %95)[i64 12];
    store i32* %107 with i32 0;
    i32* %108 = getelementptr &(i32* %95)[i64 13];
    store i32* %108 with i32 0;
    i32* %109 = getelementptr &(i32* %95)[i64 14];
    store i32* %109 with i32 0;
    i32* %110 = getelementptr &(i32* %95)[i64 15];
    store i32* %110 with i32 0;
    i32 %111 = add i32 %94, i32 16;
    i1 %112 = scmp lt i32 %111, i32 992;
    cbr i1 %112(prob = 0.98), ^while.body3, ^while.body4;
  ^while.body4:
    i32* %113 = getelementptr &([1000 * i32]* %count)[i64 0][i32 %111];
    store i32* %113 with i32 0;
    i32* %114 = getelementptr &(i32* %113)[i64 1];
    store i32* %114 with i32 0;
    i32* %115 = getelementptr &(i32* %113)[i64 2];
    store i32* %115 with i32 0;
    i32* %116 = getelementptr &(i32* %113)[i64 3];
    store i32* %116 with i32 0;
    i32* %117 = getelementptr &(i32* %113)[i64 4];
    store i32* %117 with i32 0;
    i32* %118 = getelementptr &(i32* %113)[i64 5];
    store i32* %118 with i32 0;
    i32* %119 = getelementptr &(i32* %113)[i64 6];
    store i32* %119 with i32 0;
    i32* %120 = getelementptr &(i32* %113)[i64 7];
    store i32* %120 with i32 0;
    ubr ^super.header;
  ^super.header:
    i32 %121 = phi [^while.body4, i32 0] [^while.body5, i32 %124];
    i32 %122 = phi [^while.body4, i32 0] [^while.body5, i32 %157];
    i32 %123 = phi [^while.body4, i32 0] [^while.body5, i32 %156];
    i32 %124 = add i32 %121, i32 4;
    i1 %125 = scmp lt i32 %124, i32 32;
    cbr i1 %125(prob = 0.89), ^while.body5, ^super.header1;
  ^while.body5:
    i32* %126 = getelementptr &(i32* %32)[i32 %121];
    i32 %127 = load i32* %126;
    i32* %128 = getelementptr &([1000 * i32]* %count)[i64 0][i32 %127];
    i32 %129 = load i32* %128;
    i32 %130 = add i32 %129, i32 1;
    store i32* %128 with i32 %130;
    i32 %131 = smax i32 %130, i32 %122;
    i32* %132 = getelementptr &(i32* %126)[i64 1];
    i32 %133 = load i32* %132;
    i32* %134 = getelementptr &([1000 * i32]* %count)[i64 0][i32 %133];
    i32 %135 = load i32* %134;
    i32 %136 = add i32 %135, i32 1;
    i1 %137 = scmp gt i32 %136, i32 %131;
    i1 %138 = scmp gt i32 %130, i32 %122;
    i32 %139 = select i1 %138 ? i32 %127 : i32 %123;
    i32 %140 = select i1 %137 ? i32 %133 : i32 %139;
    i32 %141 = smax i32 %136, i32 %131;
    store i32* %134 with i32 %136;
    i32* %142 = getelementptr &(i32* %126)[i64 2];
    i32 %143 = load i32* %142;
    i32* %144 = getelementptr &([1000 * i32]* %count)[i64 0][i32 %143];
    i32 %145 = load i32* %144;
    i32 %146 = add i32 %145, i32 1;
    i1 %147 = scmp gt i32 %146, i32 %141;
    i32 %148 = select i1 %147 ? i32 %143 : i32 %140;
    i32 %149 = smax i32 %146, i32 %141;
    store i32* %144 with i32 %146;
    i32* %150 = getelementptr &(i32* %126)[i64 3];
    i32 %151 = load i32* %150;
    i32* %152 = getelementptr &([1000 * i32]* %count)[i64 0][i32 %151];
    i32 %153 = load i32* %152;
    i32 %154 = add i32 %153, i32 1;
    i1 %155 = scmp gt i32 %154, i32 %149;
    i32 %156 = select i1 %155 ? i32 %151 : i32 %148;
    i32 %157 = smax i32 %154, i32 %149;
    store i32* %152 with i32 %154;
    ubr ^super.header;
  ^super.header1:
    i32 %158 = phi [^super.header, i32 %121] [^while.body6, i32 %161];
    i32 %159 = phi [^super.header, i32 %122] [^while.body6, i32 %194];
    i32 %160 = phi [^super.header, i32 %123] [^while.body6, i32 %193];
    i32 %161 = add i32 %158, i32 4;
    i1 %162 = scmp lt i32 %161, i32 32;
    cbr i1 %162(prob = 0.89), ^while.body6, ^super.header2;
  ^while.body6:
    i32* %163 = getelementptr &(i32* %32)[i32 %158];
    i32 %164 = load i32* %163;
    i32* %165 = getelementptr &([1000 * i32]* %count)[i64 0][i32 %164];
    i32 %166 = load i32* %165;
    i32 %167 = add i32 %166, i32 1;
    store i32* %165 with i32 %167;
    i32 %168 = smax i32 %167, i32 %159;
    i32* %169 = getelementptr &(i32* %163)[i64 1];
    i32 %170 = load i32* %169;
    i32* %171 = getelementptr &([1000 * i32]* %count)[i64 0][i32 %170];
    i32 %172 = load i32* %171;
    i32 %173 = add i32 %172, i32 1;
    i1 %174 = scmp gt i32 %173, i32 %168;
    i1 %175 = scmp gt i32 %167, i32 %159;
    i32 %176 = select i1 %175 ? i32 %164 : i32 %160;
    i32 %177 = select i1 %174 ? i32 %170 : i32 %176;
    i32 %178 = smax i32 %173, i32 %168;
    store i32* %171 with i32 %173;
    i32* %179 = getelementptr &(i32* %163)[i64 2];
    i32 %180 = load i32* %179;
    i32* %181 = getelementptr &([1000 * i32]* %count)[i64 0][i32 %180];
    i32 %182 = load i32* %181;
    i32 %183 = add i32 %182, i32 1;
    i1 %184 = scmp gt i32 %183, i32 %178;
    i32 %185 = select i1 %184 ? i32 %180 : i32 %177;
    i32 %186 = smax i32 %183, i32 %178;
    store i32* %181 with i32 %183;
    i32* %187 = getelementptr &(i32* %163)[i64 3];
    i32 %188 = load i32* %187;
    i32* %189 = getelementptr &([1000 * i32]* %count)[i64 0][i32 %188];
    i32 %190 = load i32* %189;
    i32 %191 = add i32 %190, i32 1;
    i1 %192 = scmp gt i32 %191, i32 %186;
    i32 %193 = select i1 %192 ? i32 %188 : i32 %185;
    i32 %194 = smax i32 %191, i32 %186;
    store i32* %189 with i32 %191;
    ubr ^super.header1;
  ^super.header2:
    i32 %195 = phi [^super.header1, i32 %158] [^while.body7, i32 %198];
    i32 %196 = phi [^super.header1, i32 %159] [^while.body7, i32 %231];
    i32 %197 = phi [^super.header1, i32 %160] [^while.body7, i32 %230];
    i32 %198 = add i32 %195, i32 4;
    i1 %199 = scmp lt i32 %198, i32 32;
    cbr i1 %199(prob = 0.89), ^while.body7, ^while.body8;
  ^while.body7:
    i32* %200 = getelementptr &(i32* %32)[i32 %195];
    i32 %201 = load i32* %200;
    i32* %202 = getelementptr &([1000 * i32]* %count)[i64 0][i32 %201];
    i32 %203 = load i32* %202;
    i32 %204 = add i32 %203, i32 1;
    store i32* %202 with i32 %204;
    i32 %205 = smax i32 %204, i32 %196;
    i32* %206 = getelementptr &(i32* %200)[i64 1];
    i32 %207 = load i32* %206;
    i32* %208 = getelementptr &([1000 * i32]* %count)[i64 0][i32 %207];
    i32 %209 = load i32* %208;
    i32 %210 = add i32 %209, i32 1;
    i1 %211 = scmp gt i32 %210, i32 %205;
    i1 %212 = scmp gt i32 %204, i32 %196;
    i32 %213 = select i1 %212 ? i32 %201 : i32 %197;
    i32 %214 = select i1 %211 ? i32 %207 : i32 %213;
    i32 %215 = smax i32 %210, i32 %205;
    store i32* %208 with i32 %210;
    i32* %216 = getelementptr &(i32* %200)[i64 2];
    i32 %217 = load i32* %216;
    i32* %218 = getelementptr &([1000 * i32]* %count)[i64 0][i32 %217];
    i32 %219 = load i32* %218;
    i32 %220 = add i32 %219, i32 1;
    i1 %221 = scmp gt i32 %220, i32 %215;
    i32 %222 = select i1 %221 ? i32 %217 : i32 %214;
    i32 %223 = smax i32 %220, i32 %215;
    store i32* %218 with i32 %220;
    i32* %224 = getelementptr &(i32* %200)[i64 3];
    i32 %225 = load i32* %224;
    i32* %226 = getelementptr &([1000 * i32]* %count)[i64 0][i32 %225];
    i32 %227 = load i32* %226;
    i32 %228 = add i32 %227, i32 1;
    i1 %229 = scmp gt i32 %228, i32 %223;
    i32 %230 = select i1 %229 ? i32 %225 : i32 %222;
    i32 %231 = smax i32 %228, i32 %223;
    store i32* %226 with i32 %228;
    ubr ^super.header2;
  ^while.body8:
    i32 %232 = phi [^super.header2, i32 %195] [^while.body8, i32 %243];
    i32 %233 = phi [^super.header2, i32 %196] [^while.body8, i32 %242];
    i32 %234 = phi [^super.header2, i32 %197] [^while.body8, i32 %241];
    i32* %235 = getelementptr &(i32* %32)[i32 %232];
    i32 %236 = load i32* %235;
    i32* %237 = getelementptr &([1000 * i32]* %count)[i64 0][i32 %236];
    i32 %238 = load i32* %237;
    i32 %239 = add i32 %238, i32 1;
    i1 %240 = scmp gt i32 %239, i32 %233;
    i32 %241 = select i1 %240 ? i32 %236 : i32 %234;
    store i32* %237 with i32 %239;
    i32 %242 = smax i32 %239, i32 %233;
    i32 %243 = add i32 %232, i32 1;
    i1 %244 = scmp lt i32 %243, i32 32;
    cbr i1 %244(prob = 0.97), ^while.body8, ^b2;
  ^b2:
    call (i32) -> void @putint(i32 %241);
    ubr ^super.header3;
  ^super.header3:
    i32 %245 = phi [^b2, i32 0] [^while.body9, i32 %246];
    i32 %246 = add i32 %245, i32 4;
    i1 %247 = scmp lt i32 %246, i32 32;
    cbr i1 %247(prob = 0.89), ^while.body9, ^super.header4;
  ^while.body9:
    i32* %248 = getelementptr &(i32* %0)[i32 %245];
    i32 %249 = load i32* %248;
    i32* %250 = getelementptr &(i32* %32)[i32 %245];
    store i32* %250 with i32 %249;
    i32* %251 = getelementptr &(i32* %248)[i64 1];
    i32 %252 = load i32* %251;
    i32* %253 = getelementptr &(i32* %250)[i64 1];
    store i32* %253 with i32 %252;
    i32* %254 = getelementptr &(i32* %248)[i64 2];
    i32 %255 = load i32* %254;
    i32* %256 = getelementptr &(i32* %250)[i64 2];
    store i32* %256 with i32 %255;
    i32* %257 = getelementptr &(i32* %248)[i64 3];
    i32 %258 = load i32* %257;
    i32* %259 = getelementptr &(i32* %250)[i64 3];
    store i32* %259 with i32 %258;
    ubr ^super.header3;
  ^super.header4:
    i32 %260 = phi [^super.header3, i32 %245] [^while.body10, i32 %261];
    i32 %261 = add i32 %260, i32 4;
    i1 %262 = scmp lt i32 %261, i32 32;
    cbr i1 %262(prob = 0.89), ^while.body10, ^while.body11;
  ^while.body10:
    i32* %263 = getelementptr &(i32* %0)[i32 %260];
    i32 %264 = load i32* %263;
    i32* %265 = getelementptr &(i32* %32)[i32 %260];
    store i32* %265 with i32 %264;
    i32* %266 = getelementptr &(i32* %263)[i64 1];
    i32 %267 = load i32* %266;
    i32* %268 = getelementptr &(i32* %265)[i64 1];
    store i32* %268 with i32 %267;
    i32* %269 = getelementptr &(i32* %263)[i64 2];
    i32 %270 = load i32* %269;
    i32* %271 = getelementptr &(i32* %265)[i64 2];
    store i32* %271 with i32 %270;
    i32* %272 = getelementptr &(i32* %263)[i64 3];
    i32 %273 = load i32* %272;
    i32* %274 = getelementptr &(i32* %265)[i64 3];
    store i32* %274 with i32 %273;
    ubr ^super.header4;
  ^while.body11:
    i32 %275 = phi [^super.header4, i32 %260] [^while.body11, i32 %279];
    i32* %276 = getelementptr &(i32* %0)[i32 %275];
    i32 %277 = load i32* %276;
    i32* %278 = getelementptr &(i32* %32)[i32 %275];
    store i32* %278 with i32 %277;
    i32 %279 = add i32 %275, i32 1;
    i1 %280 = scmp lt i32 %279, i32 32;
    cbr i1 %280(prob = 0.97), ^while.body11, ^while.header2;
  ^while.header2:
    i32 %281 = phi [^while.body11, i32 0] [^b3, i32 %292];
    i32 %282 = sub i32 32, i32 %281;
    i32 %283 = add i32 %282, i32 -1;
    i1 %284 = scmp lt i32 %281, i32 31;
    cbr i1 %284(prob = 0.97), ^while.header3, ^while.body12;
  ^while.header3:
    i32 %285 = phi [^while.header2, i32 0] [^b4, i32 %304];
    i1 %286 = scmp lt i32 %285, i32 %283;
    cbr i1 %286(prob = 0.97), ^while.body13, ^b3;
  ^while.body12:
    i32 %287 = phi [^while.header2, i32 0] [^while.body12, i32 %290];
    i32* %288 = getelementptr &([32 * i32]* %result)[i64 0][i32 %287];
    i32 %289 = load i32* %288;
    call (i32) -> void @putint(i32 %289);
    i32 %290 = add i32 %287, i32 1;
    i1 %291 = scmp lt i32 %290, i32 32;
    cbr i1 %291(prob = 0.97), ^while.body12, ^super.header5;
  ^b3:
    i32 %292 = add i32 %281, i32 1;
    ubr ^while.header2;
  ^while.body13:
    i32* %293 = getelementptr &(i32* %32)[i32 %285];
    i32 %294 = load i32* %293;
    i32* %295 = getelementptr &(i32* %293)[i64 1];
    i32 %296 = load i32* %295;
    i1 %297 = scmp gt i32 %294, i32 %296;
    cbr i1 %297(prob = 0.5), ^if.then2, ^b4;
  ^super.header5:
    i32 %298 = phi [^while.body12, i32 0] [^while.body14, i32 %299];
    i32 %299 = add i32 %298, i32 4;
    i1 %300 = scmp lt i32 %299, i32 32;
    cbr i1 %300(prob = 0.89), ^while.body14, ^super.header6;
  ^if.then2:
    i32 %301 = add i32 %285, i32 1;
    i32* %302 = getelementptr &(i32* %32)[i32 %301];
    i32 %303 = load i32* %302;
    store i32* %302 with i32 %294;
    store i32* %293 with i32 %303;
    ubr ^b4;
  ^b4:
    i32 %304 = add i32 %285, i32 1;
    ubr ^while.header3;
  ^while.body14:
    i32* %305 = getelementptr &(i32* %0)[i32 %298];
    i32 %306 = load i32* %305;
    i32* %307 = getelementptr &(i32* %32)[i32 %298];
    store i32* %307 with i32 %306;
    i32* %308 = getelementptr &(i32* %305)[i64 1];
    i32 %309 = load i32* %308;
    i32* %310 = getelementptr &(i32* %307)[i64 1];
    store i32* %310 with i32 %309;
    i32* %311 = getelementptr &(i32* %305)[i64 2];
    i32 %312 = load i32* %311;
    i32* %313 = getelementptr &(i32* %307)[i64 2];
    store i32* %313 with i32 %312;
    i32* %314 = getelementptr &(i32* %305)[i64 3];
    i32 %315 = load i32* %314;
    i32* %316 = getelementptr &(i32* %307)[i64 3];
    store i32* %316 with i32 %315;
    ubr ^super.header5;
  ^super.header6:
    i32 %317 = phi [^super.header5, i32 %298] [^while.body15, i32 %318];
    i32 %318 = add i32 %317, i32 4;
    i1 %319 = scmp lt i32 %318, i32 32;
    cbr i1 %319(prob = 0.89), ^while.body15, ^while.body16;
  ^while.body15:
    i32* %320 = getelementptr &(i32* %0)[i32 %317];
    i32 %321 = load i32* %320;
    i32* %322 = getelementptr &(i32* %32)[i32 %317];
    store i32* %322 with i32 %321;
    i32* %323 = getelementptr &(i32* %320)[i64 1];
    i32 %324 = load i32* %323;
    i32* %325 = getelementptr &(i32* %322)[i64 1];
    store i32* %325 with i32 %324;
    i32* %326 = getelementptr &(i32* %320)[i64 2];
    i32 %327 = load i32* %326;
    i32* %328 = getelementptr &(i32* %322)[i64 2];
    store i32* %328 with i32 %327;
    i32* %329 = getelementptr &(i32* %320)[i64 3];
    i32 %330 = load i32* %329;
    i32* %331 = getelementptr &(i32* %322)[i64 3];
    store i32* %331 with i32 %330;
    ubr ^super.header6;
  ^while.body16:
    i32 %332 = phi [^super.header6, i32 %317] [^while.body16, i32 %336];
    i32* %333 = getelementptr &(i32* %0)[i32 %332];
    i32 %334 = load i32* %333;
    i32* %335 = getelementptr &(i32* %32)[i32 %332];
    store i32* %335 with i32 %334;
    i32 %336 = add i32 %332, i32 1;
    i1 %337 = scmp lt i32 %336, i32 32;
    cbr i1 %337(prob = 0.97), ^while.body16, ^while.header4;
  ^while.header4:
    i32 %338 = phi [^while.body16, i32 1] [^b7, i32 %379];
    i1 %339 = scmp lt i32 %338, i32 32;
    cbr i1 %339(prob = 0.97), ^while.body17, ^while.body18;
  ^while.body17:
    i32* %340 = getelementptr &(i32* %32)[i32 %338];
    i32 %341 = load i32* %340;
    i32 %342 = add i32 %338, i32 -1;
    ubr ^while.header5;
  ^while.body18:
    i32 %343 = phi [^while.header4, i32 0] [^while.body18, i32 %346];
    i32* %344 = getelementptr &([32 * i32]* %result)[i64 0][i32 %343];
    i32 %345 = load i32* %344;
    call (i32) -> void @putint(i32 %345);
    i32 %346 = add i32 %343, i32 1;
    i1 %347 = scmp lt i32 %346, i32 32;
    cbr i1 %347(prob = 0.97), ^while.body18, ^super.header7;
  ^while.header5:
    i32 %348 = phi [^while.body17, i32 %342] [^while.body20, i32 %376];
    i1 %349 = scmp gt i32 %348, i32 -1;
    cbr i1 %349(prob = 0.5), ^b5, ^b6;
  ^super.header7:
    i32 %350 = phi [^while.body18, i32 0] [^while.body19, i32 %351];
    i32 %351 = add i32 %350, i32 4;
    i1 %352 = scmp lt i32 %351, i32 32;
    cbr i1 %352(prob = 0.89), ^while.body19, ^super.header8;
  ^b5:
    i32* %353 = getelementptr &(i32* %32)[i32 %348];
    i32 %354 = load i32* %353;
    i1 %355 = scmp lt i32 %341, i32 %354;
    ubr ^b6;
  ^while.body19:
    i32* %356 = getelementptr &(i32* %0)[i32 %350];
    i32 %357 = load i32* %356;
    i32* %358 = getelementptr &(i32* %32)[i32 %350];
    store i32* %358 with i32 %357;
    i32* %359 = getelementptr &(i32* %356)[i64 1];
    i32 %360 = load i32* %359;
    i32* %361 = getelementptr &(i32* %358)[i64 1];
    store i32* %361 with i32 %360;
    i32* %362 = getelementptr &(i32* %356)[i64 2];
    i32 %363 = load i32* %362;
    i32* %364 = getelementptr &(i32* %358)[i64 2];
    store i32* %364 with i32 %363;
    i32* %365 = getelementptr &(i32* %356)[i64 3];
    i32 %366 = load i32* %365;
    i32* %367 = getelementptr &(i32* %358)[i64 3];
    store i32* %367 with i32 %366;
    ubr ^super.header7;
  ^b6:
    i1 %368 = phi [^while.header5, i1 false] [^b5, i1 %355];
    cbr i1 %368(prob = 0.97), ^while.body20, ^b7;
  ^super.header8:
    i32 %369 = phi [^super.header7, i32 %350] [^while.body21, i32 %370];
    i32 %370 = add i32 %369, i32 4;
    i1 %371 = scmp lt i32 %370, i32 32;
    cbr i1 %371(prob = 0.89), ^while.body21, ^while.body22;
  ^while.body20:
    i32 %372 = add i32 %348, i32 1;
    i32* %373 = getelementptr &(i32* %32)[i32 %372];
    i32* %374 = getelementptr &(i32* %32)[i32 %348];
    i32 %375 = load i32* %374;
    store i32* %373 with i32 %375;
    i32 %376 = add i32 %348, i32 -1;
    ubr ^while.header5;
  ^b7:
    i32 %377 = add i32 %348, i32 1;
    i32* %378 = getelementptr &(i32* %32)[i32 %377];
    store i32* %378 with i32 %341;
    i32 %379 = add i32 %338, i32 1;
    ubr ^while.header4;
  ^while.body21:
    i32* %380 = getelementptr &(i32* %0)[i32 %369];
    i32 %381 = load i32* %380;
    i32* %382 = getelementptr &(i32* %32)[i32 %369];
    store i32* %382 with i32 %381;
    i32* %383 = getelementptr &(i32* %380)[i64 1];
    i32 %384 = load i32* %383;
    i32* %385 = getelementptr &(i32* %382)[i64 1];
    store i32* %385 with i32 %384;
    i32* %386 = getelementptr &(i32* %380)[i64 2];
    i32 %387 = load i32* %386;
    i32* %388 = getelementptr &(i32* %382)[i64 2];
    store i32* %388 with i32 %387;
    i32* %389 = getelementptr &(i32* %380)[i64 3];
    i32 %390 = load i32* %389;
    i32* %391 = getelementptr &(i32* %382)[i64 3];
    store i32* %391 with i32 %390;
    ubr ^super.header8;
  ^while.body22:
    i32 %392 = phi [^super.header8, i32 %369] [^while.body22, i32 %396];
    i32* %393 = getelementptr &(i32* %0)[i32 %392];
    i32 %394 = load i32* %393;
    i32* %395 = getelementptr &(i32* %32)[i32 %392];
    store i32* %395 with i32 %394;
    i32 %396 = add i32 %392, i32 1;
    i1 %397 = scmp lt i32 %396, i32 32;
    cbr i1 %397(prob = 0.97), ^while.body22, ^b8;
  ^b8:
    i32 %398 = call (i32*, i32, i32) -> i32 @QuickSort(i32* %32, i32 0, i32 31);
    ubr ^while.body23;
  ^while.body23:
    i32 %399 = phi [^b8, i32 0] [^while.body23, i32 %402];
    i32* %400 = getelementptr &([32 * i32]* %result)[i64 0][i32 %399];
    i32 %401 = load i32* %400;
    call (i32) -> void @putint(i32 %401);
    i32 %402 = add i32 %399, i32 1;
    i1 %403 = scmp lt i32 %402, i32 32;
    cbr i1 %403(prob = 0.97), ^while.body23, ^super.header9;
  ^super.header9:
    i32 %404 = phi [^while.body23, i32 0] [^while.body24, i32 %405];
    i32 %405 = add i32 %404, i32 4;
    i1 %406 = scmp lt i32 %405, i32 32;
    cbr i1 %406(prob = 0.89), ^while.body24, ^super.header10;
  ^while.body24:
    i32* %407 = getelementptr &(i32* %0)[i32 %404];
    i32 %408 = load i32* %407;
    i32* %409 = getelementptr &(i32* %32)[i32 %404];
    store i32* %409 with i32 %408;
    i32* %410 = getelementptr &(i32* %407)[i64 1];
    i32 %411 = load i32* %410;
    i32* %412 = getelementptr &(i32* %409)[i64 1];
    store i32* %412 with i32 %411;
    i32* %413 = getelementptr &(i32* %407)[i64 2];
    i32 %414 = load i32* %413;
    i32* %415 = getelementptr &(i32* %409)[i64 2];
    store i32* %415 with i32 %414;
    i32* %416 = getelementptr &(i32* %407)[i64 3];
    i32 %417 = load i32* %416;
    i32* %418 = getelementptr &(i32* %409)[i64 3];
    store i32* %418 with i32 %417;
    ubr ^super.header9;
  ^super.header10:
    i32 %419 = phi [^super.header9, i32 %404] [^while.body25, i32 %420];
    i32 %420 = add i32 %419, i32 4;
    i1 %421 = scmp lt i32 %420, i32 32;
    cbr i1 %421(prob = 0.89), ^while.body25, ^while.body26;
  ^while.body25:
    i32* %422 = getelementptr &(i32* %0)[i32 %419];
    i32 %423 = load i32* %422;
    i32* %424 = getelementptr &(i32* %32)[i32 %419];
    store i32* %424 with i32 %423;
    i32* %425 = getelementptr &(i32* %422)[i64 1];
    i32 %426 = load i32* %425;
    i32* %427 = getelementptr &(i32* %424)[i64 1];
    store i32* %427 with i32 %426;
    i32* %428 = getelementptr &(i32* %422)[i64 2];
    i32 %429 = load i32* %428;
    i32* %430 = getelementptr &(i32* %424)[i64 2];
    store i32* %430 with i32 %429;
    i32* %431 = getelementptr &(i32* %422)[i64 3];
    i32 %432 = load i32* %431;
    i32* %433 = getelementptr &(i32* %424)[i64 3];
    store i32* %433 with i32 %432;
    ubr ^super.header10;
  ^while.body26:
    i32 %434 = phi [^super.header10, i32 %419] [^while.body26, i32 %438];
    i32* %435 = getelementptr &(i32* %0)[i32 %434];
    i32 %436 = load i32* %435;
    i32* %437 = getelementptr &(i32* %32)[i32 %434];
    store i32* %437 with i32 %436;
    i32 %438 = add i32 %434, i32 1;
    i1 %439 = scmp lt i32 %438, i32 32;
    cbr i1 %439(prob = 0.97), ^while.body26, ^while.header6;
  ^while.header6:
    i32 %440 = phi [^while.body26, i32 0] [^b9, i32 %457];
    i32 %441 = phi [^while.body26, i32 0] [^b9, i32 %456];
    i1 %442 = scmp lt i32 %440, i32 32;
    cbr i1 %442(prob = 0.97), ^while.body27, ^while.body28;
  ^while.body27:
    i32* %443 = getelementptr &(i32* %32)[i32 %440];
    i32 %444 = load i32* %443;
    i32 %445 = add i32 %441, i32 %444;
    i32 %446 = srem i32 %440, i32 4;
    i1 %447 = scmp neq i32 %446, i32 3;
    cbr i1 %447(prob = 0.5), ^if.then3, ^if.else;
  ^while.body28:
    i32 %448 = phi [^while.header6, i32 0] [^while.body28, i32 %451];
    i32* %449 = getelementptr &([32 * i32]* %result)[i64 0][i32 %448];
    i32 %450 = load i32* %449;
    call (i32) -> void @putint(i32 %450);
    i32 %451 = add i32 %448, i32 1;
    i1 %452 = scmp lt i32 %451, i32 32;
    cbr i1 %452(prob = 0.97), ^while.body28, ^super.header11;
  ^if.then3:
    store i32* %443 with i32 0;
    ubr ^b9;
  ^if.else:
    store i32* %443 with i32 %445;
    ubr ^b9;
  ^super.header11:
    i32 %453 = phi [^while.body28, i32 0] [^while.body29, i32 %454];
    i32 %454 = add i32 %453, i32 4;
    i1 %455 = scmp lt i32 %454, i32 32;
    cbr i1 %455(prob = 0.89), ^while.body29, ^super.header12;
  ^b9:
    i32 %456 = phi [^if.then3, i32 %445] [^if.else, i32 0];
    i32 %457 = add i32 %440, i32 1;
    ubr ^while.header6;
  ^while.body29:
    i32* %458 = getelementptr &(i32* %0)[i32 %453];
    i32 %459 = load i32* %458;
    i32* %460 = getelementptr &(i32* %32)[i32 %453];
    store i32* %460 with i32 %459;
    i32* %461 = getelementptr &(i32* %458)[i64 1];
    i32 %462 = load i32* %461;
    i32* %463 = getelementptr &(i32* %460)[i64 1];
    store i32* %463 with i32 %462;
    i32* %464 = getelementptr &(i32* %458)[i64 2];
    i32 %465 = load i32* %464;
    i32* %466 = getelementptr &(i32* %460)[i64 2];
    store i32* %466 with i32 %465;
    i32* %467 = getelementptr &(i32* %458)[i64 3];
    i32 %468 = load i32* %467;
    i32* %469 = getelementptr &(i32* %460)[i64 3];
    store i32* %469 with i32 %468;
    ubr ^super.header11;
  ^super.header12:
    i32 %470 = phi [^super.header11, i32 %453] [^while.body30, i32 %471];
    i32 %471 = add i32 %470, i32 4;
    i1 %472 = scmp lt i32 %471, i32 32;
    cbr i1 %472(prob = 0.89), ^while.body30, ^while.body31;
  ^while.body30:
    i32* %473 = getelementptr &(i32* %0)[i32 %470];
    i32 %474 = load i32* %473;
    i32* %475 = getelementptr &(i32* %32)[i32 %470];
    store i32* %475 with i32 %474;
    i32* %476 = getelementptr &(i32* %473)[i64 1];
    i32 %477 = load i32* %476;
    i32* %478 = getelementptr &(i32* %475)[i64 1];
    store i32* %478 with i32 %477;
    i32* %479 = getelementptr &(i32* %473)[i64 2];
    i32 %480 = load i32* %479;
    i32* %481 = getelementptr &(i32* %475)[i64 2];
    store i32* %481 with i32 %480;
    i32* %482 = getelementptr &(i32* %473)[i64 3];
    i32 %483 = load i32* %482;
    i32* %484 = getelementptr &(i32* %475)[i64 3];
    store i32* %484 with i32 %483;
    ubr ^super.header12;
  ^while.body31:
    i32 %485 = phi [^super.header12, i32 %470] [^while.body31, i32 %489];
    i32* %486 = getelementptr &(i32* %0)[i32 %485];
    i32 %487 = load i32* %486;
    i32* %488 = getelementptr &(i32* %32)[i32 %485];
    store i32* %488 with i32 %487;
    i32 %489 = add i32 %485, i32 1;
    i1 %490 = scmp lt i32 %489, i32 32;
    cbr i1 %490(prob = 0.97), ^while.body31, ^while.header7;
  ^while.header7:
    i32 %491 = phi [^while.body31, i32 0] [^b10, i32 %510];
    i32 %492 = phi [^while.body31, i32 0] [^b10, i32 %511];
    i32 %493 = phi [^while.body31, i32 0] [^b10, i32 %512];
    i1 %494 = scmp lt i32 %493, i32 32;
    cbr i1 %494(prob = 0.97), ^while.body32, ^super.header13;
  ^while.body32:
    i1 %495 = scmp lt i32 %493, i32 2;
    cbr i1 %495(prob = 0.5), ^if.then4, ^if.else1;
  ^super.header13:
    i32 %496 = phi [^while.header7, i32 30] [^while.body33, i32 %497];
    i32 %497 = add i32 %496, i32 4;
    i1 %498 = scmp lt i32 %497, i32 32;
    cbr i1 %498(prob = 0.89), ^while.body33, ^super.header14;
  ^if.then4:
    i32* %499 = getelementptr &(i32* %32)[i32 %493];
    i32 %500 = load i32* %499;
    i32 %501 = add i32 %492, i32 %500;
    ubr ^b10;
  ^while.body33:
    i32* %502 = getelementptr &(i32* %32)[i32 %496];
    store i32* %502 with i32 0;
    i32* %503 = getelementptr &(i32* %502)[i64 1];
    store i32* %503 with i32 0;
    i32* %504 = getelementptr &(i32* %502)[i64 2];
    store i32* %504 with i32 0;
    i32* %505 = getelementptr &(i32* %502)[i64 3];
    store i32* %505 with i32 0;
    ubr ^super.header13;
  ^if.else1:
    i1 %506 = scmp eq i32 %493, i32 2;
    cbr i1 %506(prob = 0.5), ^if.then5, ^if.else2;
  ^super.header14:
    i32 %507 = phi [^super.header13, i32 %496] [^while.body34, i32 %508];
    i32 %508 = add i32 %507, i32 4;
    i1 %509 = scmp lt i32 %508, i32 32;
    cbr i1 %509(prob = 0.89), ^while.body34, ^while.body35;
  ^b10:
    i32 %510 = phi [^if.then4, i32 %491] [^if.then5, i32 %513] [^if.else2, i32 %525];
    i32 %511 = phi [^if.then4, i32 %501] [^if.then5, i32 %492] [^if.else2, i32 %522];
    i32 %512 = add i32 %493, i32 1;
    ubr ^while.header7;
  ^if.then5:
    i32 %513 = load i32* %32;
    i32 %514 = sdiv i32 %492, i32 3;
    store i32* %32 with i32 %514;
    ubr ^b10;
  ^while.body34:
    i32* %515 = getelementptr &(i32* %32)[i32 %507];
    store i32* %515 with i32 0;
    i32* %516 = getelementptr &(i32* %515)[i64 1];
    store i32* %516 with i32 0;
    i32* %517 = getelementptr &(i32* %515)[i64 2];
    store i32* %517 with i32 0;
    i32* %518 = getelementptr &(i32* %515)[i64 3];
    store i32* %518 with i32 0;
    ubr ^super.header14;
  ^if.else2:
    i32* %519 = getelementptr &(i32* %32)[i32 %493];
    i32 %520 = load i32* %519;
    i32 %521 = add i32 %492, i32 %520;
    i32 %522 = sub i32 %521, i32 %491;
    i32 %523 = sdiv i32 %522, i32 3;
    i32* %524 = getelementptr &(i32* %519)[i64 -2];
    i32 %525 = load i32* %524;
    store i32* %524 with i32 %523;
    ubr ^b10;
  ^while.body35:
    i32 %526 = phi [^super.header14, i32 %507] [^while.body35, i32 %528];
    i32* %527 = getelementptr &(i32* %32)[i32 %526];
    store i32* %527 with i32 0;
    i32 %528 = add i32 %526, i32 1;
    i1 %529 = scmp lt i32 %528, i32 32;
    cbr i1 %529(prob = 0.97), ^while.body35, ^while.body36;
  ^while.body36:
    i32 %530 = phi [^while.body35, i32 0] [^while.body36, i32 %533];
    i32* %531 = getelementptr &([32 * i32]* %result)[i64 0][i32 %530];
    i32 %532 = load i32* %531;
    call (i32) -> void @putint(i32 %532);
    i32 %533 = add i32 %530, i32 1;
    i1 %534 = scmp lt i32 %533, i32 32;
    cbr i1 %534(prob = 0.97), ^while.body36, ^b11;
  ^b11:
    ret i32 0;
}
