internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @QuickSort(i32* %arr, i32 %low, i32 %high) -> void {
  ^0:
    ubr ^entry;
  ^entry:
    i32 %1 = phi [^0, i32 %low] [^b1, i32 %11];
    i1 %2 = icmp sgt i32 %high, i32 %1;
    cbr i1 %2(prob = 0.5), ^if.then, ^b;
  ^if.then:
    i32* %3 = getelementptr &(i32* %arr)[i32 %1];
    i32 %4 = load i32* %3;
    i32 %5 = add i32 %4, i32 -1;
    ubr ^while.header;
  ^b:
    ret;
  ^while.header:
    i32 %6 = phi [^if.then, i32 %high] [^b7, i32 %12] [^if.then2, i32 %33];
    i32 %7 = phi [^if.then, i32 %1] [^b7, i32 %23] [^if.then2, i32 %23];
    i1 %8 = icmp sgt i32 %6, i32 %7;
    cbr i1 %8(prob = 0.97), ^while.header1, ^b1;
  ^b1:
    i32* %9 = getelementptr &(i32* %arr)[i32 %7];
    store i32* %9 with i32 %4;
    i32 %10 = add i32 %7, i32 -1;
    call (i32*, i32, i32) -> void @QuickSort(i32* %arr, i32 %1, i32 %10);
    i32 %11 = add i32 %7, i32 1;
    ubr ^entry;
  ^while.header1:
    i32 %12 = phi [^while.header, i32 %6] [^while.body, i32 %18];
    i1 %13 = icmp slt i32 %7, i32 %12;
    cbr i1 %13(prob = 0.5), ^b2, ^b3;
  ^b2:
    i32* %14 = getelementptr &(i32* %arr)[i32 %12];
    i32 %15 = load i32* %14;
    i1 %16 = icmp slt i32 %5, i32 %15;
    ubr ^b3;
  ^b3:
    i1 %17 = phi [^while.header1, i1 false] [^b2, i1 %16];
    cbr i1 %17(prob = 0.97), ^while.body, ^b4;
  ^while.body:
    i32 %18 = add i32 %12, i32 -1;
    ubr ^while.header1;
  ^b4:
    cbr i1 %13(prob = 0.5), ^if.then1, ^while.header2;
  ^if.then1:
    i32* %19 = getelementptr &(i32* %arr)[i32 %12];
    i32 %20 = load i32* %19;
    i32* %21 = getelementptr &(i32* %arr)[i32 %7];
    store i32* %21 with i32 %20;
    i32 %22 = add i32 %7, i32 1;
    ubr ^while.header2;
  ^while.header2:
    i32 %23 = phi [^b4, i32 %7] [^if.then1, i32 %22] [^while.body1, i32 %29];
    i1 %24 = icmp sgt i32 %12, i32 %23;
    cbr i1 %24(prob = 0.5), ^b5, ^b6;
  ^b5:
    i32* %25 = getelementptr &(i32* %arr)[i32 %23];
    i32 %26 = load i32* %25;
    i1 %27 = icmp sgt i32 %4, i32 %26;
    ubr ^b6;
  ^b6:
    i1 %28 = phi [^while.header2, i1 false] [^b5, i1 %27];
    cbr i1 %28(prob = 0.97), ^while.body1, ^b7;
  ^while.body1:
    i32 %29 = add i32 %23, i32 1;
    ubr ^while.header2;
  ^b7:
    cbr i1 %24(prob = 0.5), ^if.then2, ^while.header;
  ^if.then2:
    i32* %30 = getelementptr &(i32* %arr)[i32 %23];
    i32 %31 = load i32* %30;
    i32* %32 = getelementptr &(i32* %arr)[i32 %12];
    store i32* %32 with i32 %31;
    i32 %33 = add i32 %12, i32 -1;
    ubr ^while.header;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [32 * i32]* %result = alloc [32 * i32];
    [32 * i32]* %arr = alloc [32 * i32];
    i32* %0 = getelementptr &([32 * i32]* %arr)[i64 0][i64 0];
    store i32* %0 with i32 7;
    i32* %1 = getelementptr &([32 * i32]* %arr)[i64 0][i64 1];
    store i32* %1 with i32 23;
    i32* %2 = getelementptr &([32 * i32]* %arr)[i64 0][i64 2];
    store i32* %2 with i32 89;
    i32* %3 = getelementptr &([32 * i32]* %arr)[i64 0][i64 3];
    store i32* %3 with i32 26;
    i32* %4 = getelementptr &([32 * i32]* %arr)[i64 0][i64 4];
    store i32* %4 with i32 282;
    i32* %5 = getelementptr &([32 * i32]* %arr)[i64 0][i64 5];
    store i32* %5 with i32 254;
    i32* %6 = getelementptr &([32 * i32]* %arr)[i64 0][i64 6];
    store i32* %6 with i32 27;
    i32* %7 = getelementptr &([32 * i32]* %arr)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([32 * i32]* %arr)[i64 0][i64 8];
    store i32* %8 with i32 83;
    i32* %9 = getelementptr &([32 * i32]* %arr)[i64 0][i64 9];
    store i32* %9 with i32 273;
    i32* %10 = getelementptr &([32 * i32]* %arr)[i64 0][i64 10];
    store i32* %10 with i32 574;
    i32* %11 = getelementptr &([32 * i32]* %arr)[i64 0][i64 11];
    store i32* %11 with i32 905;
    i32* %12 = getelementptr &([32 * i32]* %arr)[i64 0][i64 12];
    store i32* %12 with i32 354;
    i32* %13 = getelementptr &([32 * i32]* %arr)[i64 0][i64 13];
    store i32* %13 with i32 657;
    i32* %14 = getelementptr &([32 * i32]* %arr)[i64 0][i64 14];
    store i32* %14 with i32 935;
    i32* %15 = getelementptr &([32 * i32]* %arr)[i64 0][i64 15];
    store i32* %15 with i32 264;
    i32* %16 = getelementptr &([32 * i32]* %arr)[i64 0][i64 16];
    store i32* %16 with i32 639;
    i32* %17 = getelementptr &([32 * i32]* %arr)[i64 0][i64 17];
    store i32* %17 with i32 459;
    i32* %18 = getelementptr &([32 * i32]* %arr)[i64 0][i64 18];
    store i32* %18 with i32 29;
    i32* %19 = getelementptr &([32 * i32]* %arr)[i64 0][i64 19];
    store i32* %19 with i32 68;
    i32* %20 = getelementptr &([32 * i32]* %arr)[i64 0][i64 20];
    store i32* %20 with i32 929;
    i32* %21 = getelementptr &([32 * i32]* %arr)[i64 0][i64 21];
    store i32* %21 with i32 756;
    i32* %22 = getelementptr &([32 * i32]* %arr)[i64 0][i64 22];
    store i32* %22 with i32 452;
    i32* %23 = getelementptr &([32 * i32]* %arr)[i64 0][i64 23];
    store i32* %23 with i32 279;
    i32* %24 = getelementptr &([32 * i32]* %arr)[i64 0][i64 24];
    store i32* %24 with i32 58;
    i32* %25 = getelementptr &([32 * i32]* %arr)[i64 0][i64 25];
    store i32* %25 with i32 87;
    i32* %26 = getelementptr &([32 * i32]* %arr)[i64 0][i64 26];
    store i32* %26 with i32 96;
    i32* %27 = getelementptr &([32 * i32]* %arr)[i64 0][i64 27];
    store i32* %27 with i32 36;
    i32* %28 = getelementptr &([32 * i32]* %arr)[i64 0][i64 28];
    store i32* %28 with i32 39;
    i32* %29 = getelementptr &([32 * i32]* %arr)[i64 0][i64 29];
    store i32* %29 with i32 28;
    i32* %30 = getelementptr &([32 * i32]* %arr)[i64 0][i64 30];
    store i32* %30 with i32 1;
    i32* %31 = getelementptr &([32 * i32]* %arr)[i64 0][i64 31];
    store i32* %31 with i32 290;
    i32* %32 = getelementptr &([32 * i32]* %result)[i64 0][i64 0];
    store i32* %32 with i32 7;
    i32* %33 = getelementptr &([32 * i32]* %result)[i64 0][i64 1];
    store i32* %33 with i32 23;
    i32* %34 = getelementptr &([32 * i32]* %result)[i64 0][i64 2];
    store i32* %34 with i32 89;
    i32* %35 = getelementptr &([32 * i32]* %result)[i64 0][i64 3];
    store i32* %35 with i32 26;
    i32* %36 = getelementptr &([32 * i32]* %result)[i64 0][i64 4];
    store i32* %36 with i32 282;
    i32* %37 = getelementptr &([32 * i32]* %result)[i64 0][i64 5];
    store i32* %37 with i32 254;
    i32* %38 = getelementptr &([32 * i32]* %result)[i64 0][i64 6];
    store i32* %38 with i32 27;
    i32* %39 = getelementptr &([32 * i32]* %result)[i64 0][i64 7];
    store i32* %39 with i32 5;
    i32* %40 = getelementptr &([32 * i32]* %result)[i64 0][i64 8];
    store i32* %40 with i32 83;
    i32* %41 = getelementptr &([32 * i32]* %result)[i64 0][i64 9];
    store i32* %41 with i32 273;
    i32* %42 = getelementptr &([32 * i32]* %result)[i64 0][i64 10];
    store i32* %42 with i32 574;
    i32* %43 = getelementptr &([32 * i32]* %result)[i64 0][i64 11];
    store i32* %43 with i32 905;
    i32* %44 = getelementptr &([32 * i32]* %result)[i64 0][i64 12];
    store i32* %44 with i32 354;
    i32* %45 = getelementptr &([32 * i32]* %result)[i64 0][i64 13];
    store i32* %45 with i32 657;
    i32* %46 = getelementptr &([32 * i32]* %result)[i64 0][i64 14];
    store i32* %46 with i32 935;
    i32* %47 = getelementptr &([32 * i32]* %result)[i64 0][i64 15];
    store i32* %47 with i32 264;
    i32* %48 = getelementptr &([32 * i32]* %result)[i64 0][i64 16];
    store i32* %48 with i32 639;
    i32* %49 = getelementptr &([32 * i32]* %result)[i64 0][i64 17];
    store i32* %49 with i32 459;
    i32* %50 = getelementptr &([32 * i32]* %result)[i64 0][i64 18];
    store i32* %50 with i32 29;
    i32* %51 = getelementptr &([32 * i32]* %result)[i64 0][i64 19];
    store i32* %51 with i32 68;
    i32* %52 = getelementptr &([32 * i32]* %result)[i64 0][i64 20];
    store i32* %52 with i32 929;
    i32* %53 = getelementptr &([32 * i32]* %result)[i64 0][i64 21];
    store i32* %53 with i32 756;
    i32* %54 = getelementptr &([32 * i32]* %result)[i64 0][i64 22];
    store i32* %54 with i32 452;
    i32* %55 = getelementptr &([32 * i32]* %result)[i64 0][i64 23];
    store i32* %55 with i32 279;
    i32* %56 = getelementptr &([32 * i32]* %result)[i64 0][i64 24];
    store i32* %56 with i32 58;
    i32* %57 = getelementptr &([32 * i32]* %result)[i64 0][i64 25];
    store i32* %57 with i32 87;
    i32* %58 = getelementptr &([32 * i32]* %result)[i64 0][i64 26];
    store i32* %58 with i32 96;
    i32* %59 = getelementptr &([32 * i32]* %result)[i64 0][i64 27];
    store i32* %59 with i32 36;
    i32* %60 = getelementptr &([32 * i32]* %result)[i64 0][i64 28];
    store i32* %60 with i32 39;
    i32* %61 = getelementptr &([32 * i32]* %result)[i64 0][i64 29];
    store i32* %61 with i32 28;
    i32* %62 = getelementptr &([32 * i32]* %result)[i64 0][i64 30];
    store i32* %62 with i32 1;
    i32* %63 = getelementptr &([32 * i32]* %result)[i64 0][i64 31];
    store i32* %63 with i32 290;
    [1000 * i32]* %64 = ptrcast [1000 * i32]* @count to [1000 * i32]*;
    ubr ^while.body;
  ^while.body:
    i32 %65 = phi [^entry, i32 0] [^while.body, i32 %68];
    i32* %66 = getelementptr &([32 * i32]* %result)[i64 0][i32 %65];
    i32 %67 = load i32* %66;
    call (i32) -> void @putint(i32 %67);
    i32 %68 = add i32 %65, i32 1;
    i1 %69 = icmp slt i32 %68, i32 32;
    cbr i1 %69(prob = 0.97), ^while.body, ^while.header;
  ^while.header:
    i32 %70 = phi [^while.body, i32 0] [^b, i32 %81];
    i32 %71 = sub i32 32, i32 %70;
    i32 %72 = add i32 %71, i32 -1;
    i1 %73 = icmp slt i32 %70, i32 31;
    cbr i1 %73(prob = 0.97), ^while.header1, ^while.body1;
  ^while.header1:
    i32 %74 = phi [^while.header, i32 0] [^while.body2, i32 %87] [^if.then1, i32 %87];
    i1 %75 = icmp sgt i32 %72, i32 %74;
    cbr i1 %75(prob = 0.97), ^while.body2, ^b;
  ^while.body1:
    i32 %76 = phi [^while.header, i32 0] [^while.body1, i32 %79];
    i32* %77 = getelementptr &([32 * i32]* %result)[i64 0][i32 %76];
    i32 %78 = load i32* %77;
    call (i32) -> void @putint(i32 %78);
    i32 %79 = add i32 %76, i32 1;
    i1 %80 = icmp slt i32 %79, i32 32;
    cbr i1 %80(prob = 0.97), ^while.body1, ^if.then;
  ^b:
    i32 %81 = add i32 %70, i32 1;
    ubr ^while.header;
  ^while.body2:
    i32* %82 = getelementptr &(i32* %32)[i32 %74];
    i32 %83 = load i32* %82;
    i32* %84 = getelementptr &(i32* %82)[i64 1];
    i32 %85 = load i32* %84;
    i1 %86 = icmp sgt i32 %83, i32 %85;
    i32 %87 = add i32 %74, i32 1;
    cbr i1 %86(prob = 0.5), ^if.then1, ^while.header1;
  ^if.then:
    i32 %88 = load i32* %48;
    i32 %89 = load i32* %47;
    i32 %90 = add i32 %88, i32 %89;
    i32 %91 = sdiv i32 %90, i32 2;
    call (i32) -> void @putint(i32 %91);
    ubr ^while.body3;
  ^if.then1:
    store i32* %84 with i32 %83;
    store i32* %82 with i32 %85;
    ubr ^while.header1;
  ^while.body3:
    i32 %92 = phi [^if.then, i32 0] [^while.body3, i32 %109];
    i32* %93 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %92];
    store i32* %93 with i32 0;
    i32* %94 = getelementptr &(i32* %93)[i64 1];
    store i32* %94 with i32 0;
    i32* %95 = getelementptr &(i32* %93)[i64 2];
    store i32* %95 with i32 0;
    i32* %96 = getelementptr &(i32* %93)[i64 3];
    store i32* %96 with i32 0;
    i32* %97 = getelementptr &(i32* %93)[i64 4];
    store i32* %97 with i32 0;
    i32* %98 = getelementptr &(i32* %93)[i64 5];
    store i32* %98 with i32 0;
    i32* %99 = getelementptr &(i32* %93)[i64 6];
    store i32* %99 with i32 0;
    i32* %100 = getelementptr &(i32* %93)[i64 7];
    store i32* %100 with i32 0;
    i32* %101 = getelementptr &(i32* %93)[i64 8];
    store i32* %101 with i32 0;
    i32* %102 = getelementptr &(i32* %93)[i64 9];
    store i32* %102 with i32 0;
    i32* %103 = getelementptr &(i32* %93)[i64 10];
    store i32* %103 with i32 0;
    i32* %104 = getelementptr &(i32* %93)[i64 11];
    store i32* %104 with i32 0;
    i32* %105 = getelementptr &(i32* %93)[i64 12];
    store i32* %105 with i32 0;
    i32* %106 = getelementptr &(i32* %93)[i64 13];
    store i32* %106 with i32 0;
    i32* %107 = getelementptr &(i32* %93)[i64 14];
    store i32* %107 with i32 0;
    i32* %108 = getelementptr &(i32* %93)[i64 15];
    store i32* %108 with i32 0;
    i32 %109 = add i32 %92, i32 16;
    i1 %110 = icmp slt i32 %109, i32 992;
    cbr i1 %110(prob = 0.98), ^while.body3, ^while.body4;
  ^while.body4:
    i32* %111 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %109];
    store i32* %111 with i32 0;
    i32* %112 = getelementptr &(i32* %111)[i64 1];
    store i32* %112 with i32 0;
    i32* %113 = getelementptr &(i32* %111)[i64 2];
    store i32* %113 with i32 0;
    i32* %114 = getelementptr &(i32* %111)[i64 3];
    store i32* %114 with i32 0;
    i32* %115 = getelementptr &(i32* %111)[i64 4];
    store i32* %115 with i32 0;
    i32* %116 = getelementptr &(i32* %111)[i64 5];
    store i32* %116 with i32 0;
    i32* %117 = getelementptr &(i32* %111)[i64 6];
    store i32* %117 with i32 0;
    i32* %118 = getelementptr &(i32* %111)[i64 7];
    store i32* %118 with i32 0;
    ubr ^while.body5;
  ^while.body5:
    i32 %119 = phi [^while.body4, i32 4] [^while.body5, i32 %155];
    i32 %120 = phi [^while.body4, i32 0] [^while.body5, i32 %153];
    i32 %121 = phi [^while.body4, i32 0] [^while.body5, i32 %154];
    i32 %122 = phi [^while.body4, i32 0] [^while.body5, i32 %119];
    i32* %123 = getelementptr &(i32* %32)[i32 %122];
    i32 %124 = load i32* %123;
    i32* %125 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %124];
    i32 %126 = load i32* %125;
    i32 %127 = add i32 %126, i32 1;
    store i32* %125 with i32 %127;
    i32 %128 = smax i32 %121, i32 %127;
    i32* %129 = getelementptr &(i32* %123)[i64 1];
    i32 %130 = load i32* %129;
    i32* %131 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %130];
    i32 %132 = load i32* %131;
    i32 %133 = add i32 %132, i32 1;
    i1 %134 = icmp slt i32 %128, i32 %133;
    i1 %135 = icmp slt i32 %121, i32 %127;
    i32 %136 = select i1 %135 ? i32 %124 : i32 %120;
    i32 %137 = select i1 %134 ? i32 %130 : i32 %136;
    i32 %138 = smax i32 %128, i32 %133;
    store i32* %131 with i32 %133;
    i32* %139 = getelementptr &(i32* %123)[i64 2];
    i32 %140 = load i32* %139;
    i32* %141 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %140];
    i32 %142 = load i32* %141;
    i32 %143 = add i32 %142, i32 1;
    i1 %144 = icmp slt i32 %138, i32 %143;
    i32 %145 = select i1 %144 ? i32 %140 : i32 %137;
    i32 %146 = smax i32 %138, i32 %143;
    store i32* %141 with i32 %143;
    i32* %147 = getelementptr &(i32* %123)[i64 3];
    i32 %148 = load i32* %147;
    i32* %149 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %148];
    i32 %150 = load i32* %149;
    i32 %151 = add i32 %150, i32 1;
    i1 %152 = icmp slt i32 %146, i32 %151;
    i32 %153 = select i1 %152 ? i32 %148 : i32 %145;
    i32 %154 = smax i32 %146, i32 %151;
    store i32* %149 with i32 %151;
    i32 %155 = add i32 %119, i32 4;
    i1 %156 = icmp slt i32 %155, i32 32;
    cbr i1 %156(prob = 0.86), ^while.body5, ^while.body6;
  ^while.body6:
    i32 %157 = phi [^while.body5, i32 %119] [^while.body6, i32 %168];
    i32 %158 = phi [^while.body5, i32 %154] [^while.body6, i32 %167];
    i32 %159 = phi [^while.body5, i32 %153] [^while.body6, i32 %166];
    i32* %160 = getelementptr &(i32* %32)[i32 %157];
    i32 %161 = load i32* %160;
    i32* %162 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %161];
    i32 %163 = load i32* %162;
    i32 %164 = add i32 %163, i32 1;
    i1 %165 = icmp slt i32 %158, i32 %164;
    i32 %166 = select i1 %165 ? i32 %161 : i32 %159;
    store i32* %162 with i32 %164;
    i32 %167 = smax i32 %158, i32 %164;
    i32 %168 = add i32 %157, i32 1;
    i1 %169 = icmp slt i32 %168, i32 32;
    cbr i1 %169(prob = 0.97), ^while.body6, ^b1;
  ^b1:
    call (i32) -> void @putint(i32 %166);
    ubr ^super.header;
  ^super.header:
    i32 %170 = phi [^b1, i32 0] [^while.body7, i32 %171];
    i32 %171 = add i32 %170, i32 4;
    i1 %172 = icmp slt i32 %171, i32 32;
    cbr i1 %172(prob = 0.89), ^while.body7, ^while.body8;
  ^while.body7:
    i32* %173 = getelementptr &(i32* %0)[i32 %170];
    i32 %174 = load i32* %173;
    i32* %175 = getelementptr &(i32* %32)[i32 %170];
    store i32* %175 with i32 %174;
    i32* %176 = getelementptr &(i32* %173)[i64 1];
    i32 %177 = load i32* %176;
    i32* %178 = getelementptr &(i32* %175)[i64 1];
    store i32* %178 with i32 %177;
    i32* %179 = getelementptr &(i32* %173)[i64 2];
    i32 %180 = load i32* %179;
    i32* %181 = getelementptr &(i32* %175)[i64 2];
    store i32* %181 with i32 %180;
    i32* %182 = getelementptr &(i32* %173)[i64 3];
    i32 %183 = load i32* %182;
    i32* %184 = getelementptr &(i32* %175)[i64 3];
    store i32* %184 with i32 %183;
    ubr ^super.header;
  ^while.body8:
    i32 %185 = phi [^super.header, i32 %170] [^while.body8, i32 %189];
    i32* %186 = getelementptr &(i32* %0)[i32 %185];
    i32 %187 = load i32* %186;
    i32* %188 = getelementptr &(i32* %32)[i32 %185];
    store i32* %188 with i32 %187;
    i32 %189 = add i32 %185, i32 1;
    i1 %190 = icmp slt i32 %189, i32 32;
    cbr i1 %190(prob = 0.97), ^while.body8, ^while.header2;
  ^while.header2:
    i32 %191 = phi [^while.body8, i32 0] [^b2, i32 %202];
    i32 %192 = sub i32 32, i32 %191;
    i32 %193 = add i32 %192, i32 -1;
    i1 %194 = icmp slt i32 %191, i32 31;
    cbr i1 %194(prob = 0.97), ^while.header3, ^while.body9;
  ^while.header3:
    i32 %195 = phi [^while.header2, i32 0] [^while.body10, i32 %208] [^if.then2, i32 %208];
    i1 %196 = icmp sgt i32 %193, i32 %195;
    cbr i1 %196(prob = 0.97), ^while.body10, ^b2;
  ^while.body9:
    i32 %197 = phi [^while.header2, i32 0] [^while.body9, i32 %200];
    i32* %198 = getelementptr &([32 * i32]* %result)[i64 0][i32 %197];
    i32 %199 = load i32* %198;
    call (i32) -> void @putint(i32 %199);
    i32 %200 = add i32 %197, i32 1;
    i1 %201 = icmp slt i32 %200, i32 32;
    cbr i1 %201(prob = 0.97), ^while.body9, ^super.header1;
  ^b2:
    i32 %202 = add i32 %191, i32 1;
    ubr ^while.header2;
  ^while.body10:
    i32* %203 = getelementptr &(i32* %32)[i32 %195];
    i32 %204 = load i32* %203;
    i32* %205 = getelementptr &(i32* %203)[i64 1];
    i32 %206 = load i32* %205;
    i1 %207 = icmp sgt i32 %204, i32 %206;
    i32 %208 = add i32 %195, i32 1;
    cbr i1 %207(prob = 0.5), ^if.then2, ^while.header3;
  ^super.header1:
    i32 %209 = phi [^while.body9, i32 0] [^while.body11, i32 %210];
    i32 %210 = add i32 %209, i32 4;
    i1 %211 = icmp slt i32 %210, i32 32;
    cbr i1 %211(prob = 0.89), ^while.body11, ^while.body12;
  ^if.then2:
    store i32* %205 with i32 %204;
    store i32* %203 with i32 %206;
    ubr ^while.header3;
  ^while.body11:
    i32* %212 = getelementptr &(i32* %0)[i32 %209];
    i32 %213 = load i32* %212;
    i32* %214 = getelementptr &(i32* %32)[i32 %209];
    store i32* %214 with i32 %213;
    i32* %215 = getelementptr &(i32* %212)[i64 1];
    i32 %216 = load i32* %215;
    i32* %217 = getelementptr &(i32* %214)[i64 1];
    store i32* %217 with i32 %216;
    i32* %218 = getelementptr &(i32* %212)[i64 2];
    i32 %219 = load i32* %218;
    i32* %220 = getelementptr &(i32* %214)[i64 2];
    store i32* %220 with i32 %219;
    i32* %221 = getelementptr &(i32* %212)[i64 3];
    i32 %222 = load i32* %221;
    i32* %223 = getelementptr &(i32* %214)[i64 3];
    store i32* %223 with i32 %222;
    ubr ^super.header1;
  ^while.body12:
    i32 %224 = phi [^super.header1, i32 %209] [^while.body12, i32 %228];
    i32* %225 = getelementptr &(i32* %0)[i32 %224];
    i32 %226 = load i32* %225;
    i32* %227 = getelementptr &(i32* %32)[i32 %224];
    store i32* %227 with i32 %226;
    i32 %228 = add i32 %224, i32 1;
    i1 %229 = icmp slt i32 %228, i32 32;
    cbr i1 %229(prob = 0.97), ^while.body12, ^while.header4;
  ^while.header4:
    i32 %230 = phi [^while.body12, i32 1] [^b5, i32 %274];
    i1 %231 = icmp slt i32 %230, i32 32;
    cbr i1 %231(prob = 0.97), ^while.body13, ^while.body14;
  ^while.body13:
    i32* %232 = getelementptr &(i32* %32)[i32 %230];
    i32 %233 = load i32* %232;
    i32 %234 = add i32 %230, i32 -1;
    ubr ^while.header5;
  ^while.body14:
    i32 %235 = phi [^while.header4, i32 0] [^while.body14, i32 %238];
    i32* %236 = getelementptr &([32 * i32]* %result)[i64 0][i32 %235];
    i32 %237 = load i32* %236;
    call (i32) -> void @putint(i32 %237);
    i32 %238 = add i32 %235, i32 1;
    i1 %239 = icmp slt i32 %238, i32 32;
    cbr i1 %239(prob = 0.97), ^while.body14, ^super.header2;
  ^while.header5:
    i32 %240 = phi [^while.body13, i32 %234] [^while.body17, i32 %271];
    i1 %241 = icmp sgt i32 %240, i32 -1;
    cbr i1 %241(prob = 0.5), ^b3, ^b4;
  ^super.header2:
    i32 %242 = phi [^while.body14, i32 0] [^while.body15, i32 %243];
    i32 %243 = add i32 %242, i32 4;
    i1 %244 = icmp slt i32 %243, i32 32;
    cbr i1 %244(prob = 0.89), ^while.body15, ^while.body16;
  ^b3:
    i32* %245 = getelementptr &(i32* %32)[i32 %240];
    i32 %246 = load i32* %245;
    i1 %247 = icmp slt i32 %233, i32 %246;
    ubr ^b4;
  ^while.body15:
    i32* %248 = getelementptr &(i32* %0)[i32 %242];
    i32 %249 = load i32* %248;
    i32* %250 = getelementptr &(i32* %32)[i32 %242];
    store i32* %250 with i32 %249;
    i32* %251 = getelementptr &(i32* %248)[i64 1];
    i32 %252 = load i32* %251;
    i32* %253 = getelementptr &(i32* %250)[i64 1];
    store i32* %253 with i32 %252;
    i32* %254 = getelementptr &(i32* %248)[i64 2];
    i32 %255 = load i32* %254;
    i32* %256 = getelementptr &(i32* %250)[i64 2];
    store i32* %256 with i32 %255;
    i32* %257 = getelementptr &(i32* %248)[i64 3];
    i32 %258 = load i32* %257;
    i32* %259 = getelementptr &(i32* %250)[i64 3];
    store i32* %259 with i32 %258;
    ubr ^super.header2;
  ^b4:
    i1 %260 = phi [^while.header5, i1 false] [^b3, i1 %247];
    cbr i1 %260(prob = 0.97), ^while.body17, ^b5;
  ^while.body16:
    i32 %261 = phi [^super.header2, i32 %242] [^while.body16, i32 %265];
    i32* %262 = getelementptr &(i32* %0)[i32 %261];
    i32 %263 = load i32* %262;
    i32* %264 = getelementptr &(i32* %32)[i32 %261];
    store i32* %264 with i32 %263;
    i32 %265 = add i32 %261, i32 1;
    i1 %266 = icmp slt i32 %265, i32 32;
    cbr i1 %266(prob = 0.97), ^while.body16, ^b6;
  ^while.body17:
    i32 %267 = add i32 %240, i32 1;
    i32* %268 = getelementptr &(i32* %32)[i32 %267];
    i32* %269 = getelementptr &(i32* %32)[i32 %240];
    i32 %270 = load i32* %269;
    store i32* %268 with i32 %270;
    i32 %271 = add i32 %240, i32 -1;
    ubr ^while.header5;
  ^b5:
    i32 %272 = add i32 %240, i32 1;
    i32* %273 = getelementptr &(i32* %32)[i32 %272];
    store i32* %273 with i32 %233;
    i32 %274 = add i32 %230, i32 1;
    ubr ^while.header4;
  ^b6:
    call (i32*, i32, i32) -> void @QuickSort(i32* %32, i32 0, i32 31);
    ubr ^while.body18;
  ^while.body18:
    i32 %275 = phi [^b6, i32 0] [^while.body18, i32 %278];
    i32* %276 = getelementptr &([32 * i32]* %result)[i64 0][i32 %275];
    i32 %277 = load i32* %276;
    call (i32) -> void @putint(i32 %277);
    i32 %278 = add i32 %275, i32 1;
    i1 %279 = icmp slt i32 %278, i32 32;
    cbr i1 %279(prob = 0.97), ^while.body18, ^super.header3;
  ^super.header3:
    i32 %280 = phi [^while.body18, i32 0] [^while.body19, i32 %281];
    i32 %281 = add i32 %280, i32 4;
    i1 %282 = icmp slt i32 %281, i32 32;
    cbr i1 %282(prob = 0.89), ^while.body19, ^while.body20;
  ^while.body19:
    i32* %283 = getelementptr &(i32* %0)[i32 %280];
    i32 %284 = load i32* %283;
    i32* %285 = getelementptr &(i32* %32)[i32 %280];
    store i32* %285 with i32 %284;
    i32* %286 = getelementptr &(i32* %283)[i64 1];
    i32 %287 = load i32* %286;
    i32* %288 = getelementptr &(i32* %285)[i64 1];
    store i32* %288 with i32 %287;
    i32* %289 = getelementptr &(i32* %283)[i64 2];
    i32 %290 = load i32* %289;
    i32* %291 = getelementptr &(i32* %285)[i64 2];
    store i32* %291 with i32 %290;
    i32* %292 = getelementptr &(i32* %283)[i64 3];
    i32 %293 = load i32* %292;
    i32* %294 = getelementptr &(i32* %285)[i64 3];
    store i32* %294 with i32 %293;
    ubr ^super.header3;
  ^while.body20:
    i32 %295 = phi [^super.header3, i32 %280] [^while.body20, i32 %299];
    i32* %296 = getelementptr &(i32* %0)[i32 %295];
    i32 %297 = load i32* %296;
    i32* %298 = getelementptr &(i32* %32)[i32 %295];
    store i32* %298 with i32 %297;
    i32 %299 = add i32 %295, i32 1;
    i1 %300 = icmp slt i32 %299, i32 32;
    cbr i1 %300(prob = 0.97), ^while.body20, ^while.header6;
  ^while.header6:
    i32 %301 = phi [^while.body20, i32 0] [^if.then3, i32 %306] [^if.else, i32 0];
    i32 %302 = phi [^while.body20, i32 0] [^if.then3, i32 %314] [^if.else, i32 %315];
    i1 %303 = icmp slt i32 %302, i32 32;
    cbr i1 %303(prob = 0.97), ^while.body21, ^while.body22;
  ^while.body21:
    i32* %304 = getelementptr &(i32* %32)[i32 %302];
    i32 %305 = load i32* %304;
    i32 %306 = add i32 %301, i32 %305;
    i32 %307 = srem i32 %302, i32 4;
    i1 %308 = icmp neq i32 %307, i32 3;
    cbr i1 %308(prob = 0.5), ^if.then3, ^if.else;
  ^while.body22:
    i32 %309 = phi [^while.header6, i32 0] [^while.body22, i32 %312];
    i32* %310 = getelementptr &([32 * i32]* %result)[i64 0][i32 %309];
    i32 %311 = load i32* %310;
    call (i32) -> void @putint(i32 %311);
    i32 %312 = add i32 %309, i32 1;
    i1 %313 = icmp slt i32 %312, i32 32;
    cbr i1 %313(prob = 0.97), ^while.body22, ^super.header4;
  ^if.then3:
    store i32* %304 with i32 0;
    i32 %314 = add i32 %302, i32 1;
    ubr ^while.header6;
  ^if.else:
    store i32* %304 with i32 %306;
    i32 %315 = add i32 %302, i32 1;
    ubr ^while.header6;
  ^super.header4:
    i32 %316 = phi [^while.body22, i32 0] [^while.body23, i32 %317];
    i32 %317 = add i32 %316, i32 4;
    i1 %318 = icmp slt i32 %317, i32 32;
    cbr i1 %318(prob = 0.89), ^while.body23, ^while.body24;
  ^while.body23:
    i32* %319 = getelementptr &(i32* %0)[i32 %316];
    i32 %320 = load i32* %319;
    i32* %321 = getelementptr &(i32* %32)[i32 %316];
    store i32* %321 with i32 %320;
    i32* %322 = getelementptr &(i32* %319)[i64 1];
    i32 %323 = load i32* %322;
    i32* %324 = getelementptr &(i32* %321)[i64 1];
    store i32* %324 with i32 %323;
    i32* %325 = getelementptr &(i32* %319)[i64 2];
    i32 %326 = load i32* %325;
    i32* %327 = getelementptr &(i32* %321)[i64 2];
    store i32* %327 with i32 %326;
    i32* %328 = getelementptr &(i32* %319)[i64 3];
    i32 %329 = load i32* %328;
    i32* %330 = getelementptr &(i32* %321)[i64 3];
    store i32* %330 with i32 %329;
    ubr ^super.header4;
  ^while.body24:
    i32 %331 = phi [^super.header4, i32 %316] [^while.body24, i32 %335];
    i32* %332 = getelementptr &(i32* %0)[i32 %331];
    i32 %333 = load i32* %332;
    i32* %334 = getelementptr &(i32* %32)[i32 %331];
    store i32* %334 with i32 %333;
    i32 %335 = add i32 %331, i32 1;
    i1 %336 = icmp slt i32 %335, i32 32;
    cbr i1 %336(prob = 0.97), ^while.body24, ^while.header7;
  ^while.header7:
    i32 %337 = phi [^while.body24, i32 0] [^if.then4, i32 %337] [^if.then5, i32 %358] [^if.else2, i32 %367];
    i32 %338 = phi [^while.body24, i32 0] [^if.then4, i32 %347] [^if.then5, i32 %338] [^if.else2, i32 %364];
    i32 %339 = phi [^while.body24, i32 0] [^if.then4, i32 %348] [^if.then5, i32 %360] [^if.else2, i32 %368];
    i1 %340 = icmp slt i32 %339, i32 32;
    cbr i1 %340(prob = 0.97), ^while.body25, ^super.header5;
  ^while.body25:
    i1 %341 = icmp slt i32 %339, i32 2;
    cbr i1 %341(prob = 0.5), ^if.then4, ^if.else1;
  ^super.header5:
    i32 %342 = phi [^while.header7, i32 30] [^while.body26, i32 %343];
    i32 %343 = add i32 %342, i32 4;
    i1 %344 = icmp slt i32 %343, i32 32;
    cbr i1 %344(prob = 0.89), ^while.body26, ^while.body27;
  ^if.then4:
    i32* %345 = getelementptr &(i32* %32)[i32 %339];
    i32 %346 = load i32* %345;
    i32 %347 = add i32 %338, i32 %346;
    i32 %348 = add i32 %339, i32 1;
    ubr ^while.header7;
  ^while.body26:
    i32* %349 = getelementptr &(i32* %32)[i32 %342];
    store i32* %349 with i32 0;
    i32* %350 = getelementptr &(i32* %349)[i64 1];
    store i32* %350 with i32 0;
    i32* %351 = getelementptr &(i32* %349)[i64 2];
    store i32* %351 with i32 0;
    i32* %352 = getelementptr &(i32* %349)[i64 3];
    store i32* %352 with i32 0;
    ubr ^super.header5;
  ^if.else1:
    i1 %353 = icmp eq i32 %339, i32 2;
    cbr i1 %353(prob = 0.5), ^if.then5, ^if.else2;
  ^while.body27:
    i32 %354 = phi [^super.header5, i32 %342] [^while.body27, i32 %356];
    i32* %355 = getelementptr &(i32* %32)[i32 %354];
    store i32* %355 with i32 0;
    i32 %356 = add i32 %354, i32 1;
    i1 %357 = icmp slt i32 %356, i32 32;
    cbr i1 %357(prob = 0.97), ^while.body27, ^while.body28;
  ^if.then5:
    i32 %358 = load i32* %32;
    i32 %359 = sdiv i32 %338, i32 3;
    store i32* %32 with i32 %359;
    i32 %360 = add i32 %339, i32 1;
    ubr ^while.header7;
  ^if.else2:
    i32* %361 = getelementptr &(i32* %32)[i32 %339];
    i32 %362 = load i32* %361;
    i32 %363 = add i32 %338, i32 %362;
    i32 %364 = sub i32 %363, i32 %337;
    i32 %365 = sdiv i32 %364, i32 3;
    i32* %366 = getelementptr &(i32* %361)[i64 -2];
    i32 %367 = load i32* %366;
    store i32* %366 with i32 %365;
    i32 %368 = add i32 %339, i32 1;
    ubr ^while.header7;
  ^while.body28:
    i32 %369 = phi [^while.body27, i32 0] [^while.body28, i32 %372];
    i32* %370 = getelementptr &([32 * i32]* %result)[i64 0][i32 %369];
    i32 %371 = load i32* %370;
    call (i32) -> void @putint(i32 %371);
    i32 %372 = add i32 %369, i32 1;
    i1 %373 = icmp slt i32 %372, i32 32;
    cbr i1 %373(prob = 0.97), ^while.body28, ^b7;
  ^b7:
    ret i32 0;
}
internal [1000 * i32]* @count;
