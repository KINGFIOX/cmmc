internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @QuickSort(i32* %arr, i32 %low, i32 %high, i32* %0) -> i32 {
^entry:
    i32* %k = alloc i32;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    i32* %high1 = alloc i32;
    i32* %low1 = alloc i32;
    i32** %arr1 = alloc i32*;
    store i32** %arr1 with i32* %arr;
    store i32* %low1 with i32 %low;
    store i32* %high1 with i32 %high;
    i1 %1 = scmp lt i32 %low, i32 %high;
    cbr i1 %1(prob = 0.5), ^if.then, ^b;
^if.then:
    store i32* %i with i32 %low;
    store i32* %j with i32 %high;
    store i32* %k with i32 0;
    i32* %2 = getelementptr &(i32* %arr)[i32 %low];
    i32 %3 = load i32* %2;
    store i32* %k with i32 %3;
    ubr ^while.header;
^b:
    ret i32 0;
^while.header:
    i32 %4 = phi [^b7, i32 %33] [^if.then2, i32 %45] [^if.then, i32 %low];
    i32 %5 = phi [^b7, i32 %34] [^if.then2, i32 %48] [^if.then, i32 %high];
    i32 %6 = phi [^b7, i32 %35] [^if.then2, i32 %47] [^if.then, i32 %3];
    i1 %7 = scmp lt i32 %4, i32 %5;
    i32 %8 = add i32 %6, i32 -1;
    cbr i1 %7(prob = 0.97), ^while.header1, ^b1;
^b1:
    i32* %9 = getelementptr &(i32* %arr)[i32 %4];
    store i32* %9 with i32 %6;
    i32 %10 = load i32* %low1;
    i32 %11 = load i32* %i;
    i32 %12 = add i32 %11, i32 -1;
    i32 %13 = call (i32*, i32, i32, i32*) -> i32 @QuickSort(i32* %arr, i32 %10, i32 %12, i32* %0);
    i32* %14 = load i32** %arr1;
    i32 %15 = load i32* %high1;
    i32 %16 = load i32* %i;
    i32 %17 = add i32 %16, i32 1;
    i32 %18 = call (i32*, i32, i32, i32*) -> i32 @QuickSort(i32* %14, i32 %17, i32 %15, i32* %0);
    ubr ^b;
^while.header1:
    i32 %19 = phi [^while.header, i32 %5] [^while.body, i32 %25];
    i1 %20 = scmp lt i32 %4, i32 %19;
    cbr i1 %20(prob = 0.5), ^b2, ^b3;
^b2:
    i32* %21 = getelementptr &(i32* %arr)[i32 %19];
    i32 %22 = load i32* %21;
    i1 %23 = scmp gt i32 %22, i32 %8;
    ubr ^b3;
^b3:
    i1 %24 = phi [^b2, i1 %23] [^while.header1, i1 false];
    cbr i1 %24(prob = 0.97), ^while.body, ^b4;
^while.body:
    i32 %25 = add i32 %19, i32 -1;
    store i32* %j with i32 %25;
    ubr ^while.header1;
^b4:
    cbr i1 %20(prob = 0.5), ^if.then1, ^while.header2;
^if.then1:
    i32* %26 = getelementptr &(i32* %arr)[i32 %4];
    i32* %27 = getelementptr &(i32* %arr)[i32 %19];
    i32 %28 = load i32* %27;
    store i32* %26 with i32 %28;
    i32 %29 = load i32* %i;
    i32 %30 = load i32* %j;
    i32 %31 = load i32* %k;
    i32 %32 = add i32 %29, i32 1;
    store i32* %i with i32 %32;
    ubr ^while.header2;
^while.header2:
    i32 %33 = phi [^while.body1, i32 %41] [^if.then1, i32 %32] [^b4, i32 %4];
    i32 %34 = phi [^while.body1, i32 %34] [^if.then1, i32 %30] [^b4, i32 %19];
    i32 %35 = phi [^while.body1, i32 %35] [^if.then1, i32 %31] [^b4, i32 %6];
    i1 %36 = scmp lt i32 %33, i32 %34;
    cbr i1 %36(prob = 0.5), ^b5, ^b6;
^b5:
    i32* %37 = getelementptr &(i32* %arr)[i32 %33];
    i32 %38 = load i32* %37;
    i1 %39 = scmp lt i32 %38, i32 %35;
    ubr ^b6;
^b6:
    i1 %40 = phi [^b5, i1 %39] [^while.header2, i1 false];
    cbr i1 %40(prob = 0.97), ^while.body1, ^b7;
^while.body1:
    i32 %41 = add i32 %33, i32 1;
    store i32* %i with i32 %41;
    ubr ^while.header2;
^b7:
    cbr i1 %36(prob = 0.5), ^if.then2, ^while.header;
^if.then2:
    i32* %42 = getelementptr &(i32* %arr)[i32 %34];
    i32* %43 = getelementptr &(i32* %arr)[i32 %33];
    i32 %44 = load i32* %43;
    store i32* %42 with i32 %44;
    i32 %45 = load i32* %i;
    i32 %46 = load i32* %j;
    i32 %47 = load i32* %k;
    i32 %48 = add i32 %46, i32 -1;
    store i32* %j with i32 %48;
    ubr ^while.header;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %stride = alloc i32;
    i32* %sum = alloc i32;
    i32* %i = alloc i32;
    i32* %lastnum = alloc i32;
    i32* %i1 = alloc i32;
    i32* %stride1 = alloc i32;
    i32* %i2 = alloc i32;
    i32* %i3 = alloc i32;
    i32* %i4 = alloc i32;
    i32* %i5 = alloc i32;
    i32* %temp = alloc i32;
    i32* %j = alloc i32;
    i32* %i6 = alloc i32;
    i32* %i7 = alloc i32;
    i32* %j1 = alloc i32;
    i32* %i8 = alloc i32;
    [1000 * i32]* %count = alloc [1000 * i32];
    i32* %i9 = alloc i32;
    i32* %j2 = alloc i32;
    i32* %i10 = alloc i32;
    i32* %j3 = alloc i32;
    i32* %i11 = alloc i32;
    i32* %n = alloc i32;
    i32* %i12 = alloc i32;
    [32 * i32]* %result = alloc [32 * i32];
    [32 * i32]* %arr = alloc [32 * i32];
    store i32* %n with i32 32;
    i32* %0 = getelementptr &([32 * i32]* %arr)[i64 0][i64 0];
    store i32* %0 with i32 7;
    i32* %1 = getelementptr &([32 * i32]* %arr)[i64 0][i64 1];
    store i32* %1 with i32 23;
    i32* %2 = getelementptr &([32 * i32]* %arr)[i64 0][i64 2];
    store i32* %2 with i32 89;
    i32* %3 = getelementptr &([32 * i32]* %arr)[i64 0][i64 3];
    store i32* %3 with i32 26;
    i32* %4 = getelementptr &([32 * i32]* %arr)[i64 0][i64 4];
    store i32* %4 with i32 282;
    i32* %5 = getelementptr &([32 * i32]* %arr)[i64 0][i64 5];
    store i32* %5 with i32 254;
    i32* %6 = getelementptr &([32 * i32]* %arr)[i64 0][i64 6];
    store i32* %6 with i32 27;
    i32* %7 = getelementptr &([32 * i32]* %arr)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([32 * i32]* %arr)[i64 0][i64 8];
    store i32* %8 with i32 83;
    i32* %9 = getelementptr &([32 * i32]* %arr)[i64 0][i64 9];
    store i32* %9 with i32 273;
    i32* %10 = getelementptr &([32 * i32]* %arr)[i64 0][i64 10];
    store i32* %10 with i32 574;
    i32* %11 = getelementptr &([32 * i32]* %arr)[i64 0][i64 11];
    store i32* %11 with i32 905;
    i32* %12 = getelementptr &([32 * i32]* %arr)[i64 0][i64 12];
    store i32* %12 with i32 354;
    i32* %13 = getelementptr &([32 * i32]* %arr)[i64 0][i64 13];
    store i32* %13 with i32 657;
    i32* %14 = getelementptr &([32 * i32]* %arr)[i64 0][i64 14];
    store i32* %14 with i32 935;
    i32* %15 = getelementptr &([32 * i32]* %arr)[i64 0][i64 15];
    store i32* %15 with i32 264;
    i32* %16 = getelementptr &([32 * i32]* %arr)[i64 0][i64 16];
    store i32* %16 with i32 639;
    i32* %17 = getelementptr &([32 * i32]* %arr)[i64 0][i64 17];
    store i32* %17 with i32 459;
    i32* %18 = getelementptr &([32 * i32]* %arr)[i64 0][i64 18];
    store i32* %18 with i32 29;
    i32* %19 = getelementptr &([32 * i32]* %arr)[i64 0][i64 19];
    store i32* %19 with i32 68;
    i32* %20 = getelementptr &([32 * i32]* %arr)[i64 0][i64 20];
    store i32* %20 with i32 929;
    i32* %21 = getelementptr &([32 * i32]* %arr)[i64 0][i64 21];
    store i32* %21 with i32 756;
    i32* %22 = getelementptr &([32 * i32]* %arr)[i64 0][i64 22];
    store i32* %22 with i32 452;
    i32* %23 = getelementptr &([32 * i32]* %arr)[i64 0][i64 23];
    store i32* %23 with i32 279;
    i32* %24 = getelementptr &([32 * i32]* %arr)[i64 0][i64 24];
    store i32* %24 with i32 58;
    i32* %25 = getelementptr &([32 * i32]* %arr)[i64 0][i64 25];
    store i32* %25 with i32 87;
    i32* %26 = getelementptr &([32 * i32]* %arr)[i64 0][i64 26];
    store i32* %26 with i32 96;
    i32* %27 = getelementptr &([32 * i32]* %arr)[i64 0][i64 27];
    store i32* %27 with i32 36;
    i32* %28 = getelementptr &([32 * i32]* %arr)[i64 0][i64 28];
    store i32* %28 with i32 39;
    i32* %29 = getelementptr &([32 * i32]* %arr)[i64 0][i64 29];
    store i32* %29 with i32 28;
    i32* %30 = getelementptr &([32 * i32]* %arr)[i64 0][i64 30];
    store i32* %30 with i32 1;
    i32* %31 = getelementptr &([32 * i32]* %arr)[i64 0][i64 31];
    store i32* %31 with i32 290;
    i32* %32 = getelementptr &([32 * i32]* %result)[i64 0][i64 0];
    store i32* %i11 with i32 0;
    ubr ^while.header;
^while.header:
    i32 %33 = phi [^while.body, i32 %39] [^entry, i32 32];
    i32 %34 = phi [^while.body, i32 %41] [^entry, i32 0];
    i1 %35 = scmp lt i32 %34, i32 %33;
    cbr i1 %35(prob = 0.97), ^while.body, ^entry1;
^while.body:
    i32* %36 = getelementptr &(i32* %32)[i32 %34];
    i32* %37 = getelementptr &(i32* %0)[i32 %34];
    i32 %38 = load i32* %37;
    store i32* %36 with i32 %38;
    i32 %39 = load i32* %n;
    i32 %40 = load i32* %i11;
    i32 %41 = add i32 %40, i32 1;
    store i32* %i11 with i32 %41;
    ubr ^while.header;
^entry1:
    store i32* %i10 with i32 0;
    store i32* %j3 with i32 0;
    ubr ^while.header1;
^while.header1:
    i32 %42 = phi [^while.body1, i32 %52] [^entry1, i32 %33];
    i32 %43 = phi [^while.body1, i32 %55] [^entry1, i32 0];
    i32 %44 = phi [^while.body1, i32 %54] [^entry1, i32 0];
    i1 %45 = scmp lt i32 %44, i32 %43;
    cbr i1 %45(prob = 0.97), ^while.body1, ^while.header2;
^while.body1:
    i32* %46 = getelementptr &(i32* %32)[i32 %44];
    i32 %47 = load i32* %46;
    i32* %48 = getelementptr &(i32* %32)[i32 %43];
    i32 %49 = load i32* %48;
    store i32* %46 with i32 %49;
    i32 %50 = load i32* %j3;
    i32* %51 = getelementptr &(i32* %32)[i32 %50];
    store i32* %51 with i32 %47;
    i32 %52 = load i32* %n;
    i32 %53 = load i32* %i10;
    i32 %54 = add i32 %53, i32 1;
    store i32* %i10 with i32 %54;
    i32 %55 = add i32 %50, i32 -1;
    store i32* %j3 with i32 %55;
    ubr ^while.header1;
^while.header2:
    i32 %56 = phi [^while.header1, i32 0] [^while.body2, i32 %60];
    i1 %57 = scmp lt i32 %56, i32 32;
    cbr i1 %57(prob = 0.97), ^while.body2, ^entry2;
^while.body2:
    i32* %58 = getelementptr &([32 * i32]* %result)[i64 0][i32 %56];
    i32 %59 = load i32* %58;
    call (i32) -> void @putint(i32 %59);
    i32 %60 = add i32 %56, i32 1;
    ubr ^while.header2;
^entry2:
    store i32* %i9 with i32 0;
    ubr ^while.header3;
^while.header3:
    i32 %61 = phi [^b, i32 %70] [^entry2, i32 %42];
    i32 %62 = phi [^b, i32 %78] [^entry2, i32 0];
    i32 %63 = add i32 %61, i32 -1;
    i1 %64 = scmp lt i32 %62, i32 %63;
    cbr i1 %64(prob = 0.97), ^while.body3, ^while.header4;
^while.body3:
    store i32* %j2 with i32 0;
    ubr ^while.header5;
^while.header4:
    i32 %65 = phi [^while.header3, i32 0] [^while.body4, i32 %69];
    i1 %66 = scmp lt i32 %65, i32 32;
    cbr i1 %66(prob = 0.97), ^while.body4, ^entry3;
^while.body4:
    i32* %67 = getelementptr &([32 * i32]* %result)[i64 0][i32 %65];
    i32 %68 = load i32* %67;
    call (i32) -> void @putint(i32 %68);
    i32 %69 = add i32 %65, i32 1;
    ubr ^while.header4;
^while.header5:
    i32 %70 = phi [^b1, i32 %101] [^while.body3, i32 %61];
    i32 %71 = phi [^b1, i32 %104] [^while.body3, i32 0];
    i32 %72 = phi [^b1, i32 %103] [^while.body3, i32 %62];
    i32 %73 = sub i32 %70, i32 %72;
    i32 %74 = add i32 %73, i32 -1;
    i1 %75 = scmp lt i32 %71, i32 %74;
    cbr i1 %75(prob = 0.97), ^while.body5, ^b;
^entry3:
    i32 %76 = srem i32 %61, i32 2;
    i1 %77 = scmp eq i32 %76, i32 0;
    cbr i1 %77(prob = 0.5), ^if.then, ^if.else;
^b:
    i32 %78 = add i32 %72, i32 1;
    store i32* %i9 with i32 %78;
    ubr ^while.header3;
^while.body5:
    i32* %79 = getelementptr &(i32* %32)[i32 %71];
    i32 %80 = load i32* %79;
    i32* %81 = getelementptr &(i32* %79)[i64 1];
    i32 %82 = load i32* %81;
    i1 %83 = scmp gt i32 %80, i32 %82;
    cbr i1 %83(prob = 0.5), ^if.then1, ^b1;
^if.then:
    i32 %84 = sdiv i32 %61, i32 2;
    i32* %85 = getelementptr &(i32* %32)[i32 %84];
    i32 %86 = load i32* %85;
    i32* %87 = getelementptr &(i32* %85)[i64 -1];
    i32 %88 = load i32* %87;
    i32 %89 = add i32 %86, i32 %88;
    i32 %90 = sdiv i32 %89, i32 2;
    ubr ^b2;
^if.else:
    i32 %91 = sdiv i32 %61, i32 2;
    i32* %92 = getelementptr &(i32* %32)[i32 %91];
    i32 %93 = load i32* %92;
    ubr ^b2;
^if.then1:
    i32 %94 = add i32 %71, i32 1;
    i32* %95 = getelementptr &(i32* %32)[i32 %94];
    i32 %96 = load i32* %95;
    store i32* %95 with i32 %80;
    i32 %97 = load i32* %j2;
    i32* %98 = getelementptr &(i32* %32)[i32 %97];
    store i32* %98 with i32 %96;
    i32 %99 = load i32* %n;
    i32 %100 = load i32* %i9;
    ubr ^b1;
^b1:
    i32 %101 = phi [^if.then1, i32 %99] [^while.body5, i32 %70];
    i32 %102 = phi [^if.then1, i32 %97] [^while.body5, i32 %71];
    i32 %103 = phi [^if.then1, i32 %100] [^while.body5, i32 %72];
    i32 %104 = add i32 %102, i32 1;
    store i32* %j2 with i32 %104;
    ubr ^while.header5;
^b2:
    i32 %105 = phi [^if.then, i32 %90] [^if.else, i32 %93];
    call (i32) -> void @putint(i32 %105);
    ubr ^while.header6;
^while.header6:
    i32 %106 = phi [^while.body6, i32 %109] [^b2, i32 0];
    i1 %107 = scmp lt i32 %106, i32 1000;
    cbr i1 %107(prob = 0.97), ^while.body6, ^while.header7;
^while.body6:
    i32* %108 = getelementptr &([1000 * i32]* %count)[i64 0][i32 %106];
    store i32* %108 with i32 0;
    i32 %109 = add i32 %106, i32 1;
    ubr ^while.header6;
^while.header7:
    i32 %110 = phi [^while.header6, i32 0] [^b4, i32 %120];
    i32 %111 = phi [^while.header6, i32 0] [^b4, i32 %121];
    i32 %112 = phi [^while.header6, i32 0] [^b4, i32 %122];
    i1 %113 = scmp lt i32 %112, i32 %61;
    cbr i1 %113(prob = 0.97), ^while.body7, ^b3;
^b3:
    call (i32) -> void @putint(i32 %110);
    store i32* %i8 with i32 0;
    ubr ^while.header8;
^while.body7:
    i32* %114 = getelementptr &(i32* %32)[i32 %112];
    i32 %115 = load i32* %114;
    i32* %116 = getelementptr &([1000 * i32]* %count)[i64 0][i32 %115];
    i32 %117 = load i32* %116;
    i32 %118 = add i32 %117, i32 1;
    store i32* %116 with i32 %118;
    i1 %119 = scmp gt i32 %118, i32 %111;
    cbr i1 %119(prob = 0.5), ^if.then2, ^b4;
^if.then2:
    ubr ^b4;
^b4:
    i32 %120 = phi [^if.then2, i32 %115] [^while.body7, i32 %110];
    i32 %121 = phi [^if.then2, i32 %118] [^while.body7, i32 %111];
    i32 %122 = add i32 %112, i32 1;
    ubr ^while.header7;
^while.header8:
    i32 %123 = phi [^while.body8, i32 %129] [^b3, i32 %61];
    i32 %124 = phi [^while.body8, i32 %131] [^b3, i32 0];
    i1 %125 = scmp lt i32 %124, i32 %123;
    cbr i1 %125(prob = 0.97), ^while.body8, ^b5;
^while.body8:
    i32* %126 = getelementptr &(i32* %32)[i32 %124];
    i32* %127 = getelementptr &(i32* %0)[i32 %124];
    i32 %128 = load i32* %127;
    store i32* %126 with i32 %128;
    i32 %129 = load i32* %n;
    i32 %130 = load i32* %i8;
    i32 %131 = add i32 %130, i32 1;
    store i32* %i8 with i32 %131;
    ubr ^while.header8;
^b5:
    store i32* %i7 with i32 0;
    ubr ^while.header9;
^while.header9:
    i32 %132 = phi [^b6, i32 %141] [^b5, i32 %123];
    i32 %133 = phi [^b6, i32 %147] [^b5, i32 0];
    i32 %134 = add i32 %132, i32 -1;
    i1 %135 = scmp lt i32 %133, i32 %134;
    cbr i1 %135(prob = 0.97), ^while.body9, ^while.header10;
^while.body9:
    store i32* %j1 with i32 0;
    ubr ^while.header11;
^while.header10:
    i32 %136 = phi [^while.header9, i32 0] [^while.body10, i32 %140];
    i1 %137 = scmp lt i32 %136, i32 32;
    cbr i1 %137(prob = 0.97), ^while.body10, ^entry4;
^while.body10:
    i32* %138 = getelementptr &([32 * i32]* %result)[i64 0][i32 %136];
    i32 %139 = load i32* %138;
    call (i32) -> void @putint(i32 %139);
    i32 %140 = add i32 %136, i32 1;
    ubr ^while.header10;
^while.header11:
    i32 %141 = phi [^b7, i32 %163] [^while.body9, i32 %132];
    i32 %142 = phi [^b7, i32 %166] [^while.body9, i32 0];
    i32 %143 = phi [^b7, i32 %165] [^while.body9, i32 %133];
    i32 %144 = sub i32 %141, i32 %143;
    i32 %145 = add i32 %144, i32 -1;
    i1 %146 = scmp lt i32 %142, i32 %145;
    cbr i1 %146(prob = 0.97), ^while.body11, ^b6;
^entry4:
    store i32* %i6 with i32 0;
    ubr ^while.header12;
^b6:
    i32 %147 = add i32 %143, i32 1;
    store i32* %i7 with i32 %147;
    ubr ^while.header9;
^while.body11:
    i32* %148 = getelementptr &(i32* %32)[i32 %142];
    i32 %149 = load i32* %148;
    i32* %150 = getelementptr &(i32* %148)[i64 1];
    i32 %151 = load i32* %150;
    i1 %152 = scmp gt i32 %149, i32 %151;
    cbr i1 %152(prob = 0.5), ^if.then3, ^b7;
^while.header12:
    i32 %153 = phi [^while.body12, i32 %170] [^entry4, i32 %132];
    i32 %154 = phi [^while.body12, i32 %172] [^entry4, i32 0];
    i1 %155 = scmp lt i32 %154, i32 %153;
    cbr i1 %155(prob = 0.97), ^while.body12, ^b8;
^if.then3:
    i32 %156 = add i32 %142, i32 1;
    i32* %157 = getelementptr &(i32* %32)[i32 %156];
    i32 %158 = load i32* %157;
    store i32* %157 with i32 %149;
    i32 %159 = load i32* %j1;
    i32* %160 = getelementptr &(i32* %32)[i32 %159];
    store i32* %160 with i32 %158;
    i32 %161 = load i32* %n;
    i32 %162 = load i32* %i7;
    ubr ^b7;
^b7:
    i32 %163 = phi [^if.then3, i32 %161] [^while.body11, i32 %141];
    i32 %164 = phi [^if.then3, i32 %159] [^while.body11, i32 %142];
    i32 %165 = phi [^if.then3, i32 %162] [^while.body11, i32 %143];
    i32 %166 = add i32 %164, i32 1;
    store i32* %j1 with i32 %166;
    ubr ^while.header11;
^while.body12:
    i32* %167 = getelementptr &(i32* %32)[i32 %154];
    i32* %168 = getelementptr &(i32* %0)[i32 %154];
    i32 %169 = load i32* %168;
    store i32* %167 with i32 %169;
    i32 %170 = load i32* %n;
    i32 %171 = load i32* %i6;
    i32 %172 = add i32 %171, i32 1;
    store i32* %i6 with i32 %172;
    ubr ^while.header12;
^b8:
    store i32* %i5 with i32 1;
    ubr ^while.header13;
^while.header13:
    i32 %173 = phi [^b11, i32 %203] [^b8, i32 %153];
    i32 %174 = phi [^b11, i32 %205] [^b8, i32 1];
    i1 %175 = scmp lt i32 %174, i32 %173;
    cbr i1 %175(prob = 0.97), ^while.body13, ^while.header14;
^while.body13:
    i32* %176 = getelementptr &(i32* %32)[i32 %174];
    i32 %177 = load i32* %176;
    store i32* %temp with i32 %177;
    i32 %178 = add i32 %174, i32 -1;
    store i32* %j with i32 %178;
    ubr ^while.header15;
^while.header14:
    i32 %179 = phi [^while.header13, i32 0] [^while.body14, i32 %183];
    i1 %180 = scmp lt i32 %179, i32 32;
    cbr i1 %180(prob = 0.97), ^while.body14, ^entry5;
^while.body14:
    i32* %181 = getelementptr &([32 * i32]* %result)[i64 0][i32 %179];
    i32 %182 = load i32* %181;
    call (i32) -> void @putint(i32 %182);
    i32 %183 = add i32 %179, i32 1;
    ubr ^while.header14;
^while.header15:
    i32 %184 = phi [^while.body15, i32 %200] [^while.body13, i32 %178];
    i32 %185 = phi [^while.body15, i32 %199] [^while.body13, i32 %177];
    i1 %186 = scmp gt i32 %184, i32 -1;
    cbr i1 %186(prob = 0.5), ^b9, ^b10;
^entry5:
    store i32* %i4 with i32 0;
    ubr ^while.header16;
^b9:
    i32* %187 = getelementptr &(i32* %32)[i32 %184];
    i32 %188 = load i32* %187;
    i1 %189 = scmp lt i32 %185, i32 %188;
    ubr ^b10;
^b10:
    i1 %190 = phi [^while.header15, i1 false] [^b9, i1 %189];
    cbr i1 %190(prob = 0.97), ^while.body15, ^b11;
^while.header16:
    i32 %191 = phi [^while.body16, i32 %209] [^entry5, i32 %173];
    i32 %192 = phi [^while.body16, i32 %211] [^entry5, i32 0];
    i1 %193 = scmp lt i32 %192, i32 %191;
    cbr i1 %193(prob = 0.97), ^while.body16, ^b12;
^while.body15:
    i32 %194 = add i32 %184, i32 1;
    i32* %195 = getelementptr &(i32* %32)[i32 %194];
    i32* %196 = getelementptr &(i32* %32)[i32 %184];
    i32 %197 = load i32* %196;
    store i32* %195 with i32 %197;
    i32 %198 = load i32* %j;
    i32 %199 = load i32* %temp;
    i32 %200 = add i32 %198, i32 -1;
    store i32* %j with i32 %200;
    ubr ^while.header15;
^b11:
    i32 %201 = add i32 %184, i32 1;
    i32* %202 = getelementptr &(i32* %32)[i32 %201];
    store i32* %202 with i32 %185;
    i32 %203 = load i32* %n;
    i32 %204 = load i32* %i5;
    i32 %205 = add i32 %204, i32 1;
    store i32* %i5 with i32 %205;
    ubr ^while.header13;
^while.body16:
    i32* %206 = getelementptr &(i32* %32)[i32 %192];
    i32* %207 = getelementptr &(i32* %0)[i32 %192];
    i32 %208 = load i32* %207;
    store i32* %206 with i32 %208;
    i32 %209 = load i32* %n;
    i32 %210 = load i32* %i4;
    i32 %211 = add i32 %210, i32 1;
    store i32* %i4 with i32 %211;
    ubr ^while.header16;
^b12:
    store i32* %i12 with i32 0;
    i32 %212 = call (i32*, i32, i32, i32*) -> i32 @QuickSort(i32* %32, i32 0, i32 31, i32* %n);
    i32 %213 = load i32* %i12;
    i32 %214 = load i32* %n;
    ubr ^while.header17;
^while.header17:
    i32 %215 = phi [^while.body17, i32 %219] [^b12, i32 %213];
    i1 %216 = scmp lt i32 %215, i32 32;
    cbr i1 %216(prob = 0.97), ^while.body17, ^entry6;
^while.body17:
    i32* %217 = getelementptr &([32 * i32]* %result)[i64 0][i32 %215];
    i32 %218 = load i32* %217;
    call (i32) -> void @putint(i32 %218);
    i32 %219 = add i32 %215, i32 1;
    ubr ^while.header17;
^entry6:
    store i32* %i3 with i32 0;
    ubr ^while.header18;
^while.header18:
    i32 %220 = phi [^while.body18, i32 %226] [^entry6, i32 %214];
    i32 %221 = phi [^while.body18, i32 %228] [^entry6, i32 0];
    i1 %222 = scmp lt i32 %221, i32 %220;
    cbr i1 %222(prob = 0.97), ^while.body18, ^b13;
^while.body18:
    i32* %223 = getelementptr &(i32* %32)[i32 %221];
    i32* %224 = getelementptr &(i32* %0)[i32 %221];
    i32 %225 = load i32* %224;
    store i32* %223 with i32 %225;
    i32 %226 = load i32* %n;
    i32 %227 = load i32* %i3;
    i32 %228 = add i32 %227, i32 1;
    store i32* %i3 with i32 %228;
    ubr ^while.header18;
^b13:
    store i32* %stride1 with i32 4;
    store i32* %i2 with i32 0;
    ubr ^while.header19;
^while.header19:
    i32 %229 = phi [^b14, i32 %251] [^b13, i32 %220];
    i32 %230 = phi [^b14, i32 %255] [^b13, i32 0];
    i32 %231 = phi [^b14, i32 %253] [^b13, i32 0];
    i32 %232 = phi [^b14, i32 %254] [^b13, i32 4];
    i1 %233 = scmp lt i32 %230, i32 %229;
    cbr i1 %233(prob = 0.97), ^while.body19, ^while.header20;
^while.body19:
    i32* %234 = getelementptr &(i32* %32)[i32 %230];
    i32 %235 = load i32* %234;
    i32 %236 = add i32 %235, i32 %231;
    i32 %237 = srem i32 %230, i32 %232;
    i32 %238 = add i32 %232, i32 -1;
    i1 %239 = scmp neq i32 %237, i32 %238;
    cbr i1 %239(prob = 0.5), ^if.then4, ^if.else1;
^while.header20:
    i32 %240 = phi [^while.header19, i32 0] [^while.body20, i32 %250];
    i1 %241 = scmp lt i32 %240, i32 32;
    cbr i1 %241(prob = 0.97), ^while.body20, ^entry7;
^if.then4:
    store i32* %234 with i32 0;
    i32 %242 = load i32* %n;
    i32 %243 = load i32* %i2;
    i32 %244 = load i32* %stride1;
    ubr ^b14;
^if.else1:
    store i32* %234 with i32 %236;
    i32 %245 = load i32* %n;
    i32 %246 = load i32* %i2;
    i32 %247 = load i32* %stride1;
    ubr ^b14;
^while.body20:
    i32* %248 = getelementptr &([32 * i32]* %result)[i64 0][i32 %240];
    i32 %249 = load i32* %248;
    call (i32) -> void @putint(i32 %249);
    i32 %250 = add i32 %240, i32 1;
    ubr ^while.header20;
^entry7:
    store i32* %i1 with i32 0;
    ubr ^while.header21;
^b14:
    i32 %251 = phi [^if.else1, i32 %245] [^if.then4, i32 %242];
    i32 %252 = phi [^if.else1, i32 %246] [^if.then4, i32 %243];
    i32 %253 = phi [^if.else1, i32 0] [^if.then4, i32 %236];
    i32 %254 = phi [^if.else1, i32 %247] [^if.then4, i32 %244];
    i32 %255 = add i32 %252, i32 1;
    store i32* %i2 with i32 %255;
    ubr ^while.header19;
^while.header21:
    i32 %256 = phi [^while.body21, i32 %262] [^entry7, i32 %229];
    i32 %257 = phi [^while.body21, i32 %264] [^entry7, i32 0];
    i1 %258 = scmp lt i32 %257, i32 %256;
    cbr i1 %258(prob = 0.97), ^while.body21, ^b15;
^while.body21:
    i32* %259 = getelementptr &(i32* %32)[i32 %257];
    i32* %260 = getelementptr &(i32* %0)[i32 %257];
    i32 %261 = load i32* %260;
    store i32* %259 with i32 %261;
    i32 %262 = load i32* %n;
    i32 %263 = load i32* %i1;
    i32 %264 = add i32 %263, i32 1;
    store i32* %i1 with i32 %264;
    ubr ^while.header21;
^b15:
    store i32* %stride with i32 3;
    store i32* %i with i32 0;
    store i32* %sum with i32 0;
    ubr ^while.header22;
^while.header22:
    i32 %265 = phi [^b17, i32 %282] [^b15, i32 %256];
    i32 %266 = phi [^b17, i32 %283] [^b15, i32 0];
    i32 %267 = phi [^b17, i32 %287] [^b15, i32 0];
    i32 %268 = phi [^b17, i32 %285] [^b15, i32 0];
    i32 %269 = phi [^b17, i32 %286] [^b15, i32 3];
    i1 %270 = scmp lt i32 %267, i32 %265;
    cbr i1 %270(prob = 0.97), ^while.body22, ^b16;
^b16:
    i32 %271 = sub i32 %265, i32 %269;
    i32 %272 = add i32 %271, i32 1;
    store i32* %i with i32 %272;
    ubr ^while.header23;
^while.body22:
    i32 %273 = add i32 %269, i32 -1;
    i1 %274 = scmp lt i32 %267, i32 %273;
    cbr i1 %274(prob = 0.5), ^if.then5, ^if.else2;
^if.then5:
    i32* %275 = getelementptr &(i32* %32)[i32 %267];
    i32 %276 = load i32* %275;
    i32 %277 = add i32 %276, i32 %268;
    store i32* %sum with i32 %277;
    ubr ^b17;
^if.else2:
    i1 %278 = scmp eq i32 %267, i32 %273;
    cbr i1 %278(prob = 0.5), ^if.then6, ^if.else3;
^while.header23:
    i32 %279 = phi [^while.body23, i32 %296] [^b16, i32 %265];
    i32 %280 = phi [^while.body23, i32 %298] [^b16, i32 %272];
    i1 %281 = scmp lt i32 %280, i32 %279;
    cbr i1 %281(prob = 0.97), ^while.body23, ^while.header24;
^b17:
    i32 %282 = phi [^if.else3, i32 %308] [^if.then6, i32 %290] [^if.then5, i32 %265];
    i32 %283 = phi [^if.else3, i32 %306] [^if.then6, i32 %291] [^if.then5, i32 %266];
    i32 %284 = phi [^if.else3, i32 %309] [^if.then6, i32 %292] [^if.then5, i32 %267];
    i32 %285 = phi [^if.else3, i32 %302] [^if.then6, i32 %293] [^if.then5, i32 %277];
    i32 %286 = phi [^if.else3, i32 %310] [^if.then6, i32 %294] [^if.then5, i32 %269];
    i32 %287 = add i32 %284, i32 1;
    store i32* %i with i32 %287;
    ubr ^while.header22;
^if.then6:
    i32 %288 = load i32* %32;
    store i32* %lastnum with i32 %288;
    i32 %289 = sdiv i32 %268, i32 %269;
    store i32* %32 with i32 %289;
    i32 %290 = load i32* %n;
    i32 %291 = load i32* %lastnum;
    i32 %292 = load i32* %i;
    i32 %293 = load i32* %sum;
    i32 %294 = load i32* %stride;
    ubr ^b17;
^while.body23:
    i32* %295 = getelementptr &(i32* %32)[i32 %280];
    store i32* %295 with i32 0;
    i32 %296 = load i32* %n;
    i32 %297 = load i32* %i;
    i32 %298 = add i32 %297, i32 1;
    store i32* %i with i32 %298;
    ubr ^while.header23;
^if.else3:
    i32* %299 = getelementptr &(i32* %32)[i32 %267];
    i32 %300 = load i32* %299;
    i32 %301 = add i32 %300, i32 %268;
    i32 %302 = sub i32 %301, i32 %266;
    store i32* %sum with i32 %302;
    i32 %303 = sub i32 %267, i32 %269;
    i32 %304 = add i32 %303, i32 1;
    i32* %305 = getelementptr &(i32* %32)[i32 %304];
    i32 %306 = load i32* %305;
    i32 %307 = sdiv i32 %302, i32 %269;
    store i32* %305 with i32 %307;
    i32 %308 = load i32* %n;
    i32 %309 = load i32* %i;
    i32 %310 = load i32* %stride;
    ubr ^b17;
^while.header24:
    i32 %311 = phi [^while.header23, i32 0] [^while.body24, i32 %315];
    i1 %312 = scmp lt i32 %311, i32 32;
    cbr i1 %312(prob = 0.97), ^while.body24, ^b18;
^while.body24:
    i32* %313 = getelementptr &([32 * i32]* %result)[i64 0][i32 %311];
    i32 %314 = load i32* %313;
    call (i32) -> void @putint(i32 %314);
    i32 %315 = add i32 %311, i32 1;
    ubr ^while.header24;
^b18:
    ret i32 0;
}
