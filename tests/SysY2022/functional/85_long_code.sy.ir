internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @QuickSort(i32* %arr, i32 %low, i32 %high) -> void {
  ^0:
    ubr ^entry;
  ^entry:
    i32 %1 = phi [^0, i32 %low] [^b1, i32 %11];
    i1 %2 = scmp gt i32 %high, i32 %1;
    cbr i1 %2(prob = 0.5), ^if.then, ^b;
  ^if.then:
    i32* %3 = getelementptr &(i32* %arr)[i32 %1];
    i32 %4 = load i32* %3;
    i32 %5 = add i32 %4, i32 -1;
    ubr ^while.header;
  ^b:
    ret;
  ^while.header:
    i32 %6 = phi [^if.then, i32 %high] [^b7, i32 %12] [^if.then2, i32 %33];
    i32 %7 = phi [^if.then, i32 %1] [^b7, i32 %23] [^if.then2, i32 %23];
    i1 %8 = scmp gt i32 %6, i32 %7;
    cbr i1 %8(prob = 0.97), ^while.header1, ^b1;
  ^b1:
    i32* %9 = getelementptr &(i32* %arr)[i32 %7];
    store i32* %9 with i32 %4;
    i32 %10 = add i32 %7, i32 -1;
    call (i32*, i32, i32) -> void @QuickSort(i32* %arr, i32 %1, i32 %10);
    i32 %11 = add i32 %7, i32 1;
    ubr ^entry;
  ^while.header1:
    i32 %12 = phi [^while.header, i32 %6] [^while.body, i32 %18];
    i1 %13 = scmp lt i32 %7, i32 %12;
    cbr i1 %13(prob = 0.5), ^b2, ^b3;
  ^b2:
    i32* %14 = getelementptr &(i32* %arr)[i32 %12];
    i32 %15 = load i32* %14;
    i1 %16 = scmp lt i32 %5, i32 %15;
    ubr ^b3;
  ^b3:
    i1 %17 = phi [^while.header1, i1 false] [^b2, i1 %16];
    cbr i1 %17(prob = 0.97), ^while.body, ^b4;
  ^while.body:
    i32 %18 = add i32 %12, i32 -1;
    ubr ^while.header1;
  ^b4:
    cbr i1 %13(prob = 0.5), ^if.then1, ^while.header2;
  ^if.then1:
    i32* %19 = getelementptr &(i32* %arr)[i32 %12];
    i32 %20 = load i32* %19;
    i32* %21 = getelementptr &(i32* %arr)[i32 %7];
    store i32* %21 with i32 %20;
    i32 %22 = add i32 %7, i32 1;
    ubr ^while.header2;
  ^while.header2:
    i32 %23 = phi [^b4, i32 %7] [^if.then1, i32 %22] [^while.body1, i32 %29];
    i1 %24 = scmp gt i32 %12, i32 %23;
    cbr i1 %24(prob = 0.5), ^b5, ^b6;
  ^b5:
    i32* %25 = getelementptr &(i32* %arr)[i32 %23];
    i32 %26 = load i32* %25;
    i1 %27 = scmp gt i32 %4, i32 %26;
    ubr ^b6;
  ^b6:
    i1 %28 = phi [^while.header2, i1 false] [^b5, i1 %27];
    cbr i1 %28(prob = 0.97), ^while.body1, ^b7;
  ^while.body1:
    i32 %29 = add i32 %23, i32 1;
    ubr ^while.header2;
  ^b7:
    cbr i1 %24(prob = 0.5), ^if.then2, ^while.header;
  ^if.then2:
    i32* %30 = getelementptr &(i32* %arr)[i32 %23];
    i32 %31 = load i32* %30;
    i32* %32 = getelementptr &(i32* %arr)[i32 %12];
    store i32* %32 with i32 %31;
    i32 %33 = add i32 %12, i32 -1;
    ubr ^while.header;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [32 * i32]* %result = alloc [32 * i32];
    [32 * i32]* %arr = alloc [32 * i32];
    i32* %0 = getelementptr &([32 * i32]* %arr)[i64 0][i64 0];
    store i32* %0 with i32 7;
    i32* %1 = getelementptr &([32 * i32]* %arr)[i64 0][i64 1];
    store i32* %1 with i32 23;
    i32* %2 = getelementptr &([32 * i32]* %arr)[i64 0][i64 2];
    store i32* %2 with i32 89;
    i32* %3 = getelementptr &([32 * i32]* %arr)[i64 0][i64 3];
    store i32* %3 with i32 26;
    i32* %4 = getelementptr &([32 * i32]* %arr)[i64 0][i64 4];
    store i32* %4 with i32 282;
    i32* %5 = getelementptr &([32 * i32]* %arr)[i64 0][i64 5];
    store i32* %5 with i32 254;
    i32* %6 = getelementptr &([32 * i32]* %arr)[i64 0][i64 6];
    store i32* %6 with i32 27;
    i32* %7 = getelementptr &([32 * i32]* %arr)[i64 0][i64 7];
    store i32* %7 with i32 5;
    i32* %8 = getelementptr &([32 * i32]* %arr)[i64 0][i64 8];
    store i32* %8 with i32 83;
    i32* %9 = getelementptr &([32 * i32]* %arr)[i64 0][i64 9];
    store i32* %9 with i32 273;
    i32* %10 = getelementptr &([32 * i32]* %arr)[i64 0][i64 10];
    store i32* %10 with i32 574;
    i32* %11 = getelementptr &([32 * i32]* %arr)[i64 0][i64 11];
    store i32* %11 with i32 905;
    i32* %12 = getelementptr &([32 * i32]* %arr)[i64 0][i64 12];
    store i32* %12 with i32 354;
    i32* %13 = getelementptr &([32 * i32]* %arr)[i64 0][i64 13];
    store i32* %13 with i32 657;
    i32* %14 = getelementptr &([32 * i32]* %arr)[i64 0][i64 14];
    store i32* %14 with i32 935;
    i32* %15 = getelementptr &([32 * i32]* %arr)[i64 0][i64 15];
    store i32* %15 with i32 264;
    i32* %16 = getelementptr &([32 * i32]* %arr)[i64 0][i64 16];
    store i32* %16 with i32 639;
    i32* %17 = getelementptr &([32 * i32]* %arr)[i64 0][i64 17];
    store i32* %17 with i32 459;
    i32* %18 = getelementptr &([32 * i32]* %arr)[i64 0][i64 18];
    store i32* %18 with i32 29;
    i32* %19 = getelementptr &([32 * i32]* %arr)[i64 0][i64 19];
    store i32* %19 with i32 68;
    i32* %20 = getelementptr &([32 * i32]* %arr)[i64 0][i64 20];
    store i32* %20 with i32 929;
    i32* %21 = getelementptr &([32 * i32]* %arr)[i64 0][i64 21];
    store i32* %21 with i32 756;
    i32* %22 = getelementptr &([32 * i32]* %arr)[i64 0][i64 22];
    store i32* %22 with i32 452;
    i32* %23 = getelementptr &([32 * i32]* %arr)[i64 0][i64 23];
    store i32* %23 with i32 279;
    i32* %24 = getelementptr &([32 * i32]* %arr)[i64 0][i64 24];
    store i32* %24 with i32 58;
    i32* %25 = getelementptr &([32 * i32]* %arr)[i64 0][i64 25];
    store i32* %25 with i32 87;
    i32* %26 = getelementptr &([32 * i32]* %arr)[i64 0][i64 26];
    store i32* %26 with i32 96;
    i32* %27 = getelementptr &([32 * i32]* %arr)[i64 0][i64 27];
    store i32* %27 with i32 36;
    i32* %28 = getelementptr &([32 * i32]* %arr)[i64 0][i64 28];
    store i32* %28 with i32 39;
    i32* %29 = getelementptr &([32 * i32]* %arr)[i64 0][i64 29];
    store i32* %29 with i32 28;
    i32* %30 = getelementptr &([32 * i32]* %arr)[i64 0][i64 30];
    store i32* %30 with i32 1;
    i32* %31 = getelementptr &([32 * i32]* %arr)[i64 0][i64 31];
    store i32* %31 with i32 290;
    i32* %32 = getelementptr &([32 * i32]* %result)[i64 0][i64 0];
    store i32* %32 with i32 7;
    i32* %33 = getelementptr &([32 * i32]* %result)[i64 0][i64 1];
    store i32* %33 with i32 23;
    i32* %34 = getelementptr &([32 * i32]* %result)[i64 0][i64 2];
    store i32* %34 with i32 89;
    i32* %35 = getelementptr &([32 * i32]* %result)[i64 0][i64 3];
    store i32* %35 with i32 26;
    i32* %36 = getelementptr &([32 * i32]* %result)[i64 0][i64 4];
    store i32* %36 with i32 282;
    i32* %37 = getelementptr &([32 * i32]* %result)[i64 0][i64 5];
    store i32* %37 with i32 254;
    i32* %38 = getelementptr &([32 * i32]* %result)[i64 0][i64 6];
    store i32* %38 with i32 27;
    i32* %39 = getelementptr &([32 * i32]* %result)[i64 0][i64 7];
    store i32* %39 with i32 5;
    i32* %40 = getelementptr &([32 * i32]* %result)[i64 0][i64 8];
    store i32* %40 with i32 83;
    i32* %41 = getelementptr &([32 * i32]* %result)[i64 0][i64 9];
    store i32* %41 with i32 273;
    i32* %42 = getelementptr &([32 * i32]* %result)[i64 0][i64 10];
    store i32* %42 with i32 574;
    i32* %43 = getelementptr &([32 * i32]* %result)[i64 0][i64 11];
    store i32* %43 with i32 905;
    i32* %44 = getelementptr &([32 * i32]* %result)[i64 0][i64 12];
    store i32* %44 with i32 354;
    i32* %45 = getelementptr &([32 * i32]* %result)[i64 0][i64 13];
    store i32* %45 with i32 657;
    i32* %46 = getelementptr &([32 * i32]* %result)[i64 0][i64 14];
    store i32* %46 with i32 935;
    i32* %47 = getelementptr &([32 * i32]* %result)[i64 0][i64 15];
    store i32* %47 with i32 264;
    i32* %48 = getelementptr &([32 * i32]* %result)[i64 0][i64 16];
    store i32* %48 with i32 639;
    i32* %49 = getelementptr &([32 * i32]* %result)[i64 0][i64 17];
    store i32* %49 with i32 459;
    i32* %50 = getelementptr &([32 * i32]* %result)[i64 0][i64 18];
    store i32* %50 with i32 29;
    i32* %51 = getelementptr &([32 * i32]* %result)[i64 0][i64 19];
    store i32* %51 with i32 68;
    i32* %52 = getelementptr &([32 * i32]* %result)[i64 0][i64 20];
    store i32* %52 with i32 929;
    i32* %53 = getelementptr &([32 * i32]* %result)[i64 0][i64 21];
    store i32* %53 with i32 756;
    i32* %54 = getelementptr &([32 * i32]* %result)[i64 0][i64 22];
    store i32* %54 with i32 452;
    i32* %55 = getelementptr &([32 * i32]* %result)[i64 0][i64 23];
    store i32* %55 with i32 279;
    i32* %56 = getelementptr &([32 * i32]* %result)[i64 0][i64 24];
    store i32* %56 with i32 58;
    i32* %57 = getelementptr &([32 * i32]* %result)[i64 0][i64 25];
    store i32* %57 with i32 87;
    i32* %58 = getelementptr &([32 * i32]* %result)[i64 0][i64 26];
    store i32* %58 with i32 96;
    i32* %59 = getelementptr &([32 * i32]* %result)[i64 0][i64 27];
    store i32* %59 with i32 36;
    i32* %60 = getelementptr &([32 * i32]* %result)[i64 0][i64 28];
    store i32* %60 with i32 39;
    i32* %61 = getelementptr &([32 * i32]* %result)[i64 0][i64 29];
    store i32* %61 with i32 28;
    i32* %62 = getelementptr &([32 * i32]* %result)[i64 0][i64 30];
    store i32* %62 with i32 1;
    i32* %63 = getelementptr &([32 * i32]* %result)[i64 0][i64 31];
    store i32* %63 with i32 290;
    [1000 * i32]* %64 = ptrcast [1000 * i32]* @count to [1000 * i32]*;
    ubr ^while.body;
  ^while.body:
    i32 %65 = phi [^entry, i32 0] [^while.body, i32 %68];
    i32* %66 = getelementptr &([32 * i32]* %result)[i64 0][i32 %65];
    i32 %67 = load i32* %66;
    call (i32) -> void @putint(i32 %67);
    i32 %68 = add i32 %65, i32 1;
    i1 %69 = scmp lt i32 %68, i32 32;
    cbr i1 %69(prob = 0.97), ^while.body, ^while.header;
  ^while.header:
    i32 %70 = phi [^while.body, i32 0] [^b, i32 %81];
    i32 %71 = sub i32 32, i32 %70;
    i32 %72 = add i32 %71, i32 -1;
    i1 %73 = scmp lt i32 %70, i32 31;
    cbr i1 %73(prob = 0.97), ^while.header1, ^while.body1;
  ^while.header1:
    i32 %74 = phi [^while.header, i32 0] [^b1, i32 %94];
    i1 %75 = scmp gt i32 %72, i32 %74;
    cbr i1 %75(prob = 0.97), ^while.body2, ^b;
  ^while.body1:
    i32 %76 = phi [^while.header, i32 0] [^while.body1, i32 %79];
    i32* %77 = getelementptr &([32 * i32]* %result)[i64 0][i32 %76];
    i32 %78 = load i32* %77;
    call (i32) -> void @putint(i32 %78);
    i32 %79 = add i32 %76, i32 1;
    i1 %80 = scmp lt i32 %79, i32 32;
    cbr i1 %80(prob = 0.97), ^while.body1, ^if.then;
  ^b:
    i32 %81 = add i32 %70, i32 1;
    ubr ^while.header;
  ^while.body2:
    i32* %82 = getelementptr &(i32* %32)[i32 %74];
    i32 %83 = load i32* %82;
    i32* %84 = getelementptr &(i32* %82)[i64 1];
    i32 %85 = load i32* %84;
    i1 %86 = scmp gt i32 %83, i32 %85;
    cbr i1 %86(prob = 0.5), ^if.then1, ^b1;
  ^if.then:
    i32 %87 = load i32* %48;
    i32 %88 = load i32* %47;
    i32 %89 = add i32 %87, i32 %88;
    i32 %90 = sdiv i32 %89, i32 2;
    call (i32) -> void @putint(i32 %90);
    ubr ^while.body3;
  ^if.then1:
    i32 %91 = add i32 %74, i32 1;
    i32* %92 = getelementptr &(i32* %32)[i32 %91];
    i32 %93 = load i32* %92;
    store i32* %92 with i32 %83;
    store i32* %82 with i32 %93;
    ubr ^b1;
  ^b1:
    i32 %94 = add i32 %74, i32 1;
    ubr ^while.header1;
  ^while.body3:
    i32 %95 = phi [^if.then, i32 0] [^while.body3, i32 %112];
    i32* %96 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %95];
    store i32* %96 with i32 0;
    i32* %97 = getelementptr &(i32* %96)[i64 1];
    store i32* %97 with i32 0;
    i32* %98 = getelementptr &(i32* %96)[i64 2];
    store i32* %98 with i32 0;
    i32* %99 = getelementptr &(i32* %96)[i64 3];
    store i32* %99 with i32 0;
    i32* %100 = getelementptr &(i32* %96)[i64 4];
    store i32* %100 with i32 0;
    i32* %101 = getelementptr &(i32* %96)[i64 5];
    store i32* %101 with i32 0;
    i32* %102 = getelementptr &(i32* %96)[i64 6];
    store i32* %102 with i32 0;
    i32* %103 = getelementptr &(i32* %96)[i64 7];
    store i32* %103 with i32 0;
    i32* %104 = getelementptr &(i32* %96)[i64 8];
    store i32* %104 with i32 0;
    i32* %105 = getelementptr &(i32* %96)[i64 9];
    store i32* %105 with i32 0;
    i32* %106 = getelementptr &(i32* %96)[i64 10];
    store i32* %106 with i32 0;
    i32* %107 = getelementptr &(i32* %96)[i64 11];
    store i32* %107 with i32 0;
    i32* %108 = getelementptr &(i32* %96)[i64 12];
    store i32* %108 with i32 0;
    i32* %109 = getelementptr &(i32* %96)[i64 13];
    store i32* %109 with i32 0;
    i32* %110 = getelementptr &(i32* %96)[i64 14];
    store i32* %110 with i32 0;
    i32* %111 = getelementptr &(i32* %96)[i64 15];
    store i32* %111 with i32 0;
    i32 %112 = add i32 %95, i32 16;
    i1 %113 = scmp lt i32 %112, i32 992;
    cbr i1 %113(prob = 0.98), ^while.body3, ^while.body4;
  ^while.body4:
    i32* %114 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %112];
    store i32* %114 with i32 0;
    i32* %115 = getelementptr &(i32* %114)[i64 1];
    store i32* %115 with i32 0;
    i32* %116 = getelementptr &(i32* %114)[i64 2];
    store i32* %116 with i32 0;
    i32* %117 = getelementptr &(i32* %114)[i64 3];
    store i32* %117 with i32 0;
    i32* %118 = getelementptr &(i32* %114)[i64 4];
    store i32* %118 with i32 0;
    i32* %119 = getelementptr &(i32* %114)[i64 5];
    store i32* %119 with i32 0;
    i32* %120 = getelementptr &(i32* %114)[i64 6];
    store i32* %120 with i32 0;
    i32* %121 = getelementptr &(i32* %114)[i64 7];
    store i32* %121 with i32 0;
    ubr ^super.header;
  ^super.header:
    i32 %122 = phi [^while.body4, i32 0] [^while.body5, i32 %125];
    i32 %123 = phi [^while.body4, i32 0] [^while.body5, i32 %158];
    i32 %124 = phi [^while.body4, i32 0] [^while.body5, i32 %157];
    i32 %125 = add i32 %122, i32 4;
    i1 %126 = scmp lt i32 %125, i32 32;
    cbr i1 %126(prob = 0.89), ^while.body5, ^super.header1;
  ^while.body5:
    i32* %127 = getelementptr &(i32* %32)[i32 %122];
    i32 %128 = load i32* %127;
    i32* %129 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %128];
    i32 %130 = load i32* %129;
    i32 %131 = add i32 %130, i32 1;
    store i32* %129 with i32 %131;
    i32 %132 = smax i32 %123, i32 %131;
    i32* %133 = getelementptr &(i32* %127)[i64 1];
    i32 %134 = load i32* %133;
    i32* %135 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %134];
    i32 %136 = load i32* %135;
    i32 %137 = add i32 %136, i32 1;
    i1 %138 = scmp lt i32 %132, i32 %137;
    i1 %139 = scmp lt i32 %123, i32 %131;
    i32 %140 = select i1 %139 ? i32 %128 : i32 %124;
    i32 %141 = select i1 %138 ? i32 %134 : i32 %140;
    i32 %142 = smax i32 %132, i32 %137;
    store i32* %135 with i32 %137;
    i32* %143 = getelementptr &(i32* %127)[i64 2];
    i32 %144 = load i32* %143;
    i32* %145 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %144];
    i32 %146 = load i32* %145;
    i32 %147 = add i32 %146, i32 1;
    i1 %148 = scmp lt i32 %142, i32 %147;
    i32 %149 = select i1 %148 ? i32 %144 : i32 %141;
    i32 %150 = smax i32 %142, i32 %147;
    store i32* %145 with i32 %147;
    i32* %151 = getelementptr &(i32* %127)[i64 3];
    i32 %152 = load i32* %151;
    i32* %153 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %152];
    i32 %154 = load i32* %153;
    i32 %155 = add i32 %154, i32 1;
    i1 %156 = scmp lt i32 %150, i32 %155;
    i32 %157 = select i1 %156 ? i32 %152 : i32 %149;
    i32 %158 = smax i32 %150, i32 %155;
    store i32* %153 with i32 %155;
    ubr ^super.header;
  ^super.header1:
    i32 %159 = phi [^super.header, i32 %122] [^while.body6, i32 %162];
    i32 %160 = phi [^super.header, i32 %123] [^while.body6, i32 %195];
    i32 %161 = phi [^super.header, i32 %124] [^while.body6, i32 %194];
    i32 %162 = add i32 %159, i32 4;
    i1 %163 = scmp lt i32 %162, i32 32;
    cbr i1 %163(prob = 0.89), ^while.body6, ^super.header2;
  ^while.body6:
    i32* %164 = getelementptr &(i32* %32)[i32 %159];
    i32 %165 = load i32* %164;
    i32* %166 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %165];
    i32 %167 = load i32* %166;
    i32 %168 = add i32 %167, i32 1;
    store i32* %166 with i32 %168;
    i32 %169 = smax i32 %160, i32 %168;
    i32* %170 = getelementptr &(i32* %164)[i64 1];
    i32 %171 = load i32* %170;
    i32* %172 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %171];
    i32 %173 = load i32* %172;
    i32 %174 = add i32 %173, i32 1;
    i1 %175 = scmp lt i32 %169, i32 %174;
    i1 %176 = scmp lt i32 %160, i32 %168;
    i32 %177 = select i1 %176 ? i32 %165 : i32 %161;
    i32 %178 = select i1 %175 ? i32 %171 : i32 %177;
    i32 %179 = smax i32 %169, i32 %174;
    store i32* %172 with i32 %174;
    i32* %180 = getelementptr &(i32* %164)[i64 2];
    i32 %181 = load i32* %180;
    i32* %182 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %181];
    i32 %183 = load i32* %182;
    i32 %184 = add i32 %183, i32 1;
    i1 %185 = scmp lt i32 %179, i32 %184;
    i32 %186 = select i1 %185 ? i32 %181 : i32 %178;
    i32 %187 = smax i32 %179, i32 %184;
    store i32* %182 with i32 %184;
    i32* %188 = getelementptr &(i32* %164)[i64 3];
    i32 %189 = load i32* %188;
    i32* %190 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %189];
    i32 %191 = load i32* %190;
    i32 %192 = add i32 %191, i32 1;
    i1 %193 = scmp lt i32 %187, i32 %192;
    i32 %194 = select i1 %193 ? i32 %189 : i32 %186;
    i32 %195 = smax i32 %187, i32 %192;
    store i32* %190 with i32 %192;
    ubr ^super.header1;
  ^super.header2:
    i32 %196 = phi [^super.header1, i32 %159] [^while.body7, i32 %199];
    i32 %197 = phi [^super.header1, i32 %160] [^while.body7, i32 %232];
    i32 %198 = phi [^super.header1, i32 %161] [^while.body7, i32 %231];
    i32 %199 = add i32 %196, i32 4;
    i1 %200 = scmp lt i32 %199, i32 32;
    cbr i1 %200(prob = 0.89), ^while.body7, ^while.body8;
  ^while.body7:
    i32* %201 = getelementptr &(i32* %32)[i32 %196];
    i32 %202 = load i32* %201;
    i32* %203 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %202];
    i32 %204 = load i32* %203;
    i32 %205 = add i32 %204, i32 1;
    store i32* %203 with i32 %205;
    i32 %206 = smax i32 %197, i32 %205;
    i32* %207 = getelementptr &(i32* %201)[i64 1];
    i32 %208 = load i32* %207;
    i32* %209 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %208];
    i32 %210 = load i32* %209;
    i32 %211 = add i32 %210, i32 1;
    i1 %212 = scmp lt i32 %206, i32 %211;
    i1 %213 = scmp lt i32 %197, i32 %205;
    i32 %214 = select i1 %213 ? i32 %202 : i32 %198;
    i32 %215 = select i1 %212 ? i32 %208 : i32 %214;
    i32 %216 = smax i32 %206, i32 %211;
    store i32* %209 with i32 %211;
    i32* %217 = getelementptr &(i32* %201)[i64 2];
    i32 %218 = load i32* %217;
    i32* %219 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %218];
    i32 %220 = load i32* %219;
    i32 %221 = add i32 %220, i32 1;
    i1 %222 = scmp lt i32 %216, i32 %221;
    i32 %223 = select i1 %222 ? i32 %218 : i32 %215;
    i32 %224 = smax i32 %216, i32 %221;
    store i32* %219 with i32 %221;
    i32* %225 = getelementptr &(i32* %201)[i64 3];
    i32 %226 = load i32* %225;
    i32* %227 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %226];
    i32 %228 = load i32* %227;
    i32 %229 = add i32 %228, i32 1;
    i1 %230 = scmp lt i32 %224, i32 %229;
    i32 %231 = select i1 %230 ? i32 %226 : i32 %223;
    i32 %232 = smax i32 %224, i32 %229;
    store i32* %227 with i32 %229;
    ubr ^super.header2;
  ^while.body8:
    i32 %233 = phi [^super.header2, i32 %196] [^while.body8, i32 %244];
    i32 %234 = phi [^super.header2, i32 %197] [^while.body8, i32 %243];
    i32 %235 = phi [^super.header2, i32 %198] [^while.body8, i32 %242];
    i32* %236 = getelementptr &(i32* %32)[i32 %233];
    i32 %237 = load i32* %236;
    i32* %238 = getelementptr &([1000 * i32]* %64)[i64 0][i32 %237];
    i32 %239 = load i32* %238;
    i32 %240 = add i32 %239, i32 1;
    i1 %241 = scmp lt i32 %234, i32 %240;
    i32 %242 = select i1 %241 ? i32 %237 : i32 %235;
    store i32* %238 with i32 %240;
    i32 %243 = smax i32 %234, i32 %240;
    i32 %244 = add i32 %233, i32 1;
    i1 %245 = scmp lt i32 %244, i32 32;
    cbr i1 %245(prob = 0.97), ^while.body8, ^b2;
  ^b2:
    call (i32) -> void @putint(i32 %242);
    ubr ^super.header3;
  ^super.header3:
    i32 %246 = phi [^b2, i32 0] [^while.body9, i32 %247];
    i32 %247 = add i32 %246, i32 4;
    i1 %248 = scmp lt i32 %247, i32 32;
    cbr i1 %248(prob = 0.89), ^while.body9, ^super.header4;
  ^while.body9:
    i32* %249 = getelementptr &(i32* %0)[i32 %246];
    i32 %250 = load i32* %249;
    i32* %251 = getelementptr &(i32* %32)[i32 %246];
    store i32* %251 with i32 %250;
    i32* %252 = getelementptr &(i32* %249)[i64 1];
    i32 %253 = load i32* %252;
    i32* %254 = getelementptr &(i32* %251)[i64 1];
    store i32* %254 with i32 %253;
    i32* %255 = getelementptr &(i32* %249)[i64 2];
    i32 %256 = load i32* %255;
    i32* %257 = getelementptr &(i32* %251)[i64 2];
    store i32* %257 with i32 %256;
    i32* %258 = getelementptr &(i32* %249)[i64 3];
    i32 %259 = load i32* %258;
    i32* %260 = getelementptr &(i32* %251)[i64 3];
    store i32* %260 with i32 %259;
    ubr ^super.header3;
  ^super.header4:
    i32 %261 = phi [^super.header3, i32 %246] [^while.body10, i32 %262];
    i32 %262 = add i32 %261, i32 4;
    i1 %263 = scmp lt i32 %262, i32 32;
    cbr i1 %263(prob = 0.89), ^while.body10, ^while.body11;
  ^while.body10:
    i32* %264 = getelementptr &(i32* %0)[i32 %261];
    i32 %265 = load i32* %264;
    i32* %266 = getelementptr &(i32* %32)[i32 %261];
    store i32* %266 with i32 %265;
    i32* %267 = getelementptr &(i32* %264)[i64 1];
    i32 %268 = load i32* %267;
    i32* %269 = getelementptr &(i32* %266)[i64 1];
    store i32* %269 with i32 %268;
    i32* %270 = getelementptr &(i32* %264)[i64 2];
    i32 %271 = load i32* %270;
    i32* %272 = getelementptr &(i32* %266)[i64 2];
    store i32* %272 with i32 %271;
    i32* %273 = getelementptr &(i32* %264)[i64 3];
    i32 %274 = load i32* %273;
    i32* %275 = getelementptr &(i32* %266)[i64 3];
    store i32* %275 with i32 %274;
    ubr ^super.header4;
  ^while.body11:
    i32 %276 = phi [^super.header4, i32 %261] [^while.body11, i32 %280];
    i32* %277 = getelementptr &(i32* %0)[i32 %276];
    i32 %278 = load i32* %277;
    i32* %279 = getelementptr &(i32* %32)[i32 %276];
    store i32* %279 with i32 %278;
    i32 %280 = add i32 %276, i32 1;
    i1 %281 = scmp lt i32 %280, i32 32;
    cbr i1 %281(prob = 0.97), ^while.body11, ^while.header2;
  ^while.header2:
    i32 %282 = phi [^while.body11, i32 0] [^b3, i32 %293];
    i32 %283 = sub i32 32, i32 %282;
    i32 %284 = add i32 %283, i32 -1;
    i1 %285 = scmp lt i32 %282, i32 31;
    cbr i1 %285(prob = 0.97), ^while.header3, ^while.body12;
  ^while.header3:
    i32 %286 = phi [^while.header2, i32 0] [^b4, i32 %305];
    i1 %287 = scmp gt i32 %284, i32 %286;
    cbr i1 %287(prob = 0.97), ^while.body13, ^b3;
  ^while.body12:
    i32 %288 = phi [^while.header2, i32 0] [^while.body12, i32 %291];
    i32* %289 = getelementptr &([32 * i32]* %result)[i64 0][i32 %288];
    i32 %290 = load i32* %289;
    call (i32) -> void @putint(i32 %290);
    i32 %291 = add i32 %288, i32 1;
    i1 %292 = scmp lt i32 %291, i32 32;
    cbr i1 %292(prob = 0.97), ^while.body12, ^super.header5;
  ^b3:
    i32 %293 = add i32 %282, i32 1;
    ubr ^while.header2;
  ^while.body13:
    i32* %294 = getelementptr &(i32* %32)[i32 %286];
    i32 %295 = load i32* %294;
    i32* %296 = getelementptr &(i32* %294)[i64 1];
    i32 %297 = load i32* %296;
    i1 %298 = scmp gt i32 %295, i32 %297;
    cbr i1 %298(prob = 0.5), ^if.then2, ^b4;
  ^super.header5:
    i32 %299 = phi [^while.body12, i32 0] [^while.body14, i32 %300];
    i32 %300 = add i32 %299, i32 4;
    i1 %301 = scmp lt i32 %300, i32 32;
    cbr i1 %301(prob = 0.89), ^while.body14, ^super.header6;
  ^if.then2:
    i32 %302 = add i32 %286, i32 1;
    i32* %303 = getelementptr &(i32* %32)[i32 %302];
    i32 %304 = load i32* %303;
    store i32* %303 with i32 %295;
    store i32* %294 with i32 %304;
    ubr ^b4;
  ^b4:
    i32 %305 = add i32 %286, i32 1;
    ubr ^while.header3;
  ^while.body14:
    i32* %306 = getelementptr &(i32* %0)[i32 %299];
    i32 %307 = load i32* %306;
    i32* %308 = getelementptr &(i32* %32)[i32 %299];
    store i32* %308 with i32 %307;
    i32* %309 = getelementptr &(i32* %306)[i64 1];
    i32 %310 = load i32* %309;
    i32* %311 = getelementptr &(i32* %308)[i64 1];
    store i32* %311 with i32 %310;
    i32* %312 = getelementptr &(i32* %306)[i64 2];
    i32 %313 = load i32* %312;
    i32* %314 = getelementptr &(i32* %308)[i64 2];
    store i32* %314 with i32 %313;
    i32* %315 = getelementptr &(i32* %306)[i64 3];
    i32 %316 = load i32* %315;
    i32* %317 = getelementptr &(i32* %308)[i64 3];
    store i32* %317 with i32 %316;
    ubr ^super.header5;
  ^super.header6:
    i32 %318 = phi [^super.header5, i32 %299] [^while.body15, i32 %319];
    i32 %319 = add i32 %318, i32 4;
    i1 %320 = scmp lt i32 %319, i32 32;
    cbr i1 %320(prob = 0.89), ^while.body15, ^while.body16;
  ^while.body15:
    i32* %321 = getelementptr &(i32* %0)[i32 %318];
    i32 %322 = load i32* %321;
    i32* %323 = getelementptr &(i32* %32)[i32 %318];
    store i32* %323 with i32 %322;
    i32* %324 = getelementptr &(i32* %321)[i64 1];
    i32 %325 = load i32* %324;
    i32* %326 = getelementptr &(i32* %323)[i64 1];
    store i32* %326 with i32 %325;
    i32* %327 = getelementptr &(i32* %321)[i64 2];
    i32 %328 = load i32* %327;
    i32* %329 = getelementptr &(i32* %323)[i64 2];
    store i32* %329 with i32 %328;
    i32* %330 = getelementptr &(i32* %321)[i64 3];
    i32 %331 = load i32* %330;
    i32* %332 = getelementptr &(i32* %323)[i64 3];
    store i32* %332 with i32 %331;
    ubr ^super.header6;
  ^while.body16:
    i32 %333 = phi [^super.header6, i32 %318] [^while.body16, i32 %337];
    i32* %334 = getelementptr &(i32* %0)[i32 %333];
    i32 %335 = load i32* %334;
    i32* %336 = getelementptr &(i32* %32)[i32 %333];
    store i32* %336 with i32 %335;
    i32 %337 = add i32 %333, i32 1;
    i1 %338 = scmp lt i32 %337, i32 32;
    cbr i1 %338(prob = 0.97), ^while.body16, ^while.header4;
  ^while.header4:
    i32 %339 = phi [^while.body16, i32 1] [^b7, i32 %380];
    i1 %340 = scmp lt i32 %339, i32 32;
    cbr i1 %340(prob = 0.97), ^while.body17, ^while.body18;
  ^while.body17:
    i32* %341 = getelementptr &(i32* %32)[i32 %339];
    i32 %342 = load i32* %341;
    i32 %343 = add i32 %339, i32 -1;
    ubr ^while.header5;
  ^while.body18:
    i32 %344 = phi [^while.header4, i32 0] [^while.body18, i32 %347];
    i32* %345 = getelementptr &([32 * i32]* %result)[i64 0][i32 %344];
    i32 %346 = load i32* %345;
    call (i32) -> void @putint(i32 %346);
    i32 %347 = add i32 %344, i32 1;
    i1 %348 = scmp lt i32 %347, i32 32;
    cbr i1 %348(prob = 0.97), ^while.body18, ^super.header7;
  ^while.header5:
    i32 %349 = phi [^while.body17, i32 %343] [^while.body20, i32 %377];
    i1 %350 = scmp gt i32 %349, i32 -1;
    cbr i1 %350(prob = 0.5), ^b5, ^b6;
  ^super.header7:
    i32 %351 = phi [^while.body18, i32 0] [^while.body19, i32 %352];
    i32 %352 = add i32 %351, i32 4;
    i1 %353 = scmp lt i32 %352, i32 32;
    cbr i1 %353(prob = 0.89), ^while.body19, ^super.header8;
  ^b5:
    i32* %354 = getelementptr &(i32* %32)[i32 %349];
    i32 %355 = load i32* %354;
    i1 %356 = scmp lt i32 %342, i32 %355;
    ubr ^b6;
  ^while.body19:
    i32* %357 = getelementptr &(i32* %0)[i32 %351];
    i32 %358 = load i32* %357;
    i32* %359 = getelementptr &(i32* %32)[i32 %351];
    store i32* %359 with i32 %358;
    i32* %360 = getelementptr &(i32* %357)[i64 1];
    i32 %361 = load i32* %360;
    i32* %362 = getelementptr &(i32* %359)[i64 1];
    store i32* %362 with i32 %361;
    i32* %363 = getelementptr &(i32* %357)[i64 2];
    i32 %364 = load i32* %363;
    i32* %365 = getelementptr &(i32* %359)[i64 2];
    store i32* %365 with i32 %364;
    i32* %366 = getelementptr &(i32* %357)[i64 3];
    i32 %367 = load i32* %366;
    i32* %368 = getelementptr &(i32* %359)[i64 3];
    store i32* %368 with i32 %367;
    ubr ^super.header7;
  ^b6:
    i1 %369 = phi [^while.header5, i1 false] [^b5, i1 %356];
    cbr i1 %369(prob = 0.97), ^while.body20, ^b7;
  ^super.header8:
    i32 %370 = phi [^super.header7, i32 %351] [^while.body21, i32 %371];
    i32 %371 = add i32 %370, i32 4;
    i1 %372 = scmp lt i32 %371, i32 32;
    cbr i1 %372(prob = 0.89), ^while.body21, ^while.body22;
  ^while.body20:
    i32 %373 = add i32 %349, i32 1;
    i32* %374 = getelementptr &(i32* %32)[i32 %373];
    i32* %375 = getelementptr &(i32* %32)[i32 %349];
    i32 %376 = load i32* %375;
    store i32* %374 with i32 %376;
    i32 %377 = add i32 %349, i32 -1;
    ubr ^while.header5;
  ^b7:
    i32 %378 = add i32 %349, i32 1;
    i32* %379 = getelementptr &(i32* %32)[i32 %378];
    store i32* %379 with i32 %342;
    i32 %380 = add i32 %339, i32 1;
    ubr ^while.header4;
  ^while.body21:
    i32* %381 = getelementptr &(i32* %0)[i32 %370];
    i32 %382 = load i32* %381;
    i32* %383 = getelementptr &(i32* %32)[i32 %370];
    store i32* %383 with i32 %382;
    i32* %384 = getelementptr &(i32* %381)[i64 1];
    i32 %385 = load i32* %384;
    i32* %386 = getelementptr &(i32* %383)[i64 1];
    store i32* %386 with i32 %385;
    i32* %387 = getelementptr &(i32* %381)[i64 2];
    i32 %388 = load i32* %387;
    i32* %389 = getelementptr &(i32* %383)[i64 2];
    store i32* %389 with i32 %388;
    i32* %390 = getelementptr &(i32* %381)[i64 3];
    i32 %391 = load i32* %390;
    i32* %392 = getelementptr &(i32* %383)[i64 3];
    store i32* %392 with i32 %391;
    ubr ^super.header8;
  ^while.body22:
    i32 %393 = phi [^super.header8, i32 %370] [^while.body22, i32 %397];
    i32* %394 = getelementptr &(i32* %0)[i32 %393];
    i32 %395 = load i32* %394;
    i32* %396 = getelementptr &(i32* %32)[i32 %393];
    store i32* %396 with i32 %395;
    i32 %397 = add i32 %393, i32 1;
    i1 %398 = scmp lt i32 %397, i32 32;
    cbr i1 %398(prob = 0.97), ^while.body22, ^b8;
  ^b8:
    call (i32*, i32, i32) -> void @QuickSort(i32* %32, i32 0, i32 31);
    ubr ^while.body23;
  ^while.body23:
    i32 %399 = phi [^b8, i32 0] [^while.body23, i32 %402];
    i32* %400 = getelementptr &([32 * i32]* %result)[i64 0][i32 %399];
    i32 %401 = load i32* %400;
    call (i32) -> void @putint(i32 %401);
    i32 %402 = add i32 %399, i32 1;
    i1 %403 = scmp lt i32 %402, i32 32;
    cbr i1 %403(prob = 0.97), ^while.body23, ^super.header9;
  ^super.header9:
    i32 %404 = phi [^while.body23, i32 0] [^while.body24, i32 %405];
    i32 %405 = add i32 %404, i32 4;
    i1 %406 = scmp lt i32 %405, i32 32;
    cbr i1 %406(prob = 0.89), ^while.body24, ^super.header10;
  ^while.body24:
    i32* %407 = getelementptr &(i32* %0)[i32 %404];
    i32 %408 = load i32* %407;
    i32* %409 = getelementptr &(i32* %32)[i32 %404];
    store i32* %409 with i32 %408;
    i32* %410 = getelementptr &(i32* %407)[i64 1];
    i32 %411 = load i32* %410;
    i32* %412 = getelementptr &(i32* %409)[i64 1];
    store i32* %412 with i32 %411;
    i32* %413 = getelementptr &(i32* %407)[i64 2];
    i32 %414 = load i32* %413;
    i32* %415 = getelementptr &(i32* %409)[i64 2];
    store i32* %415 with i32 %414;
    i32* %416 = getelementptr &(i32* %407)[i64 3];
    i32 %417 = load i32* %416;
    i32* %418 = getelementptr &(i32* %409)[i64 3];
    store i32* %418 with i32 %417;
    ubr ^super.header9;
  ^super.header10:
    i32 %419 = phi [^super.header9, i32 %404] [^while.body25, i32 %420];
    i32 %420 = add i32 %419, i32 4;
    i1 %421 = scmp lt i32 %420, i32 32;
    cbr i1 %421(prob = 0.89), ^while.body25, ^while.body26;
  ^while.body25:
    i32* %422 = getelementptr &(i32* %0)[i32 %419];
    i32 %423 = load i32* %422;
    i32* %424 = getelementptr &(i32* %32)[i32 %419];
    store i32* %424 with i32 %423;
    i32* %425 = getelementptr &(i32* %422)[i64 1];
    i32 %426 = load i32* %425;
    i32* %427 = getelementptr &(i32* %424)[i64 1];
    store i32* %427 with i32 %426;
    i32* %428 = getelementptr &(i32* %422)[i64 2];
    i32 %429 = load i32* %428;
    i32* %430 = getelementptr &(i32* %424)[i64 2];
    store i32* %430 with i32 %429;
    i32* %431 = getelementptr &(i32* %422)[i64 3];
    i32 %432 = load i32* %431;
    i32* %433 = getelementptr &(i32* %424)[i64 3];
    store i32* %433 with i32 %432;
    ubr ^super.header10;
  ^while.body26:
    i32 %434 = phi [^super.header10, i32 %419] [^while.body26, i32 %438];
    i32* %435 = getelementptr &(i32* %0)[i32 %434];
    i32 %436 = load i32* %435;
    i32* %437 = getelementptr &(i32* %32)[i32 %434];
    store i32* %437 with i32 %436;
    i32 %438 = add i32 %434, i32 1;
    i1 %439 = scmp lt i32 %438, i32 32;
    cbr i1 %439(prob = 0.97), ^while.body26, ^while.header6;
  ^while.header6:
    i32 %440 = phi [^while.body26, i32 0] [^b9, i32 %457];
    i32 %441 = phi [^while.body26, i32 0] [^b9, i32 %456];
    i1 %442 = scmp lt i32 %440, i32 32;
    cbr i1 %442(prob = 0.97), ^while.body27, ^while.body28;
  ^while.body27:
    i32* %443 = getelementptr &(i32* %32)[i32 %440];
    i32 %444 = load i32* %443;
    i32 %445 = add i32 %441, i32 %444;
    i32 %446 = srem i32 %440, i32 4;
    i1 %447 = scmp neq i32 %446, i32 3;
    cbr i1 %447(prob = 0.5), ^if.then3, ^if.else;
  ^while.body28:
    i32 %448 = phi [^while.header6, i32 0] [^while.body28, i32 %451];
    i32* %449 = getelementptr &([32 * i32]* %result)[i64 0][i32 %448];
    i32 %450 = load i32* %449;
    call (i32) -> void @putint(i32 %450);
    i32 %451 = add i32 %448, i32 1;
    i1 %452 = scmp lt i32 %451, i32 32;
    cbr i1 %452(prob = 0.97), ^while.body28, ^super.header11;
  ^if.then3:
    store i32* %443 with i32 0;
    ubr ^b9;
  ^if.else:
    store i32* %443 with i32 %445;
    ubr ^b9;
  ^super.header11:
    i32 %453 = phi [^while.body28, i32 0] [^while.body29, i32 %454];
    i32 %454 = add i32 %453, i32 4;
    i1 %455 = scmp lt i32 %454, i32 32;
    cbr i1 %455(prob = 0.89), ^while.body29, ^super.header12;
  ^b9:
    i32 %456 = phi [^if.then3, i32 %445] [^if.else, i32 0];
    i32 %457 = add i32 %440, i32 1;
    ubr ^while.header6;
  ^while.body29:
    i32* %458 = getelementptr &(i32* %0)[i32 %453];
    i32 %459 = load i32* %458;
    i32* %460 = getelementptr &(i32* %32)[i32 %453];
    store i32* %460 with i32 %459;
    i32* %461 = getelementptr &(i32* %458)[i64 1];
    i32 %462 = load i32* %461;
    i32* %463 = getelementptr &(i32* %460)[i64 1];
    store i32* %463 with i32 %462;
    i32* %464 = getelementptr &(i32* %458)[i64 2];
    i32 %465 = load i32* %464;
    i32* %466 = getelementptr &(i32* %460)[i64 2];
    store i32* %466 with i32 %465;
    i32* %467 = getelementptr &(i32* %458)[i64 3];
    i32 %468 = load i32* %467;
    i32* %469 = getelementptr &(i32* %460)[i64 3];
    store i32* %469 with i32 %468;
    ubr ^super.header11;
  ^super.header12:
    i32 %470 = phi [^super.header11, i32 %453] [^while.body30, i32 %471];
    i32 %471 = add i32 %470, i32 4;
    i1 %472 = scmp lt i32 %471, i32 32;
    cbr i1 %472(prob = 0.89), ^while.body30, ^while.body31;
  ^while.body30:
    i32* %473 = getelementptr &(i32* %0)[i32 %470];
    i32 %474 = load i32* %473;
    i32* %475 = getelementptr &(i32* %32)[i32 %470];
    store i32* %475 with i32 %474;
    i32* %476 = getelementptr &(i32* %473)[i64 1];
    i32 %477 = load i32* %476;
    i32* %478 = getelementptr &(i32* %475)[i64 1];
    store i32* %478 with i32 %477;
    i32* %479 = getelementptr &(i32* %473)[i64 2];
    i32 %480 = load i32* %479;
    i32* %481 = getelementptr &(i32* %475)[i64 2];
    store i32* %481 with i32 %480;
    i32* %482 = getelementptr &(i32* %473)[i64 3];
    i32 %483 = load i32* %482;
    i32* %484 = getelementptr &(i32* %475)[i64 3];
    store i32* %484 with i32 %483;
    ubr ^super.header12;
  ^while.body31:
    i32 %485 = phi [^super.header12, i32 %470] [^while.body31, i32 %489];
    i32* %486 = getelementptr &(i32* %0)[i32 %485];
    i32 %487 = load i32* %486;
    i32* %488 = getelementptr &(i32* %32)[i32 %485];
    store i32* %488 with i32 %487;
    i32 %489 = add i32 %485, i32 1;
    i1 %490 = scmp lt i32 %489, i32 32;
    cbr i1 %490(prob = 0.97), ^while.body31, ^while.header7;
  ^while.header7:
    i32 %491 = phi [^while.body31, i32 0] [^b10, i32 %510];
    i32 %492 = phi [^while.body31, i32 0] [^b10, i32 %511];
    i32 %493 = phi [^while.body31, i32 0] [^b10, i32 %512];
    i1 %494 = scmp lt i32 %493, i32 32;
    cbr i1 %494(prob = 0.97), ^while.body32, ^super.header13;
  ^while.body32:
    i1 %495 = scmp lt i32 %493, i32 2;
    cbr i1 %495(prob = 0.5), ^if.then4, ^if.else1;
  ^super.header13:
    i32 %496 = phi [^while.header7, i32 30] [^while.body33, i32 %497];
    i32 %497 = add i32 %496, i32 4;
    i1 %498 = scmp lt i32 %497, i32 32;
    cbr i1 %498(prob = 0.89), ^while.body33, ^super.header14;
  ^if.then4:
    i32* %499 = getelementptr &(i32* %32)[i32 %493];
    i32 %500 = load i32* %499;
    i32 %501 = add i32 %492, i32 %500;
    ubr ^b10;
  ^while.body33:
    i32* %502 = getelementptr &(i32* %32)[i32 %496];
    store i32* %502 with i32 0;
    i32* %503 = getelementptr &(i32* %502)[i64 1];
    store i32* %503 with i32 0;
    i32* %504 = getelementptr &(i32* %502)[i64 2];
    store i32* %504 with i32 0;
    i32* %505 = getelementptr &(i32* %502)[i64 3];
    store i32* %505 with i32 0;
    ubr ^super.header13;
  ^if.else1:
    i1 %506 = scmp eq i32 %493, i32 2;
    cbr i1 %506(prob = 0.5), ^if.then5, ^if.else2;
  ^super.header14:
    i32 %507 = phi [^super.header13, i32 %496] [^while.body34, i32 %508];
    i32 %508 = add i32 %507, i32 4;
    i1 %509 = scmp lt i32 %508, i32 32;
    cbr i1 %509(prob = 0.89), ^while.body34, ^while.body35;
  ^b10:
    i32 %510 = phi [^if.then4, i32 %491] [^if.then5, i32 %513] [^if.else2, i32 %525];
    i32 %511 = phi [^if.then4, i32 %501] [^if.then5, i32 %492] [^if.else2, i32 %522];
    i32 %512 = add i32 %493, i32 1;
    ubr ^while.header7;
  ^if.then5:
    i32 %513 = load i32* %32;
    i32 %514 = sdiv i32 %492, i32 3;
    store i32* %32 with i32 %514;
    ubr ^b10;
  ^while.body34:
    i32* %515 = getelementptr &(i32* %32)[i32 %507];
    store i32* %515 with i32 0;
    i32* %516 = getelementptr &(i32* %515)[i64 1];
    store i32* %516 with i32 0;
    i32* %517 = getelementptr &(i32* %515)[i64 2];
    store i32* %517 with i32 0;
    i32* %518 = getelementptr &(i32* %515)[i64 3];
    store i32* %518 with i32 0;
    ubr ^super.header14;
  ^if.else2:
    i32* %519 = getelementptr &(i32* %32)[i32 %493];
    i32 %520 = load i32* %519;
    i32 %521 = add i32 %492, i32 %520;
    i32 %522 = sub i32 %521, i32 %491;
    i32 %523 = sdiv i32 %522, i32 3;
    i32* %524 = getelementptr &(i32* %519)[i64 -2];
    i32 %525 = load i32* %524;
    store i32* %524 with i32 %523;
    ubr ^b10;
  ^while.body35:
    i32 %526 = phi [^super.header14, i32 %507] [^while.body35, i32 %528];
    i32* %527 = getelementptr &(i32* %32)[i32 %526];
    store i32* %527 with i32 0;
    i32 %528 = add i32 %526, i32 1;
    i1 %529 = scmp lt i32 %528, i32 32;
    cbr i1 %529(prob = 0.97), ^while.body35, ^while.body36;
  ^while.body36:
    i32 %530 = phi [^while.body35, i32 0] [^while.body36, i32 %533];
    i32* %531 = getelementptr &([32 * i32]* %result)[i64 0][i32 %530];
    i32 %532 = load i32* %531;
    call (i32) -> void @putint(i32 %532);
    i32 %533 = add i32 %530, i32 1;
    i1 %534 = scmp lt i32 %533, i32 32;
    cbr i1 %534(prob = 0.97), ^while.body36, ^b11;
  ^b11:
    ret i32 0;
}
internal [1000 * i32]* @count;
