internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { Entry } {
^entry:
    i32* %result = alloc i32;
    i32* %d = alloc i32;
    i32* %c = alloc i32;
    i32* %b = alloc i32;
    i32* %a = alloc i32;
    store i32* %a with i32 0;
    store i32* %b with i32 0;
    store i32* %c with i32 0;
    store i32* %d with i32 0;
    store i32* %result with i32 0;
    store i32* %a with i32 5;
    store i32* %b with i32 5;
    store i32* %c with i32 1;
    store i32* %d with i32 -2;
    i32 %0 = load i32* %d;
    i32 %1 = mul i32 %0, i32 1;
    i32 %2 = sdiv i32 %1, i32 2;
    i32 %3 = load i32* %a;
    i32 %4 = load i32* %b;
    i32 %5 = sub i32 %3, i32 %4;
    i32 %6 = add i32 %2, i32 %5;
    i32 %7 = load i32* %c;
    i32 %8 = add i32 %7, i32 3;
    i32 %9 = neg i32 %8;
    i32 %10 = srem i32 %9, i32 2;
    i32 %11 = sub i32 %6, i32 %10;
    store i32* %result with i32 %11;
    i32 %12 = load i32* %result;
    call (i32) -> void @putint(i32 %12);
    i32 %13 = load i32* %d;
    i32 %14 = srem i32 %13, i32 2;
    i32 %15 = add i32 %14, i32 67;
    i32 %16 = load i32* %a;
    i32 %17 = load i32* %b;
    i32 %18 = sub i32 %16, i32 %17;
    i32 %19 = neg i32 %18;
    i32 %20 = add i32 %15, i32 %19;
    i32 %21 = load i32* %c;
    i32 %22 = add i32 %21, i32 2;
    i32 %23 = srem i32 %22, i32 2;
    i32 %24 = neg i32 %23;
    i32 %25 = sub i32 %20, i32 %24;
    store i32* %result with i32 %25;
    i32 %26 = load i32* %result;
    i32 %27 = add i32 %26, i32 3;
    store i32* %result with i32 %27;
    i32 %28 = load i32* %result;
    call (i32) -> void @putint(i32 %28);
    ret i32 0;
}
