internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry():
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i32 %2 = call () -> i32 @getint();
    i32 %3 = call () -> i32 @getint();
    i32 %4 = call () -> i32 @getint();
    i32 %5 = mul i32 %1, i32 %2;
    i32 %6 = sub i32 %0, i32 %5;
    i32 %7 = sdiv i32 %0, i32 %2;
    i32 %8 = sub i32 %3, i32 %7;
    i1 %9 = scmp neq i32 %6, i32 %8;
    cbr i1 %9(prob = 0.5), [ ^b ], [ ^indirect i32 %3, i32 %4, i32 %2, i32 %1, i32 %0, i32 %0, i32 %1, i32 %2 ];
^indirect(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i32 %0 = mul i32 %arg3, i32 %arg4;
    i32 %1 = sdiv i32 %0, i32 %arg2;
    i32 %2 = add i32 %arg, i32 %arg1;
    i1 %3 = scmp eq i32 %1, i32 %2;
    cbr i1 %3(prob = 0.5), [ ^b ], [ ^b1 i32 %arg5, i32 %arg6, i32 %arg7, i32 %2 ];
^b():
    ret i32 1;
^b1(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32 %0 = add i32 %arg, i32 %arg1;
    i32 %1 = add i32 %0, i32 %arg2;
    i1 %2 = scmp eq i32 %1, i32 %arg3;
    cbr i1 %2(prob = 0.5), [ ^b ], [ ^indirect1 ];
^indirect1():
    ret i32 0;
}
