internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @a;
internal i32* @b;
internal i32* @c;
internal i32* @d;
internal i32* @e;
func @main() -> i32 { Entry } {
^entry:
    i32* %flag = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* @a with i32 %0;
    i32 %1 = call () -> i32 @getint();
    store i32* @b with i32 %1;
    i32 %2 = call () -> i32 @getint();
    store i32* @c with i32 %2;
    i32 %3 = call () -> i32 @getint();
    store i32* @d with i32 %3;
    i32 %4 = call () -> i32 @getint();
    store i32* @e with i32 %4;
    store i32* %flag with i32 0;
    i32 %5 = load i32* @a;
    i32 %6 = load i32* @b;
    i32 %7 = load i32* @c;
    i32 %8 = mul i32 %6, i32 %7;
    i32 %9 = sub i32 %5, i32 %8;
    i32 %10 = load i32* @d;
    i32 %11 = load i32* @a;
    i32 %12 = load i32* @c;
    i32 %13 = sdiv i32 %11, i32 %12;
    i32 %14 = sub i32 %10, i32 %13;
    i1 %15 = scmp neq i32 %9, i32 %14;
    i32 %16 = zext i1 %15 to i32;
    i1 %17 = scmp neq i32 %16, i32 0;
    cbr i1 %17(prob = 0.5), ^b1, ^b;
^b:
    i32 %18 = load i32* @a;
    i32 %19 = load i32* @b;
    i32 %20 = mul i32 %18, i32 %19;
    i32 %21 = load i32* @c;
    i32 %22 = sdiv i32 %20, i32 %21;
    i32 %23 = load i32* @e;
    i32 %24 = load i32* @d;
    i32 %25 = add i32 %23, i32 %24;
    i1 %26 = scmp eq i32 %22, i32 %25;
    i32 %27 = zext i1 %26 to i32;
    i1 %28 = scmp neq i32 %27, i32 0;
    ubr ^b1;
^b1:
    i1 %29 = phi [^b, i1 %28] [^entry, i1 true];
    i32 %30 = zext i1 %29 to i32;
    i1 %31 = scmp neq i32 %30, i32 0;
    cbr i1 %31(prob = 0.5), ^b3, ^b2;
^b2:
    i32 %32 = load i32* @a;
    i32 %33 = load i32* @b;
    i32 %34 = add i32 %32, i32 %33;
    i32 %35 = load i32* @c;
    i32 %36 = add i32 %34, i32 %35;
    i32 %37 = load i32* @d;
    i32 %38 = load i32* @e;
    i32 %39 = add i32 %37, i32 %38;
    i1 %40 = scmp eq i32 %36, i32 %39;
    i32 %41 = zext i1 %40 to i32;
    i1 %42 = scmp neq i32 %41, i32 0;
    ubr ^b3;
^b3:
    i1 %43 = phi [^b2, i1 %42] [^b1, i1 true];
    i32 %44 = zext i1 %43 to i32;
    i1 %45 = scmp neq i32 %44, i32 0;
    cbr i1 %45(prob = 0.5), ^if.then, ^b4;
^if.then:
    store i32* %flag with i32 1;
    ubr ^b4;
^b4:
    i32 %46 = load i32* %flag;
    ret i32 %46;
}
