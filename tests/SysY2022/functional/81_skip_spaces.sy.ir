internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [100 * i32]* %arr = alloc [100 * i32];
    ubr ^while.header;
^while.header:
    i32 %0 = phi [^while.body, i32 %5] [^entry, i32 0];
    i32 %1 = call () -> i32 @getint();
    i1 %2 = scmp neq i32 %1, i32 0;
    cbr i1 %2(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i32* %3 = getelementptr &([100 * i32]* %arr)[i64 0][i32 %0];
    i32 %4 = call () -> i32 @getint();
    store i32* %3 with i32 %4;
    i32 %5 = add i32 %0, i32 1;
    ubr ^while.header;
^while.header1:
    i32 %6 = phi [^while.header, i32 %0] [^while.body1, i32 %9];
    i32 %7 = phi [^while.header, i32 0] [^while.body1, i32 %12];
    i1 %8 = scmp neq i32 %6, i32 0;
    cbr i1 %8(prob = 0.97), ^while.body1, ^b;
^while.body1:
    i32 %9 = add i32 %6, i32 -1;
    i32* %10 = getelementptr &([100 * i32]* %arr)[i64 0][i32 %9];
    i32 %11 = load i32* %10;
    i32 %12 = add i32 %11, i32 %7;
    ubr ^while.header1;
^b:
    i32 %13 = srem i32 %7, i32 79;
    ret i32 %13;
}
