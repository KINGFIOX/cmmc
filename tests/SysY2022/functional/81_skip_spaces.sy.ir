internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    [100 * i32]* %arr = alloc [100 * i32];
    ubr ^while.header;
^while.header:
    i32 %0 = phi [^while.body, i32 %6] [^entry, i32 0];
    i32 %1 = phi [^while.body, i32 %1] [^entry, i32 0];
    i32 %2 = call () -> i32 @getint();
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i32* %4 = getelementptr &([100 * i32]* %arr)[i64 0][i32 %0];
    i32 %5 = call () -> i32 @getint();
    store i32* %4 with i32 %5;
    i32 %6 = add i32 %0, i32 1;
    ubr ^while.header;
^while.header1:
    i32 %7 = phi [^while.header, i32 %0] [^while.body1, i32 %10];
    i32 %8 = phi [^while.header, i32 %1] [^while.body1, i32 %13];
    i1 %9 = scmp neq i32 %7, i32 0;
    cbr i1 %9(prob = 0.97), ^while.body1, ^b;
^while.body1:
    i32 %10 = add i32 %7, i32 -1;
    i32* %11 = getelementptr &([100 * i32]* %arr)[i64 0][i32 %10];
    i32 %12 = load i32* %11;
    i32 %13 = add i32 %12, i32 %8;
    ubr ^while.header1;
^b:
    i32 %14 = srem i32 %8, i32 79;
    ret i32 %14;
}
