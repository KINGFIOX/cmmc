internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @findfa(i32 %a, [110 * i32]* %0) -> i32 {
^entry:
    i32* %1 = getelementptr &([110 * i32]* %0)[i64 0][i32 %a];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %2, i32 %a;
    cbr i1 %3(prob = 0.5), ^b, ^if.else;
^if.else:
    i32 %4 = call (i32, [110 * i32]*) -> i32 @findfa(i32 %2, [110 * i32]* %0);
    store i32* %1 with i32 %4;
    i32 %5 = load i32* %1;
    ubr ^b;
^b:
    i32 %6 = phi [^entry, i32 %a] [^if.else, i32 %5];
    ret i32 %6;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    [110 * i32]* %array = alloc [110 * i32];
    i32* %0 = getelementptr &([110 * i32]* %array)[i64 0][i64 0];
    store i32* %0 with i32 0;
    i32* %1 = getelementptr &([110 * i32]* %array)[i64 0][i64 1];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([110 * i32]* %array)[i64 0][i64 2];
    store i32* %2 with i32 0;
    i32* %3 = getelementptr &([110 * i32]* %array)[i64 0][i64 3];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([110 * i32]* %array)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([110 * i32]* %array)[i64 0][i64 5];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([110 * i32]* %array)[i64 0][i64 6];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([110 * i32]* %array)[i64 0][i64 7];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([110 * i32]* %array)[i64 0][i64 8];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([110 * i32]* %array)[i64 0][i64 9];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([110 * i32]* %array)[i64 0][i64 10];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([110 * i32]* %array)[i64 0][i64 11];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([110 * i32]* %array)[i64 0][i64 12];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([110 * i32]* %array)[i64 0][i64 13];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([110 * i32]* %array)[i64 0][i64 14];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([110 * i32]* %array)[i64 0][i64 15];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([110 * i32]* %array)[i64 0][i64 16];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([110 * i32]* %array)[i64 0][i64 17];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([110 * i32]* %array)[i64 0][i64 18];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([110 * i32]* %array)[i64 0][i64 19];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &([110 * i32]* %array)[i64 0][i64 20];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &([110 * i32]* %array)[i64 0][i64 21];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &([110 * i32]* %array)[i64 0][i64 22];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &([110 * i32]* %array)[i64 0][i64 23];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &([110 * i32]* %array)[i64 0][i64 24];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &([110 * i32]* %array)[i64 0][i64 25];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &([110 * i32]* %array)[i64 0][i64 26];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &([110 * i32]* %array)[i64 0][i64 27];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &([110 * i32]* %array)[i64 0][i64 28];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &([110 * i32]* %array)[i64 0][i64 29];
    store i32* %29 with i32 0;
    i32* %30 = getelementptr &([110 * i32]* %array)[i64 0][i64 30];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &([110 * i32]* %array)[i64 0][i64 31];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &([110 * i32]* %array)[i64 0][i64 32];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &([110 * i32]* %array)[i64 0][i64 33];
    store i32* %33 with i32 0;
    i32* %34 = getelementptr &([110 * i32]* %array)[i64 0][i64 34];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &([110 * i32]* %array)[i64 0][i64 35];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &([110 * i32]* %array)[i64 0][i64 36];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &([110 * i32]* %array)[i64 0][i64 37];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &([110 * i32]* %array)[i64 0][i64 38];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &([110 * i32]* %array)[i64 0][i64 39];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &([110 * i32]* %array)[i64 0][i64 40];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &([110 * i32]* %array)[i64 0][i64 41];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &([110 * i32]* %array)[i64 0][i64 42];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &([110 * i32]* %array)[i64 0][i64 43];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &([110 * i32]* %array)[i64 0][i64 44];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &([110 * i32]* %array)[i64 0][i64 45];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &([110 * i32]* %array)[i64 0][i64 46];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &([110 * i32]* %array)[i64 0][i64 47];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &([110 * i32]* %array)[i64 0][i64 48];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &([110 * i32]* %array)[i64 0][i64 49];
    store i32* %49 with i32 0;
    i32* %50 = getelementptr &([110 * i32]* %array)[i64 0][i64 50];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &([110 * i32]* %array)[i64 0][i64 51];
    store i32* %51 with i32 0;
    i32* %52 = getelementptr &([110 * i32]* %array)[i64 0][i64 52];
    store i32* %52 with i32 0;
    i32* %53 = getelementptr &([110 * i32]* %array)[i64 0][i64 53];
    store i32* %53 with i32 0;
    i32* %54 = getelementptr &([110 * i32]* %array)[i64 0][i64 54];
    store i32* %54 with i32 0;
    i32* %55 = getelementptr &([110 * i32]* %array)[i64 0][i64 55];
    store i32* %55 with i32 0;
    i32* %56 = getelementptr &([110 * i32]* %array)[i64 0][i64 56];
    store i32* %56 with i32 0;
    i32* %57 = getelementptr &([110 * i32]* %array)[i64 0][i64 57];
    store i32* %57 with i32 0;
    i32* %58 = getelementptr &([110 * i32]* %array)[i64 0][i64 58];
    store i32* %58 with i32 0;
    i32* %59 = getelementptr &([110 * i32]* %array)[i64 0][i64 59];
    store i32* %59 with i32 0;
    i32* %60 = getelementptr &([110 * i32]* %array)[i64 0][i64 60];
    store i32* %60 with i32 0;
    i32* %61 = getelementptr &([110 * i32]* %array)[i64 0][i64 61];
    store i32* %61 with i32 0;
    i32* %62 = getelementptr &([110 * i32]* %array)[i64 0][i64 62];
    store i32* %62 with i32 0;
    i32* %63 = getelementptr &([110 * i32]* %array)[i64 0][i64 63];
    store i32* %63 with i32 0;
    i32* %64 = getelementptr &([110 * i32]* %array)[i64 0][i64 64];
    store i32* %64 with i32 0;
    i32* %65 = getelementptr &([110 * i32]* %array)[i64 0][i64 65];
    store i32* %65 with i32 0;
    i32* %66 = getelementptr &([110 * i32]* %array)[i64 0][i64 66];
    store i32* %66 with i32 0;
    i32* %67 = getelementptr &([110 * i32]* %array)[i64 0][i64 67];
    store i32* %67 with i32 0;
    i32* %68 = getelementptr &([110 * i32]* %array)[i64 0][i64 68];
    store i32* %68 with i32 0;
    i32* %69 = getelementptr &([110 * i32]* %array)[i64 0][i64 69];
    store i32* %69 with i32 0;
    i32* %70 = getelementptr &([110 * i32]* %array)[i64 0][i64 70];
    store i32* %70 with i32 0;
    i32* %71 = getelementptr &([110 * i32]* %array)[i64 0][i64 71];
    store i32* %71 with i32 0;
    i32* %72 = getelementptr &([110 * i32]* %array)[i64 0][i64 72];
    store i32* %72 with i32 0;
    i32* %73 = getelementptr &([110 * i32]* %array)[i64 0][i64 73];
    store i32* %73 with i32 0;
    i32* %74 = getelementptr &([110 * i32]* %array)[i64 0][i64 74];
    store i32* %74 with i32 0;
    i32* %75 = getelementptr &([110 * i32]* %array)[i64 0][i64 75];
    store i32* %75 with i32 0;
    i32* %76 = getelementptr &([110 * i32]* %array)[i64 0][i64 76];
    store i32* %76 with i32 0;
    i32* %77 = getelementptr &([110 * i32]* %array)[i64 0][i64 77];
    store i32* %77 with i32 0;
    i32* %78 = getelementptr &([110 * i32]* %array)[i64 0][i64 78];
    store i32* %78 with i32 0;
    i32* %79 = getelementptr &([110 * i32]* %array)[i64 0][i64 79];
    store i32* %79 with i32 0;
    i32* %80 = getelementptr &([110 * i32]* %array)[i64 0][i64 80];
    store i32* %80 with i32 0;
    i32* %81 = getelementptr &([110 * i32]* %array)[i64 0][i64 81];
    store i32* %81 with i32 0;
    i32* %82 = getelementptr &([110 * i32]* %array)[i64 0][i64 82];
    store i32* %82 with i32 0;
    i32* %83 = getelementptr &([110 * i32]* %array)[i64 0][i64 83];
    store i32* %83 with i32 0;
    i32* %84 = getelementptr &([110 * i32]* %array)[i64 0][i64 84];
    store i32* %84 with i32 0;
    i32* %85 = getelementptr &([110 * i32]* %array)[i64 0][i64 85];
    store i32* %85 with i32 0;
    i32* %86 = getelementptr &([110 * i32]* %array)[i64 0][i64 86];
    store i32* %86 with i32 0;
    i32* %87 = getelementptr &([110 * i32]* %array)[i64 0][i64 87];
    store i32* %87 with i32 0;
    i32* %88 = getelementptr &([110 * i32]* %array)[i64 0][i64 88];
    store i32* %88 with i32 0;
    i32* %89 = getelementptr &([110 * i32]* %array)[i64 0][i64 89];
    store i32* %89 with i32 0;
    i32* %90 = getelementptr &([110 * i32]* %array)[i64 0][i64 90];
    store i32* %90 with i32 0;
    i32* %91 = getelementptr &([110 * i32]* %array)[i64 0][i64 91];
    store i32* %91 with i32 0;
    i32* %92 = getelementptr &([110 * i32]* %array)[i64 0][i64 92];
    store i32* %92 with i32 0;
    i32* %93 = getelementptr &([110 * i32]* %array)[i64 0][i64 93];
    store i32* %93 with i32 0;
    i32* %94 = getelementptr &([110 * i32]* %array)[i64 0][i64 94];
    store i32* %94 with i32 0;
    i32* %95 = getelementptr &([110 * i32]* %array)[i64 0][i64 95];
    store i32* %95 with i32 0;
    i32* %96 = getelementptr &([110 * i32]* %array)[i64 0][i64 96];
    store i32* %96 with i32 0;
    i32* %97 = getelementptr &([110 * i32]* %array)[i64 0][i64 97];
    store i32* %97 with i32 0;
    i32* %98 = getelementptr &([110 * i32]* %array)[i64 0][i64 98];
    store i32* %98 with i32 0;
    i32* %99 = getelementptr &([110 * i32]* %array)[i64 0][i64 99];
    store i32* %99 with i32 0;
    i32* %100 = getelementptr &([110 * i32]* %array)[i64 0][i64 100];
    store i32* %100 with i32 0;
    i32* %101 = getelementptr &([110 * i32]* %array)[i64 0][i64 101];
    store i32* %101 with i32 0;
    i32* %102 = getelementptr &([110 * i32]* %array)[i64 0][i64 102];
    store i32* %102 with i32 0;
    i32* %103 = getelementptr &([110 * i32]* %array)[i64 0][i64 103];
    store i32* %103 with i32 0;
    i32* %104 = getelementptr &([110 * i32]* %array)[i64 0][i64 104];
    store i32* %104 with i32 0;
    i32* %105 = getelementptr &([110 * i32]* %array)[i64 0][i64 105];
    store i32* %105 with i32 0;
    i32* %106 = getelementptr &([110 * i32]* %array)[i64 0][i64 106];
    store i32* %106 with i32 0;
    i32* %107 = getelementptr &([110 * i32]* %array)[i64 0][i64 107];
    store i32* %107 with i32 0;
    i32* %108 = getelementptr &([110 * i32]* %array)[i64 0][i64 108];
    store i32* %108 with i32 0;
    i32* %109 = getelementptr &([110 * i32]* %array)[i64 0][i64 109];
    store i32* %109 with i32 0;
    ubr ^while.body;
^while.body:
    i32 %110 = phi [^entry, i32 1] [^b4, i32 %111];
    i32 %111 = add i32 %110, i32 -1;
    store i32* %1 with i32 -1;
    store i32* %2 with i32 -1;
    store i32* %3 with i32 -1;
    store i32* %4 with i32 -1;
    store i32* %5 with i32 -1;
    store i32* %6 with i32 -1;
    store i32* %7 with i32 -1;
    store i32* %8 with i32 -1;
    store i32* %9 with i32 -1;
    store i32* %10 with i32 -1;
    store i32* %11 with i32 -1;
    store i32* %12 with i32 -1;
    store i32* %13 with i32 -1;
    store i32* %14 with i32 -1;
    store i32* %15 with i32 -1;
    store i32* %16 with i32 -1;
    store i32* %17 with i32 -1;
    ubr ^while.body1;
^while.body1:
    i32 %112 = phi [^while.body, i32 0] [^b, i32 %123];
    i32 %113 = phi [^while.body, i32 0] [^b, i32 %122];
    i32 %114 = call () -> i32 @getint();
    i32 %115 = call () -> i32 @getint();
    i1 %116 = scmp eq i32 %113, i32 0;
    cbr i1 %116(prob = 0.5), ^if.then, ^b;
^if.then:
    i32 %117 = add i32 %114, i32 -1;
    i32 %118 = mul i32 %117, i32 4;
    i32 %119 = add i32 %118, i32 %115;
    i32* %120 = getelementptr &([110 * i32]* %array)[i64 0][i32 %119];
    store i32* %120 with i32 %119;
    i1 %121 = scmp eq i32 %114, i32 1;
    cbr i1 %121(prob = 0.5), ^if.then1, ^b1;
^b:
    i32 %122 = phi [^while.body1, i32 %113] [^b21, i32 %113] [^if.then14, i32 1];
    i32 %123 = add i32 %112, i32 1;
    i1 %124 = scmp lt i32 %123, i32 10;
    cbr i1 %124(prob = 0.9), ^while.body1, ^b2;
^if.then1:
    store i32* %0 with i32 0;
    i32 %125 = call (i32, [110 * i32]*) -> i32 @findfa(i32 %119, [110 * i32]* %array);
    i32 %126 = call (i32, [110 * i32]*) -> i32 @findfa(i32 0, [110 * i32]* %array);
    i1 %127 = scmp neq i32 %125, i32 %126;
    cbr i1 %127(prob = 0.5), ^if.then2, ^b1;
^b1:
    i1 %128 = scmp eq i32 %114, i32 4;
    cbr i1 %128(prob = 0.5), ^if.then4, ^b3;
^b2:
    i1 %129 = scmp eq i32 %122, i32 0;
    cbr i1 %129(prob = 0.5), ^if.then3, ^b4;
^if.then2:
    i32* %130 = getelementptr &([110 * i32]* %array)[i64 0][i32 %125];
    store i32* %130 with i32 %126;
    ubr ^b1;
^if.then3:
    call (i32) -> void @putint(i32 -1);
    call (i32) -> void @putch(i32 10);
    ubr ^b4;
^if.then4:
    store i32* %17 with i32 17;
    i32 %131 = call (i32, [110 * i32]*) -> i32 @findfa(i32 %119, [110 * i32]* %array);
    i32 %132 = call (i32, [110 * i32]*) -> i32 @findfa(i32 17, [110 * i32]* %array);
    i1 %133 = scmp neq i32 %131, i32 %132;
    cbr i1 %133(prob = 0.5), ^if.then5, ^b3;
^b3:
    i1 %134 = scmp lt i32 %115, i32 4;
    cbr i1 %134(prob = 0.5), ^b5, ^b6;
^b4:
    i1 %135 = scmp neq i32 %111, i32 0;
    cbr i1 %135(prob = 0.97), ^while.body, ^b7;
^if.then5:
    i32* %136 = getelementptr &([110 * i32]* %array)[i64 0][i32 %131];
    store i32* %136 with i32 %132;
    ubr ^b3;
^b5:
    i32 %137 = add i32 %119, i32 1;
    i32* %138 = getelementptr &([110 * i32]* %array)[i64 0][i32 %137];
    i32 %139 = load i32* %138;
    i1 %140 = scmp neq i32 %139, i32 -1;
    ubr ^b6;
^b6:
    i1 %141 = phi [^b3, i1 false] [^b5, i1 %140];
    cbr i1 %141(prob = 0.5), ^if.then6, ^b8;
^b7:
    ret i32 0;
^if.then6:
    i32 %142 = add i32 %119, i32 1;
    i32 %143 = call (i32, [110 * i32]*) -> i32 @findfa(i32 %119, [110 * i32]* %array);
    i32 %144 = call (i32, [110 * i32]*) -> i32 @findfa(i32 %142, [110 * i32]* %array);
    i1 %145 = scmp neq i32 %143, i32 %144;
    cbr i1 %145(prob = 0.5), ^if.then7, ^b8;
^b8:
    i1 %146 = scmp gt i32 %115, i32 1;
    cbr i1 %146(prob = 0.5), ^b9, ^b10;
^if.then7:
    i32* %147 = getelementptr &([110 * i32]* %array)[i64 0][i32 %143];
    store i32* %147 with i32 %144;
    ubr ^b8;
^b9:
    i32 %148 = add i32 %119, i32 -1;
    i32* %149 = getelementptr &([110 * i32]* %array)[i64 0][i32 %148];
    i32 %150 = load i32* %149;
    i1 %151 = scmp neq i32 %150, i32 -1;
    ubr ^b10;
^b10:
    i1 %152 = phi [^b8, i1 false] [^b9, i1 %151];
    cbr i1 %152(prob = 0.5), ^if.then8, ^b11;
^if.then8:
    i32 %153 = add i32 %119, i32 -1;
    i32 %154 = call (i32, [110 * i32]*) -> i32 @findfa(i32 %119, [110 * i32]* %array);
    i32 %155 = call (i32, [110 * i32]*) -> i32 @findfa(i32 %153, [110 * i32]* %array);
    i1 %156 = scmp neq i32 %154, i32 %155;
    cbr i1 %156(prob = 0.5), ^if.then9, ^b11;
^b11:
    i1 %157 = scmp lt i32 %114, i32 4;
    cbr i1 %157(prob = 0.5), ^b12, ^b13;
^if.then9:
    i32* %158 = getelementptr &([110 * i32]* %array)[i64 0][i32 %154];
    store i32* %158 with i32 %155;
    ubr ^b11;
^b12:
    i32 %159 = add i32 %119, i32 4;
    i32* %160 = getelementptr &([110 * i32]* %array)[i64 0][i32 %159];
    i32 %161 = load i32* %160;
    i1 %162 = scmp neq i32 %161, i32 -1;
    ubr ^b13;
^b13:
    i1 %163 = phi [^b11, i1 false] [^b12, i1 %162];
    cbr i1 %163(prob = 0.5), ^if.then10, ^b14;
^if.then10:
    i32 %164 = add i32 %119, i32 4;
    i32 %165 = call (i32, [110 * i32]*) -> i32 @findfa(i32 %119, [110 * i32]* %array);
    i32 %166 = call (i32, [110 * i32]*) -> i32 @findfa(i32 %164, [110 * i32]* %array);
    i1 %167 = scmp neq i32 %165, i32 %166;
    cbr i1 %167(prob = 0.5), ^if.then11, ^b14;
^b14:
    i1 %168 = scmp gt i32 %114, i32 1;
    cbr i1 %168(prob = 0.5), ^b15, ^b16;
^if.then11:
    i32* %169 = getelementptr &([110 * i32]* %array)[i64 0][i32 %165];
    store i32* %169 with i32 %166;
    ubr ^b14;
^b15:
    i32 %170 = add i32 %119, i32 -4;
    i32* %171 = getelementptr &([110 * i32]* %array)[i64 0][i32 %170];
    i32 %172 = load i32* %171;
    i1 %173 = scmp neq i32 %172, i32 -1;
    ubr ^b16;
^b16:
    i1 %174 = phi [^b14, i1 false] [^b15, i1 %173];
    cbr i1 %174(prob = 0.5), ^if.then12, ^b17;
^if.then12:
    i32 %175 = add i32 %119, i32 -4;
    i32 %176 = call (i32, [110 * i32]*) -> i32 @findfa(i32 %119, [110 * i32]* %array);
    i32 %177 = call (i32, [110 * i32]*) -> i32 @findfa(i32 %175, [110 * i32]* %array);
    i1 %178 = scmp neq i32 %176, i32 %177;
    cbr i1 %178(prob = 0.5), ^if.then13, ^b17;
^b17:
    i32 %179 = load i32* %0;
    i1 %180 = scmp neq i32 %179, i32 -1;
    cbr i1 %180(prob = 0.5), ^b18, ^b19;
^if.then13:
    i32* %181 = getelementptr &([110 * i32]* %array)[i64 0][i32 %176];
    store i32* %181 with i32 %177;
    ubr ^b17;
^b18:
    i32 %182 = load i32* %17;
    i1 %183 = scmp neq i32 %182, i32 -1;
    ubr ^b19;
^b19:
    i1 %184 = phi [^b17, i1 false] [^b18, i1 %183];
    cbr i1 %184(prob = 0.5), ^b20, ^b21;
^b20:
    i32 %185 = call (i32, [110 * i32]*) -> i32 @findfa(i32 0, [110 * i32]* %array);
    i32 %186 = call (i32, [110 * i32]*) -> i32 @findfa(i32 17, [110 * i32]* %array);
    i1 %187 = scmp eq i32 %185, i32 %186;
    ubr ^b21;
^b21:
    i1 %188 = phi [^b19, i1 false] [^b20, i1 %187];
    cbr i1 %188(prob = 0.5), ^if.then14, ^b;
^if.then14:
    i32 %189 = add i32 %112, i32 1;
    call (i32) -> void @putint(i32 %189);
    call (i32) -> void @putch(i32 10);
    ubr ^b;
}
