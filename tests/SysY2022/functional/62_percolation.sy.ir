internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [110 * i32]* @array, align 8 { Flexible };
internal func @findfa(i32 %a) -> i32 {
  ^entry:
    [110 * i32]* %0 = ptrcast [110 * i32]* @array to [110 * i32]*;
    i32* %1 = getelementptr &([110 * i32]* %0)[i64 0][i32 %a];
    i32 %2 = load i32* %1;
    i1 %3 = icmp eq i32 %a, i32 %2;
    cbr i1 %3(prob = 0.5), ^b, ^entry1;
  ^entry1:
    i32* %4 = getelementptr &([110 * i32]* %0)[i64 0][i32 %2];
    i32 %5 = load i32* %4;
    i1 %6 = icmp eq i32 %2, i32 %5;
    cbr i1 %6(prob = 0.5), ^if.else, ^entry2;
  ^b:
    i32 %7 = phi [^entry, i32 %a] [^if.else, i32 %8];
    ret i32 %7;
  ^if.else:
    i32 %8 = phi [^entry1, i32 %2] [^b1, i32 %12];
    store i32* %1 with i32 %8;
    ubr ^b;
  ^entry2:
    i32* %9 = getelementptr &([110 * i32]* %0)[i64 0][i32 %5];
    i32 %10 = load i32* %9;
    i1 %11 = icmp eq i32 %5, i32 %10;
    cbr i1 %11(prob = 0.5), ^b1, ^entry3;
  ^b1:
    i32 %12 = phi [^entry2, i32 %5] [^if.else1, i32 %16];
    store i32* %4 with i32 %12;
    ubr ^if.else;
  ^entry3:
    i32* %13 = getelementptr &([110 * i32]* %0)[i64 0][i32 %10];
    i32 %14 = load i32* %13;
    i1 %15 = icmp eq i32 %10, i32 %14;
    cbr i1 %15(prob = 0.5), ^if.else1, ^if.else2;
  ^if.else1:
    i32 %16 = phi [^entry3, i32 %10] [^if.else2, i32 %17];
    store i32* %9 with i32 %16;
    ubr ^b1;
  ^if.else2:
    i32 %17 = call (i32) -> i32 @findfa(i32 %14);
    store i32* %13 with i32 %17;
    ubr ^if.else1;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [110 * i32]* %0 = ptrcast [110 * i32]* @array to [110 * i32]*;
    i32* %1 = getelementptr &([110 * i32]* %0)[i64 0][i64 0];
    i32* %2 = getelementptr &([110 * i32]* %0)[i64 0][i64 1];
    i32* %3 = getelementptr &([110 * i32]* %0)[i64 0][i64 2];
    i32* %4 = getelementptr &([110 * i32]* %0)[i64 0][i64 3];
    i32* %5 = getelementptr &([110 * i32]* %0)[i64 0][i64 4];
    i32* %6 = getelementptr &([110 * i32]* %0)[i64 0][i64 5];
    i32* %7 = getelementptr &([110 * i32]* %0)[i64 0][i64 6];
    i32* %8 = getelementptr &([110 * i32]* %0)[i64 0][i64 7];
    i32* %9 = getelementptr &([110 * i32]* %0)[i64 0][i64 8];
    i32* %10 = getelementptr &([110 * i32]* %0)[i64 0][i64 9];
    i32* %11 = getelementptr &([110 * i32]* %0)[i64 0][i64 10];
    i32* %12 = getelementptr &([110 * i32]* %0)[i64 0][i64 11];
    i32* %13 = getelementptr &([110 * i32]* %0)[i64 0][i64 12];
    i32* %14 = getelementptr &([110 * i32]* %0)[i64 0][i64 13];
    i32* %15 = getelementptr &([110 * i32]* %0)[i64 0][i64 14];
    i32* %16 = getelementptr &([110 * i32]* %0)[i64 0][i64 15];
    i32* %17 = getelementptr &([110 * i32]* %0)[i64 0][i64 16];
    i32* %18 = getelementptr &([110 * i32]* %0)[i64 0][i64 17];
    ubr ^while.header;
  ^while.header:
    i32 %19 = phi [^entry, i32 1] [^b1, i32 %21] [^if.then, i32 %21];
    i1 %20 = icmp neq i32 %19, i32 0;
    cbr i1 %20(prob = 0.992248), ^while.body, ^b;
  ^while.body:
    i32 %21 = add i32 %19, i32 -1;
    store i32* %2 with i32 -1;
    store i32* %3 with i32 -1;
    store i32* %4 with i32 -1;
    store i32* %5 with i32 -1;
    store i32* %6 with i32 -1;
    store i32* %7 with i32 -1;
    store i32* %8 with i32 -1;
    store i32* %9 with i32 -1;
    store i32* %10 with i32 -1;
    store i32* %11 with i32 -1;
    store i32* %12 with i32 -1;
    store i32* %13 with i32 -1;
    store i32* %14 with i32 -1;
    store i32* %15 with i32 -1;
    store i32* %16 with i32 -1;
    store i32* %17 with i32 -1;
    store i32* %18 with i32 -1;
    ubr ^while.header1;
  ^b:
    ret i32 0;
  ^while.header1:
    i32 %22 = phi [^while.body, i32 0] [^while.body1, i32 %22] [^b15, i32 %22] [^if.then11, i32 1];
    i32 %23 = phi [^while.body, i32 0] [^while.body1, i32 %28] [^b15, i32 %28] [^if.then11, i32 %28];
    i1 %24 = icmp slt i32 %23, i32 10;
    i1 %25 = icmp eq i32 %22, i32 0;
    cbr i1 %24(prob = 0.992248), ^while.body1, ^b1;
  ^while.body1:
    i32 %26 = call () -> i32 @getint();
    i32 %27 = call () -> i32 @getint();
    i32 %28 = add i32 %23, i32 1;
    cbr i1 %25(prob = 0.5), ^if.then1, ^while.header1;
  ^b1:
    cbr i1 %25(prob = 0.5), ^if.then, ^while.header;
  ^if.then:
    call (i32) -> void @putint(i32 -1);
    call (i32) -> void @putch(i32 10);
    ubr ^while.header;
  ^if.then1:
    i32 %29 = add i32 %26, i32 -1;
    i32 %30 = mul i32 %29, i32 4;
    i32 %31 = add i32 %27, i32 %30;
    i32* %32 = getelementptr &([110 * i32]* %0)[i64 0][i32 %31];
    store i32* %32 with i32 %31;
    i1 %33 = icmp eq i32 %26, i32 1;
    cbr i1 %33(prob = 0.5), ^if.then2, ^b2;
  ^if.then2:
    store i32* %1 with i32 0;
    i32 %34 = call (i32) -> i32 @findfa(i32 %31);
    i32 %35 = call (i32) -> i32 @findfa(i32 0);
    i1 %36 = icmp neq i32 %34, i32 %35;
    cbr i1 %36(prob = 0.5), ^if.then3, ^b2;
  ^b2:
    i1 %37 = icmp eq i32 %26, i32 4;
    cbr i1 %37(prob = 0.5), ^if.then4, ^b3;
  ^if.then3:
    i32* %38 = getelementptr &([110 * i32]* %0)[i64 0][i32 %34];
    store i32* %38 with i32 %35;
    ubr ^b2;
  ^if.then4:
    store i32* %18 with i32 17;
    i32 %39 = call (i32) -> i32 @findfa(i32 %31);
    i32 %40 = call (i32) -> i32 @findfa(i32 17);
    i1 %41 = icmp neq i32 %39, i32 %40;
    cbr i1 %41(prob = 0.5), ^if.then5, ^b3;
  ^b3:
    i1 %42 = icmp slt i32 %27, i32 4;
    cbr i1 %42(prob = 0.5), ^b4, ^b5;
  ^if.then5:
    i32* %43 = getelementptr &([110 * i32]* %0)[i64 0][i32 %39];
    store i32* %43 with i32 %40;
    ubr ^b3;
  ^b4:
    i32 %44 = add i32 %31, i32 1;
    i32* %45 = getelementptr &([110 * i32]* %0)[i64 0][i32 %44];
    i32 %46 = load i32* %45;
    i1 %47 = icmp neq i32 %46, i32 -1;
    cbr i1 %47(prob = 0.5), ^entry1, ^b5;
  ^b5:
    i1 %48 = icmp sgt i32 %27, i32 1;
    cbr i1 %48(prob = 0.5), ^b6, ^b7;
  ^entry1:
    i32 %49 = call (i32) -> i32 @findfa(i32 %31);
    i32 %50 = call (i32) -> i32 @findfa(i32 %44);
    i1 %51 = icmp neq i32 %49, i32 %50;
    cbr i1 %51(prob = 0.5), ^if.then6, ^b5;
  ^b6:
    i32 %52 = add i32 %31, i32 -1;
    i32* %53 = getelementptr &([110 * i32]* %0)[i64 0][i32 %52];
    i32 %54 = load i32* %53;
    i1 %55 = icmp neq i32 %54, i32 -1;
    cbr i1 %55(prob = 0.5), ^entry2, ^b7;
  ^b7:
    i1 %56 = icmp slt i32 %26, i32 4;
    cbr i1 %56(prob = 0.5), ^b8, ^b9;
  ^if.then6:
    i32* %57 = getelementptr &([110 * i32]* %0)[i64 0][i32 %49];
    store i32* %57 with i32 %50;
    ubr ^b5;
  ^entry2:
    i32 %58 = call (i32) -> i32 @findfa(i32 %31);
    i32 %59 = call (i32) -> i32 @findfa(i32 %52);
    i1 %60 = icmp neq i32 %58, i32 %59;
    cbr i1 %60(prob = 0.5), ^if.then7, ^b7;
  ^b8:
    i32 %61 = add i32 %31, i32 4;
    i32* %62 = getelementptr &([110 * i32]* %0)[i64 0][i32 %61];
    i32 %63 = load i32* %62;
    i1 %64 = icmp neq i32 %63, i32 -1;
    cbr i1 %64(prob = 0.5), ^if.then8, ^b9;
  ^b9:
    i1 %65 = icmp sgt i32 %26, i32 1;
    cbr i1 %65(prob = 0.5), ^b10, ^b11;
  ^if.then7:
    i32* %66 = getelementptr &([110 * i32]* %0)[i64 0][i32 %58];
    store i32* %66 with i32 %59;
    ubr ^b7;
  ^if.then8:
    i32 %67 = call (i32) -> i32 @findfa(i32 %31);
    i32 %68 = call (i32) -> i32 @findfa(i32 %61);
    i1 %69 = icmp neq i32 %67, i32 %68;
    cbr i1 %69(prob = 0.5), ^if.then9, ^b9;
  ^b10:
    i32 %70 = add i32 %31, i32 -4;
    i32* %71 = getelementptr &([110 * i32]* %0)[i64 0][i32 %70];
    i32 %72 = load i32* %71;
    i1 %73 = icmp neq i32 %72, i32 -1;
    cbr i1 %73(prob = 0.5), ^entry3, ^b11;
  ^b11:
    i32 %74 = load i32* %1;
    i1 %75 = icmp neq i32 %74, i32 -1;
    cbr i1 %75(prob = 0.5), ^b12, ^b13;
  ^if.then9:
    i32* %76 = getelementptr &([110 * i32]* %0)[i64 0][i32 %67];
    store i32* %76 with i32 %68;
    ubr ^b9;
  ^b12:
    i32 %77 = load i32* %18;
    i1 %78 = icmp neq i32 %77, i32 -1;
    ubr ^b13;
  ^entry3:
    i32 %79 = call (i32) -> i32 @findfa(i32 %31);
    i32 %80 = call (i32) -> i32 @findfa(i32 %70);
    i1 %81 = icmp neq i32 %79, i32 %80;
    cbr i1 %81(prob = 0.5), ^if.then10, ^b11;
  ^b13:
    i1 %82 = phi [^b11, i1 false] [^b12, i1 %78];
    cbr i1 %82(prob = 0.5), ^b14, ^b15;
  ^if.then10:
    i32* %83 = getelementptr &([110 * i32]* %0)[i64 0][i32 %79];
    store i32* %83 with i32 %80;
    ubr ^b11;
  ^b14:
    i32 %84 = call (i32) -> i32 @findfa(i32 0);
    i32 %85 = call (i32) -> i32 @findfa(i32 17);
    i1 %86 = icmp eq i32 %84, i32 %85;
    ubr ^b15;
  ^b15:
    i1 %87 = phi [^b13, i1 false] [^b14, i1 %86];
    cbr i1 %87(prob = 0.5), ^if.then11, ^while.header1;
  ^if.then11:
    call (i32) -> void @putint(i32 %28);
    call (i32) -> void @putch(i32 10);
    ubr ^while.header1;
}
