internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [110 * i32]* @array;
internal i32* @n;
internal func @init(i32 %n) -> void {
^entry:
    i32* %i = alloc i32;
    i32* %n1 = alloc i32;
    store i32* %n1 with i32 %n;
    store i32* %i with i32 1;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i32 %1 = load i32* %n1;
    i32 %2 = load i32* %n1;
    i32 %3 = mul i32 %1, i32 %2;
    i32 %4 = add i32 %3, i32 1;
    i1 %5 = scmp le i32 %0, i32 %4;
    i32 %6 = zext i1 %5 to i32;
    i1 %7 = scmp neq i32 %6, i32 0;
    cbr i1 %7(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %8 = load i32* %i;
    i64 %9 = sext i32 %8 to i64;
    i32* %10 = getelementptr &([110 * i32]* @array)[i64 0][i64 %9];
    store i32* %10 with i32 -1;
    i32 %11 = load i32* %i;
    i32 %12 = add i32 %11, i32 1;
    store i32* %i with i32 %12;
    ubr ^while.header;
^b:
    ret;
}
internal func @findfa(i32 %a) -> i32 {
^entry:
    i32* %a1 = alloc i32;
    store i32* %a1 with i32 %a;
    i32 %0 = load i32* %a1;
    i64 %1 = sext i32 %0 to i64;
    i32* %2 = getelementptr &([110 * i32]* @array)[i64 0][i64 %1];
    i32 %3 = load i32* %2;
    i32 %4 = load i32* %a1;
    i1 %5 = scmp eq i32 %3, i32 %4;
    i32 %6 = zext i1 %5 to i32;
    i1 %7 = scmp neq i32 %6, i32 0;
    cbr i1 %7(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32 %8 = load i32* %a1;
    ret i32 %8;
^if.else:
    i32 %9 = load i32* %a1;
    i64 %10 = sext i32 %9 to i64;
    i32* %11 = getelementptr &([110 * i32]* @array)[i64 0][i64 %10];
    i32 %12 = load i32* %a1;
    i64 %13 = sext i32 %12 to i64;
    i32* %14 = getelementptr &([110 * i32]* @array)[i64 0][i64 %13];
    i32 %15 = load i32* %14;
    i32 %16 = call (i32) -> i32 @findfa(i32 %15);
    store i32* %11 with i32 %16;
    i32 %17 = load i32* %a1;
    i64 %18 = sext i32 %17 to i64;
    i32* %19 = getelementptr &([110 * i32]* @array)[i64 0][i64 %18];
    i32 %20 = load i32* %19;
    ret i32 %20;
^b:
    unreachable;
}
internal func @mmerge(i32 %a, i32 %b) -> void {
^entry:
    i32* %n = alloc i32;
    i32* %m = alloc i32;
    i32* %b1 = alloc i32;
    i32* %a1 = alloc i32;
    store i32* %a1 with i32 %a;
    store i32* %b1 with i32 %b;
    i32 %0 = load i32* %a1;
    i32 %1 = call (i32) -> i32 @findfa(i32 %0);
    store i32* %m with i32 %1;
    i32 %2 = load i32* %b1;
    i32 %3 = call (i32) -> i32 @findfa(i32 %2);
    store i32* %n with i32 %3;
    i32 %4 = load i32* %m;
    i32 %5 = load i32* %n;
    i1 %6 = scmp neq i32 %4, i32 %5;
    i32 %7 = zext i1 %6 to i32;
    i1 %8 = scmp neq i32 %7, i32 0;
    cbr i1 %8(prob = 0.5), ^if.then, ^b2;
^if.then:
    i32 %9 = load i32* %m;
    i64 %10 = sext i32 %9 to i64;
    i32* %11 = getelementptr &([110 * i32]* @array)[i64 0][i64 %10];
    i32 %12 = load i32* %n;
    store i32* %11 with i32 %12;
    ubr ^b2;
^b2:
    ret;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %tmp = alloc i32;
    i32* %loc = alloc i32;
    i32* %k = alloc i32;
    i32* %flag = alloc i32;
    i32* %i = alloc i32;
    i32* %b = alloc i32;
    i32* %a = alloc i32;
    i32* %m = alloc i32;
    i32* %t = alloc i32;
    store i32* %t with i32 0;
    store i32* %m with i32 0;
    store i32* %a with i32 0;
    store i32* %b with i32 0;
    store i32* %t with i32 1;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %t;
    i1 %1 = scmp neq i32 %0, i32 0;
    cbr i1 %1(prob = 0.97), ^while.body, ^b1;
^while.body:
    i32 %2 = load i32* %t;
    i32 %3 = sub i32 %2, i32 1;
    store i32* %t with i32 %3;
    store i32* @n with i32 4;
    store i32* %m with i32 10;
    store i32* %i with i32 0;
    store i32* %flag with i32 0;
    i32 %4 = load i32* @n;
    call (i32) -> void @init(i32 %4);
    i32 %5 = load i32* @n;
    i32 %6 = load i32* @n;
    i32 %7 = mul i32 %5, i32 %6;
    i32 %8 = add i32 %7, i32 1;
    store i32* %k with i32 %8;
    ubr ^while.header1;
^b1:
    ret i32 0;
^while.header1:
    i32 %9 = load i32* %i;
    i32 %10 = load i32* %m;
    i1 %11 = scmp lt i32 %9, i32 %10;
    i32 %12 = zext i1 %11 to i32;
    i1 %13 = scmp neq i32 %12, i32 0;
    cbr i1 %13(prob = 0.97), ^while.body1, ^b2;
^while.body1:
    i32 %14 = call () -> i32 @getint();
    store i32* %a with i32 %14;
    i32 %15 = call () -> i32 @getint();
    store i32* %b with i32 %15;
    i32 %16 = load i32* %flag;
    i1 %17 = scmp neq i32 %16, i32 0;
    i1 %18 = xor i1 %17, i1 true;
    i32 %19 = zext i1 %18 to i32;
    i1 %20 = scmp neq i32 %19, i32 0;
    cbr i1 %20(prob = 0.5), ^if.then1, ^b3;
^b2:
    i32 %21 = load i32* %flag;
    i1 %22 = scmp neq i32 %21, i32 0;
    i1 %23 = xor i1 %22, i1 true;
    i32 %24 = zext i1 %23 to i32;
    i1 %25 = scmp neq i32 %24, i32 0;
    cbr i1 %25(prob = 0.5), ^if.then, ^b4;
^b3:
    i32 %26 = load i32* %i;
    i32 %27 = add i32 %26, i32 1;
    store i32* %i with i32 %27;
    ubr ^while.header1;
^if.then:
    call (i32) -> void @putint(i32 -1);
    call (i32) -> void @putch(i32 10);
    ubr ^b4;
^if.then1:
    i32 %28 = load i32* @n;
    i32 %29 = load i32* %a;
    i32 %30 = sub i32 %29, i32 1;
    i32 %31 = mul i32 %28, i32 %30;
    i32 %32 = load i32* %b;
    i32 %33 = add i32 %31, i32 %32;
    store i32* %loc with i32 %33;
    i32 %34 = load i32* %loc;
    i64 %35 = sext i32 %34 to i64;
    i32* %36 = getelementptr &([110 * i32]* @array)[i64 0][i64 %35];
    i32 %37 = load i32* %loc;
    store i32* %36 with i32 %37;
    i32 %38 = load i32* %a;
    i1 %39 = scmp eq i32 %38, i32 1;
    i32 %40 = zext i1 %39 to i32;
    i1 %41 = scmp neq i32 %40, i32 0;
    cbr i1 %41(prob = 0.5), ^if.then2, ^b5;
^b4:
    ubr ^while.header;
^if.then2:
    i32* %42 = getelementptr &([110 * i32]* @array)[i64 0][i64 0];
    store i32* %42 with i32 0;
    i32 %43 = load i32* %loc;
    call (i32, i32) -> void @mmerge(i32 %43, i32 0);
    ubr ^b5;
^b5:
    i32 %44 = load i32* %a;
    i32 %45 = load i32* @n;
    i1 %46 = scmp eq i32 %44, i32 %45;
    i32 %47 = zext i1 %46 to i32;
    i1 %48 = scmp neq i32 %47, i32 0;
    cbr i1 %48(prob = 0.5), ^if.then3, ^b6;
^if.then3:
    i32 %49 = load i32* %k;
    i64 %50 = sext i32 %49 to i64;
    i32* %51 = getelementptr &([110 * i32]* @array)[i64 0][i64 %50];
    i32 %52 = load i32* %k;
    store i32* %51 with i32 %52;
    i32 %53 = load i32* %loc;
    i32 %54 = load i32* %k;
    call (i32, i32) -> void @mmerge(i32 %53, i32 %54);
    ubr ^b6;
^b6:
    i32 %55 = load i32* %b;
    i32 %56 = load i32* @n;
    i1 %57 = scmp lt i32 %55, i32 %56;
    i32 %58 = zext i1 %57 to i32;
    i1 %59 = scmp neq i32 %58, i32 0;
    cbr i1 %59(prob = 0.5), ^b7, ^b8;
^b7:
    i32 %60 = load i32* %loc;
    i32 %61 = add i32 %60, i32 1;
    i64 %62 = sext i32 %61 to i64;
    i32* %63 = getelementptr &([110 * i32]* @array)[i64 0][i64 %62];
    i32 %64 = load i32* %63;
    i1 %65 = scmp neq i32 %64, i32 -1;
    i32 %66 = zext i1 %65 to i32;
    i1 %67 = scmp neq i32 %66, i32 0;
    ubr ^b8;
^b8:
    i1 %68 = phi [^b7, i1 %67] [^b6, i1 false];
    i32 %69 = zext i1 %68 to i32;
    i1 %70 = scmp neq i32 %69, i32 0;
    cbr i1 %70(prob = 0.5), ^if.then4, ^b9;
^if.then4:
    i32 %71 = load i32* %loc;
    i32 %72 = load i32* %loc;
    i32 %73 = add i32 %72, i32 1;
    call (i32, i32) -> void @mmerge(i32 %71, i32 %73);
    ubr ^b9;
^b9:
    i32 %74 = load i32* %b;
    i1 %75 = scmp gt i32 %74, i32 1;
    i32 %76 = zext i1 %75 to i32;
    i1 %77 = scmp neq i32 %76, i32 0;
    cbr i1 %77(prob = 0.5), ^b10, ^b11;
^b10:
    i32 %78 = load i32* %loc;
    i32 %79 = sub i32 %78, i32 1;
    i64 %80 = sext i32 %79 to i64;
    i32* %81 = getelementptr &([110 * i32]* @array)[i64 0][i64 %80];
    i32 %82 = load i32* %81;
    i1 %83 = scmp neq i32 %82, i32 -1;
    i32 %84 = zext i1 %83 to i32;
    i1 %85 = scmp neq i32 %84, i32 0;
    ubr ^b11;
^b11:
    i1 %86 = phi [^b10, i1 %85] [^b9, i1 false];
    i32 %87 = zext i1 %86 to i32;
    i1 %88 = scmp neq i32 %87, i32 0;
    cbr i1 %88(prob = 0.5), ^if.then5, ^b12;
^if.then5:
    i32 %89 = load i32* %loc;
    i32 %90 = load i32* %loc;
    i32 %91 = sub i32 %90, i32 1;
    call (i32, i32) -> void @mmerge(i32 %89, i32 %91);
    ubr ^b12;
^b12:
    i32 %92 = load i32* %a;
    i32 %93 = load i32* @n;
    i1 %94 = scmp lt i32 %92, i32 %93;
    i32 %95 = zext i1 %94 to i32;
    i1 %96 = scmp neq i32 %95, i32 0;
    cbr i1 %96(prob = 0.5), ^b13, ^b14;
^b13:
    i32 %97 = load i32* %loc;
    i32 %98 = load i32* @n;
    i32 %99 = add i32 %97, i32 %98;
    i64 %100 = sext i32 %99 to i64;
    i32* %101 = getelementptr &([110 * i32]* @array)[i64 0][i64 %100];
    i32 %102 = load i32* %101;
    i1 %103 = scmp neq i32 %102, i32 -1;
    i32 %104 = zext i1 %103 to i32;
    i1 %105 = scmp neq i32 %104, i32 0;
    ubr ^b14;
^b14:
    i1 %106 = phi [^b13, i1 %105] [^b12, i1 false];
    i32 %107 = zext i1 %106 to i32;
    i1 %108 = scmp neq i32 %107, i32 0;
    cbr i1 %108(prob = 0.5), ^if.then6, ^b15;
^if.then6:
    i32 %109 = load i32* %loc;
    i32 %110 = load i32* %loc;
    i32 %111 = load i32* @n;
    i32 %112 = add i32 %110, i32 %111;
    call (i32, i32) -> void @mmerge(i32 %109, i32 %112);
    ubr ^b15;
^b15:
    i32 %113 = load i32* %a;
    i1 %114 = scmp gt i32 %113, i32 1;
    i32 %115 = zext i1 %114 to i32;
    i1 %116 = scmp neq i32 %115, i32 0;
    cbr i1 %116(prob = 0.5), ^b16, ^b17;
^b16:
    i32 %117 = load i32* %loc;
    i32 %118 = load i32* @n;
    i32 %119 = sub i32 %117, i32 %118;
    i64 %120 = sext i32 %119 to i64;
    i32* %121 = getelementptr &([110 * i32]* @array)[i64 0][i64 %120];
    i32 %122 = load i32* %121;
    i1 %123 = scmp neq i32 %122, i32 -1;
    i32 %124 = zext i1 %123 to i32;
    i1 %125 = scmp neq i32 %124, i32 0;
    ubr ^b17;
^b17:
    i1 %126 = phi [^b16, i1 %125] [^b15, i1 false];
    i32 %127 = zext i1 %126 to i32;
    i1 %128 = scmp neq i32 %127, i32 0;
    cbr i1 %128(prob = 0.5), ^if.then7, ^b18;
^if.then7:
    i32 %129 = load i32* %loc;
    i32 %130 = load i32* %loc;
    i32 %131 = load i32* @n;
    i32 %132 = sub i32 %130, i32 %131;
    call (i32, i32) -> void @mmerge(i32 %129, i32 %132);
    ubr ^b18;
^b18:
    i32* %133 = getelementptr &([110 * i32]* @array)[i64 0][i64 0];
    i32 %134 = load i32* %133;
    i1 %135 = scmp neq i32 %134, i32 -1;
    i32 %136 = zext i1 %135 to i32;
    i1 %137 = scmp neq i32 %136, i32 0;
    cbr i1 %137(prob = 0.5), ^b19, ^b20;
^b19:
    i32 %138 = load i32* %k;
    i64 %139 = sext i32 %138 to i64;
    i32* %140 = getelementptr &([110 * i32]* @array)[i64 0][i64 %139];
    i32 %141 = load i32* %140;
    i1 %142 = scmp neq i32 %141, i32 -1;
    i32 %143 = zext i1 %142 to i32;
    i1 %144 = scmp neq i32 %143, i32 0;
    ubr ^b20;
^b20:
    i1 %145 = phi [^b19, i1 %144] [^b18, i1 false];
    i32 %146 = zext i1 %145 to i32;
    i1 %147 = scmp neq i32 %146, i32 0;
    cbr i1 %147(prob = 0.5), ^b21, ^b22;
^b21:
    i32 %148 = call (i32) -> i32 @findfa(i32 0);
    i32 %149 = load i32* %k;
    i32 %150 = call (i32) -> i32 @findfa(i32 %149);
    i1 %151 = scmp eq i32 %148, i32 %150;
    i32 %152 = zext i1 %151 to i32;
    i1 %153 = scmp neq i32 %152, i32 0;
    ubr ^b22;
^b22:
    i1 %154 = phi [^b21, i1 %153] [^b20, i1 false];
    i32 %155 = zext i1 %154 to i32;
    i1 %156 = scmp neq i32 %155, i32 0;
    cbr i1 %156(prob = 0.5), ^if.then8, ^b23;
^if.then8:
    store i32* %flag with i32 1;
    i32 %157 = load i32* %i;
    i32 %158 = add i32 %157, i32 1;
    store i32* %tmp with i32 %158;
    i32 %159 = load i32* %tmp;
    call (i32) -> void @putint(i32 %159);
    call (i32) -> void @putch(i32 10);
    ubr ^b23;
^b23:
    ubr ^b3;
}
