internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @findfa(i32, [110 * i32]*, i32*) -> i32 {
^entry(i32 %arg, [110 * i32]* %arg1, i32* %arg2):
    i32* %0 = getelementptr &([110 * i32]* %arg1)[i32 0][i32 %arg];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 %arg;
    cbr i1 %2, [ ^indirect i32 %arg ], [ ^indirect1 i32 %arg, i32* %arg2, [110 * i32]* %arg1, i32 %arg ];
^indirect(i32 %arg):
    ret i32 %arg;
^indirect1(i32 %arg, i32* %arg1, [110 * i32]* %arg2, i32 %arg3):
    i32* %0 = getelementptr &([110 * i32]* %arg2)[i32 0][i32 %arg];
    i32 %1 = load i32* %0;
    i32 %2 = call (i32, [110 * i32]*, i32*) -> i32 @findfa(i32 %1, [110 * i32]* %arg2, i32* %arg1);
    store i32* %0 with i32 %2;
    i32* %3 = getelementptr &([110 * i32]* %arg2)[i32 0][i32 %arg3];
    i32 %4 = load i32* %3;
    ret i32 %4;
}
func @main() -> i32 { NoRecurse Entry } {
^entry():
    [110 * i32]* %array = alloc [110 * i32];
    i32* %0 = getelementptr &([110 * i32]* %array)[i32 0][i32 0];
    store i32* %0 with i32 0;
    i32* %1 = getelementptr &([110 * i32]* %array)[i32 0][i32 1];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([110 * i32]* %array)[i32 0][i32 2];
    store i32* %2 with i32 0;
    i32* %3 = getelementptr &([110 * i32]* %array)[i32 0][i32 3];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([110 * i32]* %array)[i32 0][i32 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([110 * i32]* %array)[i32 0][i32 5];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([110 * i32]* %array)[i32 0][i32 6];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([110 * i32]* %array)[i32 0][i32 7];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([110 * i32]* %array)[i32 0][i32 8];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([110 * i32]* %array)[i32 0][i32 9];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([110 * i32]* %array)[i32 0][i32 10];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([110 * i32]* %array)[i32 0][i32 11];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([110 * i32]* %array)[i32 0][i32 12];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([110 * i32]* %array)[i32 0][i32 13];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([110 * i32]* %array)[i32 0][i32 14];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([110 * i32]* %array)[i32 0][i32 15];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([110 * i32]* %array)[i32 0][i32 16];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([110 * i32]* %array)[i32 0][i32 17];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([110 * i32]* %array)[i32 0][i32 18];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([110 * i32]* %array)[i32 0][i32 19];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &([110 * i32]* %array)[i32 0][i32 20];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &([110 * i32]* %array)[i32 0][i32 21];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &([110 * i32]* %array)[i32 0][i32 22];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &([110 * i32]* %array)[i32 0][i32 23];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &([110 * i32]* %array)[i32 0][i32 24];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &([110 * i32]* %array)[i32 0][i32 25];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &([110 * i32]* %array)[i32 0][i32 26];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &([110 * i32]* %array)[i32 0][i32 27];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &([110 * i32]* %array)[i32 0][i32 28];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &([110 * i32]* %array)[i32 0][i32 29];
    store i32* %29 with i32 0;
    i32* %30 = getelementptr &([110 * i32]* %array)[i32 0][i32 30];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &([110 * i32]* %array)[i32 0][i32 31];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &([110 * i32]* %array)[i32 0][i32 32];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &([110 * i32]* %array)[i32 0][i32 33];
    store i32* %33 with i32 0;
    i32* %34 = getelementptr &([110 * i32]* %array)[i32 0][i32 34];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &([110 * i32]* %array)[i32 0][i32 35];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &([110 * i32]* %array)[i32 0][i32 36];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &([110 * i32]* %array)[i32 0][i32 37];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &([110 * i32]* %array)[i32 0][i32 38];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &([110 * i32]* %array)[i32 0][i32 39];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &([110 * i32]* %array)[i32 0][i32 40];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &([110 * i32]* %array)[i32 0][i32 41];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &([110 * i32]* %array)[i32 0][i32 42];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &([110 * i32]* %array)[i32 0][i32 43];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &([110 * i32]* %array)[i32 0][i32 44];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &([110 * i32]* %array)[i32 0][i32 45];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &([110 * i32]* %array)[i32 0][i32 46];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &([110 * i32]* %array)[i32 0][i32 47];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &([110 * i32]* %array)[i32 0][i32 48];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &([110 * i32]* %array)[i32 0][i32 49];
    store i32* %49 with i32 0;
    i32* %50 = getelementptr &([110 * i32]* %array)[i32 0][i32 50];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &([110 * i32]* %array)[i32 0][i32 51];
    store i32* %51 with i32 0;
    i32* %52 = getelementptr &([110 * i32]* %array)[i32 0][i32 52];
    store i32* %52 with i32 0;
    i32* %53 = getelementptr &([110 * i32]* %array)[i32 0][i32 53];
    store i32* %53 with i32 0;
    i32* %54 = getelementptr &([110 * i32]* %array)[i32 0][i32 54];
    store i32* %54 with i32 0;
    i32* %55 = getelementptr &([110 * i32]* %array)[i32 0][i32 55];
    store i32* %55 with i32 0;
    i32* %56 = getelementptr &([110 * i32]* %array)[i32 0][i32 56];
    store i32* %56 with i32 0;
    i32* %57 = getelementptr &([110 * i32]* %array)[i32 0][i32 57];
    store i32* %57 with i32 0;
    i32* %58 = getelementptr &([110 * i32]* %array)[i32 0][i32 58];
    store i32* %58 with i32 0;
    i32* %59 = getelementptr &([110 * i32]* %array)[i32 0][i32 59];
    store i32* %59 with i32 0;
    i32* %60 = getelementptr &([110 * i32]* %array)[i32 0][i32 60];
    store i32* %60 with i32 0;
    i32* %61 = getelementptr &([110 * i32]* %array)[i32 0][i32 61];
    store i32* %61 with i32 0;
    i32* %62 = getelementptr &([110 * i32]* %array)[i32 0][i32 62];
    store i32* %62 with i32 0;
    i32* %63 = getelementptr &([110 * i32]* %array)[i32 0][i32 63];
    store i32* %63 with i32 0;
    i32* %64 = getelementptr &([110 * i32]* %array)[i32 0][i32 64];
    store i32* %64 with i32 0;
    i32* %65 = getelementptr &([110 * i32]* %array)[i32 0][i32 65];
    store i32* %65 with i32 0;
    i32* %66 = getelementptr &([110 * i32]* %array)[i32 0][i32 66];
    store i32* %66 with i32 0;
    i32* %67 = getelementptr &([110 * i32]* %array)[i32 0][i32 67];
    store i32* %67 with i32 0;
    i32* %68 = getelementptr &([110 * i32]* %array)[i32 0][i32 68];
    store i32* %68 with i32 0;
    i32* %69 = getelementptr &([110 * i32]* %array)[i32 0][i32 69];
    store i32* %69 with i32 0;
    i32* %70 = getelementptr &([110 * i32]* %array)[i32 0][i32 70];
    store i32* %70 with i32 0;
    i32* %71 = getelementptr &([110 * i32]* %array)[i32 0][i32 71];
    store i32* %71 with i32 0;
    i32* %72 = getelementptr &([110 * i32]* %array)[i32 0][i32 72];
    store i32* %72 with i32 0;
    i32* %73 = getelementptr &([110 * i32]* %array)[i32 0][i32 73];
    store i32* %73 with i32 0;
    i32* %74 = getelementptr &([110 * i32]* %array)[i32 0][i32 74];
    store i32* %74 with i32 0;
    i32* %75 = getelementptr &([110 * i32]* %array)[i32 0][i32 75];
    store i32* %75 with i32 0;
    i32* %76 = getelementptr &([110 * i32]* %array)[i32 0][i32 76];
    store i32* %76 with i32 0;
    i32* %77 = getelementptr &([110 * i32]* %array)[i32 0][i32 77];
    store i32* %77 with i32 0;
    i32* %78 = getelementptr &([110 * i32]* %array)[i32 0][i32 78];
    store i32* %78 with i32 0;
    i32* %79 = getelementptr &([110 * i32]* %array)[i32 0][i32 79];
    store i32* %79 with i32 0;
    i32* %80 = getelementptr &([110 * i32]* %array)[i32 0][i32 80];
    store i32* %80 with i32 0;
    i32* %81 = getelementptr &([110 * i32]* %array)[i32 0][i32 81];
    store i32* %81 with i32 0;
    i32* %82 = getelementptr &([110 * i32]* %array)[i32 0][i32 82];
    store i32* %82 with i32 0;
    i32* %83 = getelementptr &([110 * i32]* %array)[i32 0][i32 83];
    store i32* %83 with i32 0;
    i32* %84 = getelementptr &([110 * i32]* %array)[i32 0][i32 84];
    store i32* %84 with i32 0;
    i32* %85 = getelementptr &([110 * i32]* %array)[i32 0][i32 85];
    store i32* %85 with i32 0;
    i32* %86 = getelementptr &([110 * i32]* %array)[i32 0][i32 86];
    store i32* %86 with i32 0;
    i32* %87 = getelementptr &([110 * i32]* %array)[i32 0][i32 87];
    store i32* %87 with i32 0;
    i32* %88 = getelementptr &([110 * i32]* %array)[i32 0][i32 88];
    store i32* %88 with i32 0;
    i32* %89 = getelementptr &([110 * i32]* %array)[i32 0][i32 89];
    store i32* %89 with i32 0;
    i32* %90 = getelementptr &([110 * i32]* %array)[i32 0][i32 90];
    store i32* %90 with i32 0;
    i32* %91 = getelementptr &([110 * i32]* %array)[i32 0][i32 91];
    store i32* %91 with i32 0;
    i32* %92 = getelementptr &([110 * i32]* %array)[i32 0][i32 92];
    store i32* %92 with i32 0;
    i32* %93 = getelementptr &([110 * i32]* %array)[i32 0][i32 93];
    store i32* %93 with i32 0;
    i32* %94 = getelementptr &([110 * i32]* %array)[i32 0][i32 94];
    store i32* %94 with i32 0;
    i32* %95 = getelementptr &([110 * i32]* %array)[i32 0][i32 95];
    store i32* %95 with i32 0;
    i32* %96 = getelementptr &([110 * i32]* %array)[i32 0][i32 96];
    store i32* %96 with i32 0;
    i32* %97 = getelementptr &([110 * i32]* %array)[i32 0][i32 97];
    store i32* %97 with i32 0;
    i32* %98 = getelementptr &([110 * i32]* %array)[i32 0][i32 98];
    store i32* %98 with i32 0;
    i32* %99 = getelementptr &([110 * i32]* %array)[i32 0][i32 99];
    store i32* %99 with i32 0;
    i32* %100 = getelementptr &([110 * i32]* %array)[i32 0][i32 100];
    store i32* %100 with i32 0;
    i32* %101 = getelementptr &([110 * i32]* %array)[i32 0][i32 101];
    store i32* %101 with i32 0;
    i32* %102 = getelementptr &([110 * i32]* %array)[i32 0][i32 102];
    store i32* %102 with i32 0;
    i32* %103 = getelementptr &([110 * i32]* %array)[i32 0][i32 103];
    store i32* %103 with i32 0;
    i32* %104 = getelementptr &([110 * i32]* %array)[i32 0][i32 104];
    store i32* %104 with i32 0;
    i32* %105 = getelementptr &([110 * i32]* %array)[i32 0][i32 105];
    store i32* %105 with i32 0;
    i32* %106 = getelementptr &([110 * i32]* %array)[i32 0][i32 106];
    store i32* %106 with i32 0;
    i32* %107 = getelementptr &([110 * i32]* %array)[i32 0][i32 107];
    store i32* %107 with i32 0;
    i32* %108 = getelementptr &([110 * i32]* %array)[i32 0][i32 108];
    store i32* %108 with i32 0;
    i32* %109 = getelementptr &([110 * i32]* %array)[i32 0][i32 109];
    store i32* %109 with i32 0;
    i32* %n = alloc i32;
    ubr [ ^while.body [110 * i32]* %array, i32* %n, i32 1 ];
^while.body([110 * i32]* %arg, i32* %arg1, i32 %arg2):
    i32 %0 = sub i32 %arg2, i32 1;
    store i32* %arg1 with i32 4;
    i32* %i = alloc i32;
    i32* %flag = alloc i32;
    i32* %n = alloc i32;
    i32* %i1 = alloc i32;
    ubr [ ^while.body1 i32* %n, i32* %i1, [110 * i32]* %arg, i32* %arg1, i32* %i, i32* %flag, [110 * i32]* %arg, i32 %0, i32 1 ];
^while.body1(i32* %arg, i32* %arg1, [110 * i32]* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, [110 * i32]* %arg6, i32 %arg7, i32 %arg8):
    i32* %0 = getelementptr &([110 * i32]* %arg2)[i32 0][i32 %arg8];
    store i32* %0 with i32 -1;
    i32 %1 = add i32 %arg8, i32 1;
    i1 %2 = scmp le i32 %1, i32 17;
    cbr i1 %2, [ ^while.body1 i32* %arg, i32* %arg1, [110 * i32]* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, [110 * i32]* %arg6, i32 %arg7, i32 %1 ], [ ^b i32* %arg, i32* %arg1, i32* %arg3, i32* %arg4, i32* %arg5, [110 * i32]* %arg6, i32 %arg7 ];
^b(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [110 * i32]* %arg5, i32 %arg6):
    free i32* %arg1;
    free i32* %arg;
    i32* %k = alloc i32;
    ubr [ ^while.body2 i32* %arg3, i32* %k, i32* %arg4, i32* %arg2, [110 * i32]* %arg5, i32 4, i32 %arg6, i32 0, i32 0 ];
^while.body2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [110 * i32]* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i32 %0 = call () -> i32 @getint();
    i32 %1 = call () -> i32 @getint();
    i1 %2 = scmp neq i32 %arg8, i32 0;
    i1 %3 = xor i1 %2, i1 true;
    cbr i1 %3, [ ^indirect i32* %arg1, i32* %arg2, i32* %arg, i32 %1, i32 %0, [110 * i32]* %arg4, i32* %arg3, i32 %arg5, i32 %arg6, i32 %0, i32 %1, i32 %arg7, i32 %arg8 ], [ ^b1 i32* %arg1, i32* %arg2, i32* %arg, i32* %arg3, [110 * i32]* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8 ];
^indirect(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, [110 * i32]* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12):
    i32* %loc = alloc i32;
    i32 %0 = sub i32 %arg4, i32 1;
    i32 %1 = mul i32 %arg7, i32 %0;
    i32 %2 = add i32 %1, i32 %arg3;
    i32* %3 = getelementptr &([110 * i32]* %arg5)[i32 0][i32 %2];
    store i32* %3 with i32 %2;
    i1 %4 = scmp eq i32 %arg4, i32 1;
    cbr i1 %4, [ ^indirect1 i32* %arg2, i32* %arg1, i32* %arg, i32* %loc, i32 %2, i32* %arg6, [110 * i32]* %arg5, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %2 ], [ ^b2 i32* %arg, i32* %loc, i32* %arg1, i32* %arg2, i32 %arg7, [110 * i32]* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %2 ];
^b1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [110 * i32]* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i32 %0 = add i32 %arg7, i32 1;
    i1 %1 = scmp lt i32 %0, i32 10;
    cbr i1 %1, [ ^while.body2 i32* %arg2, i32* %arg, i32* %arg1, i32* %arg3, [110 * i32]* %arg4, i32 %arg5, i32 %arg6, i32 %0, i32 %arg8 ], [ ^b3 i32* %arg2, i32* %arg, i32* %arg1, [110 * i32]* %arg4, i32* %arg3, i32 %arg6, i32 %arg8 ];
^indirect1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, [110 * i32]* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12):
    i32* %0 = getelementptr &([110 * i32]* %arg6)[i32 0][i32 0];
    store i32* %0 with i32 0;
    i32* %a = alloc i32;
    i32* %b = alloc i32;
    i32* %m = alloc i32;
    i32 %1 = call (i32, [110 * i32]*, i32*) -> i32 @findfa(i32 %arg4, [110 * i32]* %arg6, i32* %arg5);
    i32* %n = alloc i32;
    i32 %2 = call (i32, [110 * i32]*, i32*) -> i32 @findfa(i32 0, [110 * i32]* %arg6, i32* %arg5);
    i32 %3 = load i32* %arg5;
    i1 %4 = scmp neq i32 %1, i32 %2;
    cbr i1 %4, [ ^indirect2 i32* %b, i32* %a, i32* %n, i32* %m, i32 %2, i32 %1, [110 * i32]* %arg6, [110 * i32]* %arg6, i32* %arg1, i32* %arg3, i32* %arg2, i32* %arg, i32* %arg5, i32 %3, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12 ], [ ^b4 i32* %a, i32* %b, i32* %m, i32* %n, i32* %arg5, i32* %arg, i32* %arg2, i32* %arg3, i32* %arg1, [110 * i32]* %arg6, i32 %3, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12 ];
^b2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, [110 * i32]* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13):
    i1 %0 = scmp eq i32 %arg9, i32 %arg4;
    cbr i1 %0, [ ^if.then i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg, i32* %arg6, [110 * i32]* %arg5, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13 ], [ ^b5 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, [110 * i32]* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13 ];
^b3(i32* %arg, i32* %arg1, i32* %arg2, [110 * i32]* %arg3, i32* %arg4, i32 %arg5, i32 %arg6):
    i1 %0 = scmp neq i32 %arg6, i32 0;
    i1 %1 = xor i1 %0, i1 true;
    cbr i1 %1, [ ^if.then1 i32* %arg1, i32* %arg2, i32* %arg, i32* %arg4, [110 * i32]* %arg3, i32 %arg5 ], [ ^b6 i32* %arg, i32* %arg2, i32* %arg1, [110 * i32]* %arg3, i32* %arg4, i32 %arg5 ];
^indirect2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, [110 * i32]* %arg6, [110 * i32]* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19):
    i32* %0 = getelementptr &([110 * i32]* %arg6)[i32 0][i32 %arg5];
    store i32* %0 with i32 %arg4;
    free i32* %arg2;
    free i32* %arg3;
    free i32* %arg;
    free i32* %arg1;
    ubr [ ^b2 i32* %arg10, i32* %arg9, i32* %arg8, i32* %arg11, i32 %arg13, [110 * i32]* %arg7, i32* %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19 ];
^b4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, [110 * i32]* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16):
    free i32* %arg3;
    free i32* %arg2;
    free i32* %arg1;
    free i32* %arg;
    i1 %0 = scmp eq i32 %arg12, i32 %arg10;
    cbr i1 %0, [ ^if.then i32* %arg5, i32* %arg8, i32* %arg7, i32* %arg6, i32* %arg4, [110 * i32]* %arg9, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16 ], [ ^b5 i32* %arg7, i32* %arg6, i32* %arg8, i32* %arg5, [110 * i32]* %arg9, i32* %arg4, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16 ];
^if.then(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [110 * i32]* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11):
    i32* %0 = getelementptr &([110 * i32]* %arg5)[i32 0][i32 17];
    store i32* %0 with i32 17;
    i32* %a = alloc i32;
    i32* %b = alloc i32;
    i32* %m = alloc i32;
    i32 %1 = call (i32, [110 * i32]*, i32*) -> i32 @findfa(i32 %arg11, [110 * i32]* %arg5, i32* %arg4);
    i32* %n = alloc i32;
    i32 %2 = call (i32, [110 * i32]*, i32*) -> i32 @findfa(i32 17, [110 * i32]* %arg5, i32* %arg4);
    i32 %3 = load i32* %arg4;
    i1 %4 = scmp neq i32 %1, i32 %2;
    cbr i1 %4, [ ^indirect3 i32* %b, i32* %a, i32* %n, i32* %m, i32 %2, i32 %1, [110 * i32]* %arg5, i32* %arg4, [110 * i32]* %arg5, i32* %arg, i32* %arg1, i32* %arg3, i32* %arg2, i32 %3, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11 ], [ ^b8 i32* %a, i32* %b, i32* %m, i32* %n, i32* %arg2, i32* %arg3, i32* %arg1, i32* %arg, [110 * i32]* %arg5, i32* %arg4, i32 %3, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11 ];
^if.then1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [110 * i32]* %arg4, i32 %arg5):
    call (i32) -> void @putint(i32 -1);
    call (i32) -> void @putch(i32 10);
    free i32* %arg;
    free i32* %arg1;
    free i32* %arg2;
    i1 %0 = scmp neq i32 %arg5, i32 0;
    cbr i1 %0, [ ^while.body [110 * i32]* %arg4, i32* %arg3, i32 %arg5 ], [ ^b10 ];
^b5(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [110 * i32]* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12):
    i1 %0 = scmp lt i32 %arg9, i32 %arg6;
    cbr i1 %0, [ ^b7 i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg, i32* %arg5, [110 * i32]* %arg4, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12 ], [ ^b9 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [110 * i32]* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12 ];
^b6(i32* %arg, i32* %arg1, i32* %arg2, [110 * i32]* %arg3, i32* %arg4, i32 %arg5):
    free i32* %arg2;
    free i32* %arg1;
    free i32* %arg;
    i1 %0 = scmp neq i32 %arg5, i32 0;
    cbr i1 %0, [ ^while.body [110 * i32]* %arg3, i32* %arg4, i32 %arg5 ], [ ^b10 ];
^indirect3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, [110 * i32]* %arg6, i32* %arg7, [110 * i32]* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19):
    i32* %0 = getelementptr &([110 * i32]* %arg6)[i32 0][i32 %arg5];
    store i32* %0 with i32 %arg4;
    free i32* %arg2;
    free i32* %arg3;
    free i32* %arg;
    free i32* %arg1;
    ubr [ ^b5 i32* %arg12, i32* %arg11, i32* %arg10, i32* %arg9, [110 * i32]* %arg8, i32* %arg7, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19 ];
^b7(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [110 * i32]* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12):
    i32 %0 = add i32 %arg12, i32 1;
    i32* %1 = getelementptr &([110 * i32]* %arg5)[i32 0][i32 %0];
    i32 %2 = load i32* %1;
    i1 %3 = scmp neq i32 %2, i32 -1;
    cbr i1 %3, [ ^if.then2 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [110 * i32]* %arg5, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12 ], [ ^b9 i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg, [110 * i32]* %arg5, i32* %arg4, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12 ];
^b8(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, [110 * i32]* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16):
    free i32* %arg3;
    free i32* %arg2;
    free i32* %arg1;
    free i32* %arg;
    i1 %0 = scmp lt i32 %arg13, i32 %arg10;
    cbr i1 %0, [ ^b7 i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg9, [110 * i32]* %arg8, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16 ], [ ^b9 i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, [110 * i32]* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16 ];
^b9(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [110 * i32]* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12):
    i1 %0 = scmp gt i32 %arg9, i32 1;
    cbr i1 %0, [ ^b11 i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg, i32* %arg5, [110 * i32]* %arg4, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg10, i32 %arg11, i32 %arg12 ], [ ^b12 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [110 * i32]* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg10, i32 %arg11, i32 %arg12 ];
^b10():
    ret i32 0;
^if.then2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [110 * i32]* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11):
    i32 %0 = add i32 %arg11, i32 1;
    i32* %a = alloc i32;
    i32* %b = alloc i32;
    i32* %m = alloc i32;
    i32 %1 = call (i32, [110 * i32]*, i32*) -> i32 @findfa(i32 %arg11, [110 * i32]* %arg5, i32* %arg4);
    i32* %n = alloc i32;
    i32 %2 = call (i32, [110 * i32]*, i32*) -> i32 @findfa(i32 %0, [110 * i32]* %arg5, i32* %arg4);
    i32 %3 = load i32* %arg4;
    i1 %4 = scmp neq i32 %1, i32 %2;
    cbr i1 %4, [ ^indirect4 i32* %b, i32* %a, i32* %n, i32* %m, i32 %2, i32 %1, [110 * i32]* %arg5, i32* %arg, i32* %arg1, [110 * i32]* %arg5, i32* %arg2, i32* %arg4, i32* %arg3, i32 %3, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11 ], [ ^b13 i32* %a, i32* %b, i32* %m, i32* %n, i32* %arg3, i32* %arg4, i32* %arg2, [110 * i32]* %arg5, i32* %arg1, i32* %arg, i32 %3, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11 ];
^b11(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [110 * i32]* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11):
    i32 %0 = sub i32 %arg11, i32 1;
    i32* %1 = getelementptr &([110 * i32]* %arg5)[i32 0][i32 %0];
    i32 %2 = load i32* %1;
    i1 %3 = scmp neq i32 %2, i32 -1;
    cbr i1 %3, [ ^if.then3 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [110 * i32]* %arg5, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11 ], [ ^b12 i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg, [110 * i32]* %arg5, i32* %arg4, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11 ];
^b12(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [110 * i32]* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11):
    i1 %0 = scmp lt i32 %arg8, i32 %arg6;
    cbr i1 %0, [ ^indirect5 i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg, i32 %arg6, i32* %arg5, [110 * i32]* %arg4, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11 ], [ ^b14 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg5, [110 * i32]* %arg4, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11 ];
^indirect4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, [110 * i32]* %arg6, i32* %arg7, i32* %arg8, [110 * i32]* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19):
    i32* %0 = getelementptr &([110 * i32]* %arg6)[i32 0][i32 %arg5];
    store i32* %0 with i32 %arg4;
    free i32* %arg2;
    free i32* %arg3;
    free i32* %arg;
    free i32* %arg1;
    ubr [ ^b9 i32* %arg12, i32* %arg10, i32* %arg8, i32* %arg7, [110 * i32]* %arg9, i32* %arg11, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19 ];
^b13(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, [110 * i32]* %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16):
    free i32* %arg3;
    free i32* %arg2;
    free i32* %arg1;
    free i32* %arg;
    i1 %0 = scmp gt i32 %arg13, i32 1;
    cbr i1 %0, [ ^b11 i32* %arg9, i32* %arg8, i32* %arg6, i32* %arg4, i32* %arg5, [110 * i32]* %arg7, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg14, i32 %arg15, i32 %arg16 ], [ ^b12 i32* %arg4, i32* %arg6, i32* %arg8, i32* %arg9, [110 * i32]* %arg7, i32* %arg5, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg14, i32 %arg15, i32 %arg16 ];
^if.then3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [110 * i32]* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i32 %0 = sub i32 %arg10, i32 1;
    i32* %a = alloc i32;
    i32* %b = alloc i32;
    i32* %m = alloc i32;
    i32 %1 = call (i32, [110 * i32]*, i32*) -> i32 @findfa(i32 %arg10, [110 * i32]* %arg5, i32* %arg4);
    i32* %n = alloc i32;
    i32 %2 = call (i32, [110 * i32]*, i32*) -> i32 @findfa(i32 %0, [110 * i32]* %arg5, i32* %arg4);
    i32 %3 = load i32* %arg4;
    i1 %4 = scmp neq i32 %1, i32 %2;
    cbr i1 %4, [ ^indirect6 i32* %b, i32* %a, i32* %n, i32* %m, i32 %2, i32 %1, [110 * i32]* %arg5, i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [110 * i32]* %arg5, i32* %arg4, i32 %3, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10 ], [ ^b15 i32* %a, i32* %b, i32* %m, i32* %n, i32* %arg4, [110 * i32]* %arg5, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg, i32 %3, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10 ];
^indirect5(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, [110 * i32]* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12):
    i32 %0 = add i32 %arg12, i32 %arg4;
    i32* %1 = getelementptr &([110 * i32]* %arg6)[i32 0][i32 %0];
    i32 %2 = load i32* %1;
    i1 %3 = scmp neq i32 %2, i32 -1;
    cbr i1 %3, [ ^if.then4 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [110 * i32]* %arg6, i32* %arg5, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12 ], [ ^b14 i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg, i32* %arg5, [110 * i32]* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12 ];
^b14(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [110 * i32]* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11):
    i1 %0 = scmp gt i32 %arg8, i32 1;
    cbr i1 %0, [ ^b16 i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg, [110 * i32]* %arg5, i32* %arg4, i32 %arg6, i32 %arg7, i32 %arg9, i32 %arg10, i32 %arg11 ], [ ^b17 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg, i32* %arg4, [110 * i32]* %arg5, i32 %arg6, i32 %arg7, i32 %arg9, i32 %arg10 ];
^indirect6(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, [110 * i32]* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, [110 * i32]* %arg11, i32* %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16, i32 %arg17, i32 %arg18):
    i32* %0 = getelementptr &([110 * i32]* %arg6)[i32 0][i32 %arg5];
    store i32* %0 with i32 %arg4;
    free i32* %arg2;
    free i32* %arg3;
    free i32* %arg;
    free i32* %arg1;
    ubr [ ^b12 i32* %arg10, i32* %arg9, i32* %arg8, i32* %arg7, [110 * i32]* %arg11, i32* %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16, i32 %arg17, i32 %arg18 ];
^b15(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [110 * i32]* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15):
    free i32* %arg3;
    free i32* %arg2;
    free i32* %arg1;
    free i32* %arg;
    i1 %0 = scmp lt i32 %arg12, i32 %arg10;
    cbr i1 %0, [ ^indirect5 i32* %arg9, i32* %arg8, i32* %arg7, i32* %arg6, i32 %arg10, i32* %arg4, [110 * i32]* %arg5, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15 ], [ ^b14 i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg4, [110 * i32]* %arg5, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15 ];
^if.then4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [110 * i32]* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11):
    i32 %0 = add i32 %arg11, i32 %arg6;
    i32* %a = alloc i32;
    i32* %b = alloc i32;
    i32* %m = alloc i32;
    i32 %1 = call (i32, [110 * i32]*, i32*) -> i32 @findfa(i32 %arg11, [110 * i32]* %arg4, i32* %arg5);
    i32* %n = alloc i32;
    i32 %2 = call (i32, [110 * i32]*, i32*) -> i32 @findfa(i32 %0, [110 * i32]* %arg4, i32* %arg5);
    i32 %3 = load i32* %arg5;
    i1 %4 = scmp neq i32 %1, i32 %2;
    cbr i1 %4, [ ^indirect7 i32* %b, i32* %a, i32* %n, i32* %m, i32 %2, i32 %1, [110 * i32]* %arg4, i32* %arg5, i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [110 * i32]* %arg4, i32 %3, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11 ], [ ^b18 i32* %a, i32* %b, i32* %m, i32* %n, [110 * i32]* %arg4, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg, i32* %arg5, i32 %3, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11 ];
^b16(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [110 * i32]* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i32 %0 = sub i32 %arg10, i32 %arg6;
    i32* %1 = getelementptr &([110 * i32]* %arg4)[i32 0][i32 %0];
    i32 %2 = load i32* %1;
    i1 %3 = scmp neq i32 %2, i32 -1;
    cbr i1 %3, [ ^if.then5 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [110 * i32]* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10 ], [ ^b17 i32* %arg2, i32* %arg1, i32* %arg, i32* %arg3, i32* %arg5, [110 * i32]* %arg4, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9 ];
^b17(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [110 * i32]* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i32* %0 = getelementptr &([110 * i32]* %arg5)[i32 0][i32 0];
    i32 %1 = load i32* %0;
    i1 %2 = scmp neq i32 %1, i32 -1;
    cbr i1 %2, [ ^b19 i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg, i32* %arg4, [110 * i32]* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9 ], [ ^b20 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, [110 * i32]* %arg5, i32* %arg4, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9 ];
^indirect7(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, [110 * i32]* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, [110 * i32]* %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16, i32 %arg17, i32 %arg18):
    i32* %0 = getelementptr &([110 * i32]* %arg6)[i32 0][i32 %arg5];
    store i32* %0 with i32 %arg4;
    free i32* %arg2;
    free i32* %arg3;
    free i32* %arg;
    free i32* %arg1;
    ubr [ ^b14 i32* %arg11, i32* %arg10, i32* %arg9, i32* %arg8, i32* %arg7, [110 * i32]* %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16, i32 %arg17, i32 %arg18 ];
^b18(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [110 * i32]* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15):
    free i32* %arg3;
    free i32* %arg2;
    free i32* %arg1;
    free i32* %arg;
    i1 %0 = scmp gt i32 %arg12, i32 1;
    cbr i1 %0, [ ^b16 i32* %arg8, i32* %arg7, i32* %arg6, i32* %arg5, [110 * i32]* %arg4, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg13, i32 %arg14, i32 %arg15 ], [ ^b17 i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg5, i32* %arg9, [110 * i32]* %arg4, i32 %arg10, i32 %arg11, i32 %arg13, i32 %arg14 ];
^if.then5(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [110 * i32]* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i32 %0 = sub i32 %arg10, i32 %arg6;
    i32* %a = alloc i32;
    i32* %b = alloc i32;
    i32* %m = alloc i32;
    i32 %1 = call (i32, [110 * i32]*, i32*) -> i32 @findfa(i32 %arg10, [110 * i32]* %arg4, i32* %arg5);
    i32* %n = alloc i32;
    i32 %2 = call (i32, [110 * i32]*, i32*) -> i32 @findfa(i32 %0, [110 * i32]* %arg4, i32* %arg5);
    i32 %3 = load i32* %arg5;
    i1 %4 = scmp neq i32 %1, i32 %2;
    cbr i1 %4, [ ^indirect8 i32* %b, i32* %a, i32* %n, i32* %m, i32 %2, i32 %1, [110 * i32]* %arg4, [110 * i32]* %arg4, i32* %arg5, i32* %arg3, i32* %arg, i32* %arg1, i32* %arg2, i32 %3, i32 %arg7, i32 %arg8, i32 %arg9 ], [ ^b21 i32* %a, i32* %b, i32* %m, i32* %n, i32* %arg2, i32* %arg1, i32* %arg, i32* %arg3, i32* %arg5, [110 * i32]* %arg4, i32 %3, i32 %arg7, i32 %arg8, i32 %arg9 ];
^b19(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [110 * i32]* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i32* %0 = getelementptr &([110 * i32]* %arg5)[i32 0][i32 17];
    i32 %1 = load i32* %0;
    i1 %2 = scmp neq i32 %1, i32 -1;
    cbr i1 %2, [ ^b22 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [110 * i32]* %arg5, i32 %arg7, i32 %arg8, i32 %arg9 ], [ ^b20 i32* %arg2, i32* %arg3, i32* %arg1, i32* %arg, [110 * i32]* %arg5, i32* %arg4, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9 ];
^b20(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [110 * i32]* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    free i32* %arg3;
    i32 %0 = add i32 %arg8, i32 1;
    i1 %1 = scmp lt i32 %0, i32 10;
    cbr i1 %1, [ ^while.body2 i32* %arg2, i32* %arg1, i32* %arg, i32* %arg5, [110 * i32]* %arg4, i32 %arg6, i32 %arg7, i32 %0, i32 %arg9 ], [ ^b3 i32* %arg2, i32* %arg1, i32* %arg, [110 * i32]* %arg4, i32* %arg5, i32 %arg7, i32 %arg9 ];
^indirect8(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, [110 * i32]* %arg6, [110 * i32]* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16):
    i32* %0 = getelementptr &([110 * i32]* %arg6)[i32 0][i32 %arg5];
    store i32* %0 with i32 %arg4;
    free i32* %arg2;
    free i32* %arg3;
    free i32* %arg;
    free i32* %arg1;
    ubr [ ^b17 i32* %arg12, i32* %arg11, i32* %arg10, i32* %arg9, i32* %arg8, [110 * i32]* %arg7, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16 ];
^b21(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, [110 * i32]* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13):
    free i32* %arg3;
    free i32* %arg2;
    free i32* %arg1;
    free i32* %arg;
    i32* %0 = getelementptr &([110 * i32]* %arg9)[i32 0][i32 0];
    i32 %1 = load i32* %0;
    i1 %2 = scmp neq i32 %1, i32 -1;
    cbr i1 %2, [ ^b19 i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg8, [110 * i32]* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13 ], [ ^b20 i32* %arg5, i32* %arg4, i32* %arg6, i32* %arg7, [110 * i32]* %arg9, i32* %arg8, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13 ];
^b22(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [110 * i32]* %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i32 %0 = call (i32, [110 * i32]*, i32*) -> i32 @findfa(i32 0, [110 * i32]* %arg5, i32* %arg4);
    i32 %1 = call (i32, [110 * i32]*, i32*) -> i32 @findfa(i32 17, [110 * i32]* %arg5, i32* %arg4);
    i32 %2 = load i32* %arg4;
    i1 %3 = scmp eq i32 %0, i32 %1;
    cbr i1 %3, [ ^if.then6 i32* %arg3, i32* %arg, i32* %arg1, i32* %arg2, i32* %arg4, [110 * i32]* %arg5, i32 %2, i32 %arg6, i32 %arg7 ], [ ^b20 i32* %arg2, i32* %arg3, i32* %arg1, i32* %arg, [110 * i32]* %arg5, i32* %arg4, i32 %2, i32 %arg6, i32 %arg7, i32 %arg8 ];
^if.then6(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [110 * i32]* %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i32 %0 = add i32 %arg8, i32 1;
    call (i32) -> void @putint(i32 %0);
    call (i32) -> void @putch(i32 10);
    free i32* %arg1;
    ubr [ ^b1 i32* %arg, i32* %arg3, i32* %arg2, i32* %arg4, [110 * i32]* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 1 ];
}
