internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [110 * i32]* @array, align 8 { Flexible };
internal func @findfa(i32 %a) -> i32 {
  ^entry:
    [110 * i32]* %0 = ptrcast [110 * i32]* @array to [110 * i32]*;
    i32* %1 = getelementptr &([110 * i32]* %0)[i64 0][i32 %a];
    i32 %2 = load i32* %1;
    i1 %3 = icmp eq i32 %a, i32 %2;
    cbr i1 %3(prob = 0.5), ^b, ^if.else;
  ^if.else:
    i32* %4 = getelementptr &([110 * i32]* %0)[i64 0][i32 %2];
    i32 %5 = load i32* %4;
    i1 %6 = icmp eq i32 %2, i32 %5;
    cbr i1 %6(prob = 0.5), ^if.else1, ^if.else2;
  ^b:
    i32 %7 = phi [^entry, i32 %a] [^if.else1, i32 %8];
    ret i32 %7;
  ^if.else1:
    i32 %8 = phi [^if.else, i32 %2] [^b1, i32 %12];
    store i32* %1 with i32 %8;
    ubr ^b;
  ^if.else2:
    i32* %9 = getelementptr &([110 * i32]* %0)[i64 0][i32 %5];
    i32 %10 = load i32* %9;
    i1 %11 = icmp eq i32 %5, i32 %10;
    cbr i1 %11(prob = 0.5), ^b1, ^if.else3;
  ^b1:
    i32 %12 = phi [^if.else2, i32 %5] [^if.else4, i32 %16];
    store i32* %4 with i32 %12;
    ubr ^if.else1;
  ^if.else3:
    i32* %13 = getelementptr &([110 * i32]* %0)[i64 0][i32 %10];
    i32 %14 = load i32* %13;
    i1 %15 = icmp eq i32 %10, i32 %14;
    cbr i1 %15(prob = 0.5), ^if.else4, ^if.else5;
  ^if.else4:
    i32 %16 = phi [^if.else3, i32 %10] [^b2, i32 %20];
    store i32* %9 with i32 %16;
    ubr ^b1;
  ^if.else5:
    i32* %17 = getelementptr &([110 * i32]* %0)[i64 0][i32 %14];
    i32 %18 = load i32* %17;
    i1 %19 = icmp eq i32 %14, i32 %18;
    cbr i1 %19(prob = 0.5), ^b2, ^if.else6;
  ^b2:
    i32 %20 = phi [^if.else5, i32 %14] [^if.else7, i32 %24];
    store i32* %13 with i32 %20;
    ubr ^if.else4;
  ^if.else6:
    i32* %21 = getelementptr &([110 * i32]* %0)[i64 0][i32 %18];
    i32 %22 = load i32* %21;
    i1 %23 = icmp eq i32 %18, i32 %22;
    cbr i1 %23(prob = 0.5), ^if.else7, ^if.else8;
  ^if.else7:
    i32 %24 = phi [^if.else6, i32 %18] [^b3, i32 %28];
    store i32* %17 with i32 %24;
    ubr ^b2;
  ^if.else8:
    i32* %25 = getelementptr &([110 * i32]* %0)[i64 0][i32 %22];
    i32 %26 = load i32* %25;
    i1 %27 = icmp eq i32 %22, i32 %26;
    cbr i1 %27(prob = 0.5), ^b3, ^if.else9;
  ^b3:
    i32 %28 = phi [^if.else8, i32 %22] [^if.else10, i32 %32];
    store i32* %21 with i32 %28;
    ubr ^if.else7;
  ^if.else9:
    i32* %29 = getelementptr &([110 * i32]* %0)[i64 0][i32 %26];
    i32 %30 = load i32* %29;
    i1 %31 = icmp eq i32 %26, i32 %30;
    cbr i1 %31(prob = 0.5), ^if.else10, ^if.else11;
  ^if.else10:
    i32 %32 = phi [^if.else9, i32 %26] [^if.else11, i32 %33];
    store i32* %25 with i32 %32;
    ubr ^b3;
  ^if.else11:
    i32 %33 = call (i32) -> i32 @findfa(i32 %30);
    store i32* %29 with i32 %33;
    ubr ^if.else10;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [110 * i32]* %0 = ptrcast [110 * i32]* @array to [110 * i32]*;
    i32* %1 = getelementptr &([110 * i32]* %0)[i64 0][i64 0];
    i32* %2 = getelementptr &([110 * i32]* %0)[i64 0][i64 1];
    i32* %3 = getelementptr &([110 * i32]* %0)[i64 0][i64 2];
    i32* %4 = getelementptr &([110 * i32]* %0)[i64 0][i64 3];
    i32* %5 = getelementptr &([110 * i32]* %0)[i64 0][i64 4];
    i32* %6 = getelementptr &([110 * i32]* %0)[i64 0][i64 5];
    i32* %7 = getelementptr &([110 * i32]* %0)[i64 0][i64 6];
    i32* %8 = getelementptr &([110 * i32]* %0)[i64 0][i64 7];
    i32* %9 = getelementptr &([110 * i32]* %0)[i64 0][i64 8];
    i32* %10 = getelementptr &([110 * i32]* %0)[i64 0][i64 9];
    i32* %11 = getelementptr &([110 * i32]* %0)[i64 0][i64 10];
    i32* %12 = getelementptr &([110 * i32]* %0)[i64 0][i64 11];
    i32* %13 = getelementptr &([110 * i32]* %0)[i64 0][i64 12];
    i32* %14 = getelementptr &([110 * i32]* %0)[i64 0][i64 13];
    i32* %15 = getelementptr &([110 * i32]* %0)[i64 0][i64 14];
    i32* %16 = getelementptr &([110 * i32]* %0)[i64 0][i64 15];
    i32* %17 = getelementptr &([110 * i32]* %0)[i64 0][i64 16];
    i32* %18 = getelementptr &([110 * i32]* %0)[i64 0][i64 17];
    ubr ^while.header;
  ^while.header:
    i32 %19 = phi [^entry, i32 1] [^b3, i32 %21] [^if.then3, i32 %21];
    i1 %20 = icmp neq i32 %19, i32 0;
    cbr i1 %20(prob = 0.984615), ^while.body, ^b;
  ^while.body:
    i32 %21 = add i32 %19, i32 -1;
    store i32* %2 with i32 -1;
    store i32* %3 with i32 -1;
    store i32* %4 with i32 -1;
    store i32* %5 with i32 -1;
    store i32* %6 with i32 -1;
    store i32* %7 with i32 -1;
    store i32* %8 with i32 -1;
    store i32* %9 with i32 -1;
    store i32* %10 with i32 -1;
    store i32* %11 with i32 -1;
    store i32* %12 with i32 -1;
    store i32* %13 with i32 -1;
    store i32* %14 with i32 -1;
    store i32* %15 with i32 -1;
    store i32* %16 with i32 -1;
    store i32* %17 with i32 -1;
    store i32* %18 with i32 -1;
    ubr ^while.body1;
  ^b:
    ret i32 0;
  ^while.body1:
    i1 %22 = phi [^while.body, i1 true] [^b1, i1 %36];
    i32 %23 = phi [^while.body, i32 0] [^b1, i32 %27];
    i32 %24 = phi [^while.body, i32 0] [^b1, i32 %34];
    i32 %25 = call () -> i32 @getint();
    i32 %26 = call () -> i32 @getint();
    i32 %27 = add i32 %23, i32 1;
    cbr i1 %22(prob = 0.5), ^if.then, ^b1;
  ^if.then:
    i32 %28 = add i32 %25, i32 -1;
    i32 %29 = mul i32 %28, i32 4;
    i32* %30 = getelementptr &([110 * i32]* %0)[i64 0][i32 %26];
    i32* %31 = getelementptr &(i32* %30)[i32 %29];
    i32 %32 = add i32 %26, i32 %29;
    store i32* %31 with i32 %32;
    i1 %33 = icmp eq i32 %25, i32 1;
    cbr i1 %33(prob = 0.5), ^if.then1, ^b2;
  ^b1:
    i32 %34 = phi [^while.body1, i32 %24] [^b12, i32 %24] [^b13, i32 %24] [^b14, i32 %24] [^if.then14, i32 1];
    i1 %35 = icmp slt i32 %27, i32 10;
    i1 %36 = icmp eq i32 %34, i32 0;
    cbr i1 %35(prob = 0.9), ^while.body1, ^b3;
  ^if.then1:
    store i32* %1 with i32 0;
    i32 %37 = call (i32) -> i32 @findfa(i32 %32);
    i32 %38 = call (i32) -> i32 @findfa(i32 0);
    i1 %39 = icmp neq i32 %37, i32 %38;
    cbr i1 %39(prob = 0.5), ^if.then2, ^b2;
  ^b2:
    i1 %40 = icmp eq i32 %25, i32 4;
    cbr i1 %40(prob = 0.5), ^if.then4, ^b4;
  ^b3:
    cbr i1 %36(prob = 0.5), ^if.then3, ^while.header;
  ^if.then2:
    i32* %41 = getelementptr &([110 * i32]* %0)[i64 0][i32 %37];
    store i32* %41 with i32 %38;
    ubr ^b2;
  ^if.then3:
    call (i32) -> void @putint(i32 -1);
    call (i32) -> void @putch(i32 10);
    ubr ^while.header;
  ^if.then4:
    store i32* %18 with i32 17;
    i32 %42 = call (i32) -> i32 @findfa(i32 %32);
    i32 %43 = call (i32) -> i32 @findfa(i32 17);
    i1 %44 = icmp neq i32 %42, i32 %43;
    cbr i1 %44(prob = 0.5), ^if.then5, ^b4;
  ^b4:
    i1 %45 = icmp slt i32 %26, i32 4;
    cbr i1 %45(prob = 0.5), ^b5, ^b6;
  ^if.then5:
    i32* %46 = getelementptr &([110 * i32]* %0)[i64 0][i32 %42];
    store i32* %46 with i32 %43;
    ubr ^b4;
  ^b5:
    i32* %47 = getelementptr &(i32* %31)[i64 1];
    i32 %48 = load i32* %47;
    i1 %49 = icmp neq i32 %48, i32 -1;
    cbr i1 %49(prob = 0.5), ^if.then6, ^b6;
  ^b6:
    i1 %50 = icmp sgt i32 %26, i32 1;
    cbr i1 %50(prob = 0.5), ^b7, ^b8;
  ^if.then6:
    i32 %51 = call (i32) -> i32 @findfa(i32 %32);
    i32 %52 = add i32 %32, i32 1;
    i32 %53 = call (i32) -> i32 @findfa(i32 %52);
    i1 %54 = icmp neq i32 %51, i32 %53;
    cbr i1 %54(prob = 0.5), ^if.then7, ^b6;
  ^b7:
    i32* %55 = getelementptr &(i32* %31)[i64 -1];
    i32 %56 = load i32* %55;
    i1 %57 = icmp neq i32 %56, i32 -1;
    cbr i1 %57(prob = 0.5), ^if.then8, ^b8;
  ^b8:
    i1 %58 = icmp slt i32 %25, i32 4;
    cbr i1 %58(prob = 0.5), ^b9, ^b10;
  ^if.then7:
    i32* %59 = getelementptr &([110 * i32]* %0)[i64 0][i32 %51];
    store i32* %59 with i32 %53;
    ubr ^b6;
  ^if.then8:
    i32 %60 = call (i32) -> i32 @findfa(i32 %32);
    i32 %61 = add i32 %32, i32 -1;
    i32 %62 = call (i32) -> i32 @findfa(i32 %61);
    i1 %63 = icmp neq i32 %60, i32 %62;
    cbr i1 %63(prob = 0.5), ^if.then9, ^b8;
  ^b9:
    i32* %64 = getelementptr &(i32* %31)[i64 4];
    i32 %65 = load i32* %64;
    i1 %66 = icmp neq i32 %65, i32 -1;
    cbr i1 %66(prob = 0.5), ^if.then10, ^b10;
  ^b10:
    i1 %67 = icmp sgt i32 %25, i32 1;
    cbr i1 %67(prob = 0.5), ^b11, ^b12;
  ^if.then9:
    i32* %68 = getelementptr &([110 * i32]* %0)[i64 0][i32 %60];
    store i32* %68 with i32 %62;
    ubr ^b8;
  ^if.then10:
    i32 %69 = call (i32) -> i32 @findfa(i32 %32);
    i32 %70 = add i32 %32, i32 4;
    i32 %71 = call (i32) -> i32 @findfa(i32 %70);
    i1 %72 = icmp neq i32 %69, i32 %71;
    cbr i1 %72(prob = 0.5), ^if.then11, ^b10;
  ^b11:
    i32 %73 = add i32 %32, i32 -4;
    i32* %74 = getelementptr &([110 * i32]* %0)[i64 0][i32 %73];
    i32 %75 = load i32* %74;
    i1 %76 = icmp neq i32 %75, i32 -1;
    cbr i1 %76(prob = 0.5), ^if.then12, ^b12;
  ^b12:
    i32 %77 = load i32* %1;
    i1 %78 = icmp neq i32 %77, i32 -1;
    cbr i1 %78(prob = 0.5), ^b13, ^b1;
  ^if.then11:
    i32* %79 = getelementptr &([110 * i32]* %0)[i64 0][i32 %69];
    store i32* %79 with i32 %71;
    ubr ^b10;
  ^if.then12:
    i32 %80 = call (i32) -> i32 @findfa(i32 %32);
    i32 %81 = call (i32) -> i32 @findfa(i32 %73);
    i1 %82 = icmp neq i32 %80, i32 %81;
    cbr i1 %82(prob = 0.5), ^if.then13, ^b12;
  ^b13:
    i32 %83 = load i32* %18;
    i1 %84 = icmp neq i32 %83, i32 -1;
    cbr i1 %84(prob = 0.5), ^b14, ^b1;
  ^if.then13:
    i32* %85 = getelementptr &([110 * i32]* %0)[i64 0][i32 %80];
    store i32* %85 with i32 %81;
    ubr ^b12;
  ^b14:
    i32 %86 = call (i32) -> i32 @findfa(i32 0);
    i32 %87 = call (i32) -> i32 @findfa(i32 17);
    i1 %88 = icmp eq i32 %86, i32 %87;
    cbr i1 %88(prob = 0.5), ^if.then14, ^b1;
  ^if.then14:
    call (i32) -> void @putint(i32 %27);
    call (i32) -> void @putch(i32 10);
    ubr ^b1;
}
