internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [110 * i32]* @array, align 8 { Flexible };
internal func @findfa(i32 %a) -> i32 {
  ^entry:
    [110 * i32]* %0 = ptrcast [110 * i32]* @array to [110 * i32]*;
    i32* %1 = getelementptr &([110 * i32]* %0)[i64 0][i32 %a];
    i32 %2 = load i32* %1;
    i1 %3 = icmp eq i32 %a, i32 %2;
    cbr i1 %3(prob = 0.5), ^b, ^entry1;
  ^entry1:
    i32* %4 = getelementptr &([110 * i32]* %0)[i64 0][i32 %2];
    i32 %5 = load i32* %4;
    i1 %6 = icmp eq i32 %2, i32 %5;
    cbr i1 %6(prob = 0.5), ^if.else, ^entry2;
  ^b:
    i32 %7 = phi [^entry, i32 %a] [^if.else, i32 %8];
    ret i32 %7;
  ^if.else:
    i32 %8 = phi [^entry1, i32 %2] [^b1, i32 %12];
    store i32* %1 with i32 %8;
    ubr ^b;
  ^entry2:
    i32* %9 = getelementptr &([110 * i32]* %0)[i64 0][i32 %5];
    i32 %10 = load i32* %9;
    i1 %11 = icmp eq i32 %5, i32 %10;
    cbr i1 %11(prob = 0.5), ^b1, ^entry3;
  ^b1:
    i32 %12 = phi [^entry2, i32 %5] [^if.else1, i32 %16];
    store i32* %4 with i32 %12;
    ubr ^if.else;
  ^entry3:
    i32* %13 = getelementptr &([110 * i32]* %0)[i64 0][i32 %10];
    i32 %14 = load i32* %13;
    i1 %15 = icmp eq i32 %10, i32 %14;
    cbr i1 %15(prob = 0.5), ^if.else1, ^if.else2;
  ^if.else1:
    i32 %16 = phi [^entry3, i32 %10] [^if.else2, i32 %17];
    store i32* %9 with i32 %16;
    ubr ^b1;
  ^if.else2:
    i32 %17 = call (i32) -> i32 @findfa(i32 %14);
    store i32* %13 with i32 %17;
    ubr ^if.else1;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [110 * i32]* %0 = ptrcast [110 * i32]* @array to [110 * i32]*;
    i32* %1 = getelementptr &([110 * i32]* %0)[i64 0][i64 0];
    i32* %2 = getelementptr &([110 * i32]* %0)[i64 0][i64 1];
    i32* %3 = getelementptr &([110 * i32]* %0)[i64 0][i64 2];
    i32* %4 = getelementptr &([110 * i32]* %0)[i64 0][i64 3];
    i32* %5 = getelementptr &([110 * i32]* %0)[i64 0][i64 4];
    i32* %6 = getelementptr &([110 * i32]* %0)[i64 0][i64 5];
    i32* %7 = getelementptr &([110 * i32]* %0)[i64 0][i64 6];
    i32* %8 = getelementptr &([110 * i32]* %0)[i64 0][i64 7];
    i32* %9 = getelementptr &([110 * i32]* %0)[i64 0][i64 8];
    i32* %10 = getelementptr &([110 * i32]* %0)[i64 0][i64 9];
    i32* %11 = getelementptr &([110 * i32]* %0)[i64 0][i64 10];
    i32* %12 = getelementptr &([110 * i32]* %0)[i64 0][i64 11];
    i32* %13 = getelementptr &([110 * i32]* %0)[i64 0][i64 12];
    i32* %14 = getelementptr &([110 * i32]* %0)[i64 0][i64 13];
    i32* %15 = getelementptr &([110 * i32]* %0)[i64 0][i64 14];
    i32* %16 = getelementptr &([110 * i32]* %0)[i64 0][i64 15];
    i32* %17 = getelementptr &([110 * i32]* %0)[i64 0][i64 16];
    i32* %18 = getelementptr &([110 * i32]* %0)[i64 0][i64 17];
    ubr ^while.header;
  ^while.header:
    i32 %19 = phi [^entry, i32 1] [^b3, i32 %21] [^if.then3, i32 %21];
    i1 %20 = icmp neq i32 %19, i32 0;
    cbr i1 %20(prob = 0.984615), ^while.body, ^b;
  ^while.body:
    i32 %21 = add i32 %19, i32 -1;
    store i32* %2 with i32 -1;
    store i32* %3 with i32 -1;
    store i32* %4 with i32 -1;
    store i32* %5 with i32 -1;
    store i32* %6 with i32 -1;
    store i32* %7 with i32 -1;
    store i32* %8 with i32 -1;
    store i32* %9 with i32 -1;
    store i32* %10 with i32 -1;
    store i32* %11 with i32 -1;
    store i32* %12 with i32 -1;
    store i32* %13 with i32 -1;
    store i32* %14 with i32 -1;
    store i32* %15 with i32 -1;
    store i32* %16 with i32 -1;
    store i32* %17 with i32 -1;
    store i32* %18 with i32 -1;
    ubr ^while.body1;
  ^b:
    ret i32 0;
  ^while.body1:
    i32 %22 = phi [^while.body, i32 0] [^b1, i32 %27];
    i32 %23 = phi [^while.body, i32 0] [^b1, i32 %33];
    i32 %24 = call () -> i32 @getint();
    i32 %25 = call () -> i32 @getint();
    i1 %26 = icmp eq i32 %23, i32 0;
    i32 %27 = add i32 %22, i32 1;
    cbr i1 %26(prob = 0.5), ^if.then, ^b1;
  ^if.then:
    i32 %28 = add i32 %24, i32 -1;
    i32 %29 = mul i32 %28, i32 4;
    i32 %30 = add i32 %25, i32 %29;
    i32* %31 = getelementptr &([110 * i32]* %0)[i64 0][i32 %30];
    store i32* %31 with i32 %30;
    i1 %32 = icmp eq i32 %24, i32 1;
    cbr i1 %32(prob = 0.5), ^if.then1, ^b2;
  ^b1:
    i32 %33 = phi [^while.body1, i32 %23] [^b12, i32 %23] [^b13, i32 %23] [^b14, i32 %23] [^if.then11, i32 1];
    i1 %34 = icmp slt i32 %27, i32 10;
    cbr i1 %34(prob = 0.9), ^while.body1, ^b3;
  ^if.then1:
    store i32* %1 with i32 0;
    i32 %35 = call (i32) -> i32 @findfa(i32 %30);
    i32 %36 = call (i32) -> i32 @findfa(i32 0);
    i1 %37 = icmp neq i32 %35, i32 %36;
    cbr i1 %37(prob = 0.5), ^if.then2, ^b2;
  ^b2:
    i1 %38 = icmp eq i32 %24, i32 4;
    cbr i1 %38(prob = 0.5), ^if.then4, ^b4;
  ^b3:
    i1 %39 = icmp eq i32 %33, i32 0;
    cbr i1 %39(prob = 0.5), ^if.then3, ^while.header;
  ^if.then2:
    i32* %40 = getelementptr &([110 * i32]* %0)[i64 0][i32 %35];
    store i32* %40 with i32 %36;
    ubr ^b2;
  ^if.then3:
    call (i32) -> void @putint(i32 -1);
    call (i32) -> void @putch(i32 10);
    ubr ^while.header;
  ^if.then4:
    store i32* %18 with i32 17;
    i32 %41 = call (i32) -> i32 @findfa(i32 %30);
    i32 %42 = call (i32) -> i32 @findfa(i32 17);
    i1 %43 = icmp neq i32 %41, i32 %42;
    cbr i1 %43(prob = 0.5), ^if.then5, ^b4;
  ^b4:
    i1 %44 = icmp slt i32 %25, i32 4;
    cbr i1 %44(prob = 0.5), ^b5, ^b6;
  ^if.then5:
    i32* %45 = getelementptr &([110 * i32]* %0)[i64 0][i32 %41];
    store i32* %45 with i32 %42;
    ubr ^b4;
  ^b5:
    i32 %46 = add i32 %30, i32 1;
    i32* %47 = getelementptr &([110 * i32]* %0)[i64 0][i32 %46];
    i32 %48 = load i32* %47;
    i1 %49 = icmp neq i32 %48, i32 -1;
    cbr i1 %49(prob = 0.5), ^entry1, ^b6;
  ^b6:
    i1 %50 = icmp sgt i32 %25, i32 1;
    cbr i1 %50(prob = 0.5), ^b7, ^b8;
  ^entry1:
    i32 %51 = call (i32) -> i32 @findfa(i32 %30);
    i32 %52 = call (i32) -> i32 @findfa(i32 %46);
    i1 %53 = icmp neq i32 %51, i32 %52;
    cbr i1 %53(prob = 0.5), ^if.then6, ^b6;
  ^b7:
    i32 %54 = add i32 %30, i32 -1;
    i32* %55 = getelementptr &([110 * i32]* %0)[i64 0][i32 %54];
    i32 %56 = load i32* %55;
    i1 %57 = icmp neq i32 %56, i32 -1;
    cbr i1 %57(prob = 0.5), ^entry2, ^b8;
  ^b8:
    i1 %58 = icmp slt i32 %24, i32 4;
    cbr i1 %58(prob = 0.5), ^b9, ^b10;
  ^if.then6:
    i32* %59 = getelementptr &([110 * i32]* %0)[i64 0][i32 %51];
    store i32* %59 with i32 %52;
    ubr ^b6;
  ^entry2:
    i32 %60 = call (i32) -> i32 @findfa(i32 %30);
    i32 %61 = call (i32) -> i32 @findfa(i32 %54);
    i1 %62 = icmp neq i32 %60, i32 %61;
    cbr i1 %62(prob = 0.5), ^if.then7, ^b8;
  ^b9:
    i32 %63 = add i32 %30, i32 4;
    i32* %64 = getelementptr &([110 * i32]* %0)[i64 0][i32 %63];
    i32 %65 = load i32* %64;
    i1 %66 = icmp neq i32 %65, i32 -1;
    cbr i1 %66(prob = 0.5), ^if.then8, ^b10;
  ^b10:
    i1 %67 = icmp sgt i32 %24, i32 1;
    cbr i1 %67(prob = 0.5), ^b11, ^b12;
  ^if.then7:
    i32* %68 = getelementptr &([110 * i32]* %0)[i64 0][i32 %60];
    store i32* %68 with i32 %61;
    ubr ^b8;
  ^if.then8:
    i32 %69 = call (i32) -> i32 @findfa(i32 %30);
    i32 %70 = call (i32) -> i32 @findfa(i32 %63);
    i1 %71 = icmp neq i32 %69, i32 %70;
    cbr i1 %71(prob = 0.5), ^if.then9, ^b10;
  ^b11:
    i32 %72 = add i32 %30, i32 -4;
    i32* %73 = getelementptr &([110 * i32]* %0)[i64 0][i32 %72];
    i32 %74 = load i32* %73;
    i1 %75 = icmp neq i32 %74, i32 -1;
    cbr i1 %75(prob = 0.5), ^entry3, ^b12;
  ^b12:
    i32 %76 = load i32* %1;
    i1 %77 = icmp neq i32 %76, i32 -1;
    cbr i1 %77(prob = 0.5), ^b13, ^b1;
  ^if.then9:
    i32* %78 = getelementptr &([110 * i32]* %0)[i64 0][i32 %69];
    store i32* %78 with i32 %70;
    ubr ^b10;
  ^entry3:
    i32 %79 = call (i32) -> i32 @findfa(i32 %30);
    i32 %80 = call (i32) -> i32 @findfa(i32 %72);
    i1 %81 = icmp neq i32 %79, i32 %80;
    cbr i1 %81(prob = 0.5), ^if.then10, ^b12;
  ^b13:
    i32 %82 = load i32* %18;
    i1 %83 = icmp neq i32 %82, i32 -1;
    cbr i1 %83(prob = 0.5), ^b14, ^b1;
  ^if.then10:
    i32* %84 = getelementptr &([110 * i32]* %0)[i64 0][i32 %79];
    store i32* %84 with i32 %80;
    ubr ^b12;
  ^b14:
    i32 %85 = call (i32) -> i32 @findfa(i32 0);
    i32 %86 = call (i32) -> i32 @findfa(i32 17);
    i1 %87 = icmp eq i32 %85, i32 %86;
    cbr i1 %87(prob = 0.5), ^if.then11, ^b1;
  ^if.then11:
    call (i32) -> void @putint(i32 %27);
    call (i32) -> void @putch(i32 10);
    ubr ^b1;
}
