internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal [110 * i32]* @array;
internal func @findfa(i32 %a) -> i32 {
  ^entry:
    [110 * i32]* %0 = ptrcast [110 * i32]* @array to [110 * i32]*;
    i32* %1 = getelementptr &([110 * i32]* %0)[i64 0][i32 %a];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %a, i32 %2;
    cbr i1 %3(prob = 0.5), ^b, ^if.else;
  ^if.else:
    i32 %4 = call (i32) -> i32 @findfa(i32 %2);
    store i32* %1 with i32 %4;
    ubr ^b;
  ^b:
    i32 %5 = phi [^entry, i32 %a] [^if.else, i32 %4];
    ret i32 %5;
}
func @main() -> i32 { NoRecurse Entry } {
  ^entry:
    [110 * i32]* %0 = ptrcast [110 * i32]* @array to [110 * i32]*;
    i32* %1 = getelementptr &([110 * i32]* %0)[i64 0][i64 0];
    i32* %2 = getelementptr &([110 * i32]* %0)[i64 0][i64 1];
    i32* %3 = getelementptr &([110 * i32]* %0)[i64 0][i64 2];
    i32* %4 = getelementptr &([110 * i32]* %0)[i64 0][i64 3];
    i32* %5 = getelementptr &([110 * i32]* %0)[i64 0][i64 4];
    i32* %6 = getelementptr &([110 * i32]* %0)[i64 0][i64 5];
    i32* %7 = getelementptr &([110 * i32]* %0)[i64 0][i64 6];
    i32* %8 = getelementptr &([110 * i32]* %0)[i64 0][i64 7];
    i32* %9 = getelementptr &([110 * i32]* %0)[i64 0][i64 8];
    i32* %10 = getelementptr &([110 * i32]* %0)[i64 0][i64 9];
    i32* %11 = getelementptr &([110 * i32]* %0)[i64 0][i64 10];
    i32* %12 = getelementptr &([110 * i32]* %0)[i64 0][i64 11];
    i32* %13 = getelementptr &([110 * i32]* %0)[i64 0][i64 12];
    i32* %14 = getelementptr &([110 * i32]* %0)[i64 0][i64 13];
    i32* %15 = getelementptr &([110 * i32]* %0)[i64 0][i64 14];
    i32* %16 = getelementptr &([110 * i32]* %0)[i64 0][i64 15];
    i32* %17 = getelementptr &([110 * i32]* %0)[i64 0][i64 16];
    i32* %18 = getelementptr &([110 * i32]* %0)[i64 0][i64 17];
    ubr ^while.header;
  ^while.header:
    i32 %19 = phi [^entry, i32 1] [^b1, i32 %21] [^if.then, i32 %21];
    i1 %20 = scmp neq i32 %19, i32 0;
    cbr i1 %20(prob = 0.97), ^while.body, ^b;
  ^while.body:
    i32 %21 = add i32 %19, i32 -1;
    store i32* %2 with i32 -1;
    store i32* %3 with i32 -1;
    store i32* %4 with i32 -1;
    store i32* %5 with i32 -1;
    store i32* %6 with i32 -1;
    store i32* %7 with i32 -1;
    store i32* %8 with i32 -1;
    store i32* %9 with i32 -1;
    store i32* %10 with i32 -1;
    store i32* %11 with i32 -1;
    store i32* %12 with i32 -1;
    store i32* %13 with i32 -1;
    store i32* %14 with i32 -1;
    store i32* %15 with i32 -1;
    store i32* %16 with i32 -1;
    store i32* %17 with i32 -1;
    store i32* %18 with i32 -1;
    ubr ^while.header1;
  ^b:
    ret i32 0;
  ^while.header1:
    i32 %22 = phi [^while.body, i32 0] [^b2, i32 %30];
    i32 %23 = phi [^while.body, i32 0] [^b2, i32 %29];
    i1 %24 = scmp lt i32 %22, i32 10;
    cbr i1 %24(prob = 0.97), ^while.body1, ^b1;
  ^while.body1:
    i32 %25 = call () -> i32 @getint();
    i32 %26 = call () -> i32 @getint();
    i1 %27 = scmp eq i32 %23, i32 0;
    cbr i1 %27(prob = 0.5), ^if.then1, ^b2;
  ^b1:
    i1 %28 = scmp eq i32 %23, i32 0;
    cbr i1 %28(prob = 0.5), ^if.then, ^while.header;
  ^if.then:
    call (i32) -> void @putint(i32 -1);
    call (i32) -> void @putch(i32 10);
    ubr ^while.header;
  ^b2:
    i32 %29 = phi [^while.body1, i32 %23] [^b20, i32 %23] [^if.then14, i32 1];
    i32 %30 = add i32 %22, i32 1;
    ubr ^while.header1;
  ^if.then1:
    i32 %31 = add i32 %25, i32 -1;
    i32 %32 = mul i32 %31, i32 4;
    i32 %33 = add i32 %26, i32 %32;
    i32* %34 = getelementptr &([110 * i32]* %0)[i64 0][i32 %33];
    store i32* %34 with i32 %33;
    i1 %35 = scmp eq i32 %25, i32 1;
    cbr i1 %35(prob = 0.5), ^if.then2, ^b3;
  ^if.then2:
    store i32* %1 with i32 0;
    i32 %36 = call (i32) -> i32 @findfa(i32 %33);
    i32 %37 = call (i32) -> i32 @findfa(i32 0);
    i1 %38 = scmp neq i32 %36, i32 %37;
    cbr i1 %38(prob = 0.5), ^if.then3, ^b3;
  ^b3:
    i1 %39 = scmp eq i32 %25, i32 4;
    cbr i1 %39(prob = 0.5), ^if.then4, ^b4;
  ^if.then3:
    i32* %40 = getelementptr &([110 * i32]* %0)[i64 0][i32 %36];
    store i32* %40 with i32 %37;
    ubr ^b3;
  ^if.then4:
    store i32* %18 with i32 17;
    i32 %41 = call (i32) -> i32 @findfa(i32 %33);
    i32 %42 = call (i32) -> i32 @findfa(i32 17);
    i1 %43 = scmp neq i32 %41, i32 %42;
    cbr i1 %43(prob = 0.5), ^if.then5, ^b4;
  ^b4:
    i1 %44 = scmp lt i32 %26, i32 4;
    cbr i1 %44(prob = 0.5), ^b5, ^b6;
  ^if.then5:
    i32* %45 = getelementptr &([110 * i32]* %0)[i64 0][i32 %41];
    store i32* %45 with i32 %42;
    ubr ^b4;
  ^b5:
    i32 %46 = add i32 %33, i32 1;
    i32* %47 = getelementptr &([110 * i32]* %0)[i64 0][i32 %46];
    i32 %48 = load i32* %47;
    i1 %49 = scmp neq i32 %48, i32 -1;
    ubr ^b6;
  ^b6:
    i1 %50 = phi [^b4, i1 false] [^b5, i1 %49];
    cbr i1 %50(prob = 0.5), ^if.then6, ^b7;
  ^if.then6:
    i32 %51 = call (i32) -> i32 @findfa(i32 %33);
    i32 %52 = add i32 %33, i32 1;
    i32 %53 = call (i32) -> i32 @findfa(i32 %52);
    i1 %54 = scmp neq i32 %51, i32 %53;
    cbr i1 %54(prob = 0.5), ^if.then7, ^b7;
  ^b7:
    i1 %55 = scmp gt i32 %26, i32 1;
    cbr i1 %55(prob = 0.5), ^b8, ^b9;
  ^if.then7:
    i32* %56 = getelementptr &([110 * i32]* %0)[i64 0][i32 %51];
    store i32* %56 with i32 %53;
    ubr ^b7;
  ^b8:
    i32 %57 = add i32 %33, i32 -1;
    i32* %58 = getelementptr &([110 * i32]* %0)[i64 0][i32 %57];
    i32 %59 = load i32* %58;
    i1 %60 = scmp neq i32 %59, i32 -1;
    ubr ^b9;
  ^b9:
    i1 %61 = phi [^b7, i1 false] [^b8, i1 %60];
    cbr i1 %61(prob = 0.5), ^if.then8, ^b10;
  ^if.then8:
    i32 %62 = call (i32) -> i32 @findfa(i32 %33);
    i32 %63 = add i32 %33, i32 -1;
    i32 %64 = call (i32) -> i32 @findfa(i32 %63);
    i1 %65 = scmp neq i32 %62, i32 %64;
    cbr i1 %65(prob = 0.5), ^if.then9, ^b10;
  ^b10:
    i1 %66 = scmp lt i32 %25, i32 4;
    cbr i1 %66(prob = 0.5), ^b11, ^b12;
  ^if.then9:
    i32* %67 = getelementptr &([110 * i32]* %0)[i64 0][i32 %62];
    store i32* %67 with i32 %64;
    ubr ^b10;
  ^b11:
    i32 %68 = add i32 %33, i32 4;
    i32* %69 = getelementptr &([110 * i32]* %0)[i64 0][i32 %68];
    i32 %70 = load i32* %69;
    i1 %71 = scmp neq i32 %70, i32 -1;
    ubr ^b12;
  ^b12:
    i1 %72 = phi [^b10, i1 false] [^b11, i1 %71];
    cbr i1 %72(prob = 0.5), ^if.then10, ^b13;
  ^if.then10:
    i32 %73 = call (i32) -> i32 @findfa(i32 %33);
    i32 %74 = add i32 %33, i32 4;
    i32 %75 = call (i32) -> i32 @findfa(i32 %74);
    i1 %76 = scmp neq i32 %73, i32 %75;
    cbr i1 %76(prob = 0.5), ^if.then11, ^b13;
  ^b13:
    i1 %77 = scmp gt i32 %25, i32 1;
    cbr i1 %77(prob = 0.5), ^b14, ^b15;
  ^if.then11:
    i32* %78 = getelementptr &([110 * i32]* %0)[i64 0][i32 %73];
    store i32* %78 with i32 %75;
    ubr ^b13;
  ^b14:
    i32 %79 = add i32 %33, i32 -4;
    i32* %80 = getelementptr &([110 * i32]* %0)[i64 0][i32 %79];
    i32 %81 = load i32* %80;
    i1 %82 = scmp neq i32 %81, i32 -1;
    ubr ^b15;
  ^b15:
    i1 %83 = phi [^b13, i1 false] [^b14, i1 %82];
    cbr i1 %83(prob = 0.5), ^if.then12, ^b16;
  ^if.then12:
    i32 %84 = call (i32) -> i32 @findfa(i32 %33);
    i32 %85 = add i32 %33, i32 -4;
    i32 %86 = call (i32) -> i32 @findfa(i32 %85);
    i1 %87 = scmp neq i32 %84, i32 %86;
    cbr i1 %87(prob = 0.5), ^if.then13, ^b16;
  ^b16:
    i32 %88 = load i32* %1;
    i1 %89 = scmp neq i32 %88, i32 -1;
    cbr i1 %89(prob = 0.5), ^b17, ^b18;
  ^if.then13:
    i32* %90 = getelementptr &([110 * i32]* %0)[i64 0][i32 %84];
    store i32* %90 with i32 %86;
    ubr ^b16;
  ^b17:
    i32 %91 = load i32* %18;
    i1 %92 = scmp neq i32 %91, i32 -1;
    ubr ^b18;
  ^b18:
    i1 %93 = phi [^b16, i1 false] [^b17, i1 %92];
    cbr i1 %93(prob = 0.5), ^b19, ^b20;
  ^b19:
    i32 %94 = call (i32) -> i32 @findfa(i32 0);
    i32 %95 = call (i32) -> i32 @findfa(i32 17);
    i1 %96 = scmp eq i32 %94, i32 %95;
    ubr ^b20;
  ^b20:
    i1 %97 = phi [^b18, i1 false] [^b19, i1 %96];
    cbr i1 %97(prob = 0.5), ^if.then14, ^b2;
  ^if.then14:
    i32 %98 = add i32 %22, i32 1;
    call (i32) -> void @putint(i32 %98);
    call (i32) -> void @putch(i32 10);
    ubr ^b2;
}
