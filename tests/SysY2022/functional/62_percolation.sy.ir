internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @findfa(i32 %a, [110 * i32]* %0, i32* %1) -> i32 {
^entry:
    i32* %2 = getelementptr &([110 * i32]* %0)[i64 0][i32 %a];
    i32 %3 = load i32* %2;
    i1 %4 = scmp eq i32 %3, i32 %a;
    cbr i1 %4(prob = 0.5), ^if.then, ^if.else;
^if.then:
    ret i32 %a;
^if.else:
    i32 %5 = call (i32, [110 * i32]*, i32*) -> i32 @findfa(i32 %3, [110 * i32]* %0, i32* %1);
    store i32* %2 with i32 %5;
    i32 %6 = load i32* %2;
    ret i32 %6;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %n = alloc i32;
    [110 * i32]* %array = alloc [110 * i32];
    i32* %k = alloc i32;
    i32* %0 = getelementptr &([110 * i32]* %array)[i64 0][i64 0];
    store i32* %0 with i32 0;
    i32* %1 = getelementptr &([110 * i32]* %array)[i64 0][i64 1];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([110 * i32]* %array)[i64 0][i64 2];
    store i32* %2 with i32 0;
    i32* %3 = getelementptr &([110 * i32]* %array)[i64 0][i64 3];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([110 * i32]* %array)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([110 * i32]* %array)[i64 0][i64 5];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([110 * i32]* %array)[i64 0][i64 6];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([110 * i32]* %array)[i64 0][i64 7];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([110 * i32]* %array)[i64 0][i64 8];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([110 * i32]* %array)[i64 0][i64 9];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([110 * i32]* %array)[i64 0][i64 10];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([110 * i32]* %array)[i64 0][i64 11];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([110 * i32]* %array)[i64 0][i64 12];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([110 * i32]* %array)[i64 0][i64 13];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([110 * i32]* %array)[i64 0][i64 14];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([110 * i32]* %array)[i64 0][i64 15];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([110 * i32]* %array)[i64 0][i64 16];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([110 * i32]* %array)[i64 0][i64 17];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([110 * i32]* %array)[i64 0][i64 18];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([110 * i32]* %array)[i64 0][i64 19];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &([110 * i32]* %array)[i64 0][i64 20];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &([110 * i32]* %array)[i64 0][i64 21];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &([110 * i32]* %array)[i64 0][i64 22];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &([110 * i32]* %array)[i64 0][i64 23];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &([110 * i32]* %array)[i64 0][i64 24];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &([110 * i32]* %array)[i64 0][i64 25];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &([110 * i32]* %array)[i64 0][i64 26];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &([110 * i32]* %array)[i64 0][i64 27];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &([110 * i32]* %array)[i64 0][i64 28];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &([110 * i32]* %array)[i64 0][i64 29];
    store i32* %29 with i32 0;
    i32* %30 = getelementptr &([110 * i32]* %array)[i64 0][i64 30];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &([110 * i32]* %array)[i64 0][i64 31];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &([110 * i32]* %array)[i64 0][i64 32];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &([110 * i32]* %array)[i64 0][i64 33];
    store i32* %33 with i32 0;
    i32* %34 = getelementptr &([110 * i32]* %array)[i64 0][i64 34];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &([110 * i32]* %array)[i64 0][i64 35];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &([110 * i32]* %array)[i64 0][i64 36];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &([110 * i32]* %array)[i64 0][i64 37];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &([110 * i32]* %array)[i64 0][i64 38];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &([110 * i32]* %array)[i64 0][i64 39];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &([110 * i32]* %array)[i64 0][i64 40];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &([110 * i32]* %array)[i64 0][i64 41];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &([110 * i32]* %array)[i64 0][i64 42];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &([110 * i32]* %array)[i64 0][i64 43];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &([110 * i32]* %array)[i64 0][i64 44];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &([110 * i32]* %array)[i64 0][i64 45];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &([110 * i32]* %array)[i64 0][i64 46];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &([110 * i32]* %array)[i64 0][i64 47];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &([110 * i32]* %array)[i64 0][i64 48];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &([110 * i32]* %array)[i64 0][i64 49];
    store i32* %49 with i32 0;
    i32* %50 = getelementptr &([110 * i32]* %array)[i64 0][i64 50];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &([110 * i32]* %array)[i64 0][i64 51];
    store i32* %51 with i32 0;
    i32* %52 = getelementptr &([110 * i32]* %array)[i64 0][i64 52];
    store i32* %52 with i32 0;
    i32* %53 = getelementptr &([110 * i32]* %array)[i64 0][i64 53];
    store i32* %53 with i32 0;
    i32* %54 = getelementptr &([110 * i32]* %array)[i64 0][i64 54];
    store i32* %54 with i32 0;
    i32* %55 = getelementptr &([110 * i32]* %array)[i64 0][i64 55];
    store i32* %55 with i32 0;
    i32* %56 = getelementptr &([110 * i32]* %array)[i64 0][i64 56];
    store i32* %56 with i32 0;
    i32* %57 = getelementptr &([110 * i32]* %array)[i64 0][i64 57];
    store i32* %57 with i32 0;
    i32* %58 = getelementptr &([110 * i32]* %array)[i64 0][i64 58];
    store i32* %58 with i32 0;
    i32* %59 = getelementptr &([110 * i32]* %array)[i64 0][i64 59];
    store i32* %59 with i32 0;
    i32* %60 = getelementptr &([110 * i32]* %array)[i64 0][i64 60];
    store i32* %60 with i32 0;
    i32* %61 = getelementptr &([110 * i32]* %array)[i64 0][i64 61];
    store i32* %61 with i32 0;
    i32* %62 = getelementptr &([110 * i32]* %array)[i64 0][i64 62];
    store i32* %62 with i32 0;
    i32* %63 = getelementptr &([110 * i32]* %array)[i64 0][i64 63];
    store i32* %63 with i32 0;
    i32* %64 = getelementptr &([110 * i32]* %array)[i64 0][i64 64];
    store i32* %64 with i32 0;
    i32* %65 = getelementptr &([110 * i32]* %array)[i64 0][i64 65];
    store i32* %65 with i32 0;
    i32* %66 = getelementptr &([110 * i32]* %array)[i64 0][i64 66];
    store i32* %66 with i32 0;
    i32* %67 = getelementptr &([110 * i32]* %array)[i64 0][i64 67];
    store i32* %67 with i32 0;
    i32* %68 = getelementptr &([110 * i32]* %array)[i64 0][i64 68];
    store i32* %68 with i32 0;
    i32* %69 = getelementptr &([110 * i32]* %array)[i64 0][i64 69];
    store i32* %69 with i32 0;
    i32* %70 = getelementptr &([110 * i32]* %array)[i64 0][i64 70];
    store i32* %70 with i32 0;
    i32* %71 = getelementptr &([110 * i32]* %array)[i64 0][i64 71];
    store i32* %71 with i32 0;
    i32* %72 = getelementptr &([110 * i32]* %array)[i64 0][i64 72];
    store i32* %72 with i32 0;
    i32* %73 = getelementptr &([110 * i32]* %array)[i64 0][i64 73];
    store i32* %73 with i32 0;
    i32* %74 = getelementptr &([110 * i32]* %array)[i64 0][i64 74];
    store i32* %74 with i32 0;
    i32* %75 = getelementptr &([110 * i32]* %array)[i64 0][i64 75];
    store i32* %75 with i32 0;
    i32* %76 = getelementptr &([110 * i32]* %array)[i64 0][i64 76];
    store i32* %76 with i32 0;
    i32* %77 = getelementptr &([110 * i32]* %array)[i64 0][i64 77];
    store i32* %77 with i32 0;
    i32* %78 = getelementptr &([110 * i32]* %array)[i64 0][i64 78];
    store i32* %78 with i32 0;
    i32* %79 = getelementptr &([110 * i32]* %array)[i64 0][i64 79];
    store i32* %79 with i32 0;
    i32* %80 = getelementptr &([110 * i32]* %array)[i64 0][i64 80];
    store i32* %80 with i32 0;
    i32* %81 = getelementptr &([110 * i32]* %array)[i64 0][i64 81];
    store i32* %81 with i32 0;
    i32* %82 = getelementptr &([110 * i32]* %array)[i64 0][i64 82];
    store i32* %82 with i32 0;
    i32* %83 = getelementptr &([110 * i32]* %array)[i64 0][i64 83];
    store i32* %83 with i32 0;
    i32* %84 = getelementptr &([110 * i32]* %array)[i64 0][i64 84];
    store i32* %84 with i32 0;
    i32* %85 = getelementptr &([110 * i32]* %array)[i64 0][i64 85];
    store i32* %85 with i32 0;
    i32* %86 = getelementptr &([110 * i32]* %array)[i64 0][i64 86];
    store i32* %86 with i32 0;
    i32* %87 = getelementptr &([110 * i32]* %array)[i64 0][i64 87];
    store i32* %87 with i32 0;
    i32* %88 = getelementptr &([110 * i32]* %array)[i64 0][i64 88];
    store i32* %88 with i32 0;
    i32* %89 = getelementptr &([110 * i32]* %array)[i64 0][i64 89];
    store i32* %89 with i32 0;
    i32* %90 = getelementptr &([110 * i32]* %array)[i64 0][i64 90];
    store i32* %90 with i32 0;
    i32* %91 = getelementptr &([110 * i32]* %array)[i64 0][i64 91];
    store i32* %91 with i32 0;
    i32* %92 = getelementptr &([110 * i32]* %array)[i64 0][i64 92];
    store i32* %92 with i32 0;
    i32* %93 = getelementptr &([110 * i32]* %array)[i64 0][i64 93];
    store i32* %93 with i32 0;
    i32* %94 = getelementptr &([110 * i32]* %array)[i64 0][i64 94];
    store i32* %94 with i32 0;
    i32* %95 = getelementptr &([110 * i32]* %array)[i64 0][i64 95];
    store i32* %95 with i32 0;
    i32* %96 = getelementptr &([110 * i32]* %array)[i64 0][i64 96];
    store i32* %96 with i32 0;
    i32* %97 = getelementptr &([110 * i32]* %array)[i64 0][i64 97];
    store i32* %97 with i32 0;
    i32* %98 = getelementptr &([110 * i32]* %array)[i64 0][i64 98];
    store i32* %98 with i32 0;
    i32* %99 = getelementptr &([110 * i32]* %array)[i64 0][i64 99];
    store i32* %99 with i32 0;
    i32* %100 = getelementptr &([110 * i32]* %array)[i64 0][i64 100];
    store i32* %100 with i32 0;
    i32* %101 = getelementptr &([110 * i32]* %array)[i64 0][i64 101];
    store i32* %101 with i32 0;
    i32* %102 = getelementptr &([110 * i32]* %array)[i64 0][i64 102];
    store i32* %102 with i32 0;
    i32* %103 = getelementptr &([110 * i32]* %array)[i64 0][i64 103];
    store i32* %103 with i32 0;
    i32* %104 = getelementptr &([110 * i32]* %array)[i64 0][i64 104];
    store i32* %104 with i32 0;
    i32* %105 = getelementptr &([110 * i32]* %array)[i64 0][i64 105];
    store i32* %105 with i32 0;
    i32* %106 = getelementptr &([110 * i32]* %array)[i64 0][i64 106];
    store i32* %106 with i32 0;
    i32* %107 = getelementptr &([110 * i32]* %array)[i64 0][i64 107];
    store i32* %107 with i32 0;
    i32* %108 = getelementptr &([110 * i32]* %array)[i64 0][i64 108];
    store i32* %108 with i32 0;
    i32* %109 = getelementptr &([110 * i32]* %array)[i64 0][i64 109];
    store i32* %109 with i32 0;
    ubr ^while.header;
^while.header:
    i32 %110 = phi [^b1, i32 %127] [^if.then, i32 %127] [^entry, i32 1];
    i1 %111 = scmp neq i32 %110, i32 0;
    cbr i1 %111(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %112 = add i32 %110, i32 -1;
    store i32* %n with i32 4;
    ubr ^while.header1;
^b:
    ret i32 0;
^while.header1:
    i32 %113 = phi [^while.body1, i32 %113] [^while.body, i32 %112];
    i32 %114 = phi [^while.body1, i32 %114] [^while.body, i32 10];
    i32 %115 = phi [^while.body1, i32 %115] [^while.body, i32 0];
    i32 %116 = phi [^while.body1, i32 %116] [^while.body, i32 0];
    i32 %117 = phi [^while.body1, i32 %117] [^while.body, i32 4];
    i32 %118 = phi [^while.body1, i32 %124] [^while.body, i32 1];
    i32 %119 = phi [^while.body1, i32 %119] [^while.body, i32 4];
    i32 %120 = mul i32 %119, i32 %119;
    i32 %121 = add i32 %120, i32 1;
    i1 %122 = scmp le i32 %118, i32 %121;
    cbr i1 %122(prob = 0.97), ^while.body1, ^while.body2;
^while.body1:
    i32* %123 = getelementptr &([110 * i32]* %array)[i64 0][i32 %118];
    store i32* %123 with i32 -1;
    i32 %124 = add i32 %118, i32 1;
    ubr ^while.header1;
^while.body2:
    i32 %125 = mul i32 %117, i32 %117;
    i32 %126 = add i32 %125, i32 1;
    store i32* %k with i32 %126;
    ubr ^while.header2;
^while.header2:
    i32 %127 = phi [^b2, i32 %127] [^while.body2, i32 %113];
    i32 %128 = phi [^b2, i32 %128] [^while.body2, i32 %114];
    i32 %129 = phi [^b2, i32 %140] [^while.body2, i32 %115];
    i32 %130 = phi [^b2, i32 %138] [^while.body2, i32 %116];
    i32 %131 = phi [^b2, i32 %131] [^while.body2, i32 %126];
    i32 %132 = phi [^b2, i32 %139] [^while.body2, i32 %117];
    i1 %133 = scmp lt i32 %129, i32 %128;
    cbr i1 %133(prob = 0.97), ^while.body3, ^b1;
^while.body3:
    i32 %134 = call () -> i32 @getint();
    i32 %135 = call () -> i32 @getint();
    i1 %136 = scmp eq i32 %130, i32 0;
    cbr i1 %136(prob = 0.5), ^if.then1, ^b2;
^b1:
    i1 %137 = scmp eq i32 %130, i32 0;
    cbr i1 %137(prob = 0.5), ^if.then, ^while.header;
^if.then:
    call (i32) -> void @putint(i32 -1);
    call (i32) -> void @putch(i32 10);
    ubr ^while.header;
^b2:
    i32 %138 = phi [^b20, i32 %130] [^while.body3, i32 %130] [^if.then14, i32 1];
    i32 %139 = phi [^b20, i32 %223] [^while.body3, i32 %132] [^if.then14, i32 %223];
    i32 %140 = add i32 %129, i32 1;
    ubr ^while.header2;
^if.then1:
    i32 %141 = add i32 %134, i32 -1;
    i32 %142 = mul i32 %132, i32 %141;
    i32 %143 = add i32 %135, i32 %142;
    i32* %144 = getelementptr &([110 * i32]* %array)[i64 0][i32 %143];
    store i32* %144 with i32 %143;
    i1 %145 = scmp eq i32 %134, i32 1;
    cbr i1 %145(prob = 0.5), ^if.then2, ^b3;
^if.then2:
    store i32* %0 with i32 0;
    i32 %146 = call (i32, [110 * i32]*, i32*) -> i32 @findfa(i32 %143, [110 * i32]* %array, i32* %n);
    i32 %147 = call (i32, [110 * i32]*, i32*) -> i32 @findfa(i32 0, [110 * i32]* %array, i32* %n);
    i32 %148 = load i32* %n;
    i1 %149 = scmp neq i32 %146, i32 %147;
    cbr i1 %149(prob = 0.5), ^if.then3, ^b3;
^b3:
    i32 %150 = phi [^if.then3, i32 %148] [^if.then2, i32 %148] [^if.then1, i32 %132];
    i1 %151 = scmp eq i32 %134, i32 %150;
    cbr i1 %151(prob = 0.5), ^if.then4, ^b4;
^if.then3:
    i32* %152 = getelementptr &([110 * i32]* %array)[i64 0][i32 %146];
    store i32* %152 with i32 %147;
    ubr ^b3;
^if.then4:
    i32 %153 = load i32* %k;
    i32* %154 = getelementptr &([110 * i32]* %array)[i64 0][i32 %131];
    store i32* %154 with i32 %131;
    i32 %155 = call (i32, [110 * i32]*, i32*) -> i32 @findfa(i32 %143, [110 * i32]* %array, i32* %n);
    i32 %156 = call (i32, [110 * i32]*, i32*) -> i32 @findfa(i32 %153, [110 * i32]* %array, i32* %n);
    i32 %157 = load i32* %n;
    i1 %158 = scmp neq i32 %155, i32 %156;
    cbr i1 %158(prob = 0.5), ^if.then5, ^b4;
^b4:
    i32 %159 = phi [^if.then5, i32 %157] [^if.then4, i32 %157] [^b3, i32 %150];
    i1 %160 = scmp lt i32 %135, i32 %159;
    cbr i1 %160(prob = 0.5), ^b5, ^b6;
^if.then5:
    i32* %161 = getelementptr &([110 * i32]* %array)[i64 0][i32 %155];
    store i32* %161 with i32 %156;
    ubr ^b4;
^b5:
    i32 %162 = add i32 %143, i32 1;
    i32* %163 = getelementptr &([110 * i32]* %array)[i64 0][i32 %162];
    i32 %164 = load i32* %163;
    i1 %165 = scmp neq i32 %164, i32 -1;
    ubr ^b6;
^b6:
    i1 %166 = phi [^b5, i1 %165] [^b4, i1 false];
    cbr i1 %166(prob = 0.5), ^if.then6, ^b7;
^if.then6:
    i32 %167 = add i32 %143, i32 1;
    i32 %168 = call (i32, [110 * i32]*, i32*) -> i32 @findfa(i32 %143, [110 * i32]* %array, i32* %n);
    i32 %169 = call (i32, [110 * i32]*, i32*) -> i32 @findfa(i32 %167, [110 * i32]* %array, i32* %n);
    i32 %170 = load i32* %n;
    i1 %171 = scmp neq i32 %168, i32 %169;
    cbr i1 %171(prob = 0.5), ^if.then7, ^b7;
^b7:
    i32 %172 = phi [^if.then7, i32 %170] [^if.then6, i32 %170] [^b6, i32 %159];
    i1 %173 = scmp gt i32 %135, i32 1;
    cbr i1 %173(prob = 0.5), ^b8, ^b9;
^if.then7:
    i32* %174 = getelementptr &([110 * i32]* %array)[i64 0][i32 %168];
    store i32* %174 with i32 %169;
    ubr ^b7;
^b8:
    i32 %175 = add i32 %143, i32 -1;
    i32* %176 = getelementptr &([110 * i32]* %array)[i64 0][i32 %175];
    i32 %177 = load i32* %176;
    i1 %178 = scmp neq i32 %177, i32 -1;
    ubr ^b9;
^b9:
    i1 %179 = phi [^b8, i1 %178] [^b7, i1 false];
    cbr i1 %179(prob = 0.5), ^if.then8, ^b10;
^if.then8:
    i32 %180 = add i32 %143, i32 -1;
    i32 %181 = call (i32, [110 * i32]*, i32*) -> i32 @findfa(i32 %143, [110 * i32]* %array, i32* %n);
    i32 %182 = call (i32, [110 * i32]*, i32*) -> i32 @findfa(i32 %180, [110 * i32]* %array, i32* %n);
    i32 %183 = load i32* %n;
    i1 %184 = scmp neq i32 %181, i32 %182;
    cbr i1 %184(prob = 0.5), ^if.then9, ^b10;
^b10:
    i32 %185 = phi [^if.then9, i32 %183] [^if.then8, i32 %183] [^b9, i32 %172];
    i1 %186 = scmp lt i32 %134, i32 %185;
    cbr i1 %186(prob = 0.5), ^b11, ^b12;
^if.then9:
    i32* %187 = getelementptr &([110 * i32]* %array)[i64 0][i32 %181];
    store i32* %187 with i32 %182;
    ubr ^b10;
^b11:
    i32 %188 = add i32 %185, i32 %143;
    i32* %189 = getelementptr &([110 * i32]* %array)[i64 0][i32 %188];
    i32 %190 = load i32* %189;
    i1 %191 = scmp neq i32 %190, i32 -1;
    ubr ^b12;
^b12:
    i1 %192 = phi [^b11, i1 %191] [^b10, i1 false];
    cbr i1 %192(prob = 0.5), ^if.then10, ^b13;
^if.then10:
    i32 %193 = add i32 %185, i32 %143;
    i32 %194 = call (i32, [110 * i32]*, i32*) -> i32 @findfa(i32 %143, [110 * i32]* %array, i32* %n);
    i32 %195 = call (i32, [110 * i32]*, i32*) -> i32 @findfa(i32 %193, [110 * i32]* %array, i32* %n);
    i32 %196 = load i32* %n;
    i1 %197 = scmp neq i32 %194, i32 %195;
    cbr i1 %197(prob = 0.5), ^if.then11, ^b13;
^b13:
    i32 %198 = phi [^if.then11, i32 %196] [^if.then10, i32 %196] [^b12, i32 %185];
    i1 %199 = scmp gt i32 %134, i32 1;
    cbr i1 %199(prob = 0.5), ^b14, ^b15;
^if.then11:
    i32* %200 = getelementptr &([110 * i32]* %array)[i64 0][i32 %194];
    store i32* %200 with i32 %195;
    ubr ^b13;
^b14:
    i32 %201 = sub i32 %143, i32 %198;
    i32* %202 = getelementptr &([110 * i32]* %array)[i64 0][i32 %201];
    i32 %203 = load i32* %202;
    i1 %204 = scmp neq i32 %203, i32 -1;
    ubr ^b15;
^b15:
    i1 %205 = phi [^b14, i1 %204] [^b13, i1 false];
    cbr i1 %205(prob = 0.5), ^if.then12, ^b16;
^if.then12:
    i32 %206 = sub i32 %143, i32 %198;
    i32 %207 = call (i32, [110 * i32]*, i32*) -> i32 @findfa(i32 %143, [110 * i32]* %array, i32* %n);
    i32 %208 = call (i32, [110 * i32]*, i32*) -> i32 @findfa(i32 %206, [110 * i32]* %array, i32* %n);
    i32 %209 = load i32* %n;
    i1 %210 = scmp neq i32 %207, i32 %208;
    cbr i1 %210(prob = 0.5), ^if.then13, ^b16;
^b16:
    i32 %211 = phi [^if.then13, i32 %209] [^if.then12, i32 %209] [^b15, i32 %198];
    i32 %212 = load i32* %0;
    i1 %213 = scmp neq i32 %212, i32 -1;
    cbr i1 %213(prob = 0.5), ^b17, ^b18;
^if.then13:
    i32* %214 = getelementptr &([110 * i32]* %array)[i64 0][i32 %207];
    store i32* %214 with i32 %208;
    ubr ^b16;
^b17:
    i32* %215 = getelementptr &([110 * i32]* %array)[i64 0][i32 %131];
    i32 %216 = load i32* %215;
    i1 %217 = scmp neq i32 %216, i32 -1;
    ubr ^b18;
^b18:
    i1 %218 = phi [^b17, i1 %217] [^b16, i1 false];
    cbr i1 %218(prob = 0.5), ^b19, ^b20;
^b19:
    i32 %219 = call (i32, [110 * i32]*, i32*) -> i32 @findfa(i32 0, [110 * i32]* %array, i32* %n);
    i32 %220 = call (i32, [110 * i32]*, i32*) -> i32 @findfa(i32 %131, [110 * i32]* %array, i32* %n);
    i32 %221 = load i32* %n;
    i1 %222 = scmp eq i32 %219, i32 %220;
    ubr ^b20;
^b20:
    i32 %223 = phi [^b19, i32 %221] [^b18, i32 %211];
    i1 %224 = phi [^b19, i1 %222] [^b18, i1 false];
    cbr i1 %224(prob = 0.5), ^if.then14, ^b2;
^if.then14:
    i32 %225 = add i32 %129, i32 1;
    call (i32) -> void @putint(i32 %225);
    call (i32) -> void @putch(i32 10);
    ubr ^b2;
}
