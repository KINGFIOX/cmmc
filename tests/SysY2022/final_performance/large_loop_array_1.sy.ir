internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryWrite NoRecurse Entry } {
^entry:
    [2048 * f32]* %y = alloc [2048 * f32];
    [2048 * f32]* %x = alloc [2048 * f32];
    i32 %0 = call () -> i32 @getint();
    call (i32) -> void @starttime(i32 22);
    ubr ^while.header;
^while.header:
    i32 %1 = phi [^b4, i32 %53] [^entry, i32 0];
    i32 %2 = phi [^b4, i32 %34] [^entry, i32 0];
    i32 %3 = phi [^b4, i32 %35] [^entry, i32 %0];
    f32 %4 = phi [^b4, f32 %52] [^entry, f32 0];
    f32 %5 = phi [^b4, f32 %36] [^entry, f32 0];
    f32 %6 = phi [^b4, f32 %37] [^entry, f32 1];
    i32 %7 = phi [^b4, i32 %38] [^entry, i32 500000];
    i1 %8 = scmp lt i32 %1, i32 %7;
    cbr i1 %8(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %9 = srem i32 %1, i32 10;
    i1 %10 = scmp neq i32 %9, i32 0;
    cbr i1 %10(prob = 0.5), ^while.header1, ^if.else;
^b:
    call (i32) -> void @stoptime(i32 39);
    f32 %11 = fsub f32 %4, f32 1.43032e+15;
    i1 %12 = fcmp le f32 %11, f32 1e-06;
    cbr i1 %12(prob = 0.5), ^b2, ^b1;
^if.else:
    f32 %13 = fadd f32 %5, f32 0.1;
    f32 %14 = fadd f32 %6, f32 0.2;
    ubr ^while.header1;
^b1:
    i1 %15 = fcmp ge f32 %11, f32 -1e-06;
    ubr ^b2;
^while.header1:
    i32 %16 = phi [^while.body, i32 %1] [^while.body1, i32 %16] [^if.else, i32 %1];
    i32 %17 = phi [^while.body, i32 %2] [^while.body1, i32 %30] [^if.else, i32 %2];
    i32 %18 = phi [^while.body, i32 %3] [^while.body1, i32 %18] [^if.else, i32 %3];
    f32 %19 = phi [^while.body, f32 %4] [^while.body1, f32 %19] [^if.else, f32 %4];
    f32 %20 = phi [^while.body, f32 0] [^while.body1, f32 %20] [^if.else, f32 %13];
    f32 %21 = phi [^while.body, f32 1] [^while.body1, f32 %21] [^if.else, f32 %14];
    i32 %22 = phi [^while.body, i32 %7] [^while.body1, i32 %22] [^if.else, i32 %7];
    i1 %23 = scmp lt i32 %17, i32 %18;
    cbr i1 %23(prob = 0.97), ^while.body1, ^b3;
^b2:
    i1 %24 = phi [^b1, i1 %15] [^b, i1 true];
    cbr i1 %24(prob = 0.5), ^if.then, ^if.else1;
^while.body1:
    f32* %25 = getelementptr &([2048 * f32]* %x)[i64 0][i32 %17];
    f32 %26 = s2f i32 %17 to f32;
    f32 %27 = fadd f32 %20, f32 %26;
    store f32* %25 with f32 %27;
    f32* %28 = getelementptr &([2048 * f32]* %y)[i64 0][i32 %17];
    f32 %29 = fadd f32 %21, f32 %26;
    store f32* %28 with f32 %29;
    i32 %30 = add i32 %17, i32 1;
    ubr ^while.header1;
^b3:
    f32* %31 = getelementptr &([2048 * f32]* %x)[i64 0][i64 0];
    f32* %32 = getelementptr &([2048 * f32]* %y)[i64 0][i64 0];
    ubr ^while.header2;
^if.then:
    call (i32) -> void @putint(i32 0);
    ret i32 0;
^if.else1:
    call (i32) -> void @putint(i32 1);
    ret i32 1;
^while.header2:
    i32 %33 = phi [^while.body2, i32 %33] [^b3, i32 %16];
    i32 %34 = phi [^while.body2, i32 %34] [^b3, i32 %17];
    i32 %35 = phi [^while.body2, i32 %35] [^b3, i32 %18];
    f32 %36 = phi [^while.body2, f32 %36] [^b3, f32 %20];
    f32 %37 = phi [^while.body2, f32 %37] [^b3, f32 %21];
    i32 %38 = phi [^while.body2, i32 %38] [^b3, i32 %22];
    f32 %39 = phi [^while.body2, f32 %50] [^b3, f32 0];
    i32 %40 = phi [^while.body2, i32 %51] [^b3, i32 0];
    i32 %41 = phi [^while.body2, i32 %41] [^b3, i32 %18];
    f32* %42 = phi [^while.body2, f32* %42] [^b3, f32* %32];
    f32* %43 = phi [^while.body2, f32* %43] [^b3, f32* %31];
    i1 %44 = scmp lt i32 %40, i32 %41;
    cbr i1 %44(prob = 0.97), ^while.body2, ^b4;
^while.body2:
    f32* %45 = getelementptr &(f32* %43)[i32 %40];
    f32 %46 = load f32* %45;
    f32* %47 = getelementptr &(f32* %42)[i32 %40];
    f32 %48 = load f32* %47;
    f32 %49 = fmul f32 %46, f32 %48;
    f32 %50 = fadd f32 %39, f32 %49;
    i32 %51 = add i32 %40, i32 1;
    ubr ^while.header2;
^b4:
    f32 %52 = fadd f32 %19, f32 %39;
    i32 %53 = add i32 %33, i32 1;
    ubr ^while.header;
}
