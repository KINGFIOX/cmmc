internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @fibFP(f32 %n) -> f32 {
^entry:
    f32* %n1 = alloc f32;
    store f32* %n1 with f32 %n;
    f32 %0 = load f32* %n1;
    i1 %1 = fcmp lt f32 %0, f32 2;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^b;
^if.then:
    ret f32 1;
^b:
    f32 %4 = load f32* %n1;
    f32 %5 = fsub f32 %4, f32 2;
    f32 %6 = call (f32) -> f32 @fibFP(f32 %5);
    f32 %7 = load f32* %n1;
    f32 %8 = fsub f32 %7, f32 1;
    f32 %9 = call (f32) -> f32 @fibFP(f32 %8);
    f32 %10 = fadd f32 %6, f32 %9;
    ret f32 %10;
}
internal func @takFP(f32 %x, f32 %y, f32 %z) -> f32 {
^entry:
    f32* %z1 = alloc f32;
    f32* %y1 = alloc f32;
    f32* %x1 = alloc f32;
    store f32* %x1 with f32 %x;
    store f32* %y1 with f32 %y;
    store f32* %z1 with f32 %z;
    f32 %0 = load f32* %y1;
    f32 %1 = load f32* %x1;
    i1 %2 = fcmp lt f32 %0, f32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.5), ^if.then, ^b;
^if.then:
    f32 %5 = load f32* %x1;
    f32 %6 = fsub f32 %5, f32 1;
    f32 %7 = load f32* %y1;
    f32 %8 = load f32* %z1;
    f32 %9 = call (f32, f32, f32) -> f32 @takFP(f32 %6, f32 %7, f32 %8);
    f32 %10 = load f32* %y1;
    f32 %11 = fsub f32 %10, f32 1;
    f32 %12 = load f32* %z1;
    f32 %13 = load f32* %x1;
    f32 %14 = call (f32, f32, f32) -> f32 @takFP(f32 %11, f32 %12, f32 %13);
    f32 %15 = load f32* %z1;
    f32 %16 = fsub f32 %15, f32 1;
    f32 %17 = load f32* %x1;
    f32 %18 = load f32* %y1;
    f32 %19 = call (f32, f32, f32) -> f32 @takFP(f32 %16, f32 %17, f32 %18);
    f32 %20 = call (f32, f32, f32) -> f32 @takFP(f32 %9, f32 %14, f32 %19);
    ret f32 %20;
^b:
    f32 %21 = load f32* %z1;
    ret f32 %21;
}
func @main() -> i32 { Entry } {
^entry:
    f32* %t1 = alloc f32;
    f32* %f1 = alloc f32;
    f32* %z = alloc f32;
    f32* %y = alloc f32;
    f32* %x = alloc f32;
    i32* %n = alloc i32;
    call (i32) -> void @starttime(i32 20);
    i32 %0 = call () -> i32 @getint();
    store i32* %n with i32 %0;
    f32 %1 = call () -> f32 @getfloat();
    store f32* %x with f32 %1;
    f32 %2 = call () -> f32 @getfloat();
    store f32* %y with f32 %2;
    f32 %3 = call () -> f32 @getfloat();
    store f32* %z with f32 %3;
    i32 %4 = load i32* %n;
    f32 %5 = s2f i32 %4 to f32;
    f32 %6 = fadd f32 28, f32 %5;
    f32 %7 = call (f32) -> f32 @fibFP(f32 %6);
    store f32* %f1 with f32 %7;
    f32 %8 = load f32* %x;
    f32 %9 = load f32* %y;
    f32 %10 = load f32* %z;
    f32 %11 = call (f32, f32, f32) -> f32 @takFP(f32 %8, f32 %9, f32 %10);
    store f32* %t1 with f32 %11;
    f32 %12 = load f32* %f1;
    i1 %13 = fcmp eq f32 %12, f32 1.6558e+08;
    i32 %14 = zext i1 %13 to i32;
    i1 %15 = scmp neq i32 %14, i32 0;
    cbr i1 %15(prob = 0.5), ^if.then, ^if.else;
^if.then:
    call (i32) -> void @putch(i32 112);
    ubr ^b;
^if.else:
    call (i32) -> void @putint(i32 1);
    ubr ^b;
^b:
    f32 %16 = load f32* %t1;
    i1 %17 = fcmp eq f32 %16, f32 2;
    i32 %18 = zext i1 %17 to i32;
    i1 %19 = scmp neq i32 %18, i32 0;
    cbr i1 %19(prob = 0.5), ^if.then1, ^if.else1;
^if.then1:
    call (i32) -> void @putch(i32 112);
    ubr ^b1;
^if.else1:
    call (i32) -> void @putint(i32 1);
    ubr ^b1;
^b1:
    call (i32) -> void @stoptime(i32 41);
    ret i32 0;
}
