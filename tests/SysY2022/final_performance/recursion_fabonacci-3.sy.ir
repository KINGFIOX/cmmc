internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @fibFP(f32 %n) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry:
    i1 %0 = fcmp lt f32 %n, f32 2;
    cbr i1 %0(prob = 0.5), ^if.then, ^b;
^if.then:
    ret f32 1;
^b:
    f32 %1 = fsub f32 %n, f32 2;
    f32 %2 = call (f32) -> f32 @fibFP(f32 %1);
    f32 %3 = fsub f32 %n, f32 1;
    f32 %4 = call (f32) -> f32 @fibFP(f32 %3);
    f32 %5 = fadd f32 %2, f32 %4;
    ret f32 %5;
}
internal func @takFP(f32 %x, f32 %y, f32 %z) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^dummy_entry:
    ubr ^entry;
^entry:
    f32 %0 = phi [^if.then, f32 %5] [^dummy_entry, f32 %x];
    f32 %1 = phi [^if.then, f32 %7] [^dummy_entry, f32 %y];
    f32 %2 = phi [^if.then, f32 %9] [^dummy_entry, f32 %z];
    i1 %3 = fcmp lt f32 %1, f32 %0;
    cbr i1 %3(prob = 0.5), ^if.then, ^b;
^if.then:
    f32 %4 = fsub f32 %0, f32 1;
    f32 %5 = call (f32, f32, f32) -> f32 @takFP(f32 %4, f32 %1, f32 %2);
    f32 %6 = fsub f32 %1, f32 1;
    f32 %7 = call (f32, f32, f32) -> f32 @takFP(f32 %6, f32 %2, f32 %0);
    f32 %8 = fsub f32 %2, f32 1;
    f32 %9 = call (f32, f32, f32) -> f32 @takFP(f32 %8, f32 %0, f32 %1);
    ubr ^entry;
^b:
    ret f32 %2;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    call (i32) -> void @starttime(i32 20);
    i32 %0 = call () -> i32 @getint();
    f32 %1 = call () -> f32 @getfloat();
    f32 %2 = call () -> f32 @getfloat();
    f32 %3 = call () -> f32 @getfloat();
    f32 %4 = s2f i32 %0 to f32;
    f32 %5 = fadd f32 28, f32 %4;
    f32 %6 = call (f32) -> f32 @fibFP(f32 %5);
    f32 %7 = call (f32, f32, f32) -> f32 @takFP(f32 %1, f32 %2, f32 %3);
    i1 %8 = fcmp eq f32 %6, f32 1.6558e+08;
    cbr i1 %8(prob = 0.5), ^if.then, ^if.else;
^if.then:
    call (i32) -> void @putch(i32 112);
    ubr ^b;
^if.else:
    call (i32) -> void @putint(i32 1);
    ubr ^b;
^b:
    i1 %9 = fcmp eq f32 %7, f32 2;
    cbr i1 %9(prob = 0.5), ^if.then1, ^if.else1;
^if.then1:
    call (i32) -> void @putch(i32 112);
    ubr ^b1;
^if.else1:
    call (i32) -> void @putint(i32 1);
    ubr ^b1;
^b1:
    call (i32) -> void @stoptime(i32 41);
    ret i32 0;
}
