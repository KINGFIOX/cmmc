internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @multiply(i32, i32, i32*) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry(i32 %arg, i32 %arg1, i32* %arg2):
    i1 %0 = scmp eq i32 %arg1, i32 0;
    cbr i1 %0, [ ^if.then ], [ ^indirect i32 %arg1, i32* %arg2, i32 %arg, i32 %arg1 ];
^indirect(i32 %arg, i32* %arg1, i32 %arg2, i32 %arg3):
    i1 %0 = scmp eq i32 %arg, i32 1;
    cbr i1 %0, [ ^if.then1 i32 %arg2 ], [ ^b i32* %arg1, i32 %arg2, i32 %arg3 ];
^if.then():
    ret i32 0;
^b(i32* %arg, i32 %arg1, i32 %arg2):
    i32 %0 = sdiv i32 %arg2, i32 2;
    i32 %1 = call (i32, i32, i32*) -> i32 @multiply(i32 %arg1, i32 %0, i32* %arg);
    i32 %2 = mul i32 %1, i32 2;
    i32 %3 = srem i32 %2, i32 998244353;
    i32 %4 = srem i32 %arg2, i32 2;
    i1 %5 = scmp eq i32 %4, i32 1;
    cbr i1 %5, [ ^indirect1 i32 %arg1, i32 %3 ], [ ^indirect2 i32 %3 ];
^if.then1(i32 %arg):
    i32 %0 = srem i32 %arg, i32 998244353;
    ret i32 %0;
^indirect1(i32 %arg, i32 %arg1):
    i32 %0 = add i32 %arg, i32 %arg1;
    i32 %1 = srem i32 %0, i32 998244353;
    ret i32 %1;
^indirect2(i32 %arg):
    ret i32 %arg;
}
internal func @power(i32, i32, i32*) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry(i32 %arg, i32 %arg1, i32* %arg2):
    i1 %0 = scmp eq i32 %arg1, i32 0;
    cbr i1 %0, [ ^if.then ], [ ^indirect i32 %arg1, i32 %arg, i32* %arg2, i32 %arg ];
^indirect(i32 %arg, i32 %arg1, i32* %arg2, i32 %arg3):
    i32 %0 = sdiv i32 %arg, i32 2;
    i32 %1 = call (i32, i32, i32*) -> i32 @power(i32 %arg1, i32 %0, i32* %arg2);
    i32 %2 = call (i32, i32, i32*) -> i32 @multiply(i32 %1, i32 %1, i32* %arg2);
    i32 %3 = srem i32 %arg, i32 2;
    i1 %4 = scmp eq i32 %3, i32 1;
    cbr i1 %4, [ ^indirect1 i32 %2, i32* %arg2, i32 %arg3 ], [ ^indirect2 i32 %2 ];
^if.then():
    ret i32 1;
^indirect1(i32 %arg, i32* %arg1, i32 %arg2):
    i32 %0 = call (i32, i32, i32*) -> i32 @multiply(i32 %arg, i32 %arg2, i32* %arg1);
    ret i32 %0;
^indirect2(i32 %arg):
    ret i32 %arg;
}
internal [2097152 * i32]* @temp;
internal [2097152 * i32]* @a;
internal [2097152 * i32]* @b;
internal func @fft(i32*, i32, i32, i32, i32*) -> i32 {
^entry(i32* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4):
    i32** %arr = alloc i32*;
    store i32** %arr with i32* %arg;
    i32* %begin_pos = alloc i32;
    store i32* %begin_pos with i32 %arg1;
    i32* %n = alloc i32;
    store i32* %n with i32 %arg2;
    i32* %w = alloc i32;
    store i32* %w with i32 %arg3;
    i1 %0 = scmp eq i32 %arg2, i32 1;
    cbr i1 %0, [ ^if.then ], [ ^b i32* %begin_pos, i32* %n, i32** %arr, i32* %w, i32* %arg4, i32* %arg, i32 %arg1, i32 %arg2, i32 %arg3 ];
^b(i32* %arg, i32* %arg1, i32** %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    i1 %0 = scmp lt i32 0, i32 %arg7;
    cbr i1 %0, [ ^while.body i32* %arg3, i32** %arg2, i32* %arg1, i32* %arg, i32* %i, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 0, i1 %0 ], [ ^indirect i32* %arg3, i32* %arg1, i32* %i, i32* %arg, i32** %arg2, i32 %arg7, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i1 %0 ];
^if.then():
    ret i32 1;
^while.body(i32* %arg, i32** %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i1 %arg11):
    i32 %0 = srem i32 %arg10, i32 2;
    i1 %1 = scmp eq i32 %0, i32 0;
    cbr i1 %1, [ ^indirect1 i32* %arg, i32* %arg2, i32** %arg1, i32* %arg3, i32* %arg4, i32 %arg10, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i1 %arg11 ], [ ^indirect2 i32* %arg, i32** %arg1, i32* %arg3, i32* %arg4, i32* %arg2, i32 %arg10, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i1 %arg11 ];
^indirect(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32** %arg4, i32 %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i1 %arg11):
    i32* %dst_pos = alloc i32;
    store i32* %dst_pos with i32 %arg8;
    i32* %len = alloc i32;
    store i32* %len with i32 %arg5;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    cbr i1 %arg11, [ ^while.body1 i32* %len, i32* %i, i32* %dst_pos, i32** %arg4, i32* %arg6, i32* %arg3, i32* %arg1, i32* %arg, i32* %arg2, i32* %arg7, i32* %arg7, i32 %arg8, i32 0 ], [ ^b1 i32** %arg4, i32* %arg6, i32* %arg3, i32* %arg1, i32* %arg, i32* %arg2, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10 ];
^indirect1(i32* %arg, i32* %arg1, i32** %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i1 %arg12):
    i32 %0 = sdiv i32 %arg5, i32 2;
    i32* %1 = getelementptr &([2097152 * i32]* @temp)[i32 0][i32 %0];
    i32 %2 = add i32 %arg8, i32 %arg5;
    i32* %3 = getelementptr &(i32* %arg7)[i32 %2];
    i32 %4 = load i32* %3;
    store i32* %1 with i32 %4;
    i32 %5 = add i32 %arg11, i32 1;
    store i32* %arg4 with i32 %5;
    ubr [ ^while.header i32* %arg, i32** %arg2, i32* %arg1, i32* %arg3, i32* %arg4, i32 %5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %5, i1 %arg12 ];
^indirect2(i32* %arg, i32** %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i1 %arg12):
    i32 %0 = sdiv i32 %arg9, i32 2;
    i32 %1 = sdiv i32 %arg5, i32 2;
    i32 %2 = add i32 %1, i32 %0;
    i32* %3 = getelementptr &([2097152 * i32]* @temp)[i32 0][i32 %2];
    i32 %4 = add i32 %arg8, i32 %arg5;
    i32* %5 = getelementptr &(i32* %arg7)[i32 %4];
    i32 %6 = load i32* %5;
    store i32* %3 with i32 %6;
    i32 %7 = add i32 %arg11, i32 1;
    store i32* %arg3 with i32 %7;
    ubr [ ^while.header i32* %arg, i32** %arg1, i32* %arg4, i32* %arg2, i32* %arg3, i32 %7, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %7, i1 %arg12 ];
^while.body1(i32* %arg, i32* %arg1, i32* %arg2, i32** %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12):
    i32 %0 = add i32 %arg11, i32 %arg12;
    i32* %1 = getelementptr &(i32* %arg10)[i32 %0];
    i32* %2 = getelementptr &([2097152 * i32]* @temp)[i32 0][i32 %arg12];
    i32 %3 = load i32* %2;
    store i32* %1 with i32 %3;
    i32 %4 = load i32* %arg1;
    i32 %5 = load i32* %arg;
    i32 %6 = load i32* %arg2;
    i32 %7 = load i32* %arg7;
    i32 %8 = load i32* %arg6;
    i32 %9 = load i32* %arg5;
    i32 %10 = add i32 %4, i32 1;
    store i32* %arg1 with i32 %10;
    i1 %11 = scmp lt i32 %10, i32 %5;
    cbr i1 %11, [ ^while.body1 i32* %arg, i32* %arg1, i32* %arg2, i32** %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %6, i32 %10 ], [ ^b1 i32** %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %9, i32 %8, i32 %7 ];
^b1(i32** %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i32 %0 = sdiv i32 %arg8, i32 2;
    i32 %1 = call (i32, i32, i32*) -> i32 @multiply(i32 %arg9, i32 %arg9, i32* %arg1);
    i32 %2 = call (i32*, i32, i32, i32, i32*) -> i32 @fft(i32* %arg6, i32 %arg7, i32 %0, i32 %1, i32* %arg1);
    i32 %3 = load i32* %arg4;
    i32 %4 = load i32* %arg3;
    i32 %5 = load i32* %arg2;
    i32* %6 = load i32** %arg;
    i32 %7 = sdiv i32 %4, i32 2;
    i32 %8 = add i32 %5, i32 %7;
    i32 %9 = call (i32, i32, i32*) -> i32 @multiply(i32 %3, i32 %3, i32* %arg1);
    i32 %10 = call (i32*, i32, i32, i32, i32*) -> i32 @fft(i32* %6, i32 %8, i32 %7, i32 %9, i32* %arg1);
    i32 %11 = load i32* %arg3;
    i32 %12 = load i32* %arg2;
    i32* %13 = load i32** %arg;
    store i32* %arg5 with i32 0;
    i32* %wn = alloc i32;
    store i32* %wn with i32 1;
    i32 %14 = sdiv i32 %11, i32 2;
    i1 %15 = scmp lt i32 0, i32 %14;
    cbr i1 %15, [ ^indirect3 i32* %arg4, i32* %wn, i32* %arg3, i32* %arg5, i32* %arg2, i32 %14, i32* %arg1, i32* %13, i32 %12, i32 0, i32 1 ], [ ^b2 ];
^while.header(i32* %arg, i32** %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i1 %arg12):
    i1 %0 = scmp lt i32 %arg5, i32 %arg9;
    cbr i1 %0, [ ^while.body i32* %arg, i32** %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i1 %arg12 ], [ ^indirect i32* %arg, i32* %arg2, i32* %arg4, i32* %arg3, i32** %arg1, i32 %arg9, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i1 %arg12 ];
^indirect3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i32* %x = alloc i32;
    i32 %0 = add i32 %arg8, i32 %arg9;
    i32* %1 = getelementptr &(i32* %arg7)[i32 %0];
    i32 %2 = load i32* %1;
    store i32* %x with i32 %2;
    i32* %y = alloc i32;
    i32 %3 = add i32 %arg5, i32 %arg8;
    i32 %4 = add i32 %3, i32 %arg9;
    i32* %5 = getelementptr &(i32* %arg7)[i32 %4];
    i32 %6 = load i32* %5;
    store i32* %y with i32 %6;
    i32 %7 = call (i32, i32, i32*) -> i32 @multiply(i32 %arg10, i32 %6, i32* %arg6);
    i32 %8 = add i32 %2, i32 %7;
    i32 %9 = srem i32 %8, i32 998244353;
    store i32* %1 with i32 %9;
    i32 %10 = load i32* %y;
    i32 %11 = load i32* %x;
    i32 %12 = load i32* %arg1;
    i32 %13 = load i32* %arg3;
    i32 %14 = load i32* %arg2;
    i32 %15 = load i32* %arg4;
    i32 %16 = sdiv i32 %14, i32 2;
    i32 %17 = add i32 %15, i32 %13;
    i32 %18 = add i32 %17, i32 %16;
    i32* %19 = getelementptr &(i32* %arg7)[i32 %18];
    i32 %20 = call (i32, i32, i32*) -> i32 @multiply(i32 %12, i32 %10, i32* %arg6);
    i32 %21 = sub i32 %11, i32 %20;
    i32 %22 = add i32 %21, i32 998244353;
    i32 %23 = srem i32 %22, i32 998244353;
    store i32* %19 with i32 %23;
    i32 %24 = load i32* %arg1;
    i32 %25 = load i32* %arg3;
    i32 %26 = load i32* %arg;
    i32 %27 = load i32* %arg2;
    i32 %28 = load i32* %arg4;
    i32 %29 = call (i32, i32, i32*) -> i32 @multiply(i32 %24, i32 %26, i32* %arg6);
    store i32* %arg1 with i32 %29;
    i32 %30 = add i32 %25, i32 1;
    store i32* %arg3 with i32 %30;
    i32 %31 = sdiv i32 %27, i32 2;
    i1 %32 = scmp lt i32 %30, i32 %31;
    cbr i1 %32, [ ^indirect3 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %31, i32* %arg6, i32* %arg7, i32 %28, i32 %30, i32 %29 ], [ ^b2 ];
^b2():
    ret i32 0;
}
func @main() -> i32 { NoRecurse Entry } {
^entry():
    i32* %d = alloc i32;
    i32* %n = alloc i32;
    i32* %0 = getelementptr &([2097152 * i32]* @a)[i32 0][i32 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    store i32* %n with i32 %1;
    i32* %m = alloc i32;
    i32* %2 = getelementptr &([2097152 * i32]* @b)[i32 0][i32 0];
    i32 %3 = call (i32*) -> i32 @getarray(i32* %2);
    i32 %4 = load i32* %n;
    store i32* %m with i32 %3;
    call (i32) -> void @starttime(i32 60);
    store i32* %d with i32 1;
    i32 %5 = add i32 %4, i32 %3;
    i32 %6 = sub i32 %5, i32 1;
    i1 %7 = scmp lt i32 1, i32 %6;
    cbr i1 %7, [ ^while.body i32* %n, i32* %m, i32* %2, i32* %0, i32* %d, i32 1, i32 %6 ], [ ^b i32* %n, i32* %m, i32* %2, i32* %0, i32* %d, i32 1 ];
^while.body(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6):
    i32 %0 = mul i32 %arg5, i32 2;
    store i32* %arg4 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 %arg6;
    cbr i1 %1, [ ^while.body i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %0, i32 %arg6 ], [ ^b i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %0 ];
^b(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5):
    i32 %0 = sdiv i32 998244352, i32 %arg5;
    i32 %1 = call (i32, i32, i32*) -> i32 @power(i32 3, i32 %0, i32* %arg4);
    i32 %2 = call (i32*, i32, i32, i32, i32*) -> i32 @fft(i32* %arg3, i32 0, i32 %arg5, i32 %1, i32* %arg4);
    i32 %3 = load i32* %arg4;
    i32 %4 = sdiv i32 998244352, i32 %3;
    i32 %5 = call (i32, i32, i32*) -> i32 @power(i32 3, i32 %4, i32* %arg4);
    i32 %6 = call (i32*, i32, i32, i32, i32*) -> i32 @fft(i32* %arg2, i32 0, i32 %3, i32 %5, i32* %arg4);
    i32 %7 = load i32* %arg4;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    i1 %8 = scmp lt i32 0, i32 %7;
    cbr i1 %8, [ ^while.body1 i32* %arg1, i32* %arg, i32* %i, i32* %arg3, i32* %arg4, i32 %7, i32 0 ], [ ^indirect i32* %arg1, i32* %arg, i32 %7, i32* %arg3, i32* %arg4 ];
^while.body1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6):
    i32* %0 = getelementptr &([2097152 * i32]* @a)[i32 0][i32 %arg6];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &([2097152 * i32]* @b)[i32 0][i32 %arg6];
    i32 %3 = load i32* %2;
    i32 %4 = call (i32, i32, i32*) -> i32 @multiply(i32 %1, i32 %3, i32* %arg4);
    store i32* %0 with i32 %4;
    i32 %5 = add i32 %arg6, i32 1;
    store i32* %arg2 with i32 %5;
    i1 %6 = scmp lt i32 %5, i32 %arg5;
    cbr i1 %6, [ ^while.body1 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %5 ], [ ^indirect i32* %arg, i32* %arg1, i32 %arg5, i32* %arg3, i32* %arg4 ];
^indirect(i32* %arg, i32* %arg1, i32 %arg2, i32* %arg3, i32* %arg4):
    i32 %0 = sdiv i32 998244352, i32 %arg2;
    i32 %1 = sub i32 998244352, i32 %0;
    i32 %2 = call (i32, i32, i32*) -> i32 @power(i32 3, i32 %1, i32* %arg4);
    i32 %3 = call (i32*, i32, i32, i32, i32*) -> i32 @fft(i32* %arg3, i32 0, i32 %arg2, i32 %2, i32* %arg4);
    i32 %4 = load i32* %arg;
    i32 %5 = load i32* %arg1;
    i32 %6 = load i32* %arg4;
    i1 %7 = scmp lt i32 0, i32 %6;
    cbr i1 %7, [ ^while.body2 i32* %arg3, i32* %arg4, i32 %6, i32 %5, i32 %4, i32 0 ], [ ^b1 i32* %arg3, i32 %5, i32 %4 ];
^while.body2(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5):
    i32* %0 = getelementptr &([2097152 * i32]* @a)[i32 0][i32 %arg5];
    i32 %1 = load i32* %0;
    i32 %2 = call (i32, i32, i32*) -> i32 @power(i32 %arg2, i32 998244351, i32* %arg1);
    i32 %3 = call (i32, i32, i32*) -> i32 @multiply(i32 %1, i32 %2, i32* %arg1);
    store i32* %0 with i32 %3;
    i32 %4 = add i32 %arg5, i32 1;
    i1 %5 = scmp lt i32 %4, i32 %arg2;
    cbr i1 %5, [ ^while.body2 i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %4 ], [ ^b1 i32* %arg, i32 %arg3, i32 %arg4 ];
^b1(i32* %arg, i32 %arg1, i32 %arg2):
    call (i32) -> void @stoptime(i32 79);
    i32 %0 = add i32 %arg1, i32 %arg2;
    i32 %1 = sub i32 %0, i32 1;
    call (i32, i32*) -> void @putarray(i32 %1, i32* %arg);
    ret i32 0;
}
