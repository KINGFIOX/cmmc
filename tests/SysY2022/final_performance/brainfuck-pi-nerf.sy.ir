internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [65536 * i32]* @program = [];
internal [65536 * i32]* @tape = [];
internal [65536 * i32]* @input = [];
internal [65536 * i32]* @output = [];
internal func @cmmc::Intrinsic::memset(i8*, i32, i32) -> i8* { NoMemoryRead };
func @main() -> i32 { NoRecurse } {
^entry():
    i32* %program_length = alloc i32;
    store i32* %program_length with i32 0;
    i32* %input_length = alloc i32;
    store i32* %input_length with i32 0;
    i32* %output_length = alloc i32;
    store i32* %output_length with i32 0;
    i32* %get = alloc i32;
    i32* %get1 = alloc i32;
    i32 %0 = call () -> i32 @getch();
    store i32* %get1 with i32 %0;
    i1 %1 = scmp neq i32 %0, i32 62;
    cbr i1 %1, [ ^b i32* %get1, i32* %get, i32* %program_length, i32* %input_length, i32* %program_length, i32* %input_length, i32* %output_length, i32 %0 ], [ ^b1 i32* %get, i32* %program_length, i32* %input_length, i32* %program_length, i32* %input_length, i32* %output_length, i32 %0 ];
^b(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7):
    i1 %0 = scmp neq i32 %arg7, i32 60;
    cbr i1 %0, [ ^b2 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6 ], [ ^indirect i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6 ];
^b1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    store i32* %arg with i32 %arg6;
    i1 %0 = scmp neq i32 %arg6, i32 35;
    cbr i1 %0, [ ^indirect1 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg5, i32* %arg4, i32* %arg3, i32 %arg6 ], [ ^b3 i32* %arg, i32* %arg2, i32* %arg5, i32* %arg4, i32* %arg3 ];
^indirect(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    i32 %0 = load i32* %arg;
    ubr [ ^b1 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %0 ];
^indirect1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    i32 %0 = load i32* %arg2;
    ubr [ ^while.body i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %0 ];
^b2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    i32 %0 = load i32* %arg;
    i1 %1 = scmp neq i32 %0, i32 43;
    cbr i1 %1, [ ^indirect2 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %0 ], [ ^b1 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %0 ];
^b3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4):
    i32 %0 = call () -> i32 @getch();
    i1 %1 = scmp neq i32 %0, i32 105;
    cbr i1 %1, [ ^entry1 i32* %arg2, i32* %arg3, i32* %arg4 ], [ ^b4 i32* %arg, i32* %arg1, i32* %arg4, i32* %arg3, i32* %arg2 ];
^indirect2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7):
    i1 %0 = scmp neq i32 %arg7, i32 45;
    cbr i1 %0, [ ^b5 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6 ], [ ^indirect i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6 ];
^while.body(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7):
    i32* %0 = getelementptr &([65536 * i32]* @program)[i32 0][i32 %arg7];
    store i32* %0 with i32 %arg6;
    i32* %get = alloc i32;
    i32 %1 = call () -> i32 @getch();
    store i32* %get with i32 %1;
    i1 %2 = scmp neq i32 %1, i32 62;
    cbr i1 %2, [ ^b6 i32* %get, i32* %arg, i32* %arg1, i32* %arg2, i32* %arg5, i32* %arg4, i32* %arg3, i32 %1 ], [ ^b8 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg5, i32* %arg4, i32* %arg3, i32 %1 ];
^entry1(i32* %arg, i32* %arg1, i32* %arg2):
    call (i32) -> void @starttime(i32 116);
    i32* %ip = alloc i32;
    store i32* %ip with i32 0;
    i32* %read_head = alloc i32;
    store i32* %read_head with i32 0;
    i32* %input_head = alloc i32;
    store i32* %input_head with i32 0;
    [512 * i32]* %return_address = alloc [512 * i32];
    i32* %0 = getelementptr &([512 * i32]* %return_address)[i32 0][i32 0];
    i8* %1 = ptrcast i32* %0 to i8*;
    i8* %2 = call (i8*, i32, i32) -> i8* @cmmc::Intrinsic::memset(i8* %1, i32 0, i32 2048);
    i32 %3 = load i32* %input_head;
    i32 %4 = load i32* %read_head;
    i32 %5 = load i32* %ip;
    i32* %return_address_t = alloc i32;
    store i32* %return_address_t with i32 0;
    store i32* %arg with i32 0;
    i32 %6 = load i32* %arg2;
    i1 %7 = scmp lt i32 %5, i32 %6;
    cbr i1 %7, [ ^while.body1 i32* %input_head, i32* %return_address_t, [512 * i32]* %return_address, i32* %read_head, i32* %ip, i32* %arg1, i32* %arg, i32* %arg2, i32* %arg, i32 %5, i32 %4, i32 %3, i32 0 ], [ ^b9 i32* %ip, [512 * i32]* %return_address, i32* %read_head, i32* %return_address_t, i32* %input_head, i32* %arg, i32 0 ];
^b4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4):
    i32 %0 = call () -> i32 @getint();
    store i32* %arg1 with i32 %0;
    i32 %1 = call () -> i32 @getch();
    i1 %2 = scmp lt i32 0, i32 %0;
    cbr i1 %2, [ ^while.body2 i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, i32 0, i32 %0 ], [ ^b7 i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4 ];
^b5(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    i32 %0 = load i32* %arg;
    i1 %1 = scmp neq i32 %0, i32 91;
    cbr i1 %1, [ ^indirect3 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %0 ], [ ^b1 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %0 ];
^b6(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7):
    i1 %0 = scmp neq i32 %arg7, i32 60;
    cbr i1 %0, [ ^b10 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6 ], [ ^indirect4 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6 ];
^b7(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3):
    free i32* %arg;
    ubr [ ^entry1 i32* %arg3, i32* %arg2, i32* %arg1 ];
^while.body1(i32* %arg, i32* %arg1, [512 * i32]* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12):
    i32* %code = alloc i32;
    i32* %0 = getelementptr &([65536 * i32]* @program)[i32 0][i32 %arg9];
    i32 %1 = load i32* %0;
    store i32* %code with i32 %1;
    i1 %2 = scmp eq i32 %1, i32 62;
    cbr i1 %2, [ ^if.then i32* %arg4, i32* %arg1, i32* %arg, i32* %code, [512 * i32]* %arg2, i32* %arg3, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12 ], [ ^indirect6 [512 * i32]* %arg2, i32* %arg3, i32* %arg4, i32* %arg1, i32* %arg, i32* %code, i32 %1, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %1 ];
^b8(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    store i32* %arg with i32 %arg6;
    i32 %0 = load i32* %arg2;
    i32 %1 = add i32 %0, i32 1;
    store i32* %arg2 with i32 %1;
    i1 %2 = scmp neq i32 %arg6, i32 35;
    cbr i1 %2, [ ^while.body i32* %arg, i32* %arg1, i32* %arg2, i32* %arg5, i32* %arg4, i32* %arg3, i32 %arg6, i32 %1 ], [ ^b3 i32* %arg, i32* %arg1, i32* %arg5, i32* %arg4, i32* %arg3 ];
^while.body2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5):
    i32* %0 = getelementptr &([65536 * i32]* @input)[i32 0][i32 %arg4];
    i32 %1 = call () -> i32 @getch();
    store i32* %0 with i32 %1;
    i32 %2 = add i32 %arg4, i32 1;
    i1 %3 = scmp lt i32 %2, i32 %arg5;
    cbr i1 %3, [ ^while.body2 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %2, i32 %arg5 ], [ ^b7 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3 ];
^b9(i32* %arg, [512 * i32]* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    free i32* %arg4;
    free i32* %arg2;
    free i32* %arg3;
    free [512 * i32]* %arg1;
    free i32* %arg;
    call (i32) -> void @stoptime(i32 118);
    i1 %0 = scmp lt i32 0, i32 %arg6;
    cbr i1 %0, [ ^indirect5 i32* %arg5 ], [ ^b11 ];
^indirect3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7):
    i1 %0 = scmp neq i32 %arg7, i32 93;
    cbr i1 %0, [ ^b12 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6 ], [ ^indirect i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6 ];
^if.then(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [512 * i32]* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13):
    i32 %0 = add i32 %arg11, i32 1;
    store i32* %arg5 with i32 %0;
    ubr [ ^b13 [512 * i32]* %arg4, i32* %arg5, i32* %arg2, i32* %arg1, i32* %arg3, i32* %arg, i32 %arg10, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %0, i32 %arg12, i32 %arg13 ];
^indirect4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    i32 %0 = load i32* %arg;
    ubr [ ^b8 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %0 ];
^b10(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    i32 %0 = load i32* %arg;
    i1 %1 = scmp neq i32 %0, i32 43;
    cbr i1 %1, [ ^indirect7 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %0 ], [ ^b8 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %0 ];
^indirect5(i32* %arg):
    i32 %0 = load i32* %arg;
    ubr [ ^while.body3 i32 0, i32 %0 ];
^indirect6([512 * i32]* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15):
    i1 %0 = scmp eq i32 %arg6, i32 60;
    cbr i1 %0, [ ^if.then1 i32* %arg4, i32* %arg3, i32* %arg5, i32* %arg2, [512 * i32]* %arg, i32* %arg1, i32* %arg9, i32* %arg8, i32* %arg7, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14 ], [ ^if.else i32* %arg2, [512 * i32]* %arg, i32* %arg1, i32* %arg4, i32* %arg3, i32* %arg5, i32* %arg7, i32* %arg9, i32* %arg8, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15 ];
^b11():
    ret i32 0;
^b12(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    i32 %0 = load i32* %arg;
    i1 %1 = scmp neq i32 %0, i32 46;
    cbr i1 %1, [ ^indirect8 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %0 ], [ ^b1 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %0 ];
^if.then1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [512 * i32]* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13):
    i32 %0 = sub i32 %arg11, i32 1;
    store i32* %arg5 with i32 %0;
    i32 %1 = add i32 %arg10, i32 1;
    store i32* %arg3 with i32 %1;
    free i32* %arg2;
    ubr [ ^while.header i32* %arg5, [512 * i32]* %arg4, i32* %arg1, i32* %arg, i32* %arg3, i32 %1, i32* %arg7, i32* %arg6, i32* %arg8, i32* %arg9, i32 %1, i32 %0, i32 %arg12, i32 %arg13 ];
^indirect7(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7):
    i1 %0 = scmp neq i32 %arg7, i32 45;
    cbr i1 %0, [ ^b14 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6 ], [ ^indirect4 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6 ];
^b13([512 * i32]* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13):
    i32 %0 = add i32 %arg6, i32 1;
    store i32* %arg5 with i32 %0;
    free i32* %arg4;
    i32 %1 = load i32* %arg9;
    i1 %2 = scmp lt i32 %0, i32 %1;
    cbr i1 %2, [ ^while.body1 i32* %arg2, i32* %arg3, [512 * i32]* %arg, i32* %arg1, i32* %arg5, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %0, i32 %arg11, i32 %arg12, i32 %arg13 ], [ ^indirect9 i32* %arg5, [512 * i32]* %arg, i32* %arg1, i32* %arg3, i32* %arg2, i32* %arg10 ];
^while.body3(i32 %arg, i32 %arg1):
    i32* %0 = getelementptr &([65536 * i32]* @output)[i32 0][i32 %arg];
    i32 %1 = load i32* %0;
    call (i32) -> void @putch(i32 %1);
    i32 %2 = add i32 %arg, i32 1;
    i1 %3 = scmp lt i32 %2, i32 %arg1;
    cbr i1 %3, [ ^while.body3 i32 %2, i32 %arg1 ], [ ^b11 ];
^if.else(i32* %arg, [512 * i32]* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14):
    i1 %0 = scmp eq i32 %arg14, i32 43;
    cbr i1 %0, [ ^if.then2 i32* %arg, i32* %arg4, i32* %arg3, i32* %arg5, [512 * i32]* %arg1, i32* %arg2, i32* %arg7, i32* %arg8, i32* %arg6, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13 ], [ ^indirect10 i32* %arg, [512 * i32]* %arg1, i32* %arg2, i32* %arg4, i32* %arg3, i32* %arg5, i32 %arg14, i32* %arg6, i32* %arg8, i32* %arg7, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14 ];
^indirect8(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7):
    i1 %0 = scmp neq i32 %arg7, i32 44;
    cbr i1 %0, [ ^b15 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6 ], [ ^indirect i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6 ];
^indirect9(i32* %arg, [512 * i32]* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    i32 %0 = load i32* %arg5;
    ubr [ ^b9 i32* %arg, [512 * i32]* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %0 ];
^b14(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    i32 %0 = load i32* %arg;
    i1 %1 = scmp neq i32 %0, i32 91;
    cbr i1 %1, [ ^indirect11 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %0 ], [ ^b8 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %0 ];
^if.then2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [512 * i32]* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13):
    i32* %0 = getelementptr &([65536 * i32]* @tape)[i32 0][i32 %arg11];
    i32 %1 = load i32* %0;
    i32 %2 = add i32 %1, i32 1;
    store i32* %0 with i32 %2;
    i32 %3 = add i32 %arg10, i32 1;
    store i32* %arg with i32 %3;
    free i32* %arg3;
    ubr [ ^while.header i32* %arg5, [512 * i32]* %arg4, i32* %arg1, i32* %arg2, i32* %arg, i32 %3, i32* %arg7, i32* %arg6, i32* %arg8, i32* %arg9, i32 %3, i32 %arg11, i32 %arg12, i32 %arg13 ];
^while.header(i32* %arg, [512 * i32]* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13):
    i32 %0 = load i32* %arg8;
    i1 %1 = scmp lt i32 %arg5, i32 %0;
    cbr i1 %1, [ ^while.body1 i32* %arg3, i32* %arg2, [512 * i32]* %arg1, i32* %arg, i32* %arg4, i32* %arg7, i32* %arg6, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13 ], [ ^indirect9 i32* %arg4, [512 * i32]* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32* %arg9 ];
^indirect10(i32* %arg, [512 * i32]* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15):
    i1 %0 = scmp eq i32 %arg6, i32 45;
    cbr i1 %0, [ ^if.then3 i32* %arg4, i32* %arg3, i32* %arg5, i32* %arg, [512 * i32]* %arg1, i32* %arg2, i32* %arg9, i32* %arg8, i32* %arg7, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14 ], [ ^if.else1 i32* %arg2, [512 * i32]* %arg1, i32* %arg, i32* %arg4, i32* %arg3, i32* %arg5, i32* %arg7, i32* %arg9, i32* %arg8, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15 ];
^b15(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    i32 %0 = load i32* %arg;
    i1 %1 = scmp neq i32 %0, i32 35;
    cbr i1 %1, [ ^while.body4 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6 ], [ ^b1 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %0 ];
^indirect11(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7):
    i1 %0 = scmp neq i32 %arg7, i32 93;
    cbr i1 %0, [ ^b16 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6 ], [ ^indirect4 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6 ];
^if.then3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [512 * i32]* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13):
    i32* %0 = getelementptr &([65536 * i32]* @tape)[i32 0][i32 %arg11];
    i32 %1 = load i32* %0;
    i32 %2 = sub i32 %1, i32 1;
    store i32* %0 with i32 %2;
    i32 %3 = add i32 %arg10, i32 1;
    store i32* %arg3 with i32 %3;
    free i32* %arg2;
    ubr [ ^while.header i32* %arg5, [512 * i32]* %arg4, i32* %arg1, i32* %arg, i32* %arg3, i32 %3, i32* %arg7, i32* %arg6, i32* %arg8, i32* %arg9, i32 %3, i32 %arg11, i32 %arg12, i32 %arg13 ];
^if.else1(i32* %arg, [512 * i32]* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14):
    i1 %0 = scmp eq i32 %arg14, i32 91;
    cbr i1 %0, [ ^if.then4 i32* %arg3, i32* %arg5, i32* %arg4, i32* %arg2, [512 * i32]* %arg1, i32* %arg, i32* %arg7, i32* %arg8, i32* %arg6, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13 ], [ ^indirect12 i32* %arg, [512 * i32]* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg14, i32* %arg6, i32* %arg8, i32* %arg7, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14 ];
^while.body4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    i32 %0 = call () -> i32 @getch();
    store i32* %arg with i32 %0;
    i1 %1 = scmp neq i32 %0, i32 62;
    cbr i1 %1, [ ^b i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %0 ], [ ^b1 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %0 ];
^b16(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    i32 %0 = load i32* %arg;
    i1 %1 = scmp neq i32 %0, i32 46;
    cbr i1 %1, [ ^indirect13 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %0 ], [ ^b8 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %0 ];
^if.then4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [512 * i32]* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13):
    i32* %0 = getelementptr &([65536 * i32]* @tape)[i32 0][i32 %arg11];
    i32 %1 = load i32* %0;
    i1 %2 = scmp neq i32 %1, i32 0;
    cbr i1 %2, [ ^if.then5 i32* %arg3, i32* %arg5, [512 * i32]* %arg4, i32* %arg, i32* %arg1, i32* %arg2, i32* %arg7, i32* %arg6, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13 ], [ ^if.else2 [512 * i32]* %arg4, i32* %arg5, i32* %arg, i32* %arg2, i32* %arg1, i32* %arg3, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13 ];
^indirect12(i32* %arg, [512 * i32]* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15):
    i1 %0 = scmp eq i32 %arg6, i32 93;
    cbr i1 %0, [ ^if.then6 i32* %arg2, i32* %arg3, i32* %arg5, i32* %arg4, [512 * i32]* %arg1, i32* %arg, i32* %arg8, i32* %arg9, i32* %arg7, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14 ], [ ^if.else3 i32* %arg2, [512 * i32]* %arg1, i32* %arg, i32* %arg4, i32* %arg3, i32* %arg5, i32* %arg7, i32* %arg9, i32* %arg8, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15 ];
^indirect13(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7):
    i1 %0 = scmp neq i32 %arg7, i32 44;
    cbr i1 %0, [ ^b17 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6 ], [ ^indirect4 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6 ];
^if.then5(i32* %arg, i32* %arg1, [512 * i32]* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13):
    i32* %0 = getelementptr &([512 * i32]* %arg2)[i32 0][i32 %arg13];
    store i32* %0 with i32 %arg10;
    i32 %1 = add i32 %arg13, i32 1;
    store i32* %arg5 with i32 %1;
    ubr [ ^b13 [512 * i32]* %arg2, i32* %arg1, i32* %arg3, i32* %arg5, i32* %arg4, i32* %arg, i32 %arg10, i32* %arg7, i32* %arg6, i32* %arg8, i32* %arg9, i32 %arg11, i32 %arg12, i32 %1 ];
^if.else2([512 * i32]* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13):
    i32* %loop = alloc i32;
    store i32* %loop with i32 1;
    ubr [ ^while.body5 [512 * i32]* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %loop, i32* %arg5, i32* %arg7, i32* %arg6, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 1 ];
^if.then6(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [512 * i32]* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13):
    i32* %0 = getelementptr &([65536 * i32]* @tape)[i32 0][i32 %arg11];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 0;
    cbr i1 %2, [ ^if.then7 i32* %arg5, [512 * i32]* %arg4, i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg7, i32* %arg6, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13 ], [ ^if.else4 i32* %arg, i32* %arg5, [512 * i32]* %arg4, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %arg11, i32 %arg12, i32 %arg13 ];
^if.else3(i32* %arg, [512 * i32]* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14):
    i1 %0 = scmp eq i32 %arg14, i32 46;
    cbr i1 %0, [ ^if.then8 i32* %arg, i32* %arg3, i32* %arg4, i32* %arg5, [512 * i32]* %arg1, i32* %arg2, i32* %arg7, i32* %arg6, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13 ], [ ^indirect14 i32* %arg, [512 * i32]* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg14, i32* %arg8, i32* %arg6, i32* %arg7, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13 ];
^b17(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    i32 %0 = load i32* %arg;
    i1 %1 = scmp neq i32 %0, i32 35;
    cbr i1 %1, [ ^while.body6 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6 ], [ ^b8 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %0 ];
^if.then7(i32* %arg, [512 * i32]* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13):
    i32 %0 = sub i32 %arg13, i32 1;
    store i32* %arg5 with i32 %0;
    i32 %1 = add i32 %arg10, i32 1;
    store i32* %arg2 with i32 %1;
    free i32* %arg4;
    ubr [ ^while.header i32* %arg, [512 * i32]* %arg1, i32* %arg5, i32* %arg3, i32* %arg2, i32 %1, i32* %arg7, i32* %arg6, i32* %arg8, i32* %arg9, i32 %1, i32 %arg11, i32 %arg12, i32 %0 ];
^if.else4(i32* %arg, i32* %arg1, [512 * i32]* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12):
    i32 %0 = sub i32 %arg12, i32 1;
    i32* %1 = getelementptr &([512 * i32]* %arg2)[i32 0][i32 %0];
    i32 %2 = load i32* %1;
    ubr [ ^b13 [512 * i32]* %arg2, i32* %arg1, i32* %arg3, i32* %arg5, i32* %arg4, i32* %arg, i32 %2, i32* %arg7, i32* %arg6, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12 ];
^if.then8(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [512 * i32]* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13):
    i32 %0 = load i32* %arg8;
    i32* %1 = getelementptr &([65536 * i32]* @output)[i32 0][i32 %0];
    i32* %2 = getelementptr &([65536 * i32]* @tape)[i32 0][i32 %arg11];
    i32 %3 = load i32* %2;
    store i32* %1 with i32 %3;
    i32 %4 = add i32 %0, i32 1;
    store i32* %arg8 with i32 %4;
    i32 %5 = add i32 %arg10, i32 1;
    store i32* %arg with i32 %5;
    free i32* %arg3;
    ubr [ ^while.header i32* %arg5, [512 * i32]* %arg4, i32* %arg1, i32* %arg2, i32* %arg, i32 %5, i32* %arg8, i32* %arg6, i32* %arg7, i32* %arg9, i32 %5, i32 %arg11, i32 %arg12, i32 %arg13 ];
^while.body5([512 * i32]* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15):
    i32 %0 = add i32 %arg11, i32 1;
    store i32* %arg6 with i32 %0;
    i32* %1 = getelementptr &([65536 * i32]* @program)[i32 0][i32 %0];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %2, i32 93;
    cbr i1 %3, [ ^indirect15 i32* %arg1, [512 * i32]* %arg, i32* %arg3, i32* %arg2, i32* %arg4, i32* %arg6, i32* %arg5, i32 %0, i32* %arg8, i32* %arg7, i32* %arg9, i32* %arg10, i32 %0, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15 ], [ ^b18 [512 * i32]* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %0, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %0, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15 ];
^indirect14(i32* %arg, [512 * i32]* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14):
    i1 %0 = scmp eq i32 %arg6, i32 44;
    cbr i1 %0, [ ^if.then9 i32* %arg, [512 * i32]* %arg1, i32* %arg2, i32* %arg3, i32* %arg5, i32* %arg4, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14 ], [ ^indirect16 [512 * i32]* %arg1, i32* %arg2, i32* %arg4, i32* %arg3, i32* %arg5, i32* %arg, i32* %arg7, i32* %arg9, i32* %arg8, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14 ];
^while.body6(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    i32 %0 = call () -> i32 @getch();
    store i32* %arg with i32 %0;
    i1 %1 = scmp neq i32 %0, i32 62;
    cbr i1 %1, [ ^b6 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %0 ], [ ^b8 i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %0 ];
^indirect15(i32* %arg, [512 * i32]* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16):
    i32 %0 = sub i32 %arg16, i32 1;
    store i32* %arg6 with i32 %0;
    i32* %1 = getelementptr &([65536 * i32]* @program)[i32 0][i32 %arg7];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %2, i32 91;
    cbr i1 %3, [ ^if.then11 i32* %arg, [512 * i32]* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %0 ], [ ^indirect18 i32* %arg, [512 * i32]* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %0 ];
^indirect16([512 * i32]* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13):
    i32 %0 = add i32 %arg10, i32 1;
    store i32* %arg5 with i32 %0;
    free i32* %arg4;
    ubr [ ^while.header i32* %arg1, [512 * i32]* %arg, i32* %arg3, i32* %arg2, i32* %arg5, i32 %0, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %0, i32 %arg11, i32 %arg12, i32 %arg13 ];
^b18([512 * i32]* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16):
    i32* %0 = getelementptr &([65536 * i32]* @program)[i32 0][i32 %arg7];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 91;
    cbr i1 %2, [ ^if.then11 i32* %arg1, [512 * i32]* %arg, i32* %arg3, i32* %arg2, i32* %arg4, i32* %arg6, i32* %arg5, i32* %arg9, i32* %arg8, i32* %arg10, i32* %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16 ], [ ^indirect18 i32* %arg1, [512 * i32]* %arg, i32* %arg3, i32* %arg2, i32* %arg4, i32* %arg6, i32* %arg5, i32* %arg9, i32* %arg8, i32* %arg10, i32* %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16 ];
^if.then9(i32* %arg, [512 * i32]* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13):
    i32 %0 = load i32* %arg8;
    i1 %1 = scmp ge i32 %arg12, i32 %0;
    cbr i1 %1, [ ^if.then10 i32* %arg, i32* %arg3, i32* %arg5, i32* %arg4, [512 * i32]* %arg1, i32* %arg2, i32* %arg8, i32* %arg6, i32* %arg7, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13 ], [ ^indirect17 i32* %arg, i32* %arg3, i32* %arg4, i32* %arg5, [512 * i32]* %arg1, i32* %arg2, i32 %arg12, i32* %arg8, i32* %arg6, i32* %arg7, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg13 ];
^if.then10(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [512 * i32]* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13):
    i32* %0 = getelementptr &([65536 * i32]* @tape)[i32 0][i32 %arg11];
    store i32* %0 with i32 0;
    i32 %1 = add i32 %arg10, i32 1;
    store i32* %arg with i32 %1;
    free i32* %arg3;
    ubr [ ^while.header i32* %arg5, [512 * i32]* %arg4, i32* %arg1, i32* %arg2, i32* %arg, i32 %1, i32* %arg7, i32* %arg6, i32* %arg8, i32* %arg9, i32 %1, i32 %arg11, i32 %arg12, i32 %arg13 ];
^if.then11(i32* %arg, [512 * i32]* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15):
    i32 %0 = add i32 %arg15, i32 1;
    store i32* %arg6 with i32 %0;
    i1 %1 = scmp gt i32 %0, i32 0;
    cbr i1 %1, [ ^while.body5 [512 * i32]* %arg1, i32* %arg, i32* %arg3, i32* %arg2, i32* %arg4, i32* %arg6, i32* %arg5, i32* %arg8, i32* %arg7, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %0 ], [ ^b19 [512 * i32]* %arg1, i32* %arg, i32* %arg3, i32* %arg2, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14 ];
^indirect17(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [512 * i32]* %arg4, i32* %arg5, i32 %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13):
    i32* %0 = getelementptr &([65536 * i32]* @tape)[i32 0][i32 %arg12];
    i32* %1 = getelementptr &([65536 * i32]* @input)[i32 0][i32 %arg6];
    i32 %2 = load i32* %1;
    store i32* %0 with i32 %2;
    i32 %3 = add i32 %arg6, i32 1;
    store i32* %arg3 with i32 %3;
    i32 %4 = add i32 %arg11, i32 1;
    store i32* %arg with i32 %4;
    free i32* %arg2;
    ubr [ ^while.header i32* %arg5, [512 * i32]* %arg4, i32* %arg1, i32* %arg3, i32* %arg, i32 %4, i32* %arg8, i32* %arg7, i32* %arg9, i32* %arg10, i32 %4, i32 %arg12, i32 %3, i32 %arg13 ];
^indirect18(i32* %arg, [512 * i32]* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15):
    i1 %0 = scmp gt i32 %arg15, i32 0;
    cbr i1 %0, [ ^while.body5 [512 * i32]* %arg1, i32* %arg, i32* %arg3, i32* %arg2, i32* %arg4, i32* %arg6, i32* %arg5, i32* %arg8, i32* %arg7, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15 ], [ ^b19 [512 * i32]* %arg1, i32* %arg, i32* %arg3, i32* %arg2, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14 ];
^b19([512 * i32]* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14):
    free i32* %arg6;
    i32 %0 = add i32 %arg11, i32 1;
    store i32* %arg5 with i32 %0;
    free i32* %arg4;
    ubr [ ^while.header i32* %arg1, [512 * i32]* %arg, i32* %arg3, i32* %arg2, i32* %arg5, i32 %0, i32* %arg8, i32* %arg7, i32* %arg9, i32* %arg10, i32 %0, i32 %arg12, i32 %arg13, i32 %arg14 ];
}
