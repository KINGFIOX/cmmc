internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [65536 * i32]* @program = [];
internal [65536 * i32]* @tape = [];
internal [65536 * i32]* @input = [];
internal [65536 * i32]* @output = [];
internal func @cmmc::Intrinsic::memset() -> i8* { NoMemoryRead };
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %ip = alloc i32;
    i32* %read_hea = alloc i32;
    i32* %input_he = alloc i32;
    [512 * i32]* %return_a = alloc [512 * i32];
    i32* %input_length = alloc i32;
    i32* %program_length = alloc i32;
    store i32* %program_length with i32 0;
    store i32* %input_length with i32 0;
    i32 %0 = call () -> i32 @getch();
    ubr ^while.header;
^while.header:
    i32 %1 = phi [^while.body, i32 %19] [^entry, i32 %0];
    i1 %2 = scmp neq i32 %1, i32 62;
    cbr i1 %2(prob = 0.5), ^b, ^b1;
^b:
    i1 %3 = scmp neq i32 %1, i32 60;
    ubr ^b1;
^b1:
    i1 %4 = phi [^while.header, i1 false] [^b, i1 %3];
    cbr i1 %4(prob = 0.5), ^b2, ^b3;
^b2:
    i1 %5 = scmp neq i32 %1, i32 43;
    ubr ^b3;
^b3:
    i1 %6 = phi [^b1, i1 false] [^b2, i1 %5];
    cbr i1 %6(prob = 0.5), ^b4, ^b5;
^b4:
    i1 %7 = scmp neq i32 %1, i32 45;
    ubr ^b5;
^b5:
    i1 %8 = phi [^b3, i1 false] [^b4, i1 %7];
    cbr i1 %8(prob = 0.5), ^b6, ^b7;
^b6:
    i1 %9 = scmp neq i32 %1, i32 91;
    ubr ^b7;
^b7:
    i1 %10 = phi [^b5, i1 false] [^b6, i1 %9];
    cbr i1 %10(prob = 0.5), ^b8, ^b9;
^b8:
    i1 %11 = scmp neq i32 %1, i32 93;
    ubr ^b9;
^b9:
    i1 %12 = phi [^b7, i1 false] [^b8, i1 %11];
    cbr i1 %12(prob = 0.5), ^b10, ^b11;
^b10:
    i1 %13 = scmp neq i32 %1, i32 46;
    ubr ^b11;
^b11:
    i1 %14 = phi [^b10, i1 %13] [^b9, i1 false];
    cbr i1 %14(prob = 0.5), ^b12, ^b13;
^b12:
    i1 %15 = scmp neq i32 %1, i32 44;
    ubr ^b13;
^b13:
    i1 %16 = phi [^b12, i1 %15] [^b11, i1 false];
    cbr i1 %16(prob = 0.5), ^b14, ^b15;
^b14:
    i1 %17 = scmp neq i32 %1, i32 35;
    ubr ^b15;
^b15:
    i1 %18 = phi [^b13, i1 false] [^b14, i1 %17];
    cbr i1 %18(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i32 %19 = call () -> i32 @getch();
    ubr ^while.header;
^while.header1:
    i32 %20 = phi [^b15, i32 0] [^b35, i32 %118];
    i32 %21 = phi [^b15, i32 %1] [^b35, i32 %37];
    i1 %22 = scmp neq i32 %21, i32 35;
    cbr i1 %22(prob = 0.97), ^while.body1, ^b16;
^while.body1:
    i32* %23 = getelementptr &([65536 * i32]* @program)[i64 0][i32 %20];
    store i32* %23 with i32 %21;
    i32 %24 = call () -> i32 @getch();
    ubr ^while.header2;
^b16:
    i32 %25 = call () -> i32 @getch();
    i1 %26 = scmp neq i32 %25, i32 105;
    cbr i1 %26(prob = 0.5), ^entry1, ^b17;
^entry1:
    call (i32) -> void @starttime(i32 116);
    store i32* %ip with i32 0;
    store i32* %read_hea with i32 0;
    store i32* %input_he with i32 0;
    i32* %27 = getelementptr &([512 * i32]* %return_a)[i64 0][i64 0];
    i8* %28 = ptrcast i32* %27 to i8*;
    i8* %29 = call (i8*, i32, i64) -> i8* @cmmc::Intrinsic::memset(i8* %28, i32 0, i64 2048);
    i32 %30 = load i32* %program_length;
    i32 %31 = load i32* %input_length;
    i32 %32 = load i32* %input_he;
    i32 %33 = load i32* %read_hea;
    i32 %34 = load i32* %ip;
    ubr ^while.header3;
^b17:
    i32 %35 = call () -> i32 @getint();
    store i32* %input_length with i32 %35;
    i32 %36 = call () -> i32 @getch();
    ubr ^while.header4;
^while.header2:
    i32 %37 = phi [^while.body5, i32 %113] [^while.body1, i32 %24];
    i1 %38 = scmp neq i32 %37, i32 62;
    cbr i1 %38(prob = 0.5), ^b18, ^b19;
^b18:
    i1 %39 = scmp neq i32 %37, i32 60;
    ubr ^b19;
^b19:
    i1 %40 = phi [^b18, i1 %39] [^while.header2, i1 false];
    cbr i1 %40(prob = 0.5), ^b20, ^b21;
^while.header3:
    i32 %41 = phi [^b24, i32 %63] [^entry1, i32 0];
    i32 %42 = phi [^b24, i32 %64] [^entry1, i32 0];
    i32 %43 = phi [^b24, i32 %65] [^entry1, i32 %32];
    i32 %44 = phi [^b24, i32 %66] [^entry1, i32 %33];
    i32 %45 = phi [^b24, i32 %68] [^entry1, i32 %34];
    i1 %46 = scmp lt i32 %45, i32 %30;
    cbr i1 %46(prob = 0.97), ^while.body3, ^entry2;
^while.header4:
    i32 %47 = phi [^while.body2, i32 %52] [^b17, i32 0];
    i1 %48 = scmp lt i32 %47, i32 %35;
    cbr i1 %48(prob = 0.97), ^while.body2, ^entry1;
^b20:
    i1 %49 = scmp neq i32 %37, i32 43;
    ubr ^b21;
^while.body2:
    i32* %50 = getelementptr &([65536 * i32]* @input)[i64 0][i32 %47];
    i32 %51 = call () -> i32 @getch();
    store i32* %50 with i32 %51;
    i32 %52 = add i32 %47, i32 1;
    ubr ^while.header4;
^entry2:
    call (i32) -> void @stoptime(i32 118);
    ubr ^while.header5;
^while.body3:
    i32* %53 = getelementptr &([65536 * i32]* @program)[i64 0][i32 %45];
    i32 %54 = load i32* %53;
    i1 %55 = scmp eq i32 %54, i32 62;
    cbr i1 %55(prob = 0.5), ^if.then, ^if.else;
^b21:
    i1 %56 = phi [^b20, i1 %49] [^b19, i1 false];
    cbr i1 %56(prob = 0.5), ^b22, ^b23;
^if.then:
    i32 %57 = add i32 %44, i32 1;
    ubr ^b24;
^b22:
    i1 %58 = scmp neq i32 %37, i32 45;
    ubr ^b23;
^if.else:
    i1 %59 = scmp eq i32 %54, i32 60;
    cbr i1 %59(prob = 0.5), ^if.then1, ^if.else1;
^while.header5:
    i32 %60 = phi [^while.body4, i32 %72] [^entry2, i32 0];
    i1 %61 = scmp lt i32 %60, i32 %41;
    cbr i1 %61(prob = 0.97), ^while.body4, ^entry3;
^b23:
    i1 %62 = phi [^b22, i1 %58] [^b21, i1 false];
    cbr i1 %62(prob = 0.5), ^b25, ^b26;
^b24:
    i32 %63 = phi [^while.header6, i32 %41] [^if.then, i32 %41] [^if.then1, i32 %41] [^if.then3, i32 %41] [^if.else7, i32 %41] [^if.then8, i32 %112] [^if.then2, i32 %41] [^if.then5, i32 %41] [^if.then7, i32 %41] [^if.else6, i32 %41] [^if.then12, i32 %41] [^if.else8, i32 %41];
    i32 %64 = phi [^while.header6, i32 %42] [^if.then, i32 %42] [^if.then1, i32 %42] [^if.then3, i32 %42] [^if.else7, i32 %42] [^if.then8, i32 %42] [^if.then2, i32 %42] [^if.then5, i32 %95] [^if.then7, i32 %105] [^if.else6, i32 %42] [^if.then12, i32 %42] [^if.else8, i32 %42];
    i32 %65 = phi [^while.header6, i32 %43] [^if.then, i32 %43] [^if.then1, i32 %43] [^if.then3, i32 %43] [^if.else7, i32 %43] [^if.then8, i32 %43] [^if.then2, i32 %43] [^if.then5, i32 %43] [^if.then7, i32 %43] [^if.else6, i32 %43] [^if.then12, i32 %43] [^if.else8, i32 %129];
    i32 %66 = phi [^while.header6, i32 %44] [^if.then, i32 %57] [^if.then1, i32 %69] [^if.then3, i32 %44] [^if.else7, i32 %44] [^if.then8, i32 %44] [^if.then2, i32 %44] [^if.then5, i32 %44] [^if.then7, i32 %44] [^if.else6, i32 %44] [^if.then12, i32 %44] [^if.else8, i32 %44];
    i32 %67 = phi [^if.then12, i32 %45] [^if.else8, i32 %45] [^if.then7, i32 %45] [^if.else6, i32 %108] [^if.then8, i32 %45] [^if.then3, i32 %45] [^if.else7, i32 %45] [^if.then2, i32 %45] [^if.then5, i32 %45] [^if.then1, i32 %45] [^if.then, i32 %45] [^while.header6, i32 %101];
    i32 %68 = add i32 %67, i32 1;
    ubr ^while.header3;
^if.then1:
    i32 %69 = add i32 %44, i32 -1;
    ubr ^b24;
^while.body4:
    i32* %70 = getelementptr &([65536 * i32]* @output)[i64 0][i32 %60];
    i32 %71 = load i32* %70;
    call (i32) -> void @putch(i32 %71);
    i32 %72 = add i32 %60, i32 1;
    ubr ^while.header5;
^b25:
    i1 %73 = scmp neq i32 %37, i32 91;
    ubr ^b26;
^if.else1:
    i1 %74 = scmp eq i32 %54, i32 43;
    cbr i1 %74(prob = 0.5), ^if.then2, ^if.else2;
^b26:
    i1 %75 = phi [^b23, i1 false] [^b25, i1 %73];
    cbr i1 %75(prob = 0.5), ^b27, ^b28;
^entry3:
    ret i32 0;
^if.then2:
    i32* %76 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %44];
    i32 %77 = load i32* %76;
    i32 %78 = add i32 %77, i32 1;
    store i32* %76 with i32 %78;
    ubr ^b24;
^b27:
    i1 %79 = scmp neq i32 %37, i32 93;
    ubr ^b28;
^if.else2:
    i1 %80 = scmp eq i32 %54, i32 45;
    cbr i1 %80(prob = 0.5), ^if.then3, ^if.else3;
^b28:
    i1 %81 = phi [^b26, i1 false] [^b27, i1 %79];
    cbr i1 %81(prob = 0.5), ^b29, ^b30;
^if.then3:
    i32* %82 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %44];
    i32 %83 = load i32* %82;
    i32 %84 = add i32 %83, i32 -1;
    store i32* %82 with i32 %84;
    ubr ^b24;
^b29:
    i1 %85 = scmp neq i32 %37, i32 46;
    ubr ^b30;
^if.else3:
    i1 %86 = scmp eq i32 %54, i32 91;
    cbr i1 %86(prob = 0.5), ^if.then4, ^if.else4;
^b30:
    i1 %87 = phi [^b28, i1 false] [^b29, i1 %85];
    cbr i1 %87(prob = 0.5), ^b31, ^b32;
^b31:
    i1 %88 = scmp neq i32 %37, i32 44;
    ubr ^b32;
^if.then4:
    i32* %89 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %44];
    i32 %90 = load i32* %89;
    i1 %91 = scmp neq i32 %90, i32 0;
    cbr i1 %91(prob = 0.5), ^if.then5, ^while.header6;
^if.else4:
    i1 %92 = scmp eq i32 %54, i32 93;
    cbr i1 %92(prob = 0.5), ^if.then6, ^if.else5;
^b32:
    i1 %93 = phi [^b30, i1 false] [^b31, i1 %88];
    cbr i1 %93(prob = 0.5), ^b33, ^b34;
^if.then5:
    i32* %94 = getelementptr &([512 * i32]* %return_a)[i64 0][i32 %42];
    store i32* %94 with i32 %45;
    i32 %95 = add i32 %42, i32 1;
    ubr ^b24;
^b33:
    i1 %96 = scmp neq i32 %37, i32 35;
    ubr ^b34;
^if.then6:
    i32* %97 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %44];
    i32 %98 = load i32* %97;
    i1 %99 = scmp eq i32 %98, i32 0;
    cbr i1 %99(prob = 0.5), ^if.then7, ^if.else6;
^while.header6:
    i32 %100 = phi [^if.then4, i32 1] [^b36, i32 %121] [^if.then11, i32 %124];
    i32 %101 = phi [^if.then4, i32 %45] [^b36, i32 %114] [^if.then11, i32 %114];
    i1 %102 = scmp gt i32 %100, i32 0;
    cbr i1 %102(prob = 0.97), ^while.body6, ^b24;
^if.else5:
    i1 %103 = scmp eq i32 %54, i32 46;
    cbr i1 %103(prob = 0.5), ^if.then8, ^if.else7;
^b34:
    i1 %104 = phi [^b33, i1 %96] [^b32, i1 false];
    cbr i1 %104(prob = 0.97), ^while.body5, ^b35;
^if.then7:
    i32 %105 = add i32 %42, i32 -1;
    ubr ^b24;
^if.else6:
    i32 %106 = add i32 %42, i32 -1;
    i32* %107 = getelementptr &([512 * i32]* %return_a)[i64 0][i32 %106];
    i32 %108 = load i32* %107;
    ubr ^b24;
^if.then8:
    i32* %109 = getelementptr &([65536 * i32]* @output)[i64 0][i32 %41];
    i32* %110 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %44];
    i32 %111 = load i32* %110;
    store i32* %109 with i32 %111;
    i32 %112 = add i32 %41, i32 1;
    ubr ^b24;
^while.body5:
    i32 %113 = call () -> i32 @getch();
    ubr ^while.header2;
^while.body6:
    i32 %114 = add i32 %101, i32 1;
    i32* %115 = getelementptr &([65536 * i32]* @program)[i64 0][i32 %114];
    i32 %116 = load i32* %115;
    i1 %117 = scmp eq i32 %116, i32 93;
    cbr i1 %117(prob = 0.5), ^if.then9, ^b36;
^b35:
    i32 %118 = add i32 %20, i32 1;
    store i32* %program_length with i32 %118;
    ubr ^while.header1;
^if.else7:
    i1 %119 = scmp eq i32 %54, i32 44;
    cbr i1 %119(prob = 0.5), ^if.then10, ^b24;
^if.then9:
    i32 %120 = add i32 %100, i32 -1;
    ubr ^b36;
^b36:
    i32 %121 = phi [^if.then9, i32 %120] [^while.body6, i32 %100];
    i1 %122 = scmp eq i32 %116, i32 91;
    cbr i1 %122(prob = 0.5), ^if.then11, ^while.header6;
^if.then10:
    i1 %123 = scmp ge i32 %43, i32 %31;
    cbr i1 %123(prob = 0.5), ^if.then12, ^if.else8;
^if.then11:
    i32 %124 = add i32 %121, i32 1;
    ubr ^while.header6;
^if.then12:
    i32* %125 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %44];
    store i32* %125 with i32 0;
    ubr ^b24;
^if.else8:
    i32* %126 = getelementptr &([65536 * i32]* @tape)[i64 0][i32 %44];
    i32* %127 = getelementptr &([65536 * i32]* @input)[i64 0][i32 %43];
    i32 %128 = load i32* %127;
    store i32* %126 with i32 %128;
    i32 %129 = add i32 %43, i32 1;
    ubr ^b24;
}
