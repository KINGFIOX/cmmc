internal func @getfarray(f32*) -> i32 { NoMemoryRead };
internal func @putfloat(f32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [1000 * [1000 * f32]]* @a;
func @main() -> i32 { NoRecurse Entry } {
^entry():
    i32* %n = alloc i32;
    i32* %i = alloc i32;
    f32* %sum = alloc f32;
    store f32* %sum with f32 0;
    store i32* %i with i32 0;
    ubr [ ^while.body f32* %sum, i32* %n, i32* %i, i32 0 ];
^while.body(f32* %arg, i32* %arg1, i32* %arg2, i32 %arg3):
    [1000 * f32]* %0 = getelementptr &([1000 * [1000 * f32]]* @a)[i64 0][i32 %arg3];
    f32* %1 = getelementptr &([1000 * f32]* %0)[i64 0][i64 0];
    i32 %2 = call (f32*) -> i32 @getfarray(f32* %1);
    f32 %3 = load f32* %arg;
    i32 %4 = load i32* %arg2;
    store i32* %arg1 with i32 %2;
    i1 %5 = scmp neq i32 %2, i32 1000;
    cbr i1 %5(prob = 0.5), [ ^indirect i32 %2 ], [ ^b i32* %arg1, f32* %arg, i32* %arg2, i32 %4, f32 %3 ];
^b(i32* %arg, f32* %arg1, i32* %arg2, i32 %arg3, f32 %arg4):
    i32 %0 = add i32 %arg3, i32 1;
    store i32* %arg2 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 1000;
    cbr i1 %1(prob = 0.97), [ ^while.body f32* %arg1, i32* %arg, i32* %arg2, i32 %0 ], [ ^b1 f32 %arg4 ];
^indirect(i32 %arg):
    ret i32 %arg;
^b1(f32 %arg):
    call (i32) -> void @starttime(i32 42);
    ubr [ ^while.body1 i32 0, f32 %arg ];
^while.body1(i32 %arg, f32 %arg1):
    [1000 * f32]* %mean = alloc [1000 * f32];
    ubr [ ^while.body2 [1000 * f32]* %mean, i32 0, i32 %arg, f32 %arg1 ];
^while.body2([1000 * f32]* %arg, i32 %arg1, i32 %arg2, f32 %arg3):
    f32* %0 = getelementptr &([1000 * f32]* %arg)[i64 0][i32 %arg1];
    store f32* %0 with f32 0;
    ubr [ ^while.body3 [1000 * f32]* %arg, i32 %arg1, i32 0, i32 %arg2, f32 %arg3 ];
^while.body3([1000 * f32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, f32 %arg4):
    f32* %0 = getelementptr &([1000 * f32]* %arg)[i64 0][i32 %arg1];
    f32 %1 = load f32* %0;
    [1000 * f32]* %2 = getelementptr &([1000 * [1000 * f32]]* @a)[i64 0][i32 %arg1];
    f32* %3 = getelementptr &([1000 * f32]* %2)[i64 0][i32 %arg2];
    f32 %4 = load f32* %3;
    f32 %5 = fadd f32 %1, f32 %4;
    f32* %6 = getelementptr &(f32* %3)[i64 1];
    f32 %7 = load f32* %6;
    f32 %8 = fadd f32 %5, f32 %7;
    f32* %9 = getelementptr &(f32* %3)[i64 2];
    f32 %10 = load f32* %9;
    f32 %11 = fadd f32 %8, f32 %10;
    f32* %12 = getelementptr &(f32* %3)[i64 3];
    f32 %13 = load f32* %12;
    f32 %14 = fadd f32 %11, f32 %13;
    f32* %15 = getelementptr &(f32* %3)[i64 4];
    f32 %16 = load f32* %15;
    f32 %17 = fadd f32 %14, f32 %16;
    f32* %18 = getelementptr &(f32* %3)[i64 5];
    f32 %19 = load f32* %18;
    f32 %20 = fadd f32 %17, f32 %19;
    f32* %21 = getelementptr &(f32* %3)[i64 6];
    f32 %22 = load f32* %21;
    f32 %23 = fadd f32 %20, f32 %22;
    f32* %24 = getelementptr &(f32* %3)[i64 7];
    f32 %25 = load f32* %24;
    f32 %26 = fadd f32 %23, f32 %25;
    f32* %27 = getelementptr &(f32* %3)[i64 8];
    f32 %28 = load f32* %27;
    f32 %29 = fadd f32 %26, f32 %28;
    f32* %30 = getelementptr &(f32* %3)[i64 9];
    f32 %31 = load f32* %30;
    f32 %32 = fadd f32 %29, f32 %31;
    f32* %33 = getelementptr &(f32* %3)[i64 10];
    f32 %34 = load f32* %33;
    f32 %35 = fadd f32 %32, f32 %34;
    f32* %36 = getelementptr &(f32* %3)[i64 11];
    f32 %37 = load f32* %36;
    f32 %38 = fadd f32 %35, f32 %37;
    f32* %39 = getelementptr &(f32* %3)[i64 12];
    f32 %40 = load f32* %39;
    f32 %41 = fadd f32 %38, f32 %40;
    f32* %42 = getelementptr &(f32* %3)[i64 13];
    f32 %43 = load f32* %42;
    f32 %44 = fadd f32 %41, f32 %43;
    f32* %45 = getelementptr &(f32* %3)[i64 14];
    f32 %46 = load f32* %45;
    f32 %47 = fadd f32 %44, f32 %46;
    f32* %48 = getelementptr &(f32* %3)[i64 15];
    f32 %49 = load f32* %48;
    f32 %50 = fadd f32 %47, f32 %49;
    store f32* %0 with f32 %50;
    i32 %51 = add i32 %arg2, i32 16;
    i1 %52 = scmp lt i32 %51, i32 960;
    cbr i1 %52(prob = 0.98), [ ^while.body3 [1000 * f32]* %arg, i32 %arg1, i32 %51, i32 %arg3, f32 %arg4 ], [ ^while.body4 [1000 * f32]* %arg, i32 %arg1, i32 %arg3, f32 %arg4 ];
^while.body4([1000 * f32]* %arg, i32 %arg1, i32 %arg2, f32 %arg3):
    f32* %0 = getelementptr &([1000 * f32]* %arg)[i64 0][i32 %arg1];
    f32 %1 = load f32* %0;
    [1000 * f32]* %2 = getelementptr &([1000 * [1000 * f32]]* @a)[i64 0][i32 %arg1];
    f32* %3 = getelementptr &([1000 * f32]* %2)[i64 0][i64 960];
    f32 %4 = load f32* %3;
    f32 %5 = fadd f32 %1, f32 %4;
    f32* %6 = getelementptr &([1000 * f32]* %2)[i64 0][i64 961];
    f32 %7 = load f32* %6;
    f32 %8 = fadd f32 %5, f32 %7;
    f32* %9 = getelementptr &([1000 * f32]* %2)[i64 0][i64 962];
    f32 %10 = load f32* %9;
    f32 %11 = fadd f32 %8, f32 %10;
    f32* %12 = getelementptr &([1000 * f32]* %2)[i64 0][i64 963];
    f32 %13 = load f32* %12;
    f32 %14 = fadd f32 %11, f32 %13;
    f32* %15 = getelementptr &([1000 * f32]* %2)[i64 0][i64 964];
    f32 %16 = load f32* %15;
    f32 %17 = fadd f32 %14, f32 %16;
    f32* %18 = getelementptr &([1000 * f32]* %2)[i64 0][i64 965];
    f32 %19 = load f32* %18;
    f32 %20 = fadd f32 %17, f32 %19;
    f32* %21 = getelementptr &([1000 * f32]* %2)[i64 0][i64 966];
    f32 %22 = load f32* %21;
    f32 %23 = fadd f32 %20, f32 %22;
    f32* %24 = getelementptr &([1000 * f32]* %2)[i64 0][i64 967];
    f32 %25 = load f32* %24;
    f32 %26 = fadd f32 %23, f32 %25;
    f32* %27 = getelementptr &([1000 * f32]* %2)[i64 0][i64 968];
    f32 %28 = load f32* %27;
    f32 %29 = fadd f32 %26, f32 %28;
    f32* %30 = getelementptr &([1000 * f32]* %2)[i64 0][i64 969];
    f32 %31 = load f32* %30;
    f32 %32 = fadd f32 %29, f32 %31;
    f32* %33 = getelementptr &([1000 * f32]* %2)[i64 0][i64 970];
    f32 %34 = load f32* %33;
    f32 %35 = fadd f32 %32, f32 %34;
    f32* %36 = getelementptr &([1000 * f32]* %2)[i64 0][i64 971];
    f32 %37 = load f32* %36;
    f32 %38 = fadd f32 %35, f32 %37;
    f32* %39 = getelementptr &([1000 * f32]* %2)[i64 0][i64 972];
    f32 %40 = load f32* %39;
    f32 %41 = fadd f32 %38, f32 %40;
    f32* %42 = getelementptr &([1000 * f32]* %2)[i64 0][i64 973];
    f32 %43 = load f32* %42;
    f32 %44 = fadd f32 %41, f32 %43;
    f32* %45 = getelementptr &([1000 * f32]* %2)[i64 0][i64 974];
    f32 %46 = load f32* %45;
    f32 %47 = fadd f32 %44, f32 %46;
    f32* %48 = getelementptr &([1000 * f32]* %2)[i64 0][i64 975];
    f32 %49 = load f32* %48;
    f32 %50 = fadd f32 %47, f32 %49;
    f32* %51 = getelementptr &([1000 * f32]* %2)[i64 0][i64 976];
    f32 %52 = load f32* %51;
    f32 %53 = fadd f32 %50, f32 %52;
    f32* %54 = getelementptr &([1000 * f32]* %2)[i64 0][i64 977];
    f32 %55 = load f32* %54;
    f32 %56 = fadd f32 %53, f32 %55;
    f32* %57 = getelementptr &([1000 * f32]* %2)[i64 0][i64 978];
    f32 %58 = load f32* %57;
    f32 %59 = fadd f32 %56, f32 %58;
    f32* %60 = getelementptr &([1000 * f32]* %2)[i64 0][i64 979];
    f32 %61 = load f32* %60;
    f32 %62 = fadd f32 %59, f32 %61;
    f32* %63 = getelementptr &([1000 * f32]* %2)[i64 0][i64 980];
    f32 %64 = load f32* %63;
    f32 %65 = fadd f32 %62, f32 %64;
    f32* %66 = getelementptr &([1000 * f32]* %2)[i64 0][i64 981];
    f32 %67 = load f32* %66;
    f32 %68 = fadd f32 %65, f32 %67;
    f32* %69 = getelementptr &([1000 * f32]* %2)[i64 0][i64 982];
    f32 %70 = load f32* %69;
    f32 %71 = fadd f32 %68, f32 %70;
    f32* %72 = getelementptr &([1000 * f32]* %2)[i64 0][i64 983];
    f32 %73 = load f32* %72;
    f32 %74 = fadd f32 %71, f32 %73;
    f32* %75 = getelementptr &([1000 * f32]* %2)[i64 0][i64 984];
    f32 %76 = load f32* %75;
    f32 %77 = fadd f32 %74, f32 %76;
    f32* %78 = getelementptr &([1000 * f32]* %2)[i64 0][i64 985];
    f32 %79 = load f32* %78;
    f32 %80 = fadd f32 %77, f32 %79;
    f32* %81 = getelementptr &([1000 * f32]* %2)[i64 0][i64 986];
    f32 %82 = load f32* %81;
    f32 %83 = fadd f32 %80, f32 %82;
    f32* %84 = getelementptr &([1000 * f32]* %2)[i64 0][i64 987];
    f32 %85 = load f32* %84;
    f32 %86 = fadd f32 %83, f32 %85;
    f32* %87 = getelementptr &([1000 * f32]* %2)[i64 0][i64 988];
    f32 %88 = load f32* %87;
    f32 %89 = fadd f32 %86, f32 %88;
    f32* %90 = getelementptr &([1000 * f32]* %2)[i64 0][i64 989];
    f32 %91 = load f32* %90;
    f32 %92 = fadd f32 %89, f32 %91;
    f32* %93 = getelementptr &([1000 * f32]* %2)[i64 0][i64 990];
    f32 %94 = load f32* %93;
    f32 %95 = fadd f32 %92, f32 %94;
    f32* %96 = getelementptr &([1000 * f32]* %2)[i64 0][i64 991];
    f32 %97 = load f32* %96;
    f32 %98 = fadd f32 %95, f32 %97;
    f32* %99 = getelementptr &([1000 * f32]* %2)[i64 0][i64 992];
    f32 %100 = load f32* %99;
    f32 %101 = fadd f32 %98, f32 %100;
    f32* %102 = getelementptr &([1000 * f32]* %2)[i64 0][i64 993];
    f32 %103 = load f32* %102;
    f32 %104 = fadd f32 %101, f32 %103;
    f32* %105 = getelementptr &([1000 * f32]* %2)[i64 0][i64 994];
    f32 %106 = load f32* %105;
    f32 %107 = fadd f32 %104, f32 %106;
    f32* %108 = getelementptr &([1000 * f32]* %2)[i64 0][i64 995];
    f32 %109 = load f32* %108;
    f32 %110 = fadd f32 %107, f32 %109;
    f32* %111 = getelementptr &([1000 * f32]* %2)[i64 0][i64 996];
    f32 %112 = load f32* %111;
    f32 %113 = fadd f32 %110, f32 %112;
    f32* %114 = getelementptr &([1000 * f32]* %2)[i64 0][i64 997];
    f32 %115 = load f32* %114;
    f32 %116 = fadd f32 %113, f32 %115;
    f32* %117 = getelementptr &([1000 * f32]* %2)[i64 0][i64 998];
    f32 %118 = load f32* %117;
    f32 %119 = fadd f32 %116, f32 %118;
    f32* %120 = getelementptr &([1000 * f32]* %2)[i64 0][i64 999];
    f32 %121 = load f32* %120;
    f32 %122 = fadd f32 %119, f32 %121;
    f32 %123 = fdiv f32 %122, f32 1000;
    store f32* %0 with f32 %123;
    i32 %124 = add i32 %arg1, i32 1;
    i1 %125 = scmp lt i32 %124, i32 1000;
    cbr i1 %125(prob = 0.97), [ ^while.body2 [1000 * f32]* %arg, i32 %124, i32 %arg2, f32 %arg3 ], [ ^b2 [1000 * f32]* %arg, i32 %arg2, f32 %arg3 ];
^b2([1000 * f32]* %arg, i32 %arg1, f32 %arg2):
    [1000 * f32]* %var = alloc [1000 * f32];
    ubr [ ^while.body5 [1000 * f32]* %arg, [1000 * f32]* %var, i32 0, i32 %arg1, f32 %arg2 ];
^while.body5([1000 * f32]* %arg, [1000 * f32]* %arg1, i32 %arg2, i32 %arg3, f32 %arg4):
    f32* %0 = getelementptr &([1000 * f32]* %arg1)[i64 0][i32 %arg2];
    store f32* %0 with f32 0;
    ubr [ ^while.body6 [1000 * f32]* %arg, [1000 * f32]* %arg1, i32 %arg2, i32 0, i32 %arg3, f32 %arg4 ];
^while.body6([1000 * f32]* %arg, [1000 * f32]* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, f32 %arg5):
    f32* %0 = getelementptr &([1000 * f32]* %arg1)[i64 0][i32 %arg2];
    f32 %1 = load f32* %0;
    [1000 * f32]* %2 = getelementptr &([1000 * [1000 * f32]]* @a)[i64 0][i32 %arg2];
    f32* %3 = getelementptr &([1000 * f32]* %2)[i64 0][i32 %arg3];
    f32 %4 = load f32* %3;
    f32* %5 = getelementptr &([1000 * f32]* %arg)[i64 0][i32 %arg2];
    f32 %6 = load f32* %5;
    f32 %7 = fsub f32 %4, f32 %6;
    f32 %8 = ffma f32 %7, f32 %7, f32 %1;
    f32* %9 = getelementptr &(f32* %3)[i64 1];
    f32 %10 = load f32* %9;
    f32 %11 = fsub f32 %10, f32 %6;
    f32 %12 = ffma f32 %11, f32 %11, f32 %8;
    f32* %13 = getelementptr &(f32* %3)[i64 2];
    f32 %14 = load f32* %13;
    f32 %15 = fsub f32 %14, f32 %6;
    f32 %16 = ffma f32 %15, f32 %15, f32 %12;
    f32* %17 = getelementptr &(f32* %3)[i64 3];
    f32 %18 = load f32* %17;
    f32 %19 = fsub f32 %18, f32 %6;
    f32 %20 = ffma f32 %19, f32 %19, f32 %16;
    f32* %21 = getelementptr &(f32* %3)[i64 4];
    f32 %22 = load f32* %21;
    f32 %23 = fsub f32 %22, f32 %6;
    f32 %24 = ffma f32 %23, f32 %23, f32 %20;
    f32* %25 = getelementptr &(f32* %3)[i64 5];
    f32 %26 = load f32* %25;
    f32 %27 = fsub f32 %26, f32 %6;
    f32 %28 = ffma f32 %27, f32 %27, f32 %24;
    f32* %29 = getelementptr &(f32* %3)[i64 6];
    f32 %30 = load f32* %29;
    f32 %31 = fsub f32 %30, f32 %6;
    f32 %32 = ffma f32 %31, f32 %31, f32 %28;
    f32* %33 = getelementptr &(f32* %3)[i64 7];
    f32 %34 = load f32* %33;
    f32 %35 = fsub f32 %34, f32 %6;
    f32 %36 = ffma f32 %35, f32 %35, f32 %32;
    f32* %37 = getelementptr &(f32* %3)[i64 8];
    f32 %38 = load f32* %37;
    f32 %39 = fsub f32 %38, f32 %6;
    f32 %40 = ffma f32 %39, f32 %39, f32 %36;
    f32* %41 = getelementptr &(f32* %3)[i64 9];
    f32 %42 = load f32* %41;
    f32 %43 = fsub f32 %42, f32 %6;
    f32 %44 = ffma f32 %43, f32 %43, f32 %40;
    f32* %45 = getelementptr &(f32* %3)[i64 10];
    f32 %46 = load f32* %45;
    f32 %47 = fsub f32 %46, f32 %6;
    f32 %48 = ffma f32 %47, f32 %47, f32 %44;
    f32* %49 = getelementptr &(f32* %3)[i64 11];
    f32 %50 = load f32* %49;
    f32 %51 = fsub f32 %50, f32 %6;
    f32 %52 = ffma f32 %51, f32 %51, f32 %48;
    f32* %53 = getelementptr &(f32* %3)[i64 12];
    f32 %54 = load f32* %53;
    f32 %55 = fsub f32 %54, f32 %6;
    f32 %56 = ffma f32 %55, f32 %55, f32 %52;
    f32* %57 = getelementptr &(f32* %3)[i64 13];
    f32 %58 = load f32* %57;
    f32 %59 = fsub f32 %58, f32 %6;
    f32 %60 = ffma f32 %59, f32 %59, f32 %56;
    f32* %61 = getelementptr &(f32* %3)[i64 14];
    f32 %62 = load f32* %61;
    f32 %63 = fsub f32 %62, f32 %6;
    f32 %64 = ffma f32 %63, f32 %63, f32 %60;
    f32* %65 = getelementptr &(f32* %3)[i64 15];
    f32 %66 = load f32* %65;
    f32 %67 = fsub f32 %66, f32 %6;
    f32 %68 = ffma f32 %67, f32 %67, f32 %64;
    store f32* %0 with f32 %68;
    i32 %69 = add i32 %arg3, i32 16;
    i1 %70 = scmp lt i32 %69, i32 960;
    cbr i1 %70(prob = 0.98), [ ^while.body6 [1000 * f32]* %arg, [1000 * f32]* %arg1, i32 %arg2, i32 %69, i32 %arg4, f32 %arg5 ], [ ^while.body7 [1000 * f32]* %arg, [1000 * f32]* %arg1, i32 %arg2, i32 %arg4, f32 %arg5 ];
^while.body7([1000 * f32]* %arg, [1000 * f32]* %arg1, i32 %arg2, i32 %arg3, f32 %arg4):
    f32* %0 = getelementptr &([1000 * f32]* %arg1)[i64 0][i32 %arg2];
    f32 %1 = load f32* %0;
    [1000 * f32]* %2 = getelementptr &([1000 * [1000 * f32]]* @a)[i64 0][i32 %arg2];
    f32* %3 = getelementptr &([1000 * f32]* %2)[i64 0][i64 960];
    f32 %4 = load f32* %3;
    f32* %5 = getelementptr &([1000 * f32]* %arg)[i64 0][i32 %arg2];
    f32 %6 = load f32* %5;
    f32 %7 = fsub f32 %4, f32 %6;
    f32 %8 = ffma f32 %7, f32 %7, f32 %1;
    f32* %9 = getelementptr &([1000 * f32]* %2)[i64 0][i64 961];
    f32 %10 = load f32* %9;
    f32 %11 = fsub f32 %10, f32 %6;
    f32 %12 = ffma f32 %11, f32 %11, f32 %8;
    f32* %13 = getelementptr &([1000 * f32]* %2)[i64 0][i64 962];
    f32 %14 = load f32* %13;
    f32 %15 = fsub f32 %14, f32 %6;
    f32 %16 = ffma f32 %15, f32 %15, f32 %12;
    f32* %17 = getelementptr &([1000 * f32]* %2)[i64 0][i64 963];
    f32 %18 = load f32* %17;
    f32 %19 = fsub f32 %18, f32 %6;
    f32 %20 = ffma f32 %19, f32 %19, f32 %16;
    f32* %21 = getelementptr &([1000 * f32]* %2)[i64 0][i64 964];
    f32 %22 = load f32* %21;
    f32 %23 = fsub f32 %22, f32 %6;
    f32 %24 = ffma f32 %23, f32 %23, f32 %20;
    f32* %25 = getelementptr &([1000 * f32]* %2)[i64 0][i64 965];
    f32 %26 = load f32* %25;
    f32 %27 = fsub f32 %26, f32 %6;
    f32 %28 = ffma f32 %27, f32 %27, f32 %24;
    f32* %29 = getelementptr &([1000 * f32]* %2)[i64 0][i64 966];
    f32 %30 = load f32* %29;
    f32 %31 = fsub f32 %30, f32 %6;
    f32 %32 = ffma f32 %31, f32 %31, f32 %28;
    f32* %33 = getelementptr &([1000 * f32]* %2)[i64 0][i64 967];
    f32 %34 = load f32* %33;
    f32 %35 = fsub f32 %34, f32 %6;
    f32 %36 = ffma f32 %35, f32 %35, f32 %32;
    f32* %37 = getelementptr &([1000 * f32]* %2)[i64 0][i64 968];
    f32 %38 = load f32* %37;
    f32 %39 = fsub f32 %38, f32 %6;
    f32 %40 = ffma f32 %39, f32 %39, f32 %36;
    f32* %41 = getelementptr &([1000 * f32]* %2)[i64 0][i64 969];
    f32 %42 = load f32* %41;
    f32 %43 = fsub f32 %42, f32 %6;
    f32 %44 = ffma f32 %43, f32 %43, f32 %40;
    f32* %45 = getelementptr &([1000 * f32]* %2)[i64 0][i64 970];
    f32 %46 = load f32* %45;
    f32 %47 = fsub f32 %46, f32 %6;
    f32 %48 = ffma f32 %47, f32 %47, f32 %44;
    f32* %49 = getelementptr &([1000 * f32]* %2)[i64 0][i64 971];
    f32 %50 = load f32* %49;
    f32 %51 = fsub f32 %50, f32 %6;
    f32 %52 = ffma f32 %51, f32 %51, f32 %48;
    f32* %53 = getelementptr &([1000 * f32]* %2)[i64 0][i64 972];
    f32 %54 = load f32* %53;
    f32 %55 = fsub f32 %54, f32 %6;
    f32 %56 = ffma f32 %55, f32 %55, f32 %52;
    f32* %57 = getelementptr &([1000 * f32]* %2)[i64 0][i64 973];
    f32 %58 = load f32* %57;
    f32 %59 = fsub f32 %58, f32 %6;
    f32 %60 = ffma f32 %59, f32 %59, f32 %56;
    f32* %61 = getelementptr &([1000 * f32]* %2)[i64 0][i64 974];
    f32 %62 = load f32* %61;
    f32 %63 = fsub f32 %62, f32 %6;
    f32 %64 = ffma f32 %63, f32 %63, f32 %60;
    f32* %65 = getelementptr &([1000 * f32]* %2)[i64 0][i64 975];
    f32 %66 = load f32* %65;
    f32 %67 = fsub f32 %66, f32 %6;
    f32 %68 = ffma f32 %67, f32 %67, f32 %64;
    f32* %69 = getelementptr &([1000 * f32]* %2)[i64 0][i64 976];
    f32 %70 = load f32* %69;
    f32 %71 = fsub f32 %70, f32 %6;
    f32 %72 = ffma f32 %71, f32 %71, f32 %68;
    f32* %73 = getelementptr &([1000 * f32]* %2)[i64 0][i64 977];
    f32 %74 = load f32* %73;
    f32 %75 = fsub f32 %74, f32 %6;
    f32 %76 = ffma f32 %75, f32 %75, f32 %72;
    f32* %77 = getelementptr &([1000 * f32]* %2)[i64 0][i64 978];
    f32 %78 = load f32* %77;
    f32 %79 = fsub f32 %78, f32 %6;
    f32 %80 = ffma f32 %79, f32 %79, f32 %76;
    f32* %81 = getelementptr &([1000 * f32]* %2)[i64 0][i64 979];
    f32 %82 = load f32* %81;
    f32 %83 = fsub f32 %82, f32 %6;
    f32 %84 = ffma f32 %83, f32 %83, f32 %80;
    f32* %85 = getelementptr &([1000 * f32]* %2)[i64 0][i64 980];
    f32 %86 = load f32* %85;
    f32 %87 = fsub f32 %86, f32 %6;
    f32 %88 = ffma f32 %87, f32 %87, f32 %84;
    f32* %89 = getelementptr &([1000 * f32]* %2)[i64 0][i64 981];
    f32 %90 = load f32* %89;
    f32 %91 = fsub f32 %90, f32 %6;
    f32 %92 = ffma f32 %91, f32 %91, f32 %88;
    f32* %93 = getelementptr &([1000 * f32]* %2)[i64 0][i64 982];
    f32 %94 = load f32* %93;
    f32 %95 = fsub f32 %94, f32 %6;
    f32 %96 = ffma f32 %95, f32 %95, f32 %92;
    f32* %97 = getelementptr &([1000 * f32]* %2)[i64 0][i64 983];
    f32 %98 = load f32* %97;
    f32 %99 = fsub f32 %98, f32 %6;
    f32 %100 = ffma f32 %99, f32 %99, f32 %96;
    f32* %101 = getelementptr &([1000 * f32]* %2)[i64 0][i64 984];
    f32 %102 = load f32* %101;
    f32 %103 = fsub f32 %102, f32 %6;
    f32 %104 = ffma f32 %103, f32 %103, f32 %100;
    f32* %105 = getelementptr &([1000 * f32]* %2)[i64 0][i64 985];
    f32 %106 = load f32* %105;
    f32 %107 = fsub f32 %106, f32 %6;
    f32 %108 = ffma f32 %107, f32 %107, f32 %104;
    f32* %109 = getelementptr &([1000 * f32]* %2)[i64 0][i64 986];
    f32 %110 = load f32* %109;
    f32 %111 = fsub f32 %110, f32 %6;
    f32 %112 = ffma f32 %111, f32 %111, f32 %108;
    f32* %113 = getelementptr &([1000 * f32]* %2)[i64 0][i64 987];
    f32 %114 = load f32* %113;
    f32 %115 = fsub f32 %114, f32 %6;
    f32 %116 = ffma f32 %115, f32 %115, f32 %112;
    f32* %117 = getelementptr &([1000 * f32]* %2)[i64 0][i64 988];
    f32 %118 = load f32* %117;
    f32 %119 = fsub f32 %118, f32 %6;
    f32 %120 = ffma f32 %119, f32 %119, f32 %116;
    f32* %121 = getelementptr &([1000 * f32]* %2)[i64 0][i64 989];
    f32 %122 = load f32* %121;
    f32 %123 = fsub f32 %122, f32 %6;
    f32 %124 = ffma f32 %123, f32 %123, f32 %120;
    f32* %125 = getelementptr &([1000 * f32]* %2)[i64 0][i64 990];
    f32 %126 = load f32* %125;
    f32 %127 = fsub f32 %126, f32 %6;
    f32 %128 = ffma f32 %127, f32 %127, f32 %124;
    f32* %129 = getelementptr &([1000 * f32]* %2)[i64 0][i64 991];
    f32 %130 = load f32* %129;
    f32 %131 = fsub f32 %130, f32 %6;
    f32 %132 = ffma f32 %131, f32 %131, f32 %128;
    f32* %133 = getelementptr &([1000 * f32]* %2)[i64 0][i64 992];
    f32 %134 = load f32* %133;
    f32 %135 = fsub f32 %134, f32 %6;
    f32 %136 = ffma f32 %135, f32 %135, f32 %132;
    f32* %137 = getelementptr &([1000 * f32]* %2)[i64 0][i64 993];
    f32 %138 = load f32* %137;
    f32 %139 = fsub f32 %138, f32 %6;
    f32 %140 = ffma f32 %139, f32 %139, f32 %136;
    f32* %141 = getelementptr &([1000 * f32]* %2)[i64 0][i64 994];
    f32 %142 = load f32* %141;
    f32 %143 = fsub f32 %142, f32 %6;
    f32 %144 = ffma f32 %143, f32 %143, f32 %140;
    f32* %145 = getelementptr &([1000 * f32]* %2)[i64 0][i64 995];
    f32 %146 = load f32* %145;
    f32 %147 = fsub f32 %146, f32 %6;
    f32 %148 = ffma f32 %147, f32 %147, f32 %144;
    f32* %149 = getelementptr &([1000 * f32]* %2)[i64 0][i64 996];
    f32 %150 = load f32* %149;
    f32 %151 = fsub f32 %150, f32 %6;
    f32 %152 = ffma f32 %151, f32 %151, f32 %148;
    f32* %153 = getelementptr &([1000 * f32]* %2)[i64 0][i64 997];
    f32 %154 = load f32* %153;
    f32 %155 = fsub f32 %154, f32 %6;
    f32 %156 = ffma f32 %155, f32 %155, f32 %152;
    f32* %157 = getelementptr &([1000 * f32]* %2)[i64 0][i64 998];
    f32 %158 = load f32* %157;
    f32 %159 = fsub f32 %158, f32 %6;
    f32 %160 = ffma f32 %159, f32 %159, f32 %156;
    f32* %161 = getelementptr &([1000 * f32]* %2)[i64 0][i64 999];
    f32 %162 = load f32* %161;
    f32 %163 = fsub f32 %162, f32 %6;
    f32 %164 = ffma f32 %163, f32 %163, f32 %160;
    f32 %165 = fdiv f32 %164, f32 1000;
    f32 %166 = fadd f32 %165, f32 0.01;
    f32 %167 = fdiv f32 %166, f32 2;
    f32 %168 = fmul f32 %167, f32 %167;
    f32 %169 = fsub f32 %168, f32 %166;
    i1 %170 = fcmp lt f32 %169, f32 0;
    cbr i1 %170(prob = 0.5), [ ^indirect1 f32 %169, [1000 * f32]* %arg, [1000 * f32]* %arg1, i32 %arg2, f32* %0, i32 %arg3, f32 %arg4, f32 %166, f32 0, f32 %166, f32 %167 ], [ ^while.header f32 %169, [1000 * f32]* %arg, [1000 * f32]* %arg1, i32 %arg2, f32* %0, i32 %arg3, f32 %arg4, f32 %166, f32 0, f32 %166, f32 %167 ];
^indirect1(f32 %arg, [1000 * f32]* %arg1, [1000 * f32]* %arg2, i32 %arg3, f32* %arg4, i32 %arg5, f32 %arg6, f32 %arg7, f32 %arg8, f32 %arg9, f32 %arg10):
    f32 %0 = fneg f32 %arg;
    i1 %1 = fcmp gt f32 %0, f32 0.001;
    cbr i1 %1(prob = 0.97), [ ^while.body8 f32* %arg4, i32 %arg3, [1000 * f32]* %arg2, [1000 * f32]* %arg1, i32 %arg5, f32 %arg6, f32 %arg7, f32 %arg8, f32 %arg9, f32 %arg10 ], [ ^b3 f32* %arg4, i32 %arg3, [1000 * f32]* %arg2, [1000 * f32]* %arg1, i32 %arg5, f32 %arg6, f32 %arg10 ];
^while.header(f32 %arg, [1000 * f32]* %arg1, [1000 * f32]* %arg2, i32 %arg3, f32* %arg4, i32 %arg5, f32 %arg6, f32 %arg7, f32 %arg8, f32 %arg9, f32 %arg10):
    i1 %0 = fcmp gt f32 %arg, f32 0.001;
    cbr i1 %0(prob = 0.97), [ ^while.body8 f32* %arg4, i32 %arg3, [1000 * f32]* %arg2, [1000 * f32]* %arg1, i32 %arg5, f32 %arg6, f32 %arg7, f32 %arg8, f32 %arg9, f32 %arg10 ], [ ^b3 f32* %arg4, i32 %arg3, [1000 * f32]* %arg2, [1000 * f32]* %arg1, i32 %arg5, f32 %arg6, f32 %arg10 ];
^while.body8(f32* %arg, i32 %arg1, [1000 * f32]* %arg2, [1000 * f32]* %arg3, i32 %arg4, f32 %arg5, f32 %arg6, f32 %arg7, f32 %arg8, f32 %arg9):
    f32 %0 = fmul f32 %arg9, f32 %arg9;
    i1 %1 = fcmp gt f32 %0, f32 %arg6;
    cbr i1 %1(prob = 0.5), [ ^indirect2 f32 %arg9, [1000 * f32]* %arg3, [1000 * f32]* %arg2, i32 %arg1, f32* %arg, i32 %arg4, f32 %arg5, f32 %arg6, f32 %arg7 ], [ ^indirect3 f32 %arg9, [1000 * f32]* %arg3, [1000 * f32]* %arg2, i32 %arg1, f32* %arg, i32 %arg4, f32 %arg5, f32 %arg6, f32 %arg8 ];
^b3(f32* %arg, i32 %arg1, [1000 * f32]* %arg2, [1000 * f32]* %arg3, i32 %arg4, f32 %arg5, f32 %arg6):
    store f32* %arg with f32 %arg6;
    i32 %0 = add i32 %arg1, i32 1;
    i1 %1 = scmp lt i32 %0, i32 1000;
    cbr i1 %1(prob = 0.97), [ ^while.body5 [1000 * f32]* %arg3, [1000 * f32]* %arg2, i32 %0, i32 %arg4, f32 %arg5 ], [ ^while.body9 [1000 * f32]* %arg2, [1000 * f32]* %arg3, i32 0, i32 0, i32 %arg4, f32 %arg5 ];
^indirect2(f32 %arg, [1000 * f32]* %arg1, [1000 * f32]* %arg2, i32 %arg3, f32* %arg4, i32 %arg5, f32 %arg6, f32 %arg7, f32 %arg8):
    f32 %0 = fadd f32 %arg, f32 %arg8;
    f32 %1 = fdiv f32 %0, f32 2;
    ubr [ ^while.header1 f32 %arg7, f32 %1, [1000 * f32]* %arg1, [1000 * f32]* %arg2, i32 %arg3, f32* %arg4, i32 %arg5, f32 %arg6, f32 %arg7, f32 %arg8, f32 %arg, f32 %1 ];
^indirect3(f32 %arg, [1000 * f32]* %arg1, [1000 * f32]* %arg2, i32 %arg3, f32* %arg4, i32 %arg5, f32 %arg6, f32 %arg7, f32 %arg8):
    f32 %0 = fadd f32 %arg, f32 %arg8;
    f32 %1 = fdiv f32 %0, f32 2;
    ubr [ ^while.header1 f32 %arg7, f32 %1, [1000 * f32]* %arg1, [1000 * f32]* %arg2, i32 %arg3, f32* %arg4, i32 %arg5, f32 %arg6, f32 %arg7, f32 %arg, f32 %arg8, f32 %1 ];
^while.body9([1000 * f32]* %arg, [1000 * f32]* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, f32 %arg5):
    [1000 * f32]* %0 = getelementptr &([1000 * [1000 * f32]]* @a)[i64 0][i32 %arg2];
    f32* %1 = getelementptr &([1000 * f32]* %0)[i64 0][i32 %arg3];
    f32 %2 = load f32* %1;
    f32* %3 = getelementptr &([1000 * f32]* %arg1)[i64 0][i32 %arg2];
    f32 %4 = load f32* %3;
    f32 %5 = fsub f32 %2, f32 %4;
    f32* %6 = getelementptr &([1000 * f32]* %arg)[i64 0][i32 %arg2];
    f32 %7 = load f32* %6;
    f32 %8 = fdiv f32 %5, f32 %7;
    store f32* %1 with f32 %8;
    f32 %9 = fadd f32 %arg5, f32 %8;
    f32* %10 = getelementptr &(f32* %1)[i64 1];
    f32 %11 = load f32* %10;
    f32 %12 = fsub f32 %11, f32 %4;
    f32 %13 = fdiv f32 %12, f32 %7;
    store f32* %10 with f32 %13;
    f32 %14 = fadd f32 %9, f32 %13;
    f32* %15 = getelementptr &(f32* %1)[i64 2];
    f32 %16 = load f32* %15;
    f32 %17 = fsub f32 %16, f32 %4;
    f32 %18 = fdiv f32 %17, f32 %7;
    store f32* %15 with f32 %18;
    f32 %19 = fadd f32 %14, f32 %18;
    f32* %20 = getelementptr &(f32* %1)[i64 3];
    f32 %21 = load f32* %20;
    f32 %22 = fsub f32 %21, f32 %4;
    f32 %23 = fdiv f32 %22, f32 %7;
    store f32* %20 with f32 %23;
    f32 %24 = fadd f32 %19, f32 %23;
    f32* %25 = getelementptr &(f32* %1)[i64 4];
    f32 %26 = load f32* %25;
    f32 %27 = fsub f32 %26, f32 %4;
    f32 %28 = fdiv f32 %27, f32 %7;
    store f32* %25 with f32 %28;
    f32 %29 = fadd f32 %24, f32 %28;
    f32* %30 = getelementptr &(f32* %1)[i64 5];
    f32 %31 = load f32* %30;
    f32 %32 = fsub f32 %31, f32 %4;
    f32 %33 = fdiv f32 %32, f32 %7;
    store f32* %30 with f32 %33;
    f32 %34 = fadd f32 %29, f32 %33;
    f32* %35 = getelementptr &(f32* %1)[i64 6];
    f32 %36 = load f32* %35;
    f32 %37 = fsub f32 %36, f32 %4;
    f32 %38 = fdiv f32 %37, f32 %7;
    store f32* %35 with f32 %38;
    f32 %39 = fadd f32 %34, f32 %38;
    f32* %40 = getelementptr &(f32* %1)[i64 7];
    f32 %41 = load f32* %40;
    f32 %42 = fsub f32 %41, f32 %4;
    f32 %43 = fdiv f32 %42, f32 %7;
    store f32* %40 with f32 %43;
    f32 %44 = fadd f32 %39, f32 %43;
    f32* %45 = getelementptr &(f32* %1)[i64 8];
    f32 %46 = load f32* %45;
    f32 %47 = fsub f32 %46, f32 %4;
    f32 %48 = fdiv f32 %47, f32 %7;
    store f32* %45 with f32 %48;
    f32 %49 = fadd f32 %44, f32 %48;
    f32* %50 = getelementptr &(f32* %1)[i64 9];
    f32 %51 = load f32* %50;
    f32 %52 = fsub f32 %51, f32 %4;
    f32 %53 = fdiv f32 %52, f32 %7;
    store f32* %50 with f32 %53;
    f32 %54 = fadd f32 %49, f32 %53;
    f32* %55 = getelementptr &(f32* %1)[i64 10];
    f32 %56 = load f32* %55;
    f32 %57 = fsub f32 %56, f32 %4;
    f32 %58 = fdiv f32 %57, f32 %7;
    store f32* %55 with f32 %58;
    f32 %59 = fadd f32 %54, f32 %58;
    f32* %60 = getelementptr &(f32* %1)[i64 11];
    f32 %61 = load f32* %60;
    f32 %62 = fsub f32 %61, f32 %4;
    f32 %63 = fdiv f32 %62, f32 %7;
    store f32* %60 with f32 %63;
    f32 %64 = fadd f32 %59, f32 %63;
    f32* %65 = getelementptr &(f32* %1)[i64 12];
    f32 %66 = load f32* %65;
    f32 %67 = fsub f32 %66, f32 %4;
    f32 %68 = fdiv f32 %67, f32 %7;
    store f32* %65 with f32 %68;
    f32 %69 = fadd f32 %64, f32 %68;
    f32* %70 = getelementptr &(f32* %1)[i64 13];
    f32 %71 = load f32* %70;
    f32 %72 = fsub f32 %71, f32 %4;
    f32 %73 = fdiv f32 %72, f32 %7;
    store f32* %70 with f32 %73;
    f32 %74 = fadd f32 %69, f32 %73;
    f32* %75 = getelementptr &(f32* %1)[i64 14];
    f32 %76 = load f32* %75;
    f32 %77 = fsub f32 %76, f32 %4;
    f32 %78 = fdiv f32 %77, f32 %7;
    store f32* %75 with f32 %78;
    f32 %79 = fadd f32 %74, f32 %78;
    f32* %80 = getelementptr &(f32* %1)[i64 15];
    f32 %81 = load f32* %80;
    f32 %82 = fsub f32 %81, f32 %4;
    f32 %83 = fdiv f32 %82, f32 %7;
    store f32* %80 with f32 %83;
    f32 %84 = fadd f32 %79, f32 %83;
    i32 %85 = add i32 %arg3, i32 16;
    i1 %86 = scmp lt i32 %85, i32 960;
    cbr i1 %86(prob = 0.98), [ ^while.body9 [1000 * f32]* %arg, [1000 * f32]* %arg1, i32 %arg2, i32 %85, i32 %arg4, f32 %84 ], [ ^while.body10 [1000 * f32]* %arg, [1000 * f32]* %arg1, i32 %arg2, i32 %arg4, f32 %84 ];
^while.header1(f32 %arg, f32 %arg1, [1000 * f32]* %arg2, [1000 * f32]* %arg3, i32 %arg4, f32* %arg5, i32 %arg6, f32 %arg7, f32 %arg8, f32 %arg9, f32 %arg10, f32 %arg11):
    f32 %0 = fmul f32 %arg1, f32 %arg1;
    f32 %1 = fsub f32 %0, f32 %arg;
    i1 %2 = fcmp lt f32 %1, f32 0;
    cbr i1 %2(prob = 0.5), [ ^indirect1 f32 %1, [1000 * f32]* %arg2, [1000 * f32]* %arg3, i32 %arg4, f32* %arg5, i32 %arg6, f32 %arg7, f32 %arg8, f32 %arg9, f32 %arg10, f32 %arg11 ], [ ^while.header f32 %1, [1000 * f32]* %arg2, [1000 * f32]* %arg3, i32 %arg4, f32* %arg5, i32 %arg6, f32 %arg7, f32 %arg8, f32 %arg9, f32 %arg10, f32 %arg11 ];
^while.body10([1000 * f32]* %arg, [1000 * f32]* %arg1, i32 %arg2, i32 %arg3, f32 %arg4):
    [1000 * f32]* %0 = getelementptr &([1000 * [1000 * f32]]* @a)[i64 0][i32 %arg2];
    f32* %1 = getelementptr &([1000 * f32]* %0)[i64 0][i64 960];
    f32 %2 = load f32* %1;
    f32* %3 = getelementptr &([1000 * f32]* %arg1)[i64 0][i32 %arg2];
    f32 %4 = load f32* %3;
    f32 %5 = fsub f32 %2, f32 %4;
    f32* %6 = getelementptr &([1000 * f32]* %arg)[i64 0][i32 %arg2];
    f32 %7 = load f32* %6;
    f32 %8 = fdiv f32 %5, f32 %7;
    store f32* %1 with f32 %8;
    f32 %9 = fadd f32 %arg4, f32 %8;
    f32* %10 = getelementptr &([1000 * f32]* %0)[i64 0][i64 961];
    f32 %11 = load f32* %10;
    f32 %12 = fsub f32 %11, f32 %4;
    f32 %13 = fdiv f32 %12, f32 %7;
    store f32* %10 with f32 %13;
    f32 %14 = fadd f32 %9, f32 %13;
    f32* %15 = getelementptr &([1000 * f32]* %0)[i64 0][i64 962];
    f32 %16 = load f32* %15;
    f32 %17 = fsub f32 %16, f32 %4;
    f32 %18 = fdiv f32 %17, f32 %7;
    store f32* %15 with f32 %18;
    f32 %19 = fadd f32 %14, f32 %18;
    f32* %20 = getelementptr &([1000 * f32]* %0)[i64 0][i64 963];
    f32 %21 = load f32* %20;
    f32 %22 = fsub f32 %21, f32 %4;
    f32 %23 = fdiv f32 %22, f32 %7;
    store f32* %20 with f32 %23;
    f32 %24 = fadd f32 %19, f32 %23;
    f32* %25 = getelementptr &([1000 * f32]* %0)[i64 0][i64 964];
    f32 %26 = load f32* %25;
    f32 %27 = fsub f32 %26, f32 %4;
    f32 %28 = fdiv f32 %27, f32 %7;
    store f32* %25 with f32 %28;
    f32 %29 = fadd f32 %24, f32 %28;
    f32* %30 = getelementptr &([1000 * f32]* %0)[i64 0][i64 965];
    f32 %31 = load f32* %30;
    f32 %32 = fsub f32 %31, f32 %4;
    f32 %33 = fdiv f32 %32, f32 %7;
    store f32* %30 with f32 %33;
    f32 %34 = fadd f32 %29, f32 %33;
    f32* %35 = getelementptr &([1000 * f32]* %0)[i64 0][i64 966];
    f32 %36 = load f32* %35;
    f32 %37 = fsub f32 %36, f32 %4;
    f32 %38 = fdiv f32 %37, f32 %7;
    store f32* %35 with f32 %38;
    f32 %39 = fadd f32 %34, f32 %38;
    f32* %40 = getelementptr &([1000 * f32]* %0)[i64 0][i64 967];
    f32 %41 = load f32* %40;
    f32 %42 = fsub f32 %41, f32 %4;
    f32 %43 = fdiv f32 %42, f32 %7;
    store f32* %40 with f32 %43;
    f32 %44 = fadd f32 %39, f32 %43;
    f32* %45 = getelementptr &([1000 * f32]* %0)[i64 0][i64 968];
    f32 %46 = load f32* %45;
    f32 %47 = fsub f32 %46, f32 %4;
    f32 %48 = fdiv f32 %47, f32 %7;
    store f32* %45 with f32 %48;
    f32 %49 = fadd f32 %44, f32 %48;
    f32* %50 = getelementptr &([1000 * f32]* %0)[i64 0][i64 969];
    f32 %51 = load f32* %50;
    f32 %52 = fsub f32 %51, f32 %4;
    f32 %53 = fdiv f32 %52, f32 %7;
    store f32* %50 with f32 %53;
    f32 %54 = fadd f32 %49, f32 %53;
    f32* %55 = getelementptr &([1000 * f32]* %0)[i64 0][i64 970];
    f32 %56 = load f32* %55;
    f32 %57 = fsub f32 %56, f32 %4;
    f32 %58 = fdiv f32 %57, f32 %7;
    store f32* %55 with f32 %58;
    f32 %59 = fadd f32 %54, f32 %58;
    f32* %60 = getelementptr &([1000 * f32]* %0)[i64 0][i64 971];
    f32 %61 = load f32* %60;
    f32 %62 = fsub f32 %61, f32 %4;
    f32 %63 = fdiv f32 %62, f32 %7;
    store f32* %60 with f32 %63;
    f32 %64 = fadd f32 %59, f32 %63;
    f32* %65 = getelementptr &([1000 * f32]* %0)[i64 0][i64 972];
    f32 %66 = load f32* %65;
    f32 %67 = fsub f32 %66, f32 %4;
    f32 %68 = fdiv f32 %67, f32 %7;
    store f32* %65 with f32 %68;
    f32 %69 = fadd f32 %64, f32 %68;
    f32* %70 = getelementptr &([1000 * f32]* %0)[i64 0][i64 973];
    f32 %71 = load f32* %70;
    f32 %72 = fsub f32 %71, f32 %4;
    f32 %73 = fdiv f32 %72, f32 %7;
    store f32* %70 with f32 %73;
    f32 %74 = fadd f32 %69, f32 %73;
    f32* %75 = getelementptr &([1000 * f32]* %0)[i64 0][i64 974];
    f32 %76 = load f32* %75;
    f32 %77 = fsub f32 %76, f32 %4;
    f32 %78 = fdiv f32 %77, f32 %7;
    store f32* %75 with f32 %78;
    f32 %79 = fadd f32 %74, f32 %78;
    f32* %80 = getelementptr &([1000 * f32]* %0)[i64 0][i64 975];
    f32 %81 = load f32* %80;
    f32 %82 = fsub f32 %81, f32 %4;
    f32 %83 = fdiv f32 %82, f32 %7;
    store f32* %80 with f32 %83;
    f32 %84 = fadd f32 %79, f32 %83;
    f32* %85 = getelementptr &([1000 * f32]* %0)[i64 0][i64 976];
    f32 %86 = load f32* %85;
    f32 %87 = fsub f32 %86, f32 %4;
    f32 %88 = fdiv f32 %87, f32 %7;
    store f32* %85 with f32 %88;
    f32 %89 = fadd f32 %84, f32 %88;
    f32* %90 = getelementptr &([1000 * f32]* %0)[i64 0][i64 977];
    f32 %91 = load f32* %90;
    f32 %92 = fsub f32 %91, f32 %4;
    f32 %93 = fdiv f32 %92, f32 %7;
    store f32* %90 with f32 %93;
    f32 %94 = fadd f32 %89, f32 %93;
    f32* %95 = getelementptr &([1000 * f32]* %0)[i64 0][i64 978];
    f32 %96 = load f32* %95;
    f32 %97 = fsub f32 %96, f32 %4;
    f32 %98 = fdiv f32 %97, f32 %7;
    store f32* %95 with f32 %98;
    f32 %99 = fadd f32 %94, f32 %98;
    f32* %100 = getelementptr &([1000 * f32]* %0)[i64 0][i64 979];
    f32 %101 = load f32* %100;
    f32 %102 = fsub f32 %101, f32 %4;
    f32 %103 = fdiv f32 %102, f32 %7;
    store f32* %100 with f32 %103;
    f32 %104 = fadd f32 %99, f32 %103;
    f32* %105 = getelementptr &([1000 * f32]* %0)[i64 0][i64 980];
    f32 %106 = load f32* %105;
    f32 %107 = fsub f32 %106, f32 %4;
    f32 %108 = fdiv f32 %107, f32 %7;
    store f32* %105 with f32 %108;
    f32 %109 = fadd f32 %104, f32 %108;
    f32* %110 = getelementptr &([1000 * f32]* %0)[i64 0][i64 981];
    f32 %111 = load f32* %110;
    f32 %112 = fsub f32 %111, f32 %4;
    f32 %113 = fdiv f32 %112, f32 %7;
    store f32* %110 with f32 %113;
    f32 %114 = fadd f32 %109, f32 %113;
    f32* %115 = getelementptr &([1000 * f32]* %0)[i64 0][i64 982];
    f32 %116 = load f32* %115;
    f32 %117 = fsub f32 %116, f32 %4;
    f32 %118 = fdiv f32 %117, f32 %7;
    store f32* %115 with f32 %118;
    f32 %119 = fadd f32 %114, f32 %118;
    f32* %120 = getelementptr &([1000 * f32]* %0)[i64 0][i64 983];
    f32 %121 = load f32* %120;
    f32 %122 = fsub f32 %121, f32 %4;
    f32 %123 = fdiv f32 %122, f32 %7;
    store f32* %120 with f32 %123;
    f32 %124 = fadd f32 %119, f32 %123;
    f32* %125 = getelementptr &([1000 * f32]* %0)[i64 0][i64 984];
    f32 %126 = load f32* %125;
    f32 %127 = fsub f32 %126, f32 %4;
    f32 %128 = fdiv f32 %127, f32 %7;
    store f32* %125 with f32 %128;
    f32 %129 = fadd f32 %124, f32 %128;
    f32* %130 = getelementptr &([1000 * f32]* %0)[i64 0][i64 985];
    f32 %131 = load f32* %130;
    f32 %132 = fsub f32 %131, f32 %4;
    f32 %133 = fdiv f32 %132, f32 %7;
    store f32* %130 with f32 %133;
    f32 %134 = fadd f32 %129, f32 %133;
    f32* %135 = getelementptr &([1000 * f32]* %0)[i64 0][i64 986];
    f32 %136 = load f32* %135;
    f32 %137 = fsub f32 %136, f32 %4;
    f32 %138 = fdiv f32 %137, f32 %7;
    store f32* %135 with f32 %138;
    f32 %139 = fadd f32 %134, f32 %138;
    f32* %140 = getelementptr &([1000 * f32]* %0)[i64 0][i64 987];
    f32 %141 = load f32* %140;
    f32 %142 = fsub f32 %141, f32 %4;
    f32 %143 = fdiv f32 %142, f32 %7;
    store f32* %140 with f32 %143;
    f32 %144 = fadd f32 %139, f32 %143;
    f32* %145 = getelementptr &([1000 * f32]* %0)[i64 0][i64 988];
    f32 %146 = load f32* %145;
    f32 %147 = fsub f32 %146, f32 %4;
    f32 %148 = fdiv f32 %147, f32 %7;
    store f32* %145 with f32 %148;
    f32 %149 = fadd f32 %144, f32 %148;
    f32* %150 = getelementptr &([1000 * f32]* %0)[i64 0][i64 989];
    f32 %151 = load f32* %150;
    f32 %152 = fsub f32 %151, f32 %4;
    f32 %153 = fdiv f32 %152, f32 %7;
    store f32* %150 with f32 %153;
    f32 %154 = fadd f32 %149, f32 %153;
    f32* %155 = getelementptr &([1000 * f32]* %0)[i64 0][i64 990];
    f32 %156 = load f32* %155;
    f32 %157 = fsub f32 %156, f32 %4;
    f32 %158 = fdiv f32 %157, f32 %7;
    store f32* %155 with f32 %158;
    f32 %159 = fadd f32 %154, f32 %158;
    f32* %160 = getelementptr &([1000 * f32]* %0)[i64 0][i64 991];
    f32 %161 = load f32* %160;
    f32 %162 = fsub f32 %161, f32 %4;
    f32 %163 = fdiv f32 %162, f32 %7;
    store f32* %160 with f32 %163;
    f32 %164 = fadd f32 %159, f32 %163;
    f32* %165 = getelementptr &([1000 * f32]* %0)[i64 0][i64 992];
    f32 %166 = load f32* %165;
    f32 %167 = fsub f32 %166, f32 %4;
    f32 %168 = fdiv f32 %167, f32 %7;
    store f32* %165 with f32 %168;
    f32 %169 = fadd f32 %164, f32 %168;
    f32* %170 = getelementptr &([1000 * f32]* %0)[i64 0][i64 993];
    f32 %171 = load f32* %170;
    f32 %172 = fsub f32 %171, f32 %4;
    f32 %173 = fdiv f32 %172, f32 %7;
    store f32* %170 with f32 %173;
    f32 %174 = fadd f32 %169, f32 %173;
    f32* %175 = getelementptr &([1000 * f32]* %0)[i64 0][i64 994];
    f32 %176 = load f32* %175;
    f32 %177 = fsub f32 %176, f32 %4;
    f32 %178 = fdiv f32 %177, f32 %7;
    store f32* %175 with f32 %178;
    f32 %179 = fadd f32 %174, f32 %178;
    f32* %180 = getelementptr &([1000 * f32]* %0)[i64 0][i64 995];
    f32 %181 = load f32* %180;
    f32 %182 = fsub f32 %181, f32 %4;
    f32 %183 = fdiv f32 %182, f32 %7;
    store f32* %180 with f32 %183;
    f32 %184 = fadd f32 %179, f32 %183;
    f32* %185 = getelementptr &([1000 * f32]* %0)[i64 0][i64 996];
    f32 %186 = load f32* %185;
    f32 %187 = fsub f32 %186, f32 %4;
    f32 %188 = fdiv f32 %187, f32 %7;
    store f32* %185 with f32 %188;
    f32 %189 = fadd f32 %184, f32 %188;
    f32* %190 = getelementptr &([1000 * f32]* %0)[i64 0][i64 997];
    f32 %191 = load f32* %190;
    f32 %192 = fsub f32 %191, f32 %4;
    f32 %193 = fdiv f32 %192, f32 %7;
    store f32* %190 with f32 %193;
    f32 %194 = fadd f32 %189, f32 %193;
    f32* %195 = getelementptr &([1000 * f32]* %0)[i64 0][i64 998];
    f32 %196 = load f32* %195;
    f32 %197 = fsub f32 %196, f32 %4;
    f32 %198 = fdiv f32 %197, f32 %7;
    store f32* %195 with f32 %198;
    f32 %199 = fadd f32 %194, f32 %198;
    f32* %200 = getelementptr &([1000 * f32]* %0)[i64 0][i64 999];
    f32 %201 = load f32* %200;
    f32 %202 = fsub f32 %201, f32 %4;
    f32 %203 = fdiv f32 %202, f32 %7;
    store f32* %200 with f32 %203;
    f32 %204 = fadd f32 %199, f32 %203;
    i32 %205 = add i32 %arg2, i32 1;
    i1 %206 = scmp lt i32 %205, i32 1000;
    cbr i1 %206(prob = 0.97), [ ^while.body9 [1000 * f32]* %arg, [1000 * f32]* %arg1, i32 %205, i32 0, i32 %arg3, f32 %204 ], [ ^b4 i32 %arg3, f32 %204 ];
^b4(i32 %arg, f32 %arg1):
    i32 %0 = add i32 %arg, i32 1;
    i1 %1 = scmp lt i32 %0, i32 100;
    cbr i1 %1(prob = 0.97), [ ^while.body1 i32 %0, f32 %arg1 ], [ ^while.body11 i32 0, i32 0, f32 %arg1 ];
^while.body11(i32 %arg, i32 %arg1, f32 %arg2):
    [1000 * f32]* %0 = getelementptr &([1000 * [1000 * f32]]* @a)[i64 0][i32 %arg];
    f32* %1 = getelementptr &([1000 * f32]* %0)[i64 0][i32 %arg1];
    f32 %2 = load f32* %1;
    f32 %3 = fadd f32 %arg2, f32 %2;
    f32* %4 = getelementptr &(f32* %1)[i64 1];
    f32 %5 = load f32* %4;
    f32 %6 = fadd f32 %3, f32 %5;
    f32* %7 = getelementptr &(f32* %1)[i64 2];
    f32 %8 = load f32* %7;
    f32 %9 = fadd f32 %6, f32 %8;
    f32* %10 = getelementptr &(f32* %1)[i64 3];
    f32 %11 = load f32* %10;
    f32 %12 = fadd f32 %9, f32 %11;
    f32* %13 = getelementptr &(f32* %1)[i64 4];
    f32 %14 = load f32* %13;
    f32 %15 = fadd f32 %12, f32 %14;
    f32* %16 = getelementptr &(f32* %1)[i64 5];
    f32 %17 = load f32* %16;
    f32 %18 = fadd f32 %15, f32 %17;
    f32* %19 = getelementptr &(f32* %1)[i64 6];
    f32 %20 = load f32* %19;
    f32 %21 = fadd f32 %18, f32 %20;
    f32* %22 = getelementptr &(f32* %1)[i64 7];
    f32 %23 = load f32* %22;
    f32 %24 = fadd f32 %21, f32 %23;
    f32* %25 = getelementptr &(f32* %1)[i64 8];
    f32 %26 = load f32* %25;
    f32 %27 = fadd f32 %24, f32 %26;
    f32* %28 = getelementptr &(f32* %1)[i64 9];
    f32 %29 = load f32* %28;
    f32 %30 = fadd f32 %27, f32 %29;
    f32* %31 = getelementptr &(f32* %1)[i64 10];
    f32 %32 = load f32* %31;
    f32 %33 = fadd f32 %30, f32 %32;
    f32* %34 = getelementptr &(f32* %1)[i64 11];
    f32 %35 = load f32* %34;
    f32 %36 = fadd f32 %33, f32 %35;
    f32* %37 = getelementptr &(f32* %1)[i64 12];
    f32 %38 = load f32* %37;
    f32 %39 = fadd f32 %36, f32 %38;
    f32* %40 = getelementptr &(f32* %1)[i64 13];
    f32 %41 = load f32* %40;
    f32 %42 = fadd f32 %39, f32 %41;
    f32* %43 = getelementptr &(f32* %1)[i64 14];
    f32 %44 = load f32* %43;
    f32 %45 = fadd f32 %42, f32 %44;
    f32* %46 = getelementptr &(f32* %1)[i64 15];
    f32 %47 = load f32* %46;
    f32 %48 = fadd f32 %45, f32 %47;
    i32 %49 = add i32 %arg1, i32 16;
    i1 %50 = scmp lt i32 %49, i32 960;
    cbr i1 %50(prob = 0.98), [ ^while.body11 i32 %arg, i32 %49, f32 %48 ], [ ^while.body12 i32 %arg, f32 %48 ];
^while.body12(i32 %arg, f32 %arg1):
    [1000 * f32]* %0 = getelementptr &([1000 * [1000 * f32]]* @a)[i64 0][i32 %arg];
    f32* %1 = getelementptr &([1000 * f32]* %0)[i64 0][i64 960];
    f32 %2 = load f32* %1;
    f32 %3 = fadd f32 %arg1, f32 %2;
    f32* %4 = getelementptr &([1000 * f32]* %0)[i64 0][i64 961];
    f32 %5 = load f32* %4;
    f32 %6 = fadd f32 %3, f32 %5;
    f32* %7 = getelementptr &([1000 * f32]* %0)[i64 0][i64 962];
    f32 %8 = load f32* %7;
    f32 %9 = fadd f32 %6, f32 %8;
    f32* %10 = getelementptr &([1000 * f32]* %0)[i64 0][i64 963];
    f32 %11 = load f32* %10;
    f32 %12 = fadd f32 %9, f32 %11;
    f32* %13 = getelementptr &([1000 * f32]* %0)[i64 0][i64 964];
    f32 %14 = load f32* %13;
    f32 %15 = fadd f32 %12, f32 %14;
    f32* %16 = getelementptr &([1000 * f32]* %0)[i64 0][i64 965];
    f32 %17 = load f32* %16;
    f32 %18 = fadd f32 %15, f32 %17;
    f32* %19 = getelementptr &([1000 * f32]* %0)[i64 0][i64 966];
    f32 %20 = load f32* %19;
    f32 %21 = fadd f32 %18, f32 %20;
    f32* %22 = getelementptr &([1000 * f32]* %0)[i64 0][i64 967];
    f32 %23 = load f32* %22;
    f32 %24 = fadd f32 %21, f32 %23;
    f32* %25 = getelementptr &([1000 * f32]* %0)[i64 0][i64 968];
    f32 %26 = load f32* %25;
    f32 %27 = fadd f32 %24, f32 %26;
    f32* %28 = getelementptr &([1000 * f32]* %0)[i64 0][i64 969];
    f32 %29 = load f32* %28;
    f32 %30 = fadd f32 %27, f32 %29;
    f32* %31 = getelementptr &([1000 * f32]* %0)[i64 0][i64 970];
    f32 %32 = load f32* %31;
    f32 %33 = fadd f32 %30, f32 %32;
    f32* %34 = getelementptr &([1000 * f32]* %0)[i64 0][i64 971];
    f32 %35 = load f32* %34;
    f32 %36 = fadd f32 %33, f32 %35;
    f32* %37 = getelementptr &([1000 * f32]* %0)[i64 0][i64 972];
    f32 %38 = load f32* %37;
    f32 %39 = fadd f32 %36, f32 %38;
    f32* %40 = getelementptr &([1000 * f32]* %0)[i64 0][i64 973];
    f32 %41 = load f32* %40;
    f32 %42 = fadd f32 %39, f32 %41;
    f32* %43 = getelementptr &([1000 * f32]* %0)[i64 0][i64 974];
    f32 %44 = load f32* %43;
    f32 %45 = fadd f32 %42, f32 %44;
    f32* %46 = getelementptr &([1000 * f32]* %0)[i64 0][i64 975];
    f32 %47 = load f32* %46;
    f32 %48 = fadd f32 %45, f32 %47;
    f32* %49 = getelementptr &([1000 * f32]* %0)[i64 0][i64 976];
    f32 %50 = load f32* %49;
    f32 %51 = fadd f32 %48, f32 %50;
    f32* %52 = getelementptr &([1000 * f32]* %0)[i64 0][i64 977];
    f32 %53 = load f32* %52;
    f32 %54 = fadd f32 %51, f32 %53;
    f32* %55 = getelementptr &([1000 * f32]* %0)[i64 0][i64 978];
    f32 %56 = load f32* %55;
    f32 %57 = fadd f32 %54, f32 %56;
    f32* %58 = getelementptr &([1000 * f32]* %0)[i64 0][i64 979];
    f32 %59 = load f32* %58;
    f32 %60 = fadd f32 %57, f32 %59;
    f32* %61 = getelementptr &([1000 * f32]* %0)[i64 0][i64 980];
    f32 %62 = load f32* %61;
    f32 %63 = fadd f32 %60, f32 %62;
    f32* %64 = getelementptr &([1000 * f32]* %0)[i64 0][i64 981];
    f32 %65 = load f32* %64;
    f32 %66 = fadd f32 %63, f32 %65;
    f32* %67 = getelementptr &([1000 * f32]* %0)[i64 0][i64 982];
    f32 %68 = load f32* %67;
    f32 %69 = fadd f32 %66, f32 %68;
    f32* %70 = getelementptr &([1000 * f32]* %0)[i64 0][i64 983];
    f32 %71 = load f32* %70;
    f32 %72 = fadd f32 %69, f32 %71;
    f32* %73 = getelementptr &([1000 * f32]* %0)[i64 0][i64 984];
    f32 %74 = load f32* %73;
    f32 %75 = fadd f32 %72, f32 %74;
    f32* %76 = getelementptr &([1000 * f32]* %0)[i64 0][i64 985];
    f32 %77 = load f32* %76;
    f32 %78 = fadd f32 %75, f32 %77;
    f32* %79 = getelementptr &([1000 * f32]* %0)[i64 0][i64 986];
    f32 %80 = load f32* %79;
    f32 %81 = fadd f32 %78, f32 %80;
    f32* %82 = getelementptr &([1000 * f32]* %0)[i64 0][i64 987];
    f32 %83 = load f32* %82;
    f32 %84 = fadd f32 %81, f32 %83;
    f32* %85 = getelementptr &([1000 * f32]* %0)[i64 0][i64 988];
    f32 %86 = load f32* %85;
    f32 %87 = fadd f32 %84, f32 %86;
    f32* %88 = getelementptr &([1000 * f32]* %0)[i64 0][i64 989];
    f32 %89 = load f32* %88;
    f32 %90 = fadd f32 %87, f32 %89;
    f32* %91 = getelementptr &([1000 * f32]* %0)[i64 0][i64 990];
    f32 %92 = load f32* %91;
    f32 %93 = fadd f32 %90, f32 %92;
    f32* %94 = getelementptr &([1000 * f32]* %0)[i64 0][i64 991];
    f32 %95 = load f32* %94;
    f32 %96 = fadd f32 %93, f32 %95;
    f32* %97 = getelementptr &([1000 * f32]* %0)[i64 0][i64 992];
    f32 %98 = load f32* %97;
    f32 %99 = fadd f32 %96, f32 %98;
    f32* %100 = getelementptr &([1000 * f32]* %0)[i64 0][i64 993];
    f32 %101 = load f32* %100;
    f32 %102 = fadd f32 %99, f32 %101;
    f32* %103 = getelementptr &([1000 * f32]* %0)[i64 0][i64 994];
    f32 %104 = load f32* %103;
    f32 %105 = fadd f32 %102, f32 %104;
    f32* %106 = getelementptr &([1000 * f32]* %0)[i64 0][i64 995];
    f32 %107 = load f32* %106;
    f32 %108 = fadd f32 %105, f32 %107;
    f32* %109 = getelementptr &([1000 * f32]* %0)[i64 0][i64 996];
    f32 %110 = load f32* %109;
    f32 %111 = fadd f32 %108, f32 %110;
    f32* %112 = getelementptr &([1000 * f32]* %0)[i64 0][i64 997];
    f32 %113 = load f32* %112;
    f32 %114 = fadd f32 %111, f32 %113;
    f32* %115 = getelementptr &([1000 * f32]* %0)[i64 0][i64 998];
    f32 %116 = load f32* %115;
    f32 %117 = fadd f32 %114, f32 %116;
    f32* %118 = getelementptr &([1000 * f32]* %0)[i64 0][i64 999];
    f32 %119 = load f32* %118;
    f32 %120 = fadd f32 %117, f32 %119;
    i32 %121 = add i32 %arg, i32 1;
    i1 %122 = scmp lt i32 %121, i32 1000;
    cbr i1 %122(prob = 0.97), [ ^while.body11 i32 %121, i32 0, f32 %120 ], [ ^b5 f32 %120 ];
^b5(f32 %arg):
    call (i32) -> void @stoptime(i32 95);
    call (f32) -> void @putfloat(f32 %arg);
    ret i32 0;
}
