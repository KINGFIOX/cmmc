internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [2010 * [2010 * i32]]* @A;
internal [2010 * i32]* @B;
internal [2010 * i32]* @C;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %n = alloc i32;
    i32* %x = alloc i32;
    i32* %y = alloc i32;
    i32* %i = alloc i32;
    i32* %j = alloc i32;
    i32* %n1 = alloc i32;
    i32* %x1 = alloc i32;
    i32* %y1 = alloc i32;
    i32* %i1 = alloc i32;
    i32* %j1 = alloc i32;
    i32* %i2 = alloc i32;
    i32* %n2 = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %n2 with i32 %0;
    [2010 * i32]* %1 = getelementptr &([2010 * [2010 * i32]]* @A)[i64 0][i64 0];
    i32* %2 = getelementptr &([2010 * i32]* @B)[i64 0][i64 0];
    i32* %3 = getelementptr &([2010 * i32]* @C)[i64 0][i64 0];
    ubr ^while.header;
^while.header:
    i32 %4 = phi [^b, i32 %9] [^entry, i32 %0];
    i32 %5 = phi [^b, i32 %22] [^entry, i32 0];
    i32 %6 = phi [^b, i32 %9] [^entry, i32 %0];
    i32 %7 = phi [^b, i32 %22] [^entry, i32 0];
    i1 %8 = scmp lt i32 %7, i32 %6;
    cbr i1 %8(prob = 0.97), ^while.header1, ^while.header2;
^while.header1:
    i32 %9 = phi [^while.header, i32 %4] [^while.body, i32 %9];
    i32 %10 = phi [^while.header, i32 %5] [^while.body, i32 %10];
    i32 %11 = phi [^while.header, i32 0] [^while.body, i32 %21];
    i32 %12 = phi [^while.header, i32 0] [^while.body, i32 %21];
    i1 %13 = scmp lt i32 %12, i32 %9;
    cbr i1 %13(prob = 0.97), ^while.body, ^b;
^while.header2:
    i32 %14 = phi [^while.header, i32 %4] [^while.body1, i32 %14];
    i32 %15 = phi [^while.header, i32 0] [^while.body1, i32 %25];
    i32 %16 = phi [^while.header, i32 0] [^while.body1, i32 %25];
    i1 %17 = scmp lt i32 %16, i32 %14;
    cbr i1 %17(prob = 0.97), ^while.body1, ^b1;
^while.body:
    [2010 * i32]* %18 = getelementptr &([2010 * [2010 * i32]]* @A)[i64 0][i32 %10];
    i32* %19 = getelementptr &([2010 * i32]* %18)[i64 0][i32 %11];
    i32 %20 = call () -> i32 @getint();
    store i32* %19 with i32 %20;
    i32 %21 = add i32 %11, i32 1;
    ubr ^while.header1;
^b:
    i32 %22 = add i32 %10, i32 1;
    ubr ^while.header;
^while.body1:
    i32* %23 = getelementptr &([2010 * i32]* @B)[i64 0][i32 %15];
    i32 %24 = call () -> i32 @getint();
    store i32* %23 with i32 %24;
    i32 %25 = add i32 %15, i32 1;
    ubr ^while.header2;
^b1:
    call (i32) -> void @starttime(i32 59);
    store i32* %i2 with i32 0;
    ubr ^while.header3;
^while.header3:
    i32 %26 = phi [^while.body9, i32 %118] [^b1, i32 %14];
    i32 %27 = phi [^while.body9, i32 %137] [^b1, i32 0];
    i32 %28 = phi [^while.body9, i32 %137] [^b1, i32 0];
    i1 %29 = scmp lt i32 %28, i32 50;
    cbr i1 %29(prob = 0.97), ^while.body2, ^b2;
^while.body2:
    store i32* %n1 with i32 %26;
    store i32* %y1 with i32 0;
    store i32* %x1 with i32 11;
    store i32* %j1 with i32 0;
    store i32* %i1 with i32 0;
    ubr ^while.header4;
^b2:
    call (i32) -> void @stoptime(i32 67);
    call (i32, i32*) -> void @putarray(i32 %26, i32* %3);
    ret i32 0;
^while.header4:
    i32 %30 = phi [^while.body3, i32 %43] [^while.body2, i32 %26];
    i32 %31 = phi [^while.body3, i32 %44] [^while.body2, i32 %27];
    i32 %32 = phi [^while.body3, i32 %49] [^while.body2, i32 0];
    i32 %33 = phi [^while.body3, i32 %46] [^while.body2, i32 0];
    i32 %34 = phi [^while.body3, i32 %47] [^while.body2, i32 11];
    i32* %35 = phi [^while.body3, i32* %35] [^while.body2, i32* %3];
    i32* %36 = phi [^while.body3, i32* %36] [^while.body2, i32* %2];
    [2010 * i32]* %37 = phi [^while.body3, [2010 * i32]* %37] [^while.body2, [2010 * i32]* %1];
    i32 %38 = phi [^while.body3, i32 %48] [^while.body2, i32 %26];
    i32 %39 = phi [^while.body2, i32 %26] [^while.body3, i32 %48];
    i32 %40 = phi [^while.body2, i32 0] [^while.body3, i32 %49];
    i1 %41 = scmp lt i32 %40, i32 %39;
    cbr i1 %41(prob = 0.97), ^while.body3, ^b3;
^while.body3:
    i32* %42 = getelementptr &(i32* %35)[i32 %32];
    store i32* %42 with i32 0;
    i32 %43 = load i32* %n2;
    i32 %44 = load i32* %i2;
    i32 %45 = load i32* %i1;
    i32 %46 = load i32* %y1;
    i32 %47 = load i32* %x1;
    i32 %48 = load i32* %n1;
    i32 %49 = add i32 %45, i32 1;
    store i32* %i1 with i32 %49;
    ubr ^while.header4;
^b3:
    store i32* %i1 with i32 0;
    ubr ^while.header5;
^while.header5:
    i32 %50 = phi [^b4, i32 %61] [^b3, i32 %30];
    i32 %51 = phi [^b4, i32 %62] [^b3, i32 %31];
    i32 %52 = phi [^b4, i32 %85] [^b3, i32 0];
    i32 %53 = phi [^b4, i32 %65] [^b3, i32 %33];
    i32 %54 = phi [^b4, i32 %66] [^b3, i32 %34];
    i32* %55 = phi [^b4, i32* %67] [^b3, i32* %35];
    i32* %56 = phi [^b4, i32* %68] [^b3, i32* %36];
    [2010 * i32]* %57 = phi [^b4, [2010 * i32]* %69] [^b3, [2010 * i32]* %37];
    i32 %58 = phi [^b4, i32 %70] [^b3, i32 %38];
    i32 %59 = phi [^b3, i32 0] [^b4, i32 %85];
    i1 %60 = scmp lt i32 %59, i32 %58;
    cbr i1 %60(prob = 0.97), ^while.body4, ^while.body5;
^while.body4:
    store i32* %j1 with i32 0;
    ubr ^while.header6;
^while.body5:
    store i32* %n with i32 %50;
    store i32* %y with i32 0;
    store i32* %x with i32 11;
    store i32* %j with i32 0;
    store i32* %i with i32 0;
    ubr ^while.header7;
^while.header6:
    i32 %61 = phi [^b6, i32 %129] [^while.body4, i32 %50];
    i32 %62 = phi [^b6, i32 %130] [^while.body4, i32 %51];
    i32 %63 = phi [^b6, i32 %136] [^while.body4, i32 0];
    i32 %64 = phi [^b6, i32 %132] [^while.body4, i32 %52];
    i32 %65 = phi [^b6, i32 %133] [^while.body4, i32 %53];
    i32 %66 = phi [^b6, i32 %134] [^while.body4, i32 %54];
    i32* %67 = phi [^b6, i32* %67] [^while.body4, i32* %55];
    i32* %68 = phi [^b6, i32* %68] [^while.body4, i32* %56];
    [2010 * i32]* %69 = phi [^b6, [2010 * i32]* %69] [^while.body4, [2010 * i32]* %57];
    i32 %70 = phi [^b6, i32 %135] [^while.body4, i32 %58];
    i32 %71 = phi [^while.body4, i32 0] [^b6, i32 %136];
    i1 %72 = scmp lt i32 %71, i32 %70;
    cbr i1 %72(prob = 0.97), ^while.body7, ^b4;
^while.header7:
    i32 %73 = phi [^while.body6, i32 %87] [^while.body5, i32 %50];
    i32 %74 = phi [^while.body6, i32 %88] [^while.body5, i32 %51];
    i32 %75 = phi [^while.body6, i32 %93] [^while.body5, i32 0];
    i32 %76 = phi [^while.body6, i32 %90] [^while.body5, i32 0];
    i32 %77 = phi [^while.body6, i32 %91] [^while.body5, i32 11];
    i32* %78 = phi [^while.body6, i32* %78] [^while.body5, i32* %2];
    i32* %79 = phi [^while.body6, i32* %79] [^while.body5, i32* %3];
    [2010 * i32]* %80 = phi [^while.body6, [2010 * i32]* %80] [^while.body5, [2010 * i32]* %1];
    i32 %81 = phi [^while.body6, i32 %92] [^while.body5, i32 %50];
    i32 %82 = phi [^while.body5, i32 %50] [^while.body6, i32 %92];
    i32 %83 = phi [^while.body5, i32 0] [^while.body6, i32 %93];
    i1 %84 = scmp lt i32 %83, i32 %82;
    cbr i1 %84(prob = 0.97), ^while.body6, ^b5;
^b4:
    i32 %85 = add i32 %64, i32 1;
    store i32* %i1 with i32 %85;
    ubr ^while.header5;
^while.body6:
    i32* %86 = getelementptr &(i32* %78)[i32 %75];
    store i32* %86 with i32 0;
    i32 %87 = load i32* %n2;
    i32 %88 = load i32* %i2;
    i32 %89 = load i32* %i;
    i32 %90 = load i32* %y;
    i32 %91 = load i32* %x;
    i32 %92 = load i32* %n;
    i32 %93 = add i32 %89, i32 1;
    store i32* %i with i32 %93;
    ubr ^while.header7;
^while.body7:
    [2010 * i32]* %94 = getelementptr &([2010 * i32]* %69)[i32 %64];
    i32* %95 = getelementptr &([2010 * i32]* %94)[i64 0][i32 %63];
    i32 %96 = load i32* %95;
    i1 %97 = scmp eq i32 %96, i32 0;
    cbr i1 %97(prob = 0.5), ^if.then, ^if.else;
^b5:
    store i32* %i with i32 0;
    ubr ^while.header8;
^if.then:
    i32* %98 = getelementptr &(i32* %68)[i32 %64];
    i32 %99 = load i32* %98;
    i32 %100 = mul i32 %99, i32 %66;
    i32* %101 = getelementptr &(i32* %68)[i32 %63];
    i32 %102 = load i32* %101;
    i32 %103 = add i32 %100, i32 %102;
    store i32* %x1 with i32 %103;
    i32 %104 = sub i32 %65, i32 %103;
    store i32* %y1 with i32 %104;
    ubr ^b6;
^if.else:
    i32* %105 = getelementptr &(i32* %67)[i32 %64];
    i32 %106 = load i32* %105;
    i32* %107 = getelementptr &(i32* %68)[i32 %63];
    i32 %108 = load i32* %107;
    i32 %109 = mul i32 %96, i32 %108;
    i32 %110 = add i32 %106, i32 %109;
    store i32* %105 with i32 %110;
    i32 %111 = load i32* %n2;
    i32 %112 = load i32* %i2;
    i32 %113 = load i32* %j1;
    i32 %114 = load i32* %i1;
    i32 %115 = load i32* %y1;
    i32 %116 = load i32* %x1;
    i32 %117 = load i32* %n1;
    ubr ^b6;
^while.header8:
    i32 %118 = phi [^b7, i32 %138] [^b5, i32 %73];
    i32 %119 = phi [^b7, i32 %139] [^b5, i32 %74];
    i32 %120 = phi [^b7, i32 %150] [^b5, i32 0];
    i32 %121 = phi [^b7, i32 %142] [^b5, i32 %76];
    i32 %122 = phi [^b7, i32 %143] [^b5, i32 %77];
    i32* %123 = phi [^b7, i32* %144] [^b5, i32* %78];
    i32* %124 = phi [^b7, i32* %145] [^b5, i32* %79];
    [2010 * i32]* %125 = phi [^b7, [2010 * i32]* %146] [^b5, [2010 * i32]* %80];
    i32 %126 = phi [^b7, i32 %147] [^b5, i32 %81];
    i32 %127 = phi [^b7, i32 %150] [^b5, i32 0];
    i1 %128 = scmp lt i32 %127, i32 %126;
    cbr i1 %128(prob = 0.97), ^while.body8, ^while.body9;
^b6:
    i32 %129 = phi [^if.else, i32 %111] [^if.then, i32 %61];
    i32 %130 = phi [^if.else, i32 %112] [^if.then, i32 %62];
    i32 %131 = phi [^if.else, i32 %113] [^if.then, i32 %63];
    i32 %132 = phi [^if.else, i32 %114] [^if.then, i32 %64];
    i32 %133 = phi [^if.else, i32 %115] [^if.then, i32 %104];
    i32 %134 = phi [^if.else, i32 %116] [^if.then, i32 %103];
    i32 %135 = phi [^if.else, i32 %117] [^if.then, i32 %70];
    i32 %136 = add i32 %131, i32 1;
    store i32* %j1 with i32 %136;
    ubr ^while.header6;
^while.body8:
    store i32* %j with i32 0;
    ubr ^while.header9;
^while.body9:
    i32 %137 = add i32 %119, i32 1;
    store i32* %i2 with i32 %137;
    ubr ^while.header3;
^while.header9:
    i32 %138 = phi [^b8, i32 %175] [^while.body8, i32 %118];
    i32 %139 = phi [^b8, i32 %176] [^while.body8, i32 %119];
    i32 %140 = phi [^b8, i32 %182] [^while.body8, i32 0];
    i32 %141 = phi [^b8, i32 %178] [^while.body8, i32 %120];
    i32 %142 = phi [^b8, i32 %179] [^while.body8, i32 %121];
    i32 %143 = phi [^b8, i32 %180] [^while.body8, i32 %122];
    i32* %144 = phi [^b8, i32* %144] [^while.body8, i32* %123];
    i32* %145 = phi [^b8, i32* %145] [^while.body8, i32* %124];
    [2010 * i32]* %146 = phi [^b8, [2010 * i32]* %146] [^while.body8, [2010 * i32]* %125];
    i32 %147 = phi [^b8, i32 %181] [^while.body8, i32 %126];
    i32 %148 = phi [^while.body8, i32 0] [^b8, i32 %182];
    i1 %149 = scmp lt i32 %148, i32 %147;
    cbr i1 %149(prob = 0.97), ^while.body10, ^b7;
^b7:
    i32 %150 = add i32 %141, i32 1;
    store i32* %i with i32 %150;
    ubr ^while.header8;
^while.body10:
    [2010 * i32]* %151 = getelementptr &([2010 * i32]* %146)[i32 %141];
    i32* %152 = getelementptr &([2010 * i32]* %151)[i64 0][i32 %140];
    i32 %153 = load i32* %152;
    i1 %154 = scmp eq i32 %153, i32 0;
    cbr i1 %154(prob = 0.5), ^if.then1, ^if.else1;
^if.then1:
    i32* %155 = getelementptr &(i32* %145)[i32 %141];
    i32 %156 = load i32* %155;
    i32 %157 = mul i32 %156, i32 %143;
    i32* %158 = getelementptr &(i32* %145)[i32 %140];
    i32 %159 = load i32* %158;
    i32 %160 = add i32 %157, i32 %159;
    store i32* %x with i32 %160;
    i32 %161 = sub i32 %142, i32 %160;
    store i32* %y with i32 %161;
    ubr ^b8;
^if.else1:
    i32* %162 = getelementptr &(i32* %144)[i32 %141];
    i32 %163 = load i32* %162;
    i32* %164 = getelementptr &(i32* %145)[i32 %140];
    i32 %165 = load i32* %164;
    i32 %166 = mul i32 %153, i32 %165;
    i32 %167 = add i32 %163, i32 %166;
    store i32* %162 with i32 %167;
    i32 %168 = load i32* %n2;
    i32 %169 = load i32* %i2;
    i32 %170 = load i32* %j;
    i32 %171 = load i32* %i;
    i32 %172 = load i32* %y;
    i32 %173 = load i32* %x;
    i32 %174 = load i32* %n;
    ubr ^b8;
^b8:
    i32 %175 = phi [^if.else1, i32 %168] [^if.then1, i32 %138];
    i32 %176 = phi [^if.else1, i32 %169] [^if.then1, i32 %139];
    i32 %177 = phi [^if.else1, i32 %170] [^if.then1, i32 %140];
    i32 %178 = phi [^if.else1, i32 %171] [^if.then1, i32 %141];
    i32 %179 = phi [^if.else1, i32 %172] [^if.then1, i32 %161];
    i32 %180 = phi [^if.else1, i32 %173] [^if.then1, i32 %160];
    i32 %181 = phi [^if.else1, i32 %174] [^if.then1, i32 %147];
    i32 %182 = add i32 %177, i32 1;
    store i32* %j with i32 %182;
    ubr ^while.header9;
}
