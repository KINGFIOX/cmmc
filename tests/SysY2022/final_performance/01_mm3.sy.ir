internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [1024 * [1024 * i32]]* @A;
internal [1024 * [1024 * i32]]* @B;
internal [1024 * [1024 * i32]]* @C;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %n = alloc i32;
    i32* %i = alloc i32;
    i32* %j = alloc i32;
    i32* %k = alloc i32;
    i32* %n1 = alloc i32;
    i32* %i1 = alloc i32;
    i32* %j1 = alloc i32;
    i32* %k1 = alloc i32;
    i32* %i2 = alloc i32;
    i32* %n2 = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %n2 with i32 %0;
    [1024 * i32]* %1 = getelementptr &([1024 * [1024 * i32]]* @A)[i64 0][i64 0];
    [1024 * i32]* %2 = getelementptr &([1024 * [1024 * i32]]* @B)[i64 0][i64 0];
    [1024 * i32]* %3 = getelementptr &([1024 * [1024 * i32]]* @C)[i64 0][i64 0];
    ubr ^while.header;
^while.header:
    i32 %4 = phi [^b, i32 %7] [^entry, i32 %0];
    i32 %5 = phi [^b, i32 %18] [^entry, i32 0];
    i1 %6 = scmp lt i32 %5, i32 %4;
    cbr i1 %6(prob = 0.97), ^while.header1, ^while.header2;
^while.header1:
    i32 %7 = phi [^while.header, i32 %4] [^while.body, i32 %7];
    i32 %8 = phi [^while.header, i32 %5] [^while.body, i32 %8];
    i32 %9 = phi [^while.header, i32 0] [^while.body, i32 %17];
    i1 %10 = scmp lt i32 %9, i32 %7;
    cbr i1 %10(prob = 0.97), ^while.body, ^b;
^while.header2:
    i32 %11 = phi [^while.header, i32 %4] [^b2, i32 %19];
    i32 %12 = phi [^while.header, i32 0] [^b2, i32 %27];
    i1 %13 = scmp lt i32 %12, i32 %11;
    cbr i1 %13(prob = 0.97), ^while.header3, ^b1;
^while.body:
    [1024 * i32]* %14 = getelementptr &([1024 * [1024 * i32]]* @A)[i64 0][i32 %8];
    i32* %15 = getelementptr &([1024 * i32]* %14)[i64 0][i32 %9];
    i32 %16 = call () -> i32 @getint();
    store i32* %15 with i32 %16;
    i32 %17 = add i32 %9, i32 1;
    ubr ^while.header1;
^b:
    i32 %18 = add i32 %8, i32 1;
    ubr ^while.header;
^b1:
    call (i32) -> void @starttime(i32 65);
    store i32* %i2 with i32 0;
    ubr ^while.header4;
^while.header3:
    i32 %19 = phi [^while.header2, i32 %11] [^while.body1, i32 %19];
    i32 %20 = phi [^while.header2, i32 %12] [^while.body1, i32 %20];
    i32 %21 = phi [^while.header2, i32 0] [^while.body1, i32 %26];
    i1 %22 = scmp lt i32 %21, i32 %19;
    cbr i1 %22(prob = 0.97), ^while.body1, ^b2;
^while.body1:
    [1024 * i32]* %23 = getelementptr &([1024 * [1024 * i32]]* @B)[i64 0][i32 %20];
    i32* %24 = getelementptr &([1024 * i32]* %23)[i64 0][i32 %21];
    i32 %25 = call () -> i32 @getint();
    store i32* %24 with i32 %25;
    i32 %26 = add i32 %21, i32 1;
    ubr ^while.header3;
^b2:
    i32 %27 = add i32 %20, i32 1;
    ubr ^while.header2;
^while.header4:
    i32 %28 = phi [^while.body12, i32 %120] [^b1, i32 %11];
    i32 %29 = phi [^while.body12, i32 %147] [^b1, i32 0];
    i1 %30 = scmp lt i32 %29, i32 5;
    cbr i1 %30(prob = 0.97), ^while.body2, ^while.header5;
^while.body2:
    store i32* %n1 with i32 %28;
    store i32* %k1 with i32 0;
    store i32* %i1 with i32 0;
    ubr ^while.header6;
^while.header5:
    i32 %31 = phi [^while.header4, i32 %28] [^b5, i32 %43];
    i32 %32 = phi [^while.header4, i32 0] [^b5, i32 %53];
    i32 %33 = phi [^while.header4, i32 0] [^b5, i32 %46];
    i1 %34 = scmp lt i32 %32, i32 %31;
    cbr i1 %34(prob = 0.97), ^while.header7, ^b3;
^while.header6:
    i32 %35 = phi [^b6, i32 %54] [^while.body2, i32 %28];
    i32 %36 = phi [^b6, i32 %55] [^while.body2, i32 %29];
    i32 %37 = phi [^b6, i32 %79] [^while.body2, i32 0];
    [1024 * i32]* %38 = phi [^b6, [1024 * i32]* %58] [^while.body2, [1024 * i32]* %3];
    [1024 * i32]* %39 = phi [^b6, [1024 * i32]* %59] [^while.body2, [1024 * i32]* %2];
    [1024 * i32]* %40 = phi [^b6, [1024 * i32]* %60] [^while.body2, [1024 * i32]* %1];
    i32 %41 = phi [^b6, i32 %61] [^while.body2, i32 %28];
    i1 %42 = scmp lt i32 %37, i32 %41;
    cbr i1 %42(prob = 0.97), ^while.body3, ^b4;
^while.header7:
    i32 %43 = phi [^while.header5, i32 %31] [^while.body4, i32 %43];
    i32 %44 = phi [^while.header5, i32 %32] [^while.body4, i32 %44];
    i32 %45 = phi [^while.header5, i32 0] [^while.body4, i32 %52];
    i32 %46 = phi [^while.header5, i32 %33] [^while.body4, i32 %51];
    i1 %47 = scmp lt i32 %45, i32 %43;
    cbr i1 %47(prob = 0.97), ^while.body4, ^b5;
^b3:
    call (i32) -> void @stoptime(i32 84);
    call (i32) -> void @putint(i32 %33);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^while.body3:
    store i32* %j1 with i32 0;
    ubr ^while.header8;
^b4:
    store i32* %j1 with i32 0;
    store i32* %k1 with i32 0;
    ubr ^while.header9;
^while.body4:
    [1024 * i32]* %48 = getelementptr &([1024 * [1024 * i32]]* @B)[i64 0][i32 %44];
    i32* %49 = getelementptr &([1024 * i32]* %48)[i64 0][i32 %45];
    i32 %50 = load i32* %49;
    i32 %51 = add i32 %46, i32 %50;
    i32 %52 = add i32 %45, i32 1;
    ubr ^while.header7;
^b5:
    i32 %53 = add i32 %44, i32 1;
    ubr ^while.header5;
^while.header8:
    i32 %54 = phi [^while.body5, i32 %73] [^while.body3, i32 %35];
    i32 %55 = phi [^while.body5, i32 %74] [^while.body3, i32 %36];
    i32 %56 = phi [^while.body5, i32 %78] [^while.body3, i32 0];
    i32 %57 = phi [^while.body5, i32 %76] [^while.body3, i32 %37];
    [1024 * i32]* %58 = phi [^while.body5, [1024 * i32]* %58] [^while.body3, [1024 * i32]* %38];
    [1024 * i32]* %59 = phi [^while.body5, [1024 * i32]* %59] [^while.body3, [1024 * i32]* %39];
    [1024 * i32]* %60 = phi [^while.body5, [1024 * i32]* %60] [^while.body3, [1024 * i32]* %40];
    i32 %61 = phi [^while.body5, i32 %77] [^while.body3, i32 %41];
    i1 %62 = scmp lt i32 %56, i32 %61;
    cbr i1 %62(prob = 0.97), ^while.body5, ^b6;
^while.header9:
    i32 %63 = phi [^b7, i32 %80] [^b4, i32 %35];
    i32 %64 = phi [^b7, i32 %81] [^b4, i32 %36];
    i32 %65 = phi [^b7, i32 %97] [^b4, i32 0];
    [1024 * i32]* %66 = phi [^b7, [1024 * i32]* %84] [^b4, [1024 * i32]* %38];
    [1024 * i32]* %67 = phi [^b7, [1024 * i32]* %85] [^b4, [1024 * i32]* %39];
    [1024 * i32]* %68 = phi [^b7, [1024 * i32]* %86] [^b4, [1024 * i32]* %40];
    i32 %69 = phi [^b7, i32 %87] [^b4, i32 %41];
    i1 %70 = scmp lt i32 %65, i32 %69;
    cbr i1 %70(prob = 0.97), ^while.body6, ^while.body7;
^while.body5:
    [1024 * i32]* %71 = getelementptr &([1024 * i32]* %58)[i32 %57];
    i32* %72 = getelementptr &([1024 * i32]* %71)[i64 0][i32 %56];
    store i32* %72 with i32 0;
    i32 %73 = load i32* %n2;
    i32 %74 = load i32* %i2;
    i32 %75 = load i32* %j1;
    i32 %76 = load i32* %i1;
    i32 %77 = load i32* %n1;
    i32 %78 = add i32 %75, i32 1;
    store i32* %j1 with i32 %78;
    ubr ^while.header8;
^b6:
    i32 %79 = add i32 %57, i32 1;
    store i32* %i1 with i32 %79;
    ubr ^while.header6;
^while.body6:
    store i32* %i1 with i32 0;
    ubr ^while.header10;
^while.body7:
    store i32* %n with i32 %63;
    store i32* %k with i32 0;
    store i32* %i with i32 0;
    ubr ^while.header11;
^while.header10:
    i32 %80 = phi [^if.then, i32 %102] [^while.body6, i32 %63];
    i32 %81 = phi [^if.then, i32 %103] [^while.body6, i32 %64];
    i32 %82 = phi [^if.then, i32 %104] [^while.body6, i32 %65];
    i32 %83 = phi [^if.then, i32 %110] [^while.body6, i32 0];
    [1024 * i32]* %84 = phi [^if.then, [1024 * i32]* %106] [^while.body6, [1024 * i32]* %66];
    [1024 * i32]* %85 = phi [^if.then, [1024 * i32]* %107] [^while.body6, [1024 * i32]* %67];
    [1024 * i32]* %86 = phi [^if.then, [1024 * i32]* %108] [^while.body6, [1024 * i32]* %68];
    i32 %87 = phi [^if.then, i32 %109] [^while.body6, i32 %69];
    i1 %88 = scmp lt i32 %83, i32 %87;
    cbr i1 %88(prob = 0.97), ^while.body9, ^b7;
^while.header11:
    i32 %89 = phi [^b10, i32 %111] [^while.body7, i32 %63];
    i32 %90 = phi [^b10, i32 %112] [^while.body7, i32 %64];
    i32 %91 = phi [^b10, i32 %136] [^while.body7, i32 0];
    [1024 * i32]* %92 = phi [^b10, [1024 * i32]* %115] [^while.body7, [1024 * i32]* %2];
    [1024 * i32]* %93 = phi [^b10, [1024 * i32]* %116] [^while.body7, [1024 * i32]* %3];
    [1024 * i32]* %94 = phi [^b10, [1024 * i32]* %117] [^while.body7, [1024 * i32]* %1];
    i32 %95 = phi [^b10, i32 %118] [^while.body7, i32 %63];
    i1 %96 = scmp lt i32 %91, i32 %95;
    cbr i1 %96(prob = 0.97), ^while.body8, ^b8;
^b7:
    i32 %97 = add i32 %82, i32 1;
    store i32* %k1 with i32 %97;
    ubr ^while.header9;
^while.body8:
    store i32* %j with i32 0;
    ubr ^while.header12;
^while.body9:
    [1024 * i32]* %98 = getelementptr &([1024 * i32]* %86)[i32 %83];
    i32* %99 = getelementptr &([1024 * i32]* %98)[i64 0][i32 %82];
    i32 %100 = load i32* %99;
    i1 %101 = scmp eq i32 %100, i32 0;
    cbr i1 %101(prob = 0.5), ^if.then, ^b9;
^b8:
    store i32* %j with i32 0;
    store i32* %k with i32 0;
    ubr ^while.header13;
^if.then:
    i32 %102 = phi [^while.header14, i32 %137] [^while.body9, i32 %80];
    i32 %103 = phi [^while.header14, i32 %138] [^while.body9, i32 %81];
    i32 %104 = phi [^while.header14, i32 %139] [^while.body9, i32 %82];
    i32 %105 = phi [^while.header14, i32 %141] [^while.body9, i32 %83];
    [1024 * i32]* %106 = phi [^while.header14, [1024 * i32]* %142] [^while.body9, [1024 * i32]* %84];
    [1024 * i32]* %107 = phi [^while.header14, [1024 * i32]* %143] [^while.body9, [1024 * i32]* %85];
    [1024 * i32]* %108 = phi [^while.header14, [1024 * i32]* %144] [^while.body9, [1024 * i32]* %86];
    i32 %109 = phi [^while.header14, i32 %145] [^while.body9, i32 %87];
    i32 %110 = add i32 %105, i32 1;
    store i32* %i1 with i32 %110;
    ubr ^while.header10;
^b9:
    store i32* %j1 with i32 0;
    ubr ^while.header14;
^while.header12:
    i32 %111 = phi [^while.body10, i32 %130] [^while.body8, i32 %89];
    i32 %112 = phi [^while.body10, i32 %131] [^while.body8, i32 %90];
    i32 %113 = phi [^while.body10, i32 %135] [^while.body8, i32 0];
    i32 %114 = phi [^while.body10, i32 %133] [^while.body8, i32 %91];
    [1024 * i32]* %115 = phi [^while.body10, [1024 * i32]* %115] [^while.body8, [1024 * i32]* %92];
    [1024 * i32]* %116 = phi [^while.body10, [1024 * i32]* %116] [^while.body8, [1024 * i32]* %93];
    [1024 * i32]* %117 = phi [^while.body10, [1024 * i32]* %117] [^while.body8, [1024 * i32]* %94];
    i32 %118 = phi [^while.body10, i32 %134] [^while.body8, i32 %95];
    i1 %119 = scmp lt i32 %113, i32 %118;
    cbr i1 %119(prob = 0.97), ^while.body10, ^b10;
^while.header13:
    i32 %120 = phi [^b11, i32 %166] [^b8, i32 %89];
    i32 %121 = phi [^b11, i32 %167] [^b8, i32 %90];
    i32 %122 = phi [^b11, i32 %175] [^b8, i32 0];
    [1024 * i32]* %123 = phi [^b11, [1024 * i32]* %170] [^b8, [1024 * i32]* %92];
    [1024 * i32]* %124 = phi [^b11, [1024 * i32]* %171] [^b8, [1024 * i32]* %93];
    [1024 * i32]* %125 = phi [^b11, [1024 * i32]* %172] [^b8, [1024 * i32]* %94];
    i32 %126 = phi [^b11, i32 %173] [^b8, i32 %95];
    i1 %127 = scmp lt i32 %122, i32 %126;
    cbr i1 %127(prob = 0.97), ^while.body11, ^while.body12;
^while.body10:
    [1024 * i32]* %128 = getelementptr &([1024 * i32]* %115)[i32 %114];
    i32* %129 = getelementptr &([1024 * i32]* %128)[i64 0][i32 %113];
    store i32* %129 with i32 0;
    i32 %130 = load i32* %n2;
    i32 %131 = load i32* %i2;
    i32 %132 = load i32* %j;
    i32 %133 = load i32* %i;
    i32 %134 = load i32* %n;
    i32 %135 = add i32 %132, i32 1;
    store i32* %j with i32 %135;
    ubr ^while.header12;
^b10:
    i32 %136 = add i32 %114, i32 1;
    store i32* %i with i32 %136;
    ubr ^while.header11;
^while.body11:
    store i32* %i with i32 0;
    ubr ^while.header15;
^while.header14:
    i32 %137 = phi [^while.body13, i32 %159] [^b9, i32 %80];
    i32 %138 = phi [^while.body13, i32 %160] [^b9, i32 %81];
    i32 %139 = phi [^while.body13, i32 %161] [^b9, i32 %82];
    i32 %140 = phi [^while.body13, i32 %165] [^b9, i32 0];
    i32 %141 = phi [^while.body13, i32 %163] [^b9, i32 %83];
    [1024 * i32]* %142 = phi [^while.body13, [1024 * i32]* %142] [^b9, [1024 * i32]* %84];
    [1024 * i32]* %143 = phi [^while.body13, [1024 * i32]* %143] [^b9, [1024 * i32]* %85];
    [1024 * i32]* %144 = phi [^while.body13, [1024 * i32]* %144] [^b9, [1024 * i32]* %86];
    i32 %145 = phi [^while.body13, i32 %164] [^b9, i32 %87];
    i1 %146 = scmp lt i32 %140, i32 %145;
    cbr i1 %146(prob = 0.97), ^while.body13, ^if.then;
^while.body12:
    i32 %147 = add i32 %121, i32 1;
    store i32* %i2 with i32 %147;
    ubr ^while.header4;
^while.body13:
    [1024 * i32]* %148 = getelementptr &([1024 * i32]* %142)[i32 %141];
    i32* %149 = getelementptr &([1024 * i32]* %148)[i64 0][i32 %140];
    i32 %150 = load i32* %149;
    [1024 * i32]* %151 = getelementptr &([1024 * i32]* %144)[i32 %141];
    i32* %152 = getelementptr &([1024 * i32]* %151)[i64 0][i32 %139];
    i32 %153 = load i32* %152;
    [1024 * i32]* %154 = getelementptr &([1024 * i32]* %143)[i32 %139];
    i32* %155 = getelementptr &([1024 * i32]* %154)[i64 0][i32 %140];
    i32 %156 = load i32* %155;
    i32 %157 = mul i32 %153, i32 %156;
    i32 %158 = add i32 %150, i32 %157;
    store i32* %149 with i32 %158;
    i32 %159 = load i32* %n2;
    i32 %160 = load i32* %i2;
    i32 %161 = load i32* %k1;
    i32 %162 = load i32* %j1;
    i32 %163 = load i32* %i1;
    i32 %164 = load i32* %n1;
    i32 %165 = add i32 %162, i32 1;
    store i32* %j1 with i32 %165;
    ubr ^while.header14;
^while.header15:
    i32 %166 = phi [^if.then1, i32 %180] [^while.body11, i32 %120];
    i32 %167 = phi [^if.then1, i32 %181] [^while.body11, i32 %121];
    i32 %168 = phi [^if.then1, i32 %182] [^while.body11, i32 %122];
    i32 %169 = phi [^if.then1, i32 %188] [^while.body11, i32 0];
    [1024 * i32]* %170 = phi [^if.then1, [1024 * i32]* %184] [^while.body11, [1024 * i32]* %123];
    [1024 * i32]* %171 = phi [^if.then1, [1024 * i32]* %185] [^while.body11, [1024 * i32]* %124];
    [1024 * i32]* %172 = phi [^if.then1, [1024 * i32]* %186] [^while.body11, [1024 * i32]* %125];
    i32 %173 = phi [^if.then1, i32 %187] [^while.body11, i32 %126];
    i1 %174 = scmp lt i32 %169, i32 %173;
    cbr i1 %174(prob = 0.97), ^while.body14, ^b11;
^b11:
    i32 %175 = add i32 %168, i32 1;
    store i32* %k with i32 %175;
    ubr ^while.header13;
^while.body14:
    [1024 * i32]* %176 = getelementptr &([1024 * i32]* %172)[i32 %169];
    i32* %177 = getelementptr &([1024 * i32]* %176)[i64 0][i32 %168];
    i32 %178 = load i32* %177;
    i1 %179 = scmp eq i32 %178, i32 0;
    cbr i1 %179(prob = 0.5), ^if.then1, ^b12;
^if.then1:
    i32 %180 = phi [^while.header16, i32 %189] [^while.body14, i32 %166];
    i32 %181 = phi [^while.header16, i32 %190] [^while.body14, i32 %167];
    i32 %182 = phi [^while.header16, i32 %191] [^while.body14, i32 %168];
    i32 %183 = phi [^while.header16, i32 %193] [^while.body14, i32 %169];
    [1024 * i32]* %184 = phi [^while.header16, [1024 * i32]* %194] [^while.body14, [1024 * i32]* %170];
    [1024 * i32]* %185 = phi [^while.header16, [1024 * i32]* %195] [^while.body14, [1024 * i32]* %171];
    [1024 * i32]* %186 = phi [^while.header16, [1024 * i32]* %196] [^while.body14, [1024 * i32]* %172];
    i32 %187 = phi [^while.header16, i32 %197] [^while.body14, i32 %173];
    i32 %188 = add i32 %183, i32 1;
    store i32* %i with i32 %188;
    ubr ^while.header15;
^b12:
    store i32* %j with i32 0;
    ubr ^while.header16;
^while.header16:
    i32 %189 = phi [^while.body15, i32 %210] [^b12, i32 %166];
    i32 %190 = phi [^while.body15, i32 %211] [^b12, i32 %167];
    i32 %191 = phi [^while.body15, i32 %212] [^b12, i32 %168];
    i32 %192 = phi [^while.body15, i32 %216] [^b12, i32 0];
    i32 %193 = phi [^while.body15, i32 %214] [^b12, i32 %169];
    [1024 * i32]* %194 = phi [^while.body15, [1024 * i32]* %194] [^b12, [1024 * i32]* %170];
    [1024 * i32]* %195 = phi [^while.body15, [1024 * i32]* %195] [^b12, [1024 * i32]* %171];
    [1024 * i32]* %196 = phi [^while.body15, [1024 * i32]* %196] [^b12, [1024 * i32]* %172];
    i32 %197 = phi [^while.body15, i32 %215] [^b12, i32 %173];
    i1 %198 = scmp lt i32 %192, i32 %197;
    cbr i1 %198(prob = 0.97), ^while.body15, ^if.then1;
^while.body15:
    [1024 * i32]* %199 = getelementptr &([1024 * i32]* %194)[i32 %193];
    i32* %200 = getelementptr &([1024 * i32]* %199)[i64 0][i32 %192];
    i32 %201 = load i32* %200;
    [1024 * i32]* %202 = getelementptr &([1024 * i32]* %196)[i32 %193];
    i32* %203 = getelementptr &([1024 * i32]* %202)[i64 0][i32 %191];
    i32 %204 = load i32* %203;
    [1024 * i32]* %205 = getelementptr &([1024 * i32]* %195)[i32 %191];
    i32* %206 = getelementptr &([1024 * i32]* %205)[i64 0][i32 %192];
    i32 %207 = load i32* %206;
    i32 %208 = mul i32 %204, i32 %207;
    i32 %209 = add i32 %201, i32 %208;
    store i32* %200 with i32 %209;
    i32 %210 = load i32* %n2;
    i32 %211 = load i32* %i2;
    i32 %212 = load i32* %k;
    i32 %213 = load i32* %j;
    i32 %214 = load i32* %i;
    i32 %215 = load i32* %n;
    i32 %216 = add i32 %213, i32 1;
    store i32* %j with i32 %216;
    ubr ^while.header16;
}
