internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [1024 * [1024 * i32]]* @A;
internal [1024 * [1024 * i32]]* @B;
internal [1024 * [1024 * i32]]* @C;
func @main() -> i32 { NoRecurse Entry } {
^entry():
    i32* %n = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %n with i32 %0;
    i32* %i = alloc i32;
    i1 %1 = scmp lt i32 0, i32 %0;
    cbr i1 %1, [ ^while.body i32* %n, i32* %i, i32 %0, i32 0 ], [ ^b i32* %n, i32* %i, i32 %0 ];
^while.body(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3):
    i1 %0 = scmp lt i32 0, i32 %arg2;
    cbr i1 %0, [ ^while.body1 i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32 0 ], [ ^indirect i32* %arg, i32* %arg1, i32 %arg2, i32 %arg2, i32 %arg3 ];
^b(i32* %arg, i32* %arg1, i32 %arg2):
    i1 %0 = scmp lt i32 0, i32 %arg2;
    cbr i1 %0, [ ^while.body2 i32* %arg, i32* %arg1, i32 %arg2, i32 0 ], [ ^b1 i32* %arg, i32* %arg1, i32 %arg2 ];
^while.body1(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4):
    [1024 * i32]* %0 = getelementptr &([1024 * [1024 * i32]]* @A)[i32 0][i32 %arg3];
    i32* %1 = getelementptr &([1024 * i32]* %0)[i32 0][i32 %arg4];
    i32 %2 = call () -> i32 @getint();
    store i32* %1 with i32 %2;
    i32 %3 = add i32 %arg4, i32 1;
    i1 %4 = scmp lt i32 %3, i32 %arg2;
    cbr i1 %4, [ ^while.body1 i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32 %3 ], [ ^indirect i32* %arg, i32* %arg1, i32 %arg2, i32 %arg2, i32 %arg3 ];
^b1(i32* %arg, i32* %arg1, i32 %arg2):
    call (i32) -> void @starttime(i32 65);
    store i32* %arg1 with i32 0;
    ubr [ ^while.body4 i32* %arg1, i32* %arg, i32 %arg2, i32 0 ];
^while.body2(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3):
    i1 %0 = scmp lt i32 0, i32 %arg2;
    cbr i1 %0, [ ^while.body3 i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32 0 ], [ ^b2 i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3 ];
^indirect(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4):
    i32 %0 = add i32 %arg4, i32 1;
    i1 %1 = scmp lt i32 %0, i32 %arg2;
    cbr i1 %1, [ ^while.body i32* %arg, i32* %arg1, i32 %arg3, i32 %0 ], [ ^b i32* %arg, i32* %arg1, i32 %arg3 ];
^while.body3(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4):
    [1024 * i32]* %0 = getelementptr &([1024 * [1024 * i32]]* @B)[i32 0][i32 %arg3];
    i32* %1 = getelementptr &([1024 * i32]* %0)[i32 0][i32 %arg4];
    i32 %2 = call () -> i32 @getint();
    store i32* %1 with i32 %2;
    i32 %3 = add i32 %arg4, i32 1;
    i1 %4 = scmp lt i32 %3, i32 %arg2;
    cbr i1 %4, [ ^while.body3 i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32 %3 ], [ ^b2 i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3 ];
^b2(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3):
    i32 %0 = add i32 %arg3, i32 1;
    i1 %1 = scmp lt i32 %0, i32 %arg2;
    cbr i1 %1, [ ^while.body2 i32* %arg, i32* %arg1, i32 %arg2, i32 %0 ], [ ^b1 i32* %arg, i32* %arg1, i32 %arg2 ];
^while.body4(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3):
    [1024 * i32]* %0 = getelementptr &([1024 * [1024 * i32]]* @A)[i32 0][i32 0];
    [1024 * i32]* %1 = getelementptr &([1024 * [1024 * i32]]* @B)[i32 0][i32 0];
    [1024 * i32]* %2 = getelementptr &([1024 * [1024 * i32]]* @C)[i32 0][i32 0];
    i32* %n = alloc i32;
    store i32* %n with i32 %arg2;
    [1024 * i32]** %A = alloc [1024 * i32]*;
    [1024 * i32]** %B = alloc [1024 * i32]*;
    [1024 * i32]** %C = alloc [1024 * i32]*;
    i32* %i = alloc i32;
    i32* %j = alloc i32;
    i32* %k = alloc i32;
    store i32* %i with i32 0;
    i1 %3 = scmp lt i32 0, i32 %arg2;
    cbr i1 %3, [ ^while.body5 [1024 * i32]** %B, [1024 * i32]** %A, i32* %k, i32* %n, [1024 * i32]** %C, i32* %i, i32* %j, i32* %arg1, [1024 * i32]* %0, [1024 * i32]* %2, [1024 * i32]* %1, i32* %arg, i32 %arg2, i32 %arg3, i32 %arg2, [1024 * i32]* %0, [1024 * i32]* %1, [1024 * i32]* %2, i32 0 ], [ ^b3 i32* %n, [1024 * i32]** %C, [1024 * i32]** %B, [1024 * i32]** %A, i32* %k, i32* %j, i32* %i, i32* %arg1, [1024 * i32]* %0, [1024 * i32]* %2, [1024 * i32]* %1, i32* %arg, i32 %arg2, i32 %arg3, i32 %arg2, [1024 * i32]* %0, [1024 * i32]* %1, [1024 * i32]* %2 ];
^while.body5([1024 * i32]** %arg, [1024 * i32]** %arg1, i32* %arg2, i32* %arg3, [1024 * i32]** %arg4, i32* %arg5, i32* %arg6, i32* %arg7, [1024 * i32]* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, i32* %arg11, i32 %arg12, i32 %arg13, i32 %arg14, [1024 * i32]* %arg15, [1024 * i32]* %arg16, [1024 * i32]* %arg17, i32 %arg18):
    i1 %0 = scmp lt i32 0, i32 %arg14;
    cbr i1 %0, [ ^indirect1 [1024 * i32]** %arg, [1024 * i32]** %arg1, i32* %arg2, i32* %arg3, i32* %arg6, [1024 * i32]** %arg4, i32* %arg5, i32* %arg7, [1024 * i32]* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, i32* %arg11, [1024 * i32]* %arg15, [1024 * i32]* %arg16, [1024 * i32]* %arg17, i32 %arg18 ], [ ^indirect2 [1024 * i32]** %arg4, i32* %arg6, [1024 * i32]** %arg, [1024 * i32]** %arg1, i32* %arg2, i32* %arg3, i32* %arg5, i32 %arg14, i32* %arg7, [1024 * i32]* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, i32* %arg11, i32 %arg12, i32 %arg13, i32 %arg14, [1024 * i32]* %arg15, [1024 * i32]* %arg16, [1024 * i32]* %arg17, i32 %arg18 ];
^b3(i32* %arg, [1024 * i32]** %arg1, [1024 * i32]** %arg2, [1024 * i32]** %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, [1024 * i32]* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, i32* %arg11, i32 %arg12, i32 %arg13, i32 %arg14, [1024 * i32]* %arg15, [1024 * i32]* %arg16, [1024 * i32]* %arg17):
    store i32* %arg4 with i32 0;
    i1 %0 = scmp lt i32 0, i32 %arg14;
    cbr i1 %0, [ ^while.body6 i32* %arg, i32* %arg5, [1024 * i32]** %arg1, [1024 * i32]** %arg2, i32* %arg4, [1024 * i32]** %arg3, i32* %arg6, i32* %arg7, [1024 * i32]* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, i32* %arg11, i32 %arg12, i32 %arg13, i32 %arg14, [1024 * i32]* %arg15, [1024 * i32]* %arg16, [1024 * i32]* %arg17, i32 0 ], [ ^b4 i32* %arg, i32* %arg6, [1024 * i32]** %arg3, [1024 * i32]** %arg1, i32* %arg5, [1024 * i32]** %arg2, i32* %arg4, i32* %arg7, [1024 * i32]* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, i32* %arg11, i32 %arg12, i32 %arg13 ];
^indirect1([1024 * i32]** %arg, [1024 * i32]** %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [1024 * i32]** %arg5, i32* %arg6, i32* %arg7, [1024 * i32]* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, i32* %arg11, [1024 * i32]* %arg12, [1024 * i32]* %arg13, [1024 * i32]* %arg14, i32 %arg15):
    i32 %0 = load i32* %arg3;
    ubr [ ^while.body7 [1024 * i32]** %arg, [1024 * i32]** %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [1024 * i32]** %arg5, i32* %arg6, i32* %arg7, [1024 * i32]* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, i32* %arg11, [1024 * i32]* %arg12, [1024 * i32]* %arg13, [1024 * i32]* %arg14, i32 %arg15, i32 0, i32 %0 ];
^while.body6(i32* %arg, i32* %arg1, [1024 * i32]** %arg2, [1024 * i32]** %arg3, i32* %arg4, [1024 * i32]** %arg5, i32* %arg6, i32* %arg7, [1024 * i32]* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, i32* %arg11, i32 %arg12, i32 %arg13, i32 %arg14, [1024 * i32]* %arg15, [1024 * i32]* %arg16, [1024 * i32]* %arg17, i32 %arg18):
    store i32* %arg6 with i32 0;
    i1 %0 = scmp lt i32 0, i32 %arg14;
    cbr i1 %0, [ ^while.body8 i32* %arg1, [1024 * i32]** %arg2, [1024 * i32]** %arg3, i32* %arg, i32* %arg4, [1024 * i32]** %arg5, i32* %arg6, i32* %arg11, [1024 * i32]* %arg10, [1024 * i32]* %arg9, [1024 * i32]* %arg8, i32* %arg7, i32 %arg12, i32 %arg13, i32 %arg14, [1024 * i32]* %arg15, [1024 * i32]* %arg16, [1024 * i32]* %arg17, i32 0, i32 %arg18 ], [ ^b5 i32* %arg1, [1024 * i32]** %arg2, [1024 * i32]** %arg3, [1024 * i32]** %arg5, i32* %arg6, i32* %arg, i32* %arg4, i32* %arg7, [1024 * i32]* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, i32* %arg11, i32 %arg12, i32 %arg13, i32 %arg14, [1024 * i32]* %arg15, [1024 * i32]* %arg16, [1024 * i32]* %arg17, i32 %arg18 ];
^indirect2([1024 * i32]** %arg, i32* %arg1, [1024 * i32]** %arg2, [1024 * i32]** %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, [1024 * i32]* %arg11, i32* %arg12, i32 %arg13, i32 %arg14, i32 %arg15, [1024 * i32]* %arg16, [1024 * i32]* %arg17, [1024 * i32]* %arg18, i32 %arg19):
    i32 %0 = add i32 %arg19, i32 1;
    store i32* %arg6 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 %arg7;
    cbr i1 %1, [ ^while.body5 [1024 * i32]** %arg2, [1024 * i32]** %arg3, i32* %arg4, i32* %arg5, [1024 * i32]** %arg, i32* %arg6, i32* %arg1, i32* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, [1024 * i32]* %arg11, i32* %arg12, i32 %arg13, i32 %arg14, i32 %arg15, [1024 * i32]* %arg16, [1024 * i32]* %arg17, [1024 * i32]* %arg18, i32 %0 ], [ ^b3 i32* %arg5, [1024 * i32]** %arg, [1024 * i32]** %arg2, [1024 * i32]** %arg3, i32* %arg4, i32* %arg1, i32* %arg6, i32* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, [1024 * i32]* %arg11, i32* %arg12, i32 %arg13, i32 %arg14, i32 %arg15, [1024 * i32]* %arg16, [1024 * i32]* %arg17, [1024 * i32]* %arg18 ];
^b4(i32* %arg, i32* %arg1, [1024 * i32]** %arg2, [1024 * i32]** %arg3, i32* %arg4, [1024 * i32]** %arg5, i32* %arg6, i32* %arg7, [1024 * i32]* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, i32* %arg11, i32 %arg12, i32 %arg13):
    free i32* %arg6;
    free [1024 * i32]** %arg5;
    free i32* %arg4;
    free [1024 * i32]** %arg3;
    free [1024 * i32]** %arg2;
    free i32* %arg1;
    free i32* %arg;
    i32* %n = alloc i32;
    store i32* %n with i32 %arg12;
    [1024 * i32]** %A = alloc [1024 * i32]*;
    [1024 * i32]** %B = alloc [1024 * i32]*;
    [1024 * i32]** %C = alloc [1024 * i32]*;
    i32* %i = alloc i32;
    i32* %j = alloc i32;
    i32* %k = alloc i32;
    store i32* %i with i32 0;
    i1 %0 = scmp lt i32 0, i32 %arg12;
    cbr i1 %0, [ ^while.body9 [1024 * i32]** %B, [1024 * i32]** %A, i32* %k, i32* %n, [1024 * i32]** %C, i32* %i, i32* %j, i32* %arg11, i32* %arg7, i32 %arg12, i32 %arg13, i32 %arg12, [1024 * i32]* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, i32 0 ], [ ^b6 i32* %n, [1024 * i32]** %C, [1024 * i32]** %B, [1024 * i32]** %A, i32* %k, i32* %j, i32* %i, i32* %arg11, i32* %arg7, i32 %arg12, i32 %arg13, i32 %arg12, [1024 * i32]* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10 ];
^while.body7([1024 * i32]** %arg, [1024 * i32]** %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [1024 * i32]** %arg5, i32* %arg6, i32* %arg7, [1024 * i32]* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, i32* %arg11, [1024 * i32]* %arg12, [1024 * i32]* %arg13, [1024 * i32]* %arg14, i32 %arg15, i32 %arg16, i32 %arg17):
    [1024 * i32]* %0 = getelementptr &([1024 * i32]* %arg14)[i32 %arg15];
    i32* %1 = getelementptr &([1024 * i32]* %0)[i32 0][i32 %arg16];
    store i32* %1 with i32 0;
    i32 %2 = load i32* %arg6;
    i32 %3 = load i32* %arg11;
    i32 %4 = load i32* %arg7;
    i32 %5 = add i32 %arg16, i32 1;
    i1 %6 = scmp lt i32 %5, i32 %arg17;
    cbr i1 %6, [ ^while.body7 [1024 * i32]** %arg, [1024 * i32]** %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [1024 * i32]** %arg5, i32* %arg6, i32* %arg7, [1024 * i32]* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, i32* %arg11, [1024 * i32]* %arg12, [1024 * i32]* %arg13, [1024 * i32]* %arg14, i32 %2, i32 %5, i32 %arg17 ], [ ^indirect2 [1024 * i32]** %arg5, i32* %arg4, [1024 * i32]** %arg, [1024 * i32]** %arg1, i32* %arg2, i32* %arg3, i32* %arg6, i32 %arg17, i32* %arg7, [1024 * i32]* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, i32* %arg11, i32 %4, i32 %3, i32 %arg17, [1024 * i32]* %arg12, [1024 * i32]* %arg13, [1024 * i32]* %arg14, i32 %2 ];
^while.body8(i32* %arg, [1024 * i32]** %arg1, [1024 * i32]** %arg2, i32* %arg3, i32* %arg4, [1024 * i32]** %arg5, i32* %arg6, i32* %arg7, [1024 * i32]* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, i32* %arg11, i32 %arg12, i32 %arg13, i32 %arg14, [1024 * i32]* %arg15, [1024 * i32]* %arg16, [1024 * i32]* %arg17, i32 %arg18, i32 %arg19):
    [1024 * i32]* %0 = getelementptr &([1024 * i32]* %arg15)[i32 %arg18];
    i32* %1 = getelementptr &([1024 * i32]* %0)[i32 0][i32 %arg19];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %2, i32 0;
    cbr i1 %3, [ ^indirect4 i32* %arg, [1024 * i32]** %arg1, [1024 * i32]** %arg2, i32* %arg4, [1024 * i32]** %arg5, i32* %arg3, i32* %arg6, i32 %arg18, i32* %arg11, [1024 * i32]* %arg10, [1024 * i32]* %arg9, [1024 * i32]* %arg8, i32* %arg7, i32 %arg12, i32 %arg13, i32 %arg14, [1024 * i32]* %arg15, [1024 * i32]* %arg16, [1024 * i32]* %arg17, i32 %arg19 ], [ ^b7 i32* %arg3, [1024 * i32]** %arg2, i32* %arg4, [1024 * i32]** %arg5, [1024 * i32]** %arg1, i32* %arg6, i32* %arg, i32* %arg11, [1024 * i32]* %arg10, [1024 * i32]* %arg9, [1024 * i32]* %arg8, i32* %arg7, i32 %arg12, i32 %arg13, i32 %arg14, [1024 * i32]* %arg15, [1024 * i32]* %arg16, [1024 * i32]* %arg17, i32 %arg18, i32 %arg19 ];
^b5(i32* %arg, [1024 * i32]** %arg1, [1024 * i32]** %arg2, [1024 * i32]** %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, [1024 * i32]* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, i32* %arg11, i32 %arg12, i32 %arg13, i32 %arg14, [1024 * i32]* %arg15, [1024 * i32]* %arg16, [1024 * i32]* %arg17, i32 %arg18):
    i32 %0 = add i32 %arg18, i32 1;
    store i32* %arg6 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 %arg14;
    cbr i1 %1, [ ^while.body6 i32* %arg5, i32* %arg, [1024 * i32]** %arg1, [1024 * i32]** %arg2, i32* %arg6, [1024 * i32]** %arg3, i32* %arg4, i32* %arg7, [1024 * i32]* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, i32* %arg11, i32 %arg12, i32 %arg13, i32 %arg14, [1024 * i32]* %arg15, [1024 * i32]* %arg16, [1024 * i32]* %arg17, i32 %0 ], [ ^b4 i32* %arg5, i32* %arg4, [1024 * i32]** %arg3, [1024 * i32]** %arg1, i32* %arg, [1024 * i32]** %arg2, i32* %arg6, i32* %arg7, [1024 * i32]* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, i32* %arg11, i32 %arg12, i32 %arg13 ];
^while.body9([1024 * i32]** %arg, [1024 * i32]** %arg1, i32* %arg2, i32* %arg3, [1024 * i32]** %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, [1024 * i32]* %arg12, [1024 * i32]* %arg13, [1024 * i32]* %arg14, i32 %arg15):
    i1 %0 = scmp lt i32 0, i32 %arg11;
    cbr i1 %0, [ ^indirect3 [1024 * i32]** %arg, [1024 * i32]** %arg1, i32* %arg2, i32* %arg3, i32* %arg6, [1024 * i32]** %arg4, i32* %arg5, i32* %arg7, i32* %arg8, [1024 * i32]* %arg12, [1024 * i32]* %arg13, [1024 * i32]* %arg14, i32 %arg15 ], [ ^indirect5 [1024 * i32]** %arg4, i32* %arg6, [1024 * i32]** %arg, [1024 * i32]** %arg1, i32* %arg2, i32* %arg3, i32* %arg5, i32 %arg11, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, [1024 * i32]* %arg12, [1024 * i32]* %arg13, [1024 * i32]* %arg14, i32 %arg15 ];
^b6(i32* %arg, [1024 * i32]** %arg1, [1024 * i32]** %arg2, [1024 * i32]** %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, [1024 * i32]* %arg12, [1024 * i32]* %arg13, [1024 * i32]* %arg14):
    store i32* %arg4 with i32 0;
    i1 %0 = scmp lt i32 0, i32 %arg11;
    cbr i1 %0, [ ^while.body10 i32* %arg, i32* %arg5, [1024 * i32]** %arg1, [1024 * i32]** %arg2, i32* %arg4, [1024 * i32]** %arg3, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, [1024 * i32]* %arg12, [1024 * i32]* %arg13, [1024 * i32]* %arg14, i32 0 ], [ ^b8 i32* %arg, i32* %arg6, [1024 * i32]** %arg3, [1024 * i32]** %arg1, i32* %arg5, [1024 * i32]** %arg2, i32* %arg4, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10 ];
^indirect3([1024 * i32]** %arg, [1024 * i32]** %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [1024 * i32]** %arg5, i32* %arg6, i32* %arg7, i32* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, [1024 * i32]* %arg11, i32 %arg12):
    i32 %0 = load i32* %arg3;
    ubr [ ^while.body11 [1024 * i32]** %arg, [1024 * i32]** %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [1024 * i32]** %arg5, i32* %arg6, i32* %arg7, i32* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, [1024 * i32]* %arg11, i32 %arg12, i32 0, i32 %0 ];
^indirect4(i32* %arg, [1024 * i32]** %arg1, [1024 * i32]** %arg2, i32* %arg3, [1024 * i32]** %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, [1024 * i32]* %arg11, i32* %arg12, i32 %arg13, i32 %arg14, i32 %arg15, [1024 * i32]* %arg16, [1024 * i32]* %arg17, [1024 * i32]* %arg18, i32 %arg19):
    i32 %0 = add i32 %arg7, i32 1;
    store i32* %arg6 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 %arg15;
    cbr i1 %1, [ ^while.body8 i32* %arg, [1024 * i32]** %arg1, [1024 * i32]** %arg2, i32* %arg5, i32* %arg3, [1024 * i32]** %arg4, i32* %arg6, i32* %arg12, [1024 * i32]* %arg11, [1024 * i32]* %arg10, [1024 * i32]* %arg9, i32* %arg8, i32 %arg13, i32 %arg14, i32 %arg15, [1024 * i32]* %arg16, [1024 * i32]* %arg17, [1024 * i32]* %arg18, i32 %0, i32 %arg19 ], [ ^b5 i32* %arg, [1024 * i32]** %arg1, [1024 * i32]** %arg2, [1024 * i32]** %arg4, i32* %arg6, i32* %arg5, i32* %arg3, i32* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, [1024 * i32]* %arg11, i32* %arg12, i32 %arg13, i32 %arg14, i32 %arg15, [1024 * i32]* %arg16, [1024 * i32]* %arg17, [1024 * i32]* %arg18, i32 %arg19 ];
^b7(i32* %arg, [1024 * i32]** %arg1, i32* %arg2, [1024 * i32]** %arg3, [1024 * i32]** %arg4, i32* %arg5, i32* %arg6, i32* %arg7, [1024 * i32]* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, i32* %arg11, i32 %arg12, i32 %arg13, i32 %arg14, [1024 * i32]* %arg15, [1024 * i32]* %arg16, [1024 * i32]* %arg17, i32 %arg18, i32 %arg19):
    i1 %0 = scmp lt i32 0, i32 %arg14;
    cbr i1 %0, [ ^indirect6 i32* %arg, [1024 * i32]** %arg1, i32* %arg2, [1024 * i32]** %arg3, i32* %arg6, [1024 * i32]** %arg4, i32* %arg5, i32* %arg7, [1024 * i32]* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, i32* %arg11, [1024 * i32]* %arg15, [1024 * i32]* %arg16, [1024 * i32]* %arg17, i32 %arg18, i32 %arg19 ], [ ^b9 i32* %arg6, [1024 * i32]** %arg4, [1024 * i32]** %arg1, i32* %arg2, [1024 * i32]** %arg3, i32* %arg, i32* %arg5, i32* %arg7, [1024 * i32]* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, i32* %arg11, i32 %arg12, i32 %arg13, i32 %arg14, [1024 * i32]* %arg15, [1024 * i32]* %arg16, [1024 * i32]* %arg17, i32 %arg18, i32 %arg19 ];
^while.body10(i32* %arg, i32* %arg1, [1024 * i32]** %arg2, [1024 * i32]** %arg3, i32* %arg4, [1024 * i32]** %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, [1024 * i32]* %arg12, [1024 * i32]* %arg13, [1024 * i32]* %arg14, i32 %arg15):
    store i32* %arg6 with i32 0;
    i1 %0 = scmp lt i32 0, i32 %arg11;
    cbr i1 %0, [ ^while.body12 i32* %arg1, [1024 * i32]** %arg2, [1024 * i32]** %arg3, i32* %arg, i32* %arg4, [1024 * i32]** %arg5, i32* %arg6, i32* %arg8, i32* %arg7, i32 %arg9, i32 %arg10, i32 %arg11, [1024 * i32]* %arg12, [1024 * i32]* %arg13, [1024 * i32]* %arg14, i32 0, i32 %arg15 ], [ ^b10 i32* %arg1, [1024 * i32]** %arg2, [1024 * i32]** %arg3, [1024 * i32]** %arg5, i32* %arg6, i32* %arg, i32* %arg4, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, [1024 * i32]* %arg12, [1024 * i32]* %arg13, [1024 * i32]* %arg14, i32 %arg15 ];
^indirect5([1024 * i32]** %arg, i32* %arg1, [1024 * i32]** %arg2, [1024 * i32]** %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, [1024 * i32]* %arg13, [1024 * i32]* %arg14, [1024 * i32]* %arg15, i32 %arg16):
    i32 %0 = add i32 %arg16, i32 1;
    store i32* %arg6 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 %arg7;
    cbr i1 %1, [ ^while.body9 [1024 * i32]** %arg2, [1024 * i32]** %arg3, i32* %arg4, i32* %arg5, [1024 * i32]** %arg, i32* %arg6, i32* %arg1, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, [1024 * i32]* %arg13, [1024 * i32]* %arg14, [1024 * i32]* %arg15, i32 %0 ], [ ^b6 i32* %arg5, [1024 * i32]** %arg, [1024 * i32]** %arg2, [1024 * i32]** %arg3, i32* %arg4, i32* %arg1, i32* %arg6, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, [1024 * i32]* %arg13, [1024 * i32]* %arg14, [1024 * i32]* %arg15 ];
^b8(i32* %arg, i32* %arg1, [1024 * i32]** %arg2, [1024 * i32]** %arg3, i32* %arg4, [1024 * i32]** %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10):
    free i32* %arg6;
    free [1024 * i32]** %arg5;
    free i32* %arg4;
    free [1024 * i32]** %arg3;
    free [1024 * i32]** %arg2;
    free i32* %arg1;
    free i32* %arg;
    i32 %0 = add i32 %arg10, i32 1;
    store i32* %arg7 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 5;
    cbr i1 %1, [ ^while.body4 i32* %arg7, i32* %arg8, i32 %arg9, i32 %0 ], [ ^b11 i32 %arg9 ];
^indirect6(i32* %arg, [1024 * i32]** %arg1, i32* %arg2, [1024 * i32]** %arg3, i32* %arg4, [1024 * i32]** %arg5, i32* %arg6, i32* %arg7, [1024 * i32]* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, i32* %arg11, [1024 * i32]* %arg12, [1024 * i32]* %arg13, [1024 * i32]* %arg14, i32 %arg15, i32 %arg16):
    i32 %0 = load i32* %arg;
    ubr [ ^while.body13 i32* %arg, [1024 * i32]** %arg1, i32* %arg2, [1024 * i32]** %arg3, i32* %arg4, [1024 * i32]** %arg5, i32* %arg6, i32* %arg7, [1024 * i32]* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, i32* %arg11, [1024 * i32]* %arg12, [1024 * i32]* %arg13, [1024 * i32]* %arg14, i32 %arg15, i32 0, i32 %arg16, i32 %0 ];
^while.body11([1024 * i32]** %arg, [1024 * i32]** %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [1024 * i32]** %arg5, i32* %arg6, i32* %arg7, i32* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, [1024 * i32]* %arg11, i32 %arg12, i32 %arg13, i32 %arg14):
    [1024 * i32]* %0 = getelementptr &([1024 * i32]* %arg11)[i32 %arg12];
    i32* %1 = getelementptr &([1024 * i32]* %0)[i32 0][i32 %arg13];
    store i32* %1 with i32 0;
    i32 %2 = load i32* %arg6;
    i32 %3 = load i32* %arg7;
    i32 %4 = load i32* %arg8;
    i32 %5 = add i32 %arg13, i32 1;
    i1 %6 = scmp lt i32 %5, i32 %arg14;
    cbr i1 %6, [ ^while.body11 [1024 * i32]** %arg, [1024 * i32]** %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [1024 * i32]** %arg5, i32* %arg6, i32* %arg7, i32* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, [1024 * i32]* %arg11, i32 %2, i32 %5, i32 %arg14 ], [ ^indirect5 [1024 * i32]** %arg5, i32* %arg4, [1024 * i32]** %arg, [1024 * i32]** %arg1, i32* %arg2, i32* %arg3, i32* %arg6, i32 %arg14, i32* %arg7, i32* %arg8, i32 %4, i32 %3, i32 %arg14, [1024 * i32]* %arg9, [1024 * i32]* %arg10, [1024 * i32]* %arg11, i32 %2 ];
^b9(i32* %arg, [1024 * i32]** %arg1, [1024 * i32]** %arg2, i32* %arg3, [1024 * i32]** %arg4, i32* %arg5, i32* %arg6, i32* %arg7, [1024 * i32]* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, i32* %arg11, i32 %arg12, i32 %arg13, i32 %arg14, [1024 * i32]* %arg15, [1024 * i32]* %arg16, [1024 * i32]* %arg17, i32 %arg18, i32 %arg19):
    i32 %0 = add i32 %arg18, i32 1;
    store i32* %arg6 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 %arg14;
    cbr i1 %1, [ ^while.body8 i32* %arg, [1024 * i32]** %arg1, [1024 * i32]** %arg2, i32* %arg5, i32* %arg3, [1024 * i32]** %arg4, i32* %arg6, i32* %arg11, [1024 * i32]* %arg10, [1024 * i32]* %arg9, [1024 * i32]* %arg8, i32* %arg7, i32 %arg12, i32 %arg13, i32 %arg14, [1024 * i32]* %arg15, [1024 * i32]* %arg16, [1024 * i32]* %arg17, i32 %0, i32 %arg19 ], [ ^b5 i32* %arg, [1024 * i32]** %arg1, [1024 * i32]** %arg2, [1024 * i32]** %arg4, i32* %arg6, i32* %arg5, i32* %arg3, i32* %arg7, [1024 * i32]* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, i32* %arg11, i32 %arg12, i32 %arg13, i32 %arg14, [1024 * i32]* %arg15, [1024 * i32]* %arg16, [1024 * i32]* %arg17, i32 %arg19 ];
^while.body12(i32* %arg, [1024 * i32]** %arg1, [1024 * i32]** %arg2, i32* %arg3, i32* %arg4, [1024 * i32]** %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, [1024 * i32]* %arg12, [1024 * i32]* %arg13, [1024 * i32]* %arg14, i32 %arg15, i32 %arg16):
    [1024 * i32]* %0 = getelementptr &([1024 * i32]* %arg12)[i32 %arg15];
    i32* %1 = getelementptr &([1024 * i32]* %0)[i32 0][i32 %arg16];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %2, i32 0;
    cbr i1 %3, [ ^indirect7 i32* %arg, [1024 * i32]** %arg1, [1024 * i32]** %arg2, i32* %arg4, [1024 * i32]** %arg5, i32* %arg3, i32* %arg6, i32 %arg15, i32* %arg8, i32* %arg7, i32 %arg9, i32 %arg10, i32 %arg11, [1024 * i32]* %arg12, [1024 * i32]* %arg13, [1024 * i32]* %arg14, i32 %arg16 ], [ ^b12 i32* %arg3, [1024 * i32]** %arg2, i32* %arg4, [1024 * i32]** %arg5, [1024 * i32]** %arg1, i32* %arg6, i32* %arg, i32* %arg8, i32* %arg7, i32 %arg9, i32 %arg10, i32 %arg11, [1024 * i32]* %arg12, [1024 * i32]* %arg13, [1024 * i32]* %arg14, i32 %arg15, i32 %arg16 ];
^b10(i32* %arg, [1024 * i32]** %arg1, [1024 * i32]** %arg2, [1024 * i32]** %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, [1024 * i32]* %arg12, [1024 * i32]* %arg13, [1024 * i32]* %arg14, i32 %arg15):
    i32 %0 = add i32 %arg15, i32 1;
    store i32* %arg6 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 %arg11;
    cbr i1 %1, [ ^while.body10 i32* %arg5, i32* %arg, [1024 * i32]** %arg1, [1024 * i32]** %arg2, i32* %arg6, [1024 * i32]** %arg3, i32* %arg4, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, [1024 * i32]* %arg12, [1024 * i32]* %arg13, [1024 * i32]* %arg14, i32 %0 ], [ ^b8 i32* %arg5, i32* %arg4, [1024 * i32]** %arg3, [1024 * i32]** %arg1, i32* %arg, [1024 * i32]** %arg2, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10 ];
^b11(i32 %arg):
    i1 %0 = scmp lt i32 0, i32 %arg;
    cbr i1 %0, [ ^while.body14 i32 %arg, i32 0, i32 0 ], [ ^b13 i32 0 ];
^while.body13(i32* %arg, [1024 * i32]** %arg1, i32* %arg2, [1024 * i32]** %arg3, i32* %arg4, [1024 * i32]** %arg5, i32* %arg6, i32* %arg7, [1024 * i32]* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, i32* %arg11, [1024 * i32]* %arg12, [1024 * i32]* %arg13, [1024 * i32]* %arg14, i32 %arg15, i32 %arg16, i32 %arg17, i32 %arg18):
    [1024 * i32]* %0 = getelementptr &([1024 * i32]* %arg14)[i32 %arg15];
    i32* %1 = getelementptr &([1024 * i32]* %0)[i32 0][i32 %arg16];
    i32 %2 = load i32* %1;
    [1024 * i32]* %3 = getelementptr &([1024 * i32]* %arg12)[i32 %arg15];
    i32* %4 = getelementptr &([1024 * i32]* %3)[i32 0][i32 %arg17];
    i32 %5 = load i32* %4;
    [1024 * i32]* %6 = getelementptr &([1024 * i32]* %arg13)[i32 %arg17];
    i32* %7 = getelementptr &([1024 * i32]* %6)[i32 0][i32 %arg16];
    i32 %8 = load i32* %7;
    i32 %9 = mul i32 %5, i32 %8;
    i32 %10 = add i32 %2, i32 %9;
    store i32* %1 with i32 %10;
    i32 %11 = load i32* %arg2;
    i32 %12 = load i32* %arg6;
    i32 %13 = load i32* %arg11;
    i32 %14 = load i32* %arg7;
    i32 %15 = add i32 %arg16, i32 1;
    i1 %16 = scmp lt i32 %15, i32 %arg18;
    cbr i1 %16, [ ^while.body13 i32* %arg, [1024 * i32]** %arg1, i32* %arg2, [1024 * i32]** %arg3, i32* %arg4, [1024 * i32]** %arg5, i32* %arg6, i32* %arg7, [1024 * i32]* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, i32* %arg11, [1024 * i32]* %arg12, [1024 * i32]* %arg13, [1024 * i32]* %arg14, i32 %12, i32 %15, i32 %11, i32 %arg18 ], [ ^b9 i32* %arg4, [1024 * i32]** %arg5, [1024 * i32]** %arg1, i32* %arg2, [1024 * i32]** %arg3, i32* %arg, i32* %arg6, i32* %arg7, [1024 * i32]* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, i32* %arg11, i32 %14, i32 %13, i32 %arg18, [1024 * i32]* %arg12, [1024 * i32]* %arg13, [1024 * i32]* %arg14, i32 %12, i32 %11 ];
^indirect7(i32* %arg, [1024 * i32]** %arg1, [1024 * i32]** %arg2, i32* %arg3, [1024 * i32]** %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, [1024 * i32]* %arg13, [1024 * i32]* %arg14, [1024 * i32]* %arg15, i32 %arg16):
    i32 %0 = add i32 %arg7, i32 1;
    store i32* %arg6 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 %arg12;
    cbr i1 %1, [ ^while.body12 i32* %arg, [1024 * i32]** %arg1, [1024 * i32]** %arg2, i32* %arg5, i32* %arg3, [1024 * i32]** %arg4, i32* %arg6, i32* %arg9, i32* %arg8, i32 %arg10, i32 %arg11, i32 %arg12, [1024 * i32]* %arg13, [1024 * i32]* %arg14, [1024 * i32]* %arg15, i32 %0, i32 %arg16 ], [ ^b10 i32* %arg, [1024 * i32]** %arg1, [1024 * i32]** %arg2, [1024 * i32]** %arg4, i32* %arg6, i32* %arg5, i32* %arg3, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, [1024 * i32]* %arg13, [1024 * i32]* %arg14, [1024 * i32]* %arg15, i32 %arg16 ];
^b12(i32* %arg, [1024 * i32]** %arg1, i32* %arg2, [1024 * i32]** %arg3, [1024 * i32]** %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, [1024 * i32]* %arg12, [1024 * i32]* %arg13, [1024 * i32]* %arg14, i32 %arg15, i32 %arg16):
    i1 %0 = scmp lt i32 0, i32 %arg11;
    cbr i1 %0, [ ^indirect8 i32* %arg, [1024 * i32]** %arg1, i32* %arg2, [1024 * i32]** %arg3, i32* %arg6, [1024 * i32]** %arg4, i32* %arg5, i32* %arg7, i32* %arg8, [1024 * i32]* %arg12, [1024 * i32]* %arg13, [1024 * i32]* %arg14, i32 %arg15, i32 %arg16 ], [ ^b14 i32* %arg6, [1024 * i32]** %arg4, [1024 * i32]** %arg1, i32* %arg2, [1024 * i32]** %arg3, i32* %arg, i32* %arg5, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, [1024 * i32]* %arg12, [1024 * i32]* %arg13, [1024 * i32]* %arg14, i32 %arg15, i32 %arg16 ];
^while.body14(i32 %arg, i32 %arg1, i32 %arg2):
    i1 %0 = scmp lt i32 0, i32 %arg;
    cbr i1 %0, [ ^while.body15 i32 %arg, i32 %arg1, i32 0, i32 %arg2 ], [ ^b15 i32 %arg, i32 %arg1, i32 %arg2 ];
^b13(i32 %arg):
    call (i32) -> void @stoptime(i32 84);
    call (i32) -> void @putint(i32 %arg);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^indirect8(i32* %arg, [1024 * i32]** %arg1, i32* %arg2, [1024 * i32]** %arg3, i32* %arg4, [1024 * i32]** %arg5, i32* %arg6, i32* %arg7, i32* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, [1024 * i32]* %arg11, i32 %arg12, i32 %arg13):
    i32 %0 = load i32* %arg;
    ubr [ ^while.body16 i32* %arg, [1024 * i32]** %arg1, i32* %arg2, [1024 * i32]** %arg3, i32* %arg4, [1024 * i32]** %arg5, i32* %arg6, i32* %arg7, i32* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, [1024 * i32]* %arg11, i32 %arg12, i32 0, i32 %arg13, i32 %0 ];
^while.body15(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    [1024 * i32]* %0 = getelementptr &([1024 * [1024 * i32]]* @B)[i32 0][i32 %arg1];
    i32* %1 = getelementptr &([1024 * i32]* %0)[i32 0][i32 %arg2];
    i32 %2 = load i32* %1;
    i32 %3 = add i32 %arg3, i32 %2;
    i32 %4 = add i32 %arg2, i32 1;
    i1 %5 = scmp lt i32 %4, i32 %arg;
    cbr i1 %5, [ ^while.body15 i32 %arg, i32 %arg1, i32 %4, i32 %3 ], [ ^b15 i32 %arg, i32 %arg1, i32 %3 ];
^b14(i32* %arg, [1024 * i32]** %arg1, [1024 * i32]** %arg2, i32* %arg3, [1024 * i32]** %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, [1024 * i32]* %arg12, [1024 * i32]* %arg13, [1024 * i32]* %arg14, i32 %arg15, i32 %arg16):
    i32 %0 = add i32 %arg15, i32 1;
    store i32* %arg6 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 %arg11;
    cbr i1 %1, [ ^while.body12 i32* %arg, [1024 * i32]** %arg1, [1024 * i32]** %arg2, i32* %arg5, i32* %arg3, [1024 * i32]** %arg4, i32* %arg6, i32* %arg8, i32* %arg7, i32 %arg9, i32 %arg10, i32 %arg11, [1024 * i32]* %arg12, [1024 * i32]* %arg13, [1024 * i32]* %arg14, i32 %0, i32 %arg16 ], [ ^b10 i32* %arg, [1024 * i32]** %arg1, [1024 * i32]** %arg2, [1024 * i32]** %arg4, i32* %arg6, i32* %arg5, i32* %arg3, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, [1024 * i32]* %arg12, [1024 * i32]* %arg13, [1024 * i32]* %arg14, i32 %arg16 ];
^b15(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = add i32 %arg1, i32 1;
    i1 %1 = scmp lt i32 %0, i32 %arg;
    cbr i1 %1, [ ^while.body14 i32 %arg, i32 %0, i32 %arg2 ], [ ^b13 i32 %arg2 ];
^while.body16(i32* %arg, [1024 * i32]** %arg1, i32* %arg2, [1024 * i32]** %arg3, i32* %arg4, [1024 * i32]** %arg5, i32* %arg6, i32* %arg7, i32* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, [1024 * i32]* %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15):
    [1024 * i32]* %0 = getelementptr &([1024 * i32]* %arg11)[i32 %arg12];
    i32* %1 = getelementptr &([1024 * i32]* %0)[i32 0][i32 %arg13];
    i32 %2 = load i32* %1;
    [1024 * i32]* %3 = getelementptr &([1024 * i32]* %arg9)[i32 %arg12];
    i32* %4 = getelementptr &([1024 * i32]* %3)[i32 0][i32 %arg14];
    i32 %5 = load i32* %4;
    [1024 * i32]* %6 = getelementptr &([1024 * i32]* %arg10)[i32 %arg14];
    i32* %7 = getelementptr &([1024 * i32]* %6)[i32 0][i32 %arg13];
    i32 %8 = load i32* %7;
    i32 %9 = mul i32 %5, i32 %8;
    i32 %10 = add i32 %2, i32 %9;
    store i32* %1 with i32 %10;
    i32 %11 = load i32* %arg2;
    i32 %12 = load i32* %arg6;
    i32 %13 = load i32* %arg7;
    i32 %14 = load i32* %arg8;
    i32 %15 = add i32 %arg13, i32 1;
    i1 %16 = scmp lt i32 %15, i32 %arg15;
    cbr i1 %16, [ ^while.body16 i32* %arg, [1024 * i32]** %arg1, i32* %arg2, [1024 * i32]** %arg3, i32* %arg4, [1024 * i32]** %arg5, i32* %arg6, i32* %arg7, i32* %arg8, [1024 * i32]* %arg9, [1024 * i32]* %arg10, [1024 * i32]* %arg11, i32 %12, i32 %15, i32 %11, i32 %arg15 ], [ ^b14 i32* %arg4, [1024 * i32]** %arg5, [1024 * i32]** %arg1, i32* %arg2, [1024 * i32]** %arg3, i32* %arg, i32* %arg6, i32* %arg7, i32* %arg8, i32 %14, i32 %13, i32 %arg15, [1024 * i32]* %arg9, [1024 * i32]* %arg10, [1024 * i32]* %arg11, i32 %12, i32 %11 ];
}
