internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @set(i32* %a, i32 %pos, i32 %d) -> i32 {
^entry:
    i32* %v = alloc i32;
    i32* %i = alloc i32;
    [31 * i32]* %x = alloc [31 * i32];
    i32* %bitcount = alloc i32;
    i32* %d1 = alloc i32;
    i32* %pos1 = alloc i32;
    i32** %a1 = alloc i32*;
    store i32** %a1 with i32* %a;
    store i32* %pos1 with i32 %pos;
    store i32* %d1 with i32 %d;
    store i32* %bitcount with i32 30;
    i32* %0 = getelementptr &([31 * i32]* %x)[i64 1][i64 0];
    i32* %1 = getelementptr &([31 * i32]* %x)[i64 0][i64 0];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([31 * i32]* %x)[i64 0][i64 1];
    store i32* %2 with i32 0;
    i32* %3 = getelementptr &([31 * i32]* %x)[i64 0][i64 2];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([31 * i32]* %x)[i64 0][i64 3];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([31 * i32]* %x)[i64 0][i64 4];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([31 * i32]* %x)[i64 0][i64 5];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([31 * i32]* %x)[i64 0][i64 6];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([31 * i32]* %x)[i64 0][i64 7];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([31 * i32]* %x)[i64 0][i64 8];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([31 * i32]* %x)[i64 0][i64 9];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([31 * i32]* %x)[i64 0][i64 10];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([31 * i32]* %x)[i64 0][i64 11];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([31 * i32]* %x)[i64 0][i64 12];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([31 * i32]* %x)[i64 0][i64 13];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([31 * i32]* %x)[i64 0][i64 14];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([31 * i32]* %x)[i64 0][i64 15];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([31 * i32]* %x)[i64 0][i64 16];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([31 * i32]* %x)[i64 0][i64 17];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([31 * i32]* %x)[i64 0][i64 18];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &([31 * i32]* %x)[i64 0][i64 19];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &([31 * i32]* %x)[i64 0][i64 20];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &([31 * i32]* %x)[i64 0][i64 21];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &([31 * i32]* %x)[i64 0][i64 22];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &([31 * i32]* %x)[i64 0][i64 23];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &([31 * i32]* %x)[i64 0][i64 24];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &([31 * i32]* %x)[i64 0][i64 25];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &([31 * i32]* %x)[i64 0][i64 26];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &([31 * i32]* %x)[i64 0][i64 27];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &([31 * i32]* %x)[i64 0][i64 28];
    store i32* %29 with i32 0;
    i32* %30 = getelementptr &([31 * i32]* %x)[i64 0][i64 29];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &([31 * i32]* %x)[i64 0][i64 30];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &([31 * i32]* %x)[i64 0][i64 0];
    store i32* %32 with i32 1;
    i32* %33 = getelementptr &([31 * i32]* %x)[i64 0][i64 1];
    i32* %34 = getelementptr &([31 * i32]* %x)[i64 0][i64 0];
    i32 %35 = load i32* %34;
    i32 %36 = mul i32 %35, i32 2;
    store i32* %33 with i32 %36;
    i32* %37 = getelementptr &([31 * i32]* %x)[i64 0][i64 2];
    i32* %38 = getelementptr &([31 * i32]* %x)[i64 0][i64 1];
    i32 %39 = load i32* %38;
    i32 %40 = mul i32 %39, i32 2;
    store i32* %37 with i32 %40;
    i32* %41 = getelementptr &([31 * i32]* %x)[i64 0][i64 3];
    i32* %42 = getelementptr &([31 * i32]* %x)[i64 0][i64 2];
    i32 %43 = load i32* %42;
    i32 %44 = mul i32 %43, i32 2;
    store i32* %41 with i32 %44;
    i32* %45 = getelementptr &([31 * i32]* %x)[i64 0][i64 4];
    i32* %46 = getelementptr &([31 * i32]* %x)[i64 0][i64 3];
    i32 %47 = load i32* %46;
    i32 %48 = mul i32 %47, i32 2;
    store i32* %45 with i32 %48;
    i32* %49 = getelementptr &([31 * i32]* %x)[i64 0][i64 5];
    i32* %50 = getelementptr &([31 * i32]* %x)[i64 0][i64 4];
    i32 %51 = load i32* %50;
    i32 %52 = mul i32 %51, i32 2;
    store i32* %49 with i32 %52;
    i32* %53 = getelementptr &([31 * i32]* %x)[i64 0][i64 6];
    i32* %54 = getelementptr &([31 * i32]* %x)[i64 0][i64 5];
    i32 %55 = load i32* %54;
    i32 %56 = mul i32 %55, i32 2;
    store i32* %53 with i32 %56;
    i32* %57 = getelementptr &([31 * i32]* %x)[i64 0][i64 7];
    i32* %58 = getelementptr &([31 * i32]* %x)[i64 0][i64 6];
    i32 %59 = load i32* %58;
    i32 %60 = mul i32 %59, i32 2;
    store i32* %57 with i32 %60;
    i32* %61 = getelementptr &([31 * i32]* %x)[i64 0][i64 8];
    i32* %62 = getelementptr &([31 * i32]* %x)[i64 0][i64 7];
    i32 %63 = load i32* %62;
    i32 %64 = mul i32 %63, i32 2;
    store i32* %61 with i32 %64;
    i32* %65 = getelementptr &([31 * i32]* %x)[i64 0][i64 9];
    i32* %66 = getelementptr &([31 * i32]* %x)[i64 0][i64 8];
    i32 %67 = load i32* %66;
    i32 %68 = mul i32 %67, i32 2;
    store i32* %65 with i32 %68;
    i32* %69 = getelementptr &([31 * i32]* %x)[i64 0][i64 10];
    i32* %70 = getelementptr &([31 * i32]* %x)[i64 0][i64 9];
    i32 %71 = load i32* %70;
    i32 %72 = mul i32 %71, i32 2;
    store i32* %69 with i32 %72;
    store i32* %i with i32 10;
    ubr ^while.header;
^while.header:
    i32 %73 = load i32* %i;
    i1 %74 = scmp lt i32 %73, i32 30;
    i32 %75 = zext i1 %74 to i32;
    i1 %76 = scmp neq i32 %75, i32 0;
    cbr i1 %76(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %77 = load i32* %i;
    i32 %78 = add i32 %77, i32 1;
    store i32* %i with i32 %78;
    i32 %79 = load i32* %i;
    i64 %80 = sext i32 %79 to i64;
    i32* %81 = getelementptr &([31 * i32]* %x)[i64 0][i64 %80];
    i32 %82 = load i32* %i;
    i32 %83 = sub i32 %82, i32 1;
    i64 %84 = sext i32 %83 to i64;
    i32* %85 = getelementptr &([31 * i32]* %x)[i64 0][i64 %84];
    i32 %86 = load i32* %85;
    i32 %87 = mul i32 %86, i32 2;
    store i32* %81 with i32 %87;
    ubr ^while.header;
^b:
    store i32* %v with i32 0;
    i32 %88 = load i32* %pos1;
    i32 %89 = sdiv i32 %88, i32 30;
    i1 %90 = scmp ge i32 %89, i32 10000;
    i32 %91 = zext i1 %90 to i32;
    i1 %92 = scmp neq i32 %91, i32 0;
    cbr i1 %92(prob = 0.5), ^if.then, ^b1;
^b1:
    i32 %93 = load i32* %pos1;
    i32 %94 = sdiv i32 %93, i32 30;
    i64 %95 = sext i32 %94 to i64;
    i32* %96 = load i32** %a1;
    i32* %97 = getelementptr &(i32* %96)[i64 %95];
    i32 %98 = load i32* %97;
    i32 %99 = load i32* %pos1;
    i32 %100 = srem i32 %99, i32 30;
    i64 %101 = sext i32 %100 to i64;
    i32* %102 = getelementptr &([31 * i32]* %x)[i64 0][i64 %101];
    i32 %103 = load i32* %102;
    i32 %104 = sdiv i32 %98, i32 %103;
    i32 %105 = srem i32 %104, i32 2;
    i32 %106 = load i32* %d1;
    i1 %107 = scmp neq i32 %105, i32 %106;
    i32 %108 = zext i1 %107 to i32;
    i1 %109 = scmp neq i32 %108, i32 0;
    cbr i1 %109(prob = 0.5), ^if.then1, ^b2;
^if.then:
    ret i32 0;
^if.then1:
    i32 %110 = load i32* %pos1;
    i32 %111 = sdiv i32 %110, i32 30;
    i64 %112 = sext i32 %111 to i64;
    i32* %113 = load i32** %a1;
    i32* %114 = getelementptr &(i32* %113)[i64 %112];
    i32 %115 = load i32* %114;
    i32 %116 = load i32* %pos1;
    i32 %117 = srem i32 %116, i32 30;
    i64 %118 = sext i32 %117 to i64;
    i32* %119 = getelementptr &([31 * i32]* %x)[i64 0][i64 %118];
    i32 %120 = load i32* %119;
    i32 %121 = sdiv i32 %115, i32 %120;
    i32 %122 = srem i32 %121, i32 2;
    i1 %123 = scmp eq i32 %122, i32 0;
    i32 %124 = zext i1 %123 to i32;
    i1 %125 = scmp neq i32 %124, i32 0;
    cbr i1 %125(prob = 0.5), ^if.then2, ^b3;
^b2:
    i32 %126 = load i32* %pos1;
    i32 %127 = sdiv i32 %126, i32 30;
    i64 %128 = sext i32 %127 to i64;
    i32* %129 = load i32** %a1;
    i32* %130 = getelementptr &(i32* %129)[i64 %128];
    i32 %131 = load i32* %pos1;
    i32 %132 = sdiv i32 %131, i32 30;
    i64 %133 = sext i32 %132 to i64;
    i32* %134 = load i32** %a1;
    i32* %135 = getelementptr &(i32* %134)[i64 %133];
    i32 %136 = load i32* %135;
    i32 %137 = load i32* %v;
    i32 %138 = add i32 %136, i32 %137;
    store i32* %130 with i32 %138;
    ret i32 0;
^if.then2:
    i32 %139 = load i32* %d1;
    i1 %140 = scmp eq i32 %139, i32 1;
    i32 %141 = zext i1 %140 to i32;
    i1 %142 = scmp neq i32 %141, i32 0;
    cbr i1 %142(prob = 0.5), ^if.then3, ^b4;
^b3:
    i32 %143 = load i32* %pos1;
    i32 %144 = sdiv i32 %143, i32 30;
    i64 %145 = sext i32 %144 to i64;
    i32* %146 = load i32** %a1;
    i32* %147 = getelementptr &(i32* %146)[i64 %145];
    i32 %148 = load i32* %147;
    i32 %149 = load i32* %pos1;
    i32 %150 = srem i32 %149, i32 30;
    i64 %151 = sext i32 %150 to i64;
    i32* %152 = getelementptr &([31 * i32]* %x)[i64 0][i64 %151];
    i32 %153 = load i32* %152;
    i32 %154 = sdiv i32 %148, i32 %153;
    i32 %155 = srem i32 %154, i32 2;
    i1 %156 = scmp eq i32 %155, i32 1;
    i32 %157 = zext i1 %156 to i32;
    i1 %158 = scmp neq i32 %157, i32 0;
    cbr i1 %158(prob = 0.5), ^if.then4, ^b5;
^if.then3:
    i32 %159 = load i32* %pos1;
    i32 %160 = srem i32 %159, i32 30;
    i64 %161 = sext i32 %160 to i64;
    i32* %162 = getelementptr &([31 * i32]* %x)[i64 0][i64 %161];
    i32 %163 = load i32* %162;
    store i32* %v with i32 %163;
    ubr ^b4;
^b4:
    ubr ^b3;
^b5:
    ubr ^b2;
^if.then4:
    i32 %164 = load i32* %d1;
    i1 %165 = scmp eq i32 %164, i32 0;
    i32 %166 = zext i1 %165 to i32;
    i1 %167 = scmp neq i32 %166, i32 0;
    cbr i1 %167(prob = 0.5), ^if.then5, ^b6;
^if.then5:
    i32 %168 = load i32* %v;
    i32 %169 = load i32* %pos1;
    i32 %170 = srem i32 %169, i32 30;
    i64 %171 = sext i32 %170 to i64;
    i32* %172 = getelementptr &([31 * i32]* %x)[i64 0][i64 %171];
    i32 %173 = load i32* %172;
    i32 %174 = sub i32 %168, i32 %173;
    store i32* %v with i32 %174;
    ubr ^b6;
^b6:
    ubr ^b5;
}
internal func @cmmc::Intrinsic::memset() -> i8* { NoMemoryRead };
internal [3 * i32]* @seed = [19971231, 19981013, 1000000007];
internal i32* @staticvalue = 0;
internal func @rand() -> i32 {
^entry:
    i32 %0 = load i32* @staticvalue;
    i32* %1 = getelementptr &([3 * i32]* @seed)[i64 0][i64 0];
    i32 %2 = load i32* %1;
    i32 %3 = mul i32 %0, i32 %2;
    i32* %4 = getelementptr &([3 * i32]* @seed)[i64 0][i64 1];
    i32 %5 = load i32* %4;
    i32 %6 = add i32 %3, i32 %5;
    store i32* @staticvalue with i32 %6;
    i32 %7 = load i32* @staticvalue;
    i32* %8 = getelementptr &([3 * i32]* @seed)[i64 0][i64 2];
    i32 %9 = load i32* %8;
    i32 %10 = srem i32 %7, i32 %9;
    store i32* @staticvalue with i32 %10;
    i32 %11 = load i32* @staticvalue;
    i1 %12 = scmp lt i32 %11, i32 0;
    i32 %13 = zext i1 %12 to i32;
    i1 %14 = scmp neq i32 %13, i32 0;
    cbr i1 %14(prob = 0.5), ^if.then, ^b;
^if.then:
    i32* %15 = getelementptr &([3 * i32]* @seed)[i64 0][i64 2];
    i32 %16 = load i32* %15;
    i32 %17 = load i32* @staticvalue;
    i32 %18 = add i32 %16, i32 %17;
    store i32* @staticvalue with i32 %18;
    ubr ^b;
^b:
    i32 %19 = load i32* @staticvalue;
    ret i32 %19;
}
internal [10000 * i32]* @a = [];
func @main() -> i32 { Entry } {
^entry:
    i32* %y = alloc i32;
    i32* %x = alloc i32;
    i32* %n = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %n with i32 %0;
    i32 %1 = call () -> i32 @getint();
    store i32* @staticvalue with i32 %1;
    call (i32) -> void @starttime(i32 56);
    store i32* %x with i32 0;
    store i32* %y with i32 0;
    ubr ^while.header;
^while.header:
    i32 %2 = load i32* %n;
    i1 %3 = scmp gt i32 %2, i32 0;
    i32 %4 = zext i1 %3 to i32;
    i1 %5 = scmp neq i32 %4, i32 0;
    cbr i1 %5(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %6 = load i32* %n;
    i32 %7 = sub i32 %6, i32 1;
    store i32* %n with i32 %7;
    i32 %8 = call () -> i32 @rand();
    i32 %9 = srem i32 %8, i32 300000;
    store i32* %x with i32 %9;
    i32 %10 = call () -> i32 @rand();
    i32 %11 = srem i32 %10, i32 2;
    store i32* %y with i32 %11;
    i32* %12 = getelementptr &([10000 * i32]* @a)[i64 0][i64 0];
    i32 %13 = load i32* %x;
    i32 %14 = load i32* %y;
    i32 %15 = call (i32*, i32, i32) -> i32 @set(i32* %12, i32 %13, i32 %14);
    ubr ^while.header;
^b:
    call (i32) -> void @stoptime(i32 64);
    i32* %16 = getelementptr &([10000 * i32]* @a)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 10000, i32* %16);
    ret i32 0;
}
