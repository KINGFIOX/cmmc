internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @state = 19260817;
internal func @get_random() -> i32 {
^entry:
    i32 %0 = load i32* @state;
    i32 %1 = load i32* @state;
    i32 %2 = mul i32 %1, i32 8192;
    i32 %3 = add i32 %0, i32 %2;
    store i32* @state with i32 %3;
    i32 %4 = load i32* @state;
    i32 %5 = load i32* @state;
    i32 %6 = sdiv i32 %5, i32 131072;
    i32 %7 = add i32 %4, i32 %6;
    store i32* @state with i32 %7;
    i32 %8 = load i32* @state;
    i32 %9 = load i32* @state;
    i32 %10 = mul i32 %9, i32 32;
    i32 %11 = add i32 %8, i32 %10;
    store i32* @state with i32 %11;
    i32 %12 = load i32* @state;
    ret i32 %12;
}
internal func @rotl1(i32 %x) -> i32 {
^entry:
    i32* %x1 = alloc i32;
    store i32* %x1 with i32 %x;
    i32 %0 = load i32* %x1;
    i32 %1 = mul i32 %0, i32 2;
    i32 %2 = load i32* %x1;
    i32 %3 = srem i32 %2, i32 2;
    i32 %4 = add i32 %1, i32 %3;
    ret i32 %4;
}
internal func @rotl5(i32 %x) -> i32 {
^entry:
    i32* %x1 = alloc i32;
    store i32* %x1 with i32 %x;
    i32 %0 = load i32* %x1;
    i32 %1 = mul i32 %0, i32 32;
    i32 %2 = load i32* %x1;
    i32 %3 = srem i32 %2, i32 32;
    i32 %4 = add i32 %1, i32 %3;
    ret i32 %4;
}
internal func @rotl30(i32 %x) -> i32 {
^entry:
    i32* %x1 = alloc i32;
    store i32* %x1 with i32 %x;
    i32 %0 = load i32* %x1;
    i32 %1 = mul i32 %0, i32 1073741824;
    i32 %2 = load i32* %x1;
    i32 %3 = srem i32 %2, i32 1073741824;
    i32 %4 = add i32 %1, i32 %3;
    ret i32 %4;
}
internal func @_and(i32 %a, i32 %b) -> i32 {
^entry:
    i32* %b1 = alloc i32;
    i32* %a1 = alloc i32;
    store i32* %a1 with i32 %a;
    store i32* %b1 with i32 %b;
    i32 %0 = load i32* %a1;
    i32 %1 = load i32* %b1;
    i32 %2 = add i32 %0, i32 %1;
    ret i32 %2;
}
internal func @_not(i32 %x) -> i32 {
^entry:
    i32* %x1 = alloc i32;
    store i32* %x1 with i32 %x;
    i32 %0 = load i32* %x1;
    i32 %1 = sub i32 -1, i32 %0;
    ret i32 %1;
}
internal func @_xor(i32 %a, i32 %b) -> i32 {
^entry:
    i32* %b1 = alloc i32;
    i32* %a1 = alloc i32;
    store i32* %a1 with i32 %a;
    store i32* %b1 with i32 %b;
    i32 %0 = load i32* %a1;
    i32 %1 = load i32* %a1;
    i32 %2 = load i32* %b1;
    i32 %3 = call (i32, i32) -> i32 @_and(i32 %1, i32 %2);
    i32 %4 = sub i32 %0, i32 %3;
    i32 %5 = load i32* %b1;
    i32 %6 = add i32 %4, i32 %5;
    i32 %7 = load i32* %a1;
    i32 %8 = load i32* %b1;
    i32 %9 = call (i32, i32) -> i32 @_and(i32 %7, i32 %8);
    i32 %10 = sub i32 %6, i32 %9;
    ret i32 %10;
}
internal func @_or(i32 %a, i32 %b) -> i32 {
^entry:
    i32* %b1 = alloc i32;
    i32* %a1 = alloc i32;
    store i32* %a1 with i32 %a;
    store i32* %b1 with i32 %b;
    i32 %0 = load i32* %a1;
    i32 %1 = load i32* %b1;
    i32 %2 = call (i32, i32) -> i32 @_xor(i32 %0, i32 %1);
    i32 %3 = load i32* %a1;
    i32 %4 = load i32* %b1;
    i32 %5 = call (i32, i32) -> i32 @_and(i32 %3, i32 %4);
    i32 %6 = call (i32, i32) -> i32 @_xor(i32 %2, i32 %5);
    ret i32 %6;
}
internal func @pseudo_sha1(i32* %input, i32 %input_len, i32* %output) -> void {
^entry:
    i32* %t = alloc i32;
    i32* %i = alloc i32;
    [80 * i32]* %words = alloc [80 * i32];
    i32* %chunk_st = alloc i32;
    i32* %orig_len = alloc i32;
    i32* %k = alloc i32;
    i32* %f = alloc i32;
    i32* %e = alloc i32;
    i32* %d = alloc i32;
    i32* %c = alloc i32;
    i32* %b = alloc i32;
    i32* %a = alloc i32;
    i32* %h4 = alloc i32;
    i32* %h3 = alloc i32;
    i32* %h2 = alloc i32;
    i32* %h1 = alloc i32;
    i32* %h0 = alloc i32;
    i32** %output1 = alloc i32*;
    i32* %input_len1 = alloc i32;
    i32** %input1 = alloc i32*;
    store i32** %input1 with i32* %input;
    store i32* %input_len1 with i32 %input_len;
    store i32** %output1 with i32* %output;
    store i32* %h0 with i32 1732584193;
    store i32* %h1 with i32 -271733879;
    store i32* %h2 with i32 -1732584194;
    store i32* %h3 with i32 271733878;
    store i32* %h4 with i32 -1009589776;
    store i32* %a with i32 0;
    store i32* %b with i32 0;
    store i32* %c with i32 0;
    store i32* %d with i32 0;
    store i32* %e with i32 0;
    store i32* %f with i32 0;
    store i32* %k with i32 0;
    i32 %0 = load i32* %input_len1;
    store i32* %orig_len with i32 %0;
    i32 %1 = load i32* %input_len1;
    i64 %2 = sext i32 %1 to i64;
    i32* %3 = load i32** %input1;
    i32* %4 = getelementptr &(i32* %3)[i64 %2];
    store i32* %4 with i32 128;
    i32 %5 = load i32* %input_len1;
    i32 %6 = add i32 %5, i32 1;
    store i32* %input_len1 with i32 %6;
    ubr ^while.header;
^while.header:
    i32 %7 = load i32* %input_len1;
    i32 %8 = srem i32 %7, i32 64;
    i1 %9 = scmp neq i32 %8, i32 60;
    i32 %10 = zext i1 %9 to i32;
    i1 %11 = scmp neq i32 %10, i32 0;
    cbr i1 %11(prob = 0.97), ^while.body, ^b1;
^while.body:
    i32 %12 = load i32* %input_len1;
    i64 %13 = sext i32 %12 to i64;
    i32* %14 = load i32** %input1;
    i32* %15 = getelementptr &(i32* %14)[i64 %13];
    store i32* %15 with i32 0;
    i32 %16 = load i32* %input_len1;
    i32 %17 = add i32 %16, i32 1;
    store i32* %input_len1 with i32 %17;
    ubr ^while.header;
^b1:
    i32 %18 = load i32* %input_len1;
    i64 %19 = sext i32 %18 to i64;
    i32* %20 = load i32** %input1;
    i32* %21 = getelementptr &(i32* %20)[i64 %19];
    i32 %22 = load i32* %orig_len;
    i32 %23 = sdiv i32 %22, i32 16777216;
    i32 %24 = srem i32 %23, i32 256;
    store i32* %21 with i32 %24;
    i32 %25 = load i32* %input_len1;
    i32 %26 = add i32 %25, i32 1;
    i64 %27 = sext i32 %26 to i64;
    i32* %28 = load i32** %input1;
    i32* %29 = getelementptr &(i32* %28)[i64 %27];
    i32 %30 = load i32* %orig_len;
    i32 %31 = sdiv i32 %30, i32 65536;
    i32 %32 = srem i32 %31, i32 256;
    store i32* %29 with i32 %32;
    i32 %33 = load i32* %input_len1;
    i32 %34 = add i32 %33, i32 2;
    i64 %35 = sext i32 %34 to i64;
    i32* %36 = load i32** %input1;
    i32* %37 = getelementptr &(i32* %36)[i64 %35];
    i32 %38 = load i32* %orig_len;
    i32 %39 = sdiv i32 %38, i32 256;
    i32 %40 = srem i32 %39, i32 256;
    store i32* %37 with i32 %40;
    i32 %41 = load i32* %input_len1;
    i32 %42 = add i32 %41, i32 3;
    i64 %43 = sext i32 %42 to i64;
    i32* %44 = load i32** %input1;
    i32* %45 = getelementptr &(i32* %44)[i64 %43];
    i32 %46 = load i32* %orig_len;
    i32 %47 = srem i32 %46, i32 256;
    store i32* %45 with i32 %47;
    i32 %48 = load i32* %input_len1;
    i32 %49 = add i32 %48, i32 4;
    store i32* %input_len1 with i32 %49;
    store i32* %chunk_st with i32 0;
    i32* %50 = getelementptr &([80 * i32]* %words)[i64 1][i64 0];
    i32* %51 = getelementptr &([80 * i32]* %words)[i64 0][i64 0];
    i8* %52 = ptrcast i32* %51 to i8*;
    i8* %53 = call (i8*, i32, i64) -> i8* @cmmc::Intrinsic::memset(i8* %52, i32 0, i64 320);
    ubr ^while.header1;
^while.header1:
    i32 %54 = load i32* %chunk_st;
    i32 %55 = load i32* %input_len1;
    i1 %56 = scmp lt i32 %54, i32 %55;
    i32 %57 = zext i1 %56 to i32;
    i1 %58 = scmp neq i32 %57, i32 0;
    cbr i1 %58(prob = 0.97), ^while.body1, ^b2;
^while.body1:
    i32 %59 = load i32* %h0;
    store i32* %a with i32 %59;
    i32 %60 = load i32* %h1;
    store i32* %b with i32 %60;
    i32 %61 = load i32* %h2;
    store i32* %c with i32 %61;
    i32 %62 = load i32* %h3;
    store i32* %d with i32 %62;
    i32 %63 = load i32* %h4;
    store i32* %e with i32 %63;
    store i32* %i with i32 0;
    ubr ^while.header2;
^b2:
    i32* %64 = load i32** %output1;
    i32* %65 = getelementptr &(i32* %64)[i64 0];
    i32 %66 = load i32* %h0;
    store i32* %65 with i32 %66;
    i32* %67 = load i32** %output1;
    i32* %68 = getelementptr &(i32* %67)[i64 1];
    i32 %69 = load i32* %h1;
    store i32* %68 with i32 %69;
    i32* %70 = load i32** %output1;
    i32* %71 = getelementptr &(i32* %70)[i64 2];
    i32 %72 = load i32* %h2;
    store i32* %71 with i32 %72;
    i32* %73 = load i32** %output1;
    i32* %74 = getelementptr &(i32* %73)[i64 3];
    i32 %75 = load i32* %h3;
    store i32* %74 with i32 %75;
    i32* %76 = load i32** %output1;
    i32* %77 = getelementptr &(i32* %76)[i64 4];
    i32 %78 = load i32* %h4;
    store i32* %77 with i32 %78;
    ret;
^while.header2:
    i32 %79 = load i32* %i;
    i1 %80 = scmp lt i32 %79, i32 16;
    i32 %81 = zext i1 %80 to i32;
    i1 %82 = scmp neq i32 %81, i32 0;
    cbr i1 %82(prob = 0.97), ^while.body2, ^b3;
^while.body2:
    i32 %83 = load i32* %i;
    i64 %84 = sext i32 %83 to i64;
    i32* %85 = getelementptr &([80 * i32]* %words)[i64 0][i64 %84];
    i32 %86 = load i32* %chunk_st;
    i32 %87 = load i32* %i;
    i32 %88 = mul i32 %87, i32 4;
    i32 %89 = add i32 %86, i32 %88;
    i64 %90 = sext i32 %89 to i64;
    i32* %91 = load i32** %input1;
    i32* %92 = getelementptr &(i32* %91)[i64 %90];
    i32 %93 = load i32* %92;
    i32 %94 = mul i32 %93, i32 16777216;
    i32 %95 = load i32* %chunk_st;
    i32 %96 = load i32* %i;
    i32 %97 = mul i32 %96, i32 4;
    i32 %98 = add i32 %95, i32 %97;
    i32 %99 = add i32 %98, i32 1;
    i64 %100 = sext i32 %99 to i64;
    i32* %101 = load i32** %input1;
    i32* %102 = getelementptr &(i32* %101)[i64 %100];
    i32 %103 = load i32* %102;
    i32 %104 = mul i32 %103, i32 65536;
    i32 %105 = add i32 %94, i32 %104;
    i32 %106 = load i32* %chunk_st;
    i32 %107 = load i32* %i;
    i32 %108 = mul i32 %107, i32 4;
    i32 %109 = add i32 %106, i32 %108;
    i32 %110 = add i32 %109, i32 2;
    i64 %111 = sext i32 %110 to i64;
    i32* %112 = load i32** %input1;
    i32* %113 = getelementptr &(i32* %112)[i64 %111];
    i32 %114 = load i32* %113;
    i32 %115 = mul i32 %114, i32 256;
    i32 %116 = add i32 %105, i32 %115;
    i32 %117 = load i32* %chunk_st;
    i32 %118 = load i32* %i;
    i32 %119 = mul i32 %118, i32 4;
    i32 %120 = add i32 %117, i32 %119;
    i32 %121 = add i32 %120, i32 3;
    i64 %122 = sext i32 %121 to i64;
    i32* %123 = load i32** %input1;
    i32* %124 = getelementptr &(i32* %123)[i64 %122];
    i32 %125 = load i32* %124;
    i32 %126 = mul i32 %125, i32 1;
    i32 %127 = add i32 %116, i32 %126;
    store i32* %85 with i32 %127;
    i32 %128 = load i32* %i;
    i32 %129 = add i32 %128, i32 1;
    store i32* %i with i32 %129;
    ubr ^while.header2;
^b3:
    ubr ^while.header3;
^while.header3:
    i32 %130 = load i32* %i;
    i1 %131 = scmp lt i32 %130, i32 80;
    i32 %132 = zext i1 %131 to i32;
    i1 %133 = scmp neq i32 %132, i32 0;
    cbr i1 %133(prob = 0.97), ^while.body3, ^b4;
^while.body3:
    i32 %134 = load i32* %i;
    i64 %135 = sext i32 %134 to i64;
    i32* %136 = getelementptr &([80 * i32]* %words)[i64 0][i64 %135];
    i32 %137 = load i32* %i;
    i32 %138 = sub i32 %137, i32 3;
    i64 %139 = sext i32 %138 to i64;
    i32* %140 = getelementptr &([80 * i32]* %words)[i64 0][i64 %139];
    i32 %141 = load i32* %140;
    i32 %142 = load i32* %i;
    i32 %143 = sub i32 %142, i32 8;
    i64 %144 = sext i32 %143 to i64;
    i32* %145 = getelementptr &([80 * i32]* %words)[i64 0][i64 %144];
    i32 %146 = load i32* %145;
    i32 %147 = call (i32, i32) -> i32 @_xor(i32 %141, i32 %146);
    i32 %148 = load i32* %i;
    i32 %149 = sub i32 %148, i32 14;
    i64 %150 = sext i32 %149 to i64;
    i32* %151 = getelementptr &([80 * i32]* %words)[i64 0][i64 %150];
    i32 %152 = load i32* %151;
    i32 %153 = call (i32, i32) -> i32 @_xor(i32 %147, i32 %152);
    i32 %154 = load i32* %i;
    i32 %155 = sub i32 %154, i32 16;
    i64 %156 = sext i32 %155 to i64;
    i32* %157 = getelementptr &([80 * i32]* %words)[i64 0][i64 %156];
    i32 %158 = load i32* %157;
    i32 %159 = call (i32, i32) -> i32 @_xor(i32 %153, i32 %158);
    i32 %160 = call (i32) -> i32 @rotl1(i32 %159);
    store i32* %136 with i32 %160;
    i32 %161 = load i32* %i;
    i32 %162 = add i32 %161, i32 1;
    store i32* %i with i32 %162;
    ubr ^while.header3;
^b4:
    store i32* %i with i32 0;
    ubr ^while.header4;
^while.header4:
    i32 %163 = load i32* %i;
    i1 %164 = scmp lt i32 %163, i32 80;
    i32 %165 = zext i1 %164 to i32;
    i1 %166 = scmp neq i32 %165, i32 0;
    cbr i1 %166(prob = 0.97), ^while.body4, ^b5;
^b5:
    i32 %167 = load i32* %h0;
    i32 %168 = load i32* %a;
    i32 %169 = add i32 %167, i32 %168;
    store i32* %h0 with i32 %169;
    i32 %170 = load i32* %h1;
    i32 %171 = load i32* %b;
    i32 %172 = add i32 %170, i32 %171;
    store i32* %h1 with i32 %172;
    i32 %173 = load i32* %h2;
    i32 %174 = load i32* %c;
    i32 %175 = add i32 %173, i32 %174;
    store i32* %h2 with i32 %175;
    i32 %176 = load i32* %h3;
    i32 %177 = load i32* %d;
    i32 %178 = add i32 %176, i32 %177;
    store i32* %h3 with i32 %178;
    i32 %179 = load i32* %h4;
    i32 %180 = load i32* %e;
    i32 %181 = add i32 %179, i32 %180;
    store i32* %h4 with i32 %181;
    i32 %182 = load i32* %chunk_st;
    i32 %183 = add i32 %182, i32 64;
    store i32* %chunk_st with i32 %183;
    ubr ^while.header1;
^while.body4:
    i32 %184 = load i32* %i;
    i1 %185 = scmp lt i32 %184, i32 20;
    i32 %186 = zext i1 %185 to i32;
    i1 %187 = scmp neq i32 %186, i32 0;
    cbr i1 %187(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32 %188 = load i32* %b;
    i32 %189 = load i32* %c;
    i32 %190 = call (i32, i32) -> i32 @_and(i32 %188, i32 %189);
    i32 %191 = load i32* %b;
    i32 %192 = call (i32) -> i32 @_not(i32 %191);
    i32 %193 = load i32* %d;
    i32 %194 = call (i32, i32) -> i32 @_and(i32 %192, i32 %193);
    i32 %195 = call (i32, i32) -> i32 @_or(i32 %190, i32 %194);
    store i32* %f with i32 %195;
    store i32* %k with i32 1518500249;
    ubr ^b6;
^if.else:
    i32 %196 = load i32* %i;
    i1 %197 = scmp lt i32 %196, i32 40;
    i32 %198 = zext i1 %197 to i32;
    i1 %199 = scmp neq i32 %198, i32 0;
    cbr i1 %199(prob = 0.5), ^if.then1, ^if.else1;
^b6:
    i32 %200 = load i32* %a;
    i32 %201 = call (i32) -> i32 @rotl5(i32 %200);
    i32 %202 = load i32* %f;
    i32 %203 = add i32 %201, i32 %202;
    i32 %204 = load i32* %e;
    i32 %205 = add i32 %203, i32 %204;
    i32 %206 = load i32* %k;
    i32 %207 = add i32 %205, i32 %206;
    i32 %208 = load i32* %i;
    i64 %209 = sext i32 %208 to i64;
    i32* %210 = getelementptr &([80 * i32]* %words)[i64 0][i64 %209];
    i32 %211 = load i32* %210;
    i32 %212 = add i32 %207, i32 %211;
    store i32* %t with i32 %212;
    i32 %213 = load i32* %d;
    store i32* %e with i32 %213;
    i32 %214 = load i32* %c;
    store i32* %d with i32 %214;
    i32 %215 = load i32* %b;
    i32 %216 = call (i32) -> i32 @rotl30(i32 %215);
    store i32* %c with i32 %216;
    i32 %217 = load i32* %a;
    store i32* %b with i32 %217;
    i32 %218 = load i32* %t;
    store i32* %a with i32 %218;
    i32 %219 = load i32* %i;
    i32 %220 = add i32 %219, i32 1;
    store i32* %i with i32 %220;
    ubr ^while.header4;
^if.then1:
    i32 %221 = load i32* %b;
    i32 %222 = load i32* %c;
    i32 %223 = call (i32, i32) -> i32 @_xor(i32 %221, i32 %222);
    i32 %224 = load i32* %d;
    i32 %225 = call (i32, i32) -> i32 @_xor(i32 %223, i32 %224);
    store i32* %f with i32 %225;
    store i32* %k with i32 1859775361;
    ubr ^b7;
^if.else1:
    i32 %226 = load i32* %i;
    i1 %227 = scmp lt i32 %226, i32 60;
    i32 %228 = zext i1 %227 to i32;
    i1 %229 = scmp neq i32 %228, i32 0;
    cbr i1 %229(prob = 0.5), ^if.then2, ^if.else2;
^b7:
    ubr ^b6;
^if.then2:
    i32 %230 = load i32* %b;
    i32 %231 = load i32* %c;
    i32 %232 = call (i32, i32) -> i32 @_and(i32 %230, i32 %231);
    i32 %233 = load i32* %b;
    i32 %234 = load i32* %d;
    i32 %235 = call (i32, i32) -> i32 @_and(i32 %233, i32 %234);
    i32 %236 = call (i32, i32) -> i32 @_or(i32 %232, i32 %235);
    i32 %237 = load i32* %c;
    i32 %238 = load i32* %d;
    i32 %239 = call (i32, i32) -> i32 @_and(i32 %237, i32 %238);
    i32 %240 = call (i32, i32) -> i32 @_or(i32 %236, i32 %239);
    store i32* %f with i32 %240;
    store i32* %k with i32 -1894007588;
    ubr ^b8;
^if.else2:
    i32 %241 = load i32* %i;
    i1 %242 = scmp lt i32 %241, i32 80;
    i32 %243 = zext i1 %242 to i32;
    i1 %244 = scmp neq i32 %243, i32 0;
    cbr i1 %244(prob = 0.5), ^if.then3, ^b9;
^b8:
    ubr ^b7;
^if.then3:
    i32 %245 = load i32* %b;
    i32 %246 = load i32* %c;
    i32 %247 = call (i32, i32) -> i32 @_xor(i32 %245, i32 %246);
    i32 %248 = load i32* %d;
    i32 %249 = call (i32, i32) -> i32 @_xor(i32 %247, i32 %248);
    store i32* %f with i32 %249;
    store i32* %k with i32 -899497722;
    ubr ^b9;
^b9:
    ubr ^b8;
}
internal func @cmmc::Intrinsic::memset() -> i8* { NoMemoryRead };
internal [32768 * i32]* @buffer = [0];
func @main() -> i32 { Entry } {
^entry:
    i32* %i = alloc i32;
    i32* %len = alloc i32;
    [5 * i32]* %output_b = alloc [5 * i32];
    [5 * i32]* %output = alloc [5 * i32];
    i32* %i1 = alloc i32;
    i32* %rounds = alloc i32;
    store i32* %rounds with i32 12;
    store i32* %i1 with i32 0;
    i32* %0 = getelementptr &([5 * i32]* %output)[i64 1][i64 0];
    i32* %1 = getelementptr &([5 * i32]* %output)[i64 0][i64 0];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([5 * i32]* %output)[i64 0][i64 1];
    store i32* %2 with i32 0;
    i32* %3 = getelementptr &([5 * i32]* %output)[i64 0][i64 2];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([5 * i32]* %output)[i64 0][i64 3];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([5 * i32]* %output)[i64 0][i64 4];
    store i32* %5 with i32 0;
    i32 %6 = call () -> i32 @getint();
    store i32* @state with i32 %6;
    i32 %7 = call () -> i32 @getint();
    store i32* %rounds with i32 %7;
    call (i32) -> void @starttime(i32 161);
    i32* %8 = getelementptr &([5 * i32]* %output_b)[i64 0][i64 0];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([5 * i32]* %output_b)[i64 0][i64 1];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([5 * i32]* %output_b)[i64 0][i64 2];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([5 * i32]* %output_b)[i64 0][i64 3];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([5 * i32]* %output_b)[i64 0][i64 4];
    store i32* %12 with i32 0;
    ubr ^while.header;
^while.header:
    i32 %13 = load i32* %rounds;
    i1 %14 = scmp gt i32 %13, i32 0;
    i32 %15 = zext i1 %14 to i32;
    i1 %16 = scmp neq i32 %15, i32 0;
    cbr i1 %16(prob = 0.97), ^while.body, ^b;
^while.body:
    store i32* %len with i32 32000;
    store i32* %i with i32 0;
    ubr ^while.header1;
^b:
    call (i32) -> void @stoptime(i32 184);
    i32* %17 = getelementptr &([5 * i32]* %output_b)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 5, i32* %17);
    ret i32 0;
^while.header1:
    i32 %18 = load i32* %i;
    i32 %19 = load i32* %len;
    i1 %20 = scmp lt i32 %18, i32 %19;
    i32 %21 = zext i1 %20 to i32;
    i1 %22 = scmp neq i32 %21, i32 0;
    cbr i1 %22(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %23 = load i32* %i;
    i64 %24 = sext i32 %23 to i64;
    i32* %25 = getelementptr &([32768 * i32]* @buffer)[i64 0][i64 %24];
    i32 %26 = call () -> i32 @get_random();
    i32 %27 = srem i32 %26, i32 256;
    store i32* %25 with i32 %27;
    i32 %28 = load i32* %i;
    i32 %29 = add i32 %28, i32 1;
    store i32* %i with i32 %29;
    ubr ^while.header1;
^b1:
    i32* %30 = getelementptr &([32768 * i32]* @buffer)[i64 0][i64 0];
    i32 %31 = load i32* %len;
    i32* %32 = getelementptr &([5 * i32]* %output)[i64 0][i64 0];
    call (i32*, i32, i32*) -> void @pseudo_sha1(i32* %30, i32 %31, i32* %32);
    store i32* %i with i32 0;
    ubr ^while.header2;
^while.header2:
    i32 %33 = load i32* %i;
    i1 %34 = scmp lt i32 %33, i32 5;
    i32 %35 = zext i1 %34 to i32;
    i1 %36 = scmp neq i32 %35, i32 0;
    cbr i1 %36(prob = 0.97), ^while.body2, ^b2;
^while.body2:
    i32 %37 = load i32* %i;
    i64 %38 = sext i32 %37 to i64;
    i32* %39 = getelementptr &([5 * i32]* %output_b)[i64 0][i64 %38];
    i32 %40 = load i32* %i;
    i64 %41 = sext i32 %40 to i64;
    i32* %42 = getelementptr &([5 * i32]* %output_b)[i64 0][i64 %41];
    i32 %43 = load i32* %42;
    i32 %44 = load i32* %i;
    i64 %45 = sext i32 %44 to i64;
    i32* %46 = getelementptr &([5 * i32]* %output)[i64 0][i64 %45];
    i32 %47 = load i32* %46;
    i32 %48 = call (i32, i32) -> i32 @_xor(i32 %43, i32 %47);
    store i32* %39 with i32 %48;
    i32 %49 = load i32* %i;
    i32 %50 = add i32 %49, i32 1;
    store i32* %i with i32 %50;
    ubr ^while.header2;
^b2:
    i32 %51 = load i32* %rounds;
    i32 %52 = sub i32 %51, i32 1;
    store i32* %rounds with i32 %52;
    ubr ^while.header;
}
