internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [100010 * i32]* @x;
internal [3000000 * i32]* @y;
internal [3000000 * i32]* @v;
internal [100010 * i32]* @a;
internal [100010 * i32]* @b;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %n = alloc i32;
    i32* %i = alloc i32;
    i32* %j = alloc i32;
    i32* %n1 = alloc i32;
    i32* %i1 = alloc i32;
    i32* %j1 = alloc i32;
    i32* %i2 = alloc i32;
    i32* %n2 = alloc i32;
    i32* %0 = getelementptr &([100010 * i32]* @x)[i64 0][i64 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    i32 %2 = add i32 %1, i32 -1;
    store i32* %n2 with i32 %2;
    i32* %3 = getelementptr &([3000000 * i32]* @y)[i64 0][i64 0];
    i32 %4 = call (i32*) -> i32 @getarray(i32* %3);
    i32* %5 = getelementptr &([3000000 * i32]* @v)[i64 0][i64 0];
    i32 %6 = call (i32*) -> i32 @getarray(i32* %5);
    i32* %7 = getelementptr &([100010 * i32]* @a)[i64 0][i64 0];
    i32 %8 = call (i32*) -> i32 @getarray(i32* %7);
    i32 %9 = load i32* %n2;
    call (i32) -> void @starttime(i32 39);
    store i32* %i2 with i32 0;
    i32* %10 = getelementptr &([100010 * i32]* @b)[i64 0][i64 0];
    ubr ^while.header;
^while.header:
    i32 %11 = phi [^while.body8, i32 %111] [^entry, i32 %9];
    i32 %12 = phi [^while.body8, i32 %141] [^entry, i32 0];
    i32 %13 = phi [^while.body8, i32 %141] [^entry, i32 0];
    i1 %14 = scmp lt i32 %13, i32 100;
    cbr i1 %14(prob = 0.97), ^while.body, ^b;
^while.body:
    store i32* %n1 with i32 %11;
    store i32* %j1 with i32 0;
    store i32* %i1 with i32 0;
    ubr ^while.header1;
^b:
    call (i32) -> void @stoptime(i32 47);
    call (i32, i32*) -> void @putarray(i32 %11, i32* %10);
    ret i32 0;
^while.header1:
    i32 %15 = phi [^while.body1, i32 %28] [^while.body, i32 %11];
    i32 %16 = phi [^while.body1, i32 %29] [^while.body, i32 %12];
    i32 %17 = phi [^while.body1, i32 %32] [^while.body, i32 0];
    i32* %18 = phi [^while.body1, i32* %18] [^while.body, i32* %10];
    i32* %19 = phi [^while.body1, i32* %19] [^while.body, i32* %7];
    i32* %20 = phi [^while.body1, i32* %20] [^while.body, i32* %5];
    i32* %21 = phi [^while.body1, i32* %21] [^while.body, i32* %3];
    i32* %22 = phi [^while.body1, i32* %22] [^while.body, i32* %0];
    i32 %23 = phi [^while.body1, i32 %31] [^while.body, i32 %11];
    i32 %24 = phi [^while.body, i32 %11] [^while.body1, i32 %31];
    i32 %25 = phi [^while.body, i32 0] [^while.body1, i32 %32];
    i1 %26 = scmp lt i32 %25, i32 %24;
    cbr i1 %26(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32* %27 = getelementptr &(i32* %18)[i32 %17];
    store i32* %27 with i32 0;
    i32 %28 = load i32* %n2;
    i32 %29 = load i32* %i2;
    i32 %30 = load i32* %i1;
    i32 %31 = load i32* %n1;
    i32 %32 = add i32 %30, i32 1;
    store i32* %i1 with i32 %32;
    ubr ^while.header1;
^b1:
    store i32* %i1 with i32 0;
    ubr ^while.header2;
^while.header2:
    i32 %33 = phi [^b4, i32 %95] [^b1, i32 %15];
    i32 %34 = phi [^b4, i32 %96] [^b1, i32 %16];
    i32 %35 = phi [^b4, i32 %107] [^b1, i32 0];
    i32* %36 = phi [^b4, i32* %99] [^b1, i32* %18];
    i32* %37 = phi [^b4, i32* %100] [^b1, i32* %19];
    i32* %38 = phi [^b4, i32* %101] [^b1, i32* %20];
    i32* %39 = phi [^b4, i32* %102] [^b1, i32* %21];
    i32* %40 = phi [^b4, i32* %103] [^b1, i32* %22];
    i32 %41 = phi [^b4, i32 %104] [^b1, i32 %23];
    i32 %42 = phi [^b4, i32 %107] [^b1, i32 0];
    i1 %43 = scmp lt i32 %42, i32 %41;
    cbr i1 %43(prob = 0.97), ^while.body2, ^while.body3;
^while.body2:
    i32* %44 = getelementptr &(i32* %40)[i32 %35];
    i32 %45 = load i32* %44;
    store i32* %j1 with i32 %45;
    ubr ^while.header3;
^while.body3:
    store i32* %n with i32 %33;
    store i32* %j with i32 0;
    store i32* %i with i32 0;
    ubr ^while.header4;
^while.header3:
    i32 %46 = phi [^while.body4, i32 %81] [^while.body2, i32 %33];
    i32 %47 = phi [^while.body4, i32 %82] [^while.body2, i32 %34];
    i32 %48 = phi [^while.body4, i32 %86] [^while.body2, i32 %45];
    i32 %49 = phi [^while.body4, i32 %84] [^while.body2, i32 %35];
    i32* %50 = phi [^while.body4, i32* %50] [^while.body2, i32* %36];
    i32* %51 = phi [^while.body4, i32* %51] [^while.body2, i32* %37];
    i32* %52 = phi [^while.body4, i32* %52] [^while.body2, i32* %38];
    i32* %53 = phi [^while.body4, i32* %53] [^while.body2, i32* %39];
    i32* %54 = phi [^while.body4, i32* %54] [^while.body2, i32* %40];
    i32 %55 = phi [^while.body4, i32 %85] [^while.body2, i32 %41];
    i32* %56 = phi [^while.body2, i32* %40] [^while.body4, i32* %54];
    i32 %57 = phi [^while.body2, i32 %45] [^while.body4, i32 %86];
    i32 %58 = add i32 %49, i32 1;
    i32* %59 = getelementptr &(i32* %56)[i32 %58];
    i32 %60 = load i32* %59;
    i1 %61 = scmp lt i32 %57, i32 %60;
    cbr i1 %61(prob = 0.97), ^while.body4, ^b2;
^while.header4:
    i32 %62 = phi [^while.body5, i32 %90] [^while.body3, i32 %33];
    i32 %63 = phi [^while.body5, i32 %91] [^while.body3, i32 %34];
    i32 %64 = phi [^while.body5, i32 %94] [^while.body3, i32 0];
    i32* %65 = phi [^while.body5, i32* %65] [^while.body3, i32* %7];
    i32* %66 = phi [^while.body5, i32* %66] [^while.body3, i32* %10];
    i32* %67 = phi [^while.body5, i32* %67] [^while.body3, i32* %5];
    i32* %68 = phi [^while.body5, i32* %68] [^while.body3, i32* %3];
    i32* %69 = phi [^while.body5, i32* %69] [^while.body3, i32* %0];
    i32 %70 = phi [^while.body5, i32 %93] [^while.body3, i32 %33];
    i32 %71 = phi [^while.body3, i32 %33] [^while.body5, i32 %93];
    i32 %72 = phi [^while.body3, i32 0] [^while.body5, i32 %94];
    i1 %73 = scmp lt i32 %72, i32 %71;
    cbr i1 %73(prob = 0.97), ^while.body5, ^b3;
^while.body4:
    i32* %74 = getelementptr &(i32* %53)[i32 %48];
    i32 %75 = load i32* %74;
    i32* %76 = getelementptr &(i32* %50)[i32 %75];
    i32 %77 = load i32* %76;
    i32* %78 = getelementptr &(i32* %52)[i32 %48];
    i32 %79 = load i32* %78;
    i32 %80 = add i32 %77, i32 %79;
    store i32* %76 with i32 %80;
    i32 %81 = load i32* %n2;
    i32 %82 = load i32* %i2;
    i32 %83 = load i32* %j1;
    i32 %84 = load i32* %i1;
    i32 %85 = load i32* %n1;
    i32 %86 = add i32 %83, i32 1;
    store i32* %j1 with i32 %86;
    ubr ^while.header3;
^b2:
    i32* %87 = getelementptr &(i32* %54)[i32 %49];
    i32 %88 = load i32* %87;
    store i32* %j1 with i32 %88;
    ubr ^while.header5;
^while.body5:
    i32* %89 = getelementptr &(i32* %65)[i32 %64];
    store i32* %89 with i32 0;
    i32 %90 = load i32* %n2;
    i32 %91 = load i32* %i2;
    i32 %92 = load i32* %i;
    i32 %93 = load i32* %n;
    i32 %94 = add i32 %92, i32 1;
    store i32* %i with i32 %94;
    ubr ^while.header4;
^b3:
    store i32* %i with i32 0;
    ubr ^while.header6;
^while.header5:
    i32 %95 = phi [^while.body6, i32 %133] [^b2, i32 %46];
    i32 %96 = phi [^while.body6, i32 %134] [^b2, i32 %47];
    i32 %97 = phi [^while.body6, i32 %138] [^b2, i32 %88];
    i32 %98 = phi [^while.body6, i32 %136] [^b2, i32 %49];
    i32* %99 = phi [^while.body6, i32* %99] [^b2, i32* %50];
    i32* %100 = phi [^while.body6, i32* %100] [^b2, i32* %51];
    i32* %101 = phi [^while.body6, i32* %101] [^b2, i32* %52];
    i32* %102 = phi [^while.body6, i32* %102] [^b2, i32* %53];
    i32* %103 = phi [^while.body6, i32* %103] [^b2, i32* %54];
    i32 %104 = phi [^while.body6, i32 %137] [^b2, i32 %55];
    i32* %105 = phi [^b2, i32* %54] [^while.body6, i32* %103];
    i32 %106 = phi [^b2, i32 %88] [^while.body6, i32 %138];
    i32 %107 = add i32 %98, i32 1;
    i32* %108 = getelementptr &(i32* %105)[i32 %107];
    i32 %109 = load i32* %108;
    i1 %110 = scmp lt i32 %106, i32 %109;
    cbr i1 %110(prob = 0.97), ^while.body6, ^b4;
^while.header6:
    i32 %111 = phi [^b6, i32 %173] [^b3, i32 %62];
    i32 %112 = phi [^b6, i32 %174] [^b3, i32 %63];
    i32 %113 = phi [^b6, i32 %185] [^b3, i32 0];
    i32* %114 = phi [^b6, i32* %177] [^b3, i32* %65];
    i32* %115 = phi [^b6, i32* %178] [^b3, i32* %66];
    i32* %116 = phi [^b6, i32* %179] [^b3, i32* %67];
    i32* %117 = phi [^b6, i32* %180] [^b3, i32* %68];
    i32* %118 = phi [^b6, i32* %181] [^b3, i32* %69];
    i32 %119 = phi [^b6, i32 %182] [^b3, i32 %70];
    i32 %120 = phi [^b6, i32 %185] [^b3, i32 0];
    i1 %121 = scmp lt i32 %120, i32 %119;
    cbr i1 %121(prob = 0.97), ^while.body7, ^while.body8;
^while.body6:
    i32* %122 = getelementptr &(i32* %102)[i32 %97];
    i32 %123 = load i32* %122;
    i32* %124 = getelementptr &(i32* %99)[i32 %123];
    i32 %125 = load i32* %124;
    i32* %126 = getelementptr &(i32* %101)[i32 %97];
    i32 %127 = load i32* %126;
    i32* %128 = getelementptr &(i32* %100)[i32 %98];
    i32 %129 = load i32* %128;
    i32 %130 = add i32 %129, i32 -1;
    i32 %131 = mul i32 %127, i32 %130;
    i32 %132 = add i32 %125, i32 %131;
    store i32* %124 with i32 %132;
    i32 %133 = load i32* %n2;
    i32 %134 = load i32* %i2;
    i32 %135 = load i32* %j1;
    i32 %136 = load i32* %i1;
    i32 %137 = load i32* %n1;
    i32 %138 = add i32 %135, i32 1;
    store i32* %j1 with i32 %138;
    ubr ^while.header5;
^b4:
    store i32* %i1 with i32 %107;
    ubr ^while.header2;
^while.body7:
    i32* %139 = getelementptr &(i32* %118)[i32 %113];
    i32 %140 = load i32* %139;
    store i32* %j with i32 %140;
    ubr ^while.header7;
^while.body8:
    i32 %141 = add i32 %112, i32 1;
    store i32* %i2 with i32 %141;
    ubr ^while.header;
^while.header7:
    i32 %142 = phi [^while.body9, i32 %165] [^while.body7, i32 %111];
    i32 %143 = phi [^while.body9, i32 %166] [^while.body7, i32 %112];
    i32 %144 = phi [^while.body9, i32 %170] [^while.body7, i32 %140];
    i32 %145 = phi [^while.body9, i32 %168] [^while.body7, i32 %113];
    i32* %146 = phi [^while.body9, i32* %146] [^while.body7, i32* %114];
    i32* %147 = phi [^while.body9, i32* %147] [^while.body7, i32* %115];
    i32* %148 = phi [^while.body9, i32* %148] [^while.body7, i32* %116];
    i32* %149 = phi [^while.body9, i32* %149] [^while.body7, i32* %117];
    i32* %150 = phi [^while.body9, i32* %150] [^while.body7, i32* %118];
    i32 %151 = phi [^while.body9, i32 %169] [^while.body7, i32 %119];
    i32* %152 = phi [^while.body7, i32* %118] [^while.body9, i32* %150];
    i32 %153 = phi [^while.body7, i32 %140] [^while.body9, i32 %170];
    i32 %154 = add i32 %145, i32 1;
    i32* %155 = getelementptr &(i32* %152)[i32 %154];
    i32 %156 = load i32* %155;
    i1 %157 = scmp lt i32 %153, i32 %156;
    cbr i1 %157(prob = 0.97), ^while.body9, ^b5;
^while.body9:
    i32* %158 = getelementptr &(i32* %149)[i32 %144];
    i32 %159 = load i32* %158;
    i32* %160 = getelementptr &(i32* %146)[i32 %159];
    i32 %161 = load i32* %160;
    i32* %162 = getelementptr &(i32* %148)[i32 %144];
    i32 %163 = load i32* %162;
    i32 %164 = add i32 %161, i32 %163;
    store i32* %160 with i32 %164;
    i32 %165 = load i32* %n2;
    i32 %166 = load i32* %i2;
    i32 %167 = load i32* %j;
    i32 %168 = load i32* %i;
    i32 %169 = load i32* %n;
    i32 %170 = add i32 %167, i32 1;
    store i32* %j with i32 %170;
    ubr ^while.header7;
^b5:
    i32* %171 = getelementptr &(i32* %150)[i32 %145];
    i32 %172 = load i32* %171;
    store i32* %j with i32 %172;
    ubr ^while.header8;
^while.header8:
    i32 %173 = phi [^while.body10, i32 %200] [^b5, i32 %142];
    i32 %174 = phi [^while.body10, i32 %201] [^b5, i32 %143];
    i32 %175 = phi [^while.body10, i32 %205] [^b5, i32 %172];
    i32 %176 = phi [^while.body10, i32 %203] [^b5, i32 %145];
    i32* %177 = phi [^while.body10, i32* %177] [^b5, i32* %146];
    i32* %178 = phi [^while.body10, i32* %178] [^b5, i32* %147];
    i32* %179 = phi [^while.body10, i32* %179] [^b5, i32* %148];
    i32* %180 = phi [^while.body10, i32* %180] [^b5, i32* %149];
    i32* %181 = phi [^while.body10, i32* %181] [^b5, i32* %150];
    i32 %182 = phi [^while.body10, i32 %204] [^b5, i32 %151];
    i32* %183 = phi [^b5, i32* %150] [^while.body10, i32* %181];
    i32 %184 = phi [^b5, i32 %172] [^while.body10, i32 %205];
    i32 %185 = add i32 %176, i32 1;
    i32* %186 = getelementptr &(i32* %183)[i32 %185];
    i32 %187 = load i32* %186;
    i1 %188 = scmp lt i32 %184, i32 %187;
    cbr i1 %188(prob = 0.97), ^while.body10, ^b6;
^while.body10:
    i32* %189 = getelementptr &(i32* %180)[i32 %175];
    i32 %190 = load i32* %189;
    i32* %191 = getelementptr &(i32* %177)[i32 %190];
    i32 %192 = load i32* %191;
    i32* %193 = getelementptr &(i32* %179)[i32 %175];
    i32 %194 = load i32* %193;
    i32* %195 = getelementptr &(i32* %178)[i32 %176];
    i32 %196 = load i32* %195;
    i32 %197 = add i32 %196, i32 -1;
    i32 %198 = mul i32 %194, i32 %197;
    i32 %199 = add i32 %192, i32 %198;
    store i32* %191 with i32 %199;
    i32 %200 = load i32* %n2;
    i32 %201 = load i32* %i2;
    i32 %202 = load i32* %j;
    i32 %203 = load i32* %i;
    i32 %204 = load i32* %n;
    i32 %205 = add i32 %202, i32 1;
    store i32* %j with i32 %205;
    ubr ^while.header8;
^b6:
    store i32* %i with i32 %185;
    ubr ^while.header6;
}
