internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [2010 * [2010 * i32]]* @A;
internal [2010 * i32]* @B;
internal [2010 * i32]* @C;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %n = alloc i32;
    i32* %x = alloc i32;
    i32* %y = alloc i32;
    i32* %i = alloc i32;
    i32* %j = alloc i32;
    i32* %n1 = alloc i32;
    i32* %x1 = alloc i32;
    i32* %y1 = alloc i32;
    i32* %i1 = alloc i32;
    i32* %j1 = alloc i32;
    i32* %i2 = alloc i32;
    i32* %n2 = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %n2 with i32 %0;
    [2010 * i32]* %1 = getelementptr &([2010 * [2010 * i32]]* @A)[i64 0][i64 0];
    i32* %2 = getelementptr &([2010 * i32]* @B)[i64 0][i64 0];
    i32* %3 = getelementptr &([2010 * i32]* @C)[i64 0][i64 0];
    ubr ^while.header;
^while.header:
    i32 %4 = phi [^b, i32 %14] [^entry, i32 0];
    i1 %5 = scmp lt i32 %4, i32 %0;
    [2010 * i32]* %6 = getelementptr &([2010 * [2010 * i32]]* @A)[i64 0][i32 %4];
    cbr i1 %5(prob = 0.97), ^while.header1, ^while.header2;
^while.header1:
    i32 %7 = phi [^while.header, i32 0] [^while.body, i32 %13];
    i1 %8 = scmp lt i32 %7, i32 %0;
    cbr i1 %8(prob = 0.97), ^while.body, ^b;
^while.header2:
    i32 %9 = phi [^while.header, i32 0] [^while.body1, i32 %17];
    i1 %10 = scmp lt i32 %9, i32 %0;
    cbr i1 %10(prob = 0.97), ^while.body1, ^b1;
^while.body:
    i32* %11 = getelementptr &([2010 * i32]* %6)[i64 0][i32 %7];
    i32 %12 = call () -> i32 @getint();
    store i32* %11 with i32 %12;
    i32 %13 = add i32 %7, i32 1;
    ubr ^while.header1;
^b:
    i32 %14 = add i32 %4, i32 1;
    ubr ^while.header;
^while.body1:
    i32* %15 = getelementptr &([2010 * i32]* @B)[i64 0][i32 %9];
    i32 %16 = call () -> i32 @getint();
    store i32* %15 with i32 %16;
    i32 %17 = add i32 %9, i32 1;
    ubr ^while.header2;
^b1:
    call (i32) -> void @starttime(i32 59);
    store i32* %i2 with i32 0;
    ubr ^while.header3;
^while.header3:
    i32 %18 = phi [^while.body9, i32 %91] [^b1, i32 %0];
    i32 %19 = phi [^while.body9, i32 %106] [^b1, i32 0];
    i1 %20 = scmp lt i32 %19, i32 50;
    cbr i1 %20(prob = 0.97), ^while.body2, ^b2;
^while.body2:
    store i32* %n1 with i32 %18;
    store i32* %y1 with i32 0;
    store i32* %x1 with i32 11;
    store i32* %j1 with i32 0;
    store i32* %i1 with i32 0;
    ubr ^while.header4;
^b2:
    call (i32) -> void @stoptime(i32 67);
    call (i32, i32*) -> void @putarray(i32 %18, i32* %3);
    ret i32 0;
^while.header4:
    i32 %21 = phi [^while.body3, i32 %29] [^while.body2, i32 %18];
    i32 %22 = phi [^while.body3, i32 %30] [^while.body2, i32 %19];
    i32 %23 = phi [^while.body3, i32 %35] [^while.body2, i32 0];
    i32 %24 = phi [^while.body3, i32 %32] [^while.body2, i32 0];
    i32 %25 = phi [^while.body3, i32 %33] [^while.body2, i32 11];
    i32 %26 = phi [^while.body3, i32 %34] [^while.body2, i32 %18];
    i1 %27 = scmp lt i32 %23, i32 %26;
    cbr i1 %27(prob = 0.97), ^while.body3, ^b3;
^while.body3:
    i32* %28 = getelementptr &(i32* %3)[i32 %23];
    store i32* %28 with i32 0;
    i32 %29 = load i32* %n2;
    i32 %30 = load i32* %i2;
    i32 %31 = load i32* %i1;
    i32 %32 = load i32* %y1;
    i32 %33 = load i32* %x1;
    i32 %34 = load i32* %n1;
    i32 %35 = add i32 %31, i32 1;
    store i32* %i1 with i32 %35;
    ubr ^while.header4;
^b3:
    store i32* %i1 with i32 0;
    ubr ^while.header5;
^while.header5:
    i32 %36 = phi [^b4, i32 %43] [^b3, i32 %21];
    i32 %37 = phi [^b4, i32 %44] [^b3, i32 %22];
    i32 %38 = phi [^b4, i32 %58] [^b3, i32 0];
    i32 %39 = phi [^b4, i32 %47] [^b3, i32 %24];
    i32 %40 = phi [^b4, i32 %48] [^b3, i32 %25];
    i32 %41 = phi [^b4, i32 %49] [^b3, i32 %26];
    i1 %42 = scmp lt i32 %38, i32 %41;
    cbr i1 %42(prob = 0.97), ^while.body4, ^while.body5;
^while.body4:
    store i32* %j1 with i32 0;
    ubr ^while.header6;
^while.body5:
    store i32* %n with i32 %36;
    store i32* %y with i32 0;
    store i32* %x with i32 11;
    store i32* %j with i32 0;
    store i32* %i with i32 0;
    ubr ^while.header7;
^while.header6:
    i32 %43 = phi [^b6, i32 %98] [^while.body4, i32 %36];
    i32 %44 = phi [^b6, i32 %99] [^while.body4, i32 %37];
    i32 %45 = phi [^b6, i32 %105] [^while.body4, i32 0];
    i32 %46 = phi [^b6, i32 %101] [^while.body4, i32 %38];
    i32 %47 = phi [^b6, i32 %102] [^while.body4, i32 %39];
    i32 %48 = phi [^b6, i32 %103] [^while.body4, i32 %40];
    i32 %49 = phi [^b6, i32 %104] [^while.body4, i32 %41];
    i1 %50 = scmp lt i32 %45, i32 %49;
    cbr i1 %50(prob = 0.97), ^while.body7, ^b4;
^while.header7:
    i32 %51 = phi [^while.body6, i32 %60] [^while.body5, i32 %36];
    i32 %52 = phi [^while.body6, i32 %61] [^while.body5, i32 %37];
    i32 %53 = phi [^while.body6, i32 %66] [^while.body5, i32 0];
    i32 %54 = phi [^while.body6, i32 %63] [^while.body5, i32 0];
    i32 %55 = phi [^while.body6, i32 %64] [^while.body5, i32 11];
    i32 %56 = phi [^while.body6, i32 %65] [^while.body5, i32 %36];
    i1 %57 = scmp lt i32 %53, i32 %56;
    cbr i1 %57(prob = 0.97), ^while.body6, ^b5;
^b4:
    i32 %58 = add i32 %46, i32 1;
    store i32* %i1 with i32 %58;
    ubr ^while.header5;
^while.body6:
    i32* %59 = getelementptr &(i32* %2)[i32 %53];
    store i32* %59 with i32 0;
    i32 %60 = load i32* %n2;
    i32 %61 = load i32* %i2;
    i32 %62 = load i32* %i;
    i32 %63 = load i32* %y;
    i32 %64 = load i32* %x;
    i32 %65 = load i32* %n;
    i32 %66 = add i32 %62, i32 1;
    store i32* %i with i32 %66;
    ubr ^while.header7;
^while.body7:
    [2010 * i32]* %67 = getelementptr &([2010 * i32]* %1)[i32 %46];
    i32* %68 = getelementptr &([2010 * i32]* %67)[i64 0][i32 %45];
    i32 %69 = load i32* %68;
    i1 %70 = scmp eq i32 %69, i32 0;
    cbr i1 %70(prob = 0.5), ^if.then, ^if.else;
^b5:
    store i32* %i with i32 0;
    ubr ^while.header8;
^if.then:
    i32* %71 = getelementptr &(i32* %2)[i32 %46];
    i32 %72 = load i32* %71;
    i32 %73 = mul i32 %72, i32 %48;
    i32* %74 = getelementptr &(i32* %2)[i32 %45];
    i32 %75 = load i32* %74;
    i32 %76 = add i32 %73, i32 %75;
    store i32* %x1 with i32 %76;
    i32 %77 = sub i32 %47, i32 %76;
    store i32* %y1 with i32 %77;
    ubr ^b6;
^if.else:
    i32* %78 = getelementptr &(i32* %3)[i32 %46];
    i32 %79 = load i32* %78;
    i32* %80 = getelementptr &(i32* %2)[i32 %45];
    i32 %81 = load i32* %80;
    i32 %82 = mul i32 %69, i32 %81;
    i32 %83 = add i32 %79, i32 %82;
    store i32* %78 with i32 %83;
    i32 %84 = load i32* %n2;
    i32 %85 = load i32* %i2;
    i32 %86 = load i32* %j1;
    i32 %87 = load i32* %i1;
    i32 %88 = load i32* %y1;
    i32 %89 = load i32* %x1;
    i32 %90 = load i32* %n1;
    ubr ^b6;
^while.header8:
    i32 %91 = phi [^b7, i32 %107] [^b5, i32 %51];
    i32 %92 = phi [^b7, i32 %108] [^b5, i32 %52];
    i32 %93 = phi [^b7, i32 %115] [^b5, i32 0];
    i32 %94 = phi [^b7, i32 %111] [^b5, i32 %54];
    i32 %95 = phi [^b7, i32 %112] [^b5, i32 %55];
    i32 %96 = phi [^b7, i32 %113] [^b5, i32 %56];
    i1 %97 = scmp lt i32 %93, i32 %96;
    cbr i1 %97(prob = 0.97), ^while.body8, ^while.body9;
^b6:
    i32 %98 = phi [^if.else, i32 %84] [^if.then, i32 %43];
    i32 %99 = phi [^if.else, i32 %85] [^if.then, i32 %44];
    i32 %100 = phi [^if.else, i32 %86] [^if.then, i32 %45];
    i32 %101 = phi [^if.else, i32 %87] [^if.then, i32 %46];
    i32 %102 = phi [^if.else, i32 %88] [^if.then, i32 %77];
    i32 %103 = phi [^if.else, i32 %89] [^if.then, i32 %76];
    i32 %104 = phi [^if.else, i32 %90] [^if.then, i32 %49];
    i32 %105 = add i32 %100, i32 1;
    store i32* %j1 with i32 %105;
    ubr ^while.header6;
^while.body8:
    store i32* %j with i32 0;
    ubr ^while.header9;
^while.body9:
    i32 %106 = add i32 %92, i32 1;
    store i32* %i2 with i32 %106;
    ubr ^while.header3;
^while.header9:
    i32 %107 = phi [^b8, i32 %140] [^while.body8, i32 %91];
    i32 %108 = phi [^b8, i32 %141] [^while.body8, i32 %92];
    i32 %109 = phi [^b8, i32 %147] [^while.body8, i32 0];
    i32 %110 = phi [^b8, i32 %143] [^while.body8, i32 %93];
    i32 %111 = phi [^b8, i32 %144] [^while.body8, i32 %94];
    i32 %112 = phi [^b8, i32 %145] [^while.body8, i32 %95];
    i32 %113 = phi [^b8, i32 %146] [^while.body8, i32 %96];
    i1 %114 = scmp lt i32 %109, i32 %113;
    cbr i1 %114(prob = 0.97), ^while.body10, ^b7;
^b7:
    i32 %115 = add i32 %110, i32 1;
    store i32* %i with i32 %115;
    ubr ^while.header8;
^while.body10:
    [2010 * i32]* %116 = getelementptr &([2010 * i32]* %1)[i32 %110];
    i32* %117 = getelementptr &([2010 * i32]* %116)[i64 0][i32 %109];
    i32 %118 = load i32* %117;
    i1 %119 = scmp eq i32 %118, i32 0;
    cbr i1 %119(prob = 0.5), ^if.then1, ^if.else1;
^if.then1:
    i32* %120 = getelementptr &(i32* %3)[i32 %110];
    i32 %121 = load i32* %120;
    i32 %122 = mul i32 %121, i32 %112;
    i32* %123 = getelementptr &(i32* %3)[i32 %109];
    i32 %124 = load i32* %123;
    i32 %125 = add i32 %122, i32 %124;
    store i32* %x with i32 %125;
    i32 %126 = sub i32 %111, i32 %125;
    store i32* %y with i32 %126;
    ubr ^b8;
^if.else1:
    i32* %127 = getelementptr &(i32* %2)[i32 %110];
    i32 %128 = load i32* %127;
    i32* %129 = getelementptr &(i32* %3)[i32 %109];
    i32 %130 = load i32* %129;
    i32 %131 = mul i32 %118, i32 %130;
    i32 %132 = add i32 %128, i32 %131;
    store i32* %127 with i32 %132;
    i32 %133 = load i32* %n2;
    i32 %134 = load i32* %i2;
    i32 %135 = load i32* %j;
    i32 %136 = load i32* %i;
    i32 %137 = load i32* %y;
    i32 %138 = load i32* %x;
    i32 %139 = load i32* %n;
    ubr ^b8;
^b8:
    i32 %140 = phi [^if.else1, i32 %133] [^if.then1, i32 %107];
    i32 %141 = phi [^if.else1, i32 %134] [^if.then1, i32 %108];
    i32 %142 = phi [^if.else1, i32 %135] [^if.then1, i32 %109];
    i32 %143 = phi [^if.else1, i32 %136] [^if.then1, i32 %110];
    i32 %144 = phi [^if.else1, i32 %137] [^if.then1, i32 %126];
    i32 %145 = phi [^if.else1, i32 %138] [^if.then1, i32 %125];
    i32 %146 = phi [^if.else1, i32 %139] [^if.then1, i32 %113];
    i32 %147 = add i32 %142, i32 1;
    store i32* %j with i32 %147;
    ubr ^while.header9;
}
