internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    f32* %sum = alloc f32;
    f32* %sum1 = alloc f32;
    f32* %sum2 = alloc f32;
    f32* %sum3 = alloc f32;
    f32* %temp = alloc f32;
    [100000 * f32]* %Vectortm = alloc [100000 * f32];
    [100000 * f32]* %vectorB = alloc [100000 * f32];
    [100000 * f32]* %vectorA = alloc [100000 * f32];
    store f32* %temp with f32 1;
    f32* %0 = getelementptr &([100000 * f32]* %vectorA)[i64 0][i64 0];
    f32* %1 = getelementptr &([100000 * f32]* %vectorB)[i64 0][i64 0];
    f32* %2 = getelementptr &([100000 * f32]* %Vectortm)[i64 0][i64 0];
    call (i32) -> void @starttime(i32 62);
    ubr ^while.header;
^while.header:
    i32 %3 = phi [^while.body, i32 %6] [^entry, i32 0];
    i1 %4 = scmp lt i32 %3, i32 100000;
    cbr i1 %4(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    f32* %5 = getelementptr &([100000 * f32]* %vectorA)[i64 0][i32 %3];
    store f32* %5 with f32 1;
    i32 %6 = add i32 %3, i32 1;
    ubr ^while.header;
^while.header1:
    i32 %7 = phi [^while.header, i32 0] [^entry4, i32 %118];
    f32 %8 = phi [^while.header, f32 1] [^entry4, f32 %112];
    i1 %9 = scmp lt i32 %7, i32 1000;
    cbr i1 %9(prob = 0.97), ^while.body1, ^b;
^while.body1:
    store f32* %sum2 with f32 0;
    ubr ^while.header2;
^b:
    call (i32) -> void @stoptime(i32 76);
    ubr ^while.header3;
^while.header2:
    f32 %10 = phi [^b1, f32 %44] [^while.body1, f32 %8];
    i32 %11 = phi [^b1, i32 %46] [^while.body1, i32 0];
    i32 %12 = phi [^b1, i32 %25] [^while.body1, i32 0];
    f32 %13 = phi [^b1, f32 %45] [^while.body1, f32 0];
    i1 %14 = scmp lt i32 %11, i32 100000;
    cbr i1 %14(prob = 0.97), ^while.header4, ^entry1;
^while.header3:
    f32 %15 = phi [^while.body2, f32 %23] [^b, f32 0];
    i32 %16 = phi [^while.body2, i32 %24] [^b, i32 0];
    i1 %17 = scmp lt i32 %16, i32 100000;
    cbr i1 %17(prob = 0.97), ^while.body2, ^while.header5;
^while.body2:
    f32* %18 = getelementptr &(f32* %0)[i32 %16];
    f32 %19 = load f32* %18;
    f32* %20 = getelementptr &(f32* %1)[i32 %16];
    f32 %21 = load f32* %20;
    f32 %22 = fmul f32 %19, f32 %21;
    f32 %23 = fadd f32 %15, f32 %22;
    i32 %24 = add i32 %16, i32 1;
    ubr ^while.header3;
^entry1:
    store f32* %sum3 with f32 0;
    ubr ^while.header6;
^while.header4:
    i32 %25 = phi [^while.header2, i32 %12] [^while.body3, i32 %34];
    f32 %26 = phi [^while.header2, f32 %13] [^while.body3, f32 %42];
    i1 %27 = scmp lt i32 %25, i32 100000;
    cbr i1 %27(prob = 0.97), ^while.body3, ^b1;
^while.header5:
    f32 %28 = phi [^while.header3, f32 0] [^while.body4, f32 %50];
    i32 %29 = phi [^while.header3, i32 0] [^while.body4, i32 %51];
    i1 %30 = scmp lt i32 %29, i32 100000;
    cbr i1 %30(prob = 0.97), ^while.body4, ^b2;
^while.body3:
    f32* %31 = getelementptr &(f32* %0)[i32 %25];
    f32 %32 = load f32* %31;
    i32 %33 = add i32 %25, i32 %11;
    i32 %34 = add i32 %25, i32 1;
    i32 %35 = add i32 %34, i32 %11;
    i32 %36 = mul i32 %33, i32 %35;
    i32 %37 = sdiv i32 %36, i32 2;
    i32 %38 = add i32 %37, i32 1;
    i32 %39 = add i32 %38, i32 %11;
    f32 %40 = s2f i32 %39 to f32;
    f32 %41 = fdiv f32 %32, f32 %40;
    f32 %42 = fadd f32 %26, f32 %41;
    store f32* %sum2 with f32 %42;
    ubr ^while.header4;
^b1:
    f32* %43 = getelementptr &(f32* %2)[i32 %11];
    store f32* %43 with f32 %26;
    f32 %44 = load f32* %temp;
    f32 %45 = load f32* %sum2;
    i32 %46 = add i32 %11, i32 1;
    ubr ^while.header2;
^while.body4:
    f32* %47 = getelementptr &(f32* %1)[i32 %29];
    f32 %48 = load f32* %47;
    f32 %49 = fmul f32 %48, f32 %48;
    f32 %50 = fadd f32 %28, f32 %49;
    i32 %51 = add i32 %29, i32 1;
    ubr ^while.header5;
^while.header6:
    f32 %52 = phi [^b3, f32 %78] [^entry1, f32 %10];
    i32 %53 = phi [^b3, i32 %80] [^entry1, i32 0];
    i32 %54 = phi [^b3, i32 %58] [^entry1, i32 0];
    f32 %55 = phi [^b3, f32 %79] [^entry1, f32 0];
    i1 %56 = scmp lt i32 %53, i32 100000;
    cbr i1 %56(prob = 0.97), ^while.header7, ^entry2;
^b2:
    f32 %57 = fdiv f32 %15, f32 %28;
    ubr ^while.header8;
^entry2:
    store f32* %sum with f32 0;
    ubr ^while.header9;
^while.header7:
    i32 %58 = phi [^while.header6, i32 %54] [^while.body5, i32 %68];
    f32 %59 = phi [^while.header6, f32 %55] [^while.body5, f32 %76];
    i1 %60 = scmp lt i32 %58, i32 100000;
    cbr i1 %60(prob = 0.97), ^while.body5, ^b3;
^while.header8:
    f32 %61 = phi [^while.body6, f32 %89] [^b2, f32 %8];
    f32 %62 = fdiv f32 %57, f32 %61;
    f32 %63 = fsub f32 %61, f32 %62;
    i1 %64 = fcmp gt f32 %63, f32 1e-06;
    cbr i1 %64(prob = 0.5), ^b5, ^b4;
^while.body5:
    f32* %65 = getelementptr &(f32* %2)[i32 %58];
    f32 %66 = load f32* %65;
    i32 %67 = add i32 %58, i32 %53;
    i32 %68 = add i32 %58, i32 1;
    i32 %69 = add i32 %68, i32 %53;
    i32 %70 = mul i32 %67, i32 %69;
    i32 %71 = sdiv i32 %70, i32 2;
    i32 %72 = add i32 %71, i32 1;
    i32 %73 = add i32 %72, i32 %58;
    f32 %74 = s2f i32 %73 to f32;
    f32 %75 = fdiv f32 %66, f32 %74;
    f32 %76 = fadd f32 %59, f32 %75;
    store f32* %sum3 with f32 %76;
    ubr ^while.header7;
^b3:
    f32* %77 = getelementptr &(f32* %1)[i32 %53];
    store f32* %77 with f32 %59;
    f32 %78 = load f32* %temp;
    f32 %79 = load f32* %sum3;
    i32 %80 = add i32 %53, i32 1;
    ubr ^while.header6;
^while.header9:
    f32 %81 = phi [^b7, f32 %108] [^entry2, f32 %52];
    i32 %82 = phi [^b7, i32 %110] [^entry2, i32 0];
    i32 %83 = phi [^b7, i32 %90] [^entry2, i32 0];
    f32 %84 = phi [^b7, f32 %109] [^entry2, f32 0];
    i1 %85 = scmp lt i32 %82, i32 100000;
    cbr i1 %85(prob = 0.97), ^while.header10, ^entry3;
^b4:
    i1 %86 = fcmp lt f32 %63, f32 -1e-06;
    ubr ^b5;
^b5:
    i1 %87 = phi [^while.header8, i1 true] [^b4, i1 %86];
    cbr i1 %87(prob = 0.97), ^while.body6, ^b6;
^entry3:
    store f32* %sum1 with f32 0;
    ubr ^while.header11;
^while.body6:
    f32 %88 = fadd f32 %61, f32 %62;
    f32 %89 = fdiv f32 %88, f32 2;
    ubr ^while.header8;
^while.header10:
    i32 %90 = phi [^while.header9, i32 %83] [^while.body7, i32 %98];
    f32 %91 = phi [^while.header9, f32 %84] [^while.body7, f32 %106];
    i1 %92 = scmp lt i32 %90, i32 100000;
    cbr i1 %92(prob = 0.97), ^while.body7, ^b7;
^b6:
    f32 %93 = fsub f32 %61, f32 1;
    i1 %94 = fcmp le f32 %93, f32 1e-06;
    cbr i1 %94(prob = 0.5), ^b8, ^b9;
^while.body7:
    f32* %95 = getelementptr &(f32* %1)[i32 %90];
    f32 %96 = load f32* %95;
    i32 %97 = add i32 %90, i32 %82;
    i32 %98 = add i32 %90, i32 1;
    i32 %99 = add i32 %98, i32 %82;
    i32 %100 = mul i32 %97, i32 %99;
    i32 %101 = sdiv i32 %100, i32 2;
    i32 %102 = add i32 %101, i32 1;
    i32 %103 = add i32 %102, i32 %82;
    f32 %104 = s2f i32 %103 to f32;
    f32 %105 = fdiv f32 %96, f32 %104;
    f32 %106 = fadd f32 %91, f32 %105;
    store f32* %sum with f32 %106;
    ubr ^while.header10;
^b7:
    f32* %107 = getelementptr &(f32* %2)[i32 %82];
    store f32* %107 with f32 %91;
    f32 %108 = load f32* %temp;
    f32 %109 = load f32* %sum;
    i32 %110 = add i32 %82, i32 1;
    ubr ^while.header9;
^b8:
    i1 %111 = fcmp ge f32 %93, f32 -1e-06;
    ubr ^b9;
^while.header11:
    f32 %112 = phi [^b10, f32 %135] [^entry3, f32 %81];
    i32 %113 = phi [^b10, i32 %137] [^entry3, i32 0];
    i32 %114 = phi [^b10, i32 %119] [^entry3, i32 0];
    f32 %115 = phi [^b10, f32 %136] [^entry3, f32 0];
    i1 %116 = scmp lt i32 %113, i32 100000;
    cbr i1 %116(prob = 0.97), ^while.header12, ^entry4;
^b9:
    i1 %117 = phi [^b6, i1 false] [^b8, i1 %111];
    cbr i1 %117(prob = 0.5), ^if.then, ^if.else;
^entry4:
    i32 %118 = add i32 %7, i32 1;
    ubr ^while.header1;
^while.header12:
    i32 %119 = phi [^while.header11, i32 %114] [^while.body8, i32 %125];
    f32 %120 = phi [^while.header11, f32 %115] [^while.body8, f32 %133];
    i1 %121 = scmp lt i32 %119, i32 100000;
    cbr i1 %121(prob = 0.97), ^while.body8, ^b10;
^if.then:
    call (i32) -> void @putint(i32 1);
    ubr ^b11;
^if.else:
    call (i32) -> void @putint(i32 0);
    ubr ^b11;
^while.body8:
    f32* %122 = getelementptr &(f32* %2)[i32 %119];
    f32 %123 = load f32* %122;
    i32 %124 = add i32 %119, i32 %113;
    i32 %125 = add i32 %119, i32 1;
    i32 %126 = add i32 %125, i32 %113;
    i32 %127 = mul i32 %124, i32 %126;
    i32 %128 = sdiv i32 %127, i32 2;
    i32 %129 = add i32 %128, i32 1;
    i32 %130 = add i32 %129, i32 %119;
    f32 %131 = s2f i32 %130 to f32;
    f32 %132 = fdiv f32 %123, f32 %131;
    f32 %133 = fadd f32 %120, f32 %132;
    store f32* %sum1 with f32 %133;
    ubr ^while.header12;
^b10:
    f32* %134 = getelementptr &(f32* %0)[i32 %113];
    store f32* %134 with f32 %120;
    f32 %135 = load f32* %temp;
    f32 %136 = load f32* %sum1;
    i32 %137 = add i32 %113, i32 1;
    ubr ^while.header11;
^b11:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
