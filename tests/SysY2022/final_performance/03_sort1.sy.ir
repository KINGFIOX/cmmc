internal func @getarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @getNumPos(i32 %num, i32 %pos) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
^entry:
    i32* %i = alloc i32;
    i32* %pos1 = alloc i32;
    i32* %num1 = alloc i32;
    store i32* %num1 with i32 %num;
    store i32* %pos1 with i32 %pos;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = phi [^while.body, i32 %7] [^entry, i32 %pos];
    i32 %1 = phi [^while.body, i32 %6] [^entry, i32 0];
    i1 %2 = scmp lt i32 %1, i32 %0;
    cbr i1 %2(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %3 = load i32* %num1;
    i32 %4 = sdiv i32 %3, i32 16;
    store i32* %num1 with i32 %4;
    i32 %5 = load i32* %i;
    i32 %6 = add i32 %5, i32 1;
    store i32* %i with i32 %6;
    i32 %7 = load i32* %pos1;
    ubr ^while.header;
^b:
    i32 %8 = load i32* %num1;
    i32 %9 = srem i32 %8, i32 16;
    ret i32 %9;
}
internal func @radixSort(i32 %bitround, i32* %a, i32 %l, i32 %r) -> void {
^entry:
    i32* %i = alloc i32;
    i32* %t = alloc i32;
    i32* %v = alloc i32;
    i32* %i1 = alloc i32;
    [16 * i32]* %cnt = alloc [16 * i32];
    [16 * i32]* %tail = alloc [16 * i32];
    [16 * i32]* %head = alloc [16 * i32];
    i32* %r1 = alloc i32;
    i32* %l1 = alloc i32;
    i32** %a1 = alloc i32*;
    i32* %bitround1 = alloc i32;
    store i32* %bitround1 with i32 %bitround;
    store i32** %a1 with i32* %a;
    store i32* %l1 with i32 %l;
    store i32* %r1 with i32 %r;
    i32* %0 = getelementptr &([16 * i32]* %head)[i64 0][i64 0];
    store i32* %0 with i32 0;
    i32* %1 = getelementptr &([16 * i32]* %head)[i64 0][i64 1];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([16 * i32]* %head)[i64 0][i64 2];
    store i32* %2 with i32 0;
    i32* %3 = getelementptr &([16 * i32]* %head)[i64 0][i64 3];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([16 * i32]* %head)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([16 * i32]* %head)[i64 0][i64 5];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([16 * i32]* %head)[i64 0][i64 6];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([16 * i32]* %head)[i64 0][i64 7];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([16 * i32]* %head)[i64 0][i64 8];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([16 * i32]* %head)[i64 0][i64 9];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([16 * i32]* %head)[i64 0][i64 10];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([16 * i32]* %head)[i64 0][i64 11];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([16 * i32]* %head)[i64 0][i64 12];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([16 * i32]* %head)[i64 0][i64 13];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([16 * i32]* %head)[i64 0][i64 14];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([16 * i32]* %head)[i64 0][i64 15];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &([16 * i32]* %tail)[i64 0][i64 0];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([16 * i32]* %tail)[i64 0][i64 1];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([16 * i32]* %tail)[i64 0][i64 2];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([16 * i32]* %tail)[i64 0][i64 3];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &([16 * i32]* %tail)[i64 0][i64 4];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &([16 * i32]* %tail)[i64 0][i64 5];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &([16 * i32]* %tail)[i64 0][i64 6];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &([16 * i32]* %tail)[i64 0][i64 7];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &([16 * i32]* %tail)[i64 0][i64 8];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &([16 * i32]* %tail)[i64 0][i64 9];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &([16 * i32]* %tail)[i64 0][i64 10];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &([16 * i32]* %tail)[i64 0][i64 11];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &([16 * i32]* %tail)[i64 0][i64 12];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &([16 * i32]* %tail)[i64 0][i64 13];
    store i32* %29 with i32 0;
    i32* %30 = getelementptr &([16 * i32]* %tail)[i64 0][i64 14];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &([16 * i32]* %tail)[i64 0][i64 15];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 0];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 1];
    store i32* %33 with i32 0;
    i32* %34 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 2];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 3];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 4];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 5];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 6];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 7];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 8];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 9];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 10];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 11];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 12];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 13];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 14];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 15];
    store i32* %47 with i32 0;
    i1 %48 = scmp eq i32 %bitround, i32 -1;
    cbr i1 %48(prob = 0.5), ^b1, ^b;
^b:
    i32 %49 = add i32 %l, i32 1;
    i1 %50 = scmp ge i32 %49, i32 %r;
    ubr ^b1;
^b1:
    i1 %51 = phi [^b, i1 %50] [^entry, i1 true];
    cbr i1 %51(prob = 0.5), ^if.then, ^b2;
^b2:
    i32 %52 = load i32* %l1;
    store i32* %i1 with i32 %52;
    ubr ^while.header;
^if.then:
    ret;
^while.header:
    i32 %53 = phi [^while.body, i32 %72] [^b2, i32 %52];
    i32 %54 = load i32* %r1;
    i1 %55 = scmp lt i32 %53, i32 %54;
    cbr i1 %55(prob = 0.97), ^while.body, ^b3;
^while.body:
    i32 %56 = load i32* %i1;
    i32* %57 = load i32** %a1;
    i32* %58 = getelementptr &(i32* %57)[i32 %56];
    i32 %59 = load i32* %58;
    i32 %60 = load i32* %bitround1;
    i32 %61 = call (i32, i32) -> i32 @getNumPos(i32 %59, i32 %60);
    i32* %62 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %61];
    i32 %63 = load i32* %i1;
    i32* %64 = getelementptr &(i32* %57)[i32 %63];
    i32 %65 = load i32* %64;
    i32 %66 = load i32* %bitround1;
    i32 %67 = call (i32, i32) -> i32 @getNumPos(i32 %65, i32 %66);
    i32* %68 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %67];
    i32 %69 = load i32* %68;
    i32 %70 = add i32 %69, i32 1;
    store i32* %62 with i32 %70;
    i32 %71 = load i32* %i1;
    i32 %72 = add i32 %71, i32 1;
    store i32* %i1 with i32 %72;
    ubr ^while.header;
^b3:
    i32* %73 = getelementptr &([16 * i32]* %head)[i64 0][i64 0];
    i32 %74 = load i32* %l1;
    store i32* %73 with i32 %74;
    i32* %75 = getelementptr &([16 * i32]* %tail)[i64 0][i64 0];
    i32* %76 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 0];
    i32 %77 = load i32* %76;
    i32 %78 = add i32 %74, i32 %77;
    store i32* %75 with i32 %78;
    store i32* %i1 with i32 1;
    ubr ^while.header1;
^while.header1:
    i32 %79 = phi [^while.body1, i32 %90] [^b3, i32 1];
    i1 %80 = scmp lt i32 %79, i32 16;
    cbr i1 %80(prob = 0.97), ^while.body1, ^b4;
^while.body1:
    i32 %81 = load i32* %i1;
    i32* %82 = getelementptr &([16 * i32]* %head)[i64 0][i32 %81];
    i32 %83 = add i32 %81, i32 -1;
    i32* %84 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %83];
    i32 %85 = load i32* %84;
    store i32* %82 with i32 %85;
    i32* %86 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %81];
    i32* %87 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %81];
    i32 %88 = load i32* %87;
    i32 %89 = add i32 %85, i32 %88;
    store i32* %86 with i32 %89;
    i32 %90 = add i32 %81, i32 1;
    store i32* %i1 with i32 %90;
    ubr ^while.header1;
^b4:
    store i32* %i1 with i32 0;
    ubr ^while.header2;
^while.header2:
    i32 %91 = phi [^b6, i32 %116] [^b4, i32 0];
    i1 %92 = scmp lt i32 %91, i32 16;
    cbr i1 %92(prob = 0.97), ^indirect, ^b5;
^indirect:
    i32 %93 = load i32* %i1;
    ubr ^while.header3;
^b5:
    i32 %94 = load i32* %l1;
    i32* %95 = getelementptr &([16 * i32]* %head)[i64 0][i64 0];
    store i32* %95 with i32 %94;
    i32* %96 = getelementptr &([16 * i32]* %tail)[i64 0][i64 0];
    i32* %97 = getelementptr &([16 * i32]* %cnt)[i64 0][i64 0];
    i32 %98 = load i32* %97;
    i32 %99 = add i32 %94, i32 %98;
    store i32* %96 with i32 %99;
    store i32* %i with i32 0;
    ubr ^while.header4;
^while.header3:
    i32 %100 = phi [^b8, i32 %167] [^indirect, i32 %93];
    i32* %101 = getelementptr &([16 * i32]* %head)[i64 0][i32 %100];
    i32 %102 = load i32* %101;
    i32* %103 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %100];
    i32 %104 = load i32* %103;
    i1 %105 = scmp lt i32 %102, i32 %104;
    cbr i1 %105(prob = 0.97), ^while.body2, ^b6;
^while.header4:
    i32 %106 = phi [^b7, i32 %140] [^b5, i32 0];
    i1 %107 = scmp lt i32 %106, i32 16;
    cbr i1 %107(prob = 0.97), ^while.body3, ^if.then;
^while.body2:
    i32 %108 = load i32* %i1;
    i32* %109 = getelementptr &([16 * i32]* %head)[i64 0][i32 %108];
    i32 %110 = load i32* %109;
    i32* %111 = load i32** %a1;
    i32* %112 = getelementptr &(i32* %111)[i32 %110];
    i32 %113 = load i32* %112;
    store i32* %v with i32 %113;
    i32 %114 = load i32* %bitround1;
    ubr ^while.header5;
^b6:
    i32 %115 = load i32* %i1;
    i32 %116 = add i32 %115, i32 1;
    store i32* %i1 with i32 %116;
    ubr ^while.header2;
^while.body3:
    i32 %117 = load i32* %i;
    i1 %118 = scmp gt i32 %117, i32 0;
    cbr i1 %118(prob = 0.5), ^if.then1, ^b7;
^if.then1:
    i32* %119 = getelementptr &([16 * i32]* %head)[i64 0][i32 %117];
    i32 %120 = add i32 %117, i32 -1;
    i32* %121 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %120];
    i32 %122 = load i32* %121;
    store i32* %119 with i32 %122;
    i32* %123 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %117];
    i32* %124 = getelementptr &([16 * i32]* %cnt)[i64 0][i32 %117];
    i32 %125 = load i32* %124;
    i32 %126 = add i32 %122, i32 %125;
    store i32* %123 with i32 %126;
    ubr ^b7;
^while.header5:
    i32 %127 = phi [^while.body4, i32 %156] [^while.body2, i32 %114];
    i32 %128 = phi [^while.body4, i32 %161] [^while.body2, i32 %113];
    i32 %129 = call (i32, i32) -> i32 @getNumPos(i32 %128, i32 %127);
    i32 %130 = load i32* %i1;
    i1 %131 = scmp neq i32 %129, i32 %130;
    cbr i1 %131(prob = 0.97), ^while.body4, ^b8;
^b7:
    i32 %132 = load i32* %bitround1;
    i32 %133 = add i32 %132, i32 -1;
    i32* %134 = load i32** %a1;
    i32* %135 = getelementptr &([16 * i32]* %head)[i64 0][i32 %117];
    i32 %136 = load i32* %135;
    i32* %137 = getelementptr &([16 * i32]* %tail)[i64 0][i32 %117];
    i32 %138 = load i32* %137;
    call (i32, i32*, i32, i32) -> void @radixSort(i32 %133, i32* %134, i32 %136, i32 %138);
    i32 %139 = load i32* %i;
    i32 %140 = add i32 %139, i32 1;
    store i32* %i with i32 %140;
    ubr ^while.header4;
^while.body4:
    i32 %141 = load i32* %v;
    store i32* %t with i32 %141;
    i32 %142 = load i32* %bitround1;
    i32 %143 = call (i32, i32) -> i32 @getNumPos(i32 %141, i32 %142);
    i32* %144 = getelementptr &([16 * i32]* %head)[i64 0][i32 %143];
    i32 %145 = load i32* %144;
    i32* %146 = load i32** %a1;
    i32* %147 = getelementptr &(i32* %146)[i32 %145];
    i32 %148 = load i32* %147;
    store i32* %v with i32 %148;
    i32 %149 = load i32* %t;
    i32 %150 = load i32* %bitround1;
    i32 %151 = call (i32, i32) -> i32 @getNumPos(i32 %149, i32 %150);
    i32* %152 = getelementptr &([16 * i32]* %head)[i64 0][i32 %151];
    i32 %153 = load i32* %152;
    i32* %154 = getelementptr &(i32* %146)[i32 %153];
    store i32* %154 with i32 %149;
    i32 %155 = load i32* %t;
    i32 %156 = load i32* %bitround1;
    i32 %157 = call (i32, i32) -> i32 @getNumPos(i32 %155, i32 %156);
    i32* %158 = getelementptr &([16 * i32]* %head)[i64 0][i32 %157];
    i32 %159 = load i32* %158;
    i32 %160 = add i32 %159, i32 1;
    store i32* %158 with i32 %160;
    i32 %161 = load i32* %v;
    ubr ^while.header5;
^b8:
    i32* %162 = getelementptr &([16 * i32]* %head)[i64 0][i32 %130];
    i32 %163 = load i32* %162;
    i32* %164 = load i32** %a1;
    i32* %165 = getelementptr &(i32* %164)[i32 %163];
    i32 %166 = load i32* %v;
    store i32* %165 with i32 %166;
    i32 %167 = load i32* %i1;
    i32* %168 = getelementptr &([16 * i32]* %head)[i64 0][i32 %167];
    i32 %169 = load i32* %168;
    i32 %170 = add i32 %169, i32 1;
    store i32* %168 with i32 %170;
    ubr ^while.header3;
}
internal [30000010 * i32]* @a;
internal i32* @ans;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %i = alloc i32;
    i32* %n = alloc i32;
    i32* %0 = getelementptr &([30000010 * i32]* @a)[i64 0][i64 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    store i32* %n with i32 %1;
    call (i32) -> void @starttime(i32 90);
    call (i32, i32*, i32, i32) -> void @radixSort(i32 8, i32* %0, i32 0, i32 %1);
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %2 = phi [^while.body, i32 %13] [^entry, i32 0];
    i32 %3 = load i32* %n;
    i1 %4 = scmp lt i32 %2, i32 %3;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %5 = load i32* @ans;
    i32 %6 = load i32* %i;
    i32* %7 = getelementptr &([30000010 * i32]* @a)[i64 0][i32 %6];
    i32 %8 = load i32* %7;
    i32 %9 = add i32 %6, i32 2;
    i32 %10 = srem i32 %8, i32 %9;
    i32 %11 = mul i32 %6, i32 %10;
    i32 %12 = add i32 %5, i32 %11;
    store i32* @ans with i32 %12;
    i32 %13 = add i32 %6, i32 1;
    store i32* %i with i32 %13;
    ubr ^while.header;
^b:
    i32 %14 = load i32* @ans;
    i1 %15 = scmp lt i32 %14, i32 0;
    cbr i1 %15(prob = 0.5), ^if.then, ^b1;
^if.then:
    i32 %16 = neg i32 %14;
    store i32* @ans with i32 %16;
    ubr ^b1;
^b1:
    i32 %17 = phi [^if.then, i32 %16] [^b, i32 %14];
    call (i32) -> void @stoptime(i32 102);
    call (i32) -> void @putint(i32 %17);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
