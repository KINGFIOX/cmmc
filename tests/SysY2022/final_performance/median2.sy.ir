internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @n;
internal func @meanless_calculation(i32 %x, i32 %y) -> i32 {
^entry:
    i32* %ret = alloc i32;
    i32* %i = alloc i32;
    i32* %y1 = alloc i32;
    i32* %x1 = alloc i32;
    store i32* %x1 with i32 %x;
    store i32* %y1 with i32 %y;
    store i32* %i with i32 0;
    store i32* %ret with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i32 %1 = load i32* %x1;
    i1 %2 = scmp lt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.5), ^b, ^b1;
^b:
    i32 %5 = load i32* %i;
    i32 %6 = load i32* %y1;
    i1 %7 = scmp lt i32 %5, i32 %6;
    i32 %8 = zext i1 %7 to i32;
    i1 %9 = scmp neq i32 %8, i32 0;
    ubr ^b1;
^b1:
    i1 %10 = phi [^b, i1 %9] [^while.header, i1 false];
    i32 %11 = zext i1 %10 to i32;
    i1 %12 = scmp neq i32 %11, i32 0;
    cbr i1 %12(prob = 0.97), ^while.body, ^b2;
^while.body:
    i32 %13 = load i32* %i;
    i32 %14 = add i32 %13, i32 1;
    store i32* %i with i32 %14;
    i32 %15 = load i32* %ret;
    i32 %16 = load i32* %x1;
    i32 %17 = add i32 %15, i32 %16;
    i32 %18 = load i32* %i;
    i32 %19 = add i32 %17, i32 %18;
    store i32* %ret with i32 %19;
    ubr ^while.header;
^b2:
    i32 %20 = load i32* %ret;
    ret i32 %20;
}
internal func @swap(i32* %arr, i32 %l, i32 %r) -> i32 {
^entry:
    i32* %curr = alloc i32;
    i32* %r1 = alloc i32;
    i32* %l1 = alloc i32;
    i32** %arr1 = alloc i32*;
    store i32** %arr1 with i32* %arr;
    store i32* %l1 with i32 %l;
    store i32* %r1 with i32 %r;
    i32 %0 = load i32* %l1;
    i64 %1 = sext i32 %0 to i64;
    i32* %2 = load i32** %arr1;
    i32* %3 = getelementptr &(i32* %2)[i64 %1];
    i32 %4 = load i32* %3;
    store i32* %curr with i32 %4;
    i32 %5 = load i32* %l1;
    i64 %6 = sext i32 %5 to i64;
    i32* %7 = load i32** %arr1;
    i32* %8 = getelementptr &(i32* %7)[i64 %6];
    i32 %9 = load i32* %r1;
    i64 %10 = sext i32 %9 to i64;
    i32* %11 = load i32** %arr1;
    i32* %12 = getelementptr &(i32* %11)[i64 %10];
    i32 %13 = load i32* %12;
    store i32* %8 with i32 %13;
    i32 %14 = load i32* %r1;
    i64 %15 = sext i32 %14 to i64;
    i32* %16 = load i32** %arr1;
    i32* %17 = getelementptr &(i32* %16)[i64 %15];
    i32 %18 = load i32* %curr;
    store i32* %17 with i32 %18;
    i32 %19 = load i32* %l1;
    i32 %20 = load i32* %r1;
    i32 %21 = call (i32, i32) -> i32 @meanless_calculation(i32 %19, i32 %20);
    ret i32 %21;
}
internal func @median(i32* %arr, i32 %begin, i32 %end, i32 %pos) -> i32 {
^entry:
    i32* %xx = alloc i32;
    i32* %r = alloc i32;
    i32* %l = alloc i32;
    i32* %pivot = alloc i32;
    i32* %pos1 = alloc i32;
    i32* %end1 = alloc i32;
    i32* %begin1 = alloc i32;
    i32** %arr1 = alloc i32*;
    store i32** %arr1 with i32* %arr;
    store i32* %begin1 with i32 %begin;
    store i32* %end1 with i32 %end;
    store i32* %pos1 with i32 %pos;
    i32 %0 = load i32* %begin1;
    i64 %1 = sext i32 %0 to i64;
    i32* %2 = load i32** %arr1;
    i32* %3 = getelementptr &(i32* %2)[i64 %1];
    i32 %4 = load i32* %3;
    store i32* %pivot with i32 %4;
    i32 %5 = load i32* %begin1;
    store i32* %l with i32 %5;
    i32 %6 = load i32* %end1;
    i32 %7 = add i32 %6, i32 1;
    store i32* %r with i32 %7;
    store i32* %xx with i32 0;
    ubr ^while.header;
^while.header:
    i1 %8 = scmp eq i32 1, i32 1;
    i32 %9 = zext i1 %8 to i32;
    i1 %10 = scmp neq i32 %9, i32 0;
    cbr i1 %10(prob = 0.97), ^while.body, ^b;
^while.body:
    ubr ^while.header1;
^b:
    i32 %11 = load i32* %begin1;
    i64 %12 = sext i32 %11 to i64;
    i32* %13 = load i32** %arr1;
    i32* %14 = getelementptr &(i32* %13)[i64 %12];
    i32 %15 = load i32* %pivot;
    store i32* %14 with i32 %15;
    i32* %16 = load i32** %arr1;
    i32 %17 = load i32* %begin1;
    i32 %18 = load i32* %l;
    i32 %19 = call (i32*, i32, i32) -> i32 @swap(i32* %16, i32 %17, i32 %18);
    i32 %20 = load i32* %l;
    i32 %21 = load i32* %pos1;
    i1 %22 = scmp gt i32 %20, i32 %21;
    i32 %23 = zext i1 %22 to i32;
    i1 %24 = scmp neq i32 %23, i32 0;
    cbr i1 %24(prob = 0.5), ^if.then, ^b1;
^while.header1:
    i32 %25 = load i32* %l;
    i32 %26 = load i32* %r;
    i1 %27 = scmp lt i32 %25, i32 %26;
    i32 %28 = zext i1 %27 to i32;
    i1 %29 = scmp neq i32 %28, i32 0;
    cbr i1 %29(prob = 0.97), ^while.body1, ^b2;
^b1:
    i32 %30 = load i32* %l;
    i32 %31 = load i32* %pos1;
    i1 %32 = scmp lt i32 %30, i32 %31;
    i32 %33 = zext i1 %32 to i32;
    i1 %34 = scmp neq i32 %33, i32 0;
    cbr i1 %34(prob = 0.5), ^if.then1, ^b3;
^if.then:
    i32* %35 = load i32** %arr1;
    i32 %36 = load i32* %begin1;
    i32 %37 = load i32* %l;
    i32 %38 = load i32* %pos1;
    i32 %39 = call (i32*, i32, i32, i32) -> i32 @median(i32* %35, i32 %36, i32 %37, i32 %38);
    ret i32 %39;
^b2:
    ubr ^while.header2;
^while.body1:
    i32 %40 = load i32* %r;
    i32 %41 = sub i32 %40, i32 1;
    store i32* %r with i32 %41;
    i32 %42 = load i32* %r;
    i64 %43 = sext i32 %42 to i64;
    i32* %44 = load i32** %arr1;
    i32* %45 = getelementptr &(i32* %44)[i64 %43];
    i32 %46 = load i32* %45;
    i32 %47 = load i32* %pivot;
    i1 %48 = scmp lt i32 %46, i32 %47;
    i32 %49 = zext i1 %48 to i32;
    i1 %50 = scmp neq i32 %49, i32 0;
    cbr i1 %50(prob = 0.5), ^if.then2, ^b4;
^if.then1:
    i32* %51 = load i32** %arr1;
    i32 %52 = load i32* %l;
    i32 %53 = add i32 %52, i32 1;
    i32 %54 = load i32* %end1;
    i32 %55 = load i32* %pos1;
    i32 %56 = call (i32*, i32, i32, i32) -> i32 @median(i32* %51, i32 %53, i32 %54, i32 %55);
    ret i32 %56;
^b3:
    i32 %57 = load i32* %xx;
    ret i32 %57;
^if.then2:
    ubr ^b2;
^b4:
    i32 %58 = load i32* %xx;
    i32 %59 = add i32 %58, i32 1;
    store i32* %xx with i32 %59;
    ubr ^while.header1;
^while.header2:
    i32 %60 = load i32* %l;
    i32 %61 = load i32* %r;
    i1 %62 = scmp lt i32 %60, i32 %61;
    i32 %63 = zext i1 %62 to i32;
    i1 %64 = scmp neq i32 %63, i32 0;
    cbr i1 %64(prob = 0.97), ^while.body2, ^b5;
^while.body2:
    i32 %65 = load i32* %l;
    i32 %66 = add i32 %65, i32 1;
    store i32* %l with i32 %66;
    i32 %67 = load i32* %l;
    i64 %68 = sext i32 %67 to i64;
    i32* %69 = load i32** %arr1;
    i32* %70 = getelementptr &(i32* %69)[i64 %68];
    i32 %71 = load i32* %70;
    i32 %72 = load i32* %pivot;
    i1 %73 = scmp ge i32 %71, i32 %72;
    i32 %74 = zext i1 %73 to i32;
    i1 %75 = scmp neq i32 %74, i32 0;
    cbr i1 %75(prob = 0.5), ^if.then3, ^b6;
^b5:
    i32 %76 = load i32* %l;
    i32 %77 = load i32* %r;
    i1 %78 = scmp eq i32 %76, i32 %77;
    i32 %79 = zext i1 %78 to i32;
    i1 %80 = scmp neq i32 %79, i32 0;
    cbr i1 %80(prob = 0.5), ^if.then4, ^if.else;
^if.then3:
    ubr ^b5;
^b6:
    i32 %81 = load i32* %xx;
    i32 %82 = sub i32 %81, i32 1;
    store i32* %xx with i32 %82;
    ubr ^while.header2;
^if.then4:
    ubr ^b;
^if.else:
    i32* %83 = load i32** %arr1;
    i32 %84 = load i32* %l;
    i32 %85 = load i32* %r;
    i32 %86 = call (i32*, i32, i32) -> i32 @swap(i32* %83, i32 %84, i32 %85);
    ubr ^b7;
^b7:
    ubr ^while.header;
}
internal [10000000 * i32]* @a;
func @main() -> i32 { Entry } {
^entry:
    i32* %0 = getelementptr &([10000000 * i32]* @a)[i64 0][i64 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    store i32* @n with i32 %1;
    call (i32) -> void @starttime(i32 59);
    i32* %2 = getelementptr &([10000000 * i32]* @a)[i64 0][i64 0];
    i32 %3 = load i32* @n;
    i32 %4 = sub i32 %3, i32 1;
    i32 %5 = load i32* @n;
    i32 %6 = sdiv i32 %5, i32 2;
    i32 %7 = call (i32*, i32, i32, i32) -> i32 @median(i32* %2, i32 0, i32 %4, i32 %6);
    call (i32) -> void @stoptime(i32 61);
    i32 %8 = load i32* @n;
    i32* %9 = getelementptr &([10000000 * i32]* @a)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %8, i32* %9);
    i32 %10 = load i32* @n;
    i32 %11 = sdiv i32 %10, i32 2;
    i64 %12 = sext i32 %11 to i64;
    i32* %13 = getelementptr &([10000000 * i32]* @a)[i64 0][i64 %12];
    i32 %14 = load i32* %13;
    i32 %15 = srem i32 %14, i32 256;
    ret i32 %15;
}
