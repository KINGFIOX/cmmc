internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @myabs(f32 %num) -> f32 {
^entry:
    f32* %num1 = alloc f32;
    store f32* %num1 with f32 %num;
    f32 %0 = load f32* %num1;
    i1 %1 = fcmp gt f32 %0, f32 0;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^b;
^b:
    f32 %4 = load f32* %num1;
    i1 %5 = fcmp lt f32 %4, f32 0;
    i32 %6 = zext i1 %5 to i32;
    i1 %7 = scmp neq i32 %6, i32 0;
    cbr i1 %7(prob = 0.5), ^if.then1, ^b1;
^if.then:
    f32 %8 = load f32* %num1;
    ret f32 %8;
^if.then1:
    f32 %9 = load f32* %num1;
    f32 %10 = fneg f32 %9;
    ret f32 %10;
^b1:
    unreachable;
}
internal func @func(f32 %data, i32 %num) -> f32 {
^entry:
    i32* %num1 = alloc i32;
    f32* %data1 = alloc f32;
    store f32* %data1 with f32 %data;
    store i32* %num1 with i32 %num;
    i32 %0 = load i32* %num1;
    i1 %1 = scmp lt i32 %0, i32 0;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^b;
^if.then:
    ret f32 0;
^b:
    i32 %4 = load i32* %num1;
    i32 %5 = sub i32 %4, i32 1;
    store i32* %num1 with i32 %5;
    f32 %6 = load f32* %data1;
    f32 %7 = load f32* %data1;
    i32 %8 = load i32* %num1;
    f32 %9 = call (f32, i32) -> f32 @func(f32 %7, i32 %8);
    f32 %10 = fadd f32 %6, f32 %9;
    store f32* %data1 with f32 %10;
    f32 %11 = load f32* %data1;
    f32 %12 = load f32* %data1;
    i32 %13 = load i32* %num1;
    f32 %14 = call (f32, i32) -> f32 @func(f32 %12, i32 %13);
    f32 %15 = fsub f32 %11, f32 %14;
    store f32* %data1 with f32 %15;
    f32 %16 = load f32* %data1;
    ret f32 %16;
}
func @main() -> i32 { Entry } {
^entry:
    f32* %expect = alloc f32;
    f32* %res = alloc f32;
    i32* %num = alloc i32;
    f32* %a = alloc f32;
    call (i32) -> void @starttime(i32 21);
    store f32* %a with f32 1.001;
    i32 %0 = call () -> i32 @getint();
    store i32* %num with i32 %0;
    store f32* %expect with f32 0;
    f32 %1 = load f32* %a;
    i32 %2 = load i32* %num;
    f32 %3 = call (f32, i32) -> f32 @func(f32 %1, i32 %2);
    store f32* %res with f32 %3;
    f32 %4 = load f32* %res;
    f32 %5 = load f32* %expect;
    f32 %6 = fsub f32 %4, f32 %5;
    i1 %7 = fcmp eq f32 %6, f32 0;
    i32 %8 = zext i1 %7 to i32;
    i1 %9 = scmp neq i32 %8, i32 0;
    cbr i1 %9(prob = 0.5), ^if.then, ^b;
^if.then:
    call (i32) -> void @putch(i32 112);
    ubr ^b;
^b:
    call (i32) -> void @stoptime(i32 32);
    ret i32 0;
}
