internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @func(i32 %n) -> i32 {
^entry:
    i32* %m = alloc i32;
    i32* %m1 = alloc i32;
    [100 * i32]* %s = alloc [100 * i32];
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    i32* %sum = alloc i32;
    i32* %n1 = alloc i32;
    store i32* %n1 with i32 %n;
    store i32* %sum with i32 0;
    store i32* %i with i32 200;
    store i32* %j with i32 0;
    store i32* %m1 with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %m1;
    i1 %1 = scmp lt i32 %0, i32 100;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %4 = load i32* %m1;
    i64 %5 = sext i32 %4 to i64;
    i32* %6 = getelementptr &([100 * i32]* %s)[i64 0][i64 %5];
    store i32* %6 with i32 0;
    i32 %7 = load i32* %m1;
    i32 %8 = add i32 %7, i32 1;
    store i32* %m1 with i32 %8;
    ubr ^while.header;
^b:
    ubr ^while.header1;
^while.header1:
    i32 %9 = load i32* %j;
    i32 %10 = load i32* %n1;
    i1 %11 = scmp lt i32 %9, i32 %10;
    i32 %12 = zext i1 %11 to i32;
    i1 %13 = scmp neq i32 %12, i32 0;
    cbr i1 %13(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %14 = load i32* %i;
    i1 %15 = scmp gt i32 %14, i32 1;
    i32 %16 = zext i1 %15 to i32;
    i1 %17 = scmp neq i32 %16, i32 0;
    cbr i1 %17(prob = 0.5), ^if.then, ^b2;
^b1:
    i32 %18 = load i32* %sum;
    ret i32 %18;
^b2:
    i32 %19 = load i32* %j;
    i32 %20 = add i32 %19, i32 1;
    store i32* %j with i32 %20;
    store i32* %m with i32 0;
    ubr ^while.header2;
^if.then:
    i32* %21 = getelementptr &([100 * i32]* %s)[i64 0][i64 1];
    store i32* %21 with i32 1;
    i32 %22 = load i32* %i;
    i1 %23 = scmp gt i32 %22, i32 2;
    i32 %24 = zext i1 %23 to i32;
    i1 %25 = scmp neq i32 %24, i32 0;
    cbr i1 %25(prob = 0.5), ^if.then1, ^b3;
^b3:
    ubr ^b2;
^if.then1:
    i32* %26 = getelementptr &([100 * i32]* %s)[i64 0][i64 2];
    store i32* %26 with i32 2;
    i32 %27 = load i32* %i;
    i1 %28 = scmp gt i32 %27, i32 3;
    i32 %29 = zext i1 %28 to i32;
    i1 %30 = scmp neq i32 %29, i32 0;
    cbr i1 %30(prob = 0.5), ^if.then2, ^b4;
^while.header2:
    i32 %31 = load i32* %m;
    i1 %32 = scmp lt i32 %31, i32 100;
    i32 %33 = zext i1 %32 to i32;
    i1 %34 = scmp neq i32 %33, i32 0;
    cbr i1 %34(prob = 0.97), ^while.body2, ^b5;
^b4:
    ubr ^b3;
^while.body2:
    i32 %35 = load i32* %sum;
    i32 %36 = load i32* %m;
    i64 %37 = sext i32 %36 to i64;
    i32* %38 = getelementptr &([100 * i32]* %s)[i64 0][i64 %37];
    i32 %39 = load i32* %38;
    i32 %40 = add i32 %35, i32 %39;
    store i32* %sum with i32 %40;
    i32 %41 = load i32* %m;
    i32 %42 = add i32 %41, i32 1;
    store i32* %m with i32 %42;
    ubr ^while.header2;
^if.then2:
    i32* %43 = getelementptr &([100 * i32]* %s)[i64 0][i64 3];
    store i32* %43 with i32 3;
    i32 %44 = load i32* %i;
    i1 %45 = scmp gt i32 %44, i32 4;
    i32 %46 = zext i1 %45 to i32;
    i1 %47 = scmp neq i32 %46, i32 0;
    cbr i1 %47(prob = 0.5), ^if.then3, ^b6;
^b5:
    i32 %48 = load i32* %sum;
    i32 %49 = srem i32 %48, i32 65535;
    store i32* %sum with i32 %49;
    ubr ^while.header1;
^b6:
    ubr ^b4;
^if.then3:
    i32* %50 = getelementptr &([100 * i32]* %s)[i64 0][i64 4];
    store i32* %50 with i32 4;
    i32 %51 = load i32* %i;
    i1 %52 = scmp gt i32 %51, i32 5;
    i32 %53 = zext i1 %52 to i32;
    i1 %54 = scmp neq i32 %53, i32 0;
    cbr i1 %54(prob = 0.5), ^if.then4, ^b7;
^b7:
    ubr ^b6;
^if.then4:
    i32* %55 = getelementptr &([100 * i32]* %s)[i64 0][i64 5];
    store i32* %55 with i32 5;
    i32 %56 = load i32* %i;
    i1 %57 = scmp gt i32 %56, i32 6;
    i32 %58 = zext i1 %57 to i32;
    i1 %59 = scmp neq i32 %58, i32 0;
    cbr i1 %59(prob = 0.5), ^if.then5, ^b8;
^b8:
    ubr ^b7;
^if.then5:
    i32* %60 = getelementptr &([100 * i32]* %s)[i64 0][i64 6];
    store i32* %60 with i32 6;
    i32 %61 = load i32* %i;
    i1 %62 = scmp gt i32 %61, i32 7;
    i32 %63 = zext i1 %62 to i32;
    i1 %64 = scmp neq i32 %63, i32 0;
    cbr i1 %64(prob = 0.5), ^if.then6, ^b9;
^b9:
    ubr ^b8;
^if.then6:
    i32* %65 = getelementptr &([100 * i32]* %s)[i64 0][i64 7];
    store i32* %65 with i32 7;
    i32 %66 = load i32* %i;
    i1 %67 = scmp gt i32 %66, i32 8;
    i32 %68 = zext i1 %67 to i32;
    i1 %69 = scmp neq i32 %68, i32 0;
    cbr i1 %69(prob = 0.5), ^if.then7, ^b10;
^b10:
    ubr ^b9;
^if.then7:
    i32* %70 = getelementptr &([100 * i32]* %s)[i64 0][i64 8];
    store i32* %70 with i32 8;
    i32 %71 = load i32* %i;
    i1 %72 = scmp gt i32 %71, i32 9;
    i32 %73 = zext i1 %72 to i32;
    i1 %74 = scmp neq i32 %73, i32 0;
    cbr i1 %74(prob = 0.5), ^if.then8, ^b11;
^b11:
    ubr ^b10;
^if.then8:
    i32* %75 = getelementptr &([100 * i32]* %s)[i64 0][i64 9];
    store i32* %75 with i32 9;
    i32 %76 = load i32* %i;
    i1 %77 = scmp gt i32 %76, i32 10;
    i32 %78 = zext i1 %77 to i32;
    i1 %79 = scmp neq i32 %78, i32 0;
    cbr i1 %79(prob = 0.5), ^if.then9, ^b12;
^b12:
    ubr ^b11;
^if.then9:
    i32* %80 = getelementptr &([100 * i32]* %s)[i64 0][i64 10];
    store i32* %80 with i32 10;
    i32 %81 = load i32* %i;
    i1 %82 = scmp gt i32 %81, i32 11;
    i32 %83 = zext i1 %82 to i32;
    i1 %84 = scmp neq i32 %83, i32 0;
    cbr i1 %84(prob = 0.5), ^if.then10, ^b13;
^b13:
    ubr ^b12;
^if.then10:
    i32* %85 = getelementptr &([100 * i32]* %s)[i64 0][i64 11];
    store i32* %85 with i32 11;
    i32 %86 = load i32* %i;
    i1 %87 = scmp gt i32 %86, i32 12;
    i32 %88 = zext i1 %87 to i32;
    i1 %89 = scmp neq i32 %88, i32 0;
    cbr i1 %89(prob = 0.5), ^if.then11, ^b14;
^b14:
    ubr ^b13;
^if.then11:
    i32* %90 = getelementptr &([100 * i32]* %s)[i64 0][i64 12];
    store i32* %90 with i32 12;
    i32 %91 = load i32* %i;
    i1 %92 = scmp gt i32 %91, i32 13;
    i32 %93 = zext i1 %92 to i32;
    i1 %94 = scmp neq i32 %93, i32 0;
    cbr i1 %94(prob = 0.5), ^if.then12, ^b15;
^b15:
    ubr ^b14;
^if.then12:
    i32* %95 = getelementptr &([100 * i32]* %s)[i64 0][i64 13];
    store i32* %95 with i32 13;
    i32 %96 = load i32* %i;
    i1 %97 = scmp gt i32 %96, i32 14;
    i32 %98 = zext i1 %97 to i32;
    i1 %99 = scmp neq i32 %98, i32 0;
    cbr i1 %99(prob = 0.5), ^if.then13, ^b16;
^b16:
    ubr ^b15;
^if.then13:
    i32* %100 = getelementptr &([100 * i32]* %s)[i64 0][i64 14];
    store i32* %100 with i32 14;
    i32 %101 = load i32* %i;
    i1 %102 = scmp gt i32 %101, i32 15;
    i32 %103 = zext i1 %102 to i32;
    i1 %104 = scmp neq i32 %103, i32 0;
    cbr i1 %104(prob = 0.5), ^if.then14, ^b17;
^b17:
    ubr ^b16;
^if.then14:
    i32* %105 = getelementptr &([100 * i32]* %s)[i64 0][i64 15];
    store i32* %105 with i32 15;
    i32 %106 = load i32* %i;
    i1 %107 = scmp gt i32 %106, i32 16;
    i32 %108 = zext i1 %107 to i32;
    i1 %109 = scmp neq i32 %108, i32 0;
    cbr i1 %109(prob = 0.5), ^if.then15, ^b18;
^b18:
    ubr ^b17;
^if.then15:
    i32* %110 = getelementptr &([100 * i32]* %s)[i64 0][i64 16];
    store i32* %110 with i32 16;
    i32 %111 = load i32* %i;
    i1 %112 = scmp gt i32 %111, i32 17;
    i32 %113 = zext i1 %112 to i32;
    i1 %114 = scmp neq i32 %113, i32 0;
    cbr i1 %114(prob = 0.5), ^if.then16, ^b19;
^b19:
    ubr ^b18;
^if.then16:
    i32* %115 = getelementptr &([100 * i32]* %s)[i64 0][i64 17];
    store i32* %115 with i32 17;
    i32 %116 = load i32* %i;
    i1 %117 = scmp gt i32 %116, i32 18;
    i32 %118 = zext i1 %117 to i32;
    i1 %119 = scmp neq i32 %118, i32 0;
    cbr i1 %119(prob = 0.5), ^if.then17, ^b20;
^b20:
    ubr ^b19;
^if.then17:
    i32* %120 = getelementptr &([100 * i32]* %s)[i64 0][i64 18];
    store i32* %120 with i32 18;
    i32 %121 = load i32* %i;
    i1 %122 = scmp gt i32 %121, i32 19;
    i32 %123 = zext i1 %122 to i32;
    i1 %124 = scmp neq i32 %123, i32 0;
    cbr i1 %124(prob = 0.5), ^if.then18, ^b21;
^b21:
    ubr ^b20;
^if.then18:
    i32* %125 = getelementptr &([100 * i32]* %s)[i64 0][i64 19];
    store i32* %125 with i32 19;
    i32 %126 = load i32* %i;
    i1 %127 = scmp gt i32 %126, i32 20;
    i32 %128 = zext i1 %127 to i32;
    i1 %129 = scmp neq i32 %128, i32 0;
    cbr i1 %129(prob = 0.5), ^if.then19, ^b22;
^b22:
    ubr ^b21;
^if.then19:
    i32* %130 = getelementptr &([100 * i32]* %s)[i64 0][i64 20];
    store i32* %130 with i32 20;
    i32 %131 = load i32* %i;
    i1 %132 = scmp gt i32 %131, i32 21;
    i32 %133 = zext i1 %132 to i32;
    i1 %134 = scmp neq i32 %133, i32 0;
    cbr i1 %134(prob = 0.5), ^if.then20, ^b23;
^b23:
    ubr ^b22;
^if.then20:
    i32* %135 = getelementptr &([100 * i32]* %s)[i64 0][i64 21];
    store i32* %135 with i32 21;
    i32 %136 = load i32* %i;
    i1 %137 = scmp gt i32 %136, i32 22;
    i32 %138 = zext i1 %137 to i32;
    i1 %139 = scmp neq i32 %138, i32 0;
    cbr i1 %139(prob = 0.5), ^if.then21, ^b24;
^b24:
    ubr ^b23;
^if.then21:
    i32* %140 = getelementptr &([100 * i32]* %s)[i64 0][i64 22];
    store i32* %140 with i32 22;
    i32 %141 = load i32* %i;
    i1 %142 = scmp gt i32 %141, i32 23;
    i32 %143 = zext i1 %142 to i32;
    i1 %144 = scmp neq i32 %143, i32 0;
    cbr i1 %144(prob = 0.5), ^if.then22, ^b25;
^b25:
    ubr ^b24;
^if.then22:
    i32* %145 = getelementptr &([100 * i32]* %s)[i64 0][i64 23];
    store i32* %145 with i32 23;
    i32 %146 = load i32* %i;
    i1 %147 = scmp gt i32 %146, i32 24;
    i32 %148 = zext i1 %147 to i32;
    i1 %149 = scmp neq i32 %148, i32 0;
    cbr i1 %149(prob = 0.5), ^if.then23, ^b26;
^b26:
    ubr ^b25;
^if.then23:
    i32* %150 = getelementptr &([100 * i32]* %s)[i64 0][i64 24];
    store i32* %150 with i32 24;
    i32 %151 = load i32* %i;
    i1 %152 = scmp gt i32 %151, i32 25;
    i32 %153 = zext i1 %152 to i32;
    i1 %154 = scmp neq i32 %153, i32 0;
    cbr i1 %154(prob = 0.5), ^if.then24, ^b27;
^b27:
    ubr ^b26;
^if.then24:
    i32* %155 = getelementptr &([100 * i32]* %s)[i64 0][i64 25];
    store i32* %155 with i32 25;
    i32 %156 = load i32* %i;
    i1 %157 = scmp gt i32 %156, i32 26;
    i32 %158 = zext i1 %157 to i32;
    i1 %159 = scmp neq i32 %158, i32 0;
    cbr i1 %159(prob = 0.5), ^if.then25, ^b28;
^b28:
    ubr ^b27;
^if.then25:
    i32* %160 = getelementptr &([100 * i32]* %s)[i64 0][i64 26];
    store i32* %160 with i32 26;
    i32 %161 = load i32* %i;
    i1 %162 = scmp gt i32 %161, i32 27;
    i32 %163 = zext i1 %162 to i32;
    i1 %164 = scmp neq i32 %163, i32 0;
    cbr i1 %164(prob = 0.5), ^if.then26, ^b29;
^b29:
    ubr ^b28;
^if.then26:
    i32* %165 = getelementptr &([100 * i32]* %s)[i64 0][i64 27];
    store i32* %165 with i32 27;
    i32 %166 = load i32* %i;
    i1 %167 = scmp gt i32 %166, i32 28;
    i32 %168 = zext i1 %167 to i32;
    i1 %169 = scmp neq i32 %168, i32 0;
    cbr i1 %169(prob = 0.5), ^if.then27, ^b30;
^b30:
    ubr ^b29;
^if.then27:
    i32* %170 = getelementptr &([100 * i32]* %s)[i64 0][i64 28];
    store i32* %170 with i32 28;
    i32 %171 = load i32* %i;
    i1 %172 = scmp gt i32 %171, i32 29;
    i32 %173 = zext i1 %172 to i32;
    i1 %174 = scmp neq i32 %173, i32 0;
    cbr i1 %174(prob = 0.5), ^if.then28, ^b31;
^b31:
    ubr ^b30;
^if.then28:
    i32* %175 = getelementptr &([100 * i32]* %s)[i64 0][i64 29];
    store i32* %175 with i32 29;
    i32 %176 = load i32* %i;
    i1 %177 = scmp gt i32 %176, i32 30;
    i32 %178 = zext i1 %177 to i32;
    i1 %179 = scmp neq i32 %178, i32 0;
    cbr i1 %179(prob = 0.5), ^if.then29, ^b32;
^b32:
    ubr ^b31;
^if.then29:
    i32* %180 = getelementptr &([100 * i32]* %s)[i64 0][i64 30];
    store i32* %180 with i32 30;
    i32 %181 = load i32* %i;
    i1 %182 = scmp gt i32 %181, i32 31;
    i32 %183 = zext i1 %182 to i32;
    i1 %184 = scmp neq i32 %183, i32 0;
    cbr i1 %184(prob = 0.5), ^if.then30, ^b33;
^b33:
    ubr ^b32;
^if.then30:
    i32* %185 = getelementptr &([100 * i32]* %s)[i64 0][i64 31];
    store i32* %185 with i32 31;
    i32 %186 = load i32* %i;
    i1 %187 = scmp gt i32 %186, i32 32;
    i32 %188 = zext i1 %187 to i32;
    i1 %189 = scmp neq i32 %188, i32 0;
    cbr i1 %189(prob = 0.5), ^if.then31, ^b34;
^b34:
    ubr ^b33;
^if.then31:
    i32* %190 = getelementptr &([100 * i32]* %s)[i64 0][i64 32];
    store i32* %190 with i32 32;
    i32 %191 = load i32* %i;
    i1 %192 = scmp gt i32 %191, i32 33;
    i32 %193 = zext i1 %192 to i32;
    i1 %194 = scmp neq i32 %193, i32 0;
    cbr i1 %194(prob = 0.5), ^if.then32, ^b35;
^b35:
    ubr ^b34;
^if.then32:
    i32* %195 = getelementptr &([100 * i32]* %s)[i64 0][i64 33];
    store i32* %195 with i32 33;
    i32 %196 = load i32* %i;
    i1 %197 = scmp gt i32 %196, i32 34;
    i32 %198 = zext i1 %197 to i32;
    i1 %199 = scmp neq i32 %198, i32 0;
    cbr i1 %199(prob = 0.5), ^if.then33, ^b36;
^b36:
    ubr ^b35;
^if.then33:
    i32* %200 = getelementptr &([100 * i32]* %s)[i64 0][i64 34];
    store i32* %200 with i32 34;
    i32 %201 = load i32* %i;
    i1 %202 = scmp gt i32 %201, i32 35;
    i32 %203 = zext i1 %202 to i32;
    i1 %204 = scmp neq i32 %203, i32 0;
    cbr i1 %204(prob = 0.5), ^if.then34, ^b37;
^b37:
    ubr ^b36;
^if.then34:
    i32* %205 = getelementptr &([100 * i32]* %s)[i64 0][i64 35];
    store i32* %205 with i32 35;
    i32 %206 = load i32* %i;
    i1 %207 = scmp gt i32 %206, i32 36;
    i32 %208 = zext i1 %207 to i32;
    i1 %209 = scmp neq i32 %208, i32 0;
    cbr i1 %209(prob = 0.5), ^if.then35, ^b38;
^b38:
    ubr ^b37;
^if.then35:
    i32* %210 = getelementptr &([100 * i32]* %s)[i64 0][i64 36];
    store i32* %210 with i32 36;
    i32 %211 = load i32* %i;
    i1 %212 = scmp gt i32 %211, i32 37;
    i32 %213 = zext i1 %212 to i32;
    i1 %214 = scmp neq i32 %213, i32 0;
    cbr i1 %214(prob = 0.5), ^if.then36, ^b39;
^b39:
    ubr ^b38;
^if.then36:
    i32* %215 = getelementptr &([100 * i32]* %s)[i64 0][i64 37];
    store i32* %215 with i32 37;
    i32 %216 = load i32* %i;
    i1 %217 = scmp gt i32 %216, i32 38;
    i32 %218 = zext i1 %217 to i32;
    i1 %219 = scmp neq i32 %218, i32 0;
    cbr i1 %219(prob = 0.5), ^if.then37, ^b40;
^b40:
    ubr ^b39;
^if.then37:
    i32* %220 = getelementptr &([100 * i32]* %s)[i64 0][i64 38];
    store i32* %220 with i32 38;
    i32 %221 = load i32* %i;
    i1 %222 = scmp gt i32 %221, i32 39;
    i32 %223 = zext i1 %222 to i32;
    i1 %224 = scmp neq i32 %223, i32 0;
    cbr i1 %224(prob = 0.5), ^if.then38, ^b41;
^b41:
    ubr ^b40;
^if.then38:
    i32* %225 = getelementptr &([100 * i32]* %s)[i64 0][i64 39];
    store i32* %225 with i32 39;
    i32 %226 = load i32* %i;
    i1 %227 = scmp gt i32 %226, i32 40;
    i32 %228 = zext i1 %227 to i32;
    i1 %229 = scmp neq i32 %228, i32 0;
    cbr i1 %229(prob = 0.5), ^if.then39, ^b42;
^b42:
    ubr ^b41;
^if.then39:
    i32* %230 = getelementptr &([100 * i32]* %s)[i64 0][i64 40];
    store i32* %230 with i32 40;
    i32 %231 = load i32* %i;
    i1 %232 = scmp gt i32 %231, i32 41;
    i32 %233 = zext i1 %232 to i32;
    i1 %234 = scmp neq i32 %233, i32 0;
    cbr i1 %234(prob = 0.5), ^if.then40, ^b43;
^b43:
    ubr ^b42;
^if.then40:
    i32* %235 = getelementptr &([100 * i32]* %s)[i64 0][i64 41];
    store i32* %235 with i32 41;
    i32 %236 = load i32* %i;
    i1 %237 = scmp gt i32 %236, i32 42;
    i32 %238 = zext i1 %237 to i32;
    i1 %239 = scmp neq i32 %238, i32 0;
    cbr i1 %239(prob = 0.5), ^if.then41, ^b44;
^b44:
    ubr ^b43;
^if.then41:
    i32* %240 = getelementptr &([100 * i32]* %s)[i64 0][i64 42];
    store i32* %240 with i32 42;
    i32 %241 = load i32* %i;
    i1 %242 = scmp gt i32 %241, i32 43;
    i32 %243 = zext i1 %242 to i32;
    i1 %244 = scmp neq i32 %243, i32 0;
    cbr i1 %244(prob = 0.5), ^if.then42, ^b45;
^b45:
    ubr ^b44;
^if.then42:
    i32* %245 = getelementptr &([100 * i32]* %s)[i64 0][i64 43];
    store i32* %245 with i32 43;
    i32 %246 = load i32* %i;
    i1 %247 = scmp gt i32 %246, i32 44;
    i32 %248 = zext i1 %247 to i32;
    i1 %249 = scmp neq i32 %248, i32 0;
    cbr i1 %249(prob = 0.5), ^if.then43, ^b46;
^b46:
    ubr ^b45;
^if.then43:
    i32* %250 = getelementptr &([100 * i32]* %s)[i64 0][i64 44];
    store i32* %250 with i32 44;
    i32 %251 = load i32* %i;
    i1 %252 = scmp gt i32 %251, i32 45;
    i32 %253 = zext i1 %252 to i32;
    i1 %254 = scmp neq i32 %253, i32 0;
    cbr i1 %254(prob = 0.5), ^if.then44, ^b47;
^b47:
    ubr ^b46;
^if.then44:
    i32* %255 = getelementptr &([100 * i32]* %s)[i64 0][i64 45];
    store i32* %255 with i32 45;
    i32 %256 = load i32* %i;
    i1 %257 = scmp gt i32 %256, i32 46;
    i32 %258 = zext i1 %257 to i32;
    i1 %259 = scmp neq i32 %258, i32 0;
    cbr i1 %259(prob = 0.5), ^if.then45, ^b48;
^b48:
    ubr ^b47;
^if.then45:
    i32* %260 = getelementptr &([100 * i32]* %s)[i64 0][i64 46];
    store i32* %260 with i32 46;
    i32 %261 = load i32* %i;
    i1 %262 = scmp gt i32 %261, i32 47;
    i32 %263 = zext i1 %262 to i32;
    i1 %264 = scmp neq i32 %263, i32 0;
    cbr i1 %264(prob = 0.5), ^if.then46, ^b49;
^b49:
    ubr ^b48;
^if.then46:
    i32* %265 = getelementptr &([100 * i32]* %s)[i64 0][i64 47];
    store i32* %265 with i32 47;
    i32 %266 = load i32* %i;
    i1 %267 = scmp gt i32 %266, i32 48;
    i32 %268 = zext i1 %267 to i32;
    i1 %269 = scmp neq i32 %268, i32 0;
    cbr i1 %269(prob = 0.5), ^if.then47, ^b50;
^b50:
    ubr ^b49;
^if.then47:
    i32* %270 = getelementptr &([100 * i32]* %s)[i64 0][i64 48];
    store i32* %270 with i32 48;
    i32 %271 = load i32* %i;
    i1 %272 = scmp gt i32 %271, i32 49;
    i32 %273 = zext i1 %272 to i32;
    i1 %274 = scmp neq i32 %273, i32 0;
    cbr i1 %274(prob = 0.5), ^if.then48, ^b51;
^b51:
    ubr ^b50;
^if.then48:
    i32* %275 = getelementptr &([100 * i32]* %s)[i64 0][i64 49];
    store i32* %275 with i32 49;
    i32 %276 = load i32* %i;
    i1 %277 = scmp gt i32 %276, i32 50;
    i32 %278 = zext i1 %277 to i32;
    i1 %279 = scmp neq i32 %278, i32 0;
    cbr i1 %279(prob = 0.5), ^if.then49, ^b52;
^b52:
    ubr ^b51;
^if.then49:
    i32* %280 = getelementptr &([100 * i32]* %s)[i64 0][i64 50];
    store i32* %280 with i32 50;
    i32 %281 = load i32* %i;
    i1 %282 = scmp gt i32 %281, i32 51;
    i32 %283 = zext i1 %282 to i32;
    i1 %284 = scmp neq i32 %283, i32 0;
    cbr i1 %284(prob = 0.5), ^if.then50, ^b53;
^b53:
    ubr ^b52;
^if.then50:
    i32* %285 = getelementptr &([100 * i32]* %s)[i64 0][i64 51];
    store i32* %285 with i32 51;
    i32 %286 = load i32* %i;
    i1 %287 = scmp gt i32 %286, i32 52;
    i32 %288 = zext i1 %287 to i32;
    i1 %289 = scmp neq i32 %288, i32 0;
    cbr i1 %289(prob = 0.5), ^if.then51, ^b54;
^b54:
    ubr ^b53;
^if.then51:
    i32* %290 = getelementptr &([100 * i32]* %s)[i64 0][i64 52];
    store i32* %290 with i32 52;
    i32 %291 = load i32* %i;
    i1 %292 = scmp gt i32 %291, i32 53;
    i32 %293 = zext i1 %292 to i32;
    i1 %294 = scmp neq i32 %293, i32 0;
    cbr i1 %294(prob = 0.5), ^if.then52, ^b55;
^b55:
    ubr ^b54;
^if.then52:
    i32* %295 = getelementptr &([100 * i32]* %s)[i64 0][i64 53];
    store i32* %295 with i32 53;
    i32 %296 = load i32* %i;
    i1 %297 = scmp gt i32 %296, i32 54;
    i32 %298 = zext i1 %297 to i32;
    i1 %299 = scmp neq i32 %298, i32 0;
    cbr i1 %299(prob = 0.5), ^if.then53, ^b56;
^b56:
    ubr ^b55;
^if.then53:
    i32* %300 = getelementptr &([100 * i32]* %s)[i64 0][i64 54];
    store i32* %300 with i32 54;
    i32 %301 = load i32* %i;
    i1 %302 = scmp gt i32 %301, i32 55;
    i32 %303 = zext i1 %302 to i32;
    i1 %304 = scmp neq i32 %303, i32 0;
    cbr i1 %304(prob = 0.5), ^if.then54, ^b57;
^b57:
    ubr ^b56;
^if.then54:
    i32* %305 = getelementptr &([100 * i32]* %s)[i64 0][i64 55];
    store i32* %305 with i32 55;
    i32 %306 = load i32* %i;
    i1 %307 = scmp gt i32 %306, i32 56;
    i32 %308 = zext i1 %307 to i32;
    i1 %309 = scmp neq i32 %308, i32 0;
    cbr i1 %309(prob = 0.5), ^if.then55, ^b58;
^b58:
    ubr ^b57;
^if.then55:
    i32* %310 = getelementptr &([100 * i32]* %s)[i64 0][i64 56];
    store i32* %310 with i32 56;
    i32 %311 = load i32* %i;
    i1 %312 = scmp gt i32 %311, i32 57;
    i32 %313 = zext i1 %312 to i32;
    i1 %314 = scmp neq i32 %313, i32 0;
    cbr i1 %314(prob = 0.5), ^if.then56, ^b59;
^b59:
    ubr ^b58;
^if.then56:
    i32* %315 = getelementptr &([100 * i32]* %s)[i64 0][i64 57];
    store i32* %315 with i32 57;
    i32 %316 = load i32* %i;
    i1 %317 = scmp gt i32 %316, i32 58;
    i32 %318 = zext i1 %317 to i32;
    i1 %319 = scmp neq i32 %318, i32 0;
    cbr i1 %319(prob = 0.5), ^if.then57, ^b60;
^b60:
    ubr ^b59;
^if.then57:
    i32* %320 = getelementptr &([100 * i32]* %s)[i64 0][i64 58];
    store i32* %320 with i32 58;
    i32 %321 = load i32* %i;
    i1 %322 = scmp gt i32 %321, i32 59;
    i32 %323 = zext i1 %322 to i32;
    i1 %324 = scmp neq i32 %323, i32 0;
    cbr i1 %324(prob = 0.5), ^if.then58, ^b61;
^b61:
    ubr ^b60;
^if.then58:
    i32* %325 = getelementptr &([100 * i32]* %s)[i64 0][i64 59];
    store i32* %325 with i32 59;
    i32 %326 = load i32* %i;
    i1 %327 = scmp gt i32 %326, i32 60;
    i32 %328 = zext i1 %327 to i32;
    i1 %329 = scmp neq i32 %328, i32 0;
    cbr i1 %329(prob = 0.5), ^if.then59, ^b62;
^b62:
    ubr ^b61;
^if.then59:
    i32* %330 = getelementptr &([100 * i32]* %s)[i64 0][i64 60];
    store i32* %330 with i32 60;
    i32 %331 = load i32* %i;
    i1 %332 = scmp gt i32 %331, i32 61;
    i32 %333 = zext i1 %332 to i32;
    i1 %334 = scmp neq i32 %333, i32 0;
    cbr i1 %334(prob = 0.5), ^if.then60, ^b63;
^b63:
    ubr ^b62;
^if.then60:
    i32* %335 = getelementptr &([100 * i32]* %s)[i64 0][i64 61];
    store i32* %335 with i32 61;
    i32 %336 = load i32* %i;
    i1 %337 = scmp gt i32 %336, i32 62;
    i32 %338 = zext i1 %337 to i32;
    i1 %339 = scmp neq i32 %338, i32 0;
    cbr i1 %339(prob = 0.5), ^if.then61, ^b64;
^b64:
    ubr ^b63;
^if.then61:
    i32* %340 = getelementptr &([100 * i32]* %s)[i64 0][i64 62];
    store i32* %340 with i32 62;
    i32 %341 = load i32* %i;
    i1 %342 = scmp gt i32 %341, i32 63;
    i32 %343 = zext i1 %342 to i32;
    i1 %344 = scmp neq i32 %343, i32 0;
    cbr i1 %344(prob = 0.5), ^if.then62, ^b65;
^b65:
    ubr ^b64;
^if.then62:
    i32* %345 = getelementptr &([100 * i32]* %s)[i64 0][i64 63];
    store i32* %345 with i32 63;
    i32 %346 = load i32* %i;
    i1 %347 = scmp gt i32 %346, i32 64;
    i32 %348 = zext i1 %347 to i32;
    i1 %349 = scmp neq i32 %348, i32 0;
    cbr i1 %349(prob = 0.5), ^if.then63, ^b66;
^b66:
    ubr ^b65;
^if.then63:
    i32* %350 = getelementptr &([100 * i32]* %s)[i64 0][i64 64];
    store i32* %350 with i32 64;
    i32 %351 = load i32* %i;
    i1 %352 = scmp gt i32 %351, i32 65;
    i32 %353 = zext i1 %352 to i32;
    i1 %354 = scmp neq i32 %353, i32 0;
    cbr i1 %354(prob = 0.5), ^if.then64, ^b67;
^b67:
    ubr ^b66;
^if.then64:
    i32* %355 = getelementptr &([100 * i32]* %s)[i64 0][i64 65];
    store i32* %355 with i32 65;
    i32 %356 = load i32* %i;
    i1 %357 = scmp gt i32 %356, i32 66;
    i32 %358 = zext i1 %357 to i32;
    i1 %359 = scmp neq i32 %358, i32 0;
    cbr i1 %359(prob = 0.5), ^if.then65, ^b68;
^b68:
    ubr ^b67;
^if.then65:
    i32* %360 = getelementptr &([100 * i32]* %s)[i64 0][i64 66];
    store i32* %360 with i32 66;
    i32 %361 = load i32* %i;
    i1 %362 = scmp gt i32 %361, i32 67;
    i32 %363 = zext i1 %362 to i32;
    i1 %364 = scmp neq i32 %363, i32 0;
    cbr i1 %364(prob = 0.5), ^if.then66, ^b69;
^b69:
    ubr ^b68;
^if.then66:
    i32* %365 = getelementptr &([100 * i32]* %s)[i64 0][i64 67];
    store i32* %365 with i32 67;
    i32 %366 = load i32* %i;
    i1 %367 = scmp gt i32 %366, i32 68;
    i32 %368 = zext i1 %367 to i32;
    i1 %369 = scmp neq i32 %368, i32 0;
    cbr i1 %369(prob = 0.5), ^if.then67, ^b70;
^b70:
    ubr ^b69;
^if.then67:
    i32* %370 = getelementptr &([100 * i32]* %s)[i64 0][i64 68];
    store i32* %370 with i32 68;
    i32 %371 = load i32* %i;
    i1 %372 = scmp gt i32 %371, i32 69;
    i32 %373 = zext i1 %372 to i32;
    i1 %374 = scmp neq i32 %373, i32 0;
    cbr i1 %374(prob = 0.5), ^if.then68, ^b71;
^b71:
    ubr ^b70;
^if.then68:
    i32* %375 = getelementptr &([100 * i32]* %s)[i64 0][i64 69];
    store i32* %375 with i32 69;
    i32 %376 = load i32* %i;
    i1 %377 = scmp gt i32 %376, i32 70;
    i32 %378 = zext i1 %377 to i32;
    i1 %379 = scmp neq i32 %378, i32 0;
    cbr i1 %379(prob = 0.5), ^if.then69, ^b72;
^b72:
    ubr ^b71;
^if.then69:
    i32* %380 = getelementptr &([100 * i32]* %s)[i64 0][i64 70];
    store i32* %380 with i32 70;
    i32 %381 = load i32* %i;
    i1 %382 = scmp gt i32 %381, i32 71;
    i32 %383 = zext i1 %382 to i32;
    i1 %384 = scmp neq i32 %383, i32 0;
    cbr i1 %384(prob = 0.5), ^if.then70, ^b73;
^b73:
    ubr ^b72;
^if.then70:
    i32* %385 = getelementptr &([100 * i32]* %s)[i64 0][i64 71];
    store i32* %385 with i32 71;
    i32 %386 = load i32* %i;
    i1 %387 = scmp gt i32 %386, i32 72;
    i32 %388 = zext i1 %387 to i32;
    i1 %389 = scmp neq i32 %388, i32 0;
    cbr i1 %389(prob = 0.5), ^if.then71, ^b74;
^b74:
    ubr ^b73;
^if.then71:
    i32* %390 = getelementptr &([100 * i32]* %s)[i64 0][i64 72];
    store i32* %390 with i32 72;
    i32 %391 = load i32* %i;
    i1 %392 = scmp gt i32 %391, i32 73;
    i32 %393 = zext i1 %392 to i32;
    i1 %394 = scmp neq i32 %393, i32 0;
    cbr i1 %394(prob = 0.5), ^if.then72, ^b75;
^b75:
    ubr ^b74;
^if.then72:
    i32* %395 = getelementptr &([100 * i32]* %s)[i64 0][i64 73];
    store i32* %395 with i32 73;
    i32 %396 = load i32* %i;
    i1 %397 = scmp gt i32 %396, i32 74;
    i32 %398 = zext i1 %397 to i32;
    i1 %399 = scmp neq i32 %398, i32 0;
    cbr i1 %399(prob = 0.5), ^if.then73, ^b76;
^b76:
    ubr ^b75;
^if.then73:
    i32* %400 = getelementptr &([100 * i32]* %s)[i64 0][i64 74];
    store i32* %400 with i32 74;
    i32 %401 = load i32* %i;
    i1 %402 = scmp gt i32 %401, i32 75;
    i32 %403 = zext i1 %402 to i32;
    i1 %404 = scmp neq i32 %403, i32 0;
    cbr i1 %404(prob = 0.5), ^if.then74, ^b77;
^b77:
    ubr ^b76;
^if.then74:
    i32* %405 = getelementptr &([100 * i32]* %s)[i64 0][i64 75];
    store i32* %405 with i32 75;
    i32 %406 = load i32* %i;
    i1 %407 = scmp gt i32 %406, i32 76;
    i32 %408 = zext i1 %407 to i32;
    i1 %409 = scmp neq i32 %408, i32 0;
    cbr i1 %409(prob = 0.5), ^if.then75, ^b78;
^b78:
    ubr ^b77;
^if.then75:
    i32* %410 = getelementptr &([100 * i32]* %s)[i64 0][i64 76];
    store i32* %410 with i32 76;
    i32 %411 = load i32* %i;
    i1 %412 = scmp gt i32 %411, i32 77;
    i32 %413 = zext i1 %412 to i32;
    i1 %414 = scmp neq i32 %413, i32 0;
    cbr i1 %414(prob = 0.5), ^if.then76, ^b79;
^b79:
    ubr ^b78;
^if.then76:
    i32* %415 = getelementptr &([100 * i32]* %s)[i64 0][i64 77];
    store i32* %415 with i32 77;
    i32 %416 = load i32* %i;
    i1 %417 = scmp gt i32 %416, i32 78;
    i32 %418 = zext i1 %417 to i32;
    i1 %419 = scmp neq i32 %418, i32 0;
    cbr i1 %419(prob = 0.5), ^if.then77, ^b80;
^b80:
    ubr ^b79;
^if.then77:
    i32* %420 = getelementptr &([100 * i32]* %s)[i64 0][i64 78];
    store i32* %420 with i32 78;
    i32 %421 = load i32* %i;
    i1 %422 = scmp gt i32 %421, i32 79;
    i32 %423 = zext i1 %422 to i32;
    i1 %424 = scmp neq i32 %423, i32 0;
    cbr i1 %424(prob = 0.5), ^if.then78, ^b81;
^b81:
    ubr ^b80;
^if.then78:
    i32* %425 = getelementptr &([100 * i32]* %s)[i64 0][i64 79];
    store i32* %425 with i32 79;
    i32 %426 = load i32* %i;
    i1 %427 = scmp gt i32 %426, i32 80;
    i32 %428 = zext i1 %427 to i32;
    i1 %429 = scmp neq i32 %428, i32 0;
    cbr i1 %429(prob = 0.5), ^if.then79, ^b82;
^b82:
    ubr ^b81;
^if.then79:
    i32* %430 = getelementptr &([100 * i32]* %s)[i64 0][i64 80];
    store i32* %430 with i32 80;
    i32 %431 = load i32* %i;
    i1 %432 = scmp gt i32 %431, i32 81;
    i32 %433 = zext i1 %432 to i32;
    i1 %434 = scmp neq i32 %433, i32 0;
    cbr i1 %434(prob = 0.5), ^if.then80, ^b83;
^b83:
    ubr ^b82;
^if.then80:
    i32* %435 = getelementptr &([100 * i32]* %s)[i64 0][i64 81];
    store i32* %435 with i32 81;
    i32 %436 = load i32* %i;
    i1 %437 = scmp gt i32 %436, i32 82;
    i32 %438 = zext i1 %437 to i32;
    i1 %439 = scmp neq i32 %438, i32 0;
    cbr i1 %439(prob = 0.5), ^if.then81, ^b84;
^b84:
    ubr ^b83;
^if.then81:
    i32* %440 = getelementptr &([100 * i32]* %s)[i64 0][i64 82];
    store i32* %440 with i32 82;
    i32 %441 = load i32* %i;
    i1 %442 = scmp gt i32 %441, i32 83;
    i32 %443 = zext i1 %442 to i32;
    i1 %444 = scmp neq i32 %443, i32 0;
    cbr i1 %444(prob = 0.5), ^if.then82, ^b85;
^b85:
    ubr ^b84;
^if.then82:
    i32* %445 = getelementptr &([100 * i32]* %s)[i64 0][i64 83];
    store i32* %445 with i32 83;
    i32 %446 = load i32* %i;
    i1 %447 = scmp gt i32 %446, i32 84;
    i32 %448 = zext i1 %447 to i32;
    i1 %449 = scmp neq i32 %448, i32 0;
    cbr i1 %449(prob = 0.5), ^if.then83, ^b86;
^b86:
    ubr ^b85;
^if.then83:
    i32* %450 = getelementptr &([100 * i32]* %s)[i64 0][i64 84];
    store i32* %450 with i32 84;
    i32 %451 = load i32* %i;
    i1 %452 = scmp gt i32 %451, i32 85;
    i32 %453 = zext i1 %452 to i32;
    i1 %454 = scmp neq i32 %453, i32 0;
    cbr i1 %454(prob = 0.5), ^if.then84, ^b87;
^b87:
    ubr ^b86;
^if.then84:
    i32* %455 = getelementptr &([100 * i32]* %s)[i64 0][i64 85];
    store i32* %455 with i32 85;
    i32 %456 = load i32* %i;
    i1 %457 = scmp gt i32 %456, i32 86;
    i32 %458 = zext i1 %457 to i32;
    i1 %459 = scmp neq i32 %458, i32 0;
    cbr i1 %459(prob = 0.5), ^if.then85, ^b88;
^b88:
    ubr ^b87;
^if.then85:
    i32* %460 = getelementptr &([100 * i32]* %s)[i64 0][i64 86];
    store i32* %460 with i32 86;
    i32 %461 = load i32* %i;
    i1 %462 = scmp gt i32 %461, i32 87;
    i32 %463 = zext i1 %462 to i32;
    i1 %464 = scmp neq i32 %463, i32 0;
    cbr i1 %464(prob = 0.5), ^if.then86, ^b89;
^b89:
    ubr ^b88;
^if.then86:
    i32* %465 = getelementptr &([100 * i32]* %s)[i64 0][i64 87];
    store i32* %465 with i32 87;
    i32 %466 = load i32* %i;
    i1 %467 = scmp gt i32 %466, i32 88;
    i32 %468 = zext i1 %467 to i32;
    i1 %469 = scmp neq i32 %468, i32 0;
    cbr i1 %469(prob = 0.5), ^if.then87, ^b90;
^b90:
    ubr ^b89;
^if.then87:
    i32* %470 = getelementptr &([100 * i32]* %s)[i64 0][i64 88];
    store i32* %470 with i32 88;
    i32 %471 = load i32* %i;
    i1 %472 = scmp gt i32 %471, i32 89;
    i32 %473 = zext i1 %472 to i32;
    i1 %474 = scmp neq i32 %473, i32 0;
    cbr i1 %474(prob = 0.5), ^if.then88, ^b91;
^b91:
    ubr ^b90;
^if.then88:
    i32* %475 = getelementptr &([100 * i32]* %s)[i64 0][i64 89];
    store i32* %475 with i32 89;
    i32 %476 = load i32* %i;
    i1 %477 = scmp gt i32 %476, i32 90;
    i32 %478 = zext i1 %477 to i32;
    i1 %479 = scmp neq i32 %478, i32 0;
    cbr i1 %479(prob = 0.5), ^if.then89, ^b92;
^b92:
    ubr ^b91;
^if.then89:
    i32* %480 = getelementptr &([100 * i32]* %s)[i64 0][i64 90];
    store i32* %480 with i32 90;
    i32 %481 = load i32* %i;
    i1 %482 = scmp gt i32 %481, i32 91;
    i32 %483 = zext i1 %482 to i32;
    i1 %484 = scmp neq i32 %483, i32 0;
    cbr i1 %484(prob = 0.5), ^if.then90, ^b93;
^b93:
    ubr ^b92;
^if.then90:
    i32* %485 = getelementptr &([100 * i32]* %s)[i64 0][i64 91];
    store i32* %485 with i32 91;
    i32 %486 = load i32* %i;
    i1 %487 = scmp gt i32 %486, i32 92;
    i32 %488 = zext i1 %487 to i32;
    i1 %489 = scmp neq i32 %488, i32 0;
    cbr i1 %489(prob = 0.5), ^if.then91, ^b94;
^b94:
    ubr ^b93;
^if.then91:
    i32* %490 = getelementptr &([100 * i32]* %s)[i64 0][i64 92];
    store i32* %490 with i32 92;
    i32 %491 = load i32* %i;
    i1 %492 = scmp gt i32 %491, i32 93;
    i32 %493 = zext i1 %492 to i32;
    i1 %494 = scmp neq i32 %493, i32 0;
    cbr i1 %494(prob = 0.5), ^if.then92, ^b95;
^b95:
    ubr ^b94;
^if.then92:
    i32* %495 = getelementptr &([100 * i32]* %s)[i64 0][i64 93];
    store i32* %495 with i32 93;
    i32 %496 = load i32* %i;
    i1 %497 = scmp gt i32 %496, i32 94;
    i32 %498 = zext i1 %497 to i32;
    i1 %499 = scmp neq i32 %498, i32 0;
    cbr i1 %499(prob = 0.5), ^if.then93, ^b96;
^b96:
    ubr ^b95;
^if.then93:
    i32* %500 = getelementptr &([100 * i32]* %s)[i64 0][i64 94];
    store i32* %500 with i32 94;
    i32 %501 = load i32* %i;
    i1 %502 = scmp gt i32 %501, i32 95;
    i32 %503 = zext i1 %502 to i32;
    i1 %504 = scmp neq i32 %503, i32 0;
    cbr i1 %504(prob = 0.5), ^if.then94, ^b97;
^b97:
    ubr ^b96;
^if.then94:
    i32* %505 = getelementptr &([100 * i32]* %s)[i64 0][i64 95];
    store i32* %505 with i32 95;
    i32 %506 = load i32* %i;
    i1 %507 = scmp gt i32 %506, i32 96;
    i32 %508 = zext i1 %507 to i32;
    i1 %509 = scmp neq i32 %508, i32 0;
    cbr i1 %509(prob = 0.5), ^if.then95, ^b98;
^b98:
    ubr ^b97;
^if.then95:
    i32* %510 = getelementptr &([100 * i32]* %s)[i64 0][i64 96];
    store i32* %510 with i32 96;
    i32 %511 = load i32* %i;
    i1 %512 = scmp gt i32 %511, i32 97;
    i32 %513 = zext i1 %512 to i32;
    i1 %514 = scmp neq i32 %513, i32 0;
    cbr i1 %514(prob = 0.5), ^if.then96, ^b99;
^b99:
    ubr ^b98;
^if.then96:
    i32* %515 = getelementptr &([100 * i32]* %s)[i64 0][i64 97];
    store i32* %515 with i32 97;
    i32 %516 = load i32* %i;
    i1 %517 = scmp gt i32 %516, i32 98;
    i32 %518 = zext i1 %517 to i32;
    i1 %519 = scmp neq i32 %518, i32 0;
    cbr i1 %519(prob = 0.5), ^if.then97, ^b100;
^b100:
    ubr ^b99;
^if.then97:
    i32* %520 = getelementptr &([100 * i32]* %s)[i64 0][i64 98];
    store i32* %520 with i32 98;
    i32 %521 = load i32* %i;
    i1 %522 = scmp gt i32 %521, i32 99;
    i32 %523 = zext i1 %522 to i32;
    i1 %524 = scmp neq i32 %523, i32 0;
    cbr i1 %524(prob = 0.5), ^if.then98, ^b101;
^if.then98:
    i32* %525 = getelementptr &([100 * i32]* %s)[i64 0][i64 99];
    store i32* %525 with i32 99;
    ubr ^b101;
^b101:
    ubr ^b100;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %loopcoun = alloc i32;
    call (i32) -> void @starttime(i32 324);
    i32 %0 = call () -> i32 @getint();
    store i32* %loopcoun with i32 %0;
    i32 %1 = load i32* %loopcoun;
    i32 %2 = call (i32) -> i32 @func(i32 %1);
    call (i32) -> void @putint(i32 %2);
    call (i32) -> void @putch(i32 10);
    call (i32) -> void @stoptime(i32 328);
    ret i32 0;
}
