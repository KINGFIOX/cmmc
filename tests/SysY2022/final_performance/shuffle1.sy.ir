internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [10000000 * i32]* @head;
internal [10000000 * i32]* @next;
internal [10000000 * i32]* @nextvalue;
internal [10000000 * i32]* @key;
internal [10000000 * i32]* @value;
internal [10000000 * i32]* @keys;
internal [10000000 * i32]* @values;
internal [10000000 * i32]* @requests;
internal [10000000 * i32]* @ans;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %cnt = alloc i32;
    i32* %hashmod = alloc i32;
    i32* %ks = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %hashmod with i32 %0;
    i32* %1 = getelementptr &([10000000 * i32]* @keys)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    store i32* %ks with i32 %2;
    i32* %3 = getelementptr &([10000000 * i32]* @values)[i64 0][i64 0];
    i32 %4 = call (i32*) -> i32 @getarray(i32* %3);
    i32* %5 = getelementptr &([10000000 * i32]* @requests)[i64 0][i64 0];
    i32 %6 = call (i32*) -> i32 @getarray(i32* %5);
    i32 %7 = load i32* %ks;
    i32 %8 = load i32* %hashmod;
    i32 %9 = load i32* %cnt;
    call (i32) -> void @starttime(i32 78);
    ubr ^while.header;
^while.header:
    i32 %10 = phi [^while.body2, i32 %53] [^entry, i32 %7];
    i32 %11 = phi [^while.body2, i32 %54] [^entry, i32 %6];
    i32 %12 = phi [^while.body2, i32 %58] [^entry, i32 0];
    i32 %13 = phi [^while.body2, i32 %56] [^entry, i32 %8];
    i32 %14 = phi [^while.body2, i32 %57] [^entry, i32 %9];
    i32 %15 = phi [^while.body2, i32 %58] [^entry, i32 0];
    i1 %16 = scmp lt i32 %15, i32 %10;
    cbr i1 %16(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i32* %17 = getelementptr &([10000000 * i32]* @keys)[i64 0][i32 %12];
    i32 %18 = load i32* %17;
    i32* %19 = getelementptr &([10000000 * i32]* @values)[i64 0][i32 %12];
    i32 %20 = load i32* %19;
    i32 %21 = srem i32 %18, i32 %13;
    i32* %22 = getelementptr &([10000000 * i32]* @head)[i64 0][i32 %21];
    i32 %23 = load i32* %22;
    i1 %24 = scmp eq i32 %23, i32 0;
    cbr i1 %24(prob = 0.5), ^if.then, ^while.header2;
^while.header1:
    i32 %25 = phi [^while.header, i32 %11] [^while.body4, i32 %82];
    i32 %26 = phi [^while.header, i32 0] [^while.body4, i32 %85];
    i32 %27 = phi [^while.header, i32 %13] [^while.body4, i32 %83];
    i32 %28 = phi [^while.header, i32 0] [^while.body4, i32 %85];
    i1 %29 = scmp lt i32 %28, i32 %25;
    cbr i1 %29(prob = 0.97), ^while.body1, ^b;
^if.then:
    i32 %30 = add i32 %14, i32 1;
    store i32* %cnt with i32 %30;
    store i32* %22 with i32 %30;
    i32* %31 = getelementptr &([10000000 * i32]* @key)[i64 0][i32 %30];
    store i32* %31 with i32 %18;
    i32* %32 = getelementptr &([10000000 * i32]* @value)[i64 0][i32 %30];
    store i32* %32 with i32 %20;
    i32* %33 = getelementptr &([10000000 * i32]* @next)[i64 0][i32 %30];
    store i32* %33 with i32 0;
    i32* %34 = getelementptr &([10000000 * i32]* @nextvalue)[i64 0][i32 %30];
    store i32* %34 with i32 0;
    ubr ^while.body2;
^while.body1:
    i32* %35 = getelementptr &([10000000 * i32]* @ans)[i64 0][i32 %26];
    i32* %36 = getelementptr &([10000000 * i32]* @requests)[i64 0][i32 %26];
    i32 %37 = load i32* %36;
    i32 %38 = srem i32 %37, i32 %27;
    i32* %39 = getelementptr &([10000000 * i32]* @head)[i64 0][i32 %38];
    i32 %40 = load i32* %39;
    ubr ^while.header3;
^while.header2:
    i32 %41 = phi [^b2, i32 %41] [^while.body, i32 %10];
    i32 %42 = phi [^b2, i32 %42] [^while.body, i32 %11];
    i32 %43 = phi [^b2, i32 %43] [^while.body, i32 %12];
    i32 %44 = phi [^b2, i32 %44] [^while.body, i32 %13];
    i32 %45 = phi [^b2, i32 %45] [^while.body, i32 %14];
    i32 %46 = phi [^b2, i32 %81] [^while.body, i32 %23];
    i32 %47 = phi [^b2, i32 %47] [^while.body, i32 %21];
    i32 %48 = phi [^b2, i32 %48] [^while.body, i32 %20];
    i32 %49 = phi [^b2, i32 %49] [^while.body, i32 %18];
    i32 %50 = phi [^b2, i32 %81] [^while.body, i32 %23];
    i1 %51 = scmp neq i32 %50, i32 0;
    cbr i1 %51(prob = 0.97), ^while.body3, ^b1;
^b:
    call (i32) -> void @stoptime(i32 90);
    i32* %52 = getelementptr &([10000000 * i32]* @ans)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %25, i32* %52);
    ret i32 0;
^while.body2:
    i32 %53 = phi [^b1, i32 %41] [^if.then1, i32 %41] [^if.then, i32 %10];
    i32 %54 = phi [^b1, i32 %42] [^if.then1, i32 %42] [^if.then, i32 %11];
    i32 %55 = phi [^b1, i32 %43] [^if.then1, i32 %43] [^if.then, i32 %12];
    i32 %56 = phi [^b1, i32 %44] [^if.then1, i32 %44] [^if.then, i32 %13];
    i32 %57 = phi [^b1, i32 %59] [^if.then1, i32 %75] [^if.then, i32 %30];
    i32 %58 = add i32 %55, i32 1;
    ubr ^while.header;
^b1:
    i32 %59 = add i32 %45, i32 1;
    store i32* %cnt with i32 %59;
    i32* %60 = getelementptr &([10000000 * i32]* @next)[i64 0][i32 %59];
    i32* %61 = getelementptr &([10000000 * i32]* @head)[i64 0][i32 %47];
    i32 %62 = load i32* %61;
    store i32* %60 with i32 %62;
    store i32* %61 with i32 %59;
    i32* %63 = getelementptr &([10000000 * i32]* @key)[i64 0][i32 %59];
    store i32* %63 with i32 %49;
    i32* %64 = getelementptr &([10000000 * i32]* @value)[i64 0][i32 %59];
    store i32* %64 with i32 %48;
    i32* %65 = getelementptr &([10000000 * i32]* @nextvalue)[i64 0][i32 %59];
    store i32* %65 with i32 0;
    ubr ^while.body2;
^while.body3:
    i32* %66 = getelementptr &([10000000 * i32]* @key)[i64 0][i32 %46];
    i32 %67 = load i32* %66;
    i1 %68 = scmp eq i32 %67, i32 %49;
    cbr i1 %68(prob = 0.5), ^if.then1, ^b2;
^while.header3:
    i32 %69 = phi [^b3, i32 %69] [^while.body1, i32 %25];
    i32 %70 = phi [^b3, i32 %70] [^while.body1, i32 %27];
    i32 %71 = phi [^b3, i32 %90] [^while.body1, i32 %40];
    i32 %72 = phi [^b3, i32 %72] [^while.body1, i32 %37];
    i32 %73 = phi [^while.body1, i32 %40] [^b3, i32 %90];
    i1 %74 = scmp neq i32 %73, i32 0;
    cbr i1 %74(prob = 0.97), ^while.body5, ^while.body4;
^if.then1:
    i32 %75 = add i32 %45, i32 1;
    store i32* %cnt with i32 %75;
    i32* %76 = getelementptr &([10000000 * i32]* @nextvalue)[i64 0][i32 %75];
    i32* %77 = getelementptr &([10000000 * i32]* @nextvalue)[i64 0][i32 %46];
    i32 %78 = load i32* %77;
    store i32* %76 with i32 %78;
    store i32* %77 with i32 %75;
    i32* %79 = getelementptr &([10000000 * i32]* @value)[i64 0][i32 %75];
    store i32* %79 with i32 %48;
    ubr ^while.body2;
^b2:
    i32* %80 = getelementptr &([10000000 * i32]* @next)[i64 0][i32 %46];
    i32 %81 = load i32* %80;
    ubr ^while.header2;
^while.body4:
    i32 %82 = phi [^while.header4, i32 %91] [^while.header3, i32 %69];
    i32 %83 = phi [^while.header4, i32 %92] [^while.header3, i32 %70];
    i32 %84 = phi [^while.header4, i32 %94] [^while.header3, i32 0];
    store i32* %35 with i32 %84;
    i32 %85 = add i32 %26, i32 1;
    ubr ^while.header1;
^while.body5:
    i32* %86 = getelementptr &([10000000 * i32]* @key)[i64 0][i32 %71];
    i32 %87 = load i32* %86;
    i1 %88 = scmp eq i32 %87, i32 %72;
    cbr i1 %88(prob = 0.5), ^while.header4, ^b3;
^b3:
    i32* %89 = getelementptr &([10000000 * i32]* @next)[i64 0][i32 %71];
    i32 %90 = load i32* %89;
    ubr ^while.header3;
^while.header4:
    i32 %91 = phi [^while.body5, i32 %69] [^while.body6, i32 %91];
    i32 %92 = phi [^while.body5, i32 %70] [^while.body6, i32 %92];
    i32 %93 = phi [^while.body5, i32 %71] [^while.body6, i32 %101];
    i32 %94 = phi [^while.body5, i32 0] [^while.body6, i32 %99];
    i32 %95 = phi [^while.body5, i32 %71] [^while.body6, i32 %101];
    i1 %96 = scmp neq i32 %95, i32 0;
    cbr i1 %96(prob = 0.97), ^while.body6, ^while.body4;
^while.body6:
    i32* %97 = getelementptr &([10000000 * i32]* @value)[i64 0][i32 %93];
    i32 %98 = load i32* %97;
    i32 %99 = add i32 %98, i32 %94;
    i32* %100 = getelementptr &([10000000 * i32]* @nextvalue)[i64 0][i32 %93];
    i32 %101 = load i32* %100;
    ubr ^while.header4;
}
