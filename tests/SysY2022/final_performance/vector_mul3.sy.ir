internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @func(i32 %i, i32 %j) -> i32 {
^entry:
    i32* %j1 = alloc i32;
    i32* %i1 = alloc i32;
    store i32* %i1 with i32 %i;
    store i32* %j1 with i32 %j;
    i32 %0 = load i32* %i1;
    i32 %1 = load i32* %j1;
    i32 %2 = add i32 %0, i32 %1;
    i32 %3 = load i32* %i1;
    i32 %4 = load i32* %j1;
    i32 %5 = add i32 %3, i32 %4;
    i32 %6 = add i32 %5, i32 1;
    i32 %7 = mul i32 %2, i32 %6;
    i32 %8 = sdiv i32 %7, i32 2;
    i32 %9 = load i32* %i1;
    i32 %10 = add i32 %8, i32 %9;
    i32 %11 = add i32 %10, i32 1;
    ret i32 %11;
}
internal func @Vectordot(f32* %v, f32* %u, i32 %n) -> f32 {
^entry:
    f32* %sum = alloc f32;
    i32* %i = alloc i32;
    i32* %n1 = alloc i32;
    f32** %u1 = alloc f32*;
    f32** %v1 = alloc f32*;
    store f32** %v1 with f32* %v;
    store f32** %u1 with f32* %u;
    store i32* %n1 with i32 %n;
    store i32* %i with i32 0;
    store f32* %sum with f32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i32 %1 = load i32* %n1;
    i1 %2 = scmp lt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    f32 %5 = load f32* %sum;
    i32 %6 = load i32* %i;
    i64 %7 = sext i32 %6 to i64;
    f32* %8 = load f32** %v1;
    f32* %9 = getelementptr &(f32* %8)[i64 %7];
    f32 %10 = load f32* %9;
    i32 %11 = load i32* %i;
    i64 %12 = sext i32 %11 to i64;
    f32* %13 = load f32** %u1;
    f32* %14 = getelementptr &(f32* %13)[i64 %12];
    f32 %15 = load f32* %14;
    f32 %16 = fmul f32 %10, f32 %15;
    f32 %17 = fadd f32 %5, f32 %16;
    store f32* %sum with f32 %17;
    i32 %18 = load i32* %i;
    i32 %19 = add i32 %18, i32 1;
    store i32* %i with i32 %19;
    ubr ^while.header;
^b:
    f32 %20 = load f32* %sum;
    ret f32 %20;
}
internal func @mult1(f32* %v, f32* %out, i32 %n) -> void {
^entry:
    f32* %sum = alloc f32;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    i32* %n1 = alloc i32;
    f32** %out1 = alloc f32*;
    f32** %v1 = alloc f32*;
    store f32** %v1 with f32* %v;
    store f32** %out1 with f32* %out;
    store i32* %n1 with i32 %n;
    store i32* %i with i32 0;
    store i32* %j with i32 0;
    store f32* %sum with f32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i32 %1 = load i32* %n1;
    i1 %2 = scmp lt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    ubr ^while.header1;
^b:
    ret;
^while.header1:
    i32 %5 = load i32* %j;
    i32 %6 = load i32* %n1;
    i1 %7 = scmp lt i32 %5, i32 %6;
    i32 %8 = zext i1 %7 to i32;
    i1 %9 = scmp neq i32 %8, i32 0;
    cbr i1 %9(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    f32 %10 = load f32* %sum;
    i32 %11 = load i32* %j;
    i64 %12 = sext i32 %11 to i64;
    f32* %13 = load f32** %v1;
    f32* %14 = getelementptr &(f32* %13)[i64 %12];
    f32 %15 = load f32* %14;
    i32 %16 = load i32* %i;
    i32 %17 = load i32* %j;
    i32 %18 = call (i32, i32) -> i32 @func(i32 %16, i32 %17);
    f32 %19 = s2f i32 %18 to f32;
    f32 %20 = fdiv f32 %15, f32 %19;
    f32 %21 = fadd f32 %10, f32 %20;
    store f32* %sum with f32 %21;
    i32 %22 = load i32* %j;
    i32 %23 = add i32 %22, i32 1;
    store i32* %j with i32 %23;
    ubr ^while.header1;
^b1:
    i32 %24 = load i32* %i;
    i64 %25 = sext i32 %24 to i64;
    f32* %26 = load f32** %out1;
    f32* %27 = getelementptr &(f32* %26)[i64 %25];
    f32 %28 = load f32* %sum;
    store f32* %27 with f32 %28;
    i32 %29 = load i32* %i;
    i32 %30 = add i32 %29, i32 1;
    store i32* %i with i32 %30;
    ubr ^while.header;
}
internal func @mult2(f32* %v, f32* %out, i32 %n) -> void {
^entry:
    f32* %sum = alloc f32;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    i32* %n1 = alloc i32;
    f32** %out1 = alloc f32*;
    f32** %v1 = alloc f32*;
    store f32** %v1 with f32* %v;
    store f32** %out1 with f32* %out;
    store i32* %n1 with i32 %n;
    store i32* %i with i32 0;
    store i32* %j with i32 0;
    store f32* %sum with f32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i32 %1 = load i32* %n1;
    i1 %2 = scmp lt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    ubr ^while.header1;
^b:
    ret;
^while.header1:
    i32 %5 = load i32* %j;
    i32 %6 = load i32* %n1;
    i1 %7 = scmp lt i32 %5, i32 %6;
    i32 %8 = zext i1 %7 to i32;
    i1 %9 = scmp neq i32 %8, i32 0;
    cbr i1 %9(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    f32 %10 = load f32* %sum;
    i32 %11 = load i32* %j;
    i64 %12 = sext i32 %11 to i64;
    f32* %13 = load f32** %v1;
    f32* %14 = getelementptr &(f32* %13)[i64 %12];
    f32 %15 = load f32* %14;
    i32 %16 = load i32* %j;
    i32 %17 = load i32* %i;
    i32 %18 = call (i32, i32) -> i32 @func(i32 %16, i32 %17);
    f32 %19 = s2f i32 %18 to f32;
    f32 %20 = fdiv f32 %15, f32 %19;
    f32 %21 = fadd f32 %10, f32 %20;
    store f32* %sum with f32 %21;
    i32 %22 = load i32* %j;
    i32 %23 = add i32 %22, i32 1;
    store i32* %j with i32 %23;
    ubr ^while.header1;
^b1:
    i32 %24 = load i32* %i;
    i64 %25 = sext i32 %24 to i64;
    f32* %26 = load f32** %out1;
    f32* %27 = getelementptr &(f32* %26)[i64 %25];
    f32 %28 = load f32* %sum;
    store f32* %27 with f32 %28;
    i32 %29 = load i32* %i;
    i32 %30 = add i32 %29, i32 1;
    store i32* %i with i32 %30;
    ubr ^while.header;
}
internal func @mult_combin(f32* %v, f32* %out, i32 %n, f32* %tmp) -> void {
^entry:
    f32** %tmp1 = alloc f32*;
    i32* %n1 = alloc i32;
    f32** %out1 = alloc f32*;
    f32** %v1 = alloc f32*;
    store f32** %v1 with f32* %v;
    store f32** %out1 with f32* %out;
    store i32* %n1 with i32 %n;
    store f32** %tmp1 with f32* %tmp;
    f32* %0 = load f32** %v1;
    f32* %1 = load f32** %tmp1;
    i32 %2 = load i32* %n1;
    call (f32*, f32*, i32) -> void @mult1(f32* %0, f32* %1, i32 %2);
    f32* %3 = load f32** %tmp1;
    f32* %4 = load f32** %out1;
    i32 %5 = load i32* %n1;
    call (f32*, f32*, i32) -> void @mult2(f32* %3, f32* %4, i32 %5);
    ret;
}
internal f32* @temp = 1;
internal func @my_sqrt(f32 %input) -> f32 {
^entry:
    f32* %input1 = alloc f32;
    store f32* %input1 with f32 %input;
    ubr ^while.header;
^while.header:
    f32 %0 = load f32* @temp;
    f32 %1 = load f32* %input1;
    f32 %2 = load f32* @temp;
    f32 %3 = fdiv f32 %1, f32 %2;
    f32 %4 = fsub f32 %0, f32 %3;
    i1 %5 = fcmp gt f32 %4, f32 1e-06;
    i32 %6 = zext i1 %5 to i32;
    i1 %7 = scmp neq i32 %6, i32 0;
    cbr i1 %7(prob = 0.5), ^b1, ^b;
^b:
    f32 %8 = load f32* @temp;
    f32 %9 = load f32* %input1;
    f32 %10 = load f32* @temp;
    f32 %11 = fdiv f32 %9, f32 %10;
    f32 %12 = fsub f32 %8, f32 %11;
    i1 %13 = fcmp lt f32 %12, f32 -1e-06;
    i32 %14 = zext i1 %13 to i32;
    i1 %15 = scmp neq i32 %14, i32 0;
    ubr ^b1;
^b1:
    i1 %16 = phi [^b, i1 %15] [^while.header, i1 true];
    i32 %17 = zext i1 %16 to i32;
    i1 %18 = scmp neq i32 %17, i32 0;
    cbr i1 %18(prob = 0.97), ^while.body, ^b2;
^while.body:
    f32 %19 = load f32* @temp;
    f32 %20 = load f32* %input1;
    f32 %21 = load f32* @temp;
    f32 %22 = fdiv f32 %20, f32 %21;
    f32 %23 = fadd f32 %19, f32 %22;
    f32 %24 = fdiv f32 %23, f32 2;
    store f32* @temp with f32 %24;
    ubr ^while.header;
^b2:
    f32 %25 = load f32* @temp;
    ret f32 %25;
}
func @main() -> i32 { Entry } {
^entry:
    f32* %result = alloc f32;
    i32* %i = alloc i32;
    [100000 * f32]* %Vectortm = alloc [100000 * f32];
    [100000 * f32]* %vectorB = alloc [100000 * f32];
    [100000 * f32]* %vectorA = alloc [100000 * f32];
    i32* %n = alloc i32;
    store i32* %n with i32 100000;
    i32 %0 = load i32* %n;
    i1 %1 = scmp le i32 %0, i32 0;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^b;
^if.then:
    store i32* %n with i32 2000;
    ubr ^b;
^b:
    call (i32) -> void @starttime(i32 62);
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %4 = load i32* %i;
    i32 %5 = load i32* %n;
    i1 %6 = scmp lt i32 %4, i32 %5;
    i32 %7 = zext i1 %6 to i32;
    i1 %8 = scmp neq i32 %7, i32 0;
    cbr i1 %8(prob = 0.97), ^while.body, ^b1;
^while.body:
    i32 %9 = load i32* %i;
    i64 %10 = sext i32 %9 to i64;
    f32* %11 = getelementptr &([100000 * f32]* %vectorA)[i64 0][i64 %10];
    store f32* %11 with f32 1;
    i32 %12 = load i32* %i;
    i32 %13 = add i32 %12, i32 1;
    store i32* %i with i32 %13;
    ubr ^while.header;
^b1:
    store i32* %i with i32 0;
    ubr ^while.header1;
^while.header1:
    i32 %14 = load i32* %i;
    i1 %15 = scmp lt i32 %14, i32 1000;
    i32 %16 = zext i1 %15 to i32;
    i1 %17 = scmp neq i32 %16, i32 0;
    cbr i1 %17(prob = 0.97), ^while.body1, ^b2;
^while.body1:
    f32* %18 = getelementptr &([100000 * f32]* %vectorA)[i64 0][i64 0];
    f32* %19 = getelementptr &([100000 * f32]* %vectorB)[i64 0][i64 0];
    i32 %20 = load i32* %n;
    f32* %21 = getelementptr &([100000 * f32]* %Vectortm)[i64 0][i64 0];
    call (f32*, f32*, i32, f32*) -> void @mult_combin(f32* %18, f32* %19, i32 %20, f32* %21);
    f32* %22 = getelementptr &([100000 * f32]* %vectorB)[i64 0][i64 0];
    f32* %23 = getelementptr &([100000 * f32]* %vectorA)[i64 0][i64 0];
    i32 %24 = load i32* %n;
    f32* %25 = getelementptr &([100000 * f32]* %Vectortm)[i64 0][i64 0];
    call (f32*, f32*, i32, f32*) -> void @mult_combin(f32* %22, f32* %23, i32 %24, f32* %25);
    i32 %26 = load i32* %i;
    i32 %27 = add i32 %26, i32 1;
    store i32* %i with i32 %27;
    ubr ^while.header1;
^b2:
    call (i32) -> void @stoptime(i32 76);
    f32* %28 = getelementptr &([100000 * f32]* %vectorA)[i64 0][i64 0];
    f32* %29 = getelementptr &([100000 * f32]* %vectorB)[i64 0][i64 0];
    i32 %30 = load i32* %n;
    f32 %31 = call (f32*, f32*, i32) -> f32 @Vectordot(f32* %28, f32* %29, i32 %30);
    f32* %32 = getelementptr &([100000 * f32]* %vectorB)[i64 0][i64 0];
    f32* %33 = getelementptr &([100000 * f32]* %vectorB)[i64 0][i64 0];
    i32 %34 = load i32* %n;
    f32 %35 = call (f32*, f32*, i32) -> f32 @Vectordot(f32* %32, f32* %33, i32 %34);
    f32 %36 = fdiv f32 %31, f32 %35;
    f32 %37 = call (f32) -> f32 @my_sqrt(f32 %36);
    store f32* %result with f32 %37;
    f32 %38 = load f32* %result;
    f32 %39 = fsub f32 %38, f32 1;
    i1 %40 = fcmp le f32 %39, f32 1e-06;
    i32 %41 = zext i1 %40 to i32;
    i1 %42 = scmp neq i32 %41, i32 0;
    cbr i1 %42(prob = 0.5), ^b3, ^b4;
^b3:
    f32 %43 = load f32* %result;
    f32 %44 = fsub f32 %43, f32 1;
    i1 %45 = fcmp ge f32 %44, f32 -1e-06;
    i32 %46 = zext i1 %45 to i32;
    i1 %47 = scmp neq i32 %46, i32 0;
    ubr ^b4;
^b4:
    i1 %48 = phi [^b3, i1 %47] [^b2, i1 false];
    i32 %49 = zext i1 %48 to i32;
    i1 %50 = scmp neq i32 %49, i32 0;
    cbr i1 %50(prob = 0.5), ^if.then1, ^if.else;
^if.then1:
    call (i32) -> void @putint(i32 1);
    ubr ^b5;
^if.else:
    call (i32) -> void @putint(i32 0);
    ubr ^b5;
^b5:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
