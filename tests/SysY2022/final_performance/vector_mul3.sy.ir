internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoRecurse Entry } {
^entry:
    f32* %sum = alloc f32;
    f32* %sum1 = alloc f32;
    f32* %sum2 = alloc f32;
    f32* %sum3 = alloc f32;
    f32* %temp = alloc f32;
    [100000 * f32]* %Vectortm = alloc [100000 * f32];
    [100000 * f32]* %vectorB = alloc [100000 * f32];
    [100000 * f32]* %vectorA = alloc [100000 * f32];
    store f32* %temp with f32 1;
    call (i32) -> void @starttime(i32 62);
    ubr ^while.header;
^while.header:
    i32 %0 = phi [^while.body, i32 %0] [^entry, i32 100000];
    i32 %1 = phi [^while.body, i32 %7] [^entry, i32 0];
    f32 %2 = phi [^while.body, f32 %2] [^entry, f32 1];
    i32 %3 = phi [^while.body, i32 %0] [^entry, i32 100000];
    i32 %4 = phi [^while.body, i32 %7] [^entry, i32 0];
    i1 %5 = scmp lt i32 %4, i32 %3;
    cbr i1 %5(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    f32* %6 = getelementptr &([100000 * f32]* %vectorA)[i64 0][i32 %1];
    store f32* %6 with f32 1;
    i32 %7 = add i32 %1, i32 1;
    ubr ^while.header;
^while.header1:
    i32 %8 = phi [^while.header, i32 %0] [^entry4, i32 %194];
    i32 %9 = phi [^while.header, i32 0] [^entry4, i32 %207];
    f32 %10 = phi [^while.header, f32 %2] [^entry4, f32 %196];
    i32 %11 = phi [^while.header, i32 0] [^entry4, i32 %207];
    i1 %12 = scmp lt i32 %11, i32 1000;
    cbr i1 %12(prob = 0.97), ^while.body1, ^b;
^while.body1:
    f32* %13 = getelementptr &([100000 * f32]* %vectorA)[i64 0][i64 0];
    f32* %14 = getelementptr &([100000 * f32]* %vectorB)[i64 0][i64 0];
    f32* %15 = getelementptr &([100000 * f32]* %Vectortm)[i64 0][i64 0];
    store f32* %sum2 with f32 0;
    ubr ^while.header2;
^b:
    call (i32) -> void @stoptime(i32 76);
    f32* %16 = getelementptr &([100000 * f32]* %vectorA)[i64 0][i64 0];
    f32* %17 = getelementptr &([100000 * f32]* %vectorB)[i64 0][i64 0];
    ubr ^while.header3;
^while.header2:
    i32 %18 = phi [^b1, i32 %49] [^while.body1, i32 %8];
    i32 %19 = phi [^b1, i32 %50] [^while.body1, i32 %9];
    f32 %20 = phi [^b1, f32 %84] [^while.body1, f32 %10];
    f32* %21 = phi [^b1, f32* %51] [^while.body1, f32* %13];
    f32* %22 = phi [^b1, f32* %52] [^while.body1, f32* %15];
    i32 %23 = phi [^b1, i32 %53] [^while.body1, i32 %8];
    i32 %24 = phi [^b1, i32 %86] [^while.body1, i32 0];
    i32 %25 = phi [^b1, i32 %55] [^while.body1, i32 0];
    f32 %26 = phi [^b1, f32 %85] [^while.body1, f32 0];
    f32* %27 = phi [^b1, f32* %57] [^while.body1, f32* %15];
    i32 %28 = phi [^b1, i32 %58] [^while.body1, i32 %8];
    f32* %29 = phi [^b1, f32* %59] [^while.body1, f32* %14];
    i32 %30 = phi [^while.body1, i32 %8] [^b1, i32 %53];
    i32 %31 = phi [^while.body1, i32 0] [^b1, i32 %86];
    i1 %32 = scmp lt i32 %31, i32 %30;
    cbr i1 %32(prob = 0.97), ^while.header4, ^entry1;
^while.header3:
    f32 %33 = phi [^while.body2, f32 %33] [^b, f32 %10];
    f32 %34 = phi [^while.body2, f32 %47] [^b, f32 0];
    i32 %35 = phi [^while.body2, i32 %48] [^b, i32 0];
    i32 %36 = phi [^while.body2, i32 %36] [^b, i32 %8];
    f32* %37 = phi [^while.body2, f32* %37] [^b, f32* %17];
    f32* %38 = phi [^while.body2, f32* %38] [^b, f32* %16];
    i32 %39 = phi [^b, i32 %8] [^while.body2, i32 %36];
    i32 %40 = phi [^b, i32 0] [^while.body2, i32 %48];
    i1 %41 = scmp lt i32 %40, i32 %39;
    cbr i1 %41(prob = 0.97), ^while.body2, ^while.header5;
^while.body2:
    f32* %42 = getelementptr &(f32* %38)[i32 %35];
    f32 %43 = load f32* %42;
    f32* %44 = getelementptr &(f32* %37)[i32 %35];
    f32 %45 = load f32* %44;
    f32 %46 = fmul f32 %43, f32 %45;
    f32 %47 = fadd f32 %34, f32 %46;
    i32 %48 = add i32 %35, i32 1;
    ubr ^while.header3;
^entry1:
    store f32* %sum3 with f32 0;
    ubr ^while.header6;
^while.header4:
    i32 %49 = phi [^while.header2, i32 %18] [^while.body3, i32 %49];
    i32 %50 = phi [^while.header2, i32 %19] [^while.body3, i32 %50];
    f32* %51 = phi [^while.header2, f32* %21] [^while.body3, f32* %51];
    f32* %52 = phi [^while.header2, f32* %22] [^while.body3, f32* %52];
    i32 %53 = phi [^while.header2, i32 %23] [^while.body3, i32 %53];
    i32 %54 = phi [^while.header2, i32 %24] [^while.body3, i32 %54];
    i32 %55 = phi [^while.header2, i32 %25] [^while.body3, i32 %74];
    f32 %56 = phi [^while.header2, f32 %26] [^while.body3, f32 %82];
    f32* %57 = phi [^while.header2, f32* %27] [^while.body3, f32* %57];
    i32 %58 = phi [^while.header2, i32 %28] [^while.body3, i32 %58];
    f32* %59 = phi [^while.header2, f32* %29] [^while.body3, f32* %59];
    i32 %60 = phi [^while.header2, i32 %25] [^while.body3, i32 %74];
    i1 %61 = scmp lt i32 %60, i32 %53;
    cbr i1 %61(prob = 0.97), ^while.body3, ^b1;
^while.header5:
    f32 %62 = phi [^while.header3, f32 %33] [^while.body4, f32 %62];
    f32 %63 = phi [^while.header3, f32 0] [^while.body4, f32 %92];
    i32 %64 = phi [^while.header3, i32 0] [^while.body4, i32 %93];
    i32 %65 = phi [^while.header3, i32 %8] [^while.body4, i32 %65];
    f32* %66 = phi [^while.header3, f32* %17] [^while.body4, f32* %66];
    f32* %67 = phi [^while.header3, f32* %17] [^while.body4, f32* %67];
    i32 %68 = phi [^while.header3, i32 %8] [^while.body4, i32 %65];
    i32 %69 = phi [^while.header3, i32 0] [^while.body4, i32 %93];
    i1 %70 = scmp lt i32 %69, i32 %68;
    cbr i1 %70(prob = 0.97), ^while.body4, ^b2;
^while.body3:
    f32* %71 = getelementptr &(f32* %51)[i32 %55];
    f32 %72 = load f32* %71;
    i32 %73 = add i32 %55, i32 %54;
    i32 %74 = add i32 %55, i32 1;
    i32 %75 = add i32 %74, i32 %54;
    i32 %76 = mul i32 %73, i32 %75;
    i32 %77 = sdiv i32 %76, i32 2;
    i32 %78 = add i32 %77, i32 1;
    i32 %79 = add i32 %78, i32 %54;
    f32 %80 = s2f i32 %79 to f32;
    f32 %81 = fdiv f32 %72, f32 %80;
    f32 %82 = fadd f32 %56, f32 %81;
    store f32* %sum2 with f32 %82;
    ubr ^while.header4;
^b1:
    f32* %83 = getelementptr &(f32* %52)[i32 %54];
    store f32* %83 with f32 %56;
    f32 %84 = load f32* %temp;
    f32 %85 = load f32* %sum2;
    i32 %86 = add i32 %54, i32 1;
    ubr ^while.header2;
^while.body4:
    f32* %87 = getelementptr &(f32* %67)[i32 %64];
    f32 %88 = load f32* %87;
    f32* %89 = getelementptr &(f32* %66)[i32 %64];
    f32 %90 = load f32* %89;
    f32 %91 = fmul f32 %88, f32 %90;
    f32 %92 = fadd f32 %63, f32 %91;
    i32 %93 = add i32 %64, i32 1;
    ubr ^while.header5;
^while.header6:
    i32 %94 = phi [^b3, i32 %107] [^entry1, i32 %18];
    i32 %95 = phi [^b3, i32 %108] [^entry1, i32 %19];
    f32 %96 = phi [^b3, f32 %137] [^entry1, f32 %20];
    f32* %97 = phi [^b3, f32* %109] [^entry1, f32* %27];
    f32* %98 = phi [^b3, f32* %110] [^entry1, f32* %29];
    i32 %99 = phi [^b3, i32 %111] [^entry1, i32 %28];
    i32 %100 = phi [^b3, i32 %139] [^entry1, i32 0];
    i32 %101 = phi [^b3, i32 %113] [^entry1, i32 0];
    f32 %102 = phi [^b3, f32 %138] [^entry1, f32 0];
    i32 %103 = phi [^entry1, i32 %28] [^b3, i32 %111];
    i32 %104 = phi [^entry1, i32 0] [^b3, i32 %139];
    i1 %105 = scmp lt i32 %104, i32 %103;
    cbr i1 %105(prob = 0.97), ^while.header7, ^entry2;
^b2:
    f32 %106 = fdiv f32 %34, f32 %63;
    ubr ^while.header8;
^entry2:
    store f32* %sum with f32 0;
    ubr ^while.header9;
^while.header7:
    i32 %107 = phi [^while.header6, i32 %94] [^while.body5, i32 %107];
    i32 %108 = phi [^while.header6, i32 %95] [^while.body5, i32 %108];
    f32* %109 = phi [^while.header6, f32* %97] [^while.body5, f32* %109];
    f32* %110 = phi [^while.header6, f32* %98] [^while.body5, f32* %110];
    i32 %111 = phi [^while.header6, i32 %99] [^while.body5, i32 %111];
    i32 %112 = phi [^while.header6, i32 %100] [^while.body5, i32 %112];
    i32 %113 = phi [^while.header6, i32 %101] [^while.body5, i32 %127];
    f32 %114 = phi [^while.header6, f32 %102] [^while.body5, f32 %135];
    i32 %115 = phi [^while.header6, i32 %101] [^while.body5, i32 %127];
    i1 %116 = scmp lt i32 %115, i32 %111;
    cbr i1 %116(prob = 0.97), ^while.body5, ^b3;
^while.header8:
    f32 %117 = phi [^while.body6, f32 %161] [^b2, f32 %62];
    f32 %118 = phi [^while.body6, f32 %118] [^b2, f32 %106];
    f32 %119 = phi [^b2, f32 %62] [^while.body6, f32 %161];
    f32 %120 = phi [^b2, f32 %106] [^while.body6, f32 %118];
    f32 %121 = fdiv f32 %120, f32 %119;
    f32 %122 = fsub f32 %119, f32 %121;
    i1 %123 = fcmp gt f32 %122, f32 1e-06;
    cbr i1 %123(prob = 0.5), ^b5, ^b4;
^while.body5:
    f32* %124 = getelementptr &(f32* %109)[i32 %113];
    f32 %125 = load f32* %124;
    i32 %126 = add i32 %113, i32 %112;
    i32 %127 = add i32 %113, i32 1;
    i32 %128 = add i32 %127, i32 %112;
    i32 %129 = mul i32 %126, i32 %128;
    i32 %130 = sdiv i32 %129, i32 2;
    i32 %131 = add i32 %130, i32 1;
    i32 %132 = add i32 %131, i32 %113;
    f32 %133 = s2f i32 %132 to f32;
    f32 %134 = fdiv f32 %125, f32 %133;
    f32 %135 = fadd f32 %114, f32 %134;
    store f32* %sum3 with f32 %135;
    ubr ^while.header7;
^b3:
    f32* %136 = getelementptr &(f32* %110)[i32 %112];
    store f32* %136 with f32 %114;
    f32 %137 = load f32* %temp;
    f32 %138 = load f32* %sum3;
    i32 %139 = add i32 %112, i32 1;
    ubr ^while.header6;
^while.header9:
    i32 %140 = phi [^b7, i32 %162] [^entry2, i32 %94];
    i32 %141 = phi [^b7, i32 %163] [^entry2, i32 %95];
    f32 %142 = phi [^b7, f32 %190] [^entry2, f32 %96];
    f32* %143 = phi [^b7, f32* %164] [^entry2, f32* %14];
    f32* %144 = phi [^b7, f32* %165] [^entry2, f32* %15];
    i32 %145 = phi [^b7, i32 %166] [^entry2, i32 %94];
    i32 %146 = phi [^b7, i32 %192] [^entry2, i32 0];
    i32 %147 = phi [^b7, i32 %168] [^entry2, i32 0];
    f32 %148 = phi [^b7, f32 %191] [^entry2, f32 0];
    f32* %149 = phi [^b7, f32* %170] [^entry2, f32* %15];
    i32 %150 = phi [^b7, i32 %171] [^entry2, i32 %94];
    f32* %151 = phi [^b7, f32* %172] [^entry2, f32* %13];
    i32 %152 = phi [^entry2, i32 %94] [^b7, i32 %166];
    i32 %153 = phi [^entry2, i32 0] [^b7, i32 %192];
    i1 %154 = scmp lt i32 %153, i32 %152;
    cbr i1 %154(prob = 0.97), ^while.header10, ^entry3;
^b4:
    f32 %155 = fdiv f32 %118, f32 %117;
    f32 %156 = fsub f32 %117, f32 %155;
    i1 %157 = fcmp lt f32 %156, f32 -1e-06;
    ubr ^b5;
^b5:
    i1 %158 = phi [^while.header8, i1 true] [^b4, i1 %157];
    cbr i1 %158(prob = 0.97), ^while.body6, ^b6;
^entry3:
    store f32* %sum1 with f32 0;
    ubr ^while.header11;
^while.body6:
    f32 %159 = fdiv f32 %118, f32 %117;
    f32 %160 = fadd f32 %117, f32 %159;
    f32 %161 = fdiv f32 %160, f32 2;
    ubr ^while.header8;
^while.header10:
    i32 %162 = phi [^while.header9, i32 %140] [^while.body7, i32 %162];
    i32 %163 = phi [^while.header9, i32 %141] [^while.body7, i32 %163];
    f32* %164 = phi [^while.header9, f32* %143] [^while.body7, f32* %164];
    f32* %165 = phi [^while.header9, f32* %144] [^while.body7, f32* %165];
    i32 %166 = phi [^while.header9, i32 %145] [^while.body7, i32 %166];
    i32 %167 = phi [^while.header9, i32 %146] [^while.body7, i32 %167];
    i32 %168 = phi [^while.header9, i32 %147] [^while.body7, i32 %180];
    f32 %169 = phi [^while.header9, f32 %148] [^while.body7, f32 %188];
    f32* %170 = phi [^while.header9, f32* %149] [^while.body7, f32* %170];
    i32 %171 = phi [^while.header9, i32 %150] [^while.body7, i32 %171];
    f32* %172 = phi [^while.header9, f32* %151] [^while.body7, f32* %172];
    i32 %173 = phi [^while.header9, i32 %147] [^while.body7, i32 %180];
    i1 %174 = scmp lt i32 %173, i32 %166;
    cbr i1 %174(prob = 0.97), ^while.body7, ^b7;
^b6:
    f32 %175 = fsub f32 %117, f32 1;
    i1 %176 = fcmp le f32 %175, f32 1e-06;
    cbr i1 %176(prob = 0.5), ^b8, ^b9;
^while.body7:
    f32* %177 = getelementptr &(f32* %164)[i32 %168];
    f32 %178 = load f32* %177;
    i32 %179 = add i32 %168, i32 %167;
    i32 %180 = add i32 %168, i32 1;
    i32 %181 = add i32 %180, i32 %167;
    i32 %182 = mul i32 %179, i32 %181;
    i32 %183 = sdiv i32 %182, i32 2;
    i32 %184 = add i32 %183, i32 1;
    i32 %185 = add i32 %184, i32 %167;
    f32 %186 = s2f i32 %185 to f32;
    f32 %187 = fdiv f32 %178, f32 %186;
    f32 %188 = fadd f32 %169, f32 %187;
    store f32* %sum with f32 %188;
    ubr ^while.header10;
^b7:
    f32* %189 = getelementptr &(f32* %165)[i32 %167];
    store f32* %189 with f32 %169;
    f32 %190 = load f32* %temp;
    f32 %191 = load f32* %sum;
    i32 %192 = add i32 %167, i32 1;
    ubr ^while.header9;
^b8:
    i1 %193 = fcmp ge f32 %175, f32 -1e-06;
    ubr ^b9;
^while.header11:
    i32 %194 = phi [^b10, i32 %208] [^entry3, i32 %140];
    i32 %195 = phi [^b10, i32 %209] [^entry3, i32 %141];
    f32 %196 = phi [^b10, f32 %231] [^entry3, f32 %142];
    f32* %197 = phi [^b10, f32* %210] [^entry3, f32* %149];
    f32* %198 = phi [^b10, f32* %211] [^entry3, f32* %151];
    i32 %199 = phi [^b10, i32 %212] [^entry3, i32 %150];
    i32 %200 = phi [^b10, i32 %233] [^entry3, i32 0];
    i32 %201 = phi [^b10, i32 %214] [^entry3, i32 0];
    f32 %202 = phi [^b10, f32 %232] [^entry3, f32 0];
    i32 %203 = phi [^entry3, i32 %150] [^b10, i32 %212];
    i32 %204 = phi [^entry3, i32 0] [^b10, i32 %233];
    i1 %205 = scmp lt i32 %204, i32 %203;
    cbr i1 %205(prob = 0.97), ^while.header12, ^entry4;
^b9:
    i1 %206 = phi [^b6, i1 false] [^b8, i1 %193];
    cbr i1 %206(prob = 0.5), ^if.then, ^if.else;
^entry4:
    i32 %207 = add i32 %195, i32 1;
    ubr ^while.header1;
^while.header12:
    i32 %208 = phi [^while.header11, i32 %194] [^while.body8, i32 %208];
    i32 %209 = phi [^while.header11, i32 %195] [^while.body8, i32 %209];
    f32* %210 = phi [^while.header11, f32* %197] [^while.body8, f32* %210];
    f32* %211 = phi [^while.header11, f32* %198] [^while.body8, f32* %211];
    i32 %212 = phi [^while.header11, i32 %199] [^while.body8, i32 %212];
    i32 %213 = phi [^while.header11, i32 %200] [^while.body8, i32 %213];
    i32 %214 = phi [^while.header11, i32 %201] [^while.body8, i32 %221];
    f32 %215 = phi [^while.header11, f32 %202] [^while.body8, f32 %229];
    i32 %216 = phi [^while.header11, i32 %201] [^while.body8, i32 %221];
    i1 %217 = scmp lt i32 %216, i32 %212;
    cbr i1 %217(prob = 0.97), ^while.body8, ^b10;
^if.then:
    call (i32) -> void @putint(i32 1);
    ubr ^b11;
^if.else:
    call (i32) -> void @putint(i32 0);
    ubr ^b11;
^while.body8:
    f32* %218 = getelementptr &(f32* %210)[i32 %214];
    f32 %219 = load f32* %218;
    i32 %220 = add i32 %214, i32 %213;
    i32 %221 = add i32 %214, i32 1;
    i32 %222 = add i32 %221, i32 %213;
    i32 %223 = mul i32 %220, i32 %222;
    i32 %224 = sdiv i32 %223, i32 2;
    i32 %225 = add i32 %224, i32 1;
    i32 %226 = add i32 %225, i32 %214;
    f32 %227 = s2f i32 %226 to f32;
    f32 %228 = fdiv f32 %219, f32 %227;
    f32 %229 = fadd f32 %215, f32 %228;
    store f32* %sum1 with f32 %229;
    ubr ^while.header12;
^b10:
    f32* %230 = getelementptr &(f32* %211)[i32 %213];
    store f32* %230 with f32 %215;
    f32 %231 = load f32* %temp;
    f32 %232 = load f32* %sum1;
    i32 %233 = add i32 %213, i32 1;
    ubr ^while.header11;
^b11:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
