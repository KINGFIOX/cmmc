internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoRecurse } {
^entry():
    f32* %temp = alloc f32;
    store f32* %temp with f32 1;
    i32* %n = alloc i32;
    store i32* %n with i32 100000;
    call (i32) -> void @starttime(i32 62);
    [100000 * f32]* %vectorA = alloc [100000 * f32];
    [100000 * f32]* %vectorB = alloc [100000 * f32];
    [100000 * f32]* %Vectortmp = alloc [100000 * f32];
    i32* %i = alloc i32;
    i1 %0 = scmp lt i32 undef, i32 100000;
    cbr i1 %0, [ ^while.body [100000 * f32]* %Vectortmp, i32* %n, [100000 * f32]* %vectorA, [100000 * f32]* %vectorB, i32* %i, f32* %temp, i32 undef ], [ ^b [100000 * f32]* %Vectortmp, i32* %n, [100000 * f32]* %vectorA, [100000 * f32]* %vectorB, i32* %i, f32* %temp ];
^b([100000 * f32]* %arg, i32* %arg1, [100000 * f32]* %arg2, [100000 * f32]* %arg3, i32* %arg4, f32* %arg5):
    store i32* %arg4 with i32 0;
    ubr [ ^while.body1 [100000 * f32]* %arg, i32* %arg1, i32* %arg4, [100000 * f32]* %arg3, [100000 * f32]* %arg2, f32* %arg5, f32 1, i32 100000, i32 0 ];
^while.body([100000 * f32]* %arg, i32* %arg1, [100000 * f32]* %arg2, [100000 * f32]* %arg3, i32* %arg4, f32* %arg5, i32 %arg6):
    f32* %0 = getelementptr &([100000 * f32]* %arg2)[i32 0][i32 %arg6];
    store f32* %0 with f32 1;
    i32 %1 = add i32 %arg6, i32 1;
    i1 %2 = scmp lt i32 %1, i32 100000;
    cbr i1 %2, [ ^while.body [100000 * f32]* %arg, i32* %arg1, [100000 * f32]* %arg2, [100000 * f32]* %arg3, i32* %arg4, f32* %arg5, i32 %1 ], [ ^b [100000 * f32]* %arg, i32* %arg1, [100000 * f32]* %arg2, [100000 * f32]* %arg3, i32* %arg4, f32* %arg5 ];
^while.body1([100000 * f32]* %arg, i32* %arg1, i32* %arg2, [100000 * f32]* %arg3, [100000 * f32]* %arg4, f32* %arg5, f32 %arg6, i32 %arg7, i32 %arg8):
    f32* %0 = getelementptr &([100000 * f32]* %arg4)[i32 0][i32 0];
    f32* %1 = getelementptr &([100000 * f32]* %arg3)[i32 0][i32 0];
    f32* %2 = getelementptr &([100000 * f32]* %arg)[i32 0][i32 0];
    f32** %out = alloc f32*;
    store f32** %out with f32* %1;
    i32* %n = alloc i32;
    store i32* %n with i32 %arg7;
    f32** %tmp = alloc f32*;
    store f32** %tmp with f32* %2;
    f32** %v = alloc f32*;
    store f32** %v with f32* %0;
    f32** %out1 = alloc f32*;
    store f32** %out1 with f32* %2;
    i32* %n1 = alloc i32;
    store i32* %n1 with i32 %arg7;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    i32* %j = alloc i32;
    store i32* %j with i32 0;
    f32* %sum = alloc f32;
    store f32* %sum with f32 0;
    i1 %3 = scmp lt i32 0, i32 %arg7;
    cbr i1 %3, [ ^indirect f32** %out1, f32* %sum, f32** %v, i32* %i, i32* %n1, i32* %j, f32** %tmp, f32** %out, i32* %n, [100000 * f32]* %arg3, [100000 * f32]* %arg, i32* %arg2, f32* %arg5, [100000 * f32]* %arg4, f32* %2, f32* %0, f32* %1, i32* %arg1, f32* %0, f32* %2, i32 %arg7, i32 0, i32 0, f32 0 ], [ ^b1 f32** %v, f32** %out1, i32* %n1, i32* %i, i32* %j, f32* %sum, f32** %tmp, f32** %out, i32* %n, [100000 * f32]* %arg3, [100000 * f32]* %arg, i32* %arg2, f32* %arg5, [100000 * f32]* %arg4, f32* %2, f32* %0, f32* %1, i32* %arg1, f32 %arg6, i32 %arg7, i32 %arg8, f32* %1, i32 %arg7, f32* %2 ];
^indirect(f32** %arg, f32* %arg1, f32** %arg2, i32* %arg3, i32* %arg4, i32* %arg5, f32** %arg6, f32** %arg7, i32* %arg8, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, f32* %arg12, [100000 * f32]* %arg13, f32* %arg14, f32* %arg15, f32* %arg16, i32* %arg17, f32* %arg18, f32* %arg19, i32 %arg20, i32 %arg21, i32 %arg22, f32 %arg23):
    i1 %0 = scmp lt i32 %arg22, i32 %arg20;
    cbr i1 %0, [ ^while.body2 f32** %arg, i32* %arg4, i32* %arg3, f32** %arg2, i32* %arg5, f32* %arg1, f32** %arg6, f32** %arg7, i32* %arg8, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, f32* %arg12, [100000 * f32]* %arg13, f32* %arg14, f32* %arg15, f32* %arg16, i32* %arg17, f32* %arg18, f32* %arg19, i32 %arg20, i32 %arg21, i32 %arg22, f32 %arg23 ], [ ^b2 i32* %arg5, f32** %arg2, i32* %arg4, f32* %arg1, f32** %arg, i32* %arg3, f32** %arg6, f32** %arg7, i32* %arg8, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, f32* %arg12, [100000 * f32]* %arg13, f32* %arg14, f32* %arg15, f32* %arg16, i32* %arg17, f32* %arg19, i32 %arg21, f32 %arg23 ];
^b1(f32** %arg, f32** %arg1, i32* %arg2, i32* %arg3, i32* %arg4, f32* %arg5, f32** %arg6, f32** %arg7, i32* %arg8, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, f32* %arg12, [100000 * f32]* %arg13, f32* %arg14, f32* %arg15, f32* %arg16, i32* %arg17, f32 %arg18, i32 %arg19, i32 %arg20, f32* %arg21, i32 %arg22, f32* %arg23):
    free f32* %arg5;
    free i32* %arg4;
    free i32* %arg3;
    free i32* %arg2;
    free f32** %arg1;
    free f32** %arg;
    f32** %v = alloc f32*;
    store f32** %v with f32* %arg23;
    f32** %out = alloc f32*;
    store f32** %out with f32* %arg21;
    i32* %n = alloc i32;
    store i32* %n with i32 %arg22;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    i32* %j = alloc i32;
    store i32* %j with i32 0;
    f32* %sum = alloc f32;
    store f32* %sum with f32 0;
    i1 %0 = scmp lt i32 0, i32 %arg22;
    cbr i1 %0, [ ^indirect1 f32** %out, f32* %sum, f32** %v, i32* %i, i32* %n, i32* %j, f32** %arg6, i32* %arg8, f32** %arg7, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, f32* %arg12, [100000 * f32]* %arg13, f32* %arg14, f32* %arg15, f32* %arg16, i32* %arg17, f32* %arg23, f32* %arg21, i32 %arg22, i32 0, i32 0, f32 0 ], [ ^b3 f32** %v, f32** %out, i32* %n, i32* %i, i32* %j, f32* %sum, f32** %arg6, i32* %arg8, f32** %arg7, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, f32* %arg12, [100000 * f32]* %arg13, f32* %arg14, f32* %arg15, f32* %arg16, i32* %arg17, f32 %arg18, i32 %arg19, i32 %arg20 ];
^while.body2(f32** %arg, i32* %arg1, i32* %arg2, f32** %arg3, i32* %arg4, f32* %arg5, f32** %arg6, f32** %arg7, i32* %arg8, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, f32* %arg12, [100000 * f32]* %arg13, f32* %arg14, f32* %arg15, f32* %arg16, i32* %arg17, f32* %arg18, f32* %arg19, i32 %arg20, i32 %arg21, i32 %arg22, f32 %arg23):
    f32* %0 = getelementptr &(f32* %arg18)[i32 %arg22];
    f32 %1 = load f32* %0;
    i32 %2 = add i32 %arg21, i32 %arg22;
    i32 %3 = add i32 %2, i32 1;
    i32 %4 = mul i32 %2, i32 %3;
    i32 %5 = sdiv i32 %4, i32 2;
    i32 %6 = add i32 %5, i32 %arg21;
    i32 %7 = add i32 %6, i32 1;
    f32 %8 = s2f i32 %7 to f32;
    f32 %9 = fdiv f32 %1, f32 %8;
    f32 %10 = fadd f32 %arg23, f32 %9;
    store f32* %arg5 with f32 %10;
    i32 %11 = add i32 %arg22, i32 1;
    store i32* %arg4 with i32 %11;
    i1 %12 = scmp lt i32 %11, i32 %arg20;
    cbr i1 %12, [ ^while.body2 f32** %arg, i32* %arg1, i32* %arg2, f32** %arg3, i32* %arg4, f32* %arg5, f32** %arg6, f32** %arg7, i32* %arg8, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, f32* %arg12, [100000 * f32]* %arg13, f32* %arg14, f32* %arg15, f32* %arg16, i32* %arg17, f32* %arg18, f32* %arg19, i32 %arg20, i32 %arg21, i32 %11, f32 %10 ], [ ^b2 i32* %arg4, f32** %arg3, i32* %arg1, f32* %arg5, f32** %arg, i32* %arg2, f32** %arg6, f32** %arg7, i32* %arg8, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, f32* %arg12, [100000 * f32]* %arg13, f32* %arg14, f32* %arg15, f32* %arg16, i32* %arg17, f32* %arg19, i32 %arg21, f32 %10 ];
^b2(i32* %arg, f32** %arg1, i32* %arg2, f32* %arg3, f32** %arg4, i32* %arg5, f32** %arg6, f32** %arg7, i32* %arg8, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, f32* %arg12, [100000 * f32]* %arg13, f32* %arg14, f32* %arg15, f32* %arg16, i32* %arg17, f32* %arg18, i32 %arg19, f32 %arg20):
    f32* %0 = getelementptr &(f32* %arg18)[i32 %arg19];
    store f32* %0 with f32 %arg20;
    f32 %1 = load f32* %arg3;
    i32 %2 = load i32* %arg;
    i32 %3 = load i32* %arg2;
    f32* %4 = load f32** %arg4;
    f32* %5 = load f32** %arg1;
    f32* %6 = load f32** %arg6;
    i32 %7 = load i32* %arg8;
    f32* %8 = load f32** %arg7;
    i32 %9 = load i32* %arg11;
    i32 %10 = load i32* %arg17;
    f32 %11 = load f32* %arg12;
    i32 %12 = add i32 %arg19, i32 1;
    store i32* %arg5 with i32 %12;
    i1 %13 = scmp lt i32 %12, i32 %3;
    cbr i1 %13, [ ^indirect f32** %arg4, f32* %arg3, f32** %arg1, i32* %arg5, i32* %arg2, i32* %arg, f32** %arg6, f32** %arg7, i32* %arg8, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, f32* %arg12, [100000 * f32]* %arg13, f32* %arg14, f32* %arg15, f32* %arg16, i32* %arg17, f32* %5, f32* %4, i32 %3, i32 %12, i32 %2, f32 %1 ], [ ^b1 f32** %arg1, f32** %arg4, i32* %arg2, i32* %arg5, i32* %arg, f32* %arg3, f32** %arg6, f32** %arg7, i32* %arg8, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, f32* %arg12, [100000 * f32]* %arg13, f32* %arg14, f32* %arg15, f32* %arg16, i32* %arg17, f32 %11, i32 %10, i32 %9, f32* %8, i32 %7, f32* %6 ];
^indirect1(f32** %arg, f32* %arg1, f32** %arg2, i32* %arg3, i32* %arg4, i32* %arg5, f32** %arg6, i32* %arg7, f32** %arg8, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, f32* %arg12, [100000 * f32]* %arg13, f32* %arg14, f32* %arg15, f32* %arg16, i32* %arg17, f32* %arg18, f32* %arg19, i32 %arg20, i32 %arg21, i32 %arg22, f32 %arg23):
    i1 %0 = scmp lt i32 %arg22, i32 %arg20;
    cbr i1 %0, [ ^while.body3 f32** %arg, i32* %arg4, i32* %arg3, f32** %arg2, i32* %arg5, f32* %arg1, f32** %arg6, i32* %arg7, f32** %arg8, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, f32* %arg12, [100000 * f32]* %arg13, f32* %arg14, f32* %arg15, f32* %arg16, i32* %arg17, f32* %arg18, f32* %arg19, i32 %arg20, i32 %arg21, i32 %arg22, f32 %arg23 ], [ ^b4 i32* %arg5, f32** %arg2, i32* %arg4, f32* %arg1, f32** %arg, i32* %arg3, f32** %arg6, i32* %arg7, f32** %arg8, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, f32* %arg12, [100000 * f32]* %arg13, f32* %arg14, f32* %arg15, f32* %arg16, i32* %arg17, f32* %arg19, i32 %arg21, f32 %arg23 ];
^b3(f32** %arg, f32** %arg1, i32* %arg2, i32* %arg3, i32* %arg4, f32* %arg5, f32** %arg6, i32* %arg7, f32** %arg8, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, f32* %arg12, [100000 * f32]* %arg13, f32* %arg14, f32* %arg15, f32* %arg16, i32* %arg17, f32 %arg18, i32 %arg19, i32 %arg20):
    free f32* %arg5;
    free i32* %arg4;
    free i32* %arg3;
    free i32* %arg2;
    free f32** %arg1;
    free f32** %arg;
    free f32** %arg6;
    free i32* %arg7;
    free f32** %arg8;
    f32** %out = alloc f32*;
    store f32** %out with f32* %arg15;
    i32* %n = alloc i32;
    store i32* %n with i32 %arg19;
    f32** %tmp = alloc f32*;
    store f32** %tmp with f32* %arg14;
    f32** %v = alloc f32*;
    store f32** %v with f32* %arg16;
    f32** %out1 = alloc f32*;
    store f32** %out1 with f32* %arg14;
    i32* %n1 = alloc i32;
    store i32* %n1 with i32 %arg19;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    i32* %j = alloc i32;
    store i32* %j with i32 0;
    f32* %sum = alloc f32;
    store f32* %sum with f32 0;
    i1 %0 = scmp lt i32 0, i32 %arg19;
    cbr i1 %0, [ ^indirect2 f32** %out1, f32* %sum, f32** %v, i32* %i, i32* %n1, i32* %j, f32** %tmp, f32** %out, i32* %n, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg17, [100000 * f32]* %arg13, f32* %arg12, i32* %arg11, f32* %arg16, f32* %arg14, i32 %arg19, i32 0, i32 0, f32 0 ], [ ^b5 f32** %v, f32** %out1, i32* %n1, i32* %i, i32* %j, f32* %sum, f32** %tmp, f32** %out, i32* %n, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg17, [100000 * f32]* %arg13, f32* %arg12, i32* %arg11, f32 %arg18, i32 %arg19, i32 %arg20, f32* %arg15, i32 %arg19, f32* %arg14 ];
^while.body3(f32** %arg, i32* %arg1, i32* %arg2, f32** %arg3, i32* %arg4, f32* %arg5, f32** %arg6, i32* %arg7, f32** %arg8, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, f32* %arg12, [100000 * f32]* %arg13, f32* %arg14, f32* %arg15, f32* %arg16, i32* %arg17, f32* %arg18, f32* %arg19, i32 %arg20, i32 %arg21, i32 %arg22, f32 %arg23):
    f32* %0 = getelementptr &(f32* %arg18)[i32 %arg22];
    f32 %1 = load f32* %0;
    i32 %2 = add i32 %arg22, i32 %arg21;
    i32 %3 = add i32 %2, i32 1;
    i32 %4 = mul i32 %2, i32 %3;
    i32 %5 = sdiv i32 %4, i32 2;
    i32 %6 = add i32 %5, i32 %arg22;
    i32 %7 = add i32 %6, i32 1;
    f32 %8 = s2f i32 %7 to f32;
    f32 %9 = fdiv f32 %1, f32 %8;
    f32 %10 = fadd f32 %arg23, f32 %9;
    store f32* %arg5 with f32 %10;
    i32 %11 = add i32 %arg22, i32 1;
    store i32* %arg4 with i32 %11;
    i1 %12 = scmp lt i32 %11, i32 %arg20;
    cbr i1 %12, [ ^while.body3 f32** %arg, i32* %arg1, i32* %arg2, f32** %arg3, i32* %arg4, f32* %arg5, f32** %arg6, i32* %arg7, f32** %arg8, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, f32* %arg12, [100000 * f32]* %arg13, f32* %arg14, f32* %arg15, f32* %arg16, i32* %arg17, f32* %arg18, f32* %arg19, i32 %arg20, i32 %arg21, i32 %11, f32 %10 ], [ ^b4 i32* %arg4, f32** %arg3, i32* %arg1, f32* %arg5, f32** %arg, i32* %arg2, f32** %arg6, i32* %arg7, f32** %arg8, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, f32* %arg12, [100000 * f32]* %arg13, f32* %arg14, f32* %arg15, f32* %arg16, i32* %arg17, f32* %arg19, i32 %arg21, f32 %10 ];
^b4(i32* %arg, f32** %arg1, i32* %arg2, f32* %arg3, f32** %arg4, i32* %arg5, f32** %arg6, i32* %arg7, f32** %arg8, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, f32* %arg12, [100000 * f32]* %arg13, f32* %arg14, f32* %arg15, f32* %arg16, i32* %arg17, f32* %arg18, i32 %arg19, f32 %arg20):
    f32* %0 = getelementptr &(f32* %arg18)[i32 %arg19];
    store f32* %0 with f32 %arg20;
    f32 %1 = load f32* %arg3;
    i32 %2 = load i32* %arg;
    i32 %3 = load i32* %arg2;
    f32* %4 = load f32** %arg4;
    f32* %5 = load f32** %arg1;
    i32 %6 = load i32* %arg11;
    i32 %7 = load i32* %arg17;
    f32 %8 = load f32* %arg12;
    i32 %9 = add i32 %arg19, i32 1;
    store i32* %arg5 with i32 %9;
    i1 %10 = scmp lt i32 %9, i32 %3;
    cbr i1 %10, [ ^indirect1 f32** %arg4, f32* %arg3, f32** %arg1, i32* %arg5, i32* %arg2, i32* %arg, f32** %arg6, i32* %arg7, f32** %arg8, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, f32* %arg12, [100000 * f32]* %arg13, f32* %arg14, f32* %arg15, f32* %arg16, i32* %arg17, f32* %5, f32* %4, i32 %3, i32 %9, i32 %2, f32 %1 ], [ ^b3 f32** %arg1, f32** %arg4, i32* %arg2, i32* %arg5, i32* %arg, f32* %arg3, f32** %arg6, i32* %arg7, f32** %arg8, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, f32* %arg12, [100000 * f32]* %arg13, f32* %arg14, f32* %arg15, f32* %arg16, i32* %arg17, f32 %8, i32 %7, i32 %6 ];
^indirect2(f32** %arg, f32* %arg1, f32** %arg2, i32* %arg3, i32* %arg4, i32* %arg5, f32** %arg6, f32** %arg7, i32* %arg8, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, [100000 * f32]* %arg12, f32* %arg13, i32* %arg14, f32* %arg15, f32* %arg16, i32 %arg17, i32 %arg18, i32 %arg19, f32 %arg20):
    i1 %0 = scmp lt i32 %arg19, i32 %arg17;
    cbr i1 %0, [ ^while.body4 f32** %arg, i32* %arg4, i32* %arg3, f32** %arg2, i32* %arg5, f32* %arg1, f32** %arg6, f32** %arg7, i32* %arg8, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, [100000 * f32]* %arg12, f32* %arg13, i32* %arg14, f32* %arg15, f32* %arg16, i32 %arg17, i32 %arg18, i32 %arg19, f32 %arg20 ], [ ^b6 i32* %arg5, f32** %arg2, i32* %arg4, f32* %arg1, f32** %arg, i32* %arg3, f32** %arg6, f32** %arg7, i32* %arg8, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, [100000 * f32]* %arg12, f32* %arg13, i32* %arg14, f32* %arg16, i32 %arg18, f32 %arg20 ];
^b5(f32** %arg, f32** %arg1, i32* %arg2, i32* %arg3, i32* %arg4, f32* %arg5, f32** %arg6, f32** %arg7, i32* %arg8, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, [100000 * f32]* %arg12, f32* %arg13, i32* %arg14, f32 %arg15, i32 %arg16, i32 %arg17, f32* %arg18, i32 %arg19, f32* %arg20):
    free f32* %arg5;
    free i32* %arg4;
    free i32* %arg3;
    free i32* %arg2;
    free f32** %arg1;
    free f32** %arg;
    f32** %v = alloc f32*;
    store f32** %v with f32* %arg20;
    f32** %out = alloc f32*;
    store f32** %out with f32* %arg18;
    i32* %n = alloc i32;
    store i32* %n with i32 %arg19;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    i32* %j = alloc i32;
    store i32* %j with i32 0;
    f32* %sum = alloc f32;
    store f32* %sum with f32 0;
    i1 %0 = scmp lt i32 0, i32 %arg19;
    cbr i1 %0, [ ^indirect3 f32** %out, f32* %sum, f32** %v, i32* %i, i32* %n, i32* %j, f32** %arg6, i32* %arg8, f32** %arg7, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, [100000 * f32]* %arg12, f32* %arg13, i32* %arg14, f32* %arg20, f32* %arg18, i32 %arg19, i32 0, i32 0, f32 0 ], [ ^b7 f32** %v, f32** %out, i32* %n, i32* %i, i32* %j, f32* %sum, f32** %arg6, i32* %arg8, f32** %arg7, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, [100000 * f32]* %arg12, f32* %arg13, i32* %arg14, f32 %arg15, i32 %arg16, i32 %arg17 ];
^while.body4(f32** %arg, i32* %arg1, i32* %arg2, f32** %arg3, i32* %arg4, f32* %arg5, f32** %arg6, f32** %arg7, i32* %arg8, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, [100000 * f32]* %arg12, f32* %arg13, i32* %arg14, f32* %arg15, f32* %arg16, i32 %arg17, i32 %arg18, i32 %arg19, f32 %arg20):
    f32* %0 = getelementptr &(f32* %arg15)[i32 %arg19];
    f32 %1 = load f32* %0;
    i32 %2 = add i32 %arg18, i32 %arg19;
    i32 %3 = add i32 %2, i32 1;
    i32 %4 = mul i32 %2, i32 %3;
    i32 %5 = sdiv i32 %4, i32 2;
    i32 %6 = add i32 %5, i32 %arg18;
    i32 %7 = add i32 %6, i32 1;
    f32 %8 = s2f i32 %7 to f32;
    f32 %9 = fdiv f32 %1, f32 %8;
    f32 %10 = fadd f32 %arg20, f32 %9;
    store f32* %arg5 with f32 %10;
    i32 %11 = add i32 %arg19, i32 1;
    store i32* %arg4 with i32 %11;
    i1 %12 = scmp lt i32 %11, i32 %arg17;
    cbr i1 %12, [ ^while.body4 f32** %arg, i32* %arg1, i32* %arg2, f32** %arg3, i32* %arg4, f32* %arg5, f32** %arg6, f32** %arg7, i32* %arg8, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, [100000 * f32]* %arg12, f32* %arg13, i32* %arg14, f32* %arg15, f32* %arg16, i32 %arg17, i32 %arg18, i32 %11, f32 %10 ], [ ^b6 i32* %arg4, f32** %arg3, i32* %arg1, f32* %arg5, f32** %arg, i32* %arg2, f32** %arg6, f32** %arg7, i32* %arg8, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, [100000 * f32]* %arg12, f32* %arg13, i32* %arg14, f32* %arg16, i32 %arg18, f32 %10 ];
^b6(i32* %arg, f32** %arg1, i32* %arg2, f32* %arg3, f32** %arg4, i32* %arg5, f32** %arg6, f32** %arg7, i32* %arg8, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, [100000 * f32]* %arg12, f32* %arg13, i32* %arg14, f32* %arg15, i32 %arg16, f32 %arg17):
    f32* %0 = getelementptr &(f32* %arg15)[i32 %arg16];
    store f32* %0 with f32 %arg17;
    f32 %1 = load f32* %arg3;
    i32 %2 = load i32* %arg;
    i32 %3 = load i32* %arg2;
    f32* %4 = load f32** %arg4;
    f32* %5 = load f32** %arg1;
    f32* %6 = load f32** %arg6;
    i32 %7 = load i32* %arg8;
    f32* %8 = load f32** %arg7;
    i32 %9 = load i32* %arg14;
    i32 %10 = load i32* %arg11;
    f32 %11 = load f32* %arg13;
    i32 %12 = add i32 %arg16, i32 1;
    store i32* %arg5 with i32 %12;
    i1 %13 = scmp lt i32 %12, i32 %3;
    cbr i1 %13, [ ^indirect2 f32** %arg4, f32* %arg3, f32** %arg1, i32* %arg5, i32* %arg2, i32* %arg, f32** %arg6, f32** %arg7, i32* %arg8, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, [100000 * f32]* %arg12, f32* %arg13, i32* %arg14, f32* %5, f32* %4, i32 %3, i32 %12, i32 %2, f32 %1 ], [ ^b5 f32** %arg1, f32** %arg4, i32* %arg2, i32* %arg5, i32* %arg, f32* %arg3, f32** %arg6, f32** %arg7, i32* %arg8, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, [100000 * f32]* %arg12, f32* %arg13, i32* %arg14, f32 %11, i32 %10, i32 %9, f32* %8, i32 %7, f32* %6 ];
^indirect3(f32** %arg, f32* %arg1, f32** %arg2, i32* %arg3, i32* %arg4, i32* %arg5, f32** %arg6, i32* %arg7, f32** %arg8, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, [100000 * f32]* %arg12, f32* %arg13, i32* %arg14, f32* %arg15, f32* %arg16, i32 %arg17, i32 %arg18, i32 %arg19, f32 %arg20):
    i1 %0 = scmp lt i32 %arg19, i32 %arg17;
    cbr i1 %0, [ ^while.body5 f32** %arg, i32* %arg4, i32* %arg3, f32** %arg2, i32* %arg5, f32* %arg1, f32** %arg6, i32* %arg7, f32** %arg8, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, [100000 * f32]* %arg12, f32* %arg13, i32* %arg14, f32* %arg15, f32* %arg16, i32 %arg17, i32 %arg18, i32 %arg19, f32 %arg20 ], [ ^b8 i32* %arg5, f32** %arg2, i32* %arg4, f32* %arg1, f32** %arg, i32* %arg3, f32** %arg6, i32* %arg7, f32** %arg8, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, [100000 * f32]* %arg12, f32* %arg13, i32* %arg14, f32* %arg16, i32 %arg18, f32 %arg20 ];
^b7(f32** %arg, f32** %arg1, i32* %arg2, i32* %arg3, i32* %arg4, f32* %arg5, f32** %arg6, i32* %arg7, f32** %arg8, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, [100000 * f32]* %arg12, f32* %arg13, i32* %arg14, f32 %arg15, i32 %arg16, i32 %arg17):
    free f32* %arg5;
    free i32* %arg4;
    free i32* %arg3;
    free i32* %arg2;
    free f32** %arg1;
    free f32** %arg;
    free f32** %arg6;
    free i32* %arg7;
    free f32** %arg8;
    i32 %0 = add i32 %arg17, i32 1;
    store i32* %arg14 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 1000;
    cbr i1 %1, [ ^while.body1 [100000 * f32]* %arg10, i32* %arg11, i32* %arg14, [100000 * f32]* %arg9, [100000 * f32]* %arg12, f32* %arg13, f32 %arg15, i32 %arg16, i32 %0 ], [ ^b9 [100000 * f32]* %arg9, [100000 * f32]* %arg12, f32* %arg13, f32 %arg15, i32 %arg16 ];
^while.body5(f32** %arg, i32* %arg1, i32* %arg2, f32** %arg3, i32* %arg4, f32* %arg5, f32** %arg6, i32* %arg7, f32** %arg8, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, [100000 * f32]* %arg12, f32* %arg13, i32* %arg14, f32* %arg15, f32* %arg16, i32 %arg17, i32 %arg18, i32 %arg19, f32 %arg20):
    f32* %0 = getelementptr &(f32* %arg15)[i32 %arg19];
    f32 %1 = load f32* %0;
    i32 %2 = add i32 %arg19, i32 %arg18;
    i32 %3 = add i32 %2, i32 1;
    i32 %4 = mul i32 %2, i32 %3;
    i32 %5 = sdiv i32 %4, i32 2;
    i32 %6 = add i32 %5, i32 %arg19;
    i32 %7 = add i32 %6, i32 1;
    f32 %8 = s2f i32 %7 to f32;
    f32 %9 = fdiv f32 %1, f32 %8;
    f32 %10 = fadd f32 %arg20, f32 %9;
    store f32* %arg5 with f32 %10;
    i32 %11 = add i32 %arg19, i32 1;
    store i32* %arg4 with i32 %11;
    i1 %12 = scmp lt i32 %11, i32 %arg17;
    cbr i1 %12, [ ^while.body5 f32** %arg, i32* %arg1, i32* %arg2, f32** %arg3, i32* %arg4, f32* %arg5, f32** %arg6, i32* %arg7, f32** %arg8, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, [100000 * f32]* %arg12, f32* %arg13, i32* %arg14, f32* %arg15, f32* %arg16, i32 %arg17, i32 %arg18, i32 %11, f32 %10 ], [ ^b8 i32* %arg4, f32** %arg3, i32* %arg1, f32* %arg5, f32** %arg, i32* %arg2, f32** %arg6, i32* %arg7, f32** %arg8, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, [100000 * f32]* %arg12, f32* %arg13, i32* %arg14, f32* %arg16, i32 %arg18, f32 %10 ];
^b8(i32* %arg, f32** %arg1, i32* %arg2, f32* %arg3, f32** %arg4, i32* %arg5, f32** %arg6, i32* %arg7, f32** %arg8, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, [100000 * f32]* %arg12, f32* %arg13, i32* %arg14, f32* %arg15, i32 %arg16, f32 %arg17):
    f32* %0 = getelementptr &(f32* %arg15)[i32 %arg16];
    store f32* %0 with f32 %arg17;
    f32 %1 = load f32* %arg3;
    i32 %2 = load i32* %arg;
    i32 %3 = load i32* %arg2;
    f32* %4 = load f32** %arg4;
    f32* %5 = load f32** %arg1;
    i32 %6 = load i32* %arg14;
    i32 %7 = load i32* %arg11;
    f32 %8 = load f32* %arg13;
    i32 %9 = add i32 %arg16, i32 1;
    store i32* %arg5 with i32 %9;
    i1 %10 = scmp lt i32 %9, i32 %3;
    cbr i1 %10, [ ^indirect3 f32** %arg4, f32* %arg3, f32** %arg1, i32* %arg5, i32* %arg2, i32* %arg, f32** %arg6, i32* %arg7, f32** %arg8, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, [100000 * f32]* %arg12, f32* %arg13, i32* %arg14, f32* %5, f32* %4, i32 %3, i32 %9, i32 %2, f32 %1 ], [ ^b7 f32** %arg1, f32** %arg4, i32* %arg2, i32* %arg5, i32* %arg, f32* %arg3, f32** %arg6, i32* %arg7, f32** %arg8, [100000 * f32]* %arg9, [100000 * f32]* %arg10, i32* %arg11, [100000 * f32]* %arg12, f32* %arg13, i32* %arg14, f32 %8, i32 %7, i32 %6 ];
^b9([100000 * f32]* %arg, [100000 * f32]* %arg1, f32* %arg2, f32 %arg3, i32 %arg4):
    call (i32) -> void @stoptime(i32 76);
    f32* %0 = getelementptr &([100000 * f32]* %arg1)[i32 0][i32 0];
    f32* %1 = getelementptr &([100000 * f32]* %arg)[i32 0][i32 0];
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    f32* %sum = alloc f32;
    store f32* %sum with f32 0;
    i1 %2 = scmp lt i32 0, i32 %arg4;
    cbr i1 %2, [ ^while.body6 i32* %i, f32* %sum, f32* %1, f32* %arg2, i32 %arg4, f32 %arg3, f32* %0, f32* %1, i32 %arg4, i32 0, f32 0 ], [ ^b10 f32* %1, f32* %arg2, i32 %arg4, f32 %arg3, f32 0 ];
^while.body6(i32* %arg, f32* %arg1, f32* %arg2, f32* %arg3, i32 %arg4, f32 %arg5, f32* %arg6, f32* %arg7, i32 %arg8, i32 %arg9, f32 %arg10):
    f32* %0 = getelementptr &(f32* %arg6)[i32 %arg9];
    f32 %1 = load f32* %0;
    f32* %2 = getelementptr &(f32* %arg7)[i32 %arg9];
    f32 %3 = load f32* %2;
    f32 %4 = ffma f32 %1, f32 %3, f32 %arg10;
    store f32* %arg1 with f32 %4;
    i32 %5 = add i32 %arg9, i32 1;
    store i32* %arg with i32 %5;
    i1 %6 = scmp lt i32 %5, i32 %arg8;
    cbr i1 %6, [ ^while.body6 i32* %arg, f32* %arg1, f32* %arg2, f32* %arg3, i32 %arg4, f32 %arg5, f32* %arg6, f32* %arg7, i32 %arg8, i32 %5, f32 %4 ], [ ^b10 f32* %arg2, f32* %arg3, i32 %arg4, f32 %arg5, f32 %4 ];
^b10(f32* %arg, f32* %arg1, i32 %arg2, f32 %arg3, f32 %arg4):
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    f32* %sum = alloc f32;
    store f32* %sum with f32 0;
    i1 %0 = scmp lt i32 0, i32 %arg2;
    cbr i1 %0, [ ^while.body7 i32* %i, f32* %sum, f32 %arg4, f32* %arg1, f32 %arg3, f32* %arg, f32* %arg, i32 %arg2, i32 0, f32 0 ], [ ^b11 f32 %arg4, f32* %arg1, f32 %arg3, f32 0 ];
^while.body7(i32* %arg, f32* %arg1, f32 %arg2, f32* %arg3, f32 %arg4, f32* %arg5, f32* %arg6, i32 %arg7, i32 %arg8, f32 %arg9):
    f32* %0 = getelementptr &(f32* %arg5)[i32 %arg8];
    f32 %1 = load f32* %0;
    f32* %2 = getelementptr &(f32* %arg6)[i32 %arg8];
    f32 %3 = load f32* %2;
    f32 %4 = ffma f32 %1, f32 %3, f32 %arg9;
    store f32* %arg1 with f32 %4;
    i32 %5 = add i32 %arg8, i32 1;
    store i32* %arg with i32 %5;
    i1 %6 = scmp lt i32 %5, i32 %arg7;
    cbr i1 %6, [ ^while.body7 i32* %arg, f32* %arg1, f32 %arg2, f32* %arg3, f32 %arg4, f32* %arg5, f32* %arg6, i32 %arg7, i32 %5, f32 %4 ], [ ^b11 f32 %arg2, f32* %arg3, f32 %arg4, f32 %4 ];
^b11(f32 %arg, f32* %arg1, f32 %arg2, f32 %arg3):
    f32 %0 = fdiv f32 %arg, f32 %arg3;
    f32 %1 = fdiv f32 %0, f32 %arg2;
    f32 %2 = fsub f32 %arg2, f32 %1;
    i1 %3 = fcmp gt f32 %2, f32 1e-06;
    cbr i1 %3, [ ^while.body8 f32* %arg1, f32 %arg2, f32 %0 ], [ ^b12 f32* %arg1, f32 %arg2, f32 %0 ];
^while.body8(f32* %arg, f32 %arg1, f32 %arg2):
    f32 %0 = fdiv f32 %arg2, f32 %arg1;
    f32 %1 = fadd f32 %arg1, f32 %0;
    f32 %2 = fdiv f32 %1, f32 2;
    store f32* %arg with f32 %2;
    f32 %3 = fdiv f32 %arg2, f32 %2;
    f32 %4 = fsub f32 %2, f32 %3;
    i1 %5 = fcmp gt f32 %4, f32 1e-06;
    cbr i1 %5, [ ^while.body8 f32* %arg, f32 %2, f32 %arg2 ], [ ^b12 f32* %arg, f32 %2, f32 %arg2 ];
^b12(f32* %arg, f32 %arg1, f32 %arg2):
    f32 %0 = fdiv f32 %arg2, f32 %arg1;
    f32 %1 = fsub f32 %arg1, f32 %0;
    i1 %2 = fcmp lt f32 %1, f32 -1e-06;
    cbr i1 %2, [ ^while.body8 f32* %arg, f32 %arg1, f32 %arg2 ], [ ^b13 f32 %arg1 ];
^b13(f32 %arg):
    f32 %0 = fsub f32 %arg, f32 1;
    i1 %1 = fcmp le f32 %0, f32 1e-06;
    cbr i1 %1, [ ^indirect4 f32 %arg ], [ ^if.else ];
^indirect4(f32 %arg):
    f32 %0 = fsub f32 %arg, f32 1;
    i1 %1 = fcmp ge f32 %0, f32 -1e-06;
    cbr i1 %1, [ ^if.then ], [ ^if.else ];
^if.else():
    call (i32) -> void @putint(i32 0);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^if.then():
    call (i32) -> void @putint(i32 1);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
