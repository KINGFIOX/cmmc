internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoRecurse Entry } {
^entry:
    f32* %sum = alloc f32;
    f32* %sum1 = alloc f32;
    f32* %sum2 = alloc f32;
    f32* %sum3 = alloc f32;
    f32* %temp = alloc f32;
    [100000 * f32]* %Vectortm = alloc [100000 * f32];
    [100000 * f32]* %vectorB = alloc [100000 * f32];
    [100000 * f32]* %vectorA = alloc [100000 * f32];
    store f32* %temp with f32 1;
    call (i32) -> void @starttime(i32 62);
    ubr ^while.header;
^while.header:
    i32 %0 = phi [^while.body, i32 %0] [^entry, i32 100000];
    i32 %1 = phi [^while.body, i32 %5] [^entry, i32 0];
    f32 %2 = phi [^while.body, f32 %2] [^entry, f32 1];
    i1 %3 = scmp lt i32 %1, i32 %0;
    cbr i1 %3(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    f32* %4 = getelementptr &([100000 * f32]* %vectorA)[i64 0][i32 %1];
    store f32* %4 with f32 1;
    i32 %5 = add i32 %1, i32 1;
    ubr ^while.header;
^while.header1:
    i32 %6 = phi [^while.header, i32 %0] [^entry4, i32 %173];
    i32 %7 = phi [^while.header, i32 0] [^entry4, i32 %184];
    f32 %8 = phi [^while.header, f32 %2] [^entry4, f32 %175];
    i1 %9 = scmp lt i32 %7, i32 1000;
    cbr i1 %9(prob = 0.97), ^while.body1, ^b;
^while.body1:
    f32* %10 = getelementptr &([100000 * f32]* %vectorA)[i64 0][i64 0];
    f32* %11 = getelementptr &([100000 * f32]* %vectorB)[i64 0][i64 0];
    f32* %12 = getelementptr &([100000 * f32]* %Vectortm)[i64 0][i64 0];
    store f32* %sum2 with f32 0;
    ubr ^while.header2;
^b:
    call (i32) -> void @stoptime(i32 76);
    f32* %13 = getelementptr &([100000 * f32]* %vectorA)[i64 0][i64 0];
    f32* %14 = getelementptr &([100000 * f32]* %vectorB)[i64 0][i64 0];
    ubr ^while.header3;
^while.header2:
    i32 %15 = phi [^b1, i32 %42] [^while.body1, i32 %6];
    i32 %16 = phi [^b1, i32 %43] [^while.body1, i32 %7];
    f32 %17 = phi [^b1, f32 %74] [^while.body1, f32 %8];
    f32* %18 = phi [^b1, f32* %44] [^while.body1, f32* %10];
    f32* %19 = phi [^b1, f32* %45] [^while.body1, f32* %12];
    i32 %20 = phi [^b1, i32 %46] [^while.body1, i32 %6];
    i32 %21 = phi [^b1, i32 %76] [^while.body1, i32 0];
    i32 %22 = phi [^b1, i32 %48] [^while.body1, i32 0];
    f32 %23 = phi [^b1, f32 %75] [^while.body1, f32 0];
    f32* %24 = phi [^b1, f32* %50] [^while.body1, f32* %12];
    i32 %25 = phi [^b1, i32 %51] [^while.body1, i32 %6];
    f32* %26 = phi [^b1, f32* %52] [^while.body1, f32* %11];
    i1 %27 = scmp lt i32 %21, i32 %20;
    cbr i1 %27(prob = 0.97), ^while.header4, ^entry1;
^while.header3:
    f32 %28 = phi [^while.body2, f32 %28] [^b, f32 %8];
    f32 %29 = phi [^while.body2, f32 %40] [^b, f32 0];
    i32 %30 = phi [^while.body2, i32 %41] [^b, i32 0];
    i32 %31 = phi [^while.body2, i32 %31] [^b, i32 %6];
    f32* %32 = phi [^while.body2, f32* %32] [^b, f32* %14];
    f32* %33 = phi [^while.body2, f32* %33] [^b, f32* %13];
    i1 %34 = scmp lt i32 %30, i32 %31;
    cbr i1 %34(prob = 0.97), ^while.body2, ^while.header5;
^while.body2:
    f32* %35 = getelementptr &(f32* %33)[i32 %30];
    f32 %36 = load f32* %35;
    f32* %37 = getelementptr &(f32* %32)[i32 %30];
    f32 %38 = load f32* %37;
    f32 %39 = fmul f32 %36, f32 %38;
    f32 %40 = fadd f32 %29, f32 %39;
    i32 %41 = add i32 %30, i32 1;
    ubr ^while.header3;
^entry1:
    store f32* %sum3 with f32 0;
    ubr ^while.header6;
^while.header4:
    i32 %42 = phi [^while.header2, i32 %15] [^while.body3, i32 %42];
    i32 %43 = phi [^while.header2, i32 %16] [^while.body3, i32 %43];
    f32* %44 = phi [^while.header2, f32* %18] [^while.body3, f32* %44];
    f32* %45 = phi [^while.header2, f32* %19] [^while.body3, f32* %45];
    i32 %46 = phi [^while.header2, i32 %20] [^while.body3, i32 %46];
    i32 %47 = phi [^while.header2, i32 %21] [^while.body3, i32 %47];
    i32 %48 = phi [^while.header2, i32 %22] [^while.body3, i32 %64];
    f32 %49 = phi [^while.header2, f32 %23] [^while.body3, f32 %72];
    f32* %50 = phi [^while.header2, f32* %24] [^while.body3, f32* %50];
    i32 %51 = phi [^while.header2, i32 %25] [^while.body3, i32 %51];
    f32* %52 = phi [^while.header2, f32* %26] [^while.body3, f32* %52];
    i1 %53 = scmp lt i32 %48, i32 %46;
    cbr i1 %53(prob = 0.97), ^while.body3, ^b1;
^while.header5:
    f32 %54 = phi [^while.header3, f32 %28] [^while.body4, f32 %54];
    f32 %55 = phi [^while.header3, f32 0] [^while.body4, f32 %82];
    i32 %56 = phi [^while.header3, i32 0] [^while.body4, i32 %83];
    i32 %57 = phi [^while.header3, i32 %6] [^while.body4, i32 %57];
    f32* %58 = phi [^while.header3, f32* %14] [^while.body4, f32* %58];
    f32* %59 = phi [^while.header3, f32* %14] [^while.body4, f32* %59];
    i1 %60 = scmp lt i32 %56, i32 %57;
    cbr i1 %60(prob = 0.97), ^while.body4, ^b2;
^while.body3:
    f32* %61 = getelementptr &(f32* %44)[i32 %48];
    f32 %62 = load f32* %61;
    i32 %63 = add i32 %48, i32 %47;
    i32 %64 = add i32 %48, i32 1;
    i32 %65 = add i32 %64, i32 %47;
    i32 %66 = mul i32 %63, i32 %65;
    i32 %67 = sdiv i32 %66, i32 2;
    i32 %68 = add i32 %67, i32 1;
    i32 %69 = add i32 %68, i32 %47;
    f32 %70 = s2f i32 %69 to f32;
    f32 %71 = fdiv f32 %62, f32 %70;
    f32 %72 = fadd f32 %49, f32 %71;
    store f32* %sum2 with f32 %72;
    ubr ^while.header4;
^b1:
    f32* %73 = getelementptr &(f32* %45)[i32 %47];
    store f32* %73 with f32 %49;
    f32 %74 = load f32* %temp;
    f32 %75 = load f32* %sum2;
    i32 %76 = add i32 %47, i32 1;
    ubr ^while.header2;
^while.body4:
    f32* %77 = getelementptr &(f32* %59)[i32 %56];
    f32 %78 = load f32* %77;
    f32* %79 = getelementptr &(f32* %58)[i32 %56];
    f32 %80 = load f32* %79;
    f32 %81 = fmul f32 %78, f32 %80;
    f32 %82 = fadd f32 %55, f32 %81;
    i32 %83 = add i32 %56, i32 1;
    ubr ^while.header5;
^while.header6:
    i32 %84 = phi [^b3, i32 %95] [^entry1, i32 %15];
    i32 %85 = phi [^b3, i32 %96] [^entry1, i32 %16];
    f32 %86 = phi [^b3, f32 %122] [^entry1, f32 %17];
    f32* %87 = phi [^b3, f32* %97] [^entry1, f32* %24];
    f32* %88 = phi [^b3, f32* %98] [^entry1, f32* %26];
    i32 %89 = phi [^b3, i32 %99] [^entry1, i32 %25];
    i32 %90 = phi [^b3, i32 %124] [^entry1, i32 0];
    i32 %91 = phi [^b3, i32 %101] [^entry1, i32 0];
    f32 %92 = phi [^b3, f32 %123] [^entry1, f32 0];
    i1 %93 = scmp lt i32 %90, i32 %89;
    cbr i1 %93(prob = 0.97), ^while.header7, ^entry2;
^b2:
    f32 %94 = fdiv f32 %29, f32 %55;
    ubr ^while.header8;
^entry2:
    store f32* %sum with f32 0;
    ubr ^while.header9;
^while.header7:
    i32 %95 = phi [^while.header6, i32 %84] [^while.body5, i32 %95];
    i32 %96 = phi [^while.header6, i32 %85] [^while.body5, i32 %96];
    f32* %97 = phi [^while.header6, f32* %87] [^while.body5, f32* %97];
    f32* %98 = phi [^while.header6, f32* %88] [^while.body5, f32* %98];
    i32 %99 = phi [^while.header6, i32 %89] [^while.body5, i32 %99];
    i32 %100 = phi [^while.header6, i32 %90] [^while.body5, i32 %100];
    i32 %101 = phi [^while.header6, i32 %91] [^while.body5, i32 %112];
    f32 %102 = phi [^while.header6, f32 %92] [^while.body5, f32 %120];
    i1 %103 = scmp lt i32 %101, i32 %99;
    cbr i1 %103(prob = 0.97), ^while.body5, ^b3;
^while.header8:
    f32 %104 = phi [^while.body6, f32 %141] [^b2, f32 %54];
    f32 %105 = phi [^while.body6, f32 %105] [^b2, f32 %94];
    f32 %106 = fdiv f32 %105, f32 %104;
    f32 %107 = fsub f32 %104, f32 %106;
    i1 %108 = fcmp gt f32 %107, f32 1e-06;
    cbr i1 %108(prob = 0.5), ^b5, ^b4;
^while.body5:
    f32* %109 = getelementptr &(f32* %97)[i32 %101];
    f32 %110 = load f32* %109;
    i32 %111 = add i32 %101, i32 %100;
    i32 %112 = add i32 %101, i32 1;
    i32 %113 = add i32 %112, i32 %100;
    i32 %114 = mul i32 %111, i32 %113;
    i32 %115 = sdiv i32 %114, i32 2;
    i32 %116 = add i32 %115, i32 1;
    i32 %117 = add i32 %116, i32 %101;
    f32 %118 = s2f i32 %117 to f32;
    f32 %119 = fdiv f32 %110, f32 %118;
    f32 %120 = fadd f32 %102, f32 %119;
    store f32* %sum3 with f32 %120;
    ubr ^while.header7;
^b3:
    f32* %121 = getelementptr &(f32* %98)[i32 %100];
    store f32* %121 with f32 %102;
    f32 %122 = load f32* %temp;
    f32 %123 = load f32* %sum3;
    i32 %124 = add i32 %100, i32 1;
    ubr ^while.header6;
^while.header9:
    i32 %125 = phi [^b7, i32 %142] [^entry2, i32 %84];
    i32 %126 = phi [^b7, i32 %143] [^entry2, i32 %85];
    f32 %127 = phi [^b7, f32 %169] [^entry2, f32 %86];
    f32* %128 = phi [^b7, f32* %144] [^entry2, f32* %11];
    f32* %129 = phi [^b7, f32* %145] [^entry2, f32* %12];
    i32 %130 = phi [^b7, i32 %146] [^entry2, i32 %84];
    i32 %131 = phi [^b7, i32 %171] [^entry2, i32 0];
    i32 %132 = phi [^b7, i32 %148] [^entry2, i32 0];
    f32 %133 = phi [^b7, f32 %170] [^entry2, f32 0];
    f32* %134 = phi [^b7, f32* %150] [^entry2, f32* %12];
    i32 %135 = phi [^b7, i32 %151] [^entry2, i32 %84];
    f32* %136 = phi [^b7, f32* %152] [^entry2, f32* %10];
    i1 %137 = scmp lt i32 %131, i32 %130;
    cbr i1 %137(prob = 0.97), ^while.header10, ^entry3;
^b4:
    i1 %138 = fcmp lt f32 %107, f32 -1e-06;
    ubr ^b5;
^b5:
    i1 %139 = phi [^while.header8, i1 true] [^b4, i1 %138];
    cbr i1 %139(prob = 0.97), ^while.body6, ^b6;
^entry3:
    store f32* %sum1 with f32 0;
    ubr ^while.header11;
^while.body6:
    f32 %140 = fadd f32 %104, f32 %106;
    f32 %141 = fdiv f32 %140, f32 2;
    ubr ^while.header8;
^while.header10:
    i32 %142 = phi [^while.header9, i32 %125] [^while.body7, i32 %142];
    i32 %143 = phi [^while.header9, i32 %126] [^while.body7, i32 %143];
    f32* %144 = phi [^while.header9, f32* %128] [^while.body7, f32* %144];
    f32* %145 = phi [^while.header9, f32* %129] [^while.body7, f32* %145];
    i32 %146 = phi [^while.header9, i32 %130] [^while.body7, i32 %146];
    i32 %147 = phi [^while.header9, i32 %131] [^while.body7, i32 %147];
    i32 %148 = phi [^while.header9, i32 %132] [^while.body7, i32 %159];
    f32 %149 = phi [^while.header9, f32 %133] [^while.body7, f32 %167];
    f32* %150 = phi [^while.header9, f32* %134] [^while.body7, f32* %150];
    i32 %151 = phi [^while.header9, i32 %135] [^while.body7, i32 %151];
    f32* %152 = phi [^while.header9, f32* %136] [^while.body7, f32* %152];
    i1 %153 = scmp lt i32 %148, i32 %146;
    cbr i1 %153(prob = 0.97), ^while.body7, ^b7;
^b6:
    f32 %154 = fsub f32 %104, f32 1;
    i1 %155 = fcmp le f32 %154, f32 1e-06;
    cbr i1 %155(prob = 0.5), ^b8, ^b9;
^while.body7:
    f32* %156 = getelementptr &(f32* %144)[i32 %148];
    f32 %157 = load f32* %156;
    i32 %158 = add i32 %148, i32 %147;
    i32 %159 = add i32 %148, i32 1;
    i32 %160 = add i32 %159, i32 %147;
    i32 %161 = mul i32 %158, i32 %160;
    i32 %162 = sdiv i32 %161, i32 2;
    i32 %163 = add i32 %162, i32 1;
    i32 %164 = add i32 %163, i32 %147;
    f32 %165 = s2f i32 %164 to f32;
    f32 %166 = fdiv f32 %157, f32 %165;
    f32 %167 = fadd f32 %149, f32 %166;
    store f32* %sum with f32 %167;
    ubr ^while.header10;
^b7:
    f32* %168 = getelementptr &(f32* %145)[i32 %147];
    store f32* %168 with f32 %149;
    f32 %169 = load f32* %temp;
    f32 %170 = load f32* %sum;
    i32 %171 = add i32 %147, i32 1;
    ubr ^while.header9;
^b8:
    i1 %172 = fcmp ge f32 %154, f32 -1e-06;
    ubr ^b9;
^while.header11:
    i32 %173 = phi [^b10, i32 %185] [^entry3, i32 %125];
    i32 %174 = phi [^b10, i32 %186] [^entry3, i32 %126];
    f32 %175 = phi [^b10, f32 %207] [^entry3, f32 %127];
    f32* %176 = phi [^b10, f32* %187] [^entry3, f32* %134];
    f32* %177 = phi [^b10, f32* %188] [^entry3, f32* %136];
    i32 %178 = phi [^b10, i32 %189] [^entry3, i32 %135];
    i32 %179 = phi [^b10, i32 %209] [^entry3, i32 0];
    i32 %180 = phi [^b10, i32 %191] [^entry3, i32 0];
    f32 %181 = phi [^b10, f32 %208] [^entry3, f32 0];
    i1 %182 = scmp lt i32 %179, i32 %178;
    cbr i1 %182(prob = 0.97), ^while.header12, ^entry4;
^b9:
    i1 %183 = phi [^b6, i1 false] [^b8, i1 %172];
    cbr i1 %183(prob = 0.5), ^if.then, ^if.else;
^entry4:
    i32 %184 = add i32 %174, i32 1;
    ubr ^while.header1;
^while.header12:
    i32 %185 = phi [^while.header11, i32 %173] [^while.body8, i32 %185];
    i32 %186 = phi [^while.header11, i32 %174] [^while.body8, i32 %186];
    f32* %187 = phi [^while.header11, f32* %176] [^while.body8, f32* %187];
    f32* %188 = phi [^while.header11, f32* %177] [^while.body8, f32* %188];
    i32 %189 = phi [^while.header11, i32 %178] [^while.body8, i32 %189];
    i32 %190 = phi [^while.header11, i32 %179] [^while.body8, i32 %190];
    i32 %191 = phi [^while.header11, i32 %180] [^while.body8, i32 %197];
    f32 %192 = phi [^while.header11, f32 %181] [^while.body8, f32 %205];
    i1 %193 = scmp lt i32 %191, i32 %189;
    cbr i1 %193(prob = 0.97), ^while.body8, ^b10;
^if.then:
    call (i32) -> void @putint(i32 1);
    ubr ^b11;
^if.else:
    call (i32) -> void @putint(i32 0);
    ubr ^b11;
^while.body8:
    f32* %194 = getelementptr &(f32* %187)[i32 %191];
    f32 %195 = load f32* %194;
    i32 %196 = add i32 %191, i32 %190;
    i32 %197 = add i32 %191, i32 1;
    i32 %198 = add i32 %197, i32 %190;
    i32 %199 = mul i32 %196, i32 %198;
    i32 %200 = sdiv i32 %199, i32 2;
    i32 %201 = add i32 %200, i32 1;
    i32 %202 = add i32 %201, i32 %191;
    f32 %203 = s2f i32 %202 to f32;
    f32 %204 = fdiv f32 %195, f32 %203;
    f32 %205 = fadd f32 %192, f32 %204;
    store f32* %sum1 with f32 %205;
    ubr ^while.header12;
^b10:
    f32* %206 = getelementptr &(f32* %188)[i32 %190];
    store f32* %206 with f32 %192;
    f32 %207 = load f32* %temp;
    f32 %208 = load f32* %sum1;
    i32 %209 = add i32 %190, i32 1;
    ubr ^while.header11;
^b11:
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
