internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @mod { ReadOnly } = 998244353;
internal i32* @d;
internal func @multiply(i32 %a, i32 %b) -> i32 {
^entry:
    i32* %cur = alloc i32;
    i32* %b1 = alloc i32;
    i32* %a1 = alloc i32;
    store i32* %a1 with i32 %a;
    store i32* %b1 with i32 %b;
    i32 %0 = load i32* %b1;
    i1 %1 = scmp eq i32 %0, i32 0;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^b2;
^b2:
    i32 %4 = load i32* %b1;
    i1 %5 = scmp eq i32 %4, i32 1;
    i32 %6 = zext i1 %5 to i32;
    i1 %7 = scmp neq i32 %6, i32 0;
    cbr i1 %7(prob = 0.5), ^if.then1, ^b3;
^if.then:
    ret i32 0;
^b3:
    i32 %8 = load i32* %a1;
    i32 %9 = load i32* %b1;
    i32 %10 = sdiv i32 %9, i32 2;
    i32 %11 = call (i32, i32) -> i32 @multiply(i32 %8, i32 %10);
    store i32* %cur with i32 %11;
    i32 %12 = load i32* %cur;
    i32 %13 = load i32* %cur;
    i32 %14 = add i32 %12, i32 %13;
    i32 %15 = srem i32 %14, i32 998244353;
    store i32* %cur with i32 %15;
    i32 %16 = load i32* %b1;
    i32 %17 = srem i32 %16, i32 2;
    i1 %18 = scmp eq i32 %17, i32 1;
    i32 %19 = zext i1 %18 to i32;
    i1 %20 = scmp neq i32 %19, i32 0;
    cbr i1 %20(prob = 0.5), ^if.then2, ^if.else;
^if.then1:
    i32 %21 = load i32* %a1;
    i32 %22 = srem i32 %21, i32 998244353;
    ret i32 %22;
^if.then2:
    i32 %23 = load i32* %cur;
    i32 %24 = load i32* %a1;
    i32 %25 = add i32 %23, i32 %24;
    i32 %26 = srem i32 %25, i32 998244353;
    ret i32 %26;
^if.else:
    i32 %27 = load i32* %cur;
    ret i32 %27;
^b4:
    unreachable;
}
internal func @power(i32 %a, i32 %b) -> i32 {
^entry:
    i32* %cur = alloc i32;
    i32* %b1 = alloc i32;
    i32* %a1 = alloc i32;
    store i32* %a1 with i32 %a;
    store i32* %b1 with i32 %b;
    i32 %0 = load i32* %b1;
    i1 %1 = scmp eq i32 %0, i32 0;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^b2;
^b2:
    i32 %4 = load i32* %a1;
    i32 %5 = load i32* %b1;
    i32 %6 = sdiv i32 %5, i32 2;
    i32 %7 = call (i32, i32) -> i32 @power(i32 %4, i32 %6);
    store i32* %cur with i32 %7;
    i32 %8 = load i32* %cur;
    i32 %9 = load i32* %cur;
    i32 %10 = call (i32, i32) -> i32 @multiply(i32 %8, i32 %9);
    store i32* %cur with i32 %10;
    i32 %11 = load i32* %b1;
    i32 %12 = srem i32 %11, i32 2;
    i1 %13 = scmp eq i32 %12, i32 1;
    i32 %14 = zext i1 %13 to i32;
    i1 %15 = scmp neq i32 %14, i32 0;
    cbr i1 %15(prob = 0.5), ^if.then1, ^if.else;
^if.then:
    ret i32 1;
^if.then1:
    i32 %16 = load i32* %cur;
    i32 %17 = load i32* %a1;
    i32 %18 = call (i32, i32) -> i32 @multiply(i32 %16, i32 %17);
    ret i32 %18;
^if.else:
    i32 %19 = load i32* %cur;
    ret i32 %19;
^b3:
    unreachable;
}
internal i32* @maxlen { ReadOnly } = 2097152;
internal [2097152 * i32]* @temp;
internal [2097152 * i32]* @a;
internal [2097152 * i32]* @b;
internal [2097152 * i32]* @c;
internal func @memmove(i32* %dst, i32 %dst_pos, i32* %src, i32 %len) -> i32 {
^entry:
    i32* %i = alloc i32;
    i32* %len1 = alloc i32;
    i32** %src1 = alloc i32*;
    i32* %dst_pos1 = alloc i32;
    i32** %dst1 = alloc i32*;
    store i32** %dst1 with i32* %dst;
    store i32* %dst_pos1 with i32 %dst_pos;
    store i32** %src1 with i32* %src;
    store i32* %len1 with i32 %len;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i32 %1 = load i32* %len1;
    i1 %2 = scmp lt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %5 = load i32* %dst_pos1;
    i32 %6 = load i32* %i;
    i32 %7 = add i32 %5, i32 %6;
    i64 %8 = sext i32 %7 to i64;
    i32* %9 = load i32** %dst1;
    i32* %10 = getelementptr &(i32* %9)[i64 %8];
    i32 %11 = load i32* %i;
    i64 %12 = sext i32 %11 to i64;
    i32* %13 = load i32** %src1;
    i32* %14 = getelementptr &(i32* %13)[i64 %12];
    i32 %15 = load i32* %14;
    store i32* %10 with i32 %15;
    i32 %16 = load i32* %i;
    i32 %17 = add i32 %16, i32 1;
    store i32* %i with i32 %17;
    ubr ^while.header;
^b:
    i32 %18 = load i32* %i;
    ret i32 %18;
}
internal func @fft(i32* %arr, i32 %begin_pos, i32 %n, i32 %w) -> i32 {
^entry:
    i32* %y = alloc i32;
    i32* %x = alloc i32;
    i32* %wn = alloc i32;
    i32* %i = alloc i32;
    i32* %w1 = alloc i32;
    i32* %n1 = alloc i32;
    i32* %begin_pos1 = alloc i32;
    i32** %arr1 = alloc i32*;
    store i32** %arr1 with i32* %arr;
    store i32* %begin_pos1 with i32 %begin_pos;
    store i32* %n1 with i32 %n;
    store i32* %w1 with i32 %w;
    i32 %0 = load i32* %n1;
    i1 %1 = scmp eq i32 %0, i32 1;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^b;
^b:
    store i32* %i with i32 0;
    ubr ^while.header;
^if.then:
    ret i32 1;
^while.header:
    i32 %4 = load i32* %i;
    i32 %5 = load i32* %n1;
    i1 %6 = scmp lt i32 %4, i32 %5;
    i32 %7 = zext i1 %6 to i32;
    i1 %8 = scmp neq i32 %7, i32 0;
    cbr i1 %8(prob = 0.97), ^while.body, ^b1;
^b1:
    i32* %9 = load i32** %arr1;
    i32 %10 = load i32* %begin_pos1;
    i32* %11 = getelementptr &([2097152 * i32]* @temp)[i64 0][i64 0];
    i32 %12 = load i32* %n1;
    i32 %13 = call (i32*, i32, i32*, i32) -> i32 @memmove(i32* %9, i32 %10, i32* %11, i32 %12);
    i32* %14 = load i32** %arr1;
    i32 %15 = load i32* %begin_pos1;
    i32 %16 = load i32* %n1;
    i32 %17 = sdiv i32 %16, i32 2;
    i32 %18 = load i32* %w1;
    i32 %19 = load i32* %w1;
    i32 %20 = call (i32, i32) -> i32 @multiply(i32 %18, i32 %19);
    i32 %21 = call (i32*, i32, i32, i32) -> i32 @fft(i32* %14, i32 %15, i32 %17, i32 %20);
    i32* %22 = load i32** %arr1;
    i32 %23 = load i32* %begin_pos1;
    i32 %24 = load i32* %n1;
    i32 %25 = sdiv i32 %24, i32 2;
    i32 %26 = add i32 %23, i32 %25;
    i32 %27 = load i32* %n1;
    i32 %28 = sdiv i32 %27, i32 2;
    i32 %29 = load i32* %w1;
    i32 %30 = load i32* %w1;
    i32 %31 = call (i32, i32) -> i32 @multiply(i32 %29, i32 %30);
    i32 %32 = call (i32*, i32, i32, i32) -> i32 @fft(i32* %22, i32 %26, i32 %28, i32 %31);
    store i32* %i with i32 0;
    store i32* %wn with i32 1;
    ubr ^while.header1;
^while.body:
    i32 %33 = load i32* %i;
    i32 %34 = srem i32 %33, i32 2;
    i1 %35 = scmp eq i32 %34, i32 0;
    i32 %36 = zext i1 %35 to i32;
    i1 %37 = scmp neq i32 %36, i32 0;
    cbr i1 %37(prob = 0.5), ^if.then1, ^if.else;
^if.then1:
    i32 %38 = load i32* %i;
    i32 %39 = sdiv i32 %38, i32 2;
    i64 %40 = sext i32 %39 to i64;
    i32* %41 = getelementptr &([2097152 * i32]* @temp)[i64 0][i64 %40];
    i32 %42 = load i32* %i;
    i32 %43 = load i32* %begin_pos1;
    i32 %44 = add i32 %42, i32 %43;
    i64 %45 = sext i32 %44 to i64;
    i32* %46 = load i32** %arr1;
    i32* %47 = getelementptr &(i32* %46)[i64 %45];
    i32 %48 = load i32* %47;
    store i32* %41 with i32 %48;
    ubr ^b2;
^if.else:
    i32 %49 = load i32* %n1;
    i32 %50 = sdiv i32 %49, i32 2;
    i32 %51 = load i32* %i;
    i32 %52 = sdiv i32 %51, i32 2;
    i32 %53 = add i32 %50, i32 %52;
    i64 %54 = sext i32 %53 to i64;
    i32* %55 = getelementptr &([2097152 * i32]* @temp)[i64 0][i64 %54];
    i32 %56 = load i32* %i;
    i32 %57 = load i32* %begin_pos1;
    i32 %58 = add i32 %56, i32 %57;
    i64 %59 = sext i32 %58 to i64;
    i32* %60 = load i32** %arr1;
    i32* %61 = getelementptr &(i32* %60)[i64 %59];
    i32 %62 = load i32* %61;
    store i32* %55 with i32 %62;
    ubr ^b2;
^while.header1:
    i32 %63 = load i32* %i;
    i32 %64 = load i32* %n1;
    i32 %65 = sdiv i32 %64, i32 2;
    i1 %66 = scmp lt i32 %63, i32 %65;
    i32 %67 = zext i1 %66 to i32;
    i1 %68 = scmp neq i32 %67, i32 0;
    cbr i1 %68(prob = 0.97), ^while.body1, ^b3;
^b2:
    i32 %69 = load i32* %i;
    i32 %70 = add i32 %69, i32 1;
    store i32* %i with i32 %70;
    ubr ^while.header;
^while.body1:
    i32 %71 = load i32* %begin_pos1;
    i32 %72 = load i32* %i;
    i32 %73 = add i32 %71, i32 %72;
    i64 %74 = sext i32 %73 to i64;
    i32* %75 = load i32** %arr1;
    i32* %76 = getelementptr &(i32* %75)[i64 %74];
    i32 %77 = load i32* %76;
    store i32* %x with i32 %77;
    i32 %78 = load i32* %begin_pos1;
    i32 %79 = load i32* %i;
    i32 %80 = add i32 %78, i32 %79;
    i32 %81 = load i32* %n1;
    i32 %82 = sdiv i32 %81, i32 2;
    i32 %83 = add i32 %80, i32 %82;
    i64 %84 = sext i32 %83 to i64;
    i32* %85 = load i32** %arr1;
    i32* %86 = getelementptr &(i32* %85)[i64 %84];
    i32 %87 = load i32* %86;
    store i32* %y with i32 %87;
    i32 %88 = load i32* %begin_pos1;
    i32 %89 = load i32* %i;
    i32 %90 = add i32 %88, i32 %89;
    i64 %91 = sext i32 %90 to i64;
    i32* %92 = load i32** %arr1;
    i32* %93 = getelementptr &(i32* %92)[i64 %91];
    i32 %94 = load i32* %x;
    i32 %95 = load i32* %wn;
    i32 %96 = load i32* %y;
    i32 %97 = call (i32, i32) -> i32 @multiply(i32 %95, i32 %96);
    i32 %98 = add i32 %94, i32 %97;
    i32 %99 = srem i32 %98, i32 998244353;
    store i32* %93 with i32 %99;
    i32 %100 = load i32* %begin_pos1;
    i32 %101 = load i32* %i;
    i32 %102 = add i32 %100, i32 %101;
    i32 %103 = load i32* %n1;
    i32 %104 = sdiv i32 %103, i32 2;
    i32 %105 = add i32 %102, i32 %104;
    i64 %106 = sext i32 %105 to i64;
    i32* %107 = load i32** %arr1;
    i32* %108 = getelementptr &(i32* %107)[i64 %106];
    i32 %109 = load i32* %x;
    i32 %110 = load i32* %wn;
    i32 %111 = load i32* %y;
    i32 %112 = call (i32, i32) -> i32 @multiply(i32 %110, i32 %111);
    i32 %113 = sub i32 %109, i32 %112;
    i32 %114 = add i32 %113, i32 998244353;
    i32 %115 = srem i32 %114, i32 998244353;
    store i32* %108 with i32 %115;
    i32 %116 = load i32* %wn;
    i32 %117 = load i32* %w1;
    i32 %118 = call (i32, i32) -> i32 @multiply(i32 %116, i32 %117);
    store i32* %wn with i32 %118;
    i32 %119 = load i32* %i;
    i32 %120 = add i32 %119, i32 1;
    store i32* %i with i32 %120;
    ubr ^while.header1;
^b3:
    ret i32 0;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %i = alloc i32;
    i32* %m = alloc i32;
    i32* %n = alloc i32;
    i32* %0 = getelementptr &([2097152 * i32]* @a)[i64 0][i64 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    store i32* %n with i32 %1;
    i32* %2 = getelementptr &([2097152 * i32]* @b)[i64 0][i64 0];
    i32 %3 = call (i32*) -> i32 @getarray(i32* %2);
    store i32* %m with i32 %3;
    call (i32) -> void @starttime(i32 60);
    store i32* @d with i32 1;
    ubr ^while.header;
^while.header:
    i32 %4 = load i32* @d;
    i32 %5 = load i32* %n;
    i32 %6 = load i32* %m;
    i32 %7 = add i32 %5, i32 %6;
    i32 %8 = sub i32 %7, i32 1;
    i1 %9 = scmp lt i32 %4, i32 %8;
    i32 %10 = zext i1 %9 to i32;
    i1 %11 = scmp neq i32 %10, i32 0;
    cbr i1 %11(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %12 = load i32* @d;
    i32 %13 = mul i32 %12, i32 2;
    store i32* @d with i32 %13;
    ubr ^while.header;
^b:
    i32* %14 = getelementptr &([2097152 * i32]* @a)[i64 0][i64 0];
    i32 %15 = load i32* @d;
    i32 %16 = load i32* @d;
    i32 %17 = sdiv i32 998244352, i32 %16;
    i32 %18 = call (i32, i32) -> i32 @power(i32 3, i32 %17);
    i32 %19 = call (i32*, i32, i32, i32) -> i32 @fft(i32* %14, i32 0, i32 %15, i32 %18);
    i32* %20 = getelementptr &([2097152 * i32]* @b)[i64 0][i64 0];
    i32 %21 = load i32* @d;
    i32 %22 = load i32* @d;
    i32 %23 = sdiv i32 998244352, i32 %22;
    i32 %24 = call (i32, i32) -> i32 @power(i32 3, i32 %23);
    i32 %25 = call (i32*, i32, i32, i32) -> i32 @fft(i32* %20, i32 0, i32 %21, i32 %24);
    store i32* %i with i32 0;
    ubr ^while.header1;
^while.header1:
    i32 %26 = load i32* %i;
    i32 %27 = load i32* @d;
    i1 %28 = scmp lt i32 %26, i32 %27;
    i32 %29 = zext i1 %28 to i32;
    i1 %30 = scmp neq i32 %29, i32 0;
    cbr i1 %30(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %31 = load i32* %i;
    i64 %32 = sext i32 %31 to i64;
    i32* %33 = getelementptr &([2097152 * i32]* @a)[i64 0][i64 %32];
    i32 %34 = load i32* %i;
    i64 %35 = sext i32 %34 to i64;
    i32* %36 = getelementptr &([2097152 * i32]* @a)[i64 0][i64 %35];
    i32 %37 = load i32* %36;
    i32 %38 = load i32* %i;
    i64 %39 = sext i32 %38 to i64;
    i32* %40 = getelementptr &([2097152 * i32]* @b)[i64 0][i64 %39];
    i32 %41 = load i32* %40;
    i32 %42 = call (i32, i32) -> i32 @multiply(i32 %37, i32 %41);
    store i32* %33 with i32 %42;
    i32 %43 = load i32* %i;
    i32 %44 = add i32 %43, i32 1;
    store i32* %i with i32 %44;
    ubr ^while.header1;
^b1:
    i32* %45 = getelementptr &([2097152 * i32]* @a)[i64 0][i64 0];
    i32 %46 = load i32* @d;
    i32 %47 = load i32* @d;
    i32 %48 = sdiv i32 998244352, i32 %47;
    i32 %49 = sub i32 998244352, i32 %48;
    i32 %50 = call (i32, i32) -> i32 @power(i32 3, i32 %49);
    i32 %51 = call (i32*, i32, i32, i32) -> i32 @fft(i32* %45, i32 0, i32 %46, i32 %50);
    store i32* %i with i32 0;
    ubr ^while.header2;
^while.header2:
    i32 %52 = load i32* %i;
    i32 %53 = load i32* @d;
    i1 %54 = scmp lt i32 %52, i32 %53;
    i32 %55 = zext i1 %54 to i32;
    i1 %56 = scmp neq i32 %55, i32 0;
    cbr i1 %56(prob = 0.97), ^while.body2, ^b2;
^while.body2:
    i32 %57 = load i32* %i;
    i64 %58 = sext i32 %57 to i64;
    i32* %59 = getelementptr &([2097152 * i32]* @a)[i64 0][i64 %58];
    i32 %60 = load i32* %i;
    i64 %61 = sext i32 %60 to i64;
    i32* %62 = getelementptr &([2097152 * i32]* @a)[i64 0][i64 %61];
    i32 %63 = load i32* %62;
    i32 %64 = load i32* @d;
    i32 %65 = call (i32, i32) -> i32 @power(i32 %64, i32 998244351);
    i32 %66 = call (i32, i32) -> i32 @multiply(i32 %63, i32 %65);
    store i32* %59 with i32 %66;
    i32 %67 = load i32* %i;
    i32 %68 = add i32 %67, i32 1;
    store i32* %i with i32 %68;
    ubr ^while.header2;
^b2:
    call (i32) -> void @stoptime(i32 79);
    i32 %69 = load i32* %n;
    i32 %70 = load i32* %m;
    i32 %71 = add i32 %69, i32 %70;
    i32 %72 = sub i32 %71, i32 1;
    i32* %73 = getelementptr &([2097152 * i32]* @a)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %72, i32* %73);
    ret i32 0;
}
