internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @median(i32* %arr, i32 %begin, i32 %end, i32 %pos, i32* %0) -> i32 {
^entry:
    i32* %xx = alloc i32;
    i32* %r = alloc i32;
    i32* %l = alloc i32;
    i32* %pivot = alloc i32;
    i32* %pos1 = alloc i32;
    i32* %end1 = alloc i32;
    i32* %begin1 = alloc i32;
    store i32* %begin1 with i32 %begin;
    store i32* %end1 with i32 %end;
    store i32* %pos1 with i32 %pos;
    i32* %1 = getelementptr &(i32* %arr)[i32 %begin];
    i32 %2 = load i32* %1;
    store i32* %pivot with i32 %2;
    store i32* %l with i32 %begin;
    i32 %3 = add i32 %end, i32 1;
    store i32* %r with i32 %3;
    store i32* %xx with i32 0;
    ubr ^while.header;
^while.header:
    i32* %4 = phi [^b7, i32* %66] [^b, i32* %4] [^entry, i32* %arr];
    i32 %5 = phi [^b7, i32 %67] [^b, i32 %5] [^entry, i32 %begin];
    i32 %6 = phi [^b7, i32 %68] [^b, i32 %6] [^entry, i32 %2];
    i32 %7 = phi [^b7, i32 %69] [^b, i32 %7] [^entry, i32 %begin];
    i32 %8 = phi [^b7, i32 %70] [^b, i32 %13] [^entry, i32 %3];
    i32 %9 = phi [^b7, i32 %71] [^b, i32 %24] [^entry, i32 0];
    i32 %10 = phi [^b7, i32 %70] [^b, i32 %13] [^entry, i32 %3];
    i32 %11 = phi [^b7, i32 %69] [^b, i32 %7] [^entry, i32 %begin];
    i1 %12 = scmp lt i32 %11, i32 %10;
    cbr i1 %12(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i32 %13 = add i32 %8, i32 -1;
    store i32* %r with i32 %13;
    i32* %14 = getelementptr &(i32* %4)[i32 %13];
    i32 %15 = load i32* %14;
    i1 %16 = scmp lt i32 %15, i32 %6;
    cbr i1 %16(prob = 0.5), ^while.header1, ^b;
^while.header1:
    i32* %17 = phi [^b2, i32* %17] [^while.body, i32* %4] [^while.header, i32* %4];
    i32 %18 = phi [^b2, i32 %18] [^while.body, i32 %5] [^while.header, i32 %5];
    i32 %19 = phi [^b2, i32 %19] [^while.body, i32 %6] [^while.header, i32 %6];
    i32 %20 = phi [^b2, i32 %25] [^while.body, i32 %7] [^while.header, i32 %7];
    i32 %21 = phi [^b2, i32 %21] [^while.body, i32 %13] [^while.header, i32 %8];
    i32 %22 = phi [^b2, i32 %32] [^while.body, i32 %9] [^while.header, i32 %9];
    i1 %23 = scmp lt i32 %20, i32 %21;
    cbr i1 %23(prob = 0.97), ^while.body1, ^b1;
^b:
    i32 %24 = add i32 %9, i32 1;
    store i32* %xx with i32 %24;
    ubr ^while.header;
^while.body1:
    i32 %25 = add i32 %20, i32 1;
    store i32* %l with i32 %25;
    i32* %26 = getelementptr &(i32* %17)[i32 %25];
    i32 %27 = load i32* %26;
    i1 %28 = scmp ge i32 %27, i32 %19;
    cbr i1 %28(prob = 0.5), ^b1, ^b2;
^b1:
    i32 %29 = phi [^while.body1, i32 %25] [^while.header1, i32 %20];
    i32 %30 = phi [^while.body1, i32 %25] [^while.header1, i32 %20];
    i1 %31 = scmp eq i32 %30, i32 %21;
    cbr i1 %31(prob = 0.5), ^b3, ^if.else;
^b2:
    i32 %32 = add i32 %22, i32 -1;
    store i32* %xx with i32 %32;
    ubr ^while.header1;
^b3:
    i32* %33 = getelementptr &(i32* %17)[i32 %18];
    store i32* %33 with i32 %19;
    i32 %34 = load i32* %begin1;
    i32 %35 = load i32* %l;
    i32* %36 = getelementptr &(i32* %17)[i32 %34];
    i32 %37 = load i32* %36;
    i32* %38 = getelementptr &(i32* %17)[i32 %35];
    i32 %39 = load i32* %38;
    store i32* %36 with i32 %39;
    store i32* %38 with i32 %37;
    i32 %40 = load i32* %begin1;
    i32 %41 = load i32* %end1;
    i32 %42 = load i32* %pos1;
    i32 %43 = load i32* %l;
    i32 %44 = load i32* %xx;
    ubr ^while.header2;
^if.else:
    i32* %45 = getelementptr &(i32* %17)[i32 %29];
    i32 %46 = load i32* %45;
    i32* %47 = getelementptr &(i32* %17)[i32 %21];
    i32 %48 = load i32* %47;
    store i32* %45 with i32 %48;
    store i32* %47 with i32 %46;
    i32 %49 = load i32* %begin1;
    i32 %50 = load i32* %pivot;
    i32 %51 = load i32* %l;
    i32 %52 = load i32* %r;
    i32 %53 = load i32* %xx;
    ubr ^while.header3;
^while.header2:
    i32* %54 = phi [^while.body2, i32* %54] [^b3, i32* %17];
    i32 %55 = phi [^while.body2, i32 %55] [^b3, i32 %40];
    i32 %56 = phi [^while.body2, i32 %56] [^b3, i32 %41];
    i32 %57 = phi [^while.body2, i32 %57] [^b3, i32 %42];
    i32 %58 = phi [^while.body2, i32 %58] [^b3, i32 %43];
    i32 %59 = phi [^while.body2, i32 %59] [^b3, i32 %44];
    i32 %60 = phi [^while.body2, i32 %60] [^b3, i32 %34];
    i32 %61 = phi [^while.body2, i32 %61] [^b3, i32 %35];
    i32 %62 = phi [^while.body2, i32 %82] [^b3, i32 0];
    i32 %63 = phi [^b3, i32 %34] [^while.body2, i32 %60];
    i32 %64 = phi [^b3, i32 0] [^while.body2, i32 %82];
    i1 %65 = scmp lt i32 %64, i32 %63;
    cbr i1 %65(prob = 0.5), ^b4, ^b6;
^while.header3:
    i32* %66 = phi [^while.body3, i32* %66] [^if.else, i32* %17];
    i32 %67 = phi [^while.body3, i32 %67] [^if.else, i32 %49];
    i32 %68 = phi [^while.body3, i32 %68] [^if.else, i32 %50];
    i32 %69 = phi [^while.body3, i32 %69] [^if.else, i32 %51];
    i32 %70 = phi [^while.body3, i32 %70] [^if.else, i32 %52];
    i32 %71 = phi [^while.body3, i32 %71] [^if.else, i32 %53];
    i32 %72 = phi [^while.body3, i32 %72] [^if.else, i32 %29];
    i32 %73 = phi [^while.body3, i32 %73] [^if.else, i32 %21];
    i32 %74 = phi [^while.body3, i32 %83] [^if.else, i32 0];
    i32 %75 = phi [^if.else, i32 %29] [^while.body3, i32 %72];
    i32 %76 = phi [^if.else, i32 0] [^while.body3, i32 %83];
    i1 %77 = scmp lt i32 %76, i32 %75;
    cbr i1 %77(prob = 0.5), ^b5, ^b7;
^b4:
    i1 %78 = scmp lt i32 %62, i32 %61;
    ubr ^b6;
^b5:
    i1 %79 = scmp lt i32 %74, i32 %73;
    ubr ^b7;
^b6:
    i1 %80 = phi [^while.header2, i1 false] [^b4, i1 %78];
    cbr i1 %80(prob = 0.97), ^while.body2, ^entry1;
^b7:
    i1 %81 = phi [^while.header3, i1 false] [^b5, i1 %79];
    cbr i1 %81(prob = 0.97), ^while.body3, ^while.header;
^while.body2:
    i32 %82 = add i32 %62, i32 1;
    ubr ^while.header2;
^while.body3:
    i32 %83 = add i32 %74, i32 1;
    ubr ^while.header3;
^entry1:
    i1 %84 = scmp gt i32 %58, i32 %57;
    cbr i1 %84(prob = 0.5), ^if.then, ^b8;
^b8:
    i1 %85 = scmp lt i32 %58, i32 %57;
    cbr i1 %85(prob = 0.5), ^if.then1, ^b9;
^if.then:
    i32 %86 = call (i32*, i32, i32, i32, i32*) -> i32 @median(i32* %54, i32 %55, i32 %58, i32 %57, i32* %0);
    ret i32 %86;
^if.then1:
    i32 %87 = add i32 %58, i32 1;
    i32 %88 = call (i32*, i32, i32, i32, i32*) -> i32 @median(i32* %54, i32 %87, i32 %56, i32 %57, i32* %0);
    ret i32 %88;
^b9:
    ret i32 %59;
}
internal [10000000 * i32]* @a;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %n = alloc i32;
    i32* %0 = getelementptr &([10000000 * i32]* @a)[i64 0][i64 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    store i32* %n with i32 %1;
    call (i32) -> void @starttime(i32 59);
    i32 %2 = add i32 %1, i32 -1;
    i32 %3 = sdiv i32 %1, i32 2;
    i32 %4 = call (i32*, i32, i32, i32, i32*) -> i32 @median(i32* %0, i32 0, i32 %2, i32 %3, i32* %n);
    i32 %5 = load i32* %n;
    call (i32) -> void @stoptime(i32 61);
    call (i32, i32*) -> void @putarray(i32 %5, i32* %0);
    i32 %6 = sdiv i32 %5, i32 2;
    i32* %7 = getelementptr &([10000000 * i32]* @a)[i64 0][i32 %6];
    i32 %8 = load i32* %7;
    i32 %9 = srem i32 %8, i32 256;
    ret i32 %9;
}
