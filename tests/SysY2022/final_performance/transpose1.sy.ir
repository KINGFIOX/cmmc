internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [20000000 * i32]* @matrix;
internal [100000 * i32]* @a;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %rowsize = alloc i32;
    i32* %colsize = alloc i32;
    i32* %i = alloc i32;
    i32* %j = alloc i32;
    i32* %i1 = alloc i32;
    i32* %len = alloc i32;
    i32* %n = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %n with i32 %0;
    i32* %1 = getelementptr &([100000 * i32]* @a)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    i32 %3 = load i32* %n;
    store i32* %len with i32 %2;
    call (i32) -> void @starttime(i32 28);
    i32* %4 = getelementptr &([20000000 * i32]* @matrix)[i64 0][i64 0];
    ubr ^while.header;
^while.header:
    i32 %5 = phi [^while.body, i32 %8] [^entry, i32 0];
    i1 %6 = scmp lt i32 %5, i32 %3;
    cbr i1 %6(prob = 0.97), ^while.body, ^b;
^while.body:
    i32* %7 = getelementptr &([20000000 * i32]* @matrix)[i64 0][i32 %5];
    store i32* %7 with i32 %5;
    i32 %8 = add i32 %5, i32 1;
    ubr ^while.header;
^b:
    store i32* %i1 with i32 0;
    ubr ^while.header1;
^while.header1:
    i32 %9 = phi [^while.body4, i32 %25] [^b, i32 %3];
    i32 %10 = phi [^while.body4, i32 %26] [^b, i32 %2];
    i32 %11 = phi [^while.body4, i32 %33] [^b, i32 0];
    i1 %12 = scmp lt i32 %11, i32 %10;
    cbr i1 %12(prob = 0.97), ^while.body1, ^while.header2;
^while.body1:
    i32* %13 = getelementptr &([100000 * i32]* @a)[i64 0][i32 %11];
    i32 %14 = load i32* %13;
    store i32* %rowsize with i32 %14;
    i32 %15 = sdiv i32 %9, i32 %14;
    store i32* %colsize with i32 %15;
    store i32* %i with i32 0;
    ubr ^while.header3;
^while.header2:
    i32 %16 = phi [^while.header1, i32 0] [^while.body2, i32 %24];
    i32 %17 = phi [^while.header1, i32 0] [^while.body2, i32 %23];
    i1 %18 = scmp lt i32 %16, i32 %10;
    cbr i1 %18(prob = 0.97), ^while.body2, ^b1;
^while.body2:
    i32* %19 = getelementptr &([20000000 * i32]* @matrix)[i64 0][i32 %16];
    i32 %20 = load i32* %19;
    i32 %21 = mul i32 %16, i32 %16;
    i32 %22 = mul i32 %21, i32 %20;
    i32 %23 = add i32 %17, i32 %22;
    i32 %24 = add i32 %16, i32 1;
    ubr ^while.header2;
^while.header3:
    i32 %25 = phi [^b3, i32 %35] [^while.body1, i32 %9];
    i32 %26 = phi [^b3, i32 %36] [^while.body1, i32 %10];
    i32 %27 = phi [^b3, i32 %37] [^while.body1, i32 %11];
    i32 %28 = phi [^b3, i32 %43] [^while.body1, i32 0];
    i32 %29 = phi [^b3, i32 %40] [^while.body1, i32 %15];
    i32 %30 = phi [^b3, i32 %41] [^while.body1, i32 %14];
    i1 %31 = scmp lt i32 %28, i32 %29;
    cbr i1 %31(prob = 0.97), ^while.body3, ^while.body4;
^b1:
    i1 %32 = scmp lt i32 %17, i32 0;
    cbr i1 %32(prob = 0.5), ^if.then, ^b2;
^while.body3:
    store i32* %j with i32 0;
    ubr ^while.header4;
^while.body4:
    i32 %33 = add i32 %27, i32 1;
    store i32* %i1 with i32 %33;
    ubr ^while.header1;
^if.then:
    i32 %34 = neg i32 %17;
    call (i32) -> void @stoptime(i32 47);
    call (i32) -> void @putint(i32 %34);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^b2:
    call (i32) -> void @stoptime(i32 47);
    call (i32) -> void @putint(i32 %17);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^while.header4:
    i32 %35 = phi [^b4, i32 %59] [^if.then1, i32 %35] [^while.body3, i32 %25];
    i32 %36 = phi [^b4, i32 %60] [^if.then1, i32 %36] [^while.body3, i32 %26];
    i32 %37 = phi [^b4, i32 %61] [^if.then1, i32 %37] [^while.body3, i32 %27];
    i32 %38 = phi [^b4, i32 %63] [^if.then1, i32 %45] [^while.body3, i32 0];
    i32 %39 = phi [^b4, i32 %54] [^if.then1, i32 %39] [^while.body3, i32 %28];
    i32 %40 = phi [^b4, i32 %62] [^if.then1, i32 %40] [^while.body3, i32 %29];
    i32 %41 = phi [^b4, i32 %55] [^if.then1, i32 %41] [^while.body3, i32 %30];
    i1 %42 = scmp lt i32 %38, i32 %41;
    cbr i1 %42(prob = 0.97), ^while.body5, ^b3;
^b3:
    i32 %43 = add i32 %39, i32 1;
    store i32* %i with i32 %43;
    ubr ^while.header3;
^while.body5:
    i1 %44 = scmp lt i32 %39, i32 %38;
    cbr i1 %44(prob = 0.5), ^if.then1, ^b4;
^if.then1:
    i32 %45 = add i32 %38, i32 1;
    store i32* %j with i32 %45;
    ubr ^while.header4;
^b4:
    i32 %46 = mul i32 %41, i32 %39;
    i32 %47 = add i32 %46, i32 %38;
    i32* %48 = getelementptr &(i32* %4)[i32 %47];
    i32 %49 = load i32* %48;
    i32 %50 = mul i32 %40, i32 %38;
    i32 %51 = add i32 %50, i32 %39;
    i32* %52 = getelementptr &(i32* %4)[i32 %51];
    store i32* %52 with i32 %49;
    i32 %53 = load i32* %j;
    i32 %54 = load i32* %i;
    i32 %55 = load i32* %rowsize;
    i32 %56 = mul i32 %55, i32 %54;
    i32 %57 = add i32 %56, i32 %53;
    i32* %58 = getelementptr &(i32* %4)[i32 %57];
    store i32* %58 with i32 %49;
    i32 %59 = load i32* %n;
    i32 %60 = load i32* %len;
    i32 %61 = load i32* %i1;
    i32 %62 = load i32* %colsize;
    i32 %63 = add i32 %53, i32 1;
    store i32* %j with i32 %63;
    ubr ^while.header4;
}
