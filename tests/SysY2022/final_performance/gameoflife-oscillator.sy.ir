internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [500 * [500 * i32]]* @sheet1 = [];
internal [500 * [500 * i32]]* @sheet2 = [];
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %i = alloc i32;
    i32* %j = alloc i32;
    i32* %i1 = alloc i32;
    i32* %j1 = alloc i32;
    i32* %steps = alloc i32;
    i32* %height = alloc i32;
    i32* %width = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %width with i32 %0;
    i32 %1 = call () -> i32 @getint();
    store i32* %height with i32 %1;
    i32 %2 = call () -> i32 @getint();
    store i32* %steps with i32 %2;
    i32 %3 = call () -> i32 @getch();
    ubr ^while.header;
^while.header:
    i32 %4 = phi [^b, i32 %14] [^entry, i32 1];
    i32 %5 = phi [^b, i32 %15] [^entry, i32 %0];
    i32 %6 = phi [^b, i32 %16] [^entry, i32 %1];
    i32 %7 = phi [^b, i32 %17] [^entry, i32 %2];
    i32 %8 = phi [^b, i32 %23] [^entry, i32 1];
    i32 %9 = phi [^entry, i32 %1] [^b, i32 %16];
    i32 %10 = phi [^entry, i32 1] [^b, i32 %23];
    i1 %11 = scmp le i32 %10, i32 %9;
    cbr i1 %11(prob = 0.97), ^while.header1, ^entry1;
^entry1:
    call (i32) -> void @starttime(i32 95);
    [500 * i32]* %12 = getelementptr &([500 * [500 * i32]]* @sheet1)[i64 0][i64 0];
    [500 * i32]* %13 = getelementptr &([500 * [500 * i32]]* @sheet2)[i64 0][i64 0];
    ubr ^while.header2;
^while.header1:
    i32 %14 = phi [^while.header, i32 %4] [^b2, i32 %14];
    i32 %15 = phi [^while.header, i32 %5] [^b2, i32 %15];
    i32 %16 = phi [^while.header, i32 %6] [^b2, i32 %16];
    i32 %17 = phi [^while.header, i32 %7] [^b2, i32 %17];
    i32 %18 = phi [^while.header, i32 %8] [^b2, i32 %18];
    i32 %19 = phi [^while.header, i32 1] [^b2, i32 %38];
    i32 %20 = phi [^while.header, i32 1] [^b2, i32 %38];
    i1 %21 = scmp le i32 %20, i32 %15;
    cbr i1 %21(prob = 0.97), ^while.body, ^b;
^b:
    i32 %22 = call () -> i32 @getch();
    i32 %23 = add i32 %18, i32 1;
    ubr ^while.header;
^while.body:
    i32 %24 = call () -> i32 @getch();
    i1 %25 = scmp eq i32 %24, i32 35;
    cbr i1 %25(prob = 0.5), ^if.then, ^if.else;
^while.header2:
    i32 %26 = phi [^b3, i32 %73] [^entry1, i32 %4];
    i32 %27 = phi [^b3, i32 %74] [^entry1, i32 %5];
    i32 %28 = phi [^b3, i32 %75] [^entry1, i32 %6];
    i32 %29 = phi [^b3, i32 %77] [^entry1, i32 %7];
    i32 %30 = phi [^entry1, i32 %7] [^b3, i32 %77];
    i1 %31 = scmp gt i32 %30, i32 0;
    cbr i1 %31(prob = 0.97), ^while.body1, ^b1;
^if.then:
    [500 * i32]* %32 = getelementptr &([500 * [500 * i32]]* @sheet1)[i64 0][i32 %18];
    i32* %33 = getelementptr &([500 * i32]* %32)[i64 0][i32 %19];
    store i32* %33 with i32 1;
    ubr ^b2;
^if.else:
    [500 * i32]* %34 = getelementptr &([500 * [500 * i32]]* @sheet1)[i64 0][i32 %18];
    i32* %35 = getelementptr &([500 * i32]* %34)[i64 0][i32 %19];
    store i32* %35 with i32 0;
    ubr ^b2;
^while.body1:
    i1 %36 = scmp eq i32 %26, i32 1;
    cbr i1 %36(prob = 0.5), ^entry2, ^entry3;
^b1:
    call (i32) -> void @stoptime(i32 106);
    i1 %37 = scmp eq i32 %26, i32 2;
    cbr i1 %37(prob = 0.5), ^while.header3, ^entry4;
^b2:
    i32 %38 = add i32 %19, i32 1;
    ubr ^while.header1;
^entry2:
    store i32* %j1 with i32 1;
    ubr ^while.header4;
^entry3:
    store i32* %j with i32 1;
    ubr ^while.header5;
^entry4:
    i32 %39 = phi [^while.header3, i32 %41] [^b1, i32 %27];
    i32 %40 = phi [^while.header3, i32 %42] [^b1, i32 %28];
    ubr ^while.header7;
^while.header3:
    i32 %41 = phi [^b1, i32 %27] [^b4, i32 %62];
    i32 %42 = phi [^b1, i32 %28] [^b4, i32 %63];
    i32 %43 = phi [^b1, i32 1] [^b4, i32 %84];
    i32 %44 = phi [^b1, i32 1] [^b4, i32 %84];
    i1 %45 = scmp le i32 %44, i32 %42;
    cbr i1 %45(prob = 0.97), ^while.header6, ^entry4;
^while.header4:
    i32 %46 = phi [^b7, i32 %91] [^entry2, i32 %27];
    i32 %47 = phi [^b7, i32 %92] [^entry2, i32 %28];
    i32 %48 = phi [^b7, i32 %93] [^entry2, i32 %29];
    i32 %49 = phi [^b7, i32 %114] [^entry2, i32 1];
    [500 * i32]* %50 = phi [^b7, [500 * i32]* %96] [^entry2, [500 * i32]* %13];
    [500 * i32]* %51 = phi [^b7, [500 * i32]* %97] [^entry2, [500 * i32]* %12];
    i32 %52 = phi [^entry2, i32 1] [^b7, i32 %114];
    i1 %53 = scmp le i32 %52, i32 %47;
    cbr i1 %53(prob = 0.97), ^while.body2, ^b3;
^while.header5:
    i32 %54 = phi [^b8, i32 %100] [^entry3, i32 %27];
    i32 %55 = phi [^b8, i32 %101] [^entry3, i32 %28];
    i32 %56 = phi [^b8, i32 %102] [^entry3, i32 %29];
    i32 %57 = phi [^b8, i32 %146] [^entry3, i32 1];
    [500 * i32]* %58 = phi [^b8, [500 * i32]* %105] [^entry3, [500 * i32]* %12];
    [500 * i32]* %59 = phi [^b8, [500 * i32]* %106] [^entry3, [500 * i32]* %13];
    i32 %60 = phi [^b8, i32 %146] [^entry3, i32 1];
    i1 %61 = scmp le i32 %60, i32 %55;
    cbr i1 %61(prob = 0.97), ^while.body3, ^b3;
^while.header6:
    i32 %62 = phi [^while.header3, i32 %41] [^while.body4, i32 %62];
    i32 %63 = phi [^while.header3, i32 %42] [^while.body4, i32 %63];
    i32 %64 = phi [^while.header3, i32 %43] [^while.body4, i32 %64];
    i32 %65 = phi [^while.header3, i32 1] [^while.body4, i32 %83];
    i32 %66 = phi [^while.header3, i32 1] [^while.body4, i32 %83];
    i1 %67 = scmp le i32 %66, i32 %62;
    cbr i1 %67(prob = 0.97), ^while.body4, ^b4;
^while.header7:
    i32 %68 = phi [^b6, i32 %85] [^entry4, i32 %39];
    i32 %69 = phi [^b6, i32 %86] [^entry4, i32 %40];
    i32 %70 = phi [^b6, i32 %109] [^entry4, i32 1];
    i32 %71 = phi [^entry4, i32 1] [^b6, i32 %109];
    i1 %72 = scmp le i32 %71, i32 %69;
    cbr i1 %72(prob = 0.97), ^while.header8, ^b5;
^while.body2:
    store i32* %i1 with i32 1;
    ubr ^while.header9;
^while.body3:
    store i32* %i with i32 1;
    ubr ^while.header10;
^b3:
    i32 %73 = phi [^while.header5, i32 1] [^while.header4, i32 2];
    i32 %74 = phi [^while.header5, i32 %54] [^while.header4, i32 %46];
    i32 %75 = phi [^while.header5, i32 %55] [^while.header4, i32 %47];
    i32 %76 = phi [^while.header5, i32 %56] [^while.header4, i32 %48];
    i32 %77 = add i32 %76, i32 -1;
    store i32* %steps with i32 %77;
    ubr ^while.header2;
^while.body4:
    [500 * i32]* %78 = getelementptr &([500 * [500 * i32]]* @sheet1)[i64 0][i32 %64];
    i32* %79 = getelementptr &([500 * i32]* %78)[i64 0][i32 %65];
    [500 * i32]* %80 = getelementptr &([500 * [500 * i32]]* @sheet2)[i64 0][i32 %64];
    i32* %81 = getelementptr &([500 * i32]* %80)[i64 0][i32 %65];
    i32 %82 = load i32* %81;
    store i32* %79 with i32 %82;
    i32 %83 = add i32 %65, i32 1;
    ubr ^while.header6;
^b4:
    i32 %84 = add i32 %64, i32 1;
    ubr ^while.header3;
^while.header8:
    i32 %85 = phi [^while.header7, i32 %68] [^b11, i32 %85];
    i32 %86 = phi [^while.header7, i32 %69] [^b11, i32 %86];
    i32 %87 = phi [^while.header7, i32 %70] [^b11, i32 %87];
    i32 %88 = phi [^while.header7, i32 1] [^b11, i32 %180];
    i32 %89 = phi [^while.header7, i32 1] [^b11, i32 %180];
    i1 %90 = scmp le i32 %89, i32 %85;
    cbr i1 %90(prob = 0.97), ^while.body5, ^b6;
^b5:
    ret i32 0;
^while.header9:
    i32 %91 = phi [^b14, i32 %199] [^while.body2, i32 %46];
    i32 %92 = phi [^b14, i32 %200] [^while.body2, i32 %47];
    i32 %93 = phi [^b14, i32 %201] [^while.body2, i32 %48];
    i32 %94 = phi [^b14, i32 %202] [^while.body2, i32 %49];
    i32 %95 = phi [^b14, i32 %204] [^while.body2, i32 1];
    [500 * i32]* %96 = phi [^b14, [500 * i32]* %96] [^while.body2, [500 * i32]* %50];
    [500 * i32]* %97 = phi [^b14, [500 * i32]* %97] [^while.body2, [500 * i32]* %51];
    i32 %98 = phi [^while.body2, i32 1] [^b14, i32 %204];
    i1 %99 = scmp le i32 %98, i32 %91;
    cbr i1 %99(prob = 0.97), ^while.body6, ^b7;
^while.header10:
    i32 %100 = phi [^b15, i32 %205] [^while.body3, i32 %54];
    i32 %101 = phi [^b15, i32 %206] [^while.body3, i32 %55];
    i32 %102 = phi [^b15, i32 %207] [^while.body3, i32 %56];
    i32 %103 = phi [^b15, i32 %208] [^while.body3, i32 %57];
    i32 %104 = phi [^b15, i32 %210] [^while.body3, i32 1];
    [500 * i32]* %105 = phi [^b15, [500 * i32]* %105] [^while.body3, [500 * i32]* %58];
    [500 * i32]* %106 = phi [^b15, [500 * i32]* %106] [^while.body3, [500 * i32]* %59];
    i32 %107 = phi [^while.body3, i32 1] [^b15, i32 %210];
    i1 %108 = scmp le i32 %107, i32 %100;
    cbr i1 %108(prob = 0.97), ^while.body7, ^b8;
^b6:
    call (i32) -> void @putch(i32 10);
    i32 %109 = add i32 %87, i32 1;
    ubr ^while.header7;
^while.body5:
    [500 * i32]* %110 = getelementptr &([500 * [500 * i32]]* @sheet1)[i64 0][i32 %87];
    i32* %111 = getelementptr &([500 * i32]* %110)[i64 0][i32 %88];
    i32 %112 = load i32* %111;
    i1 %113 = scmp eq i32 %112, i32 1;
    cbr i1 %113(prob = 0.5), ^if.then1, ^if.else1;
^b7:
    i32 %114 = add i32 %94, i32 1;
    store i32* %j1 with i32 %114;
    ubr ^while.header4;
^while.body6:
    i32 %115 = add i32 %94, i32 -1;
    [500 * i32]* %116 = getelementptr &([500 * i32]* %97)[i32 %115];
    i32 %117 = add i32 %95, i32 -1;
    i32* %118 = getelementptr &([500 * i32]* %116)[i64 0][i32 %117];
    i32 %119 = load i32* %118;
    i32* %120 = getelementptr &([500 * i32]* %116)[i64 0][i32 %95];
    i32 %121 = load i32* %120;
    i32* %122 = getelementptr &(i32* %120)[i64 1];
    i32 %123 = load i32* %122;
    [500 * i32]* %124 = getelementptr &([500 * i32]* %97)[i32 %94];
    i32* %125 = getelementptr &([500 * i32]* %124)[i64 0][i32 %117];
    i32 %126 = load i32* %125;
    i32* %127 = getelementptr &(i32* %125)[i64 2];
    i32 %128 = load i32* %127;
    [500 * i32]* %129 = getelementptr &([500 * i32]* %124)[i64 1];
    i32* %130 = getelementptr &([500 * i32]* %129)[i64 0][i32 %117];
    i32 %131 = load i32* %130;
    i32* %132 = getelementptr &([500 * i32]* %129)[i64 0][i32 %95];
    i32 %133 = load i32* %132;
    i32* %134 = getelementptr &(i32* %132)[i64 1];
    i32 %135 = load i32* %134;
    i32 %136 = add i32 %119, i32 %121;
    i32 %137 = add i32 %136, i32 %123;
    i32 %138 = add i32 %137, i32 %126;
    i32 %139 = add i32 %138, i32 %128;
    i32 %140 = add i32 %139, i32 %131;
    i32 %141 = add i32 %140, i32 %133;
    i32 %142 = add i32 %141, i32 %135;
    i32* %143 = getelementptr &([500 * i32]* %124)[i64 0][i32 %95];
    i32 %144 = load i32* %143;
    i1 %145 = scmp eq i32 %144, i32 1;
    cbr i1 %145(prob = 0.5), ^b9, ^b12;
^b8:
    i32 %146 = add i32 %103, i32 1;
    store i32* %j with i32 %146;
    ubr ^while.header5;
^if.then1:
    call (i32) -> void @putch(i32 35);
    ubr ^b11;
^while.body7:
    i32 %147 = add i32 %103, i32 -1;
    [500 * i32]* %148 = getelementptr &([500 * i32]* %106)[i32 %147];
    i32 %149 = add i32 %104, i32 -1;
    i32* %150 = getelementptr &([500 * i32]* %148)[i64 0][i32 %149];
    i32 %151 = load i32* %150;
    i32* %152 = getelementptr &([500 * i32]* %148)[i64 0][i32 %104];
    i32 %153 = load i32* %152;
    i32* %154 = getelementptr &(i32* %152)[i64 1];
    i32 %155 = load i32* %154;
    [500 * i32]* %156 = getelementptr &([500 * i32]* %106)[i32 %103];
    i32* %157 = getelementptr &([500 * i32]* %156)[i64 0][i32 %149];
    i32 %158 = load i32* %157;
    i32* %159 = getelementptr &(i32* %157)[i64 2];
    i32 %160 = load i32* %159;
    [500 * i32]* %161 = getelementptr &([500 * i32]* %156)[i64 1];
    i32* %162 = getelementptr &([500 * i32]* %161)[i64 0][i32 %149];
    i32 %163 = load i32* %162;
    i32* %164 = getelementptr &([500 * i32]* %161)[i64 0][i32 %104];
    i32 %165 = load i32* %164;
    i32* %166 = getelementptr &(i32* %164)[i64 1];
    i32 %167 = load i32* %166;
    i32 %168 = add i32 %151, i32 %153;
    i32 %169 = add i32 %168, i32 %155;
    i32 %170 = add i32 %169, i32 %158;
    i32 %171 = add i32 %170, i32 %160;
    i32 %172 = add i32 %171, i32 %163;
    i32 %173 = add i32 %172, i32 %165;
    i32 %174 = add i32 %173, i32 %167;
    i32* %175 = getelementptr &([500 * i32]* %156)[i64 0][i32 %104];
    i32 %176 = load i32* %175;
    i1 %177 = scmp eq i32 %176, i32 1;
    cbr i1 %177(prob = 0.5), ^b10, ^b13;
^if.else1:
    call (i32) -> void @putch(i32 46);
    ubr ^b11;
^b9:
    i1 %178 = scmp eq i32 %142, i32 2;
    ubr ^b12;
^b10:
    i1 %179 = scmp eq i32 %174, i32 2;
    ubr ^b13;
^b11:
    i32 %180 = add i32 %88, i32 1;
    ubr ^while.header8;
^b12:
    i1 %181 = phi [^while.body6, i1 false] [^b9, i1 %178];
    cbr i1 %181(prob = 0.5), ^if.then2, ^if.else2;
^b13:
    i1 %182 = phi [^b10, i1 %179] [^while.body7, i1 false];
    cbr i1 %182(prob = 0.5), ^if.then3, ^if.else3;
^if.then2:
    [500 * i32]* %183 = getelementptr &([500 * i32]* %96)[i32 %94];
    i32* %184 = getelementptr &([500 * i32]* %183)[i64 0][i32 %95];
    store i32* %184 with i32 1;
    i32 %185 = load i32* %width;
    i32 %186 = load i32* %height;
    i32 %187 = load i32* %steps;
    i32 %188 = load i32* %j1;
    i32 %189 = load i32* %i1;
    ubr ^b14;
^if.then3:
    [500 * i32]* %190 = getelementptr &([500 * i32]* %105)[i32 %103];
    i32* %191 = getelementptr &([500 * i32]* %190)[i64 0][i32 %104];
    store i32* %191 with i32 1;
    i32 %192 = load i32* %width;
    i32 %193 = load i32* %height;
    i32 %194 = load i32* %steps;
    i32 %195 = load i32* %j;
    i32 %196 = load i32* %i;
    ubr ^b15;
^if.else2:
    i1 %197 = scmp eq i32 %142, i32 3;
    cbr i1 %197(prob = 0.5), ^if.then2, ^if.else4;
^if.else3:
    i1 %198 = scmp eq i32 %174, i32 3;
    cbr i1 %198(prob = 0.5), ^if.then3, ^if.else5;
^b14:
    i32 %199 = phi [^if.else4, i32 %213] [^if.then2, i32 %185];
    i32 %200 = phi [^if.else4, i32 %214] [^if.then2, i32 %186];
    i32 %201 = phi [^if.else4, i32 %215] [^if.then2, i32 %187];
    i32 %202 = phi [^if.else4, i32 %216] [^if.then2, i32 %188];
    i32 %203 = phi [^if.else4, i32 %217] [^if.then2, i32 %189];
    i32 %204 = add i32 %203, i32 1;
    store i32* %i1 with i32 %204;
    ubr ^while.header9;
^b15:
    i32 %205 = phi [^if.else5, i32 %220] [^if.then3, i32 %192];
    i32 %206 = phi [^if.else5, i32 %221] [^if.then3, i32 %193];
    i32 %207 = phi [^if.else5, i32 %222] [^if.then3, i32 %194];
    i32 %208 = phi [^if.else5, i32 %223] [^if.then3, i32 %195];
    i32 %209 = phi [^if.else5, i32 %224] [^if.then3, i32 %196];
    i32 %210 = add i32 %209, i32 1;
    store i32* %i with i32 %210;
    ubr ^while.header10;
^if.else4:
    [500 * i32]* %211 = getelementptr &([500 * i32]* %96)[i32 %94];
    i32* %212 = getelementptr &([500 * i32]* %211)[i64 0][i32 %95];
    store i32* %212 with i32 0;
    i32 %213 = load i32* %width;
    i32 %214 = load i32* %height;
    i32 %215 = load i32* %steps;
    i32 %216 = load i32* %j1;
    i32 %217 = load i32* %i1;
    ubr ^b14;
^if.else5:
    [500 * i32]* %218 = getelementptr &([500 * i32]* %105)[i32 %103];
    i32* %219 = getelementptr &([500 * i32]* %218)[i64 0][i32 %104];
    store i32* %219 with i32 0;
    i32 %220 = load i32* %width;
    i32 %221 = load i32* %height;
    i32 %222 = load i32* %steps;
    i32 %223 = load i32* %j;
    i32 %224 = load i32* %i;
    ubr ^b15;
}
