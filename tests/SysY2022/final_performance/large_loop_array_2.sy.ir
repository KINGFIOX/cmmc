internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry():
    i32 %0 = call () -> i32 @getint();
    [4096 * f32]* %x = alloc [4096 * f32];
    [4096 * f32]* %y = alloc [4096 * f32];
    call (i32) -> void @starttime(i32 22);
    ubr [ ^while.body [4096 * f32]* %y, [4096 * f32]* %x, i32 0, i32 0, i32 %0, f32 0, f32 0, f32 1 ];
^while.body([4096 * f32]* %arg, [4096 * f32]* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, f32 %arg5, f32 %arg6, f32 %arg7):
    i32 %0 = srem i32 %arg2, i32 10;
    i1 %1 = scmp neq i32 %0, i32 0;
    cbr i1 %1, [ ^while.header [4096 * f32]* %arg1, [4096 * f32]* %arg, i32 %arg3, i32 %arg2, i32 %arg3, i32 %arg4, f32 %arg5, f32 0, f32 1 ], [ ^if.else [4096 * f32]* %arg1, [4096 * f32]* %arg, i32 %arg2, i32 %arg3, i32 %arg4, f32 %arg5, f32 %arg6, f32 %arg7 ];
^if.else([4096 * f32]* %arg, [4096 * f32]* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, f32 %arg5, f32 %arg6, f32 %arg7):
    f32 %0 = fadd f32 %arg6, f32 0.1;
    f32 %1 = fadd f32 %arg7, f32 0.2;
    ubr [ ^while.header [4096 * f32]* %arg, [4096 * f32]* %arg1, i32 %arg3, i32 %arg2, i32 %arg3, i32 %arg4, f32 %arg5, f32 %0, f32 %1 ];
^while.header([4096 * f32]* %arg, [4096 * f32]* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, f32 %arg6, f32 %arg7, f32 %arg8):
    i1 %0 = scmp lt i32 %arg2, i32 %arg5;
    cbr i1 %0, [ ^while.body1 [4096 * f32]* %arg1, [4096 * f32]* %arg, i32 %arg3, i32 %arg4, i32 %arg5, f32 %arg6, f32 %arg7, f32 %arg8 ], [ ^indirect [4096 * f32]* %arg1, [4096 * f32]* %arg, i32 %arg5, i32 %arg3, i32 %arg4, i32 %arg5, f32 %arg6, f32 %arg7, f32 %arg8 ];
^while.body1([4096 * f32]* %arg, [4096 * f32]* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, f32 %arg5, f32 %arg6, f32 %arg7):
    f32* %0 = getelementptr &([4096 * f32]* %arg1)[i32 0][i32 %arg3];
    f32 %1 = s2f i32 %arg3 to f32;
    f32 %2 = fadd f32 %arg6, f32 %1;
    store f32* %0 with f32 %2;
    f32* %3 = getelementptr &([4096 * f32]* %arg)[i32 0][i32 %arg3];
    f32 %4 = fadd f32 %arg7, f32 %1;
    store f32* %3 with f32 %4;
    i32 %5 = add i32 %arg3, i32 1;
    i1 %6 = scmp lt i32 %5, i32 %arg4;
    cbr i1 %6, [ ^while.body1 [4096 * f32]* %arg, [4096 * f32]* %arg1, i32 %arg2, i32 %5, i32 %arg4, f32 %arg5, f32 %arg6, f32 %arg7 ], [ ^indirect [4096 * f32]* %arg, [4096 * f32]* %arg1, i32 %arg4, i32 %arg2, i32 %5, i32 %arg4, f32 %arg5, f32 %arg6, f32 %arg7 ];
^indirect([4096 * f32]* %arg, [4096 * f32]* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, f32 %arg6, f32 %arg7, f32 %arg8):
    f32* %0 = getelementptr &([4096 * f32]* %arg1)[i32 0][i32 0];
    f32* %1 = getelementptr &([4096 * f32]* %arg)[i32 0][i32 0];
    i1 %2 = scmp lt i32 0, i32 %arg2;
    cbr i1 %2, [ ^while.body2 f32 %arg6, [4096 * f32]* %arg1, [4096 * f32]* %arg, i32 %arg3, i32 %arg4, i32 %arg5, f32 %arg7, f32 %arg8, f32* %0, f32* %1, i32 %arg2, i32 0, f32 0 ], [ ^b f32 %arg6, [4096 * f32]* %arg1, [4096 * f32]* %arg, i32 %arg3, i32 %arg4, i32 %arg5, f32 %arg7, f32 %arg8, f32 0 ];
^while.body2(f32 %arg, [4096 * f32]* %arg1, [4096 * f32]* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, f32 %arg6, f32 %arg7, f32* %arg8, f32* %arg9, i32 %arg10, i32 %arg11, f32 %arg12):
    f32* %0 = getelementptr &(f32* %arg8)[i32 %arg11];
    f32 %1 = load f32* %0;
    f32* %2 = getelementptr &(f32* %arg9)[i32 %arg11];
    f32 %3 = load f32* %2;
    f32 %4 = ffma f32 %1, f32 %3, f32 %arg12;
    i32 %5 = add i32 %arg11, i32 1;
    i1 %6 = scmp lt i32 %5, i32 %arg10;
    cbr i1 %6, [ ^while.body2 f32 %arg, [4096 * f32]* %arg1, [4096 * f32]* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, f32 %arg6, f32 %arg7, f32* %arg8, f32* %arg9, i32 %arg10, i32 %5, f32 %4 ], [ ^b f32 %arg, [4096 * f32]* %arg1, [4096 * f32]* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, f32 %arg6, f32 %arg7, f32 %4 ];
^b(f32 %arg, [4096 * f32]* %arg1, [4096 * f32]* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, f32 %arg6, f32 %arg7, f32 %arg8):
    f32 %0 = fadd f32 %arg, f32 %arg8;
    i32 %1 = add i32 %arg3, i32 1;
    i1 %2 = scmp lt i32 %1, i32 500000;
    cbr i1 %2, [ ^while.body [4096 * f32]* %arg2, [4096 * f32]* %arg1, i32 %1, i32 %arg4, i32 %arg5, f32 %0, f32 %arg6, f32 %arg7 ], [ ^b1 f32 %0 ];
^b1(f32 %arg):
    call (i32) -> void @stoptime(i32 39);
    f32 %0 = fsub f32 %arg, f32 1.14424e+16;
    i1 %1 = fcmp le f32 %0, f32 1e-06;
    cbr i1 %1, [ ^if.then ], [ ^indirect1 f32 %arg ];
^indirect1(f32 %arg):
    f32 %0 = fsub f32 %arg, f32 1.14424e+16;
    i1 %1 = fcmp ge f32 %0, f32 -1e-06;
    cbr i1 %1, [ ^if.then ], [ ^if.else1 ];
^if.then():
    call (i32) -> void @putint(i32 0);
    ret i32 0;
^if.else1():
    call (i32) -> void @putint(i32 1);
    ret i32 1;
}
