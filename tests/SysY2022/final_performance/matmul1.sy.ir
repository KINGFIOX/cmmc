internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [1000 * [1000 * i32]]* @a;
internal [1000 * [1000 * i32]]* @b;
internal [1000 * [1000 * i32]]* @c;
internal i32* @MAX { ReadOnly } = 2147483647;
func @main() -> i32 { Entry } {
^entry:
    i32* %temp = alloc i32;
    i32* %temp1 = alloc i32;
    i32* %temp2 = alloc i32;
    i32* %temp3 = alloc i32;
    i32* %sum = alloc i32;
    i32* %k = alloc i32;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    i32* %n = alloc i32;
    store i32* %n with i32 0;
    store i32* %i with i32 0;
    store i32* %j with i32 0;
    store i32* %k with i32 0;
    store i32* %sum with i32 0;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i1 %1 = scmp lt i32 %0, i32 1000;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^while.body, ^b;
^b:
    call (i32) -> void @starttime(i32 23);
    store i32* %i with i32 0;
    ubr ^while.header1;
^while.body:
    i32 %4 = load i32* %i;
    i64 %5 = sext i32 %4 to i64;
    [1000 * i32]* %6 = getelementptr &([1000 * [1000 * i32]]* @a)[i64 0][i64 %5];
    i32* %7 = getelementptr &([1000 * i32]* %6)[i64 0][i64 0];
    i32 %8 = call (i32*) -> i32 @getarray(i32* %7);
    store i32* %n with i32 %8;
    i32 %9 = load i32* %n;
    i1 %10 = scmp neq i32 %9, i32 1000;
    i32 %11 = zext i1 %10 to i32;
    i1 %12 = scmp neq i32 %11, i32 0;
    cbr i1 %12(prob = 0.5), ^if.then, ^b1;
^b1:
    i32 %13 = load i32* %i;
    i32 %14 = add i32 %13, i32 1;
    store i32* %i with i32 %14;
    ubr ^while.header;
^while.header1:
    i32 %15 = load i32* %i;
    i1 %16 = scmp lt i32 %15, i32 1000;
    i32 %17 = zext i1 %16 to i32;
    i1 %18 = scmp neq i32 %17, i32 0;
    cbr i1 %18(prob = 0.97), ^while.body1, ^b2;
^if.then:
    i32 %19 = load i32* %n;
    ret i32 %19;
^while.body1:
    store i32* %j with i32 0;
    ubr ^while.header2;
^b2:
    store i32* %i with i32 0;
    ubr ^while.header3;
^while.header2:
    i32 %20 = load i32* %j;
    i1 %21 = scmp lt i32 %20, i32 1000;
    i32 %22 = zext i1 %21 to i32;
    i1 %23 = scmp neq i32 %22, i32 0;
    cbr i1 %23(prob = 0.97), ^while.body2, ^b3;
^while.header3:
    i32 %24 = load i32* %i;
    i1 %25 = scmp lt i32 %24, i32 1000;
    i32 %26 = zext i1 %25 to i32;
    i1 %27 = scmp neq i32 %26, i32 0;
    cbr i1 %27(prob = 0.97), ^while.body3, ^b4;
^while.body2:
    i32 %28 = load i32* %i;
    i64 %29 = sext i32 %28 to i64;
    [1000 * i32]* %30 = getelementptr &([1000 * [1000 * i32]]* @b)[i64 0][i64 %29];
    i32 %31 = load i32* %j;
    i64 %32 = sext i32 %31 to i64;
    i32* %33 = getelementptr &([1000 * i32]* %30)[i64 0][i64 %32];
    i32 %34 = load i32* %j;
    i64 %35 = sext i32 %34 to i64;
    [1000 * i32]* %36 = getelementptr &([1000 * [1000 * i32]]* @a)[i64 0][i64 %35];
    i32 %37 = load i32* %i;
    i64 %38 = sext i32 %37 to i64;
    i32* %39 = getelementptr &([1000 * i32]* %36)[i64 0][i64 %38];
    i32 %40 = load i32* %39;
    store i32* %33 with i32 %40;
    i32 %41 = load i32* %j;
    i32 %42 = add i32 %41, i32 1;
    store i32* %j with i32 %42;
    ubr ^while.header2;
^b3:
    i32 %43 = load i32* %i;
    i32 %44 = add i32 %43, i32 1;
    store i32* %i with i32 %44;
    ubr ^while.header1;
^while.body3:
    store i32* %j with i32 0;
    ubr ^while.header4;
^b4:
    store i32* %i with i32 0;
    ubr ^while.header5;
^while.header4:
    i32 %45 = load i32* %j;
    i1 %46 = scmp lt i32 %45, i32 1000;
    i32 %47 = zext i1 %46 to i32;
    i1 %48 = scmp neq i32 %47, i32 0;
    cbr i1 %48(prob = 0.97), ^while.body4, ^b5;
^while.header5:
    i32 %49 = load i32* %i;
    i1 %50 = scmp lt i32 %49, i32 1000;
    i32 %51 = zext i1 %50 to i32;
    i1 %52 = scmp neq i32 %51, i32 0;
    cbr i1 %52(prob = 0.97), ^while.body5, ^b6;
^while.body4:
    store i32* %k with i32 0;
    store i32* %temp3 with i32 0;
    ubr ^while.header6;
^b5:
    i32 %53 = load i32* %i;
    i32 %54 = add i32 %53, i32 1;
    store i32* %i with i32 %54;
    ubr ^while.header3;
^while.body5:
    store i32* %j with i32 0;
    store i32* %temp2 with i32 2147483647;
    ubr ^while.header7;
^b6:
    store i32* %i with i32 0;
    ubr ^while.header8;
^while.header6:
    i32 %55 = load i32* %k;
    i1 %56 = scmp lt i32 %55, i32 1000;
    i32 %57 = zext i1 %56 to i32;
    i1 %58 = scmp neq i32 %57, i32 0;
    cbr i1 %58(prob = 0.97), ^while.body6, ^b7;
^while.header7:
    i32 %59 = load i32* %j;
    i1 %60 = scmp lt i32 %59, i32 1000;
    i32 %61 = zext i1 %60 to i32;
    i1 %62 = scmp neq i32 %61, i32 0;
    cbr i1 %62(prob = 0.97), ^while.body8, ^b8;
^while.header8:
    i32 %63 = load i32* %i;
    i1 %64 = scmp lt i32 %63, i32 1000;
    i32 %65 = zext i1 %64 to i32;
    i1 %66 = scmp neq i32 %65, i32 0;
    cbr i1 %66(prob = 0.97), ^while.body7, ^b9;
^while.body6:
    i32 %67 = load i32* %temp3;
    i32 %68 = load i32* %i;
    i64 %69 = sext i32 %68 to i64;
    [1000 * i32]* %70 = getelementptr &([1000 * [1000 * i32]]* @a)[i64 0][i64 %69];
    i32 %71 = load i32* %k;
    i64 %72 = sext i32 %71 to i64;
    i32* %73 = getelementptr &([1000 * i32]* %70)[i64 0][i64 %72];
    i32 %74 = load i32* %73;
    i32 %75 = load i32* %k;
    i64 %76 = sext i32 %75 to i64;
    [1000 * i32]* %77 = getelementptr &([1000 * [1000 * i32]]* @b)[i64 0][i64 %76];
    i32 %78 = load i32* %j;
    i64 %79 = sext i32 %78 to i64;
    i32* %80 = getelementptr &([1000 * i32]* %77)[i64 0][i64 %79];
    i32 %81 = load i32* %80;
    i32 %82 = mul i32 %74, i32 %81;
    i32 %83 = add i32 %67, i32 %82;
    store i32* %temp3 with i32 %83;
    i32 %84 = load i32* %k;
    i32 %85 = add i32 %84, i32 1;
    store i32* %k with i32 %85;
    ubr ^while.header6;
^b7:
    i32 %86 = load i32* %i;
    i64 %87 = sext i32 %86 to i64;
    [1000 * i32]* %88 = getelementptr &([1000 * [1000 * i32]]* @c)[i64 0][i64 %87];
    i32 %89 = load i32* %j;
    i64 %90 = sext i32 %89 to i64;
    i32* %91 = getelementptr &([1000 * i32]* %88)[i64 0][i64 %90];
    i32 %92 = load i32* %temp3;
    store i32* %91 with i32 %92;
    i32 %93 = load i32* %j;
    i32 %94 = add i32 %93, i32 1;
    store i32* %j with i32 %94;
    ubr ^while.header4;
^b8:
    store i32* %j with i32 0;
    ubr ^while.header9;
^while.body7:
    store i32* %j with i32 0;
    store i32* %temp1 with i32 2147483647;
    ubr ^while.header10;
^while.body8:
    i32 %95 = load i32* %i;
    i64 %96 = sext i32 %95 to i64;
    [1000 * i32]* %97 = getelementptr &([1000 * [1000 * i32]]* @c)[i64 0][i64 %96];
    i32 %98 = load i32* %j;
    i64 %99 = sext i32 %98 to i64;
    i32* %100 = getelementptr &([1000 * i32]* %97)[i64 0][i64 %99];
    i32 %101 = load i32* %100;
    i32 %102 = load i32* %temp2;
    i1 %103 = scmp lt i32 %101, i32 %102;
    i32 %104 = zext i1 %103 to i32;
    i1 %105 = scmp neq i32 %104, i32 0;
    cbr i1 %105(prob = 0.5), ^if.then1, ^b10;
^b9:
    store i32* %i with i32 0;
    ubr ^while.header11;
^if.then1:
    i32 %106 = load i32* %i;
    i64 %107 = sext i32 %106 to i64;
    [1000 * i32]* %108 = getelementptr &([1000 * [1000 * i32]]* @c)[i64 0][i64 %107];
    i32 %109 = load i32* %j;
    i64 %110 = sext i32 %109 to i64;
    i32* %111 = getelementptr &([1000 * i32]* %108)[i64 0][i64 %110];
    i32 %112 = load i32* %111;
    store i32* %temp2 with i32 %112;
    ubr ^b10;
^b10:
    i32 %113 = load i32* %j;
    i32 %114 = add i32 %113, i32 1;
    store i32* %j with i32 %114;
    ubr ^while.header7;
^while.header9:
    i32 %115 = load i32* %j;
    i1 %116 = scmp lt i32 %115, i32 1000;
    i32 %117 = zext i1 %116 to i32;
    i1 %118 = scmp neq i32 %117, i32 0;
    cbr i1 %118(prob = 0.97), ^while.body9, ^b11;
^while.header10:
    i32 %119 = load i32* %j;
    i1 %120 = scmp lt i32 %119, i32 1000;
    i32 %121 = zext i1 %120 to i32;
    i1 %122 = scmp neq i32 %121, i32 0;
    cbr i1 %122(prob = 0.97), ^while.body10, ^b12;
^while.header11:
    i32 %123 = load i32* %i;
    i1 %124 = scmp lt i32 %123, i32 1000;
    i32 %125 = zext i1 %124 to i32;
    i1 %126 = scmp neq i32 %125, i32 0;
    cbr i1 %126(prob = 0.97), ^while.body11, ^b13;
^while.body9:
    i32 %127 = load i32* %i;
    i64 %128 = sext i32 %127 to i64;
    [1000 * i32]* %129 = getelementptr &([1000 * [1000 * i32]]* @c)[i64 0][i64 %128];
    i32 %130 = load i32* %j;
    i64 %131 = sext i32 %130 to i64;
    i32* %132 = getelementptr &([1000 * i32]* %129)[i64 0][i64 %131];
    i32 %133 = load i32* %temp2;
    store i32* %132 with i32 %133;
    i32 %134 = load i32* %j;
    i32 %135 = add i32 %134, i32 1;
    store i32* %j with i32 %135;
    ubr ^while.header9;
^while.body10:
    i32 %136 = load i32* %i;
    i64 %137 = sext i32 %136 to i64;
    [1000 * i32]* %138 = getelementptr &([1000 * [1000 * i32]]* @c)[i64 0][i64 %137];
    i32 %139 = load i32* %j;
    i64 %140 = sext i32 %139 to i64;
    i32* %141 = getelementptr &([1000 * i32]* %138)[i64 0][i64 %140];
    i32 %142 = load i32* %j;
    i64 %143 = sext i32 %142 to i64;
    [1000 * i32]* %144 = getelementptr &([1000 * [1000 * i32]]* @c)[i64 0][i64 %143];
    i32 %145 = load i32* %i;
    i64 %146 = sext i32 %145 to i64;
    i32* %147 = getelementptr &([1000 * i32]* %144)[i64 0][i64 %146];
    i32 %148 = load i32* %147;
    i32 %149 = neg i32 %148;
    store i32* %141 with i32 %149;
    i32 %150 = load i32* %j;
    i32 %151 = add i32 %150, i32 1;
    store i32* %j with i32 %151;
    ubr ^while.header10;
^b11:
    i32 %152 = load i32* %i;
    i32 %153 = add i32 %152, i32 1;
    store i32* %i with i32 %153;
    ubr ^while.header5;
^b12:
    i32 %154 = load i32* %i;
    i32 %155 = add i32 %154, i32 1;
    store i32* %i with i32 %155;
    ubr ^while.header8;
^while.body11:
    store i32* %j with i32 0;
    store i32* %temp with i32 2147483647;
    ubr ^while.header12;
^b13:
    call (i32) -> void @stoptime(i32 92);
    i32 %156 = load i32* %sum;
    call (i32) -> void @putint(i32 %156);
    ret i32 0;
^while.header12:
    i32 %157 = load i32* %j;
    i1 %158 = scmp lt i32 %157, i32 1000;
    i32 %159 = zext i1 %158 to i32;
    i1 %160 = scmp neq i32 %159, i32 0;
    cbr i1 %160(prob = 0.97), ^while.body12, ^b14;
^while.body12:
    i32 %161 = load i32* %sum;
    i32 %162 = load i32* %i;
    i64 %163 = sext i32 %162 to i64;
    [1000 * i32]* %164 = getelementptr &([1000 * [1000 * i32]]* @c)[i64 0][i64 %163];
    i32 %165 = load i32* %j;
    i64 %166 = sext i32 %165 to i64;
    i32* %167 = getelementptr &([1000 * i32]* %164)[i64 0][i64 %166];
    i32 %168 = load i32* %167;
    i32 %169 = add i32 %161, i32 %168;
    store i32* %sum with i32 %169;
    i32 %170 = load i32* %j;
    i32 %171 = add i32 %170, i32 1;
    store i32* %j with i32 %171;
    ubr ^while.header12;
^b14:
    i32 %172 = load i32* %i;
    i32 %173 = add i32 %172, i32 1;
    store i32* %i with i32 %173;
    ubr ^while.header11;
}
