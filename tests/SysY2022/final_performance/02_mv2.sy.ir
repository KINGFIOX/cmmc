internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [2010 * [2010 * i32]]* @A;
internal [2010 * i32]* @B;
internal [2010 * i32]* @C;
func @main() -> i32 { NoRecurse Entry } {
^entry():
    i32* %n = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %n with i32 %0;
    i32* %i = alloc i32;
    i1 %1 = scmp lt i32 0, i32 %0;
    cbr i1 %1, [ ^while.body i32* %n, i32* %i, i32 %0, i32 0 ], [ ^b i32* %n, i32* %i, i32 %0 ];
^while.body(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3):
    i1 %0 = scmp lt i32 0, i32 %arg2;
    cbr i1 %0, [ ^while.body1 i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32 0 ], [ ^indirect i32* %arg, i32* %arg1, i32 %arg2, i32 %arg2, i32 %arg3 ];
^b(i32* %arg, i32* %arg1, i32 %arg2):
    i1 %0 = scmp lt i32 0, i32 %arg2;
    cbr i1 %0, [ ^while.body2 i32* %arg, i32* %arg1, i32 %arg2, i32 0 ], [ ^b1 i32* %arg, i32* %arg1, i32 %arg2 ];
^while.body1(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4):
    [2010 * i32]* %0 = getelementptr &([2010 * [2010 * i32]]* @A)[i32 0][i32 %arg3];
    i32* %1 = getelementptr &([2010 * i32]* %0)[i32 0][i32 %arg4];
    i32 %2 = call () -> i32 @getint();
    store i32* %1 with i32 %2;
    i32 %3 = add i32 %arg4, i32 1;
    i1 %4 = scmp lt i32 %3, i32 %arg2;
    cbr i1 %4, [ ^while.body1 i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32 %3 ], [ ^indirect i32* %arg, i32* %arg1, i32 %arg2, i32 %arg2, i32 %arg3 ];
^b1(i32* %arg, i32* %arg1, i32 %arg2):
    call (i32) -> void @starttime(i32 59);
    store i32* %arg1 with i32 0;
    ubr [ ^while.body3 i32* %arg1, i32* %arg, i32 %arg2, i32 0 ];
^while.body2(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3):
    i32* %0 = getelementptr &([2010 * i32]* @B)[i32 0][i32 %arg3];
    i32 %1 = call () -> i32 @getint();
    store i32* %0 with i32 %1;
    i32 %2 = add i32 %arg3, i32 1;
    i1 %3 = scmp lt i32 %2, i32 %arg2;
    cbr i1 %3, [ ^while.body2 i32* %arg, i32* %arg1, i32 %arg2, i32 %2 ], [ ^b1 i32* %arg, i32* %arg1, i32 %arg2 ];
^indirect(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4):
    i32 %0 = add i32 %arg4, i32 1;
    i1 %1 = scmp lt i32 %0, i32 %arg2;
    cbr i1 %1, [ ^while.body i32* %arg, i32* %arg1, i32 %arg3, i32 %0 ], [ ^b i32* %arg, i32* %arg1, i32 %arg3 ];
^while.body3(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3):
    [2010 * i32]* %0 = getelementptr &([2010 * [2010 * i32]]* @A)[i32 0][i32 0];
    i32* %1 = getelementptr &([2010 * i32]* @B)[i32 0][i32 0];
    i32* %2 = getelementptr &([2010 * i32]* @C)[i32 0][i32 0];
    i32* %n = alloc i32;
    store i32* %n with i32 %arg2;
    [2010 * i32]** %A = alloc [2010 * i32]*;
    i32** %b = alloc i32*;
    i32** %res = alloc i32*;
    i32* %x = alloc i32;
    i32* %y = alloc i32;
    store i32* %y with i32 0;
    store i32* %x with i32 11;
    i32* %i = alloc i32;
    i32* %j = alloc i32;
    i1 %3 = scmp lt i32 0, i32 %arg2;
    cbr i1 %3, [ ^while.body4 i32* %x, i32** %b, i32* %y, [2010 * i32]** %A, i32* %j, i32* %n, i32** %res, i32* %i, i32* %arg1, [2010 * i32]* %0, i32* %2, i32* %1, i32* %arg, [2010 * i32]* %0, i32* %1, i32* %2, i32 0, i32 %arg2, i32 11, i32 0 ], [ ^b2 i32* %n, i32** %res, i32* %x, i32** %b, i32* %y, [2010 * i32]** %A, i32* %j, i32* %i, i32* %arg1, [2010 * i32]* %0, i32* %2, i32* %1, i32* %arg, i32 %arg2, i32 %arg3, i32 %arg2, [2010 * i32]* %0, i32* %1, i32* %2, i32 11, i32 0 ];
^while.body4(i32* %arg, i32** %arg1, i32* %arg2, [2010 * i32]** %arg3, i32* %arg4, i32* %arg5, i32** %arg6, i32* %arg7, i32* %arg8, [2010 * i32]* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, [2010 * i32]* %arg13, i32* %arg14, i32* %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19):
    i32* %0 = getelementptr &(i32* %arg15)[i32 %arg16];
    store i32* %0 with i32 0;
    i32 %1 = load i32* %arg12;
    i32 %2 = load i32* %arg8;
    i32 %3 = add i32 %arg16, i32 1;
    i1 %4 = scmp lt i32 %3, i32 %arg17;
    cbr i1 %4, [ ^indirect1 i32* %arg, i32** %arg1, i32* %arg2, [2010 * i32]** %arg3, i32* %arg4, i32* %arg5, i32** %arg6, i32* %arg7, i32* %arg8, [2010 * i32]* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, [2010 * i32]* %arg13, i32* %arg14, i32* %arg15, i32 %3, i32 %arg17 ], [ ^b2 i32* %arg5, i32** %arg6, i32* %arg, i32** %arg1, i32* %arg2, [2010 * i32]** %arg3, i32* %arg4, i32* %arg7, i32* %arg8, [2010 * i32]* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32 %2, i32 %1, i32 %arg17, [2010 * i32]* %arg13, i32* %arg14, i32* %arg15, i32 %arg18, i32 %arg19 ];
^b2(i32* %arg, i32** %arg1, i32* %arg2, i32** %arg3, i32* %arg4, [2010 * i32]** %arg5, i32* %arg6, i32* %arg7, i32* %arg8, [2010 * i32]* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32 %arg13, i32 %arg14, i32 %arg15, [2010 * i32]* %arg16, i32* %arg17, i32* %arg18, i32 %arg19, i32 %arg20):
    store i32* %arg7 with i32 0;
    i1 %0 = scmp lt i32 0, i32 %arg15;
    cbr i1 %0, [ ^while.body5 i32* %arg, i32** %arg1, i32* %arg2, i32** %arg3, i32* %arg4, [2010 * i32]** %arg5, i32* %arg7, i32* %arg6, i32* %arg8, [2010 * i32]* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32 %arg13, i32 %arg14, i32 %arg15, [2010 * i32]* %arg16, i32* %arg17, i32* %arg18, i32 %arg19, i32 %arg20, i32 0 ], [ ^b3 i32* %arg, i32* %arg7, [2010 * i32]** %arg5, i32** %arg1, i32* %arg4, i32* %arg6, i32** %arg3, i32* %arg2, i32* %arg8, [2010 * i32]* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32 %arg13, i32 %arg14 ];
^indirect1(i32* %arg, i32** %arg1, i32* %arg2, [2010 * i32]** %arg3, i32* %arg4, i32* %arg5, i32** %arg6, i32* %arg7, i32* %arg8, [2010 * i32]* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, [2010 * i32]* %arg13, i32* %arg14, i32* %arg15, i32 %arg16, i32 %arg17):
    i32 %0 = load i32* %arg2;
    i32 %1 = load i32* %arg;
    ubr [ ^while.body4 i32* %arg, i32** %arg1, i32* %arg2, [2010 * i32]** %arg3, i32* %arg4, i32* %arg5, i32** %arg6, i32* %arg7, i32* %arg8, [2010 * i32]* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, [2010 * i32]* %arg13, i32* %arg14, i32* %arg15, i32 %arg16, i32 %arg17, i32 %1, i32 %0 ];
^while.body5(i32* %arg, i32** %arg1, i32* %arg2, i32** %arg3, i32* %arg4, [2010 * i32]** %arg5, i32* %arg6, i32* %arg7, i32* %arg8, [2010 * i32]* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32 %arg13, i32 %arg14, i32 %arg15, [2010 * i32]* %arg16, i32* %arg17, i32* %arg18, i32 %arg19, i32 %arg20, i32 %arg21):
    store i32* %arg7 with i32 0;
    i1 %0 = scmp lt i32 0, i32 %arg15;
    cbr i1 %0, [ ^while.body6 i32** %arg1, i32* %arg2, i32** %arg3, i32* %arg4, i32* %arg, i32* %arg7, [2010 * i32]** %arg5, i32* %arg6, i32* %arg8, [2010 * i32]* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32 %arg13, i32 %arg14, i32 %arg15, [2010 * i32]* %arg16, i32* %arg17, i32* %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i32 0 ], [ ^b4 i32** %arg1, i32* %arg2, i32** %arg3, i32* %arg4, [2010 * i32]** %arg5, i32* %arg7, i32* %arg, i32* %arg6, i32* %arg8, [2010 * i32]* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32 %arg13, i32 %arg14, i32 %arg15, [2010 * i32]* %arg16, i32* %arg17, i32* %arg18, i32 %arg19, i32 %arg20, i32 %arg21 ];
^b3(i32* %arg, i32* %arg1, [2010 * i32]** %arg2, i32** %arg3, i32* %arg4, i32* %arg5, i32** %arg6, i32* %arg7, i32* %arg8, [2010 * i32]* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32 %arg13, i32 %arg14):
    free i32* %arg7;
    free i32** %arg6;
    free i32* %arg5;
    free i32* %arg4;
    free i32** %arg3;
    free [2010 * i32]** %arg2;
    free i32* %arg1;
    free i32* %arg;
    i32* %n = alloc i32;
    store i32* %n with i32 %arg13;
    [2010 * i32]** %A = alloc [2010 * i32]*;
    i32** %b = alloc i32*;
    i32** %res = alloc i32*;
    i32* %x = alloc i32;
    i32* %y = alloc i32;
    store i32* %y with i32 0;
    store i32* %x with i32 11;
    i32* %i = alloc i32;
    i32* %j = alloc i32;
    i1 %0 = scmp lt i32 0, i32 %arg13;
    cbr i1 %0, [ ^while.body7 i32* %x, i32** %b, i32* %y, [2010 * i32]** %A, i32* %j, i32* %n, i32** %res, i32* %i, i32* %arg12, i32* %arg8, [2010 * i32]* %arg9, i32* %arg10, i32* %arg11, i32 0, i32 %arg13, i32 11, i32 0 ], [ ^b5 i32* %n, i32** %res, i32* %x, i32** %b, i32* %y, [2010 * i32]** %A, i32* %j, i32* %i, i32* %arg12, i32* %arg8, i32 %arg13, i32 %arg14, i32 %arg13, [2010 * i32]* %arg9, i32* %arg10, i32* %arg11, i32 11, i32 0 ];
^while.body6(i32** %arg, i32* %arg1, i32** %arg2, i32* %arg3, i32* %arg4, i32* %arg5, [2010 * i32]** %arg6, i32* %arg7, i32* %arg8, [2010 * i32]* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32 %arg13, i32 %arg14, i32 %arg15, [2010 * i32]* %arg16, i32* %arg17, i32* %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i32 %arg22):
    [2010 * i32]* %0 = getelementptr &([2010 * i32]* %arg16)[i32 %arg21];
    i32* %1 = getelementptr &([2010 * i32]* %0)[i32 0][i32 %arg22];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %2, i32 0;
    cbr i1 %3, [ ^indirect2 [2010 * i32]** %arg6, i32** %arg, i32* %arg4, i32* %arg3, i32* %arg5, i32** %arg2, i32* %arg7, i32* %arg1, i32 %arg22, i32 %arg21, i32* %arg12, i32* %arg11, i32* %arg10, [2010 * i32]* %arg9, i32* %arg8, i32 %arg13, i32 %arg14, i32 %arg15, [2010 * i32]* %arg16, i32* %arg17, i32* %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i32 %arg22 ], [ ^indirect3 i32* %arg3, i32* %arg1, i32* %arg4, i32** %arg2, i32* %arg5, [2010 * i32]** %arg6, i32** %arg, i32* %arg7, i32 %arg22, [2010 * i32]* %arg16, i32 %arg21, i32* %arg12, i32* %arg11, i32* %arg10, [2010 * i32]* %arg9, i32* %arg8, [2010 * i32]* %arg16, i32* %arg17, i32* %arg18 ];
^b4(i32** %arg, i32* %arg1, i32** %arg2, i32* %arg3, [2010 * i32]** %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, [2010 * i32]* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32 %arg13, i32 %arg14, i32 %arg15, [2010 * i32]* %arg16, i32* %arg17, i32* %arg18, i32 %arg19, i32 %arg20, i32 %arg21):
    i32 %0 = add i32 %arg21, i32 1;
    store i32* %arg7 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 %arg15;
    cbr i1 %1, [ ^while.body5 i32* %arg6, i32** %arg, i32* %arg1, i32** %arg2, i32* %arg3, [2010 * i32]** %arg4, i32* %arg7, i32* %arg5, i32* %arg8, [2010 * i32]* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32 %arg13, i32 %arg14, i32 %arg15, [2010 * i32]* %arg16, i32* %arg17, i32* %arg18, i32 %arg19, i32 %arg20, i32 %0 ], [ ^b3 i32* %arg6, i32* %arg7, [2010 * i32]** %arg4, i32** %arg, i32* %arg3, i32* %arg5, i32** %arg2, i32* %arg1, i32* %arg8, [2010 * i32]* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32 %arg13, i32 %arg14 ];
^while.body7(i32* %arg, i32** %arg1, i32* %arg2, [2010 * i32]** %arg3, i32* %arg4, i32* %arg5, i32** %arg6, i32* %arg7, i32* %arg8, i32* %arg9, [2010 * i32]* %arg10, i32* %arg11, i32* %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16):
    i32* %0 = getelementptr &(i32* %arg12)[i32 %arg13];
    store i32* %0 with i32 0;
    i32 %1 = load i32* %arg8;
    i32 %2 = load i32* %arg9;
    i32 %3 = add i32 %arg13, i32 1;
    i1 %4 = scmp lt i32 %3, i32 %arg14;
    cbr i1 %4, [ ^indirect4 i32* %arg, i32** %arg1, i32* %arg2, [2010 * i32]** %arg3, i32* %arg4, i32* %arg5, i32** %arg6, i32* %arg7, i32* %arg8, i32* %arg9, [2010 * i32]* %arg10, i32* %arg11, i32* %arg12, i32 %3, i32 %arg14 ], [ ^b5 i32* %arg5, i32** %arg6, i32* %arg, i32** %arg1, i32* %arg2, [2010 * i32]** %arg3, i32* %arg4, i32* %arg7, i32* %arg8, i32* %arg9, i32 %2, i32 %1, i32 %arg14, [2010 * i32]* %arg10, i32* %arg11, i32* %arg12, i32 %arg15, i32 %arg16 ];
^b5(i32* %arg, i32** %arg1, i32* %arg2, i32** %arg3, i32* %arg4, [2010 * i32]** %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, [2010 * i32]* %arg13, i32* %arg14, i32* %arg15, i32 %arg16, i32 %arg17):
    store i32* %arg7 with i32 0;
    i1 %0 = scmp lt i32 0, i32 %arg12;
    cbr i1 %0, [ ^while.body8 i32* %arg, i32** %arg1, i32* %arg2, i32** %arg3, i32* %arg4, [2010 * i32]** %arg5, i32* %arg7, i32* %arg6, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, [2010 * i32]* %arg13, i32* %arg14, i32* %arg15, i32 %arg16, i32 %arg17, i32 0 ], [ ^b6 i32* %arg, i32* %arg7, [2010 * i32]** %arg5, i32** %arg1, i32* %arg4, i32* %arg6, i32** %arg3, i32* %arg2, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11 ];
^indirect2([2010 * i32]** %arg, i32** %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32** %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32* %arg10, i32* %arg11, i32* %arg12, [2010 * i32]* %arg13, i32* %arg14, i32 %arg15, i32 %arg16, i32 %arg17, [2010 * i32]* %arg18, i32* %arg19, i32* %arg20, i32 %arg21, i32 %arg22, i32 %arg23, i32 %arg24):
    i32* %0 = getelementptr &(i32* %arg19)[i32 %arg9];
    i32 %1 = load i32* %0;
    i32 %2 = mul i32 %arg21, i32 %1;
    i32* %3 = getelementptr &(i32* %arg19)[i32 %arg8];
    i32 %4 = load i32* %3;
    i32 %5 = add i32 %2, i32 %4;
    store i32* %arg7 with i32 %5;
    i32 %6 = sub i32 %arg22, i32 %5;
    store i32* %arg3 with i32 %6;
    i32 %7 = add i32 %arg24, i32 1;
    store i32* %arg4 with i32 %7;
    ubr [ ^while.header i32* %arg6, [2010 * i32]** %arg, i32* %arg3, i32** %arg5, i32* %arg7, i32** %arg1, i32* %arg2, i32* %arg4, i32 %7, i32* %arg10, i32* %arg11, i32* %arg12, [2010 * i32]* %arg13, i32* %arg14, i32 %arg15, i32 %arg16, i32 %arg17, [2010 * i32]* %arg18, i32* %arg19, i32* %arg20, i32 %5, i32 %6, i32 %arg23, i32 %7 ];
^indirect3(i32* %arg, i32* %arg1, i32* %arg2, i32** %arg3, i32* %arg4, [2010 * i32]** %arg5, i32** %arg6, i32* %arg7, i32 %arg8, [2010 * i32]* %arg9, i32 %arg10, i32* %arg11, i32* %arg12, i32* %arg13, [2010 * i32]* %arg14, i32* %arg15, [2010 * i32]* %arg16, i32* %arg17, i32* %arg18):
    i32* %0 = getelementptr &(i32* %arg18)[i32 %arg10];
    i32 %1 = load i32* %0;
    [2010 * i32]* %2 = getelementptr &([2010 * i32]* %arg9)[i32 %arg10];
    i32* %3 = getelementptr &([2010 * i32]* %2)[i32 0][i32 %arg8];
    i32 %4 = load i32* %3;
    i32* %5 = getelementptr &(i32* %arg17)[i32 %arg8];
    i32 %6 = load i32* %5;
    i32 %7 = mul i32 %4, i32 %6;
    i32 %8 = add i32 %1, i32 %7;
    store i32* %0 with i32 %8;
    i32 %9 = load i32* %arg4;
    i32 %10 = load i32* %arg7;
    i32 %11 = load i32* %arg;
    i32 %12 = load i32* %arg1;
    i32 %13 = load i32* %arg2;
    i32 %14 = load i32* %arg11;
    i32 %15 = load i32* %arg15;
    i32 %16 = add i32 %9, i32 1;
    store i32* %arg4 with i32 %16;
    ubr [ ^while.header i32* %arg7, [2010 * i32]** %arg5, i32* %arg, i32** %arg3, i32* %arg1, i32** %arg6, i32* %arg2, i32* %arg4, i32 %16, i32* %arg11, i32* %arg12, i32* %arg13, [2010 * i32]* %arg14, i32* %arg15, i32 %15, i32 %14, i32 %13, [2010 * i32]* %arg16, i32* %arg17, i32* %arg18, i32 %12, i32 %11, i32 %10, i32 %16 ];
^indirect4(i32* %arg, i32** %arg1, i32* %arg2, [2010 * i32]** %arg3, i32* %arg4, i32* %arg5, i32** %arg6, i32* %arg7, i32* %arg8, i32* %arg9, [2010 * i32]* %arg10, i32* %arg11, i32* %arg12, i32 %arg13, i32 %arg14):
    i32 %0 = load i32* %arg2;
    i32 %1 = load i32* %arg;
    ubr [ ^while.body7 i32* %arg, i32** %arg1, i32* %arg2, [2010 * i32]** %arg3, i32* %arg4, i32* %arg5, i32** %arg6, i32* %arg7, i32* %arg8, i32* %arg9, [2010 * i32]* %arg10, i32* %arg11, i32* %arg12, i32 %arg13, i32 %arg14, i32 %1, i32 %0 ];
^while.body8(i32* %arg, i32** %arg1, i32* %arg2, i32** %arg3, i32* %arg4, [2010 * i32]** %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, [2010 * i32]* %arg13, i32* %arg14, i32* %arg15, i32 %arg16, i32 %arg17, i32 %arg18):
    store i32* %arg7 with i32 0;
    i1 %0 = scmp lt i32 0, i32 %arg12;
    cbr i1 %0, [ ^while.body9 i32** %arg1, i32* %arg2, i32** %arg3, i32* %arg4, i32* %arg, i32* %arg7, [2010 * i32]** %arg5, i32* %arg6, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, [2010 * i32]* %arg13, i32* %arg14, i32* %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 0 ], [ ^b7 i32** %arg1, i32* %arg2, i32** %arg3, i32* %arg4, [2010 * i32]** %arg5, i32* %arg7, i32* %arg, i32* %arg6, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, [2010 * i32]* %arg13, i32* %arg14, i32* %arg15, i32 %arg16, i32 %arg17, i32 %arg18 ];
^b6(i32* %arg, i32* %arg1, [2010 * i32]** %arg2, i32** %arg3, i32* %arg4, i32* %arg5, i32** %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11):
    free i32* %arg7;
    free i32** %arg6;
    free i32* %arg5;
    free i32* %arg4;
    free i32** %arg3;
    free [2010 * i32]** %arg2;
    free i32* %arg1;
    free i32* %arg;
    i32 %0 = add i32 %arg11, i32 1;
    store i32* %arg8 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 50;
    cbr i1 %1, [ ^while.body3 i32* %arg8, i32* %arg9, i32 %arg10, i32 %0 ], [ ^b8 i32 %arg10 ];
^while.header(i32* %arg, [2010 * i32]** %arg1, i32* %arg2, i32** %arg3, i32* %arg4, i32** %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32* %arg9, i32* %arg10, i32* %arg11, [2010 * i32]* %arg12, i32* %arg13, i32 %arg14, i32 %arg15, i32 %arg16, [2010 * i32]* %arg17, i32* %arg18, i32* %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23):
    i1 %0 = scmp lt i32 %arg8, i32 %arg16;
    cbr i1 %0, [ ^while.body6 i32** %arg5, i32* %arg4, i32** %arg3, i32* %arg2, i32* %arg6, i32* %arg7, [2010 * i32]** %arg1, i32* %arg, i32* %arg13, [2010 * i32]* %arg12, i32* %arg11, i32* %arg10, i32* %arg9, i32 %arg14, i32 %arg15, i32 %arg16, [2010 * i32]* %arg17, i32* %arg18, i32* %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23 ], [ ^b4 i32** %arg5, i32* %arg4, i32** %arg3, i32* %arg2, [2010 * i32]** %arg1, i32* %arg7, i32* %arg6, i32* %arg, i32* %arg13, [2010 * i32]* %arg12, i32* %arg11, i32* %arg10, i32* %arg9, i32 %arg14, i32 %arg15, i32 %arg16, [2010 * i32]* %arg17, i32* %arg18, i32* %arg19, i32 %arg20, i32 %arg21, i32 %arg22 ];
^while.body9(i32** %arg, i32* %arg1, i32** %arg2, i32* %arg3, i32* %arg4, i32* %arg5, [2010 * i32]** %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, [2010 * i32]* %arg13, i32* %arg14, i32* %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19):
    [2010 * i32]* %0 = getelementptr &([2010 * i32]* %arg13)[i32 %arg18];
    i32* %1 = getelementptr &([2010 * i32]* %0)[i32 0][i32 %arg19];
    i32 %2 = load i32* %1;
    i1 %3 = scmp eq i32 %2, i32 0;
    cbr i1 %3, [ ^indirect5 [2010 * i32]** %arg6, i32** %arg, i32* %arg4, i32* %arg3, i32* %arg5, i32** %arg2, i32* %arg7, i32* %arg1, i32 %arg19, i32 %arg18, i32* %arg9, i32* %arg8, i32 %arg10, i32 %arg11, i32 %arg12, [2010 * i32]* %arg13, i32* %arg14, i32* %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19 ], [ ^indirect6 i32* %arg3, i32* %arg1, i32* %arg4, i32** %arg2, i32* %arg5, [2010 * i32]** %arg6, i32** %arg, i32* %arg7, i32 %arg19, [2010 * i32]* %arg13, i32 %arg18, i32* %arg9, i32* %arg8, [2010 * i32]* %arg13, i32* %arg14, i32* %arg15 ];
^b7(i32** %arg, i32* %arg1, i32** %arg2, i32* %arg3, [2010 * i32]** %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, [2010 * i32]* %arg13, i32* %arg14, i32* %arg15, i32 %arg16, i32 %arg17, i32 %arg18):
    i32 %0 = add i32 %arg18, i32 1;
    store i32* %arg7 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 %arg12;
    cbr i1 %1, [ ^while.body8 i32* %arg6, i32** %arg, i32* %arg1, i32** %arg2, i32* %arg3, [2010 * i32]** %arg4, i32* %arg7, i32* %arg5, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, [2010 * i32]* %arg13, i32* %arg14, i32* %arg15, i32 %arg16, i32 %arg17, i32 %0 ], [ ^b6 i32* %arg6, i32* %arg7, [2010 * i32]** %arg4, i32** %arg, i32* %arg3, i32* %arg5, i32** %arg2, i32* %arg1, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11 ];
^b8(i32 %arg):
    call (i32) -> void @stoptime(i32 67);
    i32* %0 = getelementptr &([2010 * i32]* @C)[i32 0][i32 0];
    call (i32, i32*) -> void @putarray(i32 %arg, i32* %0);
    ret i32 0;
^indirect5([2010 * i32]** %arg, i32** %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32** %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32* %arg10, i32* %arg11, i32 %arg12, i32 %arg13, i32 %arg14, [2010 * i32]* %arg15, i32* %arg16, i32* %arg17, i32 %arg18, i32 %arg19, i32 %arg20, i32 %arg21):
    i32* %0 = getelementptr &(i32* %arg16)[i32 %arg9];
    i32 %1 = load i32* %0;
    i32 %2 = mul i32 %arg18, i32 %1;
    i32* %3 = getelementptr &(i32* %arg16)[i32 %arg8];
    i32 %4 = load i32* %3;
    i32 %5 = add i32 %2, i32 %4;
    store i32* %arg7 with i32 %5;
    i32 %6 = sub i32 %arg19, i32 %5;
    store i32* %arg3 with i32 %6;
    i32 %7 = add i32 %arg21, i32 1;
    store i32* %arg4 with i32 %7;
    ubr [ ^while.header1 i32* %arg6, [2010 * i32]** %arg, i32* %arg3, i32** %arg5, i32* %arg7, i32** %arg1, i32* %arg2, i32* %arg4, i32 %7, i32* %arg10, i32* %arg11, i32 %arg12, i32 %arg13, i32 %arg14, [2010 * i32]* %arg15, i32* %arg16, i32* %arg17, i32 %5, i32 %6, i32 %arg20, i32 %7 ];
^indirect6(i32* %arg, i32* %arg1, i32* %arg2, i32** %arg3, i32* %arg4, [2010 * i32]** %arg5, i32** %arg6, i32* %arg7, i32 %arg8, [2010 * i32]* %arg9, i32 %arg10, i32* %arg11, i32* %arg12, [2010 * i32]* %arg13, i32* %arg14, i32* %arg15):
    i32* %0 = getelementptr &(i32* %arg15)[i32 %arg10];
    i32 %1 = load i32* %0;
    [2010 * i32]* %2 = getelementptr &([2010 * i32]* %arg9)[i32 %arg10];
    i32* %3 = getelementptr &([2010 * i32]* %2)[i32 0][i32 %arg8];
    i32 %4 = load i32* %3;
    i32* %5 = getelementptr &(i32* %arg14)[i32 %arg8];
    i32 %6 = load i32* %5;
    i32 %7 = mul i32 %4, i32 %6;
    i32 %8 = add i32 %1, i32 %7;
    store i32* %0 with i32 %8;
    i32 %9 = load i32* %arg4;
    i32 %10 = load i32* %arg7;
    i32 %11 = load i32* %arg;
    i32 %12 = load i32* %arg1;
    i32 %13 = load i32* %arg2;
    i32 %14 = load i32* %arg12;
    i32 %15 = load i32* %arg11;
    i32 %16 = add i32 %9, i32 1;
    store i32* %arg4 with i32 %16;
    ubr [ ^while.header1 i32* %arg7, [2010 * i32]** %arg5, i32* %arg, i32** %arg3, i32* %arg1, i32** %arg6, i32* %arg2, i32* %arg4, i32 %16, i32* %arg11, i32* %arg12, i32 %15, i32 %14, i32 %13, [2010 * i32]* %arg13, i32* %arg14, i32* %arg15, i32 %12, i32 %11, i32 %10, i32 %16 ];
^while.header1(i32* %arg, [2010 * i32]** %arg1, i32* %arg2, i32** %arg3, i32* %arg4, i32** %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32* %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13, [2010 * i32]* %arg14, i32* %arg15, i32* %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20):
    i1 %0 = scmp lt i32 %arg8, i32 %arg13;
    cbr i1 %0, [ ^while.body9 i32** %arg5, i32* %arg4, i32** %arg3, i32* %arg2, i32* %arg6, i32* %arg7, [2010 * i32]** %arg1, i32* %arg, i32* %arg10, i32* %arg9, i32 %arg11, i32 %arg12, i32 %arg13, [2010 * i32]* %arg14, i32* %arg15, i32* %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20 ], [ ^b7 i32** %arg5, i32* %arg4, i32** %arg3, i32* %arg2, [2010 * i32]** %arg1, i32* %arg7, i32* %arg6, i32* %arg, i32* %arg10, i32* %arg9, i32 %arg11, i32 %arg12, i32 %arg13, [2010 * i32]* %arg14, i32* %arg15, i32* %arg16, i32 %arg17, i32 %arg18, i32 %arg19 ];
}
