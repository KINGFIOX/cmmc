internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [10000 * i32]* @a = [];
func @main() -> i32 { NoRecurse Entry } {
^entry():
    [3 * i32]* %seed = alloc [3 * i32];
    i32* %0 = getelementptr &([3 * i32]* %seed)[i32 0][i32 0];
    store i32* %0 with i32 19971231;
    i32* %1 = getelementptr &([3 * i32]* %seed)[i32 0][i32 1];
    store i32* %1 with i32 19981013;
    i32* %2 = getelementptr &([3 * i32]* %seed)[i32 0][i32 2];
    store i32* %2 with i32 1000000007;
    i32* %staticvalue = alloc i32;
    i32* %n = alloc i32;
    i32 %3 = call () -> i32 @getint();
    i32 %4 = call () -> i32 @getint();
    call (i32) -> void @starttime(i32 56);
    i1 %5 = scmp gt i32 %3, i32 0;
    cbr i1 %5, [ ^while.body i32* %n, i32* %staticvalue, i32* %2, i32* %1, i32* %0, i32 %4, i32 %3, i32 1000000007, i32 19981013, i32 19971231 ], [ ^b ];
^while.body(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i32 %0 = sub i32 %arg6, i32 1;
    store i32* %arg with i32 %0;
    i32 %1 = mul i32 %arg5, i32 %arg9;
    i32 %2 = add i32 %1, i32 %arg8;
    i32 %3 = srem i32 %2, i32 %arg7;
    i1 %4 = scmp lt i32 %3, i32 0;
    cbr i1 %4, [ ^indirect i32 %3, i32 %arg7, i32* %arg, i32* %arg1, i32* %arg4, i32* %arg3, i32* %arg2, i32 %arg7, i32 %arg8, i32 %arg9, i32 %0 ], [ ^while.body1 i32 %3, i32* %arg, i32* %arg1, i32 %3, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg7, i32 %arg8, i32 %arg9, i32 %0 ];
^b():
    call (i32) -> void @stoptime(i32 64);
    i32* %0 = getelementptr &([10000 * i32]* @a)[i32 0][i32 0];
    call (i32, i32*) -> void @putarray(i32 10000, i32* %0);
    ret i32 0;
^indirect(i32 %arg, i32 %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i32 %0 = add i32 %arg, i32 %arg1;
    ubr [ ^while.body1 i32 %0, i32* %arg2, i32* %arg3, i32 %0, i32* %arg6, i32* %arg5, i32* %arg4, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10 ];
^while.body1(i32 %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i32 %0 = srem i32 %arg, i32 300000;
    i32 %1 = mul i32 %arg3, i32 %arg9;
    i32 %2 = add i32 %1, i32 %arg8;
    i32 %3 = srem i32 %2, i32 %arg7;
    store i32* %arg2 with i32 %3;
    i1 %4 = scmp lt i32 %3, i32 0;
    cbr i1 %4, [ ^indirect1 i32 %3, i32 %arg7, i32* %arg2, i32* %arg1, i32* %arg2, i32* %arg4, i32* %arg5, i32* %arg6, i32 %0, i32 %arg10 ], [ ^while.body2 i32 %3, i32* %arg1, i32* %arg2, i32 %0, i32* %arg6, i32* %arg5, i32* %arg4, i32 %3, i32 %arg10 ];
^indirect1(i32 %arg, i32 %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9):
    i32 %0 = add i32 %arg, i32 %arg1;
    store i32* %arg2 with i32 %0;
    ubr [ ^while.body2 i32 %0, i32* %arg3, i32* %arg4, i32 %arg8, i32* %arg7, i32* %arg6, i32* %arg5, i32 %0, i32 %arg9 ];
^while.body2(i32 %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8):
    i32 %0 = srem i32 %arg, i32 2;
    [31 * i32]* %x = alloc [31 * i32];
    i32* %1 = getelementptr &([31 * i32]* %x)[i32 0][i32 0];
    i32* %2 = getelementptr &([31 * i32]* %x)[i32 0][i32 1];
    i32* %3 = getelementptr &([31 * i32]* %x)[i32 0][i32 2];
    i32* %4 = getelementptr &([31 * i32]* %x)[i32 0][i32 3];
    i32* %5 = getelementptr &([31 * i32]* %x)[i32 0][i32 4];
    i32* %6 = getelementptr &([31 * i32]* %x)[i32 0][i32 5];
    i32* %7 = getelementptr &([31 * i32]* %x)[i32 0][i32 6];
    i32* %8 = getelementptr &([31 * i32]* %x)[i32 0][i32 7];
    i32* %9 = getelementptr &([31 * i32]* %x)[i32 0][i32 8];
    i32* %10 = getelementptr &([31 * i32]* %x)[i32 0][i32 9];
    i32* %11 = getelementptr &([31 * i32]* %x)[i32 0][i32 10];
    i32* %12 = getelementptr &([31 * i32]* %x)[i32 0][i32 11];
    i32* %13 = getelementptr &([31 * i32]* %x)[i32 0][i32 12];
    i32* %14 = getelementptr &([31 * i32]* %x)[i32 0][i32 13];
    i32* %15 = getelementptr &([31 * i32]* %x)[i32 0][i32 14];
    i32* %16 = getelementptr &([31 * i32]* %x)[i32 0][i32 15];
    i32* %17 = getelementptr &([31 * i32]* %x)[i32 0][i32 16];
    i32* %18 = getelementptr &([31 * i32]* %x)[i32 0][i32 17];
    i32* %19 = getelementptr &([31 * i32]* %x)[i32 0][i32 18];
    i32* %20 = getelementptr &([31 * i32]* %x)[i32 0][i32 19];
    i32* %21 = getelementptr &([31 * i32]* %x)[i32 0][i32 20];
    i32* %22 = getelementptr &([31 * i32]* %x)[i32 0][i32 21];
    i32* %23 = getelementptr &([31 * i32]* %x)[i32 0][i32 22];
    i32* %24 = getelementptr &([31 * i32]* %x)[i32 0][i32 23];
    i32* %25 = getelementptr &([31 * i32]* %x)[i32 0][i32 24];
    i32* %26 = getelementptr &([31 * i32]* %x)[i32 0][i32 25];
    i32* %27 = getelementptr &([31 * i32]* %x)[i32 0][i32 26];
    i32* %28 = getelementptr &([31 * i32]* %x)[i32 0][i32 27];
    i32* %29 = getelementptr &([31 * i32]* %x)[i32 0][i32 28];
    i32* %30 = getelementptr &([31 * i32]* %x)[i32 0][i32 29];
    i32* %31 = getelementptr &([31 * i32]* %x)[i32 0][i32 30];
    store i32* %1 with i32 1;
    store i32* %2 with i32 2;
    store i32* %3 with i32 4;
    store i32* %4 with i32 8;
    store i32* %5 with i32 16;
    store i32* %6 with i32 32;
    store i32* %7 with i32 64;
    store i32* %8 with i32 128;
    store i32* %9 with i32 256;
    store i32* %10 with i32 512;
    store i32* %11 with i32 1024;
    store i32* %12 with i32 2048;
    store i32* %13 with i32 4096;
    store i32* %14 with i32 8192;
    store i32* %15 with i32 16384;
    store i32* %16 with i32 32768;
    store i32* %17 with i32 65536;
    store i32* %18 with i32 131072;
    store i32* %19 with i32 262144;
    store i32* %20 with i32 524288;
    store i32* %21 with i32 1048576;
    store i32* %22 with i32 2097152;
    store i32* %23 with i32 4194304;
    store i32* %24 with i32 8388608;
    store i32* %25 with i32 16777216;
    store i32* %26 with i32 33554432;
    store i32* %27 with i32 67108864;
    store i32* %28 with i32 134217728;
    store i32* %29 with i32 268435456;
    store i32* %30 with i32 536870912;
    store i32* %31 with i32 1073741824;
    i32 %32 = sdiv i32 %arg3, i32 30;
    i1 %33 = scmp ge i32 %32, i32 10000;
    cbr i1 %33, [ ^while.body3 i32* %arg2, i32* %arg1, i32* %arg6, i32* %arg5, i32* %arg4, i32 %arg7, i32 %arg8 ], [ ^indirect2 [31 * i32]* %x, i32 %arg3, i32 %32, i32* %arg1, i32* %arg2, i32* %arg4, i32* %arg5, i32* %arg6, i32 %0 ];
^while.body3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6):
    i1 %0 = scmp gt i32 %arg6, i32 0;
    cbr i1 %0, [ ^indirect3 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6 ], [ ^b ];
^indirect2([31 * i32]* %arg, i32 %arg1, i32 %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8):
    i32* %0 = getelementptr &([10000 * i32]* @a)[i32 0][i32 %arg2];
    i32 %1 = load i32* %0;
    i32 %2 = srem i32 %arg1, i32 30;
    i32* %3 = getelementptr &([31 * i32]* %arg)[i32 0][i32 %2];
    i32 %4 = load i32* %3;
    i32 %5 = sdiv i32 %1, i32 %4;
    i32 %6 = srem i32 %5, i32 2;
    i1 %7 = scmp neq i32 %6, i32 %arg8;
    cbr i1 %7, [ ^indirect4 i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32* %3, i32* %0, i32 %6 ], [ ^b1 i32 0, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %0, i32 %1 ];
^indirect3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6):
    i32 %0 = load i32* %arg4;
    i32 %1 = load i32* %arg3;
    i32 %2 = load i32* %arg2;
    ubr [ ^while.body i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %2, i32 %1, i32 %0 ];
^indirect4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32* %arg7, i32 %arg8):
    i1 %0 = scmp eq i32 %arg8, i32 0;
    cbr i1 %0, [ ^if.then i32* %arg1, i32* %arg, i32* %arg4, i32* %arg3, i32* %arg2, i32 %arg5, i32* %arg6, i32* %arg7 ], [ ^b2 i32* %arg1, i32* %arg, i32* %arg4, i32* %arg3, i32* %arg2, i32 %arg5, i32 0, i32* %arg6, i32* %arg7 ];
^b1(i32 %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7):
    i32 %0 = add i32 %arg, i32 %arg7;
    store i32* %arg6 with i32 %0;
    i32 %1 = load i32* %arg1;
    i32 %2 = load i32* %arg2;
    i1 %3 = scmp gt i32 %1, i32 0;
    cbr i1 %3, [ ^indirect3 i32* %arg1, i32* %arg2, i32* %arg5, i32* %arg4, i32* %arg3, i32 %2, i32 %1 ], [ ^b ];
^if.then(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32* %arg7):
    i1 %0 = scmp eq i32 %arg5, i32 1;
    cbr i1 %0, [ ^if.then1 i32* %arg1, i32* %arg, i32* %arg4, i32* %arg3, i32* %arg2, i32 %arg5, i32* %arg7, i32* %arg6 ], [ ^b2 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 0, i32* %arg6, i32* %arg7 ];
^b2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32* %arg7, i32* %arg8):
    i32 %0 = load i32* %arg8;
    i32 %1 = load i32* %arg7;
    i32 %2 = sdiv i32 %0, i32 %1;
    i32 %3 = srem i32 %2, i32 2;
    i1 %4 = scmp eq i32 %3, i32 1;
    cbr i1 %4, [ ^if.then2 i32* %arg1, i32* %arg, i32* %arg4, i32* %arg3, i32* %arg2, i32 %arg5, i32 %arg6, i32* %arg7, i32* %arg8 ], [ ^b1 i32 %arg6, i32* %arg1, i32* %arg, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg8, i32 %0 ];
^if.then1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32* %arg7):
    i32 %0 = load i32* %arg7;
    ubr [ ^b2 i32* %arg1, i32* %arg, i32* %arg4, i32* %arg3, i32* %arg2, i32 %arg5, i32 %0, i32* %arg7, i32* %arg6 ];
^if.then2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32* %arg7, i32* %arg8):
    i1 %0 = scmp eq i32 %arg5, i32 0;
    cbr i1 %0, [ ^if.then3 i32* %arg1, i32* %arg, i32* %arg4, i32* %arg3, i32* %arg2, i32 %arg6, i32* %arg8, i32* %arg7 ], [ ^indirect5 i32 %arg6, i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg8 ];
^if.then3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32* %arg6, i32* %arg7):
    i32 %0 = load i32* %arg7;
    i32 %1 = sub i32 %arg5, i32 %0;
    ubr [ ^indirect5 i32 %1, i32* %arg1, i32* %arg, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg6 ];
^indirect5(i32 %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    i32 %0 = load i32* %arg6;
    ubr [ ^b1 i32 %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %0 ];
}
