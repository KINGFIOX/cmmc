internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [10000 * i32]* @a = [];
func @main() -> i32 { NoRecurse Entry } {
^entry:
    [31 * i32]* %x = alloc [31 * i32];
    i32* %staticvalue = alloc i32;
    [3 * i32]* %seed = alloc [3 * i32];
    i32* %n = alloc i32;
    i32* %0 = getelementptr &([3 * i32]* %seed)[i64 0][i64 0];
    store i32* %0 with i32 19971231;
    i32* %1 = getelementptr &([3 * i32]* %seed)[i64 0][i64 1];
    store i32* %1 with i32 19981013;
    i32* %2 = getelementptr &([3 * i32]* %seed)[i64 0][i64 2];
    store i32* %2 with i32 1000000007;
    i32 %3 = call () -> i32 @getint();
    store i32* %n with i32 %3;
    i32 %4 = call () -> i32 @getint();
    store i32* %staticvalue with i32 %4;
    call (i32) -> void @starttime(i32 56);
    i32* %5 = getelementptr &([10000 * i32]* @a)[i64 0][i64 0];
    ubr ^while.header;
^while.header:
    i32 %6 = phi [^while.body2, i32 %79] [^entry, i32 %3];
    i32 %7 = phi [^while.body2, i32 %80] [^entry, i32 %4];
    i32 %8 = phi [^while.body2, i32 %79] [^entry, i32 %3];
    i1 %9 = scmp gt i32 %8, i32 0;
    cbr i1 %9(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %10 = add i32 %6, i32 -1;
    store i32* %n with i32 %10;
    i32 %11 = load i32* %0;
    i32 %12 = mul i32 %11, i32 %7;
    i32 %13 = load i32* %1;
    i32 %14 = add i32 %12, i32 %13;
    i32 %15 = load i32* %2;
    i32 %16 = srem i32 %14, i32 %15;
    i1 %17 = scmp lt i32 %16, i32 0;
    cbr i1 %17(prob = 0.5), ^if.then, ^b1;
^b:
    call (i32) -> void @stoptime(i32 64);
    call (i32, i32*) -> void @putarray(i32 10000, i32* %5);
    ret i32 0;
^if.then:
    i32 %18 = add i32 %15, i32 %16;
    ubr ^b1;
^b1:
    i32 %19 = phi [^if.then, i32 %18] [^while.body, i32 %16];
    i32 %20 = phi [^while.body, i32 %16] [^if.then, i32 %18];
    i32 %21 = srem i32 %20, i32 300000;
    i32 %22 = load i32* %0;
    i32 %23 = mul i32 %22, i32 %19;
    i32 %24 = load i32* %1;
    i32 %25 = add i32 %23, i32 %24;
    i32 %26 = load i32* %2;
    i32 %27 = srem i32 %25, i32 %26;
    store i32* %staticvalue with i32 %27;
    i1 %28 = scmp lt i32 %27, i32 0;
    cbr i1 %28(prob = 0.5), ^if.then1, ^b2;
^if.then1:
    i32 %29 = add i32 %26, i32 %27;
    store i32* %staticvalue with i32 %29;
    ubr ^b2;
^b2:
    i32 %30 = phi [^if.then1, i32 %29] [^b1, i32 %27];
    i32 %31 = phi [^b1, i32 %27] [^if.then1, i32 %29];
    i32 %32 = srem i32 %31, i32 2;
    i32* %33 = getelementptr &([31 * i32]* %x)[i64 0][i64 0];
    i32* %34 = getelementptr &([31 * i32]* %x)[i64 0][i64 1];
    i32* %35 = getelementptr &([31 * i32]* %x)[i64 0][i64 2];
    i32* %36 = getelementptr &([31 * i32]* %x)[i64 0][i64 3];
    i32* %37 = getelementptr &([31 * i32]* %x)[i64 0][i64 4];
    i32* %38 = getelementptr &([31 * i32]* %x)[i64 0][i64 5];
    i32* %39 = getelementptr &([31 * i32]* %x)[i64 0][i64 6];
    i32* %40 = getelementptr &([31 * i32]* %x)[i64 0][i64 7];
    i32* %41 = getelementptr &([31 * i32]* %x)[i64 0][i64 8];
    i32* %42 = getelementptr &([31 * i32]* %x)[i64 0][i64 9];
    i32* %43 = getelementptr &([31 * i32]* %x)[i64 0][i64 10];
    i32* %44 = getelementptr &([31 * i32]* %x)[i64 0][i64 11];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &([31 * i32]* %x)[i64 0][i64 12];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &([31 * i32]* %x)[i64 0][i64 13];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &([31 * i32]* %x)[i64 0][i64 14];
    store i32* %47 with i32 0;
    i32* %48 = getelementptr &([31 * i32]* %x)[i64 0][i64 15];
    store i32* %48 with i32 0;
    i32* %49 = getelementptr &([31 * i32]* %x)[i64 0][i64 16];
    store i32* %49 with i32 0;
    i32* %50 = getelementptr &([31 * i32]* %x)[i64 0][i64 17];
    store i32* %50 with i32 0;
    i32* %51 = getelementptr &([31 * i32]* %x)[i64 0][i64 18];
    store i32* %51 with i32 0;
    i32* %52 = getelementptr &([31 * i32]* %x)[i64 0][i64 19];
    store i32* %52 with i32 0;
    i32* %53 = getelementptr &([31 * i32]* %x)[i64 0][i64 20];
    store i32* %53 with i32 0;
    i32* %54 = getelementptr &([31 * i32]* %x)[i64 0][i64 21];
    store i32* %54 with i32 0;
    i32* %55 = getelementptr &([31 * i32]* %x)[i64 0][i64 22];
    store i32* %55 with i32 0;
    i32* %56 = getelementptr &([31 * i32]* %x)[i64 0][i64 23];
    store i32* %56 with i32 0;
    i32* %57 = getelementptr &([31 * i32]* %x)[i64 0][i64 24];
    store i32* %57 with i32 0;
    i32* %58 = getelementptr &([31 * i32]* %x)[i64 0][i64 25];
    store i32* %58 with i32 0;
    i32* %59 = getelementptr &([31 * i32]* %x)[i64 0][i64 26];
    store i32* %59 with i32 0;
    i32* %60 = getelementptr &([31 * i32]* %x)[i64 0][i64 27];
    store i32* %60 with i32 0;
    i32* %61 = getelementptr &([31 * i32]* %x)[i64 0][i64 28];
    store i32* %61 with i32 0;
    i32* %62 = getelementptr &([31 * i32]* %x)[i64 0][i64 29];
    store i32* %62 with i32 0;
    i32* %63 = getelementptr &([31 * i32]* %x)[i64 0][i64 30];
    store i32* %63 with i32 0;
    store i32* %33 with i32 1;
    store i32* %34 with i32 2;
    store i32* %35 with i32 4;
    store i32* %36 with i32 8;
    store i32* %37 with i32 16;
    store i32* %38 with i32 32;
    store i32* %39 with i32 64;
    store i32* %40 with i32 128;
    store i32* %41 with i32 256;
    store i32* %42 with i32 512;
    store i32* %43 with i32 1024;
    ubr ^while.header1;
^while.header1:
    i32 %64 = phi [^while.body1, i32 %64] [^b2, i32 %10];
    i32 %65 = phi [^while.body1, i32 %65] [^b2, i32 %30];
    i32 %66 = phi [^while.body1, i32 %72] [^b2, i32 10];
    i32 %67 = phi [^while.body1, i32 %67] [^b2, i32 %32];
    i32 %68 = phi [^while.body1, i32 %68] [^b2, i32 %21];
    i32* %69 = phi [^while.body1, i32* %69] [^b2, i32* %5];
    i32 %70 = phi [^b2, i32 10] [^while.body1, i32 %72];
    i1 %71 = scmp lt i32 %70, i32 30;
    cbr i1 %71(prob = 0.97), ^while.body1, ^b3;
^while.body1:
    i32 %72 = add i32 %66, i32 1;
    i32* %73 = getelementptr &([31 * i32]* %x)[i64 0][i32 %72];
    i32* %74 = getelementptr &(i32* %73)[i64 -1];
    i32 %75 = load i32* %74;
    i32 %76 = mul i32 %75, i32 2;
    store i32* %73 with i32 %76;
    ubr ^while.header1;
^b3:
    i32 %77 = sdiv i32 %68, i32 30;
    i1 %78 = scmp gt i32 %77, i32 9999;
    cbr i1 %78(prob = 0.5), ^while.body2, ^b4;
^while.body2:
    i32 %79 = phi [^b5, i32 %92] [^b3, i32 %64];
    i32 %80 = phi [^b5, i32 %93] [^b3, i32 %65];
    ubr ^while.header;
^b4:
    i32* %81 = getelementptr &(i32* %69)[i32 %77];
    i32 %82 = load i32* %81;
    i32 %83 = srem i32 %68, i32 30;
    i32* %84 = getelementptr &([31 * i32]* %x)[i64 0][i32 %83];
    i32 %85 = load i32* %84;
    i32 %86 = sdiv i32 %82, i32 %85;
    i32 %87 = srem i32 %86, i32 2;
    i1 %88 = scmp neq i32 %87, i32 %67;
    cbr i1 %88(prob = 0.5), ^if.then2, ^b5;
^b5:
    i32 %89 = phi [^if.then5, i32 %99] [^b4, i32 0] [^if.then6, i32 %108] [^b6, i32 %99];
    i32 %90 = load i32* %81;
    i32 %91 = add i32 %89, i32 %90;
    store i32* %81 with i32 %91;
    i32 %92 = load i32* %n;
    i32 %93 = load i32* %staticvalue;
    ubr ^while.body2;
^if.then2:
    i32 %94 = load i32* %81;
    i32 %95 = sdiv i32 %94, i32 %85;
    i32 %96 = srem i32 %95, i32 2;
    i1 %97 = scmp eq i32 %96, i32 0;
    cbr i1 %97(prob = 0.5), ^if.then3, ^b6;
^if.then3:
    i1 %98 = scmp eq i32 %67, i32 1;
    cbr i1 %98(prob = 0.5), ^if.then4, ^b6;
^b6:
    i32 %99 = phi [^if.then3, i32 0] [^if.then4, i32 %105] [^if.then2, i32 0];
    i32 %100 = load i32* %81;
    i32 %101 = load i32* %84;
    i32 %102 = sdiv i32 %100, i32 %101;
    i32 %103 = srem i32 %102, i32 2;
    i1 %104 = scmp eq i32 %103, i32 1;
    cbr i1 %104(prob = 0.5), ^if.then5, ^b5;
^if.then4:
    i32 %105 = load i32* %84;
    ubr ^b6;
^if.then5:
    i1 %106 = scmp eq i32 %67, i32 0;
    cbr i1 %106(prob = 0.5), ^if.then6, ^b5;
^if.then6:
    i32 %107 = load i32* %84;
    i32 %108 = sub i32 %99, i32 %107;
    ubr ^b5;
}
