internal func @getarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [1000 * [1000 * i32]]* @a;
internal [1000 * [1000 * i32]]* @b;
internal [1000 * [1000 * i32]]* @c;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %sum = alloc i32;
    i32* %i = alloc i32;
    store i32* %sum with i32 0;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = phi [^b1, i32 %10] [^entry, i32 0];
    i32 %1 = phi [^b1, i32 %8] [^entry, i32 0];
    i32 %2 = phi [^b1, i32 %10] [^entry, i32 0];
    i1 %3 = scmp lt i32 %2, i32 1000;
    cbr i1 %3(prob = 0.97), ^while.body, ^b;
^b:
    call (i32) -> void @starttime(i32 23);
    ubr ^while.header1;
^while.body:
    [1000 * i32]* %4 = getelementptr &([1000 * [1000 * i32]]* @a)[i64 0][i32 %0];
    i32* %5 = getelementptr &([1000 * i32]* %4)[i64 0][i64 0];
    i32 %6 = call (i32*) -> i32 @getarray(i32* %5);
    i32 %7 = load i32* %i;
    i32 %8 = load i32* %sum;
    i1 %9 = scmp neq i32 %6, i32 1000;
    cbr i1 %9(prob = 0.5), ^if.then, ^b1;
^b1:
    i32 %10 = add i32 %7, i32 1;
    store i32* %i with i32 %10;
    ubr ^while.header;
^while.header1:
    i32 %11 = phi [^b2, i32 %30] [^b, i32 0];
    i32 %12 = phi [^b2, i32 %17] [^b, i32 %1];
    i32 %13 = phi [^b2, i32 %30] [^b, i32 0];
    i1 %14 = scmp lt i32 %13, i32 1000;
    cbr i1 %14(prob = 0.97), ^while.header2, ^while.header3;
^if.then:
    ret i32 %6;
^while.header2:
    i32 %15 = phi [^while.header1, i32 %11] [^while.body1, i32 %15];
    i32 %16 = phi [^while.header1, i32 0] [^while.body1, i32 %29];
    i32 %17 = phi [^while.header1, i32 %12] [^while.body1, i32 %17];
    i32 %18 = phi [^while.header1, i32 0] [^while.body1, i32 %29];
    i1 %19 = scmp lt i32 %18, i32 1000;
    cbr i1 %19(prob = 0.97), ^while.body1, ^b2;
^while.header3:
    i32 %20 = phi [^while.header1, i32 0] [^b3, i32 %40];
    i32 %21 = phi [^while.header1, i32 %12] [^b3, i32 %33];
    i32 %22 = phi [^while.header1, i32 0] [^b3, i32 %40];
    i1 %23 = scmp lt i32 %22, i32 1000;
    cbr i1 %23(prob = 0.97), ^while.header4, ^while.header5;
^while.body1:
    [1000 * i32]* %24 = getelementptr &([1000 * [1000 * i32]]* @b)[i64 0][i32 %15];
    i32* %25 = getelementptr &([1000 * i32]* %24)[i64 0][i32 %16];
    [1000 * i32]* %26 = getelementptr &([1000 * [1000 * i32]]* @a)[i64 0][i32 %16];
    i32* %27 = getelementptr &([1000 * i32]* %26)[i64 0][i32 %15];
    i32 %28 = load i32* %27;
    store i32* %25 with i32 %28;
    i32 %29 = add i32 %16, i32 1;
    ubr ^while.header2;
^b2:
    i32 %30 = add i32 %15, i32 1;
    ubr ^while.header1;
^while.header4:
    i32 %31 = phi [^while.header3, i32 %20] [^b4, i32 %41];
    i32 %32 = phi [^while.header3, i32 0] [^b4, i32 %69];
    i32 %33 = phi [^while.header3, i32 %21] [^b4, i32 %44];
    i32 %34 = phi [^while.header3, i32 0] [^b4, i32 %69];
    i1 %35 = scmp lt i32 %34, i32 1000;
    cbr i1 %35(prob = 0.97), ^while.header6, ^b3;
^while.header5:
    i32 %36 = phi [^while.header3, i32 0] [^b6, i32 %101];
    i32 %37 = phi [^while.header3, i32 %21] [^b6, i32 %76];
    i32 %38 = phi [^while.header3, i32 0] [^b6, i32 %101];
    i1 %39 = scmp lt i32 %38, i32 1000;
    cbr i1 %39(prob = 0.97), ^while.header7, ^while.header8;
^b3:
    i32 %40 = add i32 %31, i32 1;
    ubr ^while.header3;
^while.header6:
    i32 %41 = phi [^while.header4, i32 %31] [^while.body2, i32 %41];
    i32 %42 = phi [^while.header4, i32 %32] [^while.body2, i32 %42];
    i32 %43 = phi [^while.header4, i32 0] [^while.body2, i32 %66];
    i32 %44 = phi [^while.header4, i32 %33] [^while.body2, i32 %44];
    i32 %45 = phi [^while.header4, i32 0] [^while.body2, i32 %65];
    i32 %46 = phi [^while.header4, i32 0] [^while.body2, i32 %66];
    i1 %47 = scmp lt i32 %46, i32 1000;
    cbr i1 %47(prob = 0.97), ^while.body2, ^b4;
^while.header7:
    i32 %48 = phi [^while.header5, i32 %36] [^b5, i32 %48];
    i32 %49 = phi [^while.header5, i32 0] [^b5, i32 %90];
    i32 %50 = phi [^while.header5, i32 %37] [^b5, i32 %50];
    i32 %51 = phi [^while.header5, i32 2147483647] [^b5, i32 %89];
    i32 %52 = phi [^while.header5, i32 0] [^b5, i32 %90];
    i1 %53 = scmp lt i32 %52, i32 1000;
    cbr i1 %53(prob = 0.97), ^while.body3, ^while.header9;
^while.header8:
    i32 %54 = phi [^while.header5, i32 0] [^b7, i32 %102];
    i32 %55 = phi [^while.header5, i32 %37] [^b7, i32 %82];
    i32 %56 = phi [^while.header5, i32 0] [^b7, i32 %102];
    i1 %57 = scmp lt i32 %56, i32 1000;
    cbr i1 %57(prob = 0.97), ^while.header10, ^while.header11;
^while.body2:
    [1000 * i32]* %58 = getelementptr &([1000 * [1000 * i32]]* @a)[i64 0][i32 %41];
    i32* %59 = getelementptr &([1000 * i32]* %58)[i64 0][i32 %43];
    i32 %60 = load i32* %59;
    [1000 * i32]* %61 = getelementptr &([1000 * [1000 * i32]]* @b)[i64 0][i32 %43];
    i32* %62 = getelementptr &([1000 * i32]* %61)[i64 0][i32 %42];
    i32 %63 = load i32* %62;
    i32 %64 = mul i32 %60, i32 %63;
    i32 %65 = add i32 %45, i32 %64;
    i32 %66 = add i32 %43, i32 1;
    ubr ^while.header6;
^b4:
    [1000 * i32]* %67 = getelementptr &([1000 * [1000 * i32]]* @c)[i64 0][i32 %41];
    i32* %68 = getelementptr &([1000 * i32]* %67)[i64 0][i32 %42];
    store i32* %68 with i32 %45;
    i32 %69 = add i32 %42, i32 1;
    ubr ^while.header4;
^while.body3:
    [1000 * i32]* %70 = getelementptr &([1000 * [1000 * i32]]* @c)[i64 0][i32 %48];
    i32* %71 = getelementptr &([1000 * i32]* %70)[i64 0][i32 %49];
    i32 %72 = load i32* %71;
    i1 %73 = scmp lt i32 %72, i32 %51;
    cbr i1 %73(prob = 0.5), ^if.then1, ^b5;
^while.header9:
    i32 %74 = phi [^while.header7, i32 %48] [^while.body4, i32 %74];
    i32 %75 = phi [^while.header7, i32 0] [^while.body4, i32 %93];
    i32 %76 = phi [^while.header7, i32 %50] [^while.body4, i32 %76];
    i32 %77 = phi [^while.header7, i32 %51] [^while.body4, i32 %77];
    i32 %78 = phi [^while.header7, i32 0] [^while.body4, i32 %93];
    i1 %79 = scmp lt i32 %78, i32 1000;
    cbr i1 %79(prob = 0.97), ^while.body4, ^b6;
^while.header10:
    i32 %80 = phi [^while.header8, i32 %54] [^while.body5, i32 %80];
    i32 %81 = phi [^while.header8, i32 0] [^while.body5, i32 %100];
    i32 %82 = phi [^while.header8, i32 %55] [^while.body5, i32 %82];
    i32 %83 = phi [^while.header8, i32 0] [^while.body5, i32 %100];
    i1 %84 = scmp lt i32 %83, i32 1000;
    cbr i1 %84(prob = 0.97), ^while.body5, ^b7;
^while.header11:
    i32 %85 = phi [^while.header8, i32 0] [^b9, i32 %113];
    i32 %86 = phi [^while.header8, i32 %55] [^b9, i32 %105];
    i32 %87 = phi [^while.header8, i32 0] [^b9, i32 %113];
    i1 %88 = scmp lt i32 %87, i32 1000;
    cbr i1 %88(prob = 0.97), ^while.header12, ^b8;
^if.then1:
    ubr ^b5;
^b5:
    i32 %89 = phi [^if.then1, i32 %72] [^while.body3, i32 %51];
    i32 %90 = add i32 %49, i32 1;
    ubr ^while.header7;
^while.body4:
    [1000 * i32]* %91 = getelementptr &([1000 * [1000 * i32]]* @c)[i64 0][i32 %74];
    i32* %92 = getelementptr &([1000 * i32]* %91)[i64 0][i32 %75];
    store i32* %92 with i32 %77;
    i32 %93 = add i32 %75, i32 1;
    ubr ^while.header9;
^while.body5:
    [1000 * i32]* %94 = getelementptr &([1000 * [1000 * i32]]* @c)[i64 0][i32 %80];
    i32* %95 = getelementptr &([1000 * i32]* %94)[i64 0][i32 %81];
    [1000 * i32]* %96 = getelementptr &([1000 * [1000 * i32]]* @c)[i64 0][i32 %81];
    i32* %97 = getelementptr &([1000 * i32]* %96)[i64 0][i32 %80];
    i32 %98 = load i32* %97;
    i32 %99 = neg i32 %98;
    store i32* %95 with i32 %99;
    i32 %100 = add i32 %81, i32 1;
    ubr ^while.header10;
^b6:
    i32 %101 = add i32 %74, i32 1;
    ubr ^while.header5;
^b7:
    i32 %102 = add i32 %80, i32 1;
    ubr ^while.header8;
^while.header12:
    i32 %103 = phi [^while.header11, i32 %85] [^while.body6, i32 %103];
    i32 %104 = phi [^while.header11, i32 0] [^while.body6, i32 %112];
    i32 %105 = phi [^while.header11, i32 %86] [^while.body6, i32 %111];
    i32 %106 = phi [^while.header11, i32 0] [^while.body6, i32 %112];
    i1 %107 = scmp lt i32 %106, i32 1000;
    cbr i1 %107(prob = 0.97), ^while.body6, ^b9;
^b8:
    call (i32) -> void @stoptime(i32 92);
    call (i32) -> void @putint(i32 %86);
    ret i32 0;
^while.body6:
    [1000 * i32]* %108 = getelementptr &([1000 * [1000 * i32]]* @c)[i64 0][i32 %103];
    i32* %109 = getelementptr &([1000 * i32]* %108)[i64 0][i32 %104];
    i32 %110 = load i32* %109;
    i32 %111 = add i32 %105, i32 %110;
    i32 %112 = add i32 %104, i32 1;
    ubr ^while.header12;
^b9:
    i32 %113 = add i32 %103, i32 1;
    ubr ^while.header11;
}
