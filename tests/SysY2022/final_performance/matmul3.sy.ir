internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [1000 * [1000 * i32]]* @a;
internal [1000 * [1000 * i32]]* @b;
internal [1000 * [1000 * i32]]* @c;
func @main() -> i32 { NoRecurse Entry } {
^entry():
    i32* %n = alloc i32;
    i32* %i = alloc i32;
    i32* %sum = alloc i32;
    store i32* %sum with i32 0;
    store i32* %i with i32 0;
    ubr [ ^while.body i32* %sum, i32* %n, i32* %i, i32 0 ];
^while.body(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3):
    [1000 * i32]* %0 = getelementptr &([1000 * [1000 * i32]]* @a)[i32 0][i32 %arg3];
    i32* %1 = getelementptr &([1000 * i32]* %0)[i32 0][i32 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    i32 %3 = load i32* %arg;
    i32 %4 = load i32* %arg2;
    store i32* %arg1 with i32 %2;
    i1 %5 = scmp neq i32 %2, i32 1000;
    cbr i1 %5, [ ^indirect i32 %2 ], [ ^b i32* %arg1, i32* %arg, i32* %arg2, i32 %4, i32 %3 ];
^b(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4):
    i32 %0 = add i32 %arg3, i32 1;
    store i32* %arg2 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 1000;
    cbr i1 %1, [ ^while.body i32* %arg1, i32* %arg, i32* %arg2, i32 %0 ], [ ^b1 i32 %arg4 ];
^indirect(i32 %arg):
    ret i32 %arg;
^b1(i32 %arg):
    call (i32) -> void @starttime(i32 23);
    ubr [ ^while.body1 i32 0, i32 0, i32 %arg ];
^while.body1(i32 %arg, i32 %arg1, i32 %arg2):
    [1000 * i32]* %0 = getelementptr &([1000 * [1000 * i32]]* @b)[i32 0][i32 %arg];
    i32* %1 = getelementptr &([1000 * i32]* %0)[i32 0][i32 %arg1];
    [1000 * i32]* %2 = getelementptr &([1000 * [1000 * i32]]* @a)[i32 0][i32 %arg1];
    i32* %3 = getelementptr &([1000 * i32]* %2)[i32 0][i32 %arg];
    i32 %4 = load i32* %3;
    store i32* %1 with i32 %4;
    i32 %5 = add i32 %arg1, i32 1;
    i1 %6 = scmp lt i32 %5, i32 1000;
    cbr i1 %6, [ ^while.body1 i32 %arg, i32 %5, i32 %arg2 ], [ ^b2 i32 %arg, i32 %arg2 ];
^b2(i32 %arg, i32 %arg1):
    i32 %0 = add i32 %arg, i32 1;
    i1 %1 = scmp lt i32 %0, i32 1000;
    cbr i1 %1, [ ^while.body1 i32 %0, i32 0, i32 %arg1 ], [ ^while.body2 i32 0, i32 0, i32 0, i32 %arg1, i32 0 ];
^while.body2(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4):
    [1000 * i32]* %0 = getelementptr &([1000 * [1000 * i32]]* @a)[i32 0][i32 %arg];
    i32* %1 = getelementptr &([1000 * i32]* %0)[i32 0][i32 %arg2];
    i32 %2 = load i32* %1;
    [1000 * i32]* %3 = getelementptr &([1000 * [1000 * i32]]* @b)[i32 0][i32 %arg2];
    i32* %4 = getelementptr &([1000 * i32]* %3)[i32 0][i32 %arg1];
    i32 %5 = load i32* %4;
    i32 %6 = mul i32 %2, i32 %5;
    i32 %7 = add i32 %arg4, i32 %6;
    i32 %8 = add i32 %arg2, i32 1;
    i1 %9 = scmp lt i32 %8, i32 1000;
    cbr i1 %9, [ ^while.body2 i32 %arg, i32 %arg1, i32 %8, i32 %arg3, i32 %7 ], [ ^b3 i32 %arg, i32 %arg1, i32 %arg3, i32 %7 ];
^b3(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    [1000 * i32]* %0 = getelementptr &([1000 * [1000 * i32]]* @c)[i32 0][i32 %arg];
    i32* %1 = getelementptr &([1000 * i32]* %0)[i32 0][i32 %arg1];
    store i32* %1 with i32 %arg3;
    i32 %2 = add i32 %arg1, i32 1;
    i1 %3 = scmp lt i32 %2, i32 1000;
    cbr i1 %3, [ ^while.body2 i32 %arg, i32 %2, i32 0, i32 %arg2, i32 0 ], [ ^b4 i32 %arg, i32 %arg2 ];
^b4(i32 %arg, i32 %arg1):
    i32 %0 = add i32 %arg, i32 1;
    i1 %1 = scmp lt i32 %0, i32 1000;
    cbr i1 %1, [ ^while.body2 i32 %0, i32 0, i32 0, i32 %arg1, i32 0 ], [ ^while.body3 i32 0, i32 0, i32 %arg1, i32 2147483647 ];
^while.body3(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    [1000 * i32]* %0 = getelementptr &([1000 * [1000 * i32]]* @c)[i32 0][i32 %arg];
    i32* %1 = getelementptr &([1000 * i32]* %0)[i32 0][i32 %arg1];
    i32 %2 = load i32* %1;
    i1 %3 = scmp lt i32 %2, i32 %arg3;
    cbr i1 %3, [ ^indirect1 i32 %arg1, i32 %2, i32 %arg, i32 %arg2 ], [ ^b5 i32 %arg1, i32 %arg, i32 %arg2, i32 %arg3 ];
^indirect1(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32 %0 = add i32 %arg, i32 1;
    i1 %1 = scmp lt i32 %0, i32 1000;
    cbr i1 %1, [ ^while.body3 i32 %arg2, i32 %0, i32 %arg3, i32 %arg1 ], [ ^while.body4 i32 %arg2, i32 0, i32 %arg3, i32 %arg1 ];
^b5(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32 %0 = add i32 %arg, i32 1;
    i1 %1 = scmp lt i32 %0, i32 1000;
    cbr i1 %1, [ ^while.body3 i32 %arg1, i32 %0, i32 %arg2, i32 %arg3 ], [ ^while.body4 i32 %arg1, i32 0, i32 %arg2, i32 %arg3 ];
^while.body4(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    [1000 * i32]* %0 = getelementptr &([1000 * [1000 * i32]]* @c)[i32 0][i32 %arg];
    i32* %1 = getelementptr &([1000 * i32]* %0)[i32 0][i32 %arg1];
    store i32* %1 with i32 %arg3;
    i32 %2 = add i32 %arg1, i32 1;
    i1 %3 = scmp lt i32 %2, i32 1000;
    cbr i1 %3, [ ^while.body4 i32 %arg, i32 %2, i32 %arg2, i32 %arg3 ], [ ^b6 i32 %arg, i32 %arg2 ];
^b6(i32 %arg, i32 %arg1):
    i32 %0 = add i32 %arg, i32 1;
    i1 %1 = scmp lt i32 %0, i32 1000;
    cbr i1 %1, [ ^while.body3 i32 %0, i32 0, i32 %arg1, i32 2147483647 ], [ ^while.body5 i32 0, i32 0, i32 %arg1 ];
^while.body5(i32 %arg, i32 %arg1, i32 %arg2):
    [1000 * i32]* %0 = getelementptr &([1000 * [1000 * i32]]* @c)[i32 0][i32 %arg];
    i32* %1 = getelementptr &([1000 * i32]* %0)[i32 0][i32 %arg1];
    [1000 * i32]* %2 = getelementptr &([1000 * [1000 * i32]]* @c)[i32 0][i32 %arg1];
    i32* %3 = getelementptr &([1000 * i32]* %2)[i32 0][i32 %arg];
    i32 %4 = load i32* %3;
    i32 %5 = neg i32 %4;
    store i32* %1 with i32 %5;
    i32 %6 = add i32 %arg1, i32 1;
    i1 %7 = scmp lt i32 %6, i32 1000;
    cbr i1 %7, [ ^while.body5 i32 %arg, i32 %6, i32 %arg2 ], [ ^b7 i32 %arg, i32 %arg2 ];
^b7(i32 %arg, i32 %arg1):
    i32 %0 = add i32 %arg, i32 1;
    i1 %1 = scmp lt i32 %0, i32 1000;
    cbr i1 %1, [ ^while.body5 i32 %0, i32 0, i32 %arg1 ], [ ^while.body6 i32 0, i32 0, i32 %arg1 ];
^while.body6(i32 %arg, i32 %arg1, i32 %arg2):
    [1000 * i32]* %0 = getelementptr &([1000 * [1000 * i32]]* @c)[i32 0][i32 %arg];
    i32* %1 = getelementptr &([1000 * i32]* %0)[i32 0][i32 %arg1];
    i32 %2 = load i32* %1;
    i32 %3 = add i32 %arg2, i32 %2;
    i32 %4 = add i32 %arg1, i32 1;
    i1 %5 = scmp lt i32 %4, i32 1000;
    cbr i1 %5, [ ^while.body6 i32 %arg, i32 %4, i32 %3 ], [ ^b8 i32 %arg, i32 %3 ];
^b8(i32 %arg, i32 %arg1):
    i32 %0 = add i32 %arg, i32 1;
    i1 %1 = scmp lt i32 %0, i32 1000;
    cbr i1 %1, [ ^while.body6 i32 %0, i32 0, i32 %arg1 ], [ ^b9 i32 %arg1 ];
^b9(i32 %arg):
    call (i32) -> void @stoptime(i32 92);
    call (i32) -> void @putint(i32 %arg);
    ret i32 0;
}
