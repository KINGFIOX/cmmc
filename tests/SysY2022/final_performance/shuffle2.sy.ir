internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [10000000 * i32]* @head;
internal [10000000 * i32]* @next;
internal [10000000 * i32]* @nextvalue;
internal [10000000 * i32]* @key;
internal [10000000 * i32]* @value;
internal [10000000 * i32]* @keys;
internal [10000000 * i32]* @values;
internal [10000000 * i32]* @requests;
internal [10000000 * i32]* @ans;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %cnt = alloc i32;
    i32* %hashmod = alloc i32;
    i32* %ks = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %hashmod with i32 %0;
    i32* %1 = getelementptr &([10000000 * i32]* @keys)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    store i32* %ks with i32 %2;
    i32* %3 = getelementptr &([10000000 * i32]* @values)[i64 0][i64 0];
    i32 %4 = call (i32*) -> i32 @getarray(i32* %3);
    i32* %5 = getelementptr &([10000000 * i32]* @requests)[i64 0][i64 0];
    i32 %6 = call (i32*) -> i32 @getarray(i32* %5);
    i32 %7 = load i32* %ks;
    i32 %8 = load i32* %hashmod;
    i32 %9 = load i32* %cnt;
    call (i32) -> void @starttime(i32 78);
    ubr ^while.header;
^while.header:
    i32 %10 = phi [^while.body2, i32 %50] [^entry, i32 %7];
    i32 %11 = phi [^while.body2, i32 %51] [^entry, i32 %6];
    i32 %12 = phi [^while.body2, i32 %55] [^entry, i32 0];
    i32 %13 = phi [^while.body2, i32 %53] [^entry, i32 %8];
    i32 %14 = phi [^while.body2, i32 %54] [^entry, i32 %9];
    i1 %15 = scmp lt i32 %12, i32 %10;
    cbr i1 %15(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i32* %16 = getelementptr &([10000000 * i32]* @keys)[i64 0][i32 %12];
    i32 %17 = load i32* %16;
    i32* %18 = getelementptr &([10000000 * i32]* @values)[i64 0][i32 %12];
    i32 %19 = load i32* %18;
    i32 %20 = srem i32 %17, i32 %13;
    i32* %21 = getelementptr &([10000000 * i32]* @head)[i64 0][i32 %20];
    i32 %22 = load i32* %21;
    i1 %23 = scmp eq i32 %22, i32 0;
    cbr i1 %23(prob = 0.5), ^if.then, ^while.header2;
^while.header1:
    i32 %24 = phi [^while.header, i32 %11] [^while.body4, i32 %78];
    i32 %25 = phi [^while.header, i32 0] [^while.body4, i32 %81];
    i32 %26 = phi [^while.header, i32 %13] [^while.body4, i32 %79];
    i1 %27 = scmp lt i32 %25, i32 %24;
    cbr i1 %27(prob = 0.97), ^while.body1, ^b;
^if.then:
    i32 %28 = add i32 %14, i32 1;
    store i32* %cnt with i32 %28;
    store i32* %21 with i32 %28;
    i32* %29 = getelementptr &([10000000 * i32]* @key)[i64 0][i32 %28];
    store i32* %29 with i32 %17;
    i32* %30 = getelementptr &([10000000 * i32]* @value)[i64 0][i32 %28];
    store i32* %30 with i32 %19;
    i32* %31 = getelementptr &([10000000 * i32]* @next)[i64 0][i32 %28];
    store i32* %31 with i32 0;
    i32* %32 = getelementptr &([10000000 * i32]* @nextvalue)[i64 0][i32 %28];
    store i32* %32 with i32 0;
    ubr ^while.body2;
^while.body1:
    i32* %33 = getelementptr &([10000000 * i32]* @ans)[i64 0][i32 %25];
    i32* %34 = getelementptr &([10000000 * i32]* @requests)[i64 0][i32 %25];
    i32 %35 = load i32* %34;
    i32 %36 = srem i32 %35, i32 %26;
    i32* %37 = getelementptr &([10000000 * i32]* @head)[i64 0][i32 %36];
    i32 %38 = load i32* %37;
    ubr ^while.header3;
^while.header2:
    i32 %39 = phi [^while.body, i32 %10] [^b2, i32 %39];
    i32 %40 = phi [^while.body, i32 %11] [^b2, i32 %40];
    i32 %41 = phi [^while.body, i32 %12] [^b2, i32 %41];
    i32 %42 = phi [^while.body, i32 %13] [^b2, i32 %42];
    i32 %43 = phi [^while.body, i32 %14] [^b2, i32 %43];
    i32 %44 = phi [^while.body, i32 %22] [^b2, i32 %77];
    i32 %45 = phi [^while.body, i32 %20] [^b2, i32 %45];
    i32 %46 = phi [^while.body, i32 %19] [^b2, i32 %46];
    i32 %47 = phi [^while.body, i32 %17] [^b2, i32 %47];
    i1 %48 = scmp neq i32 %44, i32 0;
    cbr i1 %48(prob = 0.97), ^while.body3, ^b1;
^b:
    call (i32) -> void @stoptime(i32 90);
    i32* %49 = getelementptr &([10000000 * i32]* @ans)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %24, i32* %49);
    ret i32 0;
^while.body2:
    i32 %50 = phi [^b1, i32 %39] [^if.then1, i32 %39] [^if.then, i32 %10];
    i32 %51 = phi [^b1, i32 %40] [^if.then1, i32 %40] [^if.then, i32 %11];
    i32 %52 = phi [^b1, i32 %41] [^if.then1, i32 %41] [^if.then, i32 %12];
    i32 %53 = phi [^b1, i32 %42] [^if.then1, i32 %42] [^if.then, i32 %13];
    i32 %54 = phi [^b1, i32 %56] [^if.then1, i32 %71] [^if.then, i32 %28];
    i32 %55 = add i32 %52, i32 1;
    ubr ^while.header;
^b1:
    i32 %56 = add i32 %43, i32 1;
    store i32* %cnt with i32 %56;
    i32* %57 = getelementptr &([10000000 * i32]* @next)[i64 0][i32 %56];
    i32* %58 = getelementptr &([10000000 * i32]* @head)[i64 0][i32 %45];
    i32 %59 = load i32* %58;
    store i32* %57 with i32 %59;
    store i32* %58 with i32 %56;
    i32* %60 = getelementptr &([10000000 * i32]* @key)[i64 0][i32 %56];
    store i32* %60 with i32 %47;
    i32* %61 = getelementptr &([10000000 * i32]* @value)[i64 0][i32 %56];
    store i32* %61 with i32 %46;
    i32* %62 = getelementptr &([10000000 * i32]* @nextvalue)[i64 0][i32 %56];
    store i32* %62 with i32 0;
    ubr ^while.body2;
^while.body3:
    i32* %63 = getelementptr &([10000000 * i32]* @key)[i64 0][i32 %44];
    i32 %64 = load i32* %63;
    i1 %65 = scmp eq i32 %64, i32 %47;
    cbr i1 %65(prob = 0.5), ^if.then1, ^b2;
^while.header3:
    i32 %66 = phi [^b3, i32 %66] [^while.body1, i32 %24];
    i32 %67 = phi [^b3, i32 %67] [^while.body1, i32 %26];
    i32 %68 = phi [^b3, i32 %86] [^while.body1, i32 %38];
    i32 %69 = phi [^b3, i32 %69] [^while.body1, i32 %35];
    i1 %70 = scmp neq i32 %68, i32 0;
    cbr i1 %70(prob = 0.97), ^while.body5, ^while.body4;
^if.then1:
    i32 %71 = add i32 %43, i32 1;
    store i32* %cnt with i32 %71;
    i32* %72 = getelementptr &([10000000 * i32]* @nextvalue)[i64 0][i32 %71];
    i32* %73 = getelementptr &([10000000 * i32]* @nextvalue)[i64 0][i32 %44];
    i32 %74 = load i32* %73;
    store i32* %72 with i32 %74;
    store i32* %73 with i32 %71;
    i32* %75 = getelementptr &([10000000 * i32]* @value)[i64 0][i32 %71];
    store i32* %75 with i32 %46;
    ubr ^while.body2;
^b2:
    i32* %76 = getelementptr &([10000000 * i32]* @next)[i64 0][i32 %44];
    i32 %77 = load i32* %76;
    ubr ^while.header2;
^while.body4:
    i32 %78 = phi [^while.header4, i32 %87] [^while.header3, i32 %66];
    i32 %79 = phi [^while.header4, i32 %88] [^while.header3, i32 %67];
    i32 %80 = phi [^while.header4, i32 %90] [^while.header3, i32 0];
    store i32* %33 with i32 %80;
    i32 %81 = add i32 %25, i32 1;
    ubr ^while.header1;
^while.body5:
    i32* %82 = getelementptr &([10000000 * i32]* @key)[i64 0][i32 %68];
    i32 %83 = load i32* %82;
    i1 %84 = scmp eq i32 %83, i32 %69;
    cbr i1 %84(prob = 0.5), ^while.header4, ^b3;
^b3:
    i32* %85 = getelementptr &([10000000 * i32]* @next)[i64 0][i32 %68];
    i32 %86 = load i32* %85;
    ubr ^while.header3;
^while.header4:
    i32 %87 = phi [^while.body5, i32 %66] [^while.body6, i32 %87];
    i32 %88 = phi [^while.body5, i32 %67] [^while.body6, i32 %88];
    i32 %89 = phi [^while.body5, i32 %68] [^while.body6, i32 %96];
    i32 %90 = phi [^while.body5, i32 0] [^while.body6, i32 %94];
    i1 %91 = scmp neq i32 %89, i32 0;
    cbr i1 %91(prob = 0.97), ^while.body6, ^while.body4;
^while.body6:
    i32* %92 = getelementptr &([10000000 * i32]* @value)[i64 0][i32 %89];
    i32 %93 = load i32* %92;
    i32 %94 = add i32 %93, i32 %90;
    i32* %95 = getelementptr &([10000000 * i32]* @nextvalue)[i64 0][i32 %89];
    i32 %96 = load i32* %95;
    ubr ^while.header4;
}
