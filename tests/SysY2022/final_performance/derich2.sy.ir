internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [512 * [270 * f32]]* @imgIn;
internal [512 * [270 * f32]]* @imgOut;
internal [512 * [270 * f32]]* @my_y1;
internal [512 * [270 * f32]]* @my_y2;
internal func @newPow(f32 %num, i32 %n, i32* %0, i32* %1, f32* %2) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry:
    i1 %3 = scmp lt i32 %n, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
^if.else:
    i1 %4 = scmp eq i32 %n, i32 0;
    cbr i1 %4(prob = 0.5), ^if.then1, ^if.then2;
^if.then:
    i32 %5 = neg i32 %n;
    f32 %6 = call (f32, i32, i32*, i32*, f32*) -> f32 @newPow(f32 %num, i32 %5, i32* %0, i32* %1, f32* %2);
    f32 %7 = fdiv f32 1, f32 %6;
    ret f32 %7;
^if.then1:
    ret f32 1;
^if.then2:
    i32 %8 = add i32 %n, i32 -1;
    f32 %9 = call (f32, i32, i32*, i32*, f32*) -> f32 @newPow(f32 %num, i32 %8, i32* %0, i32* %1, f32* %2);
    f32 %10 = fmul f32 %num, f32 %9;
    ret f32 %10;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    f32* %ym1 = alloc f32;
    f32* %xp1 = alloc f32;
    f32* %tp1 = alloc f32;
    f32* %yp1 = alloc f32;
    f32* %a1 = alloc f32;
    f32* %a2 = alloc f32;
    f32* %a3 = alloc f32;
    f32* %a4 = alloc f32;
    f32* %a5 = alloc f32;
    f32* %a6 = alloc f32;
    f32* %a7 = alloc f32;
    f32* %a8 = alloc f32;
    f32* %b1 = alloc f32;
    f32* %b2 = alloc f32;
    f32* %c1 = alloc f32;
    f32* %c2 = alloc f32;
    f32* %alpha = alloc f32;
    i32* %h = alloc i32;
    i32* %w = alloc i32;
    store i32* %w with i32 512;
    store i32* %h with i32 270;
    store f32* %alpha with f32 0.25;
    [270 * f32]* %0 = getelementptr &([512 * [270 * f32]]* @imgIn)[i64 0][i64 0];
    f32* %1 = getelementptr &([512 * [270 * f32]]* @imgIn)[i64 0][i64 0][i64 0];
    i32 %2 = call (f32*) -> i32 @getfarray(f32* %1);
    i32 %3 = load i32* %w;
    i32 %4 = load i32* %h;
    f32 %5 = load f32* %alpha;
    call (i32) -> void @starttime(i32 156);
    [270 * f32]* %6 = getelementptr &([512 * [270 * f32]]* @imgOut)[i64 0][i64 0];
    [270 * f32]* %7 = getelementptr &([512 * [270 * f32]]* @my_y1)[i64 0][i64 0];
    [270 * f32]* %8 = getelementptr &([512 * [270 * f32]]* @my_y2)[i64 0][i64 0];
    f32 %9 = fneg f32 %5;
    f32 %10 = fdiv f32 %9, f32 256;
    f32 %11 = fadd f32 1, f32 %10;
    f32 %12 = fmul f32 %11, f32 %11;
    f32 %13 = fmul f32 %12, f32 %12;
    f32 %14 = fmul f32 %13, f32 %13;
    f32 %15 = fmul f32 %14, f32 %14;
    f32 %16 = fmul f32 %15, f32 %15;
    f32 %17 = fmul f32 %16, f32 %16;
    f32 %18 = fmul f32 %17, f32 %17;
    f32 %19 = fmul f32 %18, f32 %18;
    f32 %20 = fsub f32 1, f32 %19;
    f32 %21 = fmul f32 %20, f32 %20;
    f32 %22 = fmul f32 2, f32 %5;
    f32 %23 = fmul f32 %22, f32 %19;
    f32 %24 = fadd f32 1, f32 %23;
    f32 %25 = fdiv f32 %22, f32 256;
    f32 %26 = fadd f32 1, f32 %25;
    f32 %27 = fmul f32 %26, f32 %26;
    f32 %28 = fmul f32 %27, f32 %27;
    f32 %29 = fmul f32 %28, f32 %28;
    f32 %30 = fmul f32 %29, f32 %29;
    f32 %31 = fmul f32 %30, f32 %30;
    f32 %32 = fmul f32 %31, f32 %31;
    f32 %33 = fmul f32 %32, f32 %32;
    f32 %34 = fmul f32 %33, f32 %33;
    f32 %35 = fsub f32 %24, f32 %34;
    f32 %36 = fdiv f32 %21, f32 %35;
    store f32* %a1 with f32 %36;
    store f32* %a5 with f32 %36;
    f32 %37 = fmul f32 %36, f32 %19;
    f32 %38 = fsub f32 %5, f32 1;
    f32 %39 = fmul f32 %37, f32 %38;
    store f32* %a6 with f32 %39;
    store f32* %a2 with f32 %39;
    f32 %40 = fadd f32 %5, f32 1;
    f32 %41 = fmul f32 %37, f32 %40;
    store f32* %a7 with f32 %41;
    store f32* %a3 with f32 %41;
    f32 %42 = fneg f32 %36;
    f32 %43 = fmul f32 -2, f32 %5;
    f32 %44 = fdiv f32 %43, f32 256;
    f32 %45 = fadd f32 1, f32 %44;
    f32 %46 = fmul f32 %45, f32 %45;
    f32 %47 = fmul f32 %46, f32 %46;
    f32 %48 = fmul f32 %47, f32 %47;
    f32 %49 = fmul f32 %48, f32 %48;
    f32 %50 = fmul f32 %49, f32 %49;
    f32 %51 = fmul f32 %50, f32 %50;
    f32 %52 = fmul f32 %51, f32 %51;
    f32 %53 = fmul f32 %52, f32 %52;
    f32 %54 = fmul f32 %42, f32 %53;
    store f32* %a8 with f32 %54;
    store f32* %a4 with f32 %54;
    i32 %55 = f2s f32 %9 to i32;
    f32 %56 = call (f32, i32, i32*, i32*, f32*) -> f32 @newPow(f32 2, i32 %55, i32* %w, i32* %h, f32* %alpha);
    store f32* %b1 with f32 %56;
    f32 %57 = fneg f32 %53;
    store f32* %b2 with f32 %57;
    store f32* %c1 with f32 1;
    store f32* %c2 with f32 1;
    ubr ^while.header;
^while.header:
    i32 %58 = phi [^b, i32 %101] [^entry, i32 %3];
    i32 %59 = phi [^b, i32 %102] [^entry, i32 %4];
    f32 %60 = phi [^b, f32 %103] [^entry, f32 1];
    f32 %61 = phi [^b, f32 %104] [^entry, f32 1];
    f32 %62 = phi [^b, f32 %105] [^entry, f32 %57];
    f32 %63 = phi [^b, f32 %106] [^entry, f32 %56];
    f32 %64 = phi [^b, f32 %107] [^entry, f32 %54];
    f32 %65 = phi [^b, f32 %108] [^entry, f32 %41];
    f32 %66 = phi [^b, f32 %109] [^entry, f32 %39];
    f32 %67 = phi [^b, f32 %110] [^entry, f32 %36];
    f32 %68 = phi [^b, f32 %111] [^entry, f32 %54];
    f32 %69 = phi [^b, f32 %112] [^entry, f32 %41];
    f32 %70 = phi [^b, f32 %113] [^entry, f32 %39];
    f32 %71 = phi [^b, f32 %114] [^entry, f32 %36];
    i32 %72 = phi [^b, i32 %172] [^entry, i32 0];
    [270 * f32]* %73 = phi [^b, [270 * f32]* %120] [^entry, [270 * f32]* %8];
    [270 * f32]* %74 = phi [^b, [270 * f32]* %121] [^entry, [270 * f32]* %7];
    [270 * f32]* %75 = phi [^b, [270 * f32]* %122] [^entry, [270 * f32]* %6];
    [270 * f32]* %76 = phi [^b, [270 * f32]* %123] [^entry, [270 * f32]* %0];
    i32 %77 = phi [^b, i32 %124] [^entry, i32 %4];
    i32 %78 = phi [^b, i32 %125] [^entry, i32 %3];
    i1 %79 = scmp lt i32 %72, i32 %78;
    cbr i1 %79(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    store f32* %ym1 with f32 0;
    ubr ^while.header2;
^while.header1:
    i32 %80 = phi [^while.header, i32 %58] [^b1, i32 %173];
    i32 %81 = phi [^while.header, i32 %59] [^b1, i32 %174];
    f32 %82 = phi [^while.header, f32 %60] [^b1, f32 %175];
    f32 %83 = phi [^while.header, f32 %61] [^b1, f32 %176];
    f32 %84 = phi [^while.header, f32 %62] [^b1, f32 %177];
    f32 %85 = phi [^while.header, f32 %63] [^b1, f32 %178];
    f32 %86 = phi [^while.header, f32 %64] [^b1, f32 %179];
    f32 %87 = phi [^while.header, f32 %65] [^b1, f32 %180];
    f32 %88 = phi [^while.header, f32 %66] [^b1, f32 %181];
    f32 %89 = phi [^while.header, f32 %67] [^b1, f32 %182];
    f32 %90 = phi [^while.header, f32 %68] [^b1, f32 %183];
    f32 %91 = phi [^while.header, f32 %69] [^b1, f32 %184];
    i32 %92 = phi [^while.header, i32 0] [^b1, i32 %258];
    [270 * f32]* %93 = phi [^while.header, [270 * f32]* %73] [^b1, [270 * f32]* %191];
    [270 * f32]* %94 = phi [^while.header, [270 * f32]* %74] [^b1, [270 * f32]* %192];
    [270 * f32]* %95 = phi [^while.header, [270 * f32]* %75] [^b1, [270 * f32]* %193];
    [270 * f32]* %96 = phi [^while.header, [270 * f32]* %76] [^b1, [270 * f32]* %194];
    i32 %97 = phi [^while.header, i32 %77] [^b1, i32 %195];
    i32 %98 = phi [^while.header, i32 %78] [^b1, i32 %196];
    i1 %99 = scmp lt i32 %92, i32 %98;
    cbr i1 %99(prob = 0.97), ^while.body1, ^while.header3;
^while.body1:
    store f32* %yp1 with f32 0;
    store f32* %xp1 with f32 0;
    i32 %100 = add i32 %97, i32 -1;
    ubr ^while.header4;
^while.header2:
    i32 %101 = phi [^while.body2, i32 %101] [^while.body, i32 %58];
    i32 %102 = phi [^while.body2, i32 %102] [^while.body, i32 %59];
    f32 %103 = phi [^while.body2, f32 %156] [^while.body, f32 %60];
    f32 %104 = phi [^while.body2, f32 %157] [^while.body, f32 %61];
    f32 %105 = phi [^while.body2, f32 %158] [^while.body, f32 %62];
    f32 %106 = phi [^while.body2, f32 %159] [^while.body, f32 %63];
    f32 %107 = phi [^while.body2, f32 %160] [^while.body, f32 %64];
    f32 %108 = phi [^while.body2, f32 %161] [^while.body, f32 %65];
    f32 %109 = phi [^while.body2, f32 %162] [^while.body, f32 %66];
    f32 %110 = phi [^while.body2, f32 %163] [^while.body, f32 %67];
    f32 %111 = phi [^while.body2, f32 %164] [^while.body, f32 %68];
    f32 %112 = phi [^while.body2, f32 %165] [^while.body, f32 %69];
    f32 %113 = phi [^while.body2, f32 %166] [^while.body, f32 %70];
    f32 %114 = phi [^while.body2, f32 %167] [^while.body, f32 %71];
    f32 %115 = phi [^while.body2, f32 %168] [^while.body, f32 0];
    f32 %116 = phi [^while.body2, f32 %170] [^while.body, f32 0];
    f32 %117 = phi [^while.body2, f32 %169] [^while.body, f32 0];
    i32 %118 = phi [^while.body2, i32 %171] [^while.body, i32 0];
    i32 %119 = phi [^while.body2, i32 %119] [^while.body, i32 %72];
    [270 * f32]* %120 = phi [^while.body2, [270 * f32]* %120] [^while.body, [270 * f32]* %73];
    [270 * f32]* %121 = phi [^while.body2, [270 * f32]* %121] [^while.body, [270 * f32]* %74];
    [270 * f32]* %122 = phi [^while.body2, [270 * f32]* %122] [^while.body, [270 * f32]* %75];
    [270 * f32]* %123 = phi [^while.body2, [270 * f32]* %123] [^while.body, [270 * f32]* %76];
    i32 %124 = phi [^while.body2, i32 %124] [^while.body, i32 %77];
    i32 %125 = phi [^while.body2, i32 %125] [^while.body, i32 %78];
    i1 %126 = scmp lt i32 %118, i32 %124;
    cbr i1 %126(prob = 0.97), ^while.body2, ^b;
^while.header3:
    i32 %127 = phi [^while.header1, i32 %80] [^b2, i32 %198];
    i32 %128 = phi [^while.header1, i32 %81] [^b2, i32 %199];
    f32 %129 = phi [^while.header1, f32 %82] [^b2, f32 %200];
    f32 %130 = phi [^while.header1, f32 %83] [^b2, f32 %201];
    f32 %131 = phi [^while.header1, f32 %84] [^b2, f32 %202];
    f32 %132 = phi [^while.header1, f32 %85] [^b2, f32 %203];
    f32 %133 = phi [^while.header1, f32 %86] [^b2, f32 %204];
    f32 %134 = phi [^while.header1, f32 %87] [^b2, f32 %205];
    f32 %135 = phi [^while.header1, f32 %88] [^b2, f32 %206];
    f32 %136 = phi [^while.header1, f32 %89] [^b2, f32 %207];
    i32 %137 = phi [^while.header1, i32 0] [^b2, i32 %278];
    [270 * f32]* %138 = phi [^while.header1, [270 * f32]* %93] [^b2, [270 * f32]* %210];
    [270 * f32]* %139 = phi [^while.header1, [270 * f32]* %94] [^b2, [270 * f32]* %211];
    [270 * f32]* %140 = phi [^while.header1, [270 * f32]* %95] [^b2, [270 * f32]* %212];
    i32 %141 = phi [^while.header1, i32 %97] [^b2, i32 %213];
    i32 %142 = phi [^while.header1, i32 %98] [^b2, i32 %214];
    i1 %143 = scmp lt i32 %137, i32 %142;
    cbr i1 %143(prob = 0.97), ^while.header5, ^while.header6;
^while.body2:
    [270 * f32]* %144 = getelementptr &([270 * f32]* %121)[i32 %119];
    f32* %145 = getelementptr &([270 * f32]* %144)[i64 0][i32 %118];
    [270 * f32]* %146 = getelementptr &([270 * f32]* %123)[i32 %119];
    f32* %147 = getelementptr &([270 * f32]* %146)[i64 0][i32 %118];
    f32 %148 = load f32* %147;
    f32 %149 = fmul f32 %114, f32 %148;
    f32 %150 = fmul f32 %113, f32 %117;
    f32 %151 = fadd f32 %149, f32 %150;
    f32 %152 = fmul f32 %106, f32 %116;
    f32 %153 = fadd f32 %151, f32 %152;
    f32 %154 = fmul f32 %105, f32 %115;
    f32 %155 = fadd f32 %153, f32 %154;
    store f32* %145 with f32 %155;
    f32 %156 = load f32* %c2;
    f32 %157 = load f32* %c1;
    f32 %158 = load f32* %b2;
    f32 %159 = load f32* %b1;
    f32 %160 = load f32* %a8;
    f32 %161 = load f32* %a7;
    f32 %162 = load f32* %a6;
    f32 %163 = load f32* %a5;
    f32 %164 = load f32* %a4;
    f32 %165 = load f32* %a3;
    f32 %166 = load f32* %a2;
    f32 %167 = load f32* %a1;
    f32 %168 = load f32* %ym1;
    f32 %169 = load f32* %147;
    f32 %170 = load f32* %145;
    store f32* %ym1 with f32 %170;
    i32 %171 = add i32 %118, i32 1;
    ubr ^while.header2;
^b:
    i32 %172 = add i32 %119, i32 1;
    ubr ^while.header;
^while.header4:
    i32 %173 = phi [^while.body3, i32 %173] [^while.body1, i32 %80];
    i32 %174 = phi [^while.body3, i32 %174] [^while.body1, i32 %81];
    f32 %175 = phi [^while.body3, f32 %241] [^while.body1, f32 %82];
    f32 %176 = phi [^while.body3, f32 %242] [^while.body1, f32 %83];
    f32 %177 = phi [^while.body3, f32 %243] [^while.body1, f32 %84];
    f32 %178 = phi [^while.body3, f32 %244] [^while.body1, f32 %85];
    f32 %179 = phi [^while.body3, f32 %245] [^while.body1, f32 %86];
    f32 %180 = phi [^while.body3, f32 %246] [^while.body1, f32 %87];
    f32 %181 = phi [^while.body3, f32 %247] [^while.body1, f32 %88];
    f32 %182 = phi [^while.body3, f32 %248] [^while.body1, f32 %89];
    f32 %183 = phi [^while.body3, f32 %249] [^while.body1, f32 %90];
    f32 %184 = phi [^while.body3, f32 %250] [^while.body1, f32 %91];
    f32 %185 = phi [^while.body3, f32 %251] [^while.body1, f32 0];
    f32 %186 = phi [^while.body3, f32 %256] [^while.body1, f32 0];
    f32 %187 = phi [^while.body3, f32 %252] [^while.body1, f32 0];
    f32 %188 = phi [^while.body3, f32 %255] [^while.body1, f32 0];
    i32 %189 = phi [^while.body3, i32 %257] [^while.body1, i32 %100];
    i32 %190 = phi [^while.body3, i32 %190] [^while.body1, i32 %92];
    [270 * f32]* %191 = phi [^while.body3, [270 * f32]* %191] [^while.body1, [270 * f32]* %93];
    [270 * f32]* %192 = phi [^while.body3, [270 * f32]* %192] [^while.body1, [270 * f32]* %94];
    [270 * f32]* %193 = phi [^while.body3, [270 * f32]* %193] [^while.body1, [270 * f32]* %95];
    [270 * f32]* %194 = phi [^while.body3, [270 * f32]* %194] [^while.body1, [270 * f32]* %96];
    i32 %195 = phi [^while.body3, i32 %195] [^while.body1, i32 %97];
    i32 %196 = phi [^while.body3, i32 %196] [^while.body1, i32 %98];
    i1 %197 = scmp gt i32 %189, i32 -1;
    cbr i1 %197(prob = 0.97), ^while.body3, ^b1;
^while.header5:
    i32 %198 = phi [^while.header3, i32 %127] [^while.body4, i32 %198];
    i32 %199 = phi [^while.header3, i32 %128] [^while.body4, i32 %199];
    f32 %200 = phi [^while.header3, f32 %129] [^while.body4, f32 %269];
    f32 %201 = phi [^while.header3, f32 %130] [^while.body4, f32 %270];
    f32 %202 = phi [^while.header3, f32 %131] [^while.body4, f32 %271];
    f32 %203 = phi [^while.header3, f32 %132] [^while.body4, f32 %272];
    f32 %204 = phi [^while.header3, f32 %133] [^while.body4, f32 %273];
    f32 %205 = phi [^while.header3, f32 %134] [^while.body4, f32 %274];
    f32 %206 = phi [^while.header3, f32 %135] [^while.body4, f32 %275];
    f32 %207 = phi [^while.header3, f32 %136] [^while.body4, f32 %276];
    i32 %208 = phi [^while.header3, i32 0] [^while.body4, i32 %277];
    i32 %209 = phi [^while.header3, i32 %137] [^while.body4, i32 %209];
    [270 * f32]* %210 = phi [^while.header3, [270 * f32]* %138] [^while.body4, [270 * f32]* %210];
    [270 * f32]* %211 = phi [^while.header3, [270 * f32]* %139] [^while.body4, [270 * f32]* %211];
    [270 * f32]* %212 = phi [^while.header3, [270 * f32]* %140] [^while.body4, [270 * f32]* %212];
    i32 %213 = phi [^while.header3, i32 %141] [^while.body4, i32 %213];
    i32 %214 = phi [^while.header3, i32 %142] [^while.body4, i32 %214];
    i1 %215 = scmp lt i32 %208, i32 %213;
    cbr i1 %215(prob = 0.97), ^while.body4, ^b2;
^while.header6:
    i32 %216 = phi [^while.header3, i32 %127] [^b3, i32 %294];
    i32 %217 = phi [^while.header3, i32 %128] [^b3, i32 %295];
    f32 %218 = phi [^while.header3, f32 %129] [^b3, f32 %296];
    f32 %219 = phi [^while.header3, f32 %131] [^b3, f32 %297];
    f32 %220 = phi [^while.header3, f32 %132] [^b3, f32 %298];
    f32 %221 = phi [^while.header3, f32 %133] [^b3, f32 %299];
    f32 %222 = phi [^while.header3, f32 %134] [^b3, f32 %300];
    f32 %223 = phi [^while.header3, f32 %135] [^b3, f32 %301];
    f32 %224 = phi [^while.header3, f32 %136] [^b3, f32 %302];
    i32 %225 = phi [^while.header3, i32 0] [^b3, i32 %347];
    [270 * f32]* %226 = phi [^while.header3, [270 * f32]* %138] [^b3, [270 * f32]* %308];
    [270 * f32]* %227 = phi [^while.header3, [270 * f32]* %139] [^b3, [270 * f32]* %309];
    [270 * f32]* %228 = phi [^while.header3, [270 * f32]* %140] [^b3, [270 * f32]* %310];
    i32 %229 = phi [^while.header3, i32 %141] [^b3, i32 %311];
    i32 %230 = phi [^while.header3, i32 %142] [^b3, i32 %312];
    i1 %231 = scmp lt i32 %225, i32 %229;
    cbr i1 %231(prob = 0.97), ^while.body5, ^while.header7;
^while.body3:
    [270 * f32]* %232 = getelementptr &([270 * f32]* %191)[i32 %190];
    f32* %233 = getelementptr &([270 * f32]* %232)[i64 0][i32 %189];
    f32 %234 = fmul f32 %184, f32 %188;
    f32 %235 = fmul f32 %183, f32 %187;
    f32 %236 = fadd f32 %234, f32 %235;
    f32 %237 = fmul f32 %178, f32 %186;
    f32 %238 = fadd f32 %236, f32 %237;
    f32 %239 = fmul f32 %177, f32 %185;
    f32 %240 = fadd f32 %238, f32 %239;
    store f32* %233 with f32 %240;
    f32 %241 = load f32* %c2;
    f32 %242 = load f32* %c1;
    f32 %243 = load f32* %b2;
    f32 %244 = load f32* %b1;
    f32 %245 = load f32* %a8;
    f32 %246 = load f32* %a7;
    f32 %247 = load f32* %a6;
    f32 %248 = load f32* %a5;
    f32 %249 = load f32* %a4;
    f32 %250 = load f32* %a3;
    f32 %251 = load f32* %yp1;
    f32 %252 = load f32* %xp1;
    [270 * f32]* %253 = getelementptr &([270 * f32]* %194)[i32 %190];
    f32* %254 = getelementptr &([270 * f32]* %253)[i64 0][i32 %189];
    f32 %255 = load f32* %254;
    store f32* %xp1 with f32 %255;
    f32 %256 = load f32* %233;
    store f32* %yp1 with f32 %256;
    i32 %257 = add i32 %189, i32 -1;
    ubr ^while.header4;
^b1:
    i32 %258 = add i32 %190, i32 1;
    ubr ^while.header1;
^while.body4:
    [270 * f32]* %259 = getelementptr &([270 * f32]* %212)[i32 %209];
    f32* %260 = getelementptr &([270 * f32]* %259)[i64 0][i32 %208];
    [270 * f32]* %261 = getelementptr &([270 * f32]* %211)[i32 %209];
    f32* %262 = getelementptr &([270 * f32]* %261)[i64 0][i32 %208];
    f32 %263 = load f32* %262;
    [270 * f32]* %264 = getelementptr &([270 * f32]* %210)[i32 %209];
    f32* %265 = getelementptr &([270 * f32]* %264)[i64 0][i32 %208];
    f32 %266 = load f32* %265;
    f32 %267 = fadd f32 %263, f32 %266;
    f32 %268 = fmul f32 %201, f32 %267;
    store f32* %260 with f32 %268;
    f32 %269 = load f32* %c2;
    f32 %270 = load f32* %c1;
    f32 %271 = load f32* %b2;
    f32 %272 = load f32* %b1;
    f32 %273 = load f32* %a8;
    f32 %274 = load f32* %a7;
    f32 %275 = load f32* %a6;
    f32 %276 = load f32* %a5;
    i32 %277 = add i32 %208, i32 1;
    ubr ^while.header5;
^b2:
    i32 %278 = add i32 %209, i32 1;
    ubr ^while.header3;
^while.body5:
    store f32* %ym1 with f32 0;
    ubr ^while.header8;
^while.header7:
    i32 %279 = phi [^while.header6, i32 %216] [^b4, i32 %348];
    i32 %280 = phi [^while.header6, i32 %217] [^b4, i32 %349];
    f32 %281 = phi [^while.header6, f32 %218] [^b4, f32 %350];
    f32 %282 = phi [^while.header6, f32 %219] [^b4, f32 %351];
    f32 %283 = phi [^while.header6, f32 %220] [^b4, f32 %352];
    f32 %284 = phi [^while.header6, f32 %221] [^b4, f32 %353];
    f32 %285 = phi [^while.header6, f32 %222] [^b4, f32 %354];
    i32 %286 = phi [^while.header6, i32 0] [^b4, i32 %401];
    [270 * f32]* %287 = phi [^while.header6, [270 * f32]* %226] [^b4, [270 * f32]* %361];
    [270 * f32]* %288 = phi [^while.header6, [270 * f32]* %227] [^b4, [270 * f32]* %362];
    [270 * f32]* %289 = phi [^while.header6, [270 * f32]* %228] [^b4, [270 * f32]* %363];
    i32 %290 = phi [^while.header6, i32 %229] [^b4, i32 %364];
    i32 %291 = phi [^while.header6, i32 %230] [^b4, i32 %365];
    i1 %292 = scmp lt i32 %286, i32 %290;
    cbr i1 %292(prob = 0.97), ^while.body6, ^while.header9;
^while.body6:
    store f32* %tp1 with f32 0;
    store f32* %yp1 with f32 0;
    i32 %293 = add i32 %291, i32 -1;
    ubr ^while.header10;
^while.header8:
    i32 %294 = phi [^while.body7, i32 %294] [^while.body5, i32 %216];
    i32 %295 = phi [^while.body7, i32 %295] [^while.body5, i32 %217];
    f32 %296 = phi [^while.body7, f32 %336] [^while.body5, f32 %218];
    f32 %297 = phi [^while.body7, f32 %337] [^while.body5, f32 %219];
    f32 %298 = phi [^while.body7, f32 %338] [^while.body5, f32 %220];
    f32 %299 = phi [^while.body7, f32 %339] [^while.body5, f32 %221];
    f32 %300 = phi [^while.body7, f32 %340] [^while.body5, f32 %222];
    f32 %301 = phi [^while.body7, f32 %341] [^while.body5, f32 %223];
    f32 %302 = phi [^while.body7, f32 %342] [^while.body5, f32 %224];
    f32 %303 = phi [^while.body7, f32 %343] [^while.body5, f32 0];
    f32 %304 = phi [^while.body7, f32 %345] [^while.body5, f32 0];
    f32 %305 = phi [^while.body7, f32 %344] [^while.body5, f32 0];
    i32 %306 = phi [^while.body7, i32 %306] [^while.body5, i32 %225];
    i32 %307 = phi [^while.body7, i32 %346] [^while.body5, i32 0];
    [270 * f32]* %308 = phi [^while.body7, [270 * f32]* %308] [^while.body5, [270 * f32]* %226];
    [270 * f32]* %309 = phi [^while.body7, [270 * f32]* %309] [^while.body5, [270 * f32]* %227];
    [270 * f32]* %310 = phi [^while.body7, [270 * f32]* %310] [^while.body5, [270 * f32]* %228];
    i32 %311 = phi [^while.body7, i32 %311] [^while.body5, i32 %229];
    i32 %312 = phi [^while.body7, i32 %312] [^while.body5, i32 %230];
    i1 %313 = scmp lt i32 %307, i32 %312;
    cbr i1 %313(prob = 0.97), ^while.body7, ^b3;
^while.header9:
    i32 %314 = phi [^while.header7, i32 %279] [^b5, i32 %367];
    i32 %315 = phi [^while.header7, i32 %280] [^b5, i32 %368];
    f32 %316 = phi [^while.header7, f32 %281] [^b5, f32 %369];
    i32 %317 = phi [^while.header7, i32 0] [^b5, i32 %414];
    [270 * f32]* %318 = phi [^while.header7, [270 * f32]* %287] [^b5, [270 * f32]* %372];
    [270 * f32]* %319 = phi [^while.header7, [270 * f32]* %288] [^b5, [270 * f32]* %373];
    [270 * f32]* %320 = phi [^while.header7, [270 * f32]* %289] [^b5, [270 * f32]* %374];
    i32 %321 = phi [^while.header7, i32 %290] [^b5, i32 %375];
    i32 %322 = phi [^while.header7, i32 %291] [^b5, i32 %376];
    i1 %323 = scmp lt i32 %317, i32 %322;
    cbr i1 %323(prob = 0.97), ^while.header11, ^entry1;
^while.body7:
    [270 * f32]* %324 = getelementptr &([270 * f32]* %309)[i32 %307];
    f32* %325 = getelementptr &([270 * f32]* %324)[i64 0][i32 %306];
    [270 * f32]* %326 = getelementptr &([270 * f32]* %310)[i32 %307];
    f32* %327 = getelementptr &([270 * f32]* %326)[i64 0][i32 %306];
    f32 %328 = load f32* %327;
    f32 %329 = fmul f32 %302, f32 %328;
    f32 %330 = fmul f32 %301, f32 %305;
    f32 %331 = fadd f32 %329, f32 %330;
    f32 %332 = fmul f32 %298, f32 %304;
    f32 %333 = fadd f32 %331, f32 %332;
    f32 %334 = fmul f32 %297, f32 %303;
    f32 %335 = fadd f32 %333, f32 %334;
    store f32* %325 with f32 %335;
    f32 %336 = load f32* %c2;
    f32 %337 = load f32* %b2;
    f32 %338 = load f32* %b1;
    f32 %339 = load f32* %a8;
    f32 %340 = load f32* %a7;
    f32 %341 = load f32* %a6;
    f32 %342 = load f32* %a5;
    f32 %343 = load f32* %ym1;
    f32 %344 = load f32* %327;
    f32 %345 = load f32* %325;
    store f32* %ym1 with f32 %345;
    i32 %346 = add i32 %307, i32 1;
    ubr ^while.header8;
^b3:
    i32 %347 = add i32 %306, i32 1;
    ubr ^while.header6;
^while.header10:
    i32 %348 = phi [^while.body8, i32 %348] [^while.body6, i32 %279];
    i32 %349 = phi [^while.body8, i32 %349] [^while.body6, i32 %280];
    f32 %350 = phi [^while.body8, f32 %389] [^while.body6, f32 %281];
    f32 %351 = phi [^while.body8, f32 %390] [^while.body6, f32 %282];
    f32 %352 = phi [^while.body8, f32 %391] [^while.body6, f32 %283];
    f32 %353 = phi [^while.body8, f32 %392] [^while.body6, f32 %284];
    f32 %354 = phi [^while.body8, f32 %393] [^while.body6, f32 %285];
    f32 %355 = phi [^while.body8, f32 %394] [^while.body6, f32 0];
    f32 %356 = phi [^while.body8, f32 %399] [^while.body6, f32 0];
    f32 %357 = phi [^while.body8, f32 %395] [^while.body6, f32 0];
    f32 %358 = phi [^while.body8, f32 %398] [^while.body6, f32 0];
    i32 %359 = phi [^while.body8, i32 %359] [^while.body6, i32 %286];
    i32 %360 = phi [^while.body8, i32 %400] [^while.body6, i32 %293];
    [270 * f32]* %361 = phi [^while.body8, [270 * f32]* %361] [^while.body6, [270 * f32]* %287];
    [270 * f32]* %362 = phi [^while.body8, [270 * f32]* %362] [^while.body6, [270 * f32]* %288];
    [270 * f32]* %363 = phi [^while.body8, [270 * f32]* %363] [^while.body6, [270 * f32]* %289];
    i32 %364 = phi [^while.body8, i32 %364] [^while.body6, i32 %290];
    i32 %365 = phi [^while.body8, i32 %365] [^while.body6, i32 %291];
    i1 %366 = scmp gt i32 %360, i32 -1;
    cbr i1 %366(prob = 0.97), ^while.body8, ^b4;
^while.header11:
    i32 %367 = phi [^while.header9, i32 %314] [^while.body9, i32 %367];
    i32 %368 = phi [^while.header9, i32 %315] [^while.body9, i32 %368];
    f32 %369 = phi [^while.header9, f32 %316] [^while.body9, f32 %412];
    i32 %370 = phi [^while.header9, i32 0] [^while.body9, i32 %413];
    i32 %371 = phi [^while.header9, i32 %317] [^while.body9, i32 %371];
    [270 * f32]* %372 = phi [^while.header9, [270 * f32]* %318] [^while.body9, [270 * f32]* %372];
    [270 * f32]* %373 = phi [^while.header9, [270 * f32]* %319] [^while.body9, [270 * f32]* %373];
    [270 * f32]* %374 = phi [^while.header9, [270 * f32]* %320] [^while.body9, [270 * f32]* %374];
    i32 %375 = phi [^while.header9, i32 %321] [^while.body9, i32 %375];
    i32 %376 = phi [^while.header9, i32 %322] [^while.body9, i32 %376];
    i1 %377 = scmp lt i32 %370, i32 %375;
    cbr i1 %377(prob = 0.97), ^while.body9, ^b5;
^entry1:
    call (i32) -> void @stoptime(i32 158);
    i32 %378 = mul i32 %315, i32 %314;
    f32* %379 = getelementptr &([512 * [270 * f32]]* @imgOut)[i64 0][i64 0][i64 0];
    call (i32, f32*) -> void @putfarray(i32 %378, f32* %379);
    ret i32 0;
^while.body8:
    [270 * f32]* %380 = getelementptr &([270 * f32]* %361)[i32 %360];
    f32* %381 = getelementptr &([270 * f32]* %380)[i64 0][i32 %359];
    f32 %382 = fmul f32 %354, f32 %358;
    f32 %383 = fmul f32 %353, f32 %357;
    f32 %384 = fadd f32 %382, f32 %383;
    f32 %385 = fmul f32 %352, f32 %356;
    f32 %386 = fadd f32 %384, f32 %385;
    f32 %387 = fmul f32 %351, f32 %355;
    f32 %388 = fadd f32 %386, f32 %387;
    store f32* %381 with f32 %388;
    f32 %389 = load f32* %c2;
    f32 %390 = load f32* %b2;
    f32 %391 = load f32* %b1;
    f32 %392 = load f32* %a8;
    f32 %393 = load f32* %a7;
    f32 %394 = load f32* %yp1;
    f32 %395 = load f32* %tp1;
    [270 * f32]* %396 = getelementptr &([270 * f32]* %363)[i32 %360];
    f32* %397 = getelementptr &([270 * f32]* %396)[i64 0][i32 %359];
    f32 %398 = load f32* %397;
    store f32* %tp1 with f32 %398;
    f32 %399 = load f32* %381;
    store f32* %yp1 with f32 %399;
    i32 %400 = add i32 %360, i32 -1;
    ubr ^while.header10;
^b4:
    i32 %401 = add i32 %359, i32 1;
    ubr ^while.header7;
^while.body9:
    [270 * f32]* %402 = getelementptr &([270 * f32]* %374)[i32 %371];
    f32* %403 = getelementptr &([270 * f32]* %402)[i64 0][i32 %370];
    [270 * f32]* %404 = getelementptr &([270 * f32]* %373)[i32 %371];
    f32* %405 = getelementptr &([270 * f32]* %404)[i64 0][i32 %370];
    f32 %406 = load f32* %405;
    [270 * f32]* %407 = getelementptr &([270 * f32]* %372)[i32 %371];
    f32* %408 = getelementptr &([270 * f32]* %407)[i64 0][i32 %370];
    f32 %409 = load f32* %408;
    f32 %410 = fadd f32 %406, f32 %409;
    f32 %411 = fmul f32 %369, f32 %410;
    store f32* %403 with f32 %411;
    f32 %412 = load f32* %c2;
    i32 %413 = add i32 %370, i32 1;
    ubr ^while.header11;
^b5:
    i32 %414 = add i32 %371, i32 1;
    ubr ^while.header9;
}
