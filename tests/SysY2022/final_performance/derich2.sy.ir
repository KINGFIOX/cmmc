internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal i32* @w = 512;
internal i32* @h = 270;
internal [512 * [270 * f32]]* @imgIn;
internal [512 * [270 * f32]]* @imgOut;
internal [512 * [270 * f32]]* @my_y1;
internal [512 * [270 * f32]]* @my_y2;
internal f32* @alpha = 0.25;
internal func @newExp(f32 %x) -> f32 {
^entry:
    f32* %x1 = alloc f32;
    store f32* %x1 with f32 %x;
    f32 %0 = load f32* %x1;
    f32 %1 = fdiv f32 %0, f32 256;
    f32 %2 = fadd f32 1, f32 %1;
    store f32* %x1 with f32 %2;
    f32 %3 = load f32* %x1;
    f32 %4 = load f32* %x1;
    f32 %5 = fmul f32 %3, f32 %4;
    store f32* %x1 with f32 %5;
    f32 %6 = load f32* %x1;
    f32 %7 = load f32* %x1;
    f32 %8 = fmul f32 %6, f32 %7;
    store f32* %x1 with f32 %8;
    f32 %9 = load f32* %x1;
    f32 %10 = load f32* %x1;
    f32 %11 = fmul f32 %9, f32 %10;
    store f32* %x1 with f32 %11;
    f32 %12 = load f32* %x1;
    f32 %13 = load f32* %x1;
    f32 %14 = fmul f32 %12, f32 %13;
    store f32* %x1 with f32 %14;
    f32 %15 = load f32* %x1;
    f32 %16 = load f32* %x1;
    f32 %17 = fmul f32 %15, f32 %16;
    store f32* %x1 with f32 %17;
    f32 %18 = load f32* %x1;
    f32 %19 = load f32* %x1;
    f32 %20 = fmul f32 %18, f32 %19;
    store f32* %x1 with f32 %20;
    f32 %21 = load f32* %x1;
    f32 %22 = load f32* %x1;
    f32 %23 = fmul f32 %21, f32 %22;
    store f32* %x1 with f32 %23;
    f32 %24 = load f32* %x1;
    f32 %25 = load f32* %x1;
    f32 %26 = fmul f32 %24, f32 %25;
    store f32* %x1 with f32 %26;
    f32 %27 = load f32* %x1;
    ret f32 %27;
}
internal func @newPow(f32 %num, i32 %n) -> f32 {
^entry:
    i32* %n1 = alloc i32;
    f32* %num1 = alloc f32;
    store f32* %num1 with f32 %num;
    store i32* %n1 with i32 %n;
    i32 %0 = load i32* %n1;
    i1 %1 = scmp lt i32 %0, i32 0;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
^if.else:
    i32 %4 = load i32* %n1;
    i1 %5 = scmp eq i32 %4, i32 0;
    i32 %6 = zext i1 %5 to i32;
    i1 %7 = scmp neq i32 %6, i32 0;
    cbr i1 %7(prob = 0.5), ^if.then1, ^if.else1;
^if.then:
    f32 %8 = load f32* %num1;
    i32 %9 = load i32* %n1;
    i32 %10 = neg i32 %9;
    f32 %11 = call (f32, i32) -> f32 @newPow(f32 %8, i32 %10);
    f32 %12 = fdiv f32 1, f32 %11;
    ret f32 %12;
^if.else1:
    i32 %13 = load i32* %n1;
    i1 %14 = scmp gt i32 %13, i32 0;
    i32 %15 = zext i1 %14 to i32;
    i1 %16 = scmp neq i32 %15, i32 0;
    cbr i1 %16(prob = 0.5), ^if.then2, ^b;
^if.then1:
    ret f32 1;
^b:
    ubr ^b1;
^if.then2:
    f32 %17 = load f32* %num1;
    f32 %18 = load f32* %num1;
    i32 %19 = load i32* %n1;
    i32 %20 = sub i32 %19, i32 1;
    f32 %21 = call (f32, i32) -> f32 @newPow(f32 %18, i32 %20);
    f32 %22 = fmul f32 %17, f32 %21;
    ret f32 %22;
^b1:
    ubr ^b2;
^b2:
    unreachable;
}
internal func @kernel_deriche(i32 %w, i32 %h, f32 %alpha, [270 * f32]* %imgIn, [270 * f32]* %imgOut, [270 * f32]* %y1, [270 * f32]* %y2) -> void {
^entry:
    f32* %c2 = alloc f32;
    f32* %c1 = alloc f32;
    f32* %b2 = alloc f32;
    f32* %b1 = alloc f32;
    f32* %a8 = alloc f32;
    f32* %a7 = alloc f32;
    f32* %a6 = alloc f32;
    f32* %a5 = alloc f32;
    f32* %a4 = alloc f32;
    f32* %a3 = alloc f32;
    f32* %a2 = alloc f32;
    f32* %a1 = alloc f32;
    f32* %k = alloc f32;
    f32* %yp2 = alloc f32;
    f32* %yp1 = alloc f32;
    f32* %tp2 = alloc f32;
    f32* %tp1 = alloc f32;
    f32* %xp2 = alloc f32;
    f32* %xp1 = alloc f32;
    f32* %ym2 = alloc f32;
    f32* %ym1 = alloc f32;
    f32* %tm1 = alloc f32;
    f32* %xm1 = alloc f32;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    [270 * f32]** %y21 = alloc [270 * f32]*;
    [270 * f32]** %y11 = alloc [270 * f32]*;
    [270 * f32]** %imgOut1 = alloc [270 * f32]*;
    [270 * f32]** %imgIn1 = alloc [270 * f32]*;
    f32* %alpha1 = alloc f32;
    i32* %h1 = alloc i32;
    i32* %w1 = alloc i32;
    store i32* %w1 with i32 %w;
    store i32* %h1 with i32 %h;
    store f32* %alpha1 with f32 %alpha;
    store [270 * f32]** %imgIn1 with [270 * f32]* %imgIn;
    store [270 * f32]** %imgOut1 with [270 * f32]* %imgOut;
    store [270 * f32]** %y11 with [270 * f32]* %y1;
    store [270 * f32]** %y21 with [270 * f32]* %y2;
    store i32* %i with i32 0;
    store i32* %j with i32 0;
    f32 %0 = load f32* %alpha1;
    f32 %1 = fneg f32 %0;
    f32 %2 = call (f32) -> f32 @newExp(f32 %1);
    f32 %3 = fsub f32 1, f32 %2;
    f32 %4 = load f32* %alpha1;
    f32 %5 = fneg f32 %4;
    f32 %6 = call (f32) -> f32 @newExp(f32 %5);
    f32 %7 = fsub f32 1, f32 %6;
    f32 %8 = fmul f32 %3, f32 %7;
    f32 %9 = load f32* %alpha1;
    f32 %10 = fmul f32 2, f32 %9;
    f32 %11 = load f32* %alpha1;
    f32 %12 = fneg f32 %11;
    f32 %13 = call (f32) -> f32 @newExp(f32 %12);
    f32 %14 = fmul f32 %10, f32 %13;
    f32 %15 = fadd f32 1, f32 %14;
    f32 %16 = load f32* %alpha1;
    f32 %17 = fmul f32 2, f32 %16;
    f32 %18 = call (f32) -> f32 @newExp(f32 %17);
    f32 %19 = fsub f32 %15, f32 %18;
    f32 %20 = fdiv f32 %8, f32 %19;
    store f32* %k with f32 %20;
    f32 %21 = load f32* %k;
    store f32* %a1 with f32 %21;
    f32 %22 = load f32* %k;
    store f32* %a5 with f32 %22;
    f32 %23 = load f32* %k;
    f32 %24 = load f32* %alpha1;
    f32 %25 = fneg f32 %24;
    f32 %26 = call (f32) -> f32 @newExp(f32 %25);
    f32 %27 = fmul f32 %23, f32 %26;
    f32 %28 = load f32* %alpha1;
    f32 %29 = fsub f32 %28, f32 1;
    f32 %30 = fmul f32 %27, f32 %29;
    store f32* %a6 with f32 %30;
    f32 %31 = load f32* %a6;
    store f32* %a2 with f32 %31;
    f32 %32 = load f32* %k;
    f32 %33 = load f32* %alpha1;
    f32 %34 = fneg f32 %33;
    f32 %35 = call (f32) -> f32 @newExp(f32 %34);
    f32 %36 = fmul f32 %32, f32 %35;
    f32 %37 = load f32* %alpha1;
    f32 %38 = fadd f32 %37, f32 1;
    f32 %39 = fmul f32 %36, f32 %38;
    store f32* %a7 with f32 %39;
    f32 %40 = load f32* %a7;
    store f32* %a3 with f32 %40;
    f32 %41 = load f32* %k;
    f32 %42 = fneg f32 %41;
    f32 %43 = load f32* %alpha1;
    f32 %44 = fmul f32 -2, f32 %43;
    f32 %45 = call (f32) -> f32 @newExp(f32 %44);
    f32 %46 = fmul f32 %42, f32 %45;
    store f32* %a8 with f32 %46;
    f32 %47 = load f32* %a8;
    store f32* %a4 with f32 %47;
    f32 %48 = load f32* %alpha1;
    f32 %49 = fneg f32 %48;
    i32 %50 = f2s f32 %49 to i32;
    f32 %51 = call (f32, i32) -> f32 @newPow(f32 2, i32 %50);
    store f32* %b1 with f32 %51;
    f32 %52 = load f32* %alpha1;
    f32 %53 = fmul f32 -2, f32 %52;
    f32 %54 = call (f32) -> f32 @newExp(f32 %53);
    f32 %55 = fneg f32 %54;
    store f32* %b2 with f32 %55;
    store f32* %c1 with f32 1;
    store f32* %c2 with f32 1;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %56 = load i32* %i;
    i32 %57 = load i32* %w1;
    i1 %58 = scmp lt i32 %56, i32 %57;
    i32 %59 = zext i1 %58 to i32;
    i1 %60 = scmp neq i32 %59, i32 0;
    cbr i1 %60(prob = 0.97), ^while.body, ^b;
^while.body:
    store f32* %ym1 with f32 0;
    store f32* %ym2 with f32 0;
    store f32* %xm1 with f32 0;
    store i32* %j with i32 0;
    ubr ^while.header1;
^b:
    store i32* %i with i32 0;
    ubr ^while.header2;
^while.header1:
    i32 %61 = load i32* %j;
    i32 %62 = load i32* %h1;
    i1 %63 = scmp lt i32 %61, i32 %62;
    i32 %64 = zext i1 %63 to i32;
    i1 %65 = scmp neq i32 %64, i32 0;
    cbr i1 %65(prob = 0.97), ^while.body1, ^b1;
^while.header2:
    i32 %66 = load i32* %i;
    i32 %67 = load i32* %w1;
    i1 %68 = scmp lt i32 %66, i32 %67;
    i32 %69 = zext i1 %68 to i32;
    i1 %70 = scmp neq i32 %69, i32 0;
    cbr i1 %70(prob = 0.97), ^while.body2, ^b2;
^while.body1:
    i32 %71 = load i32* %i;
    i64 %72 = sext i32 %71 to i64;
    [270 * f32]* %73 = load [270 * f32]** %y11;
    [270 * f32]* %74 = getelementptr &([270 * f32]* %73)[i64 %72];
    i32 %75 = load i32* %j;
    i64 %76 = sext i32 %75 to i64;
    f32* %77 = getelementptr &([270 * f32]* %74)[i64 0][i64 %76];
    f32 %78 = load f32* %a1;
    i32 %79 = load i32* %i;
    i64 %80 = sext i32 %79 to i64;
    [270 * f32]* %81 = load [270 * f32]** %imgIn1;
    [270 * f32]* %82 = getelementptr &([270 * f32]* %81)[i64 %80];
    i32 %83 = load i32* %j;
    i64 %84 = sext i32 %83 to i64;
    f32* %85 = getelementptr &([270 * f32]* %82)[i64 0][i64 %84];
    f32 %86 = load f32* %85;
    f32 %87 = fmul f32 %78, f32 %86;
    f32 %88 = load f32* %a2;
    f32 %89 = load f32* %xm1;
    f32 %90 = fmul f32 %88, f32 %89;
    f32 %91 = fadd f32 %87, f32 %90;
    f32 %92 = load f32* %b1;
    f32 %93 = load f32* %ym1;
    f32 %94 = fmul f32 %92, f32 %93;
    f32 %95 = fadd f32 %91, f32 %94;
    f32 %96 = load f32* %b2;
    f32 %97 = load f32* %ym2;
    f32 %98 = fmul f32 %96, f32 %97;
    f32 %99 = fadd f32 %95, f32 %98;
    store f32* %77 with f32 %99;
    i32 %100 = load i32* %i;
    i64 %101 = sext i32 %100 to i64;
    [270 * f32]* %102 = load [270 * f32]** %imgIn1;
    [270 * f32]* %103 = getelementptr &([270 * f32]* %102)[i64 %101];
    i32 %104 = load i32* %j;
    i64 %105 = sext i32 %104 to i64;
    f32* %106 = getelementptr &([270 * f32]* %103)[i64 0][i64 %105];
    f32 %107 = load f32* %106;
    store f32* %xm1 with f32 %107;
    f32 %108 = load f32* %ym1;
    store f32* %ym2 with f32 %108;
    i32 %109 = load i32* %i;
    i64 %110 = sext i32 %109 to i64;
    [270 * f32]* %111 = load [270 * f32]** %y11;
    [270 * f32]* %112 = getelementptr &([270 * f32]* %111)[i64 %110];
    i32 %113 = load i32* %j;
    i64 %114 = sext i32 %113 to i64;
    f32* %115 = getelementptr &([270 * f32]* %112)[i64 0][i64 %114];
    f32 %116 = load f32* %115;
    store f32* %ym1 with f32 %116;
    i32 %117 = load i32* %j;
    i32 %118 = add i32 %117, i32 1;
    store i32* %j with i32 %118;
    ubr ^while.header1;
^b1:
    i32 %119 = load i32* %i;
    i32 %120 = add i32 %119, i32 1;
    store i32* %i with i32 %120;
    ubr ^while.header;
^while.body2:
    store f32* %yp1 with f32 0;
    store f32* %yp2 with f32 0;
    store f32* %xp1 with f32 0;
    store f32* %xp2 with f32 0;
    i32 %121 = load i32* %h1;
    i32 %122 = sub i32 %121, i32 1;
    store i32* %j with i32 %122;
    ubr ^while.header3;
^b2:
    store i32* %i with i32 0;
    ubr ^while.header4;
^while.header3:
    i32 %123 = load i32* %j;
    i1 %124 = scmp ge i32 %123, i32 0;
    i32 %125 = zext i1 %124 to i32;
    i1 %126 = scmp neq i32 %125, i32 0;
    cbr i1 %126(prob = 0.97), ^while.body3, ^b3;
^while.header4:
    i32 %127 = load i32* %i;
    i32 %128 = load i32* %w1;
    i1 %129 = scmp lt i32 %127, i32 %128;
    i32 %130 = zext i1 %129 to i32;
    i1 %131 = scmp neq i32 %130, i32 0;
    cbr i1 %131(prob = 0.97), ^while.body4, ^b4;
^while.body3:
    i32 %132 = load i32* %i;
    i64 %133 = sext i32 %132 to i64;
    [270 * f32]* %134 = load [270 * f32]** %y21;
    [270 * f32]* %135 = getelementptr &([270 * f32]* %134)[i64 %133];
    i32 %136 = load i32* %j;
    i64 %137 = sext i32 %136 to i64;
    f32* %138 = getelementptr &([270 * f32]* %135)[i64 0][i64 %137];
    f32 %139 = load f32* %a3;
    f32 %140 = load f32* %xp1;
    f32 %141 = fmul f32 %139, f32 %140;
    f32 %142 = load f32* %a4;
    f32 %143 = load f32* %xp2;
    f32 %144 = fmul f32 %142, f32 %143;
    f32 %145 = fadd f32 %141, f32 %144;
    f32 %146 = load f32* %b1;
    f32 %147 = load f32* %yp1;
    f32 %148 = fmul f32 %146, f32 %147;
    f32 %149 = fadd f32 %145, f32 %148;
    f32 %150 = load f32* %b2;
    f32 %151 = load f32* %yp2;
    f32 %152 = fmul f32 %150, f32 %151;
    f32 %153 = fadd f32 %149, f32 %152;
    store f32* %138 with f32 %153;
    f32 %154 = load f32* %xp1;
    store f32* %xp2 with f32 %154;
    i32 %155 = load i32* %i;
    i64 %156 = sext i32 %155 to i64;
    [270 * f32]* %157 = load [270 * f32]** %imgIn1;
    [270 * f32]* %158 = getelementptr &([270 * f32]* %157)[i64 %156];
    i32 %159 = load i32* %j;
    i64 %160 = sext i32 %159 to i64;
    f32* %161 = getelementptr &([270 * f32]* %158)[i64 0][i64 %160];
    f32 %162 = load f32* %161;
    store f32* %xp1 with f32 %162;
    f32 %163 = load f32* %yp1;
    store f32* %yp2 with f32 %163;
    i32 %164 = load i32* %i;
    i64 %165 = sext i32 %164 to i64;
    [270 * f32]* %166 = load [270 * f32]** %y21;
    [270 * f32]* %167 = getelementptr &([270 * f32]* %166)[i64 %165];
    i32 %168 = load i32* %j;
    i64 %169 = sext i32 %168 to i64;
    f32* %170 = getelementptr &([270 * f32]* %167)[i64 0][i64 %169];
    f32 %171 = load f32* %170;
    store f32* %yp1 with f32 %171;
    i32 %172 = load i32* %j;
    i32 %173 = sub i32 %172, i32 1;
    store i32* %j with i32 %173;
    ubr ^while.header3;
^b3:
    i32 %174 = load i32* %i;
    i32 %175 = add i32 %174, i32 1;
    store i32* %i with i32 %175;
    ubr ^while.header2;
^while.body4:
    store i32* %j with i32 0;
    ubr ^while.header5;
^b4:
    store i32* %j with i32 0;
    ubr ^while.header6;
^while.header5:
    i32 %176 = load i32* %j;
    i32 %177 = load i32* %h1;
    i1 %178 = scmp lt i32 %176, i32 %177;
    i32 %179 = zext i1 %178 to i32;
    i1 %180 = scmp neq i32 %179, i32 0;
    cbr i1 %180(prob = 0.97), ^while.body5, ^b5;
^while.header6:
    i32 %181 = load i32* %j;
    i32 %182 = load i32* %h1;
    i1 %183 = scmp lt i32 %181, i32 %182;
    i32 %184 = zext i1 %183 to i32;
    i1 %185 = scmp neq i32 %184, i32 0;
    cbr i1 %185(prob = 0.97), ^while.body6, ^b6;
^while.body5:
    i32 %186 = load i32* %i;
    i64 %187 = sext i32 %186 to i64;
    [270 * f32]* %188 = load [270 * f32]** %imgOut1;
    [270 * f32]* %189 = getelementptr &([270 * f32]* %188)[i64 %187];
    i32 %190 = load i32* %j;
    i64 %191 = sext i32 %190 to i64;
    f32* %192 = getelementptr &([270 * f32]* %189)[i64 0][i64 %191];
    f32 %193 = load f32* %c1;
    i32 %194 = load i32* %i;
    i64 %195 = sext i32 %194 to i64;
    [270 * f32]* %196 = load [270 * f32]** %y11;
    [270 * f32]* %197 = getelementptr &([270 * f32]* %196)[i64 %195];
    i32 %198 = load i32* %j;
    i64 %199 = sext i32 %198 to i64;
    f32* %200 = getelementptr &([270 * f32]* %197)[i64 0][i64 %199];
    f32 %201 = load f32* %200;
    i32 %202 = load i32* %i;
    i64 %203 = sext i32 %202 to i64;
    [270 * f32]* %204 = load [270 * f32]** %y21;
    [270 * f32]* %205 = getelementptr &([270 * f32]* %204)[i64 %203];
    i32 %206 = load i32* %j;
    i64 %207 = sext i32 %206 to i64;
    f32* %208 = getelementptr &([270 * f32]* %205)[i64 0][i64 %207];
    f32 %209 = load f32* %208;
    f32 %210 = fadd f32 %201, f32 %209;
    f32 %211 = fmul f32 %193, f32 %210;
    store f32* %192 with f32 %211;
    i32 %212 = load i32* %j;
    i32 %213 = add i32 %212, i32 1;
    store i32* %j with i32 %213;
    ubr ^while.header5;
^b5:
    i32 %214 = load i32* %i;
    i32 %215 = add i32 %214, i32 1;
    store i32* %i with i32 %215;
    ubr ^while.header4;
^while.body6:
    store f32* %tm1 with f32 0;
    store f32* %ym1 with f32 0;
    store f32* %ym2 with f32 0;
    store i32* %i with i32 0;
    ubr ^while.header7;
^b6:
    store i32* %j with i32 0;
    ubr ^while.header8;
^while.header7:
    i32 %216 = load i32* %i;
    i32 %217 = load i32* %w1;
    i1 %218 = scmp lt i32 %216, i32 %217;
    i32 %219 = zext i1 %218 to i32;
    i1 %220 = scmp neq i32 %219, i32 0;
    cbr i1 %220(prob = 0.97), ^while.body7, ^b7;
^while.header8:
    i32 %221 = load i32* %j;
    i32 %222 = load i32* %h1;
    i1 %223 = scmp lt i32 %221, i32 %222;
    i32 %224 = zext i1 %223 to i32;
    i1 %225 = scmp neq i32 %224, i32 0;
    cbr i1 %225(prob = 0.97), ^while.body8, ^b8;
^while.body7:
    i32 %226 = load i32* %i;
    i64 %227 = sext i32 %226 to i64;
    [270 * f32]* %228 = load [270 * f32]** %y11;
    [270 * f32]* %229 = getelementptr &([270 * f32]* %228)[i64 %227];
    i32 %230 = load i32* %j;
    i64 %231 = sext i32 %230 to i64;
    f32* %232 = getelementptr &([270 * f32]* %229)[i64 0][i64 %231];
    f32 %233 = load f32* %a5;
    i32 %234 = load i32* %i;
    i64 %235 = sext i32 %234 to i64;
    [270 * f32]* %236 = load [270 * f32]** %imgOut1;
    [270 * f32]* %237 = getelementptr &([270 * f32]* %236)[i64 %235];
    i32 %238 = load i32* %j;
    i64 %239 = sext i32 %238 to i64;
    f32* %240 = getelementptr &([270 * f32]* %237)[i64 0][i64 %239];
    f32 %241 = load f32* %240;
    f32 %242 = fmul f32 %233, f32 %241;
    f32 %243 = load f32* %a6;
    f32 %244 = load f32* %tm1;
    f32 %245 = fmul f32 %243, f32 %244;
    f32 %246 = fadd f32 %242, f32 %245;
    f32 %247 = load f32* %b1;
    f32 %248 = load f32* %ym1;
    f32 %249 = fmul f32 %247, f32 %248;
    f32 %250 = fadd f32 %246, f32 %249;
    f32 %251 = load f32* %b2;
    f32 %252 = load f32* %ym2;
    f32 %253 = fmul f32 %251, f32 %252;
    f32 %254 = fadd f32 %250, f32 %253;
    store f32* %232 with f32 %254;
    i32 %255 = load i32* %i;
    i64 %256 = sext i32 %255 to i64;
    [270 * f32]* %257 = load [270 * f32]** %imgOut1;
    [270 * f32]* %258 = getelementptr &([270 * f32]* %257)[i64 %256];
    i32 %259 = load i32* %j;
    i64 %260 = sext i32 %259 to i64;
    f32* %261 = getelementptr &([270 * f32]* %258)[i64 0][i64 %260];
    f32 %262 = load f32* %261;
    store f32* %tm1 with f32 %262;
    f32 %263 = load f32* %ym1;
    store f32* %ym2 with f32 %263;
    i32 %264 = load i32* %i;
    i64 %265 = sext i32 %264 to i64;
    [270 * f32]* %266 = load [270 * f32]** %y11;
    [270 * f32]* %267 = getelementptr &([270 * f32]* %266)[i64 %265];
    i32 %268 = load i32* %j;
    i64 %269 = sext i32 %268 to i64;
    f32* %270 = getelementptr &([270 * f32]* %267)[i64 0][i64 %269];
    f32 %271 = load f32* %270;
    store f32* %ym1 with f32 %271;
    i32 %272 = load i32* %i;
    i32 %273 = add i32 %272, i32 1;
    store i32* %i with i32 %273;
    ubr ^while.header7;
^b7:
    i32 %274 = load i32* %j;
    i32 %275 = add i32 %274, i32 1;
    store i32* %j with i32 %275;
    ubr ^while.header6;
^while.body8:
    store f32* %tp1 with f32 0;
    store f32* %tp2 with f32 0;
    store f32* %yp1 with f32 0;
    store f32* %yp2 with f32 0;
    i32 %276 = load i32* %w1;
    i32 %277 = sub i32 %276, i32 1;
    store i32* %i with i32 %277;
    ubr ^while.header9;
^b8:
    store i32* %i with i32 0;
    ubr ^while.header10;
^while.header9:
    i32 %278 = load i32* %i;
    i1 %279 = scmp ge i32 %278, i32 0;
    i32 %280 = zext i1 %279 to i32;
    i1 %281 = scmp neq i32 %280, i32 0;
    cbr i1 %281(prob = 0.97), ^while.body9, ^b9;
^while.header10:
    i32 %282 = load i32* %i;
    i32 %283 = load i32* %w1;
    i1 %284 = scmp lt i32 %282, i32 %283;
    i32 %285 = zext i1 %284 to i32;
    i1 %286 = scmp neq i32 %285, i32 0;
    cbr i1 %286(prob = 0.97), ^while.body10, ^b10;
^while.body9:
    i32 %287 = load i32* %i;
    i64 %288 = sext i32 %287 to i64;
    [270 * f32]* %289 = load [270 * f32]** %y21;
    [270 * f32]* %290 = getelementptr &([270 * f32]* %289)[i64 %288];
    i32 %291 = load i32* %j;
    i64 %292 = sext i32 %291 to i64;
    f32* %293 = getelementptr &([270 * f32]* %290)[i64 0][i64 %292];
    f32 %294 = load f32* %a7;
    f32 %295 = load f32* %tp1;
    f32 %296 = fmul f32 %294, f32 %295;
    f32 %297 = load f32* %a8;
    f32 %298 = load f32* %tp2;
    f32 %299 = fmul f32 %297, f32 %298;
    f32 %300 = fadd f32 %296, f32 %299;
    f32 %301 = load f32* %b1;
    f32 %302 = load f32* %yp1;
    f32 %303 = fmul f32 %301, f32 %302;
    f32 %304 = fadd f32 %300, f32 %303;
    f32 %305 = load f32* %b2;
    f32 %306 = load f32* %yp2;
    f32 %307 = fmul f32 %305, f32 %306;
    f32 %308 = fadd f32 %304, f32 %307;
    store f32* %293 with f32 %308;
    f32 %309 = load f32* %tp1;
    store f32* %tp2 with f32 %309;
    i32 %310 = load i32* %i;
    i64 %311 = sext i32 %310 to i64;
    [270 * f32]* %312 = load [270 * f32]** %imgOut1;
    [270 * f32]* %313 = getelementptr &([270 * f32]* %312)[i64 %311];
    i32 %314 = load i32* %j;
    i64 %315 = sext i32 %314 to i64;
    f32* %316 = getelementptr &([270 * f32]* %313)[i64 0][i64 %315];
    f32 %317 = load f32* %316;
    store f32* %tp1 with f32 %317;
    f32 %318 = load f32* %yp1;
    store f32* %yp2 with f32 %318;
    i32 %319 = load i32* %i;
    i64 %320 = sext i32 %319 to i64;
    [270 * f32]* %321 = load [270 * f32]** %y21;
    [270 * f32]* %322 = getelementptr &([270 * f32]* %321)[i64 %320];
    i32 %323 = load i32* %j;
    i64 %324 = sext i32 %323 to i64;
    f32* %325 = getelementptr &([270 * f32]* %322)[i64 0][i64 %324];
    f32 %326 = load f32* %325;
    store f32* %yp1 with f32 %326;
    i32 %327 = load i32* %i;
    i32 %328 = sub i32 %327, i32 1;
    store i32* %i with i32 %328;
    ubr ^while.header9;
^b9:
    i32 %329 = load i32* %j;
    i32 %330 = add i32 %329, i32 1;
    store i32* %j with i32 %330;
    ubr ^while.header8;
^while.body10:
    store i32* %j with i32 0;
    ubr ^while.header11;
^b10:
    ret;
^while.header11:
    i32 %331 = load i32* %j;
    i32 %332 = load i32* %h1;
    i1 %333 = scmp lt i32 %331, i32 %332;
    i32 %334 = zext i1 %333 to i32;
    i1 %335 = scmp neq i32 %334, i32 0;
    cbr i1 %335(prob = 0.97), ^while.body11, ^b11;
^while.body11:
    i32 %336 = load i32* %i;
    i64 %337 = sext i32 %336 to i64;
    [270 * f32]* %338 = load [270 * f32]** %imgOut1;
    [270 * f32]* %339 = getelementptr &([270 * f32]* %338)[i64 %337];
    i32 %340 = load i32* %j;
    i64 %341 = sext i32 %340 to i64;
    f32* %342 = getelementptr &([270 * f32]* %339)[i64 0][i64 %341];
    f32 %343 = load f32* %c2;
    i32 %344 = load i32* %i;
    i64 %345 = sext i32 %344 to i64;
    [270 * f32]* %346 = load [270 * f32]** %y11;
    [270 * f32]* %347 = getelementptr &([270 * f32]* %346)[i64 %345];
    i32 %348 = load i32* %j;
    i64 %349 = sext i32 %348 to i64;
    f32* %350 = getelementptr &([270 * f32]* %347)[i64 0][i64 %349];
    f32 %351 = load f32* %350;
    i32 %352 = load i32* %i;
    i64 %353 = sext i32 %352 to i64;
    [270 * f32]* %354 = load [270 * f32]** %y21;
    [270 * f32]* %355 = getelementptr &([270 * f32]* %354)[i64 %353];
    i32 %356 = load i32* %j;
    i64 %357 = sext i32 %356 to i64;
    f32* %358 = getelementptr &([270 * f32]* %355)[i64 0][i64 %357];
    f32 %359 = load f32* %358;
    f32 %360 = fadd f32 %351, f32 %359;
    f32 %361 = fmul f32 %343, f32 %360;
    store f32* %342 with f32 %361;
    i32 %362 = load i32* %j;
    i32 %363 = add i32 %362, i32 1;
    store i32* %j with i32 %363;
    ubr ^while.header11;
^b11:
    i32 %364 = load i32* %i;
    i32 %365 = add i32 %364, i32 1;
    store i32* %i with i32 %365;
    ubr ^while.header10;
}
func @main() -> i32 { Entry } {
^entry:
    [270 * f32]* %0 = getelementptr &([512 * [270 * f32]]* @imgIn)[i64 0][i64 0];
    f32* %1 = getelementptr &([270 * f32]* %0)[i64 0][i64 0];
    i32 %2 = call (f32*) -> i32 @getfarray(f32* %1);
    call (i32) -> void @starttime(i32 156);
    i32 %3 = load i32* @w;
    i32 %4 = load i32* @h;
    f32 %5 = load f32* @alpha;
    [270 * f32]* %6 = getelementptr &([512 * [270 * f32]]* @imgIn)[i64 0][i64 0];
    [270 * f32]* %7 = getelementptr &([512 * [270 * f32]]* @imgOut)[i64 0][i64 0];
    [270 * f32]* %8 = getelementptr &([512 * [270 * f32]]* @my_y1)[i64 0][i64 0];
    [270 * f32]* %9 = getelementptr &([512 * [270 * f32]]* @my_y2)[i64 0][i64 0];
    call (i32, i32, f32, [270 * f32]*, [270 * f32]*, [270 * f32]*, [270 * f32]*) -> void @kernel_deriche(i32 %3, i32 %4, f32 %5, [270 * f32]* %6, [270 * f32]* %7, [270 * f32]* %8, [270 * f32]* %9);
    call (i32) -> void @stoptime(i32 158);
    i32 %10 = load i32* @w;
    i32 %11 = load i32* @h;
    i32 %12 = mul i32 %10, i32 %11;
    [270 * f32]* %13 = getelementptr &([512 * [270 * f32]]* @imgOut)[i64 0][i64 0];
    f32* %14 = getelementptr &([270 * f32]* %13)[i64 0][i64 0];
    call (i32, f32*) -> void @putfarray(i32 %12, f32* %14);
    ret i32 0;
}
