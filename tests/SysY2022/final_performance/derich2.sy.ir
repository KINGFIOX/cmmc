internal func @getfarray(f32*) -> i32 { NoMemoryRead };
internal func @putfarray(i32, f32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [512 * [270 * f32]]* @imgIn;
internal [512 * [270 * f32]]* @imgOut;
internal [512 * [270 * f32]]* @my_y1;
internal [512 * [270 * f32]]* @my_y2;
internal func @newPow(f32, i32, i32*, i32*, f32*) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry(f32 %arg, i32 %arg1, i32* %arg2, i32* %arg3, f32* %arg4):
    i1 %0 = scmp lt i32 %arg1, i32 0;
    cbr i1 %0, [ ^indirect1 i32 %arg1, f32 %arg, f32* %arg4, i32* %arg3, i32* %arg2 ], [ ^indirect i32 %arg1, f32* %arg4, i32* %arg3, i32* %arg2, f32 %arg, i32 %arg1 ];
^indirect(i32 %arg, f32* %arg1, i32* %arg2, i32* %arg3, f32 %arg4, i32 %arg5):
    i1 %0 = scmp eq i32 %arg, i32 0;
    cbr i1 %0, [ ^if.then ], [ ^if.else i32* %arg3, i32* %arg2, f32* %arg1, f32 %arg4, i32 %arg5 ];
^indirect1(i32 %arg, f32 %arg1, f32* %arg2, i32* %arg3, i32* %arg4):
    i32 %0 = neg i32 %arg;
    f32 %1 = call (f32, i32, i32*, i32*, f32*) -> f32 @newPow(f32 %arg1, i32 %0, i32* %arg4, i32* %arg3, f32* %arg2);
    f32 %2 = fdiv f32 1, f32 %1;
    ret f32 %2;
^if.else(i32* %arg, i32* %arg1, f32* %arg2, f32 %arg3, i32 %arg4):
    i1 %0 = scmp gt i32 %arg4, i32 0;
    cbr i1 %0, [ ^indirect2 i32 %arg4, f32* %arg2, i32* %arg1, i32* %arg, f32 %arg3 ], [ ^b ];
^if.then():
    ret f32 1;
^indirect2(i32 %arg, f32* %arg1, i32* %arg2, i32* %arg3, f32 %arg4):
    i32 %0 = sub i32 %arg, i32 1;
    f32 %1 = call (f32, i32, i32*, i32*, f32*) -> f32 @newPow(f32 %arg4, i32 %0, i32* %arg3, i32* %arg2, f32* %arg1);
    f32 %2 = fmul f32 %arg4, f32 %1;
    ret f32 %2;
^b():
    unreachable;
}
func @main() -> i32 { NoRecurse Entry } {
^entry():
    i32* %w = alloc i32;
    store i32* %w with i32 512;
    i32* %h = alloc i32;
    store i32* %h with i32 270;
    f32* %alpha = alloc f32;
    store f32* %alpha with f32 0.25;
    f32* %0 = getelementptr &([512 * [270 * f32]]* @imgIn)[i32 0][i32 0][i32 0];
    i32 %1 = call (f32*) -> i32 @getfarray(f32* %0);
    f32 %2 = load f32* %alpha;
    i32 %3 = load i32* %h;
    i32 %4 = load i32* %w;
    call (i32) -> void @starttime(i32 156);
    f32* %a1 = alloc f32;
    f32* %a2 = alloc f32;
    f32* %a3 = alloc f32;
    f32* %a4 = alloc f32;
    f32* %a5 = alloc f32;
    f32* %a6 = alloc f32;
    f32* %a7 = alloc f32;
    f32* %a8 = alloc f32;
    f32* %b1 = alloc f32;
    f32* %b2 = alloc f32;
    f32* %c1 = alloc f32;
    f32* %c2 = alloc f32;
    f32 %5 = fneg f32 %2;
    f32 %6 = fdiv f32 %5, f32 256;
    f32 %7 = fadd f32 1, f32 %6;
    f32 %8 = fmul f32 %7, f32 %7;
    f32 %9 = fmul f32 %8, f32 %8;
    f32 %10 = fmul f32 %9, f32 %9;
    f32 %11 = fmul f32 %10, f32 %10;
    f32 %12 = fmul f32 %11, f32 %11;
    f32 %13 = fmul f32 %12, f32 %12;
    f32 %14 = fmul f32 %13, f32 %13;
    f32 %15 = fmul f32 %14, f32 %14;
    f32 %16 = fsub f32 1, f32 %15;
    f32 %17 = fmul f32 %16, f32 %16;
    f32 %18 = fmul f32 2, f32 %2;
    f32 %19 = ffma f32 %18, f32 %15, f32 1;
    f32 %20 = fdiv f32 %18, f32 256;
    f32 %21 = fadd f32 1, f32 %20;
    f32 %22 = fmul f32 %21, f32 %21;
    f32 %23 = fmul f32 %22, f32 %22;
    f32 %24 = fmul f32 %23, f32 %23;
    f32 %25 = fmul f32 %24, f32 %24;
    f32 %26 = fmul f32 %25, f32 %25;
    f32 %27 = fmul f32 %26, f32 %26;
    f32 %28 = fmul f32 %27, f32 %27;
    f32 %29 = fmul f32 %28, f32 %28;
    f32 %30 = fsub f32 %19, f32 %29;
    f32 %31 = fdiv f32 %17, f32 %30;
    store f32* %a1 with f32 %31;
    store f32* %a5 with f32 %31;
    f32 %32 = fmul f32 %31, f32 %15;
    f32 %33 = fsub f32 %2, f32 1;
    f32 %34 = fmul f32 %32, f32 %33;
    store f32* %a6 with f32 %34;
    store f32* %a2 with f32 %34;
    f32 %35 = fadd f32 %2, f32 1;
    f32 %36 = fmul f32 %32, f32 %35;
    store f32* %a7 with f32 %36;
    store f32* %a3 with f32 %36;
    f32 %37 = fneg f32 %31;
    f32 %38 = fmul f32 -2, f32 %2;
    f32 %39 = fdiv f32 %38, f32 256;
    f32 %40 = fadd f32 1, f32 %39;
    f32 %41 = fmul f32 %40, f32 %40;
    f32 %42 = fmul f32 %41, f32 %41;
    f32 %43 = fmul f32 %42, f32 %42;
    f32 %44 = fmul f32 %43, f32 %43;
    f32 %45 = fmul f32 %44, f32 %44;
    f32 %46 = fmul f32 %45, f32 %45;
    f32 %47 = fmul f32 %46, f32 %46;
    f32 %48 = fmul f32 %47, f32 %47;
    f32 %49 = fmul f32 %37, f32 %48;
    store f32* %a8 with f32 %49;
    store f32* %a4 with f32 %49;
    i32 %50 = f2s f32 %5 to i32;
    f32 %51 = call (f32, i32, i32*, i32*, f32*) -> f32 @newPow(f32 2, i32 %50, i32* %w, i32* %h, f32* %alpha);
    store f32* %b1 with f32 %51;
    f32 %52 = fneg f32 %48;
    store f32* %b2 with f32 %52;
    store f32* %c1 with f32 1;
    store f32* %c2 with f32 1;
    i1 %53 = scmp lt i32 0, i32 %4;
    cbr i1 %53, [ ^while.body f32* %a4, f32* %b1, f32* %b2, f32* %a1, f32* %a2, f32* %c2, f32* %a7, f32* %c1, f32* %a8, f32* %a6, f32* %a5, f32* %a3, i32 %4, i32 %3, i32 %4, i32 %3, i32 0, f32 %31, f32 %34, f32 %36, f32 %49, f32 %31, f32 %34, f32 %36, f32 %49, f32 %51, f32 %52, f32 1, f32 1, i1 %53 ], [ ^b f32* %a5, f32* %a3, f32* %a4, f32* %b1, f32* %b2, f32* %a7, f32* %c2, f32* %c1, f32* %a8, f32* %a6, i32 %4, i32 %3, i32 %4, i32 %3, f32 %36, f32 %49, f32 %31, f32 %34, f32 %36, f32 %49, f32 %51, f32 %52, f32 1, f32 1, i1 %53 ];
^while.body(f32* %arg, f32* %arg1, f32* %arg2, f32* %arg3, f32* %arg4, f32* %arg5, f32* %arg6, f32* %arg7, f32* %arg8, f32* %arg9, f32* %arg10, f32* %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, f32 %arg21, f32 %arg22, f32 %arg23, f32 %arg24, f32 %arg25, f32 %arg26, f32 %arg27, f32 %arg28, i1 %arg29):
    i1 %0 = scmp lt i32 0, i32 %arg15;
    cbr i1 %0, [ ^while.body1 f32* %arg, f32* %arg1, f32* %arg4, f32* %arg2, f32* %arg3, f32* %arg5, f32* %arg6, f32* %arg7, f32* %arg8, f32* %arg9, f32* %arg10, f32* %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16, i32 0, f32 0, f32 0, f32 0, f32 %arg17, f32 %arg18, f32 %arg25, f32 %arg26, f32 0, i1 %arg29 ], [ ^b1 f32* %arg7, f32* %arg1, f32* %arg4, f32* %arg2, f32* %arg8, f32* %arg9, f32* %arg3, f32* %arg10, f32* %arg11, f32* %arg, f32* %arg6, f32* %arg5, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, f32 %arg21, f32 %arg22, f32 %arg23, f32 %arg24, f32 %arg25, f32 %arg26, f32 %arg27, f32 %arg28, i1 %arg29 ];
^b(f32* %arg, f32* %arg1, f32* %arg2, f32* %arg3, f32* %arg4, f32* %arg5, f32* %arg6, f32* %arg7, f32* %arg8, f32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, f32 %arg14, f32 %arg15, f32 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, f32 %arg21, f32 %arg22, f32 %arg23, i1 %arg24):
    cbr i1 %arg24, [ ^while.body2 f32* %arg4, f32* %arg3, f32* %arg2, f32* %arg1, f32* %arg9, f32* %arg8, f32* %arg, f32* %arg5, f32* %arg6, f32* %arg7, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 0, f32 %arg14, f32 %arg15, f32 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, f32 %arg21, f32 %arg22, f32 %arg23, i1 %arg24 ], [ ^b2 f32* %arg5, f32* %arg6, f32* %arg7, f32* %arg3, f32* %arg8, f32* %arg4, f32* %arg9, f32* %arg, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, f32 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, f32 %arg21, f32 %arg22, f32 %arg23, i1 %arg24 ];
^while.body1(f32* %arg, f32* %arg1, f32* %arg2, f32* %arg3, f32* %arg4, f32* %arg5, f32* %arg6, f32* %arg7, f32* %arg8, f32* %arg9, f32* %arg10, f32* %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16, i32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, f32 %arg21, f32 %arg22, f32 %arg23, f32 %arg24, f32 %arg25, i1 %arg26):
    [270 * f32]* %0 = getelementptr &([512 * [270 * f32]]* @my_y1)[i32 0][i32 %arg16];
    f32* %1 = getelementptr &([270 * f32]* %0)[i32 0][i32 %arg17];
    [270 * f32]* %2 = getelementptr &([512 * [270 * f32]]* @imgIn)[i32 0][i32 %arg16];
    f32* %3 = getelementptr &([270 * f32]* %2)[i32 0][i32 %arg17];
    f32 %4 = load f32* %3;
    f32 %5 = fmul f32 %arg22, f32 %arg18;
    f32 %6 = ffma f32 %arg21, f32 %4, f32 %5;
    f32 %7 = ffma f32 %arg23, f32 %arg19, f32 %6;
    f32 %8 = ffma f32 %arg24, f32 %arg20, f32 %7;
    store f32* %1 with f32 %8;
    f32 %9 = load f32* %arg5;
    f32 %10 = load f32* %arg7;
    f32 %11 = load f32* %arg3;
    f32 %12 = load f32* %arg1;
    f32 %13 = load f32* %arg8;
    f32 %14 = load f32* %arg6;
    f32 %15 = load f32* %arg9;
    f32 %16 = load f32* %arg10;
    f32 %17 = load f32* %arg;
    f32 %18 = load f32* %arg11;
    f32 %19 = load f32* %arg2;
    f32 %20 = load f32* %arg4;
    i32 %21 = add i32 %arg17, i32 1;
    i1 %22 = scmp lt i32 %21, i32 %arg15;
    cbr i1 %22, [ ^while.body1 f32* %arg, f32* %arg1, f32* %arg2, f32* %arg3, f32* %arg4, f32* %arg5, f32* %arg6, f32* %arg7, f32* %arg8, f32* %arg9, f32* %arg10, f32* %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16, i32 %21, f32 %4, f32 %8, f32 %arg25, f32 %20, f32 %19, f32 %12, f32 %11, f32 %8, i1 %arg26 ], [ ^b1 f32* %arg7, f32* %arg1, f32* %arg2, f32* %arg3, f32* %arg8, f32* %arg9, f32* %arg4, f32* %arg10, f32* %arg11, f32* %arg, f32* %arg6, f32* %arg5, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16, f32 %20, f32 %19, f32 %18, f32 %17, f32 %16, f32 %15, f32 %14, f32 %13, f32 %12, f32 %11, f32 %10, f32 %9, i1 %arg26 ];
^b1(f32* %arg, f32* %arg1, f32* %arg2, f32* %arg3, f32* %arg4, f32* %arg5, f32* %arg6, f32* %arg7, f32* %arg8, f32* %arg9, f32* %arg10, f32* %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, f32 %arg21, f32 %arg22, f32 %arg23, f32 %arg24, f32 %arg25, f32 %arg26, f32 %arg27, f32 %arg28, i1 %arg29):
    i32 %0 = add i32 %arg16, i32 1;
    i1 %1 = scmp lt i32 %0, i32 %arg14;
    cbr i1 %1, [ ^while.body f32* %arg9, f32* %arg1, f32* %arg3, f32* %arg6, f32* %arg2, f32* %arg11, f32* %arg10, f32* %arg, f32* %arg4, f32* %arg5, f32* %arg7, f32* %arg8, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %0, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, f32 %arg21, f32 %arg22, f32 %arg23, f32 %arg24, f32 %arg25, f32 %arg26, f32 %arg27, f32 %arg28, i1 %arg29 ], [ ^b f32* %arg7, f32* %arg8, f32* %arg9, f32* %arg1, f32* %arg3, f32* %arg10, f32* %arg11, f32* %arg, f32* %arg4, f32* %arg5, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, f32 %arg19, f32 %arg20, f32 %arg21, f32 %arg22, f32 %arg23, f32 %arg24, f32 %arg25, f32 %arg26, f32 %arg27, f32 %arg28, i1 %arg29 ];
^while.body2(f32* %arg, f32* %arg1, f32* %arg2, f32* %arg3, f32* %arg4, f32* %arg5, f32* %arg6, f32* %arg7, f32* %arg8, f32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, f32 %arg15, f32 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, f32 %arg21, f32 %arg22, f32 %arg23, f32 %arg24, i1 %arg25):
    i32 %0 = sub i32 %arg13, i32 1;
    i1 %1 = scmp ge i32 %0, i32 0;
    cbr i1 %1, [ ^while.body3 f32* %arg1, f32* %arg, f32* %arg2, f32* %arg3, f32* %arg4, f32* %arg5, f32* %arg6, f32* %arg7, f32* %arg8, f32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %0, f32 0, f32 0, f32 0, f32 0, f32 %arg15, f32 %arg16, f32 %arg21, f32 %arg22, f32 0, f32 0, i1 %arg25 ], [ ^b3 f32* %arg6, f32* %arg3, f32* %arg2, f32* %arg1, f32* %arg, f32* %arg7, f32* %arg8, f32* %arg9, f32* %arg5, f32* %arg4, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, f32 %arg15, f32 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, f32 %arg21, f32 %arg22, f32 %arg23, f32 %arg24, i1 %arg25 ];
^b2(f32* %arg, f32* %arg1, f32* %arg2, f32* %arg3, f32* %arg4, f32* %arg5, f32* %arg6, f32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, f32 %arg12, f32 %arg13, f32 %arg14, f32 %arg15, f32 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, i1 %arg20):
    cbr i1 %arg20, [ ^while.body4 f32* %arg2, f32* %arg, f32* %arg3, f32* %arg4, f32* %arg1, f32* %arg5, f32* %arg6, f32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 0, f32 %arg12, f32 %arg13, f32 %arg14, f32 %arg15, f32 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, i1 %arg20 ], [ ^b4 f32* %arg1, f32* %arg3, f32* %arg5, f32* %arg6, f32* %arg7, f32* %arg, f32* %arg4, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, f32 %arg12, f32 %arg13, f32 %arg14, f32 %arg15, f32 %arg16, f32 %arg17, f32 %arg19, i1 %arg20 ];
^while.body3(f32* %arg, f32* %arg1, f32* %arg2, f32* %arg3, f32* %arg4, f32* %arg5, f32* %arg6, f32* %arg7, f32* %arg8, f32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, f32 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, f32 %arg21, f32 %arg22, f32 %arg23, f32 %arg24, f32 %arg25, i1 %arg26):
    [270 * f32]* %0 = getelementptr &([512 * [270 * f32]]* @my_y2)[i32 0][i32 %arg14];
    f32* %1 = getelementptr &([270 * f32]* %0)[i32 0][i32 %arg15];
    f32 %2 = fmul f32 %arg21, f32 %arg17;
    f32 %3 = ffma f32 %arg20, f32 %arg16, f32 %2;
    f32 %4 = ffma f32 %arg22, f32 %arg18, f32 %3;
    f32 %5 = ffma f32 %arg23, f32 %arg19, f32 %4;
    store f32* %1 with f32 %5;
    f32 %6 = load f32* %arg8;
    f32 %7 = load f32* %arg9;
    f32 %8 = load f32* %arg1;
    f32 %9 = load f32* %arg;
    f32 %10 = load f32* %arg5;
    f32 %11 = load f32* %arg7;
    f32 %12 = load f32* %arg4;
    f32 %13 = load f32* %arg6;
    f32 %14 = load f32* %arg2;
    f32 %15 = load f32* %arg3;
    [270 * f32]* %16 = getelementptr &([512 * [270 * f32]]* @imgIn)[i32 0][i32 %arg14];
    f32* %17 = getelementptr &([270 * f32]* %16)[i32 0][i32 %arg15];
    f32 %18 = load f32* %17;
    i32 %19 = sub i32 %arg15, i32 1;
    i1 %20 = scmp ge i32 %19, i32 0;
    cbr i1 %20, [ ^while.body3 f32* %arg, f32* %arg1, f32* %arg2, f32* %arg3, f32* %arg4, f32* %arg5, f32* %arg6, f32* %arg7, f32* %arg8, f32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %19, f32 %18, f32 %arg24, f32 %5, f32 %arg25, f32 %15, f32 %14, f32 %9, f32 %8, f32 %18, f32 %5, i1 %arg26 ], [ ^b3 f32* %arg6, f32* %arg3, f32* %arg2, f32* %arg, f32* %arg1, f32* %arg7, f32* %arg8, f32* %arg9, f32* %arg5, f32* %arg4, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, f32 %15, f32 %14, f32 %13, f32 %12, f32 %11, f32 %10, f32 %9, f32 %8, f32 %7, f32 %6, i1 %arg26 ];
^b3(f32* %arg, f32* %arg1, f32* %arg2, f32* %arg3, f32* %arg4, f32* %arg5, f32* %arg6, f32* %arg7, f32* %arg8, f32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, f32 %arg15, f32 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, f32 %arg21, f32 %arg22, f32 %arg23, f32 %arg24, i1 %arg25):
    i32 %0 = add i32 %arg14, i32 1;
    i1 %1 = scmp lt i32 %0, i32 %arg12;
    cbr i1 %1, [ ^while.body2 f32* %arg4, f32* %arg3, f32* %arg2, f32* %arg1, f32* %arg9, f32* %arg8, f32* %arg, f32* %arg5, f32* %arg6, f32* %arg7, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %0, f32 %arg15, f32 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, f32 %arg21, f32 %arg22, f32 %arg23, f32 %arg24, i1 %arg25 ], [ ^b2 f32* %arg5, f32* %arg6, f32* %arg7, f32* %arg3, f32* %arg8, f32* %arg4, f32* %arg9, f32* %arg, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, f32 %arg21, f32 %arg22, f32 %arg23, f32 %arg24, i1 %arg25 ];
^while.body4(f32* %arg, f32* %arg1, f32* %arg2, f32* %arg3, f32* %arg4, f32* %arg5, f32* %arg6, f32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, f32 %arg13, f32 %arg14, f32 %arg15, f32 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, i1 %arg21):
    i1 %0 = scmp lt i32 0, i32 %arg11;
    cbr i1 %0, [ ^while.body5 f32* %arg, f32* %arg1, f32* %arg2, f32* %arg3, f32* %arg4, f32* %arg5, f32* %arg6, f32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 0, f32 %arg19, i1 %arg21 ], [ ^b5 f32* %arg1, f32* %arg, f32* %arg2, f32* %arg3, f32* %arg4, f32* %arg5, f32* %arg6, f32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, f32 %arg13, f32 %arg14, f32 %arg15, f32 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, i1 %arg21 ];
^b4(f32* %arg, f32* %arg1, f32* %arg2, f32* %arg3, f32* %arg4, f32* %arg5, f32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32 %arg11, f32 %arg12, f32 %arg13, f32 %arg14, f32 %arg15, f32 %arg16, f32 %arg17, i1 %arg18):
    i1 %0 = scmp lt i32 0, i32 %arg10;
    cbr i1 %0, [ ^while.body6 f32* %arg1, f32* %arg2, f32* %arg3, f32* %arg4, f32* %arg6, f32* %arg, f32* %arg5, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 0, f32 %arg11, f32 %arg12, f32 %arg13, f32 %arg14, f32 %arg15, f32 %arg16, f32 %arg17, i1 %arg18 ], [ ^b6 f32* %arg1, f32* %arg5, f32* %arg2, f32* %arg6, f32* %arg, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32 %arg13, f32 %arg14, f32 %arg15, f32 %arg16, f32 %arg17, i1 %arg18 ];
^while.body5(f32* %arg, f32* %arg1, f32* %arg2, f32* %arg3, f32* %arg4, f32* %arg5, f32* %arg6, f32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, f32 %arg14, i1 %arg15):
    [270 * f32]* %0 = getelementptr &([512 * [270 * f32]]* @imgOut)[i32 0][i32 %arg12];
    f32* %1 = getelementptr &([270 * f32]* %0)[i32 0][i32 %arg13];
    [270 * f32]* %2 = getelementptr &([512 * [270 * f32]]* @my_y1)[i32 0][i32 %arg12];
    f32* %3 = getelementptr &([270 * f32]* %2)[i32 0][i32 %arg13];
    f32 %4 = load f32* %3;
    [270 * f32]* %5 = getelementptr &([512 * [270 * f32]]* @my_y2)[i32 0][i32 %arg12];
    f32* %6 = getelementptr &([270 * f32]* %5)[i32 0][i32 %arg13];
    f32 %7 = load f32* %6;
    f32 %8 = fadd f32 %4, f32 %7;
    f32 %9 = fmul f32 %arg14, f32 %8;
    store f32* %1 with f32 %9;
    f32 %10 = load f32* %arg4;
    f32 %11 = load f32* %arg;
    f32 %12 = load f32* %arg5;
    f32 %13 = load f32* %arg2;
    f32 %14 = load f32* %arg3;
    f32 %15 = load f32* %arg1;
    f32 %16 = load f32* %arg6;
    f32 %17 = load f32* %arg7;
    i32 %18 = add i32 %arg13, i32 1;
    i1 %19 = scmp lt i32 %18, i32 %arg11;
    cbr i1 %19, [ ^while.body5 f32* %arg, f32* %arg1, f32* %arg2, f32* %arg3, f32* %arg4, f32* %arg5, f32* %arg6, f32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %18, f32 %11, i1 %arg15 ], [ ^b5 f32* %arg1, f32* %arg, f32* %arg2, f32* %arg3, f32* %arg4, f32* %arg5, f32* %arg6, f32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, f32 %17, f32 %16, f32 %15, f32 %14, f32 %13, f32 %12, f32 %11, f32 %10, i1 %arg15 ];
^b5(f32* %arg, f32* %arg1, f32* %arg2, f32* %arg3, f32* %arg4, f32* %arg5, f32* %arg6, f32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, f32 %arg13, f32 %arg14, f32 %arg15, f32 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, i1 %arg21):
    i32 %0 = add i32 %arg12, i32 1;
    i1 %1 = scmp lt i32 %0, i32 %arg10;
    cbr i1 %1, [ ^while.body4 f32* %arg1, f32* %arg, f32* %arg2, f32* %arg3, f32* %arg4, f32* %arg5, f32* %arg6, f32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %0, f32 %arg13, f32 %arg14, f32 %arg15, f32 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, i1 %arg21 ], [ ^b4 f32* %arg4, f32* %arg2, f32* %arg5, f32* %arg6, f32* %arg7, f32* %arg, f32* %arg3, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, f32 %arg13, f32 %arg14, f32 %arg15, f32 %arg16, f32 %arg17, f32 %arg18, f32 %arg20, i1 %arg21 ];
^while.body6(f32* %arg, f32* %arg1, f32* %arg2, f32* %arg3, f32* %arg4, f32* %arg5, f32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, f32 %arg12, f32 %arg13, f32 %arg14, f32 %arg15, f32 %arg16, f32 %arg17, f32 %arg18, i1 %arg19):
    cbr i1 %arg19, [ ^while.body7 f32* %arg, f32* %arg2, f32* %arg3, f32* %arg1, f32* %arg4, f32* %arg5, f32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 0, i32 %arg11, f32 0, f32 0, f32 0, f32 %arg12, f32 %arg13, f32 %arg16, f32 %arg17, f32 0, i1 %arg19 ], [ ^b7 f32* %arg5, f32* %arg, f32* %arg1, f32* %arg2, f32* %arg3, f32* %arg6, f32* %arg4, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, f32 %arg12, f32 %arg13, f32 %arg14, f32 %arg15, f32 %arg16, f32 %arg17, f32 %arg18, i1 %arg19 ];
^b6(f32* %arg, f32* %arg1, f32* %arg2, f32* %arg3, f32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, f32 %arg9, f32 %arg10, f32 %arg11, f32 %arg12, f32 %arg13, i1 %arg14):
    i1 %0 = scmp lt i32 0, i32 %arg8;
    cbr i1 %0, [ ^while.body8 f32* %arg3, f32* %arg1, f32* %arg, f32* %arg2, f32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 0, f32 %arg9, f32 %arg10, f32 %arg11, f32 %arg12, f32 %arg13, i1 %arg14 ], [ ^b8 f32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, f32 %arg13, i1 %arg14 ];
^while.body7(f32* %arg, f32* %arg1, f32* %arg2, f32* %arg3, f32* %arg4, f32* %arg5, f32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, f32 %arg13, f32 %arg14, f32 %arg15, f32 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, i1 %arg21):
    [270 * f32]* %0 = getelementptr &([512 * [270 * f32]]* @my_y1)[i32 0][i32 %arg11];
    f32* %1 = getelementptr &([270 * f32]* %0)[i32 0][i32 %arg12];
    [270 * f32]* %2 = getelementptr &([512 * [270 * f32]]* @imgOut)[i32 0][i32 %arg11];
    f32* %3 = getelementptr &([270 * f32]* %2)[i32 0][i32 %arg12];
    f32 %4 = load f32* %3;
    f32 %5 = fmul f32 %arg17, f32 %arg13;
    f32 %6 = ffma f32 %arg16, f32 %4, f32 %5;
    f32 %7 = ffma f32 %arg18, f32 %arg14, f32 %6;
    f32 %8 = ffma f32 %arg19, f32 %arg15, f32 %7;
    store f32* %1 with f32 %8;
    f32 %9 = load f32* %arg5;
    f32 %10 = load f32* %arg3;
    f32 %11 = load f32* %arg;
    f32 %12 = load f32* %arg4;
    f32 %13 = load f32* %arg6;
    f32 %14 = load f32* %arg1;
    f32 %15 = load f32* %arg2;
    i32 %16 = add i32 %arg11, i32 1;
    i1 %17 = scmp lt i32 %16, i32 %arg9;
    cbr i1 %17, [ ^while.body7 f32* %arg, f32* %arg1, f32* %arg2, f32* %arg3, f32* %arg4, f32* %arg5, f32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %16, i32 %arg12, f32 %4, f32 %8, f32 %arg20, f32 %15, f32 %14, f32 %11, f32 %10, f32 %8, i1 %arg21 ], [ ^b7 f32* %arg5, f32* %arg, f32* %arg3, f32* %arg1, f32* %arg2, f32* %arg6, f32* %arg4, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg12, f32 %15, f32 %14, f32 %13, f32 %12, f32 %11, f32 %10, f32 %9, i1 %arg21 ];
^b7(f32* %arg, f32* %arg1, f32* %arg2, f32* %arg3, f32* %arg4, f32* %arg5, f32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, f32 %arg12, f32 %arg13, f32 %arg14, f32 %arg15, f32 %arg16, f32 %arg17, f32 %arg18, i1 %arg19):
    i32 %0 = add i32 %arg11, i32 1;
    i1 %1 = scmp lt i32 %0, i32 %arg10;
    cbr i1 %1, [ ^while.body6 f32* %arg1, f32* %arg2, f32* %arg3, f32* %arg4, f32* %arg6, f32* %arg, f32* %arg5, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %0, f32 %arg12, f32 %arg13, f32 %arg14, f32 %arg15, f32 %arg16, f32 %arg17, f32 %arg18, i1 %arg19 ], [ ^b6 f32* %arg1, f32* %arg5, f32* %arg2, f32* %arg6, f32* %arg, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32 %arg14, f32 %arg15, f32 %arg16, f32 %arg17, f32 %arg18, i1 %arg19 ];
^while.body8(f32* %arg, f32* %arg1, f32* %arg2, f32* %arg3, f32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, f32 %arg10, f32 %arg11, f32 %arg12, f32 %arg13, f32 %arg14, i1 %arg15):
    i32 %0 = sub i32 %arg7, i32 1;
    i1 %1 = scmp ge i32 %0, i32 0;
    cbr i1 %1, [ ^while.body9 f32* %arg3, f32* %arg, f32* %arg2, f32* %arg1, f32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %0, i32 %arg9, f32 0, f32 0, f32 0, f32 0, f32 %arg10, f32 %arg11, f32 %arg12, f32 %arg13, f32 0, f32 0, i1 %arg15 ], [ ^b9 f32* %arg2, f32* %arg1, f32* %arg3, f32* %arg, f32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, f32 %arg10, f32 %arg11, f32 %arg12, f32 %arg13, f32 %arg14, i1 %arg15 ];
^b8(f32* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, f32 %arg5, i1 %arg6):
    cbr i1 %arg6, [ ^while.body10 f32* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 0, f32 %arg5 ], [ ^entry1 i32 %arg1, i32 %arg2 ];
^while.body9(f32* %arg, f32* %arg1, f32* %arg2, f32* %arg3, f32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32 %arg11, f32 %arg12, f32 %arg13, f32 %arg14, f32 %arg15, f32 %arg16, f32 %arg17, f32 %arg18, f32 %arg19, f32 %arg20, i1 %arg21):
    [270 * f32]* %0 = getelementptr &([512 * [270 * f32]]* @my_y2)[i32 0][i32 %arg9];
    f32* %1 = getelementptr &([270 * f32]* %0)[i32 0][i32 %arg10];
    f32 %2 = fmul f32 %arg16, f32 %arg12;
    f32 %3 = ffma f32 %arg15, f32 %arg11, f32 %2;
    f32 %4 = ffma f32 %arg17, f32 %arg13, f32 %3;
    f32 %5 = ffma f32 %arg18, f32 %arg14, f32 %4;
    store f32* %1 with f32 %5;
    f32 %6 = load f32* %arg4;
    f32 %7 = load f32* %arg;
    f32 %8 = load f32* %arg2;
    f32 %9 = load f32* %arg1;
    f32 %10 = load f32* %arg3;
    [270 * f32]* %11 = getelementptr &([512 * [270 * f32]]* @imgOut)[i32 0][i32 %arg9];
    f32* %12 = getelementptr &([270 * f32]* %11)[i32 0][i32 %arg10];
    f32 %13 = load f32* %12;
    i32 %14 = sub i32 %arg9, i32 1;
    i1 %15 = scmp ge i32 %14, i32 0;
    cbr i1 %15, [ ^while.body9 f32* %arg, f32* %arg1, f32* %arg2, f32* %arg3, f32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %14, i32 %arg10, f32 %13, f32 %arg19, f32 %5, f32 %arg20, f32 %10, f32 %9, f32 %8, f32 %7, f32 %13, f32 %5, i1 %arg21 ], [ ^b9 f32* %arg2, f32* %arg3, f32* %arg, f32* %arg1, f32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg10, f32 %10, f32 %9, f32 %8, f32 %7, f32 %6, i1 %arg21 ];
^b9(f32* %arg, f32* %arg1, f32* %arg2, f32* %arg3, f32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, f32 %arg10, f32 %arg11, f32 %arg12, f32 %arg13, f32 %arg14, i1 %arg15):
    i32 %0 = add i32 %arg9, i32 1;
    i1 %1 = scmp lt i32 %0, i32 %arg8;
    cbr i1 %1, [ ^while.body8 f32* %arg3, f32* %arg1, f32* %arg, f32* %arg2, f32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %0, f32 %arg10, f32 %arg11, f32 %arg12, f32 %arg13, f32 %arg14, i1 %arg15 ], [ ^b8 f32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, f32 %arg14, i1 %arg15 ];
^while.body10(f32* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, f32 %arg6):
    i1 %0 = scmp lt i32 0, i32 %arg4;
    cbr i1 %0, [ ^while.body11 f32* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 0, f32 %arg6 ], [ ^b10 f32* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, f32 %arg6 ];
^entry1(i32 %arg, i32 %arg1):
    call (i32) -> void @stoptime(i32 158);
    i32 %0 = mul i32 %arg, i32 %arg1;
    f32* %1 = getelementptr &([512 * [270 * f32]]* @imgOut)[i32 0][i32 0][i32 0];
    call (i32, f32*) -> void @putfarray(i32 %0, f32* %1);
    ret i32 0;
^while.body11(f32* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, f32 %arg7):
    [270 * f32]* %0 = getelementptr &([512 * [270 * f32]]* @imgOut)[i32 0][i32 %arg5];
    f32* %1 = getelementptr &([270 * f32]* %0)[i32 0][i32 %arg6];
    [270 * f32]* %2 = getelementptr &([512 * [270 * f32]]* @my_y1)[i32 0][i32 %arg5];
    f32* %3 = getelementptr &([270 * f32]* %2)[i32 0][i32 %arg6];
    f32 %4 = load f32* %3;
    [270 * f32]* %5 = getelementptr &([512 * [270 * f32]]* @my_y2)[i32 0][i32 %arg5];
    f32* %6 = getelementptr &([270 * f32]* %5)[i32 0][i32 %arg6];
    f32 %7 = load f32* %6;
    f32 %8 = fadd f32 %4, f32 %7;
    f32 %9 = fmul f32 %arg7, f32 %8;
    store f32* %1 with f32 %9;
    f32 %10 = load f32* %arg;
    i32 %11 = add i32 %arg6, i32 1;
    i1 %12 = scmp lt i32 %11, i32 %arg4;
    cbr i1 %12, [ ^while.body11 f32* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %11, f32 %10 ], [ ^b10 f32* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, f32 %10 ];
^b10(f32* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, f32 %arg6):
    i32 %0 = add i32 %arg5, i32 1;
    i1 %1 = scmp lt i32 %0, i32 %arg3;
    cbr i1 %1, [ ^while.body10 f32* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %0, f32 %arg6 ], [ ^entry1 i32 %arg1, i32 %arg2 ];
}
