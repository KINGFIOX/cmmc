internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @median(i32* %arr, i32 %begin, i32 %end, i32 %pos, i32* %0) -> i32 {
^entry:
    i32* %xx = alloc i32;
    i32* %r = alloc i32;
    i32* %l = alloc i32;
    i32* %pivot = alloc i32;
    i32* %pos1 = alloc i32;
    i32* %end1 = alloc i32;
    i32* %begin1 = alloc i32;
    store i32* %begin1 with i32 %begin;
    store i32* %end1 with i32 %end;
    store i32* %pos1 with i32 %pos;
    i32* %1 = getelementptr &(i32* %arr)[i32 %begin];
    i32 %2 = load i32* %1;
    store i32* %pivot with i32 %2;
    store i32* %l with i32 %begin;
    i32 %3 = add i32 %end, i32 1;
    store i32* %r with i32 %3;
    store i32* %xx with i32 0;
    ubr ^while.header;
^while.header:
    i32* %4 = phi [^b7, i32* %61] [^b, i32* %4] [^entry, i32* %arr];
    i32 %5 = phi [^b7, i32 %62] [^b, i32 %5] [^entry, i32 %begin];
    i32 %6 = phi [^b7, i32 %63] [^b, i32 %6] [^entry, i32 %2];
    i32 %7 = phi [^b7, i32 %64] [^b, i32 %7] [^entry, i32 %begin];
    i32 %8 = phi [^b7, i32 %65] [^b, i32 %11] [^entry, i32 %3];
    i32 %9 = phi [^b7, i32 %66] [^b, i32 %22] [^entry, i32 0];
    i1 %10 = scmp lt i32 %7, i32 %8;
    cbr i1 %10(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i32 %11 = add i32 %8, i32 -1;
    store i32* %r with i32 %11;
    i32* %12 = getelementptr &(i32* %4)[i32 %11];
    i32 %13 = load i32* %12;
    i1 %14 = scmp lt i32 %13, i32 %6;
    cbr i1 %14(prob = 0.5), ^while.header1, ^b;
^while.header1:
    i32* %15 = phi [^b2, i32* %15] [^while.body, i32* %4] [^while.header, i32* %4];
    i32 %16 = phi [^b2, i32 %16] [^while.body, i32 %5] [^while.header, i32 %5];
    i32 %17 = phi [^b2, i32 %17] [^while.body, i32 %6] [^while.header, i32 %6];
    i32 %18 = phi [^b2, i32 %23] [^while.body, i32 %7] [^while.header, i32 %7];
    i32 %19 = phi [^b2, i32 %19] [^while.body, i32 %11] [^while.header, i32 %8];
    i32 %20 = phi [^b2, i32 %29] [^while.body, i32 %9] [^while.header, i32 %9];
    i1 %21 = scmp lt i32 %18, i32 %19;
    cbr i1 %21(prob = 0.97), ^while.body1, ^b1;
^b:
    i32 %22 = add i32 %9, i32 1;
    store i32* %xx with i32 %22;
    ubr ^while.header;
^while.body1:
    i32 %23 = add i32 %18, i32 1;
    store i32* %l with i32 %23;
    i32* %24 = getelementptr &(i32* %15)[i32 %23];
    i32 %25 = load i32* %24;
    i1 %26 = scmp ge i32 %25, i32 %17;
    cbr i1 %26(prob = 0.5), ^b1, ^b2;
^b1:
    i32 %27 = phi [^while.body1, i32 %23] [^while.header1, i32 %18];
    i1 %28 = scmp eq i32 %27, i32 %19;
    cbr i1 %28(prob = 0.5), ^b3, ^if.else;
^b2:
    i32 %29 = add i32 %20, i32 -1;
    store i32* %xx with i32 %29;
    ubr ^while.header1;
^b3:
    i32* %30 = getelementptr &(i32* %15)[i32 %16];
    store i32* %30 with i32 %17;
    i32 %31 = load i32* %begin1;
    i32 %32 = load i32* %l;
    i32* %33 = getelementptr &(i32* %15)[i32 %31];
    i32 %34 = load i32* %33;
    i32* %35 = getelementptr &(i32* %15)[i32 %32];
    i32 %36 = load i32* %35;
    store i32* %33 with i32 %36;
    store i32* %35 with i32 %34;
    i32 %37 = load i32* %begin1;
    i32 %38 = load i32* %end1;
    i32 %39 = load i32* %pos1;
    i32 %40 = load i32* %l;
    i32 %41 = load i32* %xx;
    ubr ^while.header2;
^if.else:
    i32* %42 = getelementptr &(i32* %15)[i32 %27];
    i32 %43 = load i32* %42;
    i32* %44 = getelementptr &(i32* %15)[i32 %19];
    i32 %45 = load i32* %44;
    store i32* %42 with i32 %45;
    store i32* %44 with i32 %43;
    i32 %46 = load i32* %begin1;
    i32 %47 = load i32* %pivot;
    i32 %48 = load i32* %l;
    i32 %49 = load i32* %r;
    i32 %50 = load i32* %xx;
    ubr ^while.header3;
^while.header2:
    i32* %51 = phi [^while.body2, i32* %51] [^b3, i32* %15];
    i32 %52 = phi [^while.body2, i32 %52] [^b3, i32 %37];
    i32 %53 = phi [^while.body2, i32 %53] [^b3, i32 %38];
    i32 %54 = phi [^while.body2, i32 %54] [^b3, i32 %39];
    i32 %55 = phi [^while.body2, i32 %55] [^b3, i32 %40];
    i32 %56 = phi [^while.body2, i32 %56] [^b3, i32 %41];
    i32 %57 = phi [^while.body2, i32 %57] [^b3, i32 %31];
    i32 %58 = phi [^while.body2, i32 %58] [^b3, i32 %32];
    i32 %59 = phi [^while.body2, i32 %75] [^b3, i32 0];
    i1 %60 = scmp lt i32 %59, i32 %57;
    cbr i1 %60(prob = 0.5), ^b4, ^b6;
^while.header3:
    i32* %61 = phi [^while.body3, i32* %61] [^if.else, i32* %15];
    i32 %62 = phi [^while.body3, i32 %62] [^if.else, i32 %46];
    i32 %63 = phi [^while.body3, i32 %63] [^if.else, i32 %47];
    i32 %64 = phi [^while.body3, i32 %64] [^if.else, i32 %48];
    i32 %65 = phi [^while.body3, i32 %65] [^if.else, i32 %49];
    i32 %66 = phi [^while.body3, i32 %66] [^if.else, i32 %50];
    i32 %67 = phi [^while.body3, i32 %67] [^if.else, i32 %27];
    i32 %68 = phi [^while.body3, i32 %68] [^if.else, i32 %19];
    i32 %69 = phi [^while.body3, i32 %76] [^if.else, i32 0];
    i1 %70 = scmp lt i32 %69, i32 %67;
    cbr i1 %70(prob = 0.5), ^b5, ^b7;
^b4:
    i1 %71 = scmp lt i32 %59, i32 %58;
    ubr ^b6;
^b5:
    i1 %72 = scmp lt i32 %69, i32 %68;
    ubr ^b7;
^b6:
    i1 %73 = phi [^b4, i1 %71] [^while.header2, i1 false];
    cbr i1 %73(prob = 0.97), ^while.body2, ^entry1;
^b7:
    i1 %74 = phi [^b5, i1 %72] [^while.header3, i1 false];
    cbr i1 %74(prob = 0.97), ^while.body3, ^while.header;
^while.body2:
    i32 %75 = add i32 %59, i32 1;
    ubr ^while.header2;
^while.body3:
    i32 %76 = add i32 %69, i32 1;
    ubr ^while.header3;
^entry1:
    i1 %77 = scmp gt i32 %55, i32 %54;
    cbr i1 %77(prob = 0.5), ^if.then, ^b8;
^b8:
    i1 %78 = scmp lt i32 %55, i32 %54;
    cbr i1 %78(prob = 0.5), ^if.then1, ^b9;
^if.then:
    i32 %79 = call (i32*, i32, i32, i32, i32*) -> i32 @median(i32* %51, i32 %52, i32 %55, i32 %54, i32* %0);
    ret i32 %79;
^if.then1:
    i32 %80 = add i32 %55, i32 1;
    i32 %81 = call (i32*, i32, i32, i32, i32*) -> i32 @median(i32* %51, i32 %80, i32 %53, i32 %54, i32* %0);
    ret i32 %81;
^b9:
    ret i32 %56;
}
internal [10000000 * i32]* @a;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %n = alloc i32;
    i32* %0 = getelementptr &([10000000 * i32]* @a)[i64 0][i64 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    store i32* %n with i32 %1;
    call (i32) -> void @starttime(i32 59);
    i32 %2 = add i32 %1, i32 -1;
    i32 %3 = sdiv i32 %1, i32 2;
    i32 %4 = call (i32*, i32, i32, i32, i32*) -> i32 @median(i32* %0, i32 0, i32 %2, i32 %3, i32* %n);
    i32 %5 = load i32* %n;
    call (i32) -> void @stoptime(i32 61);
    call (i32, i32*) -> void @putarray(i32 %5, i32* %0);
    i32 %6 = sdiv i32 %5, i32 2;
    i32* %7 = getelementptr &([10000000 * i32]* @a)[i64 0][i32 %6];
    i32 %8 = load i32* %7;
    i32 %9 = srem i32 %8, i32 256;
    ret i32 %9;
}
