internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryWrite NoRecurse } {
^entry():
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    i32* %j = alloc i32;
    store i32* %j with i32 0;
    i32 %0 = call () -> i32 @getint();
    [8192 * f32]* %x = alloc [8192 * f32];
    [8192 * f32]* %y = alloc [8192 * f32];
    f32* %total = alloc f32;
    store f32* %total with f32 0;
    f32* %a = alloc f32;
    store f32* %a with f32 0;
    f32* %b = alloc f32;
    store f32* %b with f32 1;
    call (i32) -> void @starttime(i32 22);
    ubr [ ^while.body f32* %a, f32* %b, i32* %j, [8192 * f32]* %y, [8192 * f32]* %x, f32* %total, i32* %i, i32 100000, i32 0, i32 0, i32 %0, f32 0, f32 0, f32 1 ];
^while.body(f32* %arg, f32* %arg1, i32* %arg2, [8192 * f32]* %arg3, [8192 * f32]* %arg4, f32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32 %arg11, f32 %arg12, f32 %arg13):
    i32 %0 = srem i32 %arg8, i32 10;
    i1 %1 = scmp neq i32 %0, i32 0;
    cbr i1 %1, [ ^if.then i32* %arg6, f32* %arg5, [8192 * f32]* %arg4, [8192 * f32]* %arg3, i32* %arg2, f32* %arg1, f32* %arg, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32 %arg11 ], [ ^if.else i32* %arg6, f32* %arg5, [8192 * f32]* %arg4, [8192 * f32]* %arg3, i32* %arg2, f32* %arg1, f32* %arg, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32 %arg11, f32 %arg12, f32 %arg13 ];
^if.then(i32* %arg, f32* %arg1, [8192 * f32]* %arg2, [8192 * f32]* %arg3, i32* %arg4, f32* %arg5, f32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32 %arg11):
    store f32* %arg6 with f32 0;
    store f32* %arg5 with f32 1;
    ubr [ ^while.header i32* %arg, f32* %arg1, [8192 * f32]* %arg2, f32* %arg6, f32* %arg5, [8192 * f32]* %arg3, i32* %arg4, i32 %arg9, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32 %arg11, f32 0, f32 1 ];
^if.else(i32* %arg, f32* %arg1, [8192 * f32]* %arg2, [8192 * f32]* %arg3, i32* %arg4, f32* %arg5, f32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32 %arg11, f32 %arg12, f32 %arg13):
    f32 %0 = fadd f32 %arg12, f32 0.1;
    store f32* %arg6 with f32 %0;
    f32 %1 = fadd f32 %arg13, f32 0.2;
    store f32* %arg5 with f32 %1;
    ubr [ ^while.header i32* %arg, f32* %arg1, [8192 * f32]* %arg2, f32* %arg6, f32* %arg5, [8192 * f32]* %arg3, i32* %arg4, i32 %arg9, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32 %arg11, f32 %0, f32 %1 ];
^while.header(i32* %arg, f32* %arg1, [8192 * f32]* %arg2, f32* %arg3, f32* %arg4, [8192 * f32]* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, f32 %arg12, f32 %arg13, f32 %arg14):
    i1 %0 = scmp lt i32 %arg7, i32 %arg11;
    cbr i1 %0, [ ^while.body1 i32* %arg, f32* %arg4, [8192 * f32]* %arg5, f32* %arg3, f32* %arg1, [8192 * f32]* %arg2, i32* %arg6, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, f32 %arg12, f32 %arg13, f32 %arg14 ], [ ^indirect f32* %arg3, f32* %arg4, i32* %arg6, i32* %arg, [8192 * f32]* %arg5, [8192 * f32]* %arg2, f32* %arg1, i32 %arg11, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, f32 %arg12, f32 %arg13, f32 %arg14 ];
^while.body1(i32* %arg, f32* %arg1, [8192 * f32]* %arg2, f32* %arg3, f32* %arg4, [8192 * f32]* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, f32 %arg11, f32 %arg12, f32 %arg13):
    f32* %0 = getelementptr &([8192 * f32]* %arg5)[i32 0][i32 %arg9];
    f32 %1 = s2f i32 %arg9 to f32;
    f32 %2 = fadd f32 %arg12, f32 %1;
    store f32* %0 with f32 %2;
    f32* %3 = getelementptr &([8192 * f32]* %arg2)[i32 0][i32 %arg9];
    f32 %4 = fadd f32 %arg13, f32 %1;
    store f32* %3 with f32 %4;
    i32 %5 = add i32 %arg9, i32 1;
    store i32* %arg6 with i32 %5;
    i1 %6 = scmp lt i32 %5, i32 %arg10;
    cbr i1 %6, [ ^while.body1 i32* %arg, f32* %arg1, [8192 * f32]* %arg2, f32* %arg3, f32* %arg4, [8192 * f32]* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %5, i32 %arg10, f32 %arg11, f32 %arg12, f32 %arg13 ], [ ^indirect f32* %arg3, f32* %arg1, i32* %arg6, i32* %arg, [8192 * f32]* %arg2, [8192 * f32]* %arg5, f32* %arg4, i32 %arg10, i32 %arg7, i32 %arg8, i32 %5, i32 %arg10, f32 %arg11, f32 %arg12, f32 %arg13 ];
^indirect(f32* %arg, f32* %arg1, i32* %arg2, i32* %arg3, [8192 * f32]* %arg4, [8192 * f32]* %arg5, f32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, f32 %arg12, f32 %arg13, f32 %arg14):
    f32* %0 = getelementptr &([8192 * f32]* %arg5)[i32 0][i32 0];
    f32* %1 = getelementptr &([8192 * f32]* %arg4)[i32 0][i32 0];
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    f32* %accumulator = alloc f32;
    store f32* %accumulator with f32 0;
    i1 %2 = scmp lt i32 0, i32 %arg7;
    cbr i1 %2, [ ^while.body2 i32* %i, f32* %accumulator, f32 %arg12, i32* %arg2, f32* %arg6, i32* %arg3, [8192 * f32]* %arg5, [8192 * f32]* %arg4, f32* %arg1, f32* %arg, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, f32 %arg13, f32 %arg14, f32* %0, f32* %1, i32 %arg7, i32 0, f32 0 ], [ ^b f32 %arg12, i32* %arg2, f32* %arg6, i32* %arg3, [8192 * f32]* %arg5, [8192 * f32]* %arg4, f32* %arg1, f32* %arg, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, f32 %arg13, f32 %arg14, f32 0 ];
^while.body2(i32* %arg, f32* %arg1, f32 %arg2, i32* %arg3, f32* %arg4, i32* %arg5, [8192 * f32]* %arg6, [8192 * f32]* %arg7, f32* %arg8, f32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, f32 %arg14, f32 %arg15, f32* %arg16, f32* %arg17, i32 %arg18, i32 %arg19, f32 %arg20):
    f32* %0 = getelementptr &(f32* %arg16)[i32 %arg19];
    f32 %1 = load f32* %0;
    f32* %2 = getelementptr &(f32* %arg17)[i32 %arg19];
    f32 %3 = load f32* %2;
    f32 %4 = ffma f32 %1, f32 %3, f32 %arg20;
    store f32* %arg1 with f32 %4;
    i32 %5 = add i32 %arg19, i32 1;
    store i32* %arg with i32 %5;
    i1 %6 = scmp lt i32 %5, i32 %arg18;
    cbr i1 %6, [ ^while.body2 i32* %arg, f32* %arg1, f32 %arg2, i32* %arg3, f32* %arg4, i32* %arg5, [8192 * f32]* %arg6, [8192 * f32]* %arg7, f32* %arg8, f32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, f32 %arg14, f32 %arg15, f32* %arg16, f32* %arg17, i32 %arg18, i32 %5, f32 %4 ], [ ^b f32 %arg2, i32* %arg3, f32* %arg4, i32* %arg5, [8192 * f32]* %arg6, [8192 * f32]* %arg7, f32* %arg8, f32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, f32 %arg14, f32 %arg15, f32 %4 ];
^b(f32 %arg, i32* %arg1, f32* %arg2, i32* %arg3, [8192 * f32]* %arg4, [8192 * f32]* %arg5, f32* %arg6, f32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, f32 %arg12, f32 %arg13, f32 %arg14):
    f32 %0 = fadd f32 %arg, f32 %arg14;
    store f32* %arg2 with f32 %0;
    i32 %1 = add i32 %arg9, i32 1;
    store i32* %arg3 with i32 %1;
    i1 %2 = scmp lt i32 %1, i32 %arg8;
    cbr i1 %2, [ ^while.body f32* %arg7, f32* %arg6, i32* %arg1, [8192 * f32]* %arg5, [8192 * f32]* %arg4, f32* %arg2, i32* %arg3, i32 %arg8, i32 %1, i32 %arg10, i32 %arg11, f32 %0, f32 %arg12, f32 %arg13 ], [ ^b1 f32 %0 ];
^b1(f32 %arg):
    call (i32) -> void @stoptime(i32 39);
    f32 %0 = fsub f32 %arg, f32 1.8338e+16;
    i1 %1 = fcmp le f32 %0, f32 1e-06;
    cbr i1 %1, [ ^if.then1 ], [ ^indirect1 f32 %arg ];
^indirect1(f32 %arg):
    f32 %0 = fsub f32 %arg, f32 1.8338e+16;
    i1 %1 = fcmp ge f32 %0, f32 -1e-06;
    cbr i1 %1, [ ^if.then1 ], [ ^if.else1 ];
^if.then1():
    call (i32) -> void @putint(i32 0);
    ret i32 0;
^if.else1():
    call (i32) -> void @putint(i32 1);
    ret i32 1;
}
