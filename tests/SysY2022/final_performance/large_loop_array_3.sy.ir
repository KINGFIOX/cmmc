internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry():
    i32 %0 = call () -> i32 @getint();
    [8192 * f32]* %x = alloc [8192 * f32];
    [8192 * f32]* %y = alloc [8192 * f32];
    call (i32) -> void @starttime(i32 22);
    f32* %1 = getelementptr &([8192 * f32]* %x)[i64 0][i64 0];
    f32* %2 = getelementptr &([8192 * f32]* %y)[i64 0][i64 0];
    i1 %3 = scmp gt i32 %0, i32 0;
    ubr [ ^while.body [8192 * f32]* %x, [8192 * f32]* %y, f32* %2, f32* %1, i32 0, i32 0, i32 %0, f32 0, f32 0, f32 1, i1 %3 ];
^while.body([8192 * f32]* %arg, [8192 * f32]* %arg1, f32* %arg2, f32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, f32 %arg7, f32 %arg8, f32 %arg9, i1 %arg10):
    i32 %0 = srem i32 %arg4, i32 10;
    i1 %1 = scmp neq i32 %0, i32 0;
    cbr i1 %1(prob = 0.5), [ ^while.header [8192 * f32]* %arg, [8192 * f32]* %arg1, i32 %arg5, f32* %arg3, f32* %arg2, i32 %arg4, i32 %arg5, i32 %arg6, f32 %arg7, f32 0, f32 1, i1 %arg10 ], [ ^if.else [8192 * f32]* %arg1, [8192 * f32]* %arg, f32* %arg3, f32* %arg2, i32 %arg4, i32 %arg5, i32 %arg6, f32 %arg7, f32 %arg8, f32 %arg9, i1 %arg10 ];
^if.else([8192 * f32]* %arg, [8192 * f32]* %arg1, f32* %arg2, f32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, f32 %arg7, f32 %arg8, f32 %arg9, i1 %arg10):
    f32 %0 = fadd f32 %arg8, f32 0.1;
    f32 %1 = fadd f32 %arg9, f32 0.2;
    ubr [ ^while.header [8192 * f32]* %arg1, [8192 * f32]* %arg, i32 %arg5, f32* %arg2, f32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, f32 %arg7, f32 %0, f32 %1, i1 %arg10 ];
^while.header([8192 * f32]* %arg, [8192 * f32]* %arg1, i32 %arg2, f32* %arg3, f32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, f32 %arg8, f32 %arg9, f32 %arg10, i1 %arg11):
    i1 %0 = scmp lt i32 %arg2, i32 %arg7;
    cbr i1 %0(prob = 0.97), [ ^super.header [8192 * f32]* %arg, [8192 * f32]* %arg1, f32* %arg4, f32* %arg3, i32 %arg5, i32 %arg6, i32 %arg7, f32 %arg8, f32 %arg9, f32 %arg10, i1 %arg11 ], [ ^indirect [8192 * f32]* %arg1, [8192 * f32]* %arg, i32 %arg7, f32* %arg4, f32* %arg3, i32 %arg5, i32 %arg6, i32 %arg7, f32 %arg8, f32 %arg9, f32 %arg10, i1 %arg11 ];
^super.header([8192 * f32]* %arg, [8192 * f32]* %arg1, f32* %arg2, f32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, f32 %arg7, f32 %arg8, f32 %arg9, i1 %arg10):
    i32 %0 = add i32 %arg5, i32 15;
    i1 %1 = scmp lt i32 %0, i32 %arg6;
    cbr i1 %1(prob = 0.67), [ ^while.body1 [8192 * f32]* %arg, [8192 * f32]* %arg1, f32* %arg2, f32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, f32 %arg7, f32 %arg8, f32 %arg9, i1 %arg10 ], [ ^while.body2 [8192 * f32]* %arg, [8192 * f32]* %arg1, f32* %arg2, f32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, f32 %arg7, f32 %arg8, f32 %arg9, i1 %arg10 ];
^indirect([8192 * f32]* %arg, [8192 * f32]* %arg1, i32 %arg2, f32* %arg3, f32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, f32 %arg8, f32 %arg9, f32 %arg10, i1 %arg11):
    cbr i1 %arg11(prob = 0.97), [ ^super.header1 f32 %arg8, [8192 * f32]* %arg, [8192 * f32]* %arg1, f32* %arg3, f32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, f32 %arg9, f32 %arg10, f32* %arg4, f32* %arg3, i32 %arg2, i32 0, f32 0, i1 %arg11 ], [ ^b f32 %arg8, [8192 * f32]* %arg, [8192 * f32]* %arg1, f32* %arg3, f32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, f32 %arg9, f32 %arg10, f32 0, i1 %arg11 ];
^while.body1([8192 * f32]* %arg, [8192 * f32]* %arg1, f32* %arg2, f32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, f32 %arg7, f32 %arg8, f32 %arg9, i1 %arg10):
    f32* %0 = getelementptr &([8192 * f32]* %arg)[i64 0][i32 %arg5];
    f32 %1 = s2f i32 %arg5 to f32;
    f32 %2 = fadd f32 %arg8, f32 %1;
    store f32* %0 with f32 %2;
    f32* %3 = getelementptr &([8192 * f32]* %arg1)[i64 0][i32 %arg5];
    f32 %4 = fadd f32 %arg9, f32 %1;
    store f32* %3 with f32 %4;
    i32 %5 = add i32 %arg5, i32 1;
    f32* %6 = getelementptr &(f32* %0)[i64 1];
    f32 %7 = s2f i32 %5 to f32;
    f32 %8 = fadd f32 %arg8, f32 %7;
    store f32* %6 with f32 %8;
    f32* %9 = getelementptr &(f32* %3)[i64 1];
    f32 %10 = fadd f32 %arg9, f32 %7;
    store f32* %9 with f32 %10;
    i32 %11 = add i32 %arg5, i32 2;
    f32* %12 = getelementptr &(f32* %0)[i64 2];
    f32 %13 = s2f i32 %11 to f32;
    f32 %14 = fadd f32 %arg8, f32 %13;
    store f32* %12 with f32 %14;
    f32* %15 = getelementptr &(f32* %3)[i64 2];
    f32 %16 = fadd f32 %arg9, f32 %13;
    store f32* %15 with f32 %16;
    i32 %17 = add i32 %arg5, i32 3;
    f32* %18 = getelementptr &(f32* %0)[i64 3];
    f32 %19 = s2f i32 %17 to f32;
    f32 %20 = fadd f32 %arg8, f32 %19;
    store f32* %18 with f32 %20;
    f32* %21 = getelementptr &(f32* %3)[i64 3];
    f32 %22 = fadd f32 %arg9, f32 %19;
    store f32* %21 with f32 %22;
    i32 %23 = add i32 %arg5, i32 4;
    f32* %24 = getelementptr &(f32* %0)[i64 4];
    f32 %25 = s2f i32 %23 to f32;
    f32 %26 = fadd f32 %arg8, f32 %25;
    store f32* %24 with f32 %26;
    f32* %27 = getelementptr &(f32* %3)[i64 4];
    f32 %28 = fadd f32 %arg9, f32 %25;
    store f32* %27 with f32 %28;
    i32 %29 = add i32 %arg5, i32 5;
    f32* %30 = getelementptr &(f32* %0)[i64 5];
    f32 %31 = s2f i32 %29 to f32;
    f32 %32 = fadd f32 %arg8, f32 %31;
    store f32* %30 with f32 %32;
    f32* %33 = getelementptr &(f32* %3)[i64 5];
    f32 %34 = fadd f32 %arg9, f32 %31;
    store f32* %33 with f32 %34;
    i32 %35 = add i32 %arg5, i32 6;
    f32* %36 = getelementptr &(f32* %0)[i64 6];
    f32 %37 = s2f i32 %35 to f32;
    f32 %38 = fadd f32 %arg8, f32 %37;
    store f32* %36 with f32 %38;
    f32* %39 = getelementptr &(f32* %3)[i64 6];
    f32 %40 = fadd f32 %arg9, f32 %37;
    store f32* %39 with f32 %40;
    i32 %41 = add i32 %arg5, i32 7;
    f32* %42 = getelementptr &(f32* %0)[i64 7];
    f32 %43 = s2f i32 %41 to f32;
    f32 %44 = fadd f32 %arg8, f32 %43;
    store f32* %42 with f32 %44;
    f32* %45 = getelementptr &(f32* %3)[i64 7];
    f32 %46 = fadd f32 %arg9, f32 %43;
    store f32* %45 with f32 %46;
    i32 %47 = add i32 %arg5, i32 8;
    f32* %48 = getelementptr &(f32* %0)[i64 8];
    f32 %49 = s2f i32 %47 to f32;
    f32 %50 = fadd f32 %arg8, f32 %49;
    store f32* %48 with f32 %50;
    f32* %51 = getelementptr &(f32* %3)[i64 8];
    f32 %52 = fadd f32 %arg9, f32 %49;
    store f32* %51 with f32 %52;
    i32 %53 = add i32 %arg5, i32 9;
    f32* %54 = getelementptr &(f32* %0)[i64 9];
    f32 %55 = s2f i32 %53 to f32;
    f32 %56 = fadd f32 %arg8, f32 %55;
    store f32* %54 with f32 %56;
    f32* %57 = getelementptr &(f32* %3)[i64 9];
    f32 %58 = fadd f32 %arg9, f32 %55;
    store f32* %57 with f32 %58;
    i32 %59 = add i32 %arg5, i32 10;
    f32* %60 = getelementptr &(f32* %0)[i64 10];
    f32 %61 = s2f i32 %59 to f32;
    f32 %62 = fadd f32 %arg8, f32 %61;
    store f32* %60 with f32 %62;
    f32* %63 = getelementptr &(f32* %3)[i64 10];
    f32 %64 = fadd f32 %arg9, f32 %61;
    store f32* %63 with f32 %64;
    i32 %65 = add i32 %arg5, i32 11;
    f32* %66 = getelementptr &(f32* %0)[i64 11];
    f32 %67 = s2f i32 %65 to f32;
    f32 %68 = fadd f32 %arg8, f32 %67;
    store f32* %66 with f32 %68;
    f32* %69 = getelementptr &(f32* %3)[i64 11];
    f32 %70 = fadd f32 %arg9, f32 %67;
    store f32* %69 with f32 %70;
    i32 %71 = add i32 %arg5, i32 12;
    f32* %72 = getelementptr &(f32* %0)[i64 12];
    f32 %73 = s2f i32 %71 to f32;
    f32 %74 = fadd f32 %arg8, f32 %73;
    store f32* %72 with f32 %74;
    f32* %75 = getelementptr &(f32* %3)[i64 12];
    f32 %76 = fadd f32 %arg9, f32 %73;
    store f32* %75 with f32 %76;
    i32 %77 = add i32 %arg5, i32 13;
    f32* %78 = getelementptr &(f32* %0)[i64 13];
    f32 %79 = s2f i32 %77 to f32;
    f32 %80 = fadd f32 %arg8, f32 %79;
    store f32* %78 with f32 %80;
    f32* %81 = getelementptr &(f32* %3)[i64 13];
    f32 %82 = fadd f32 %arg9, f32 %79;
    store f32* %81 with f32 %82;
    i32 %83 = add i32 %arg5, i32 14;
    f32* %84 = getelementptr &(f32* %0)[i64 14];
    f32 %85 = s2f i32 %83 to f32;
    f32 %86 = fadd f32 %arg8, f32 %85;
    store f32* %84 with f32 %86;
    f32* %87 = getelementptr &(f32* %3)[i64 14];
    f32 %88 = fadd f32 %arg9, f32 %85;
    store f32* %87 with f32 %88;
    i32 %89 = add i32 %arg5, i32 15;
    f32* %90 = getelementptr &(f32* %0)[i64 15];
    f32 %91 = s2f i32 %89 to f32;
    f32 %92 = fadd f32 %arg8, f32 %91;
    store f32* %90 with f32 %92;
    f32* %93 = getelementptr &(f32* %3)[i64 15];
    f32 %94 = fadd f32 %arg9, f32 %91;
    store f32* %93 with f32 %94;
    i32 %95 = add i32 %arg5, i32 16;
    i1 %96 = scmp lt i32 %95, i32 %arg6;
    cbr i1 %96(prob = 0.97), [ ^super.header [8192 * f32]* %arg, [8192 * f32]* %arg1, f32* %arg2, f32* %arg3, i32 %arg4, i32 %95, i32 %arg6, f32 %arg7, f32 %arg8, f32 %arg9, i1 %arg10 ], [ ^indirect [8192 * f32]* %arg1, [8192 * f32]* %arg, i32 %arg6, f32* %arg2, f32* %arg3, i32 %arg4, i32 %95, i32 %arg6, f32 %arg7, f32 %arg8, f32 %arg9, i1 %arg10 ];
^while.body2([8192 * f32]* %arg, [8192 * f32]* %arg1, f32* %arg2, f32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, f32 %arg7, f32 %arg8, f32 %arg9, i1 %arg10):
    f32* %0 = getelementptr &([8192 * f32]* %arg)[i64 0][i32 %arg5];
    f32 %1 = s2f i32 %arg5 to f32;
    f32 %2 = fadd f32 %arg8, f32 %1;
    store f32* %0 with f32 %2;
    f32* %3 = getelementptr &([8192 * f32]* %arg1)[i64 0][i32 %arg5];
    f32 %4 = fadd f32 %arg9, f32 %1;
    store f32* %3 with f32 %4;
    i32 %5 = add i32 %arg5, i32 1;
    i1 %6 = scmp lt i32 %5, i32 %arg6;
    cbr i1 %6(prob = 0.97), [ ^while.body2 [8192 * f32]* %arg, [8192 * f32]* %arg1, f32* %arg2, f32* %arg3, i32 %arg4, i32 %5, i32 %arg6, f32 %arg7, f32 %arg8, f32 %arg9, i1 %arg10 ], [ ^indirect [8192 * f32]* %arg1, [8192 * f32]* %arg, i32 %arg6, f32* %arg2, f32* %arg3, i32 %arg4, i32 %5, i32 %arg6, f32 %arg7, f32 %arg8, f32 %arg9, i1 %arg10 ];
^super.header1(f32 %arg, [8192 * f32]* %arg1, [8192 * f32]* %arg2, f32* %arg3, f32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, f32 %arg8, f32 %arg9, f32* %arg10, f32* %arg11, i32 %arg12, i32 %arg13, f32 %arg14, i1 %arg15):
    i32 %0 = add i32 %arg13, i32 15;
    i1 %1 = scmp lt i32 %0, i32 %arg7;
    cbr i1 %1(prob = 0.67), [ ^while.body3 f32 %arg, [8192 * f32]* %arg1, [8192 * f32]* %arg2, f32* %arg3, f32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, f32 %arg8, f32 %arg9, f32* %arg10, f32* %arg11, i32 %arg12, i32 %arg13, f32 %arg14, i1 %arg15 ], [ ^while.body4 f32 %arg, [8192 * f32]* %arg1, [8192 * f32]* %arg2, f32* %arg3, f32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, f32 %arg8, f32 %arg9, f32* %arg10, f32* %arg11, i32 %arg12, i32 %arg13, f32 %arg14, i1 %arg15 ];
^b(f32 %arg, [8192 * f32]* %arg1, [8192 * f32]* %arg2, f32* %arg3, f32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, f32 %arg8, f32 %arg9, f32 %arg10, i1 %arg11):
    f32 %0 = fadd f32 %arg, f32 %arg10;
    i32 %1 = add i32 %arg5, i32 1;
    i1 %2 = scmp lt i32 %1, i32 100000;
    cbr i1 %2(prob = 0.97), [ ^while.body [8192 * f32]* %arg2, [8192 * f32]* %arg1, f32* %arg3, f32* %arg4, i32 %1, i32 %arg6, i32 %arg7, f32 %0, f32 %arg8, f32 %arg9, i1 %arg11 ], [ ^b1 f32 %0 ];
^while.body3(f32 %arg, [8192 * f32]* %arg1, [8192 * f32]* %arg2, f32* %arg3, f32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, f32 %arg8, f32 %arg9, f32* %arg10, f32* %arg11, i32 %arg12, i32 %arg13, f32 %arg14, i1 %arg15):
    f32* %0 = getelementptr &(f32* %arg10)[i32 %arg13];
    f32 %1 = load f32* %0;
    f32* %2 = getelementptr &(f32* %arg11)[i32 %arg13];
    f32 %3 = load f32* %2;
    f32 %4 = ffma f32 %1, f32 %3, f32 %arg14;
    f32* %5 = getelementptr &(f32* %0)[i64 1];
    f32 %6 = load f32* %5;
    f32* %7 = getelementptr &(f32* %2)[i64 1];
    f32 %8 = load f32* %7;
    f32 %9 = ffma f32 %6, f32 %8, f32 %4;
    f32* %10 = getelementptr &(f32* %0)[i64 2];
    f32 %11 = load f32* %10;
    f32* %12 = getelementptr &(f32* %2)[i64 2];
    f32 %13 = load f32* %12;
    f32 %14 = ffma f32 %11, f32 %13, f32 %9;
    f32* %15 = getelementptr &(f32* %0)[i64 3];
    f32 %16 = load f32* %15;
    f32* %17 = getelementptr &(f32* %2)[i64 3];
    f32 %18 = load f32* %17;
    f32 %19 = ffma f32 %16, f32 %18, f32 %14;
    f32* %20 = getelementptr &(f32* %0)[i64 4];
    f32 %21 = load f32* %20;
    f32* %22 = getelementptr &(f32* %2)[i64 4];
    f32 %23 = load f32* %22;
    f32 %24 = ffma f32 %21, f32 %23, f32 %19;
    f32* %25 = getelementptr &(f32* %0)[i64 5];
    f32 %26 = load f32* %25;
    f32* %27 = getelementptr &(f32* %2)[i64 5];
    f32 %28 = load f32* %27;
    f32 %29 = ffma f32 %26, f32 %28, f32 %24;
    f32* %30 = getelementptr &(f32* %0)[i64 6];
    f32 %31 = load f32* %30;
    f32* %32 = getelementptr &(f32* %2)[i64 6];
    f32 %33 = load f32* %32;
    f32 %34 = ffma f32 %31, f32 %33, f32 %29;
    f32* %35 = getelementptr &(f32* %0)[i64 7];
    f32 %36 = load f32* %35;
    f32* %37 = getelementptr &(f32* %2)[i64 7];
    f32 %38 = load f32* %37;
    f32 %39 = ffma f32 %36, f32 %38, f32 %34;
    f32* %40 = getelementptr &(f32* %0)[i64 8];
    f32 %41 = load f32* %40;
    f32* %42 = getelementptr &(f32* %2)[i64 8];
    f32 %43 = load f32* %42;
    f32 %44 = ffma f32 %41, f32 %43, f32 %39;
    f32* %45 = getelementptr &(f32* %0)[i64 9];
    f32 %46 = load f32* %45;
    f32* %47 = getelementptr &(f32* %2)[i64 9];
    f32 %48 = load f32* %47;
    f32 %49 = ffma f32 %46, f32 %48, f32 %44;
    f32* %50 = getelementptr &(f32* %0)[i64 10];
    f32 %51 = load f32* %50;
    f32* %52 = getelementptr &(f32* %2)[i64 10];
    f32 %53 = load f32* %52;
    f32 %54 = ffma f32 %51, f32 %53, f32 %49;
    f32* %55 = getelementptr &(f32* %0)[i64 11];
    f32 %56 = load f32* %55;
    f32* %57 = getelementptr &(f32* %2)[i64 11];
    f32 %58 = load f32* %57;
    f32 %59 = ffma f32 %56, f32 %58, f32 %54;
    f32* %60 = getelementptr &(f32* %0)[i64 12];
    f32 %61 = load f32* %60;
    f32* %62 = getelementptr &(f32* %2)[i64 12];
    f32 %63 = load f32* %62;
    f32 %64 = ffma f32 %61, f32 %63, f32 %59;
    f32* %65 = getelementptr &(f32* %0)[i64 13];
    f32 %66 = load f32* %65;
    f32* %67 = getelementptr &(f32* %2)[i64 13];
    f32 %68 = load f32* %67;
    f32 %69 = ffma f32 %66, f32 %68, f32 %64;
    f32* %70 = getelementptr &(f32* %0)[i64 14];
    f32 %71 = load f32* %70;
    f32* %72 = getelementptr &(f32* %2)[i64 14];
    f32 %73 = load f32* %72;
    f32 %74 = ffma f32 %71, f32 %73, f32 %69;
    f32* %75 = getelementptr &(f32* %0)[i64 15];
    f32 %76 = load f32* %75;
    f32* %77 = getelementptr &(f32* %2)[i64 15];
    f32 %78 = load f32* %77;
    f32 %79 = ffma f32 %76, f32 %78, f32 %74;
    i32 %80 = add i32 %arg13, i32 16;
    i1 %81 = scmp lt i32 %80, i32 %arg12;
    cbr i1 %81(prob = 0.97), [ ^super.header1 f32 %arg, [8192 * f32]* %arg1, [8192 * f32]* %arg2, f32* %arg3, f32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, f32 %arg8, f32 %arg9, f32* %arg10, f32* %arg11, i32 %arg12, i32 %80, f32 %79, i1 %arg15 ], [ ^b f32 %arg, [8192 * f32]* %arg1, [8192 * f32]* %arg2, f32* %arg3, f32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, f32 %arg8, f32 %arg9, f32 %79, i1 %arg15 ];
^while.body4(f32 %arg, [8192 * f32]* %arg1, [8192 * f32]* %arg2, f32* %arg3, f32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, f32 %arg8, f32 %arg9, f32* %arg10, f32* %arg11, i32 %arg12, i32 %arg13, f32 %arg14, i1 %arg15):
    f32* %0 = getelementptr &(f32* %arg10)[i32 %arg13];
    f32 %1 = load f32* %0;
    f32* %2 = getelementptr &(f32* %arg11)[i32 %arg13];
    f32 %3 = load f32* %2;
    f32 %4 = ffma f32 %1, f32 %3, f32 %arg14;
    i32 %5 = add i32 %arg13, i32 1;
    i1 %6 = scmp lt i32 %5, i32 %arg12;
    cbr i1 %6(prob = 0.97), [ ^while.body4 f32 %arg, [8192 * f32]* %arg1, [8192 * f32]* %arg2, f32* %arg3, f32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, f32 %arg8, f32 %arg9, f32* %arg10, f32* %arg11, i32 %arg12, i32 %5, f32 %4, i1 %arg15 ], [ ^b f32 %arg, [8192 * f32]* %arg1, [8192 * f32]* %arg2, f32* %arg3, f32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, f32 %arg8, f32 %arg9, f32 %4, i1 %arg15 ];
^b1(f32 %arg):
    call (i32) -> void @stoptime(i32 39);
    f32 %0 = fsub f32 %arg, f32 1.8338e+16;
    i1 %1 = fcmp le f32 %0, f32 1e-06;
    cbr i1 %1(prob = 0.5), [ ^if.then ], [ ^indirect1 f32 %0 ];
^indirect1(f32 %arg):
    i1 %0 = fcmp ge f32 %arg, f32 -1e-06;
    cbr i1 %0(prob = 0.5), [ ^if.then ], [ ^if.else1 ];
^if.then():
    call (i32) -> void @putint(i32 0);
    ret i32 0;
^if.else1():
    call (i32) -> void @putint(i32 1);
    ret i32 1;
}
