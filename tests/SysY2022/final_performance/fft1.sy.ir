internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @multiply(i32 %a, i32 %b, i32* %0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry:
    i1 %1 = scmp eq i32 %b, i32 0;
    cbr i1 %1(prob = 0.5), ^if.then, ^b1;
^b1:
    i1 %2 = scmp eq i32 %b, i32 1;
    cbr i1 %2(prob = 0.5), ^if.then1, ^b2;
^if.then:
    ret i32 0;
^b2:
    i32 %3 = sdiv i32 %b, i32 2;
    i32 %4 = call (i32, i32, i32*) -> i32 @multiply(i32 %a, i32 %3, i32* %0);
    i32 %5 = mul i32 %4, i32 2;
    i32 %6 = srem i32 %5, i32 998244353;
    i32 %7 = srem i32 %b, i32 2;
    i1 %8 = scmp eq i32 %7, i32 1;
    cbr i1 %8(prob = 0.5), ^if.then2, ^if.else;
^if.then1:
    i32 %9 = srem i32 %a, i32 998244353;
    ret i32 %9;
^if.then2:
    i32 %10 = add i32 %a, i32 %6;
    i32 %11 = srem i32 %10, i32 998244353;
    ret i32 %11;
^if.else:
    ret i32 %6;
}
internal func @power(i32 %a, i32 %b, i32* %0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry:
    i1 %1 = scmp eq i32 %b, i32 0;
    cbr i1 %1(prob = 0.5), ^if.then, ^b1;
^b1:
    i32 %2 = sdiv i32 %b, i32 2;
    i32 %3 = call (i32, i32, i32*) -> i32 @power(i32 %a, i32 %2, i32* %0);
    i32 %4 = call (i32, i32, i32*) -> i32 @multiply(i32 %3, i32 %3, i32* %0);
    i32 %5 = srem i32 %b, i32 2;
    i1 %6 = scmp eq i32 %5, i32 1;
    cbr i1 %6(prob = 0.5), ^if.then1, ^if.else;
^if.then:
    ret i32 1;
^if.then1:
    i32 %7 = call (i32, i32, i32*) -> i32 @multiply(i32 %4, i32 %a, i32* %0);
    ret i32 %7;
^if.else:
    ret i32 %4;
}
internal [2097152 * i32]* @temp;
internal [2097152 * i32]* @a;
internal [2097152 * i32]* @b;
internal func @fft(i32* %arr, i32 %begin_pos, i32 %n, i32 %w, i32* %0) -> i32 {
^entry:
    i32* %dst_pos = alloc i32;
    i32* %len = alloc i32;
    i32* %i = alloc i32;
    i32* %y = alloc i32;
    i32* %x = alloc i32;
    i32* %wn = alloc i32;
    i32* %i1 = alloc i32;
    i32* %w1 = alloc i32;
    i32* %n1 = alloc i32;
    i32* %begin_pos1 = alloc i32;
    i32** %arr1 = alloc i32*;
    store i32** %arr1 with i32* %arr;
    store i32* %begin_pos1 with i32 %begin_pos;
    store i32* %n1 with i32 %n;
    store i32* %w1 with i32 %w;
    i1 %1 = scmp eq i32 %n, i32 1;
    cbr i1 %1(prob = 0.5), ^if.then, ^b;
^b:
    store i32* %i1 with i32 0;
    ubr ^while.header;
^if.then:
    ret i32 1;
^while.header:
    i32* %2 = phi [^b2, i32* %2] [^b, i32* %arr];
    i32 %3 = phi [^b2, i32 %3] [^b, i32 %begin_pos];
    i32 %4 = phi [^b2, i32 %4] [^b, i32 %n];
    i32 %5 = phi [^b2, i32 %5] [^b, i32 %w];
    i32 %6 = phi [^b2, i32 %35] [^b, i32 0];
    i32 %7 = phi [^b2, i32 %35] [^b, i32 0];
    i1 %8 = scmp lt i32 %7, i32 %4;
    cbr i1 %8(prob = 0.97), ^while.body, ^b1;
^b1:
    i32* %9 = getelementptr &([2097152 * i32]* @temp)[i64 0][i64 0];
    store i32* %dst_pos with i32 %3;
    store i32* %len with i32 %4;
    store i32* %i with i32 0;
    ubr ^while.header1;
^while.body:
    i32 %10 = srem i32 %6, i32 2;
    i1 %11 = scmp eq i32 %10, i32 0;
    cbr i1 %11(prob = 0.5), ^if.then1, ^if.else;
^if.then1:
    i32 %12 = sdiv i32 %6, i32 2;
    i32* %13 = getelementptr &([2097152 * i32]* @temp)[i64 0][i32 %12];
    i32 %14 = add i32 %6, i32 %3;
    i32* %15 = getelementptr &(i32* %2)[i32 %14];
    i32 %16 = load i32* %15;
    store i32* %13 with i32 %16;
    ubr ^b2;
^if.else:
    i32 %17 = sdiv i32 %4, i32 2;
    i32 %18 = sdiv i32 %6, i32 2;
    i32 %19 = add i32 %17, i32 %18;
    i32* %20 = getelementptr &([2097152 * i32]* @temp)[i64 0][i32 %19];
    i32 %21 = add i32 %6, i32 %3;
    i32* %22 = getelementptr &(i32* %2)[i32 %21];
    i32 %23 = load i32* %22;
    store i32* %20 with i32 %23;
    ubr ^b2;
^while.header1:
    i32* %24 = phi [^while.body1, i32* %24] [^b1, i32* %2];
    i32 %25 = phi [^while.body1, i32 %40] [^b1, i32 %3];
    i32 %26 = phi [^while.body1, i32 %41] [^b1, i32 %4];
    i32 %27 = phi [^while.body1, i32 %42] [^b1, i32 %5];
    i32 %28 = phi [^while.body1, i32 %46] [^b1, i32 0];
    i32* %29 = phi [^while.body1, i32* %29] [^b1, i32* %9];
    i32 %30 = phi [^while.body1, i32 %45] [^b1, i32 %3];
    i32* %31 = phi [^while.body1, i32* %31] [^b1, i32* %2];
    i32 %32 = phi [^b1, i32 %4] [^while.body1, i32 %44];
    i32 %33 = phi [^b1, i32 0] [^while.body1, i32 %46];
    i1 %34 = scmp lt i32 %33, i32 %32;
    cbr i1 %34(prob = 0.97), ^while.body1, ^b3;
^b2:
    i32 %35 = add i32 %6, i32 1;
    store i32* %i1 with i32 %35;
    ubr ^while.header;
^while.body1:
    i32 %36 = add i32 %30, i32 %28;
    i32* %37 = getelementptr &(i32* %31)[i32 %36];
    i32* %38 = getelementptr &(i32* %29)[i32 %28];
    i32 %39 = load i32* %38;
    store i32* %37 with i32 %39;
    i32 %40 = load i32* %begin_pos1;
    i32 %41 = load i32* %n1;
    i32 %42 = load i32* %w1;
    i32 %43 = load i32* %i;
    i32 %44 = load i32* %len;
    i32 %45 = load i32* %dst_pos;
    i32 %46 = add i32 %43, i32 1;
    store i32* %i with i32 %46;
    ubr ^while.header1;
^b3:
    i32 %47 = sdiv i32 %26, i32 2;
    i32 %48 = call (i32, i32, i32*) -> i32 @multiply(i32 %27, i32 %27, i32* %0);
    i32 %49 = call (i32*, i32, i32, i32, i32*) -> i32 @fft(i32* %24, i32 %25, i32 %47, i32 %48, i32* %0);
    i32* %50 = load i32** %arr1;
    i32 %51 = load i32* %begin_pos1;
    i32 %52 = load i32* %n1;
    i32 %53 = load i32* %w1;
    i32 %54 = sdiv i32 %52, i32 2;
    i32 %55 = add i32 %51, i32 %54;
    i32 %56 = call (i32, i32, i32*) -> i32 @multiply(i32 %53, i32 %53, i32* %0);
    i32 %57 = call (i32*, i32, i32, i32, i32*) -> i32 @fft(i32* %50, i32 %55, i32 %54, i32 %56, i32* %0);
    i32* %58 = load i32** %arr1;
    i32 %59 = load i32* %begin_pos1;
    i32 %60 = load i32* %n1;
    store i32* %i1 with i32 0;
    store i32* %wn with i32 1;
    ubr ^while.header2;
^while.header2:
    i32* %61 = phi [^while.body2, i32* %61] [^b3, i32* %58];
    i32 %62 = phi [^while.body2, i32 %92] [^b3, i32 %59];
    i32 %63 = phi [^while.body2, i32 %93] [^b3, i32 %60];
    i32 %64 = phi [^while.body2, i32 %98] [^b3, i32 0];
    i32 %65 = phi [^while.body2, i32 %97] [^b3, i32 1];
    i32 %66 = phi [^b3, i32 0] [^while.body2, i32 %98];
    i32 %67 = sdiv i32 %63, i32 2;
    i1 %68 = scmp lt i32 %66, i32 %67;
    cbr i1 %68(prob = 0.97), ^while.body2, ^b4;
^while.body2:
    i32 %69 = add i32 %64, i32 %62;
    i32* %70 = getelementptr &(i32* %61)[i32 %69];
    i32 %71 = load i32* %70;
    store i32* %x with i32 %71;
    i32 %72 = add i32 %69, i32 %67;
    i32* %73 = getelementptr &(i32* %61)[i32 %72];
    i32 %74 = load i32* %73;
    store i32* %y with i32 %74;
    i32 %75 = call (i32, i32, i32*) -> i32 @multiply(i32 %65, i32 %74, i32* %0);
    i32 %76 = add i32 %71, i32 %75;
    i32 %77 = srem i32 %76, i32 998244353;
    store i32* %70 with i32 %77;
    i32 %78 = load i32* %begin_pos1;
    i32 %79 = load i32* %n1;
    i32 %80 = load i32* %i1;
    i32 %81 = load i32* %wn;
    i32 %82 = load i32* %x;
    i32 %83 = load i32* %y;
    i32 %84 = sdiv i32 %79, i32 2;
    i32 %85 = add i32 %80, i32 %78;
    i32 %86 = add i32 %85, i32 %84;
    i32* %87 = getelementptr &(i32* %61)[i32 %86];
    i32 %88 = call (i32, i32, i32*) -> i32 @multiply(i32 %81, i32 %83, i32* %0);
    i32 %89 = sub i32 %82, i32 %88;
    i32 %90 = add i32 %89, i32 998244353;
    i32 %91 = srem i32 %90, i32 998244353;
    store i32* %87 with i32 %91;
    i32 %92 = load i32* %begin_pos1;
    i32 %93 = load i32* %n1;
    i32 %94 = load i32* %w1;
    i32 %95 = load i32* %i1;
    i32 %96 = load i32* %wn;
    i32 %97 = call (i32, i32, i32*) -> i32 @multiply(i32 %96, i32 %94, i32* %0);
    store i32* %wn with i32 %97;
    i32 %98 = add i32 %95, i32 1;
    store i32* %i1 with i32 %98;
    ubr ^while.header2;
^b4:
    ret i32 0;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %d = alloc i32;
    i32* %m = alloc i32;
    i32* %n = alloc i32;
    i32* %0 = getelementptr &([2097152 * i32]* @a)[i64 0][i64 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    store i32* %n with i32 %1;
    i32* %2 = getelementptr &([2097152 * i32]* @b)[i64 0][i64 0];
    i32 %3 = call (i32*) -> i32 @getarray(i32* %2);
    i32 %4 = load i32* %n;
    store i32* %m with i32 %3;
    call (i32) -> void @starttime(i32 60);
    store i32* %d with i32 1;
    ubr ^while.header;
^while.header:
    i32 %5 = phi [^while.body, i32 %5] [^entry, i32 %4];
    i32 %6 = phi [^while.body, i32 %6] [^entry, i32 %3];
    i32 %7 = phi [^while.body, i32 %13] [^entry, i32 1];
    i32 %8 = phi [^while.body, i32 %6] [^entry, i32 %3];
    i32 %9 = phi [^while.body, i32 %13] [^entry, i32 1];
    i32 %10 = add i32 %5, i32 -1;
    i32 %11 = add i32 %10, i32 %8;
    i1 %12 = scmp lt i32 %9, i32 %11;
    cbr i1 %12(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %13 = mul i32 %7, i32 2;
    store i32* %d with i32 %13;
    ubr ^while.header;
^b:
    i32 %14 = sdiv i32 998244352, i32 %7;
    i32 %15 = call (i32, i32, i32*) -> i32 @power(i32 3, i32 %14, i32* %d);
    i32 %16 = call (i32*, i32, i32, i32, i32*) -> i32 @fft(i32* %0, i32 0, i32 %7, i32 %15, i32* %d);
    i32 %17 = load i32* %d;
    i32 %18 = sdiv i32 998244352, i32 %17;
    i32 %19 = call (i32, i32, i32*) -> i32 @power(i32 3, i32 %18, i32* %d);
    i32 %20 = call (i32*, i32, i32, i32, i32*) -> i32 @fft(i32* %2, i32 0, i32 %17, i32 %19, i32* %d);
    i32 %21 = load i32* %d;
    ubr ^while.header1;
^while.header1:
    i32 %22 = phi [^while.body1, i32 %31] [^b, i32 0];
    i32 %23 = phi [^while.body1, i32 %23] [^b, i32 %21];
    i32 %24 = phi [^while.body1, i32 %31] [^b, i32 0];
    i1 %25 = scmp lt i32 %24, i32 %23;
    cbr i1 %25(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32* %26 = getelementptr &([2097152 * i32]* @a)[i64 0][i32 %22];
    i32 %27 = load i32* %26;
    i32* %28 = getelementptr &([2097152 * i32]* @b)[i64 0][i32 %22];
    i32 %29 = load i32* %28;
    i32 %30 = call (i32, i32, i32*) -> i32 @multiply(i32 %27, i32 %29, i32* %d);
    store i32* %26 with i32 %30;
    i32 %31 = add i32 %22, i32 1;
    ubr ^while.header1;
^b1:
    i32 %32 = sdiv i32 998244352, i32 %23;
    i32 %33 = sub i32 998244352, i32 %32;
    i32 %34 = call (i32, i32, i32*) -> i32 @power(i32 3, i32 %33, i32* %d);
    i32 %35 = call (i32*, i32, i32, i32, i32*) -> i32 @fft(i32* %0, i32 0, i32 %23, i32 %34, i32* %d);
    i32 %36 = load i32* %n;
    i32 %37 = load i32* %m;
    i32 %38 = load i32* %d;
    ubr ^while.header2;
^while.header2:
    i32 %39 = phi [^while.body2, i32 %39] [^b1, i32 %36];
    i32 %40 = phi [^while.body2, i32 %40] [^b1, i32 %37];
    i32 %41 = phi [^while.body2, i32 %50] [^b1, i32 0];
    i32 %42 = phi [^while.body2, i32 %42] [^b1, i32 %38];
    i32 %43 = phi [^b1, i32 %38] [^while.body2, i32 %42];
    i32 %44 = phi [^b1, i32 0] [^while.body2, i32 %50];
    i1 %45 = scmp lt i32 %44, i32 %43;
    cbr i1 %45(prob = 0.97), ^while.body2, ^b2;
^while.body2:
    i32* %46 = getelementptr &([2097152 * i32]* @a)[i64 0][i32 %41];
    i32 %47 = load i32* %46;
    i32 %48 = call (i32, i32, i32*) -> i32 @power(i32 %42, i32 998244351, i32* %d);
    i32 %49 = call (i32, i32, i32*) -> i32 @multiply(i32 %47, i32 %48, i32* %d);
    store i32* %46 with i32 %49;
    i32 %50 = add i32 %41, i32 1;
    ubr ^while.header2;
^b2:
    call (i32) -> void @stoptime(i32 79);
    i32 %51 = add i32 %40, i32 -1;
    i32 %52 = add i32 %51, i32 %39;
    call (i32, i32*) -> void @putarray(i32 %52, i32* %0);
    ret i32 0;
}
