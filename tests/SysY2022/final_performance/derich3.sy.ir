internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [512 * [270 * f32]]* @imgIn;
internal [512 * [270 * f32]]* @imgOut;
internal [512 * [270 * f32]]* @my_y1;
internal [512 * [270 * f32]]* @my_y2;
internal func @newPow(f32 %num, i32 %n, i32* %0, i32* %1, f32* %2) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry:
    i1 %3 = scmp lt i32 %n, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
^if.else:
    i1 %4 = scmp eq i32 %n, i32 0;
    cbr i1 %4(prob = 0.5), ^if.then1, ^if.then2;
^if.then:
    i32 %5 = neg i32 %n;
    f32 %6 = call (f32, i32, i32*, i32*, f32*) -> f32 @newPow(f32 %num, i32 %5, i32* %0, i32* %1, f32* %2);
    f32 %7 = fdiv f32 1, f32 %6;
    ret f32 %7;
^if.then1:
    ret f32 1;
^if.then2:
    i32 %8 = add i32 %n, i32 -1;
    f32 %9 = call (f32, i32, i32*, i32*, f32*) -> f32 @newPow(f32 %num, i32 %8, i32* %0, i32* %1, f32* %2);
    f32 %10 = fmul f32 %num, f32 %9;
    ret f32 %10;
}
func @main() -> i32 { NoRecurse Entry } {
^entry:
    f32* %ym1 = alloc f32;
    f32* %xp1 = alloc f32;
    f32* %tp1 = alloc f32;
    f32* %yp1 = alloc f32;
    f32* %a1 = alloc f32;
    f32* %a2 = alloc f32;
    f32* %a3 = alloc f32;
    f32* %a4 = alloc f32;
    f32* %a5 = alloc f32;
    f32* %a6 = alloc f32;
    f32* %a7 = alloc f32;
    f32* %a8 = alloc f32;
    f32* %b1 = alloc f32;
    f32* %b2 = alloc f32;
    f32* %c1 = alloc f32;
    f32* %c2 = alloc f32;
    f32* %alpha = alloc f32;
    i32* %h = alloc i32;
    i32* %w = alloc i32;
    store i32* %w with i32 512;
    store i32* %h with i32 270;
    store f32* %alpha with f32 0.25;
    [270 * f32]* %0 = getelementptr &([512 * [270 * f32]]* @imgIn)[i64 0][i64 0];
    f32* %1 = getelementptr &([512 * [270 * f32]]* @imgIn)[i64 0][i64 0][i64 0];
    i32 %2 = call (f32*) -> i32 @getfarray(f32* %1);
    i32 %3 = load i32* %w;
    i32 %4 = load i32* %h;
    f32 %5 = load f32* %alpha;
    call (i32) -> void @starttime(i32 156);
    [270 * f32]* %6 = getelementptr &([512 * [270 * f32]]* @imgOut)[i64 0][i64 0];
    [270 * f32]* %7 = getelementptr &([512 * [270 * f32]]* @my_y1)[i64 0][i64 0];
    [270 * f32]* %8 = getelementptr &([512 * [270 * f32]]* @my_y2)[i64 0][i64 0];
    f32 %9 = fneg f32 %5;
    f32 %10 = fdiv f32 %9, f32 256;
    f32 %11 = fadd f32 1, f32 %10;
    f32 %12 = fmul f32 %11, f32 %11;
    f32 %13 = fmul f32 %12, f32 %12;
    f32 %14 = fmul f32 %13, f32 %13;
    f32 %15 = fmul f32 %14, f32 %14;
    f32 %16 = fmul f32 %15, f32 %15;
    f32 %17 = fmul f32 %16, f32 %16;
    f32 %18 = fmul f32 %17, f32 %17;
    f32 %19 = fmul f32 %18, f32 %18;
    f32 %20 = fsub f32 1, f32 %19;
    f32 %21 = fmul f32 %20, f32 %20;
    f32 %22 = fmul f32 2, f32 %5;
    f32 %23 = fmul f32 %22, f32 %19;
    f32 %24 = fadd f32 1, f32 %23;
    f32 %25 = fdiv f32 %22, f32 256;
    f32 %26 = fadd f32 1, f32 %25;
    f32 %27 = fmul f32 %26, f32 %26;
    f32 %28 = fmul f32 %27, f32 %27;
    f32 %29 = fmul f32 %28, f32 %28;
    f32 %30 = fmul f32 %29, f32 %29;
    f32 %31 = fmul f32 %30, f32 %30;
    f32 %32 = fmul f32 %31, f32 %31;
    f32 %33 = fmul f32 %32, f32 %32;
    f32 %34 = fmul f32 %33, f32 %33;
    f32 %35 = fsub f32 %24, f32 %34;
    f32 %36 = fdiv f32 %21, f32 %35;
    store f32* %a1 with f32 %36;
    store f32* %a5 with f32 %36;
    f32 %37 = fmul f32 %36, f32 %19;
    f32 %38 = fsub f32 %5, f32 1;
    f32 %39 = fmul f32 %37, f32 %38;
    store f32* %a6 with f32 %39;
    store f32* %a2 with f32 %39;
    f32 %40 = fadd f32 %5, f32 1;
    f32 %41 = fmul f32 %37, f32 %40;
    store f32* %a7 with f32 %41;
    store f32* %a3 with f32 %41;
    f32 %42 = fneg f32 %36;
    f32 %43 = fmul f32 -2, f32 %5;
    f32 %44 = fdiv f32 %43, f32 256;
    f32 %45 = fadd f32 1, f32 %44;
    f32 %46 = fmul f32 %45, f32 %45;
    f32 %47 = fmul f32 %46, f32 %46;
    f32 %48 = fmul f32 %47, f32 %47;
    f32 %49 = fmul f32 %48, f32 %48;
    f32 %50 = fmul f32 %49, f32 %49;
    f32 %51 = fmul f32 %50, f32 %50;
    f32 %52 = fmul f32 %51, f32 %51;
    f32 %53 = fmul f32 %52, f32 %52;
    f32 %54 = fmul f32 %42, f32 %53;
    store f32* %a8 with f32 %54;
    store f32* %a4 with f32 %54;
    i32 %55 = f2s f32 %9 to i32;
    f32 %56 = call (f32, i32, i32*, i32*, f32*) -> f32 @newPow(f32 2, i32 %55, i32* %w, i32* %h, f32* %alpha);
    store f32* %b1 with f32 %56;
    f32 %57 = fneg f32 %53;
    store f32* %b2 with f32 %57;
    store f32* %c1 with f32 1;
    store f32* %c2 with f32 1;
    ubr ^while.header;
^while.header:
    i32 %58 = phi [^b, i32 %104] [^entry, i32 %3];
    i32 %59 = phi [^b, i32 %105] [^entry, i32 %4];
    f32 %60 = phi [^b, f32 %106] [^entry, f32 1];
    f32 %61 = phi [^b, f32 %107] [^entry, f32 1];
    f32 %62 = phi [^b, f32 %108] [^entry, f32 %57];
    f32 %63 = phi [^b, f32 %109] [^entry, f32 %56];
    f32 %64 = phi [^b, f32 %110] [^entry, f32 %54];
    f32 %65 = phi [^b, f32 %111] [^entry, f32 %41];
    f32 %66 = phi [^b, f32 %112] [^entry, f32 %39];
    f32 %67 = phi [^b, f32 %113] [^entry, f32 %36];
    f32 %68 = phi [^b, f32 %114] [^entry, f32 %54];
    f32 %69 = phi [^b, f32 %115] [^entry, f32 %41];
    f32 %70 = phi [^b, f32 %116] [^entry, f32 %39];
    f32 %71 = phi [^b, f32 %117] [^entry, f32 %36];
    i32 %72 = phi [^b, i32 %177] [^entry, i32 0];
    [270 * f32]* %73 = phi [^b, [270 * f32]* %123] [^entry, [270 * f32]* %8];
    [270 * f32]* %74 = phi [^b, [270 * f32]* %124] [^entry, [270 * f32]* %7];
    [270 * f32]* %75 = phi [^b, [270 * f32]* %125] [^entry, [270 * f32]* %6];
    [270 * f32]* %76 = phi [^b, [270 * f32]* %126] [^entry, [270 * f32]* %0];
    i32 %77 = phi [^b, i32 %127] [^entry, i32 %4];
    i32 %78 = phi [^b, i32 %128] [^entry, i32 %3];
    i32 %79 = phi [^entry, i32 %3] [^b, i32 %128];
    i32 %80 = phi [^entry, i32 0] [^b, i32 %177];
    i1 %81 = scmp lt i32 %80, i32 %79;
    cbr i1 %81(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    store f32* %ym1 with f32 0;
    ubr ^while.header2;
^while.header1:
    i32 %82 = phi [^while.header, i32 %58] [^b1, i32 %178];
    i32 %83 = phi [^while.header, i32 %59] [^b1, i32 %179];
    f32 %84 = phi [^while.header, f32 %60] [^b1, f32 %180];
    f32 %85 = phi [^while.header, f32 %61] [^b1, f32 %181];
    f32 %86 = phi [^while.header, f32 %62] [^b1, f32 %182];
    f32 %87 = phi [^while.header, f32 %63] [^b1, f32 %183];
    f32 %88 = phi [^while.header, f32 %64] [^b1, f32 %184];
    f32 %89 = phi [^while.header, f32 %65] [^b1, f32 %185];
    f32 %90 = phi [^while.header, f32 %66] [^b1, f32 %186];
    f32 %91 = phi [^while.header, f32 %67] [^b1, f32 %187];
    f32 %92 = phi [^while.header, f32 %68] [^b1, f32 %188];
    f32 %93 = phi [^while.header, f32 %69] [^b1, f32 %189];
    i32 %94 = phi [^while.header, i32 0] [^b1, i32 %266];
    [270 * f32]* %95 = phi [^while.header, [270 * f32]* %73] [^b1, [270 * f32]* %196];
    [270 * f32]* %96 = phi [^while.header, [270 * f32]* %74] [^b1, [270 * f32]* %197];
    [270 * f32]* %97 = phi [^while.header, [270 * f32]* %75] [^b1, [270 * f32]* %198];
    [270 * f32]* %98 = phi [^while.header, [270 * f32]* %76] [^b1, [270 * f32]* %199];
    i32 %99 = phi [^while.header, i32 %77] [^b1, i32 %200];
    i32 %100 = phi [^while.header, i32 %78] [^b1, i32 %201];
    i32 %101 = phi [^while.header, i32 0] [^b1, i32 %266];
    i1 %102 = scmp lt i32 %101, i32 %100;
    cbr i1 %102(prob = 0.97), ^while.body1, ^while.header3;
^while.body1:
    store f32* %yp1 with f32 0;
    store f32* %xp1 with f32 0;
    i32 %103 = add i32 %99, i32 -1;
    ubr ^while.header4;
^while.header2:
    i32 %104 = phi [^while.body2, i32 %104] [^while.body, i32 %58];
    i32 %105 = phi [^while.body2, i32 %105] [^while.body, i32 %59];
    f32 %106 = phi [^while.body2, f32 %161] [^while.body, f32 %60];
    f32 %107 = phi [^while.body2, f32 %162] [^while.body, f32 %61];
    f32 %108 = phi [^while.body2, f32 %163] [^while.body, f32 %62];
    f32 %109 = phi [^while.body2, f32 %164] [^while.body, f32 %63];
    f32 %110 = phi [^while.body2, f32 %165] [^while.body, f32 %64];
    f32 %111 = phi [^while.body2, f32 %166] [^while.body, f32 %65];
    f32 %112 = phi [^while.body2, f32 %167] [^while.body, f32 %66];
    f32 %113 = phi [^while.body2, f32 %168] [^while.body, f32 %67];
    f32 %114 = phi [^while.body2, f32 %169] [^while.body, f32 %68];
    f32 %115 = phi [^while.body2, f32 %170] [^while.body, f32 %69];
    f32 %116 = phi [^while.body2, f32 %171] [^while.body, f32 %70];
    f32 %117 = phi [^while.body2, f32 %172] [^while.body, f32 %71];
    f32 %118 = phi [^while.body2, f32 %173] [^while.body, f32 0];
    f32 %119 = phi [^while.body2, f32 %175] [^while.body, f32 0];
    f32 %120 = phi [^while.body2, f32 %174] [^while.body, f32 0];
    i32 %121 = phi [^while.body2, i32 %176] [^while.body, i32 0];
    i32 %122 = phi [^while.body2, i32 %122] [^while.body, i32 %72];
    [270 * f32]* %123 = phi [^while.body2, [270 * f32]* %123] [^while.body, [270 * f32]* %73];
    [270 * f32]* %124 = phi [^while.body2, [270 * f32]* %124] [^while.body, [270 * f32]* %74];
    [270 * f32]* %125 = phi [^while.body2, [270 * f32]* %125] [^while.body, [270 * f32]* %75];
    [270 * f32]* %126 = phi [^while.body2, [270 * f32]* %126] [^while.body, [270 * f32]* %76];
    i32 %127 = phi [^while.body2, i32 %127] [^while.body, i32 %77];
    i32 %128 = phi [^while.body2, i32 %128] [^while.body, i32 %78];
    i32 %129 = phi [^while.body2, i32 %176] [^while.body, i32 0];
    i1 %130 = scmp lt i32 %129, i32 %127;
    cbr i1 %130(prob = 0.97), ^while.body2, ^b;
^while.header3:
    i32 %131 = phi [^while.header1, i32 %82] [^b2, i32 %204];
    i32 %132 = phi [^while.header1, i32 %83] [^b2, i32 %205];
    f32 %133 = phi [^while.header1, f32 %84] [^b2, f32 %206];
    f32 %134 = phi [^while.header1, f32 %85] [^b2, f32 %207];
    f32 %135 = phi [^while.header1, f32 %86] [^b2, f32 %208];
    f32 %136 = phi [^while.header1, f32 %87] [^b2, f32 %209];
    f32 %137 = phi [^while.header1, f32 %88] [^b2, f32 %210];
    f32 %138 = phi [^while.header1, f32 %89] [^b2, f32 %211];
    f32 %139 = phi [^while.header1, f32 %90] [^b2, f32 %212];
    f32 %140 = phi [^while.header1, f32 %91] [^b2, f32 %213];
    i32 %141 = phi [^while.header1, i32 0] [^b2, i32 %286];
    [270 * f32]* %142 = phi [^while.header1, [270 * f32]* %95] [^b2, [270 * f32]* %216];
    [270 * f32]* %143 = phi [^while.header1, [270 * f32]* %96] [^b2, [270 * f32]* %217];
    [270 * f32]* %144 = phi [^while.header1, [270 * f32]* %97] [^b2, [270 * f32]* %218];
    i32 %145 = phi [^while.header1, i32 %99] [^b2, i32 %219];
    i32 %146 = phi [^while.header1, i32 %100] [^b2, i32 %220];
    i32 %147 = phi [^while.header1, i32 0] [^b2, i32 %286];
    i1 %148 = scmp lt i32 %147, i32 %146;
    cbr i1 %148(prob = 0.97), ^while.header5, ^while.header6;
^while.body2:
    [270 * f32]* %149 = getelementptr &([270 * f32]* %124)[i32 %122];
    f32* %150 = getelementptr &([270 * f32]* %149)[i64 0][i32 %121];
    [270 * f32]* %151 = getelementptr &([270 * f32]* %126)[i32 %122];
    f32* %152 = getelementptr &([270 * f32]* %151)[i64 0][i32 %121];
    f32 %153 = load f32* %152;
    f32 %154 = fmul f32 %117, f32 %153;
    f32 %155 = fmul f32 %116, f32 %120;
    f32 %156 = fadd f32 %154, f32 %155;
    f32 %157 = fmul f32 %109, f32 %119;
    f32 %158 = fadd f32 %156, f32 %157;
    f32 %159 = fmul f32 %108, f32 %118;
    f32 %160 = fadd f32 %158, f32 %159;
    store f32* %150 with f32 %160;
    f32 %161 = load f32* %c2;
    f32 %162 = load f32* %c1;
    f32 %163 = load f32* %b2;
    f32 %164 = load f32* %b1;
    f32 %165 = load f32* %a8;
    f32 %166 = load f32* %a7;
    f32 %167 = load f32* %a6;
    f32 %168 = load f32* %a5;
    f32 %169 = load f32* %a4;
    f32 %170 = load f32* %a3;
    f32 %171 = load f32* %a2;
    f32 %172 = load f32* %a1;
    f32 %173 = load f32* %ym1;
    f32 %174 = load f32* %152;
    f32 %175 = load f32* %150;
    store f32* %ym1 with f32 %175;
    i32 %176 = add i32 %121, i32 1;
    ubr ^while.header2;
^b:
    i32 %177 = add i32 %122, i32 1;
    ubr ^while.header;
^while.header4:
    i32 %178 = phi [^while.body3, i32 %178] [^while.body1, i32 %82];
    i32 %179 = phi [^while.body3, i32 %179] [^while.body1, i32 %83];
    f32 %180 = phi [^while.body3, f32 %249] [^while.body1, f32 %84];
    f32 %181 = phi [^while.body3, f32 %250] [^while.body1, f32 %85];
    f32 %182 = phi [^while.body3, f32 %251] [^while.body1, f32 %86];
    f32 %183 = phi [^while.body3, f32 %252] [^while.body1, f32 %87];
    f32 %184 = phi [^while.body3, f32 %253] [^while.body1, f32 %88];
    f32 %185 = phi [^while.body3, f32 %254] [^while.body1, f32 %89];
    f32 %186 = phi [^while.body3, f32 %255] [^while.body1, f32 %90];
    f32 %187 = phi [^while.body3, f32 %256] [^while.body1, f32 %91];
    f32 %188 = phi [^while.body3, f32 %257] [^while.body1, f32 %92];
    f32 %189 = phi [^while.body3, f32 %258] [^while.body1, f32 %93];
    f32 %190 = phi [^while.body3, f32 %259] [^while.body1, f32 0];
    f32 %191 = phi [^while.body3, f32 %264] [^while.body1, f32 0];
    f32 %192 = phi [^while.body3, f32 %260] [^while.body1, f32 0];
    f32 %193 = phi [^while.body3, f32 %263] [^while.body1, f32 0];
    i32 %194 = phi [^while.body3, i32 %265] [^while.body1, i32 %103];
    i32 %195 = phi [^while.body3, i32 %195] [^while.body1, i32 %94];
    [270 * f32]* %196 = phi [^while.body3, [270 * f32]* %196] [^while.body1, [270 * f32]* %95];
    [270 * f32]* %197 = phi [^while.body3, [270 * f32]* %197] [^while.body1, [270 * f32]* %96];
    [270 * f32]* %198 = phi [^while.body3, [270 * f32]* %198] [^while.body1, [270 * f32]* %97];
    [270 * f32]* %199 = phi [^while.body3, [270 * f32]* %199] [^while.body1, [270 * f32]* %98];
    i32 %200 = phi [^while.body3, i32 %200] [^while.body1, i32 %99];
    i32 %201 = phi [^while.body3, i32 %201] [^while.body1, i32 %100];
    i32 %202 = phi [^while.body3, i32 %265] [^while.body1, i32 %103];
    i1 %203 = scmp gt i32 %202, i32 -1;
    cbr i1 %203(prob = 0.97), ^while.body3, ^b1;
^while.header5:
    i32 %204 = phi [^while.header3, i32 %131] [^while.body4, i32 %204];
    i32 %205 = phi [^while.header3, i32 %132] [^while.body4, i32 %205];
    f32 %206 = phi [^while.header3, f32 %133] [^while.body4, f32 %277];
    f32 %207 = phi [^while.header3, f32 %134] [^while.body4, f32 %278];
    f32 %208 = phi [^while.header3, f32 %135] [^while.body4, f32 %279];
    f32 %209 = phi [^while.header3, f32 %136] [^while.body4, f32 %280];
    f32 %210 = phi [^while.header3, f32 %137] [^while.body4, f32 %281];
    f32 %211 = phi [^while.header3, f32 %138] [^while.body4, f32 %282];
    f32 %212 = phi [^while.header3, f32 %139] [^while.body4, f32 %283];
    f32 %213 = phi [^while.header3, f32 %140] [^while.body4, f32 %284];
    i32 %214 = phi [^while.header3, i32 0] [^while.body4, i32 %285];
    i32 %215 = phi [^while.header3, i32 %141] [^while.body4, i32 %215];
    [270 * f32]* %216 = phi [^while.header3, [270 * f32]* %142] [^while.body4, [270 * f32]* %216];
    [270 * f32]* %217 = phi [^while.header3, [270 * f32]* %143] [^while.body4, [270 * f32]* %217];
    [270 * f32]* %218 = phi [^while.header3, [270 * f32]* %144] [^while.body4, [270 * f32]* %218];
    i32 %219 = phi [^while.header3, i32 %145] [^while.body4, i32 %219];
    i32 %220 = phi [^while.header3, i32 %146] [^while.body4, i32 %220];
    i32 %221 = phi [^while.header3, i32 0] [^while.body4, i32 %285];
    i1 %222 = scmp lt i32 %221, i32 %219;
    cbr i1 %222(prob = 0.97), ^while.body4, ^b2;
^while.header6:
    i32 %223 = phi [^while.header3, i32 %131] [^b3, i32 %303];
    i32 %224 = phi [^while.header3, i32 %132] [^b3, i32 %304];
    f32 %225 = phi [^while.header3, f32 %133] [^b3, f32 %305];
    f32 %226 = phi [^while.header3, f32 %135] [^b3, f32 %306];
    f32 %227 = phi [^while.header3, f32 %136] [^b3, f32 %307];
    f32 %228 = phi [^while.header3, f32 %137] [^b3, f32 %308];
    f32 %229 = phi [^while.header3, f32 %138] [^b3, f32 %309];
    f32 %230 = phi [^while.header3, f32 %139] [^b3, f32 %310];
    f32 %231 = phi [^while.header3, f32 %140] [^b3, f32 %311];
    i32 %232 = phi [^while.header3, i32 0] [^b3, i32 %358];
    [270 * f32]* %233 = phi [^while.header3, [270 * f32]* %142] [^b3, [270 * f32]* %317];
    [270 * f32]* %234 = phi [^while.header3, [270 * f32]* %143] [^b3, [270 * f32]* %318];
    [270 * f32]* %235 = phi [^while.header3, [270 * f32]* %144] [^b3, [270 * f32]* %319];
    i32 %236 = phi [^while.header3, i32 %145] [^b3, i32 %320];
    i32 %237 = phi [^while.header3, i32 %146] [^b3, i32 %321];
    i32 %238 = phi [^while.header3, i32 0] [^b3, i32 %358];
    i1 %239 = scmp lt i32 %238, i32 %236;
    cbr i1 %239(prob = 0.97), ^while.body5, ^while.header7;
^while.body3:
    [270 * f32]* %240 = getelementptr &([270 * f32]* %196)[i32 %195];
    f32* %241 = getelementptr &([270 * f32]* %240)[i64 0][i32 %194];
    f32 %242 = fmul f32 %189, f32 %193;
    f32 %243 = fmul f32 %188, f32 %192;
    f32 %244 = fadd f32 %242, f32 %243;
    f32 %245 = fmul f32 %183, f32 %191;
    f32 %246 = fadd f32 %244, f32 %245;
    f32 %247 = fmul f32 %182, f32 %190;
    f32 %248 = fadd f32 %246, f32 %247;
    store f32* %241 with f32 %248;
    f32 %249 = load f32* %c2;
    f32 %250 = load f32* %c1;
    f32 %251 = load f32* %b2;
    f32 %252 = load f32* %b1;
    f32 %253 = load f32* %a8;
    f32 %254 = load f32* %a7;
    f32 %255 = load f32* %a6;
    f32 %256 = load f32* %a5;
    f32 %257 = load f32* %a4;
    f32 %258 = load f32* %a3;
    f32 %259 = load f32* %yp1;
    f32 %260 = load f32* %xp1;
    [270 * f32]* %261 = getelementptr &([270 * f32]* %199)[i32 %195];
    f32* %262 = getelementptr &([270 * f32]* %261)[i64 0][i32 %194];
    f32 %263 = load f32* %262;
    store f32* %xp1 with f32 %263;
    f32 %264 = load f32* %241;
    store f32* %yp1 with f32 %264;
    i32 %265 = add i32 %194, i32 -1;
    ubr ^while.header4;
^b1:
    i32 %266 = add i32 %195, i32 1;
    ubr ^while.header1;
^while.body4:
    [270 * f32]* %267 = getelementptr &([270 * f32]* %218)[i32 %215];
    f32* %268 = getelementptr &([270 * f32]* %267)[i64 0][i32 %214];
    [270 * f32]* %269 = getelementptr &([270 * f32]* %217)[i32 %215];
    f32* %270 = getelementptr &([270 * f32]* %269)[i64 0][i32 %214];
    f32 %271 = load f32* %270;
    [270 * f32]* %272 = getelementptr &([270 * f32]* %216)[i32 %215];
    f32* %273 = getelementptr &([270 * f32]* %272)[i64 0][i32 %214];
    f32 %274 = load f32* %273;
    f32 %275 = fadd f32 %271, f32 %274;
    f32 %276 = fmul f32 %207, f32 %275;
    store f32* %268 with f32 %276;
    f32 %277 = load f32* %c2;
    f32 %278 = load f32* %c1;
    f32 %279 = load f32* %b2;
    f32 %280 = load f32* %b1;
    f32 %281 = load f32* %a8;
    f32 %282 = load f32* %a7;
    f32 %283 = load f32* %a6;
    f32 %284 = load f32* %a5;
    i32 %285 = add i32 %214, i32 1;
    ubr ^while.header5;
^b2:
    i32 %286 = add i32 %215, i32 1;
    ubr ^while.header3;
^while.body5:
    store f32* %ym1 with f32 0;
    ubr ^while.header8;
^while.header7:
    i32 %287 = phi [^while.header6, i32 %223] [^b4, i32 %359];
    i32 %288 = phi [^while.header6, i32 %224] [^b4, i32 %360];
    f32 %289 = phi [^while.header6, f32 %225] [^b4, f32 %361];
    f32 %290 = phi [^while.header6, f32 %226] [^b4, f32 %362];
    f32 %291 = phi [^while.header6, f32 %227] [^b4, f32 %363];
    f32 %292 = phi [^while.header6, f32 %228] [^b4, f32 %364];
    f32 %293 = phi [^while.header6, f32 %229] [^b4, f32 %365];
    i32 %294 = phi [^while.header6, i32 0] [^b4, i32 %414];
    [270 * f32]* %295 = phi [^while.header6, [270 * f32]* %233] [^b4, [270 * f32]* %372];
    [270 * f32]* %296 = phi [^while.header6, [270 * f32]* %234] [^b4, [270 * f32]* %373];
    [270 * f32]* %297 = phi [^while.header6, [270 * f32]* %235] [^b4, [270 * f32]* %374];
    i32 %298 = phi [^while.header6, i32 %236] [^b4, i32 %375];
    i32 %299 = phi [^while.header6, i32 %237] [^b4, i32 %376];
    i32 %300 = phi [^while.header6, i32 0] [^b4, i32 %414];
    i1 %301 = scmp lt i32 %300, i32 %298;
    cbr i1 %301(prob = 0.97), ^while.body6, ^while.header9;
^while.body6:
    store f32* %tp1 with f32 0;
    store f32* %yp1 with f32 0;
    i32 %302 = add i32 %299, i32 -1;
    ubr ^while.header10;
^while.header8:
    i32 %303 = phi [^while.body7, i32 %303] [^while.body5, i32 %223];
    i32 %304 = phi [^while.body7, i32 %304] [^while.body5, i32 %224];
    f32 %305 = phi [^while.body7, f32 %347] [^while.body5, f32 %225];
    f32 %306 = phi [^while.body7, f32 %348] [^while.body5, f32 %226];
    f32 %307 = phi [^while.body7, f32 %349] [^while.body5, f32 %227];
    f32 %308 = phi [^while.body7, f32 %350] [^while.body5, f32 %228];
    f32 %309 = phi [^while.body7, f32 %351] [^while.body5, f32 %229];
    f32 %310 = phi [^while.body7, f32 %352] [^while.body5, f32 %230];
    f32 %311 = phi [^while.body7, f32 %353] [^while.body5, f32 %231];
    f32 %312 = phi [^while.body7, f32 %354] [^while.body5, f32 0];
    f32 %313 = phi [^while.body7, f32 %356] [^while.body5, f32 0];
    f32 %314 = phi [^while.body7, f32 %355] [^while.body5, f32 0];
    i32 %315 = phi [^while.body7, i32 %315] [^while.body5, i32 %232];
    i32 %316 = phi [^while.body7, i32 %357] [^while.body5, i32 0];
    [270 * f32]* %317 = phi [^while.body7, [270 * f32]* %317] [^while.body5, [270 * f32]* %233];
    [270 * f32]* %318 = phi [^while.body7, [270 * f32]* %318] [^while.body5, [270 * f32]* %234];
    [270 * f32]* %319 = phi [^while.body7, [270 * f32]* %319] [^while.body5, [270 * f32]* %235];
    i32 %320 = phi [^while.body7, i32 %320] [^while.body5, i32 %236];
    i32 %321 = phi [^while.body7, i32 %321] [^while.body5, i32 %237];
    i32 %322 = phi [^while.body5, i32 0] [^while.body7, i32 %357];
    i1 %323 = scmp lt i32 %322, i32 %321;
    cbr i1 %323(prob = 0.97), ^while.body7, ^b3;
^while.header9:
    i32 %324 = phi [^while.header7, i32 %287] [^b5, i32 %379];
    i32 %325 = phi [^while.header7, i32 %288] [^b5, i32 %380];
    f32 %326 = phi [^while.header7, f32 %289] [^b5, f32 %381];
    i32 %327 = phi [^while.header7, i32 0] [^b5, i32 %427];
    [270 * f32]* %328 = phi [^while.header7, [270 * f32]* %295] [^b5, [270 * f32]* %384];
    [270 * f32]* %329 = phi [^while.header7, [270 * f32]* %296] [^b5, [270 * f32]* %385];
    [270 * f32]* %330 = phi [^while.header7, [270 * f32]* %297] [^b5, [270 * f32]* %386];
    i32 %331 = phi [^while.header7, i32 %298] [^b5, i32 %387];
    i32 %332 = phi [^while.header7, i32 %299] [^b5, i32 %388];
    i32 %333 = phi [^while.header7, i32 0] [^b5, i32 %427];
    i1 %334 = scmp lt i32 %333, i32 %332;
    cbr i1 %334(prob = 0.97), ^while.header11, ^entry1;
^while.body7:
    [270 * f32]* %335 = getelementptr &([270 * f32]* %318)[i32 %316];
    f32* %336 = getelementptr &([270 * f32]* %335)[i64 0][i32 %315];
    [270 * f32]* %337 = getelementptr &([270 * f32]* %319)[i32 %316];
    f32* %338 = getelementptr &([270 * f32]* %337)[i64 0][i32 %315];
    f32 %339 = load f32* %338;
    f32 %340 = fmul f32 %311, f32 %339;
    f32 %341 = fmul f32 %310, f32 %314;
    f32 %342 = fadd f32 %340, f32 %341;
    f32 %343 = fmul f32 %307, f32 %313;
    f32 %344 = fadd f32 %342, f32 %343;
    f32 %345 = fmul f32 %306, f32 %312;
    f32 %346 = fadd f32 %344, f32 %345;
    store f32* %336 with f32 %346;
    f32 %347 = load f32* %c2;
    f32 %348 = load f32* %b2;
    f32 %349 = load f32* %b1;
    f32 %350 = load f32* %a8;
    f32 %351 = load f32* %a7;
    f32 %352 = load f32* %a6;
    f32 %353 = load f32* %a5;
    f32 %354 = load f32* %ym1;
    f32 %355 = load f32* %338;
    f32 %356 = load f32* %336;
    store f32* %ym1 with f32 %356;
    i32 %357 = add i32 %316, i32 1;
    ubr ^while.header8;
^b3:
    i32 %358 = add i32 %315, i32 1;
    ubr ^while.header6;
^while.header10:
    i32 %359 = phi [^while.body8, i32 %359] [^while.body6, i32 %287];
    i32 %360 = phi [^while.body8, i32 %360] [^while.body6, i32 %288];
    f32 %361 = phi [^while.body8, f32 %402] [^while.body6, f32 %289];
    f32 %362 = phi [^while.body8, f32 %403] [^while.body6, f32 %290];
    f32 %363 = phi [^while.body8, f32 %404] [^while.body6, f32 %291];
    f32 %364 = phi [^while.body8, f32 %405] [^while.body6, f32 %292];
    f32 %365 = phi [^while.body8, f32 %406] [^while.body6, f32 %293];
    f32 %366 = phi [^while.body8, f32 %407] [^while.body6, f32 0];
    f32 %367 = phi [^while.body8, f32 %412] [^while.body6, f32 0];
    f32 %368 = phi [^while.body8, f32 %408] [^while.body6, f32 0];
    f32 %369 = phi [^while.body8, f32 %411] [^while.body6, f32 0];
    i32 %370 = phi [^while.body8, i32 %370] [^while.body6, i32 %294];
    i32 %371 = phi [^while.body8, i32 %413] [^while.body6, i32 %302];
    [270 * f32]* %372 = phi [^while.body8, [270 * f32]* %372] [^while.body6, [270 * f32]* %295];
    [270 * f32]* %373 = phi [^while.body8, [270 * f32]* %373] [^while.body6, [270 * f32]* %296];
    [270 * f32]* %374 = phi [^while.body8, [270 * f32]* %374] [^while.body6, [270 * f32]* %297];
    i32 %375 = phi [^while.body8, i32 %375] [^while.body6, i32 %298];
    i32 %376 = phi [^while.body8, i32 %376] [^while.body6, i32 %299];
    i32 %377 = phi [^while.body6, i32 %302] [^while.body8, i32 %413];
    i1 %378 = scmp gt i32 %377, i32 -1;
    cbr i1 %378(prob = 0.97), ^while.body8, ^b4;
^while.header11:
    i32 %379 = phi [^while.header9, i32 %324] [^while.body9, i32 %379];
    i32 %380 = phi [^while.header9, i32 %325] [^while.body9, i32 %380];
    f32 %381 = phi [^while.header9, f32 %326] [^while.body9, f32 %425];
    i32 %382 = phi [^while.header9, i32 0] [^while.body9, i32 %426];
    i32 %383 = phi [^while.header9, i32 %327] [^while.body9, i32 %383];
    [270 * f32]* %384 = phi [^while.header9, [270 * f32]* %328] [^while.body9, [270 * f32]* %384];
    [270 * f32]* %385 = phi [^while.header9, [270 * f32]* %329] [^while.body9, [270 * f32]* %385];
    [270 * f32]* %386 = phi [^while.header9, [270 * f32]* %330] [^while.body9, [270 * f32]* %386];
    i32 %387 = phi [^while.header9, i32 %331] [^while.body9, i32 %387];
    i32 %388 = phi [^while.header9, i32 %332] [^while.body9, i32 %388];
    i32 %389 = phi [^while.header9, i32 0] [^while.body9, i32 %426];
    i1 %390 = scmp lt i32 %389, i32 %387;
    cbr i1 %390(prob = 0.97), ^while.body9, ^b5;
^entry1:
    call (i32) -> void @stoptime(i32 158);
    i32 %391 = mul i32 %325, i32 %324;
    f32* %392 = getelementptr &([512 * [270 * f32]]* @imgOut)[i64 0][i64 0][i64 0];
    call (i32, f32*) -> void @putfarray(i32 %391, f32* %392);
    ret i32 0;
^while.body8:
    [270 * f32]* %393 = getelementptr &([270 * f32]* %372)[i32 %371];
    f32* %394 = getelementptr &([270 * f32]* %393)[i64 0][i32 %370];
    f32 %395 = fmul f32 %365, f32 %369;
    f32 %396 = fmul f32 %364, f32 %368;
    f32 %397 = fadd f32 %395, f32 %396;
    f32 %398 = fmul f32 %363, f32 %367;
    f32 %399 = fadd f32 %397, f32 %398;
    f32 %400 = fmul f32 %362, f32 %366;
    f32 %401 = fadd f32 %399, f32 %400;
    store f32* %394 with f32 %401;
    f32 %402 = load f32* %c2;
    f32 %403 = load f32* %b2;
    f32 %404 = load f32* %b1;
    f32 %405 = load f32* %a8;
    f32 %406 = load f32* %a7;
    f32 %407 = load f32* %yp1;
    f32 %408 = load f32* %tp1;
    [270 * f32]* %409 = getelementptr &([270 * f32]* %374)[i32 %371];
    f32* %410 = getelementptr &([270 * f32]* %409)[i64 0][i32 %370];
    f32 %411 = load f32* %410;
    store f32* %tp1 with f32 %411;
    f32 %412 = load f32* %394;
    store f32* %yp1 with f32 %412;
    i32 %413 = add i32 %371, i32 -1;
    ubr ^while.header10;
^b4:
    i32 %414 = add i32 %370, i32 1;
    ubr ^while.header7;
^while.body9:
    [270 * f32]* %415 = getelementptr &([270 * f32]* %386)[i32 %383];
    f32* %416 = getelementptr &([270 * f32]* %415)[i64 0][i32 %382];
    [270 * f32]* %417 = getelementptr &([270 * f32]* %385)[i32 %383];
    f32* %418 = getelementptr &([270 * f32]* %417)[i64 0][i32 %382];
    f32 %419 = load f32* %418;
    [270 * f32]* %420 = getelementptr &([270 * f32]* %384)[i32 %383];
    f32* %421 = getelementptr &([270 * f32]* %420)[i64 0][i32 %382];
    f32 %422 = load f32* %421;
    f32 %423 = fadd f32 %419, f32 %422;
    f32 %424 = fmul f32 %381, f32 %423;
    store f32* %416 with f32 %424;
    f32 %425 = load f32* %c2;
    i32 %426 = add i32 %382, i32 1;
    ubr ^while.header11;
^b5:
    i32 %427 = add i32 %383, i32 1;
    ubr ^while.header9;
}
