internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [10000000 * i32]* @head;
internal [10000000 * i32]* @next;
internal [10000000 * i32]* @nextvalue;
internal [10000000 * i32]* @key;
internal [10000000 * i32]* @value;
internal [10000000 * i32]* @keys;
internal [10000000 * i32]* @values;
internal [10000000 * i32]* @requests;
internal [10000000 * i32]* @ans;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %cnt = alloc i32;
    i32* %hashmod = alloc i32;
    i32* %ks = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %hashmod with i32 %0;
    i32* %1 = getelementptr &([10000000 * i32]* @keys)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    store i32* %ks with i32 %2;
    i32* %3 = getelementptr &([10000000 * i32]* @values)[i64 0][i64 0];
    i32 %4 = call (i32*) -> i32 @getarray(i32* %3);
    i32* %5 = getelementptr &([10000000 * i32]* @requests)[i64 0][i64 0];
    i32 %6 = call (i32*) -> i32 @getarray(i32* %5);
    i32 %7 = load i32* %ks;
    i32 %8 = load i32* %hashmod;
    i32 %9 = load i32* %cnt;
    call (i32) -> void @starttime(i32 78);
    ubr ^while.header;
^while.header:
    i32 %10 = phi [^while.body2, i32 %38] [^entry, i32 0];
    i32 %11 = phi [^while.body2, i32 %37] [^entry, i32 %9];
    i1 %12 = scmp lt i32 %10, i32 %7;
    cbr i1 %12(prob = 0.97), ^while.body, ^while.header1;
^while.body:
    i32* %13 = getelementptr &([10000000 * i32]* @keys)[i64 0][i32 %10];
    i32 %14 = load i32* %13;
    i32* %15 = getelementptr &([10000000 * i32]* @values)[i64 0][i32 %10];
    i32 %16 = load i32* %15;
    i32 %17 = srem i32 %14, i32 %8;
    i32* %18 = getelementptr &([10000000 * i32]* @head)[i64 0][i32 %17];
    i32 %19 = load i32* %18;
    i1 %20 = scmp eq i32 %19, i32 0;
    cbr i1 %20(prob = 0.5), ^if.then, ^while.header2;
^while.header1:
    i32 %21 = phi [^while.header, i32 0] [^while.body4, i32 %58];
    i1 %22 = scmp lt i32 %21, i32 %6;
    cbr i1 %22(prob = 0.97), ^while.body1, ^b;
^if.then:
    i32 %23 = add i32 %11, i32 1;
    store i32* %cnt with i32 %23;
    store i32* %18 with i32 %23;
    i32* %24 = getelementptr &([10000000 * i32]* @key)[i64 0][i32 %23];
    store i32* %24 with i32 %14;
    i32* %25 = getelementptr &([10000000 * i32]* @value)[i64 0][i32 %23];
    store i32* %25 with i32 %16;
    i32* %26 = getelementptr &([10000000 * i32]* @next)[i64 0][i32 %23];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &([10000000 * i32]* @nextvalue)[i64 0][i32 %23];
    store i32* %27 with i32 0;
    ubr ^while.body2;
^while.body1:
    i32* %28 = getelementptr &([10000000 * i32]* @ans)[i64 0][i32 %21];
    i32* %29 = getelementptr &([10000000 * i32]* @requests)[i64 0][i32 %21];
    i32 %30 = load i32* %29;
    i32 %31 = srem i32 %30, i32 %8;
    i32* %32 = getelementptr &([10000000 * i32]* @head)[i64 0][i32 %31];
    i32 %33 = load i32* %32;
    ubr ^while.header3;
^while.header2:
    i32 %34 = phi [^while.body, i32 %19] [^b2, i32 %56];
    i1 %35 = scmp neq i32 %34, i32 0;
    cbr i1 %35(prob = 0.97), ^while.body3, ^b1;
^b:
    call (i32) -> void @stoptime(i32 90);
    i32* %36 = getelementptr &([10000000 * i32]* @ans)[i64 0][i64 0];
    call (i32, i32*) -> void @putarray(i32 %6, i32* %36);
    ret i32 0;
^while.body2:
    i32 %37 = phi [^b1, i32 %39] [^if.then1, i32 %50] [^if.then, i32 %23];
    i32 %38 = add i32 %10, i32 1;
    ubr ^while.header;
^b1:
    i32 %39 = add i32 %11, i32 1;
    store i32* %cnt with i32 %39;
    i32* %40 = getelementptr &([10000000 * i32]* @next)[i64 0][i32 %39];
    i32 %41 = load i32* %18;
    store i32* %40 with i32 %41;
    store i32* %18 with i32 %39;
    i32* %42 = getelementptr &([10000000 * i32]* @key)[i64 0][i32 %39];
    store i32* %42 with i32 %14;
    i32* %43 = getelementptr &([10000000 * i32]* @value)[i64 0][i32 %39];
    store i32* %43 with i32 %16;
    i32* %44 = getelementptr &([10000000 * i32]* @nextvalue)[i64 0][i32 %39];
    store i32* %44 with i32 0;
    ubr ^while.body2;
^while.body3:
    i32* %45 = getelementptr &([10000000 * i32]* @key)[i64 0][i32 %34];
    i32 %46 = load i32* %45;
    i1 %47 = scmp eq i32 %46, i32 %14;
    cbr i1 %47(prob = 0.5), ^if.then1, ^b2;
^while.header3:
    i32 %48 = phi [^b3, i32 %63] [^while.body1, i32 %33];
    i1 %49 = scmp neq i32 %48, i32 0;
    cbr i1 %49(prob = 0.97), ^while.body5, ^while.body4;
^if.then1:
    i32 %50 = add i32 %11, i32 1;
    store i32* %cnt with i32 %50;
    i32* %51 = getelementptr &([10000000 * i32]* @nextvalue)[i64 0][i32 %50];
    i32* %52 = getelementptr &([10000000 * i32]* @nextvalue)[i64 0][i32 %34];
    i32 %53 = load i32* %52;
    store i32* %51 with i32 %53;
    store i32* %52 with i32 %50;
    i32* %54 = getelementptr &([10000000 * i32]* @value)[i64 0][i32 %50];
    store i32* %54 with i32 %16;
    ubr ^while.body2;
^b2:
    i32* %55 = getelementptr &([10000000 * i32]* @next)[i64 0][i32 %34];
    i32 %56 = load i32* %55;
    ubr ^while.header2;
^while.body4:
    i32 %57 = phi [^while.header4, i32 %65] [^while.header3, i32 0];
    store i32* %28 with i32 %57;
    i32 %58 = add i32 %21, i32 1;
    ubr ^while.header1;
^while.body5:
    i32* %59 = getelementptr &([10000000 * i32]* @key)[i64 0][i32 %48];
    i32 %60 = load i32* %59;
    i1 %61 = scmp eq i32 %60, i32 %30;
    cbr i1 %61(prob = 0.5), ^while.header4, ^b3;
^b3:
    i32* %62 = getelementptr &([10000000 * i32]* @next)[i64 0][i32 %48];
    i32 %63 = load i32* %62;
    ubr ^while.header3;
^while.header4:
    i32 %64 = phi [^while.body5, i32 %48] [^while.body6, i32 %71];
    i32 %65 = phi [^while.body5, i32 0] [^while.body6, i32 %69];
    i1 %66 = scmp neq i32 %64, i32 0;
    cbr i1 %66(prob = 0.97), ^while.body6, ^while.body4;
^while.body6:
    i32* %67 = getelementptr &([10000000 * i32]* @value)[i64 0][i32 %64];
    i32 %68 = load i32* %67;
    i32 %69 = add i32 %68, i32 %65;
    i32* %70 = getelementptr &([10000000 * i32]* @nextvalue)[i64 0][i32 %64];
    i32 %71 = load i32* %70;
    ubr ^while.header4;
}
