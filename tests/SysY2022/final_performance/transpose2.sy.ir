internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [20000000 * i32]* @matrix;
internal [100000 * i32]* @a;
func @main() -> i32 { NoRecurse Entry } {
^entry():
    i32* %n = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %n with i32 %0;
    i32* %len = alloc i32;
    i32* %1 = getelementptr &([100000 * i32]* @a)[i32 0][i32 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    i32 %3 = load i32* %n;
    store i32* %len with i32 %2;
    call (i32) -> void @starttime(i32 28);
    i32* %i = alloc i32;
    i1 %4 = scmp lt i32 0, i32 %3;
    cbr i1 %4, [ ^while.body i32* %len, i32* %n, i32* %i, i32 %3, i32 %2, i32 0 ], [ ^b i32* %len, i32* %n, i32* %i, i32 %3, i32 %2 ];
^while.body(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5):
    i32* %0 = getelementptr &([20000000 * i32]* @matrix)[i32 0][i32 %arg5];
    store i32* %0 with i32 %arg5;
    i32 %1 = add i32 %arg5, i32 1;
    i1 %2 = scmp lt i32 %1, i32 %arg3;
    cbr i1 %2, [ ^while.body i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %1 ], [ ^b i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4 ];
^b(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4):
    store i32* %arg2 with i32 0;
    i1 %0 = scmp lt i32 0, i32 %arg4;
    cbr i1 %0, [ ^while.body1 i32* %arg, i32* %arg2, i32* %arg1, i32 %arg3, i32 %arg4, i32 0 ], [ ^b1 i32 %arg4 ];
^while.body1(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5):
    i32* %0 = getelementptr &([100000 * i32]* @a)[i32 0][i32 %arg5];
    i32 %1 = load i32* %0;
    i32* %rowsize = alloc i32;
    store i32* %rowsize with i32 %1;
    i32* %colsize = alloc i32;
    i32 %2 = sdiv i32 %arg3, i32 %1;
    store i32* %colsize with i32 %2;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    i1 %3 = scmp lt i32 0, i32 %2;
    cbr i1 %3, [ ^while.body2 i32* %rowsize, i32* %colsize, i32* %i, i32* %arg, i32* %arg2, i32* %arg1, i32 %arg3, i32 %arg4, i32 %arg5, i32 %1, i32 %2, i32 0 ], [ ^while.body4 i32* %arg, i32* %arg2, i32* %arg1, i32 %arg3, i32 %arg4, i32 %arg5 ];
^b1(i32 %arg):
    i1 %0 = scmp lt i32 0, i32 %arg;
    cbr i1 %0, [ ^while.body3 i32 %arg, i32 0, i32 0 ], [ ^b2 i32 0 ];
^while.body2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11):
    i1 %0 = scmp lt i32 0, i32 %arg9;
    cbr i1 %0, [ ^while.body5 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg5, i32* %arg4, i32* %arg3, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 0 ], [ ^b3 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg5, i32* %arg4, i32* %arg3, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11 ];
^while.body3(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = mul i32 %arg1, i32 %arg1;
    i32* %1 = getelementptr &([20000000 * i32]* @matrix)[i32 0][i32 %arg1];
    i32 %2 = load i32* %1;
    i32 %3 = mul i32 %0, i32 %2;
    i32 %4 = add i32 %arg2, i32 %3;
    i32 %5 = add i32 %arg1, i32 1;
    i1 %6 = scmp lt i32 %5, i32 %arg;
    cbr i1 %6, [ ^while.body3 i32 %arg, i32 %5, i32 %4 ], [ ^b2 i32 %4 ];
^while.body4(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5):
    i32 %0 = add i32 %arg5, i32 1;
    store i32* %arg2 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 %arg4;
    cbr i1 %1, [ ^while.body1 i32* %arg, i32* %arg2, i32* %arg1, i32 %arg3, i32 %arg4, i32 %0 ], [ ^b1 i32 %arg4 ];
^b2(i32 %arg):
    i1 %0 = scmp lt i32 %arg, i32 0;
    cbr i1 %0, [ ^indirect i32 %arg ], [ ^b4 i32 %arg ];
^while.body5(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12):
    i1 %0 = scmp lt i32 %arg11, i32 %arg12;
    cbr i1 %0, [ ^indirect1 i32* %arg, i32* %arg2, i32* %arg1, i32 %arg12, i32* %arg5, i32* %arg4, i32* %arg3, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11 ], [ ^indirect2 i32* %arg, i32* %arg1, i32* %arg2, i32 %arg12, i32 %arg11, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg9, i32 %arg10 ];
^b3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11):
    i32 %0 = add i32 %arg11, i32 1;
    store i32* %arg2 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 %arg10;
    cbr i1 %1, [ ^while.body2 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg5, i32* %arg4, i32* %arg3, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %0 ], [ ^while.body4 i32* %arg5, i32* %arg4, i32* %arg3, i32 %arg6, i32 %arg7, i32 %arg8 ];
^indirect(i32 %arg):
    i32 %0 = neg i32 %arg;
    call (i32) -> void @stoptime(i32 47);
    call (i32) -> void @putint(i32 %0);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^b4(i32 %arg):
    call (i32) -> void @stoptime(i32 47);
    call (i32) -> void @putint(i32 %arg);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^indirect1(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12):
    i32 %0 = add i32 %arg3, i32 1;
    i1 %1 = scmp lt i32 %0, i32 %arg10;
    cbr i1 %1, [ ^while.body5 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg6, i32* %arg5, i32* %arg4, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %0 ], [ ^b3 i32* %arg2, i32* %arg, i32* %arg1, i32* %arg6, i32* %arg5, i32* %arg4, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12 ];
^indirect2(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9):
    i32 %0 = mul i32 %arg4, i32 %arg8;
    i32 %1 = add i32 %0, i32 %arg3;
    i32* %2 = getelementptr &([20000000 * i32]* @matrix)[i32 0][i32 %1];
    i32 %3 = load i32* %2;
    i32 %4 = mul i32 %arg3, i32 %arg9;
    i32 %5 = add i32 %4, i32 %arg4;
    i32* %6 = getelementptr &([20000000 * i32]* @matrix)[i32 0][i32 %5];
    store i32* %6 with i32 %3;
    store i32* %2 with i32 %3;
    i32 %7 = load i32* %arg2;
    i32 %8 = load i32* %arg;
    i32 %9 = load i32* %arg1;
    i32 %10 = load i32* %arg5;
    i32 %11 = load i32* %arg7;
    i32 %12 = load i32* %arg6;
    i32 %13 = add i32 %arg3, i32 1;
    i1 %14 = scmp lt i32 %13, i32 %arg8;
    cbr i1 %14, [ ^while.body5 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg5, i32* %arg6, i32* %arg7, i32 %12, i32 %11, i32 %10, i32 %9, i32 %8, i32 %7, i32 %13 ], [ ^b3 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg5, i32* %arg6, i32* %arg7, i32 %12, i32 %11, i32 %10, i32 %9, i32 %8, i32 %7 ];
}
