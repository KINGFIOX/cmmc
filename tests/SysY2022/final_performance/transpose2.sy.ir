internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getch() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray() -> i32 { NoMemoryRead };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @getfarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putch() -> void { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [20000000 * i32]* @matrix;
internal [100000 * i32]* @a;
internal func @transpose(i32 %n, i32* %matrix, i32 %rowsize) -> i32 {
^entry:
    i32* %curr = alloc i32;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    i32* %colsize = alloc i32;
    i32* %rowsize1 = alloc i32;
    i32** %matrix1 = alloc i32*;
    i32* %n1 = alloc i32;
    store i32* %n1 with i32 %n;
    store i32** %matrix1 with i32* %matrix;
    store i32* %rowsize1 with i32 %rowsize;
    i32 %0 = load i32* %n1;
    i32 %1 = load i32* %rowsize1;
    i32 %2 = sdiv i32 %0, i32 %1;
    store i32* %colsize with i32 %2;
    store i32* %i with i32 0;
    store i32* %j with i32 0;
    ubr ^while.header;
^while.header:
    i32 %3 = load i32* %i;
    i32 %4 = load i32* %colsize;
    i1 %5 = scmp lt i32 %3, i32 %4;
    i32 %6 = zext i1 %5 to i32;
    i1 %7 = scmp neq i32 %6, i32 0;
    cbr i1 %7(prob = 0.97), ^while.body, ^b;
^while.body:
    store i32* %j with i32 0;
    ubr ^while.header1;
^b:
    ret i32 -1;
^while.header1:
    i32 %8 = load i32* %j;
    i32 %9 = load i32* %rowsize1;
    i1 %10 = scmp lt i32 %8, i32 %9;
    i32 %11 = zext i1 %10 to i32;
    i1 %12 = scmp neq i32 %11, i32 0;
    cbr i1 %12(prob = 0.97), ^while.body1, ^b1;
^b1:
    i32 %13 = load i32* %i;
    i32 %14 = add i32 %13, i32 1;
    store i32* %i with i32 %14;
    ubr ^while.header;
^while.body1:
    i32 %15 = load i32* %i;
    i32 %16 = load i32* %j;
    i1 %17 = scmp lt i32 %15, i32 %16;
    i32 %18 = zext i1 %17 to i32;
    i1 %19 = scmp neq i32 %18, i32 0;
    cbr i1 %19(prob = 0.5), ^if.then, ^b2;
^if.then:
    i32 %20 = load i32* %j;
    i32 %21 = add i32 %20, i32 1;
    store i32* %j with i32 %21;
    ubr ^while.header1;
^b2:
    i32 %22 = load i32* %i;
    i32 %23 = load i32* %rowsize1;
    i32 %24 = mul i32 %22, i32 %23;
    i32 %25 = load i32* %j;
    i32 %26 = add i32 %24, i32 %25;
    i64 %27 = sext i32 %26 to i64;
    i32* %28 = load i32** %matrix1;
    i32* %29 = getelementptr &(i32* %28)[i64 %27];
    i32 %30 = load i32* %29;
    store i32* %curr with i32 %30;
    i32 %31 = load i32* %j;
    i32 %32 = load i32* %colsize;
    i32 %33 = mul i32 %31, i32 %32;
    i32 %34 = load i32* %i;
    i32 %35 = add i32 %33, i32 %34;
    i64 %36 = sext i32 %35 to i64;
    i32* %37 = load i32** %matrix1;
    i32* %38 = getelementptr &(i32* %37)[i64 %36];
    i32 %39 = load i32* %i;
    i32 %40 = load i32* %rowsize1;
    i32 %41 = mul i32 %39, i32 %40;
    i32 %42 = load i32* %j;
    i32 %43 = add i32 %41, i32 %42;
    i64 %44 = sext i32 %43 to i64;
    i32* %45 = load i32** %matrix1;
    i32* %46 = getelementptr &(i32* %45)[i64 %44];
    i32 %47 = load i32* %46;
    store i32* %38 with i32 %47;
    i32 %48 = load i32* %i;
    i32 %49 = load i32* %rowsize1;
    i32 %50 = mul i32 %48, i32 %49;
    i32 %51 = load i32* %j;
    i32 %52 = add i32 %50, i32 %51;
    i64 %53 = sext i32 %52 to i64;
    i32* %54 = load i32** %matrix1;
    i32* %55 = getelementptr &(i32* %54)[i64 %53];
    i32 %56 = load i32* %curr;
    store i32* %55 with i32 %56;
    i32 %57 = load i32* %j;
    i32 %58 = add i32 %57, i32 1;
    store i32* %j with i32 %58;
    ubr ^while.header1;
}
func @main() -> i32 { Entry } {
^entry:
    i32* %ans = alloc i32;
    i32* %i = alloc i32;
    i32* %len = alloc i32;
    i32* %n = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %n with i32 %0;
    i32* %1 = getelementptr &([100000 * i32]* @a)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    store i32* %len with i32 %2;
    call (i32) -> void @starttime(i32 28);
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %3 = load i32* %i;
    i32 %4 = load i32* %n;
    i1 %5 = scmp lt i32 %3, i32 %4;
    i32 %6 = zext i1 %5 to i32;
    i1 %7 = scmp neq i32 %6, i32 0;
    cbr i1 %7(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %8 = load i32* %i;
    i64 %9 = sext i32 %8 to i64;
    i32* %10 = getelementptr &([20000000 * i32]* @matrix)[i64 0][i64 %9];
    i32 %11 = load i32* %i;
    store i32* %10 with i32 %11;
    i32 %12 = load i32* %i;
    i32 %13 = add i32 %12, i32 1;
    store i32* %i with i32 %13;
    ubr ^while.header;
^b:
    store i32* %i with i32 0;
    ubr ^while.header1;
^while.header1:
    i32 %14 = load i32* %i;
    i32 %15 = load i32* %len;
    i1 %16 = scmp lt i32 %14, i32 %15;
    i32 %17 = zext i1 %16 to i32;
    i1 %18 = scmp neq i32 %17, i32 0;
    cbr i1 %18(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %19 = load i32* %n;
    i32* %20 = getelementptr &([20000000 * i32]* @matrix)[i64 0][i64 0];
    i32 %21 = load i32* %i;
    i64 %22 = sext i32 %21 to i64;
    i32* %23 = getelementptr &([100000 * i32]* @a)[i64 0][i64 %22];
    i32 %24 = load i32* %23;
    i32 %25 = call (i32, i32*, i32) -> i32 @transpose(i32 %19, i32* %20, i32 %24);
    i32 %26 = load i32* %i;
    i32 %27 = add i32 %26, i32 1;
    store i32* %i with i32 %27;
    ubr ^while.header1;
^b1:
    store i32* %ans with i32 0;
    store i32* %i with i32 0;
    ubr ^while.header2;
^while.header2:
    i32 %28 = load i32* %i;
    i32 %29 = load i32* %len;
    i1 %30 = scmp lt i32 %28, i32 %29;
    i32 %31 = zext i1 %30 to i32;
    i1 %32 = scmp neq i32 %31, i32 0;
    cbr i1 %32(prob = 0.97), ^while.body2, ^b2;
^while.body2:
    i32 %33 = load i32* %ans;
    i32 %34 = load i32* %i;
    i32 %35 = load i32* %i;
    i32 %36 = mul i32 %34, i32 %35;
    i32 %37 = load i32* %i;
    i64 %38 = sext i32 %37 to i64;
    i32* %39 = getelementptr &([20000000 * i32]* @matrix)[i64 0][i64 %38];
    i32 %40 = load i32* %39;
    i32 %41 = mul i32 %36, i32 %40;
    i32 %42 = add i32 %33, i32 %41;
    store i32* %ans with i32 %42;
    i32 %43 = load i32* %i;
    i32 %44 = add i32 %43, i32 1;
    store i32* %i with i32 %44;
    ubr ^while.header2;
^b2:
    i32 %45 = load i32* %ans;
    i1 %46 = scmp lt i32 %45, i32 0;
    i32 %47 = zext i1 %46 to i32;
    i1 %48 = scmp neq i32 %47, i32 0;
    cbr i1 %48(prob = 0.5), ^if.then, ^b3;
^if.then:
    i32 %49 = load i32* %ans;
    i32 %50 = neg i32 %49;
    store i32* %ans with i32 %50;
    ubr ^b3;
^b3:
    call (i32) -> void @stoptime(i32 47);
    i32 %51 = load i32* %ans;
    call (i32) -> void @putint(i32 %51);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
