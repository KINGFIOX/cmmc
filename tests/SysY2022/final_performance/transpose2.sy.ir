internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal [20000000 * i32]* @matrix;
internal [100000 * i32]* @a;
func @main() -> i32 { NoRecurse Entry } {
^entry():
    i32* %n = alloc i32;
    i32 %0 = call () -> i32 @getint();
    store i32* %n with i32 %0;
    i32* %len = alloc i32;
    i32* %1 = getelementptr &([100000 * i32]* @a)[i64 0][i64 0];
    i32 %2 = call (i32*) -> i32 @getarray(i32* %1);
    i32 %3 = load i32* %n;
    store i32* %len with i32 %2;
    call (i32) -> void @starttime(i32 28);
    i32* %i = alloc i32;
    i32* %4 = getelementptr &([20000000 * i32]* @matrix)[i64 0][i64 0];
    i1 %5 = scmp gt i32 %3, i32 0;
    cbr i1 %5(prob = 0.97), [ ^super.header i32* %len, i32* %n, i32* %i, i32* %4, i32 %3, i32 %2, i32 0 ], [ ^b i32* %len, i32* %n, i32* %i, i32* %4, i32 %3, i32 %2 ];
^super.header(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6):
    i32 %0 = add i32 %arg6, i32 15;
    i1 %1 = scmp lt i32 %0, i32 %arg4;
    cbr i1 %1(prob = 0.67), [ ^while.body i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6 ], [ ^while.body1 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6 ];
^b(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5):
    store i32* %arg2 with i32 0;
    i1 %0 = scmp gt i32 %arg5, i32 0;
    cbr i1 %0(prob = 0.97), [ ^while.body2 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg3, i32 %arg4, i32 %arg5, i32 0 ], [ ^b1 i32 %arg5 ];
^while.body(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6):
    i32* %0 = getelementptr &([20000000 * i32]* @matrix)[i64 0][i32 %arg6];
    store i32* %0 with i32 %arg6;
    i32 %1 = add i32 %arg6, i32 1;
    i32* %2 = getelementptr &(i32* %0)[i64 1];
    store i32* %2 with i32 %1;
    i32 %3 = add i32 %arg6, i32 2;
    i32* %4 = getelementptr &(i32* %0)[i64 2];
    store i32* %4 with i32 %3;
    i32 %5 = add i32 %arg6, i32 3;
    i32* %6 = getelementptr &(i32* %0)[i64 3];
    store i32* %6 with i32 %5;
    i32 %7 = add i32 %arg6, i32 4;
    i32* %8 = getelementptr &(i32* %0)[i64 4];
    store i32* %8 with i32 %7;
    i32 %9 = add i32 %arg6, i32 5;
    i32* %10 = getelementptr &(i32* %0)[i64 5];
    store i32* %10 with i32 %9;
    i32 %11 = add i32 %arg6, i32 6;
    i32* %12 = getelementptr &(i32* %0)[i64 6];
    store i32* %12 with i32 %11;
    i32 %13 = add i32 %arg6, i32 7;
    i32* %14 = getelementptr &(i32* %0)[i64 7];
    store i32* %14 with i32 %13;
    i32 %15 = add i32 %arg6, i32 8;
    i32* %16 = getelementptr &(i32* %0)[i64 8];
    store i32* %16 with i32 %15;
    i32 %17 = add i32 %arg6, i32 9;
    i32* %18 = getelementptr &(i32* %0)[i64 9];
    store i32* %18 with i32 %17;
    i32 %19 = add i32 %arg6, i32 10;
    i32* %20 = getelementptr &(i32* %0)[i64 10];
    store i32* %20 with i32 %19;
    i32 %21 = add i32 %arg6, i32 11;
    i32* %22 = getelementptr &(i32* %0)[i64 11];
    store i32* %22 with i32 %21;
    i32 %23 = add i32 %arg6, i32 12;
    i32* %24 = getelementptr &(i32* %0)[i64 12];
    store i32* %24 with i32 %23;
    i32 %25 = add i32 %arg6, i32 13;
    i32* %26 = getelementptr &(i32* %0)[i64 13];
    store i32* %26 with i32 %25;
    i32 %27 = add i32 %arg6, i32 14;
    i32* %28 = getelementptr &(i32* %0)[i64 14];
    store i32* %28 with i32 %27;
    i32 %29 = add i32 %arg6, i32 15;
    i32* %30 = getelementptr &(i32* %0)[i64 15];
    store i32* %30 with i32 %29;
    i32 %31 = add i32 %arg6, i32 16;
    i1 %32 = scmp lt i32 %31, i32 %arg4;
    cbr i1 %32(prob = 0.97), [ ^super.header i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %31 ], [ ^b i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5 ];
^while.body1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6):
    i32* %0 = getelementptr &([20000000 * i32]* @matrix)[i64 0][i32 %arg6];
    store i32* %0 with i32 %arg6;
    i32 %1 = add i32 %arg6, i32 1;
    i1 %2 = scmp lt i32 %1, i32 %arg4;
    cbr i1 %2(prob = 0.97), [ ^while.body1 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %1 ], [ ^b i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5 ];
^while.body2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6):
    i32* %0 = getelementptr &([100000 * i32]* @a)[i64 0][i32 %arg6];
    i32 %1 = load i32* %0;
    i32* %rowsize = alloc i32;
    store i32* %rowsize with i32 %1;
    i32* %colsize = alloc i32;
    i32 %2 = sdiv i32 %arg4, i32 %1;
    store i32* %colsize with i32 %2;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    i32* %j = alloc i32;
    i1 %3 = scmp gt i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), [ ^while.body3 i32* %rowsize, i32* %colsize, i32* %i, i32* %j, i32* %arg1, i32* %arg2, i32* %arg, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32* %arg3, i32 %1, i32 %2, i32 0 ], [ ^while.body4 i32* %arg3, i32* %arg, i32* %arg2, i32* %arg1, i32 %arg4, i32 %arg5, i32 %arg6 ];
^b1(i32 %arg):
    i1 %0 = scmp gt i32 %arg, i32 0;
    cbr i1 %0(prob = 0.97), [ ^super.header1 i32 %arg, i32 0, i32 0 ], [ ^b2 i32 0 ];
^while.body3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32* %arg11, i32 %arg12, i32 %arg13, i32 %arg14):
    store i32* %arg3 with i32 0;
    i1 %0 = scmp gt i32 %arg12, i32 0;
    cbr i1 %0(prob = 0.97), [ ^while.body5 i32* %arg1, i32* %arg, i32* %arg3, i32* %arg2, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32 %arg8, i32 %arg9, i32 %arg10, i32* %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 0 ], [ ^b3 i32* %arg, i32* %arg3, i32* %arg1, i32* %arg2, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32* %arg11, i32 %arg12, i32 %arg13, i32 %arg14 ];
^super.header1(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = add i32 %arg1, i32 15;
    i1 %1 = scmp lt i32 %0, i32 %arg;
    cbr i1 %1(prob = 0.67), [ ^while.body6 i32 %arg, i32 %arg1, i32 %arg2 ], [ ^while.body7 i32 %arg, i32 %arg1, i32 %arg2 ];
^while.body4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6):
    i32 %0 = add i32 %arg6, i32 1;
    store i32* %arg3 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 %arg5;
    cbr i1 %1(prob = 0.97), [ ^while.body2 i32* %arg1, i32* %arg3, i32* %arg2, i32* %arg, i32 %arg4, i32 %arg5, i32 %0 ], [ ^b1 i32 %arg5 ];
^b2(i32 %arg):
    i1 %0 = scmp lt i32 %arg, i32 0;
    cbr i1 %0(prob = 0.5), [ ^indirect i32 %arg ], [ ^indirect1 i32 %arg ];
^while.body5(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32* %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15):
    i1 %0 = scmp lt i32 %arg14, i32 %arg15;
    cbr i1 %0(prob = 0.5), [ ^indirect2 i32* %arg, i32* %arg3, i32* %arg1, i32* %arg2, i32 %arg15, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32 %arg8, i32 %arg9, i32 %arg10, i32* %arg11, i32 %arg12, i32 %arg13, i32 %arg14 ], [ ^indirect3 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg3, i32 %arg15, i32 %arg15, i32 %arg14, i32 %arg14, i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32* %arg11, i32 %arg12, i32 %arg13 ];
^while.body6(i32 %arg, i32 %arg1, i32 %arg2):
    i32* %0 = getelementptr &([20000000 * i32]* @matrix)[i64 0][i32 %arg1];
    i32 %1 = load i32* %0;
    i32 %2 = mul i32 %arg1, i32 %arg1;
    i32 %3 = mul i32 %2, i32 %1;
    i32 %4 = add i32 %arg1, i32 1;
    i32* %5 = getelementptr &(i32* %0)[i64 1];
    i32 %6 = load i32* %5;
    i32 %7 = mul i32 %4, i32 %4;
    i32 %8 = mul i32 %7, i32 %6;
    i32 %9 = add i32 %arg1, i32 2;
    i32* %10 = getelementptr &(i32* %0)[i64 2];
    i32 %11 = load i32* %10;
    i32 %12 = mul i32 %9, i32 %9;
    i32 %13 = mul i32 %11, i32 %12;
    i32 %14 = add i32 %arg1, i32 3;
    i32* %15 = getelementptr &(i32* %0)[i64 3];
    i32 %16 = load i32* %15;
    i32 %17 = mul i32 %14, i32 %14;
    i32 %18 = mul i32 %16, i32 %17;
    i32 %19 = add i32 %arg1, i32 4;
    i32* %20 = getelementptr &(i32* %0)[i64 4];
    i32 %21 = load i32* %20;
    i32 %22 = mul i32 %19, i32 %19;
    i32 %23 = mul i32 %21, i32 %22;
    i32 %24 = add i32 %arg1, i32 5;
    i32* %25 = getelementptr &(i32* %0)[i64 5];
    i32 %26 = load i32* %25;
    i32 %27 = mul i32 %24, i32 %24;
    i32 %28 = mul i32 %26, i32 %27;
    i32 %29 = add i32 %arg1, i32 6;
    i32* %30 = getelementptr &(i32* %0)[i64 6];
    i32 %31 = load i32* %30;
    i32 %32 = mul i32 %29, i32 %29;
    i32 %33 = mul i32 %31, i32 %32;
    i32 %34 = add i32 %arg1, i32 7;
    i32* %35 = getelementptr &(i32* %0)[i64 7];
    i32 %36 = load i32* %35;
    i32 %37 = mul i32 %34, i32 %34;
    i32 %38 = mul i32 %36, i32 %37;
    i32 %39 = add i32 %arg1, i32 8;
    i32* %40 = getelementptr &(i32* %0)[i64 8];
    i32 %41 = load i32* %40;
    i32 %42 = mul i32 %39, i32 %39;
    i32 %43 = mul i32 %41, i32 %42;
    i32 %44 = add i32 %arg1, i32 9;
    i32* %45 = getelementptr &(i32* %0)[i64 9];
    i32 %46 = load i32* %45;
    i32 %47 = mul i32 %44, i32 %44;
    i32 %48 = mul i32 %46, i32 %47;
    i32 %49 = add i32 %arg1, i32 10;
    i32* %50 = getelementptr &(i32* %0)[i64 10];
    i32 %51 = load i32* %50;
    i32 %52 = mul i32 %49, i32 %49;
    i32 %53 = mul i32 %51, i32 %52;
    i32 %54 = add i32 %arg1, i32 11;
    i32* %55 = getelementptr &(i32* %0)[i64 11];
    i32 %56 = load i32* %55;
    i32 %57 = mul i32 %54, i32 %54;
    i32 %58 = mul i32 %56, i32 %57;
    i32 %59 = add i32 %arg1, i32 12;
    i32* %60 = getelementptr &(i32* %0)[i64 12];
    i32 %61 = load i32* %60;
    i32 %62 = mul i32 %59, i32 %59;
    i32 %63 = mul i32 %61, i32 %62;
    i32 %64 = add i32 %arg1, i32 13;
    i32* %65 = getelementptr &(i32* %0)[i64 13];
    i32 %66 = load i32* %65;
    i32 %67 = mul i32 %64, i32 %64;
    i32 %68 = mul i32 %66, i32 %67;
    i32 %69 = add i32 %arg1, i32 14;
    i32* %70 = getelementptr &(i32* %0)[i64 14];
    i32 %71 = load i32* %70;
    i32 %72 = mul i32 %69, i32 %69;
    i32 %73 = mul i32 %71, i32 %72;
    i32 %74 = add i32 %arg1, i32 15;
    i32* %75 = getelementptr &(i32* %0)[i64 15];
    i32 %76 = load i32* %75;
    i32 %77 = mul i32 %74, i32 %74;
    i32 %78 = mul i32 %76, i32 %77;
    i32 %79 = add i32 %arg2, i32 %3;
    i32 %80 = add i32 %79, i32 %8;
    i32 %81 = add i32 %80, i32 %13;
    i32 %82 = add i32 %81, i32 %18;
    i32 %83 = add i32 %82, i32 %23;
    i32 %84 = add i32 %83, i32 %28;
    i32 %85 = add i32 %84, i32 %33;
    i32 %86 = add i32 %85, i32 %38;
    i32 %87 = add i32 %86, i32 %43;
    i32 %88 = add i32 %87, i32 %48;
    i32 %89 = add i32 %88, i32 %53;
    i32 %90 = add i32 %89, i32 %58;
    i32 %91 = add i32 %90, i32 %63;
    i32 %92 = add i32 %91, i32 %68;
    i32 %93 = add i32 %92, i32 %73;
    i32 %94 = add i32 %93, i32 %78;
    i32 %95 = add i32 %arg1, i32 16;
    i1 %96 = scmp lt i32 %95, i32 %arg;
    cbr i1 %96(prob = 0.97), [ ^super.header1 i32 %arg, i32 %95, i32 %94 ], [ ^b2 i32 %94 ];
^b3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32* %arg11, i32 %arg12, i32 %arg13, i32 %arg14):
    i32 %0 = add i32 %arg14, i32 1;
    store i32* %arg3 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 %arg13;
    cbr i1 %1(prob = 0.97), [ ^while.body3 i32* %arg, i32* %arg2, i32* %arg3, i32* %arg1, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32* %arg11, i32 %arg12, i32 %arg13, i32 %0 ], [ ^while.body4 i32* %arg7, i32* %arg6, i32* %arg5, i32* %arg4, i32 %arg8, i32 %arg9, i32 %arg10 ];
^while.body7(i32 %arg, i32 %arg1, i32 %arg2):
    i32* %0 = getelementptr &([20000000 * i32]* @matrix)[i64 0][i32 %arg1];
    i32 %1 = load i32* %0;
    i32 %2 = mul i32 %arg1, i32 %arg1;
    i32 %3 = mul i32 %2, i32 %1;
    i32 %4 = add i32 %arg2, i32 %3;
    i32 %5 = add i32 %arg1, i32 1;
    i1 %6 = scmp lt i32 %5, i32 %arg;
    cbr i1 %6(prob = 0.97), [ ^while.body7 i32 %arg, i32 %5, i32 %4 ], [ ^b2 i32 %4 ];
^indirect(i32 %arg):
    i32 %0 = neg i32 %arg;
    call (i32) -> void @stoptime(i32 47);
    call (i32) -> void @putint(i32 %0);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^indirect1(i32 %arg):
    call (i32) -> void @stoptime(i32 47);
    call (i32) -> void @putint(i32 %arg);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^indirect2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32* %arg12, i32 %arg13, i32 %arg14, i32 %arg15):
    i32 %0 = add i32 %arg4, i32 1;
    store i32* %arg3 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 %arg13;
    cbr i1 %1(prob = 0.97), [ ^while.body5 i32* %arg, i32* %arg2, i32* %arg3, i32* %arg1, i32* %arg8, i32* %arg7, i32* %arg6, i32* %arg5, i32 %arg9, i32 %arg10, i32 %arg11, i32* %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %0 ], [ ^b3 i32* %arg2, i32* %arg3, i32* %arg, i32* %arg1, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32* %arg12, i32 %arg13, i32 %arg14, i32 %arg15 ];
^indirect3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32 %arg13, i32 %arg14):
    i32 %0 = mul i32 %arg7, i32 %arg13;
    i32 %1 = add i32 %arg5, i32 %0;
    i32* %2 = getelementptr &(i32* %arg12)[i32 %1];
    i32 %3 = load i32* %2;
    i32 %4 = mul i32 %arg4, i32 %arg14;
    i32 %5 = add i32 %arg6, i32 %4;
    i32* %6 = getelementptr &(i32* %arg12)[i32 %5];
    i32 %7 = mul i32 %arg6, i32 %arg13;
    i32 %8 = add i32 %arg4, i32 %7;
    i32* %9 = getelementptr &(i32* %arg12)[i32 %8];
    i32 %10 = load i32* %9;
    store i32* %6 with i32 %10;
    i32 %11 = load i32* %arg1;
    i32 %12 = load i32* %arg3;
    i32 %13 = load i32* %arg2;
    i32 %14 = mul i32 %13, i32 %12;
    i32 %15 = add i32 %14, i32 %11;
    i32* %16 = getelementptr &(i32* %arg12)[i32 %15];
    store i32* %16 with i32 %3;
    i32 %17 = load i32* %arg;
    i32 %18 = load i32* %arg8;
    i32 %19 = load i32* %arg10;
    i32 %20 = load i32* %arg9;
    i32 %21 = add i32 %11, i32 1;
    store i32* %arg1 with i32 %21;
    i1 %22 = scmp lt i32 %21, i32 %13;
    cbr i1 %22(prob = 0.97), [ ^while.body5 i32* %arg, i32* %arg2, i32* %arg1, i32* %arg3, i32* %arg11, i32* %arg10, i32* %arg9, i32* %arg8, i32 %20, i32 %19, i32 %18, i32* %arg12, i32 %13, i32 %17, i32 %12, i32 %21 ], [ ^b3 i32* %arg2, i32* %arg1, i32* %arg, i32* %arg3, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32 %20, i32 %19, i32 %18, i32* %arg12, i32 %13, i32 %17, i32 %12 ];
}
