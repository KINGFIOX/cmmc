internal func @getarray() -> i32 { NoMemoryRead };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal [1000 * [1000 * i32]]* @a;
internal [1000 * [1000 * i32]]* @b;
internal [1000 * [1000 * i32]]* @c;
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32* %sum = alloc i32;
    i32* %i = alloc i32;
    store i32* %sum with i32 0;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = phi [^b1, i32 %9] [^entry, i32 0];
    i32 %1 = phi [^b1, i32 %7] [^entry, i32 0];
    i1 %2 = scmp lt i32 %0, i32 1000;
    cbr i1 %2(prob = 0.97), ^while.body, ^b;
^b:
    call (i32) -> void @starttime(i32 23);
    ubr ^while.header1;
^while.body:
    [1000 * i32]* %3 = getelementptr &([1000 * [1000 * i32]]* @a)[i64 0][i32 %0];
    i32* %4 = getelementptr &([1000 * i32]* %3)[i64 0][i64 0];
    i32 %5 = call (i32*) -> i32 @getarray(i32* %4);
    i32 %6 = load i32* %i;
    i32 %7 = load i32* %sum;
    i1 %8 = scmp neq i32 %5, i32 1000;
    cbr i1 %8(prob = 0.5), ^if.then, ^b1;
^b1:
    i32 %9 = add i32 %6, i32 1;
    store i32* %i with i32 %9;
    ubr ^while.header;
^while.header1:
    i32 %10 = phi [^b2, i32 %26] [^b, i32 0];
    i32 %11 = phi [^b2, i32 %15] [^b, i32 %1];
    i1 %12 = scmp lt i32 %10, i32 1000;
    cbr i1 %12(prob = 0.97), ^while.header2, ^while.header3;
^if.then:
    ret i32 %5;
^while.header2:
    i32 %13 = phi [^while.header1, i32 %10] [^while.body1, i32 %13];
    i32 %14 = phi [^while.header1, i32 0] [^while.body1, i32 %25];
    i32 %15 = phi [^while.header1, i32 %11] [^while.body1, i32 %15];
    i1 %16 = scmp lt i32 %14, i32 1000;
    cbr i1 %16(prob = 0.97), ^while.body1, ^b2;
^while.header3:
    i32 %17 = phi [^while.header1, i32 0] [^b3, i32 %34];
    i32 %18 = phi [^while.header1, i32 %11] [^b3, i32 %29];
    i1 %19 = scmp lt i32 %17, i32 1000;
    cbr i1 %19(prob = 0.97), ^while.header4, ^while.header5;
^while.body1:
    [1000 * i32]* %20 = getelementptr &([1000 * [1000 * i32]]* @b)[i64 0][i32 %13];
    i32* %21 = getelementptr &([1000 * i32]* %20)[i64 0][i32 %14];
    [1000 * i32]* %22 = getelementptr &([1000 * [1000 * i32]]* @a)[i64 0][i32 %14];
    i32* %23 = getelementptr &([1000 * i32]* %22)[i64 0][i32 %13];
    i32 %24 = load i32* %23;
    store i32* %21 with i32 %24;
    i32 %25 = add i32 %14, i32 1;
    ubr ^while.header2;
^b2:
    i32 %26 = add i32 %13, i32 1;
    ubr ^while.header1;
^while.header4:
    i32 %27 = phi [^while.header3, i32 %17] [^b4, i32 %35];
    i32 %28 = phi [^while.header3, i32 0] [^b4, i32 %60];
    i32 %29 = phi [^while.header3, i32 %18] [^b4, i32 %38];
    i1 %30 = scmp lt i32 %28, i32 1000;
    cbr i1 %30(prob = 0.97), ^while.header6, ^b3;
^while.header5:
    i32 %31 = phi [^while.header3, i32 0] [^b6, i32 %89];
    i32 %32 = phi [^while.header3, i32 %18] [^b6, i32 %67];
    i1 %33 = scmp lt i32 %31, i32 1000;
    cbr i1 %33(prob = 0.97), ^while.header7, ^while.header8;
^b3:
    i32 %34 = add i32 %27, i32 1;
    ubr ^while.header3;
^while.header6:
    i32 %35 = phi [^while.header4, i32 %27] [^while.body2, i32 %35];
    i32 %36 = phi [^while.header4, i32 %28] [^while.body2, i32 %36];
    i32 %37 = phi [^while.header4, i32 0] [^while.body2, i32 %57];
    i32 %38 = phi [^while.header4, i32 %29] [^while.body2, i32 %38];
    i32 %39 = phi [^while.header4, i32 0] [^while.body2, i32 %56];
    i1 %40 = scmp lt i32 %37, i32 1000;
    cbr i1 %40(prob = 0.97), ^while.body2, ^b4;
^while.header7:
    i32 %41 = phi [^while.header5, i32 %31] [^b5, i32 %41];
    i32 %42 = phi [^while.header5, i32 0] [^b5, i32 %78];
    i32 %43 = phi [^while.header5, i32 %32] [^b5, i32 %43];
    i32 %44 = phi [^while.header5, i32 2147483647] [^b5, i32 %77];
    i1 %45 = scmp lt i32 %42, i32 1000;
    cbr i1 %45(prob = 0.97), ^while.body3, ^while.header9;
^while.header8:
    i32 %46 = phi [^while.header5, i32 0] [^b7, i32 %90];
    i32 %47 = phi [^while.header5, i32 %32] [^b7, i32 %72];
    i1 %48 = scmp lt i32 %46, i32 1000;
    cbr i1 %48(prob = 0.97), ^while.header10, ^while.header11;
^while.body2:
    [1000 * i32]* %49 = getelementptr &([1000 * [1000 * i32]]* @a)[i64 0][i32 %35];
    i32* %50 = getelementptr &([1000 * i32]* %49)[i64 0][i32 %37];
    i32 %51 = load i32* %50;
    [1000 * i32]* %52 = getelementptr &([1000 * [1000 * i32]]* @b)[i64 0][i32 %37];
    i32* %53 = getelementptr &([1000 * i32]* %52)[i64 0][i32 %36];
    i32 %54 = load i32* %53;
    i32 %55 = mul i32 %51, i32 %54;
    i32 %56 = add i32 %39, i32 %55;
    i32 %57 = add i32 %37, i32 1;
    ubr ^while.header6;
^b4:
    [1000 * i32]* %58 = getelementptr &([1000 * [1000 * i32]]* @c)[i64 0][i32 %35];
    i32* %59 = getelementptr &([1000 * i32]* %58)[i64 0][i32 %36];
    store i32* %59 with i32 %39;
    i32 %60 = add i32 %36, i32 1;
    ubr ^while.header4;
^while.body3:
    [1000 * i32]* %61 = getelementptr &([1000 * [1000 * i32]]* @c)[i64 0][i32 %41];
    i32* %62 = getelementptr &([1000 * i32]* %61)[i64 0][i32 %42];
    i32 %63 = load i32* %62;
    i1 %64 = scmp lt i32 %63, i32 %44;
    cbr i1 %64(prob = 0.5), ^if.then1, ^b5;
^while.header9:
    i32 %65 = phi [^while.header7, i32 %41] [^while.body4, i32 %65];
    i32 %66 = phi [^while.header7, i32 0] [^while.body4, i32 %81];
    i32 %67 = phi [^while.header7, i32 %43] [^while.body4, i32 %67];
    i32 %68 = phi [^while.header7, i32 %44] [^while.body4, i32 %68];
    i1 %69 = scmp lt i32 %66, i32 1000;
    cbr i1 %69(prob = 0.97), ^while.body4, ^b6;
^while.header10:
    i32 %70 = phi [^while.header8, i32 %46] [^while.body5, i32 %70];
    i32 %71 = phi [^while.header8, i32 0] [^while.body5, i32 %88];
    i32 %72 = phi [^while.header8, i32 %47] [^while.body5, i32 %72];
    i1 %73 = scmp lt i32 %71, i32 1000;
    cbr i1 %73(prob = 0.97), ^while.body5, ^b7;
^while.header11:
    i32 %74 = phi [^while.header8, i32 0] [^b9, i32 %100];
    i32 %75 = phi [^while.header8, i32 %47] [^b9, i32 %93];
    i1 %76 = scmp lt i32 %74, i32 1000;
    cbr i1 %76(prob = 0.97), ^while.header12, ^b8;
^if.then1:
    ubr ^b5;
^b5:
    i32 %77 = phi [^if.then1, i32 %63] [^while.body3, i32 %44];
    i32 %78 = add i32 %42, i32 1;
    ubr ^while.header7;
^while.body4:
    [1000 * i32]* %79 = getelementptr &([1000 * [1000 * i32]]* @c)[i64 0][i32 %65];
    i32* %80 = getelementptr &([1000 * i32]* %79)[i64 0][i32 %66];
    store i32* %80 with i32 %68;
    i32 %81 = add i32 %66, i32 1;
    ubr ^while.header9;
^while.body5:
    [1000 * i32]* %82 = getelementptr &([1000 * [1000 * i32]]* @c)[i64 0][i32 %70];
    i32* %83 = getelementptr &([1000 * i32]* %82)[i64 0][i32 %71];
    [1000 * i32]* %84 = getelementptr &([1000 * [1000 * i32]]* @c)[i64 0][i32 %71];
    i32* %85 = getelementptr &([1000 * i32]* %84)[i64 0][i32 %70];
    i32 %86 = load i32* %85;
    i32 %87 = neg i32 %86;
    store i32* %83 with i32 %87;
    i32 %88 = add i32 %71, i32 1;
    ubr ^while.header10;
^b6:
    i32 %89 = add i32 %65, i32 1;
    ubr ^while.header5;
^b7:
    i32 %90 = add i32 %70, i32 1;
    ubr ^while.header8;
^while.header12:
    i32 %91 = phi [^while.header11, i32 %74] [^while.body6, i32 %91];
    i32 %92 = phi [^while.header11, i32 0] [^while.body6, i32 %99];
    i32 %93 = phi [^while.header11, i32 %75] [^while.body6, i32 %98];
    i1 %94 = scmp lt i32 %92, i32 1000;
    cbr i1 %94(prob = 0.97), ^while.body6, ^b9;
^b8:
    call (i32) -> void @stoptime(i32 92);
    call (i32) -> void @putint(i32 %75);
    ret i32 0;
^while.body6:
    [1000 * i32]* %95 = getelementptr &([1000 * [1000 * i32]]* @c)[i64 0][i32 %91];
    i32* %96 = getelementptr &([1000 * i32]* %95)[i64 0][i32 %92];
    i32 %97 = load i32* %96;
    i32 %98 = add i32 %93, i32 %97;
    i32 %99 = add i32 %92, i32 1;
    ubr ^while.header12;
^b9:
    i32 %100 = add i32 %91, i32 1;
    ubr ^while.header11;
}
