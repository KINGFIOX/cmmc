internal func @getarray(i32*) -> i32 { NoMemoryRead };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putch(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @radixSort(i32, i32*, i32, i32, i32*) -> void {
^entry(i32 %arg, i32* %arg1, i32 %arg2, i32 %arg3, i32* %arg4):
    i32* %bitround = alloc i32;
    store i32* %bitround with i32 %arg;
    i32** %a = alloc i32*;
    store i32** %a with i32* %arg1;
    i32* %l = alloc i32;
    store i32* %l with i32 %arg2;
    [16 * i32]* %head = alloc [16 * i32];
    i32* %0 = getelementptr &([16 * i32]* %head)[i32 0][i32 0];
    store i32* %0 with i32 0;
    i32* %1 = getelementptr &([16 * i32]* %head)[i32 0][i32 1];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([16 * i32]* %head)[i32 0][i32 2];
    store i32* %2 with i32 0;
    i32* %3 = getelementptr &([16 * i32]* %head)[i32 0][i32 3];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([16 * i32]* %head)[i32 0][i32 4];
    store i32* %4 with i32 0;
    i32* %5 = getelementptr &([16 * i32]* %head)[i32 0][i32 5];
    store i32* %5 with i32 0;
    i32* %6 = getelementptr &([16 * i32]* %head)[i32 0][i32 6];
    store i32* %6 with i32 0;
    i32* %7 = getelementptr &([16 * i32]* %head)[i32 0][i32 7];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([16 * i32]* %head)[i32 0][i32 8];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([16 * i32]* %head)[i32 0][i32 9];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([16 * i32]* %head)[i32 0][i32 10];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([16 * i32]* %head)[i32 0][i32 11];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([16 * i32]* %head)[i32 0][i32 12];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &([16 * i32]* %head)[i32 0][i32 13];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &([16 * i32]* %head)[i32 0][i32 14];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &([16 * i32]* %head)[i32 0][i32 15];
    store i32* %15 with i32 0;
    [16 * i32]* %tail = alloc [16 * i32];
    i32* %16 = getelementptr &([16 * i32]* %tail)[i32 0][i32 0];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &([16 * i32]* %tail)[i32 0][i32 1];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &([16 * i32]* %tail)[i32 0][i32 2];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &([16 * i32]* %tail)[i32 0][i32 3];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &([16 * i32]* %tail)[i32 0][i32 4];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &([16 * i32]* %tail)[i32 0][i32 5];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &([16 * i32]* %tail)[i32 0][i32 6];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &([16 * i32]* %tail)[i32 0][i32 7];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &([16 * i32]* %tail)[i32 0][i32 8];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &([16 * i32]* %tail)[i32 0][i32 9];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &([16 * i32]* %tail)[i32 0][i32 10];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &([16 * i32]* %tail)[i32 0][i32 11];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &([16 * i32]* %tail)[i32 0][i32 12];
    store i32* %28 with i32 0;
    i32* %29 = getelementptr &([16 * i32]* %tail)[i32 0][i32 13];
    store i32* %29 with i32 0;
    i32* %30 = getelementptr &([16 * i32]* %tail)[i32 0][i32 14];
    store i32* %30 with i32 0;
    i32* %31 = getelementptr &([16 * i32]* %tail)[i32 0][i32 15];
    store i32* %31 with i32 0;
    [16 * i32]* %cnt = alloc [16 * i32];
    i32* %32 = getelementptr &([16 * i32]* %cnt)[i32 0][i32 0];
    store i32* %32 with i32 0;
    i32* %33 = getelementptr &([16 * i32]* %cnt)[i32 0][i32 1];
    store i32* %33 with i32 0;
    i32* %34 = getelementptr &([16 * i32]* %cnt)[i32 0][i32 2];
    store i32* %34 with i32 0;
    i32* %35 = getelementptr &([16 * i32]* %cnt)[i32 0][i32 3];
    store i32* %35 with i32 0;
    i32* %36 = getelementptr &([16 * i32]* %cnt)[i32 0][i32 4];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &([16 * i32]* %cnt)[i32 0][i32 5];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &([16 * i32]* %cnt)[i32 0][i32 6];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &([16 * i32]* %cnt)[i32 0][i32 7];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &([16 * i32]* %cnt)[i32 0][i32 8];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &([16 * i32]* %cnt)[i32 0][i32 9];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &([16 * i32]* %cnt)[i32 0][i32 10];
    store i32* %42 with i32 0;
    i32* %43 = getelementptr &([16 * i32]* %cnt)[i32 0][i32 11];
    store i32* %43 with i32 0;
    i32* %44 = getelementptr &([16 * i32]* %cnt)[i32 0][i32 12];
    store i32* %44 with i32 0;
    i32* %45 = getelementptr &([16 * i32]* %cnt)[i32 0][i32 13];
    store i32* %45 with i32 0;
    i32* %46 = getelementptr &([16 * i32]* %cnt)[i32 0][i32 14];
    store i32* %46 with i32 0;
    i32* %47 = getelementptr &([16 * i32]* %cnt)[i32 0][i32 15];
    store i32* %47 with i32 0;
    i1 %48 = scmp eq i32 %arg, i32 -1;
    cbr i1 %48, [ ^if.then ], [ ^indirect [16 * i32]* %cnt, i32* %bitround, i32** %a, [16 * i32]* %head, [16 * i32]* %tail, i32* %l, i32 %arg3, i32 %arg2, i32* %arg4, i32 %arg, i32* %arg1, i32 %arg2, i32 %arg3 ];
^indirect([16 * i32]* %arg, i32* %arg1, i32** %arg2, [16 * i32]* %arg3, [16 * i32]* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32* %arg8, i32 %arg9, i32* %arg10, i32 %arg11, i32 %arg12):
    i32 %0 = add i32 %arg7, i32 1;
    i1 %1 = scmp ge i32 %0, i32 %arg6;
    cbr i1 %1, [ ^if.then ], [ ^b [16 * i32]* %arg, i32* %arg1, i32** %arg2, [16 * i32]* %arg3, [16 * i32]* %arg4, i32* %arg5, i32* %arg8, i32 %arg9, i32* %arg10, i32 %arg11, i32 %arg12 ];
^if.then():
    ret;
^b([16 * i32]* %arg, i32* %arg1, i32** %arg2, [16 * i32]* %arg3, [16 * i32]* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32* %arg8, i32 %arg9, i32 %arg10):
    i32* %i = alloc i32;
    store i32* %i with i32 %arg9;
    i1 %0 = scmp lt i32 %arg9, i32 %arg10;
    cbr i1 %0, [ ^while.body [16 * i32]* %arg4, i32* %arg5, [16 * i32]* %arg3, [16 * i32]* %arg, i32* %arg1, i32** %arg2, i32* %i, i32* %arg6, i32 %arg7, i32* %arg8, i32 %arg9, i32 %arg10, i32 %arg9 ], [ ^b1 i32* %arg1, i32** %arg2, i32* %i, [16 * i32]* %arg, [16 * i32]* %arg4, i32* %arg5, [16 * i32]* %arg3, i32* %arg6, i32 %arg7, i32* %arg8, i32 %arg9 ];
^b1(i32* %arg, i32** %arg1, i32* %arg2, [16 * i32]* %arg3, [16 * i32]* %arg4, i32* %arg5, [16 * i32]* %arg6, i32* %arg7, i32 %arg8, i32* %arg9, i32 %arg10):
    i32* %0 = getelementptr &([16 * i32]* %arg6)[i32 0][i32 0];
    store i32* %0 with i32 %arg10;
    i32* %1 = getelementptr &([16 * i32]* %arg4)[i32 0][i32 0];
    i32* %2 = getelementptr &([16 * i32]* %arg3)[i32 0][i32 0];
    i32 %3 = load i32* %2;
    i32 %4 = add i32 %arg10, i32 %3;
    store i32* %1 with i32 %4;
    ubr [ ^while.body2 i32* %arg, i32** %arg1, [16 * i32]* %arg3, i32* %arg5, [16 * i32]* %arg4, [16 * i32]* %arg6, i32* %arg2, i32* %arg7, i32 %arg8, i32* %arg9, i32 %arg10, i32 1 ];
^while.body([16 * i32]* %arg, i32* %arg1, [16 * i32]* %arg2, [16 * i32]* %arg3, i32* %arg4, i32** %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12):
    i32* %0 = getelementptr &(i32* %arg9)[i32 %arg12];
    i32 %1 = load i32* %0;
    i32* %num = alloc i32;
    store i32* %num with i32 %1;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    i1 %2 = scmp lt i32 0, i32 %arg8;
    cbr i1 %2, [ ^while.body1 i32* %i, i32* %num, [16 * i32]* %arg3, i32* %arg7, i32 %arg12, [16 * i32]* %arg2, i32* %arg6, i32* %arg1, [16 * i32]* %arg, i32** %arg5, i32* %arg4, i32 %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %1, i32 %arg8, i32 0 ], [ ^b2 [16 * i32]* %arg3, i32* %arg7, i32 %arg12, [16 * i32]* %arg2, i32* %arg6, i32* %arg1, [16 * i32]* %arg, i32** %arg5, i32* %arg4, i32 %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %1 ];
^while.body1(i32* %arg, i32* %arg1, [16 * i32]* %arg2, i32* %arg3, i32 %arg4, [16 * i32]* %arg5, i32* %arg6, i32* %arg7, [16 * i32]* %arg8, i32** %arg9, i32* %arg10, i32 %arg11, i32* %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16, i32 %arg17):
    i32 %0 = sdiv i32 %arg15, i32 16;
    store i32* %arg1 with i32 %0;
    i32 %1 = add i32 %arg17, i32 1;
    store i32* %arg with i32 %1;
    i1 %2 = scmp lt i32 %1, i32 %arg16;
    cbr i1 %2, [ ^while.body1 i32* %arg, i32* %arg1, [16 * i32]* %arg2, i32* %arg3, i32 %arg4, [16 * i32]* %arg5, i32* %arg6, i32* %arg7, [16 * i32]* %arg8, i32** %arg9, i32* %arg10, i32 %arg11, i32* %arg12, i32 %arg13, i32 %arg14, i32 %0, i32 %arg16, i32 %1 ], [ ^b2 [16 * i32]* %arg2, i32* %arg3, i32 %arg4, [16 * i32]* %arg5, i32* %arg6, i32* %arg7, [16 * i32]* %arg8, i32** %arg9, i32* %arg10, i32 %arg11, i32* %arg12, i32 %arg13, i32 %arg14, i32 %0 ];
^while.body2(i32* %arg, i32** %arg1, [16 * i32]* %arg2, i32* %arg3, [16 * i32]* %arg4, [16 * i32]* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32* %arg9, i32 %arg10, i32 %arg11):
    i32* %0 = getelementptr &([16 * i32]* %arg5)[i32 0][i32 %arg11];
    i32 %1 = sub i32 %arg11, i32 1;
    i32* %2 = getelementptr &([16 * i32]* %arg4)[i32 0][i32 %1];
    i32 %3 = load i32* %2;
    store i32* %0 with i32 %3;
    i32* %4 = getelementptr &([16 * i32]* %arg4)[i32 0][i32 %arg11];
    i32* %5 = getelementptr &([16 * i32]* %arg2)[i32 0][i32 %arg11];
    i32 %6 = load i32* %5;
    i32 %7 = add i32 %3, i32 %6;
    store i32* %4 with i32 %7;
    i32 %8 = add i32 %arg11, i32 1;
    i1 %9 = scmp lt i32 %8, i32 16;
    cbr i1 %9, [ ^while.body2 i32* %arg, i32** %arg1, [16 * i32]* %arg2, i32* %arg3, [16 * i32]* %arg4, [16 * i32]* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32* %arg9, i32 %arg10, i32 %8 ], [ ^b3 [16 * i32]* %arg5, [16 * i32]* %arg4, i32* %arg3, i32* %arg, i32** %arg1, [16 * i32]* %arg2, i32* %arg6, i32* %arg7, i32 %arg8, i32* %arg9, i32 %arg10 ];
^b2([16 * i32]* %arg, i32* %arg1, i32 %arg2, [16 * i32]* %arg3, i32* %arg4, i32* %arg5, [16 * i32]* %arg6, i32** %arg7, i32* %arg8, i32 %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %arg13):
    i32 %0 = srem i32 %arg13, i32 16;
    i32* %1 = getelementptr &([16 * i32]* %arg)[i32 0][i32 %0];
    i32 %2 = load i32* %1;
    i32 %3 = add i32 %2, i32 1;
    store i32* %1 with i32 %3;
    i32 %4 = add i32 %arg2, i32 1;
    store i32* %arg4 with i32 %4;
    i1 %5 = scmp lt i32 %4, i32 %arg12;
    cbr i1 %5, [ ^while.body [16 * i32]* %arg6, i32* %arg5, [16 * i32]* %arg3, [16 * i32]* %arg, i32* %arg8, i32** %arg7, i32* %arg4, i32* %arg1, i32 %arg9, i32* %arg10, i32 %arg11, i32 %arg12, i32 %4 ], [ ^b1 i32* %arg8, i32** %arg7, i32* %arg4, [16 * i32]* %arg, [16 * i32]* %arg6, i32* %arg5, [16 * i32]* %arg3, i32* %arg1, i32 %arg9, i32* %arg10, i32 %arg11 ];
^b3([16 * i32]* %arg, [16 * i32]* %arg1, i32* %arg2, i32* %arg3, i32** %arg4, [16 * i32]* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32* %arg9, i32 %arg10):
    store i32* %arg6 with i32 0;
    ubr [ ^while.header [16 * i32]* %arg5, i32** %arg4, i32* %arg3, i32* %arg2, [16 * i32]* %arg1, [16 * i32]* %arg, i32* %arg6, i32 0, i32* %arg7, i32 %arg8, i32* %arg9, i32 %arg10, i32 0 ];
^while.header([16 * i32]* %arg, i32** %arg1, i32* %arg2, i32* %arg3, [16 * i32]* %arg4, [16 * i32]* %arg5, i32* %arg6, i32 %arg7, i32* %arg8, i32 %arg9, i32* %arg10, i32 %arg11, i32 %arg12):
    i32* %0 = getelementptr &([16 * i32]* %arg5)[i32 0][i32 %arg7];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &([16 * i32]* %arg4)[i32 0][i32 %arg7];
    i32 %3 = load i32* %2;
    i1 %4 = scmp lt i32 %1, i32 %3;
    cbr i1 %4, [ ^while.body3 [16 * i32]* %arg, i32* %arg2, i32* %arg3, [16 * i32]* %arg4, i32** %arg1, [16 * i32]* %arg5, i32* %arg6, i32* %arg8, i32 %arg9, i32* %arg10, i32 %arg12 ], [ ^b4 [16 * i32]* %arg5, [16 * i32]* %arg4, i32* %arg3, i32* %arg2, i32** %arg1, [16 * i32]* %arg, i32* %arg6, i32* %arg8, i32 %arg9, i32* %arg10, i32 %arg11, i32 %arg12 ];
^while.body3([16 * i32]* %arg, i32* %arg1, i32* %arg2, [16 * i32]* %arg3, i32** %arg4, [16 * i32]* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32* %arg9, i32 %arg10):
    i32* %v = alloc i32;
    i32* %0 = getelementptr &([16 * i32]* %arg5)[i32 0][i32 %arg10];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &(i32* %arg9)[i32 %1];
    i32 %3 = load i32* %2;
    store i32* %v with i32 %3;
    ubr [ ^entry1 i32 %3, i32 %arg8, i32 %arg10, [16 * i32]* %arg, i32* %arg7, i32* %arg2, [16 * i32]* %arg3, i32* %arg6, i32** %arg4, [16 * i32]* %arg5, i32* %arg1, i32* %v, i32 %arg8, i32* %arg9, i32 %arg10, i32 %3 ];
^b4([16 * i32]* %arg, [16 * i32]* %arg1, i32* %arg2, i32* %arg3, i32** %arg4, [16 * i32]* %arg5, i32* %arg6, i32* %arg7, i32 %arg8, i32* %arg9, i32 %arg10, i32 %arg11):
    i32 %0 = add i32 %arg11, i32 1;
    store i32* %arg6 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 16;
    cbr i1 %1, [ ^while.header [16 * i32]* %arg5, i32** %arg4, i32* %arg3, i32* %arg2, [16 * i32]* %arg1, [16 * i32]* %arg, i32* %arg6, i32 %0, i32* %arg7, i32 %arg8, i32* %arg9, i32 %arg10, i32 %0 ], [ ^b5 i32** %arg4, i32* %arg3, [16 * i32]* %arg5, [16 * i32]* %arg, [16 * i32]* %arg1, i32* %arg6, i32* %arg7, i32 %arg8, i32* %arg9, i32 %arg10 ];
^b5(i32** %arg, i32* %arg1, [16 * i32]* %arg2, [16 * i32]* %arg3, [16 * i32]* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32* %arg8, i32 %arg9):
    free i32* %arg5;
    i32* %i = alloc i32;
    i32* %0 = getelementptr &([16 * i32]* %arg3)[i32 0][i32 0];
    store i32* %0 with i32 %arg9;
    i32* %1 = getelementptr &([16 * i32]* %arg4)[i32 0][i32 0];
    i32* %2 = getelementptr &([16 * i32]* %arg2)[i32 0][i32 0];
    i32 %3 = load i32* %2;
    i32 %4 = add i32 %arg9, i32 %3;
    store i32* %1 with i32 %4;
    store i32* %i with i32 0;
    ubr [ ^while.body5 [16 * i32]* %arg3, [16 * i32]* %arg4, [16 * i32]* %arg2, i32** %arg, i32* %arg1, i32* %i, i32* %arg6, i32 %arg7, i32* %arg8, i32 0 ];
^entry1(i32 %arg, i32 %arg1, i32 %arg2, [16 * i32]* %arg3, i32* %arg4, i32* %arg5, [16 * i32]* %arg6, i32* %arg7, i32** %arg8, [16 * i32]* %arg9, i32* %arg10, i32* %arg11, i32 %arg12, i32* %arg13, i32 %arg14, i32 %arg15):
    i32* %num = alloc i32;
    store i32* %num with i32 %arg;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    i1 %0 = scmp lt i32 0, i32 %arg1;
    cbr i1 %0, [ ^while.body4 i32* %i, i32* %num, i32 %arg2, [16 * i32]* %arg3, i32* %arg4, i32* %arg5, [16 * i32]* %arg6, i32* %arg7, i32** %arg8, [16 * i32]* %arg9, i32* %arg10, i32* %arg11, i32 %arg12, i32* %arg13, i32 %arg14, i32 %arg15, i32 %arg, i32 %arg1, i32 0 ], [ ^b6 i32 %arg2, [16 * i32]* %arg3, i32* %arg4, i32* %arg5, [16 * i32]* %arg6, i32* %arg7, i32** %arg8, [16 * i32]* %arg9, i32* %arg10, i32* %arg11, i32 %arg12, i32* %arg13, i32 %arg14, i32 %arg15, i32 %arg ];
^while.body4(i32* %arg, i32* %arg1, i32 %arg2, [16 * i32]* %arg3, i32* %arg4, i32* %arg5, [16 * i32]* %arg6, i32* %arg7, i32** %arg8, [16 * i32]* %arg9, i32* %arg10, i32* %arg11, i32 %arg12, i32* %arg13, i32 %arg14, i32 %arg15, i32 %arg16, i32 %arg17, i32 %arg18):
    i32 %0 = sdiv i32 %arg16, i32 16;
    store i32* %arg1 with i32 %0;
    i32 %1 = add i32 %arg18, i32 1;
    store i32* %arg with i32 %1;
    i1 %2 = scmp lt i32 %1, i32 %arg17;
    cbr i1 %2, [ ^while.body4 i32* %arg, i32* %arg1, i32 %arg2, [16 * i32]* %arg3, i32* %arg4, i32* %arg5, [16 * i32]* %arg6, i32* %arg7, i32** %arg8, [16 * i32]* %arg9, i32* %arg10, i32* %arg11, i32 %arg12, i32* %arg13, i32 %arg14, i32 %arg15, i32 %0, i32 %arg17, i32 %1 ], [ ^b6 i32 %arg2, [16 * i32]* %arg3, i32* %arg4, i32* %arg5, [16 * i32]* %arg6, i32* %arg7, i32** %arg8, [16 * i32]* %arg9, i32* %arg10, i32* %arg11, i32 %arg12, i32* %arg13, i32 %arg14, i32 %arg15, i32 %0 ];
^b6(i32 %arg, [16 * i32]* %arg1, i32* %arg2, i32* %arg3, [16 * i32]* %arg4, i32* %arg5, i32** %arg6, [16 * i32]* %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32* %arg11, i32 %arg12, i32 %arg13, i32 %arg14):
    i32 %0 = srem i32 %arg14, i32 16;
    i1 %1 = scmp neq i32 %0, i32 %arg;
    cbr i1 %1, [ ^while.body6 [16 * i32]* %arg1, i32* %arg3, [16 * i32]* %arg4, i32* %arg5, i32** %arg6, [16 * i32]* %arg7, i32* %arg8, i32* %arg9, i32* %arg2, i32 %arg10, i32* %arg11, i32 %arg13 ], [ ^b7 [16 * i32]* %arg1, i32* %arg8, i32* %arg3, [16 * i32]* %arg4, i32* %arg9, i32** %arg6, [16 * i32]* %arg7, i32* %arg5, i32* %arg2, i32* %arg11, i32 %arg12, i32 %arg13 ];
^while.body5([16 * i32]* %arg, [16 * i32]* %arg1, [16 * i32]* %arg2, i32** %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32* %arg8, i32 %arg9):
    i1 %0 = scmp gt i32 %arg9, i32 0;
    cbr i1 %0, [ ^indirect1 i32* %arg4, i32** %arg3, [16 * i32]* %arg2, [16 * i32]* %arg1, [16 * i32]* %arg, i32* %arg5, i32 %arg9, i32 %arg9, i32* %arg6, i32 %arg7, i32* %arg8 ], [ ^b8 [16 * i32]* %arg2, [16 * i32]* %arg1, [16 * i32]* %arg, i32* %arg5, i32** %arg3, i32* %arg4, i32 %arg9, i32* %arg6, i32 %arg7, i32* %arg8 ];
^indirect1(i32* %arg, i32** %arg1, [16 * i32]* %arg2, [16 * i32]* %arg3, [16 * i32]* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32* %arg8, i32 %arg9, i32* %arg10):
    i32* %0 = getelementptr &([16 * i32]* %arg4)[i32 0][i32 %arg6];
    i32 %1 = sub i32 %arg6, i32 1;
    i32* %2 = getelementptr &([16 * i32]* %arg3)[i32 0][i32 %1];
    i32 %3 = load i32* %2;
    store i32* %0 with i32 %3;
    i32* %4 = getelementptr &([16 * i32]* %arg3)[i32 0][i32 %arg6];
    i32* %5 = getelementptr &([16 * i32]* %arg2)[i32 0][i32 %arg6];
    i32 %6 = load i32* %5;
    i32 %7 = add i32 %3, i32 %6;
    store i32* %4 with i32 %7;
    ubr [ ^b8 [16 * i32]* %arg2, [16 * i32]* %arg3, [16 * i32]* %arg4, i32* %arg5, i32** %arg1, i32* %arg, i32 %arg7, i32* %arg8, i32 %arg9, i32* %arg10 ];
^b7([16 * i32]* %arg, i32* %arg1, i32* %arg2, [16 * i32]* %arg3, i32* %arg4, i32** %arg5, [16 * i32]* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32 %arg10, i32 %arg11):
    i32* %0 = getelementptr &([16 * i32]* %arg6)[i32 0][i32 %arg10];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &(i32* %arg9)[i32 %1];
    store i32* %2 with i32 %arg11;
    i32 %3 = load i32* %arg7;
    i32 %4 = load i32* %arg2;
    i32* %5 = load i32** %arg5;
    i32 %6 = load i32* %arg1;
    i32 %7 = add i32 %1, i32 1;
    store i32* %0 with i32 %7;
    free i32* %arg4;
    ubr [ ^while.header [16 * i32]* %arg, i32** %arg5, i32* %arg1, i32* %arg2, [16 * i32]* %arg3, [16 * i32]* %arg6, i32* %arg7, i32 %arg10, i32* %arg8, i32 %6, i32* %5, i32 %4, i32 %3 ];
^while.body6([16 * i32]* %arg, i32* %arg1, [16 * i32]* %arg2, i32* %arg3, i32** %arg4, [16 * i32]* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32 %arg9, i32* %arg10, i32 %arg11):
    i32* %num = alloc i32;
    store i32* %num with i32 %arg11;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    i1 %0 = scmp lt i32 0, i32 %arg9;
    cbr i1 %0, [ ^while.body7 i32* %i, i32* %num, [16 * i32]* %arg5, i32* %arg8, i32** %arg4, i32* %arg7, i32 %arg11, i32* %arg3, [16 * i32]* %arg, i32* %arg1, [16 * i32]* %arg2, i32* %arg6, i32 %arg9, i32* %arg10, i32 %arg11, i32 %arg9, i32 0 ], [ ^b9 [16 * i32]* %arg5, i32* %arg8, i32** %arg4, i32* %arg7, i32 %arg11, i32* %arg3, [16 * i32]* %arg, i32* %arg1, [16 * i32]* %arg2, i32* %arg6, i32 %arg9, i32* %arg10, i32 %arg11 ];
^b8([16 * i32]* %arg, [16 * i32]* %arg1, [16 * i32]* %arg2, i32* %arg3, i32** %arg4, i32* %arg5, i32 %arg6, i32* %arg7, i32 %arg8, i32* %arg9):
    i32 %0 = sub i32 %arg8, i32 1;
    i32* %1 = getelementptr &([16 * i32]* %arg2)[i32 0][i32 %arg6];
    i32 %2 = load i32* %1;
    i32* %3 = getelementptr &([16 * i32]* %arg1)[i32 0][i32 %arg6];
    i32 %4 = load i32* %3;
    call (i32, i32*, i32, i32, i32*) -> void @radixSort(i32 %0, i32* %arg9, i32 %2, i32 %4, i32* %arg7);
    i32 %5 = load i32* %arg3;
    i32* %6 = load i32** %arg4;
    i32 %7 = load i32* %arg5;
    i32 %8 = add i32 %5, i32 1;
    store i32* %arg3 with i32 %8;
    i1 %9 = scmp lt i32 %8, i32 16;
    cbr i1 %9, [ ^while.body5 [16 * i32]* %arg2, [16 * i32]* %arg1, [16 * i32]* %arg, i32** %arg4, i32* %arg5, i32* %arg3, i32* %arg7, i32 %7, i32* %6, i32 %8 ], [ ^b10 i32* %arg3 ];
^b9([16 * i32]* %arg, i32* %arg1, i32** %arg2, i32* %arg3, i32 %arg4, i32* %arg5, [16 * i32]* %arg6, i32* %arg7, [16 * i32]* %arg8, i32* %arg9, i32 %arg10, i32* %arg11, i32 %arg12):
    i32 %0 = srem i32 %arg12, i32 16;
    i32* %1 = getelementptr &([16 * i32]* %arg)[i32 0][i32 %0];
    i32 %2 = load i32* %1;
    i32* %3 = getelementptr &(i32* %arg11)[i32 %2];
    i32 %4 = load i32* %3;
    store i32* %arg3 with i32 %4;
    store i32* %3 with i32 %arg4;
    i32 %5 = load i32* %arg5;
    i32* %6 = load i32** %arg2;
    i32 %7 = load i32* %arg9;
    i32 %8 = add i32 %2, i32 1;
    store i32* %1 with i32 %8;
    ubr [ ^entry1 i32 %4, i32 %arg10, i32 %5, [16 * i32]* %arg6, i32* %arg1, i32* %arg7, [16 * i32]* %arg8, i32* %arg5, i32** %arg2, [16 * i32]* %arg, i32* %arg9, i32* %arg3, i32 %7, i32* %6, i32 %5, i32 %4 ];
^while.body7(i32* %arg, i32* %arg1, [16 * i32]* %arg2, i32* %arg3, i32** %arg4, i32* %arg5, i32 %arg6, i32* %arg7, [16 * i32]* %arg8, i32* %arg9, [16 * i32]* %arg10, i32* %arg11, i32 %arg12, i32* %arg13, i32 %arg14, i32 %arg15, i32 %arg16):
    i32 %0 = sdiv i32 %arg14, i32 16;
    store i32* %arg1 with i32 %0;
    i32 %1 = add i32 %arg16, i32 1;
    store i32* %arg with i32 %1;
    i1 %2 = scmp lt i32 %1, i32 %arg15;
    cbr i1 %2, [ ^while.body7 i32* %arg, i32* %arg1, [16 * i32]* %arg2, i32* %arg3, i32** %arg4, i32* %arg5, i32 %arg6, i32* %arg7, [16 * i32]* %arg8, i32* %arg9, [16 * i32]* %arg10, i32* %arg11, i32 %arg12, i32* %arg13, i32 %0, i32 %arg15, i32 %1 ], [ ^b9 [16 * i32]* %arg2, i32* %arg3, i32** %arg4, i32* %arg5, i32 %arg6, i32* %arg7, [16 * i32]* %arg8, i32* %arg9, [16 * i32]* %arg10, i32* %arg11, i32 %arg12, i32* %arg13, i32 %0 ];
^b10(i32* %arg):
    free i32* %arg;
    ret;
}
internal [30000010 * i32]* @a;
func @main() -> i32 { NoRecurse } {
^entry():
    i32* %ans = alloc i32;
    i32* %n = alloc i32;
    i32* %0 = getelementptr &([30000010 * i32]* @a)[i32 0][i32 0];
    i32 %1 = call (i32*) -> i32 @getarray(i32* %0);
    store i32* %n with i32 %1;
    call (i32) -> void @starttime(i32 90);
    call (i32, i32*, i32, i32, i32*) -> void @radixSort(i32 8, i32* %0, i32 0, i32 %1, i32* %ans);
    i32 %2 = load i32* %n;
    i32 %3 = load i32* %ans;
    i1 %4 = scmp lt i32 0, i32 %2;
    cbr i1 %4, [ ^while.body i32 %3, i32 %2, i32 0 ], [ ^b i32 %3 ];
^while.body(i32 %arg, i32 %arg1, i32 %arg2):
    i32* %0 = getelementptr &([30000010 * i32]* @a)[i32 0][i32 %arg2];
    i32 %1 = load i32* %0;
    i32 %2 = add i32 %arg2, i32 2;
    i32 %3 = srem i32 %1, i32 %2;
    i32 %4 = mul i32 %arg2, i32 %3;
    i32 %5 = add i32 %arg, i32 %4;
    i32 %6 = add i32 %arg2, i32 1;
    i1 %7 = scmp lt i32 %6, i32 %arg1;
    cbr i1 %7, [ ^while.body i32 %5, i32 %arg1, i32 %6 ], [ ^b i32 %5 ];
^b(i32 %arg):
    i1 %0 = scmp lt i32 %arg, i32 0;
    cbr i1 %0, [ ^indirect i32 %arg ], [ ^b1 i32 %arg ];
^indirect(i32 %arg):
    i32 %0 = neg i32 %arg;
    call (i32) -> void @stoptime(i32 102);
    call (i32) -> void @putint(i32 %0);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
^b1(i32 %arg):
    call (i32) -> void @stoptime(i32 102);
    call (i32) -> void @putint(i32 %arg);
    call (i32) -> void @putch(i32 10);
    ret i32 0;
}
