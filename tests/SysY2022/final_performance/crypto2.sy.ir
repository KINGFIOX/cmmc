internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray(i32, i32*) -> void { NoMemoryWrite };
internal func @starttime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @cmmc::Intrinsic::memset(i8*, i32, i32) -> i8* { NoMemoryRead };
internal [32768 * i32]* @buffer = [0];
func @main() -> i32 { NoRecurse Entry } {
^entry():
    i32* %state = alloc i32;
    i32* %rounds = alloc i32;
    [5 * i32]* %output = alloc [5 * i32];
    i32* %0 = getelementptr &([5 * i32]* %output)[i32 0][i32 0];
    store i32* %0 with i32 0;
    i32* %1 = getelementptr &([5 * i32]* %output)[i32 0][i32 1];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([5 * i32]* %output)[i32 0][i32 2];
    store i32* %2 with i32 0;
    i32* %3 = getelementptr &([5 * i32]* %output)[i32 0][i32 3];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([5 * i32]* %output)[i32 0][i32 4];
    store i32* %4 with i32 0;
    [5 * i32]* %output_buf = alloc [5 * i32];
    i32 %5 = call () -> i32 @getint();
    i32 %6 = call () -> i32 @getint();
    store i32* %rounds with i32 %6;
    call (i32) -> void @starttime(i32 161);
    i32* %7 = getelementptr &([5 * i32]* %output_buf)[i32 0][i32 0];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([5 * i32]* %output_buf)[i32 0][i32 1];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([5 * i32]* %output_buf)[i32 0][i32 2];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([5 * i32]* %output_buf)[i32 0][i32 3];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([5 * i32]* %output_buf)[i32 0][i32 4];
    store i32* %11 with i32 0;
    i1 %12 = scmp gt i32 %6, i32 0;
    cbr i1 %12, [ ^while.body [5 * i32]* %output_buf, i32* %rounds, [5 * i32]* %output, i32* %7, i32* %0, i32* %state, i32 %5 ], [ ^b i32* %7 ];
^while.body([5 * i32]* %arg, i32* %arg1, [5 * i32]* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6):
    i32* %i = alloc i32;
    ubr [ ^while.body1 [5 * i32]* %arg, i32* %arg1, [5 * i32]* %arg2, i32* %i, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 0 ];
^b(i32* %arg):
    call (i32) -> void @stoptime(i32 184);
    call (i32, i32*) -> void @putarray(i32 5, i32* %arg);
    ret i32 0;
^while.body1([5 * i32]* %arg, i32* %arg1, [5 * i32]* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8):
    i32* %0 = getelementptr &([32768 * i32]* @buffer)[i32 0][i32 %arg8];
    i32 %1 = mul i32 8193, i32 %arg7;
    i32 %2 = sdiv i32 %1, i32 131072;
    i32 %3 = add i32 %1, i32 %2;
    i32 %4 = mul i32 33, i32 %3;
    store i32* %arg6 with i32 %4;
    i32 %5 = srem i32 %4, i32 256;
    store i32* %0 with i32 %5;
    i32 %6 = add i32 %arg8, i32 1;
    store i32* %arg3 with i32 %6;
    i1 %7 = scmp lt i32 %6, i32 32000;
    cbr i1 %7, [ ^while.body1 [5 * i32]* %arg, i32* %arg1, [5 * i32]* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %4, i32 %6 ], [ ^b1 [5 * i32]* %arg, i32* %arg1, [5 * i32]* %arg2, i32* %arg4, i32* %arg5, i32* %arg6 ];
^b1([5 * i32]* %arg, i32* %arg1, [5 * i32]* %arg2, i32* %arg3, i32* %arg4, i32* %arg5):
    i32* %0 = getelementptr &([32768 * i32]* @buffer)[i32 0][i32 0];
    i32** %input = alloc i32*;
    store i32** %input with i32* %0;
    i32* %input_len = alloc i32;
    i32** %output = alloc i32*;
    store i32** %output with i32* %arg4;
    i32* %h0 = alloc i32;
    store i32* %h0 with i32 1732584193;
    i32* %h1 = alloc i32;
    store i32* %h1 with i32 -271733879;
    i32* %h2 = alloc i32;
    store i32* %h2 with i32 -1732584194;
    i32* %h3 = alloc i32;
    store i32* %h3 with i32 271733878;
    i32* %h4 = alloc i32;
    store i32* %h4 with i32 -1009589776;
    i32* %a = alloc i32;
    i32* %b = alloc i32;
    i32* %c = alloc i32;
    i32* %d = alloc i32;
    i32* %e = alloc i32;
    i32* %f = alloc i32;
    i32* %k = alloc i32;
    i32* %orig_len = alloc i32;
    store i32* %orig_len with i32 32000;
    i32* %1 = getelementptr &([32768 * i32]* @buffer)[i32 0][i32 32000];
    store i32* %1 with i32 128;
    ubr [ ^while.body2 i32* %h4, i32* %k, i32* %a, i32* %input_len, i32* %orig_len, i32** %input, i32* %f, i32* %h3, i32* %h2, i32* %h1, i32** %output, i32* %d, i32* %e, i32* %c, i32* %b, i32* %h0, [5 * i32]* %arg, i32* %arg1, [5 * i32]* %arg2, i32* %arg4, i32* %arg3, i32* %arg5, i32 32001, i32 32000 ];
^while.body2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32** %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32** %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, [5 * i32]* %arg16, i32* %arg17, [5 * i32]* %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32 %arg22, i32 %arg23):
    i32* %0 = getelementptr &([32768 * i32]* @buffer)[i32 0][i32 %arg22];
    store i32* %0 with i32 0;
    i32 %1 = add i32 %arg22, i32 1;
    i32 %2 = srem i32 %1, i32 64;
    i1 %3 = scmp neq i32 %2, i32 60;
    cbr i1 %3, [ ^indirect i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32** %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32** %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, [5 * i32]* %arg16, i32* %arg17, [5 * i32]* %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32 %1 ], [ ^b2 i32* %arg11, i32* %arg7, i32* %arg8, i32* %arg3, i32** %arg5, i32* %arg6, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32* %arg2, i32* %arg, i32* %arg1, i32** %arg10, i32* %arg9, [5 * i32]* %arg16, i32* %arg17, [5 * i32]* %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32 %1, i32 %arg23 ];
^indirect(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32** %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32** %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, [5 * i32]* %arg16, i32* %arg17, [5 * i32]* %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32 %arg22):
    i32 %0 = load i32* %arg4;
    ubr [ ^while.body2 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32** %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32** %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, [5 * i32]* %arg16, i32* %arg17, [5 * i32]* %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32 %arg22, i32 %0 ];
^b2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32** %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32** %arg13, i32* %arg14, [5 * i32]* %arg15, i32* %arg16, [5 * i32]* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32 %arg21, i32 %arg22):
    i32* %0 = getelementptr &([32768 * i32]* @buffer)[i32 0][i32 %arg21];
    i32 %1 = sdiv i32 %arg22, i32 16777216;
    i32 %2 = srem i32 %1, i32 256;
    store i32* %0 with i32 %2;
    i32 %3 = add i32 %arg21, i32 1;
    i32* %4 = getelementptr &([32768 * i32]* @buffer)[i32 0][i32 %3];
    i32 %5 = sdiv i32 %arg22, i32 65536;
    i32 %6 = srem i32 %5, i32 256;
    store i32* %4 with i32 %6;
    i32 %7 = add i32 %arg21, i32 2;
    i32* %8 = getelementptr &([32768 * i32]* @buffer)[i32 0][i32 %7];
    i32 %9 = sdiv i32 %arg22, i32 256;
    i32 %10 = srem i32 %9, i32 256;
    store i32* %8 with i32 %10;
    i32 %11 = add i32 %arg21, i32 3;
    i32* %12 = getelementptr &([32768 * i32]* @buffer)[i32 0][i32 %11];
    i32 %13 = srem i32 %arg22, i32 256;
    store i32* %12 with i32 %13;
    i32 %14 = add i32 %arg21, i32 4;
    store i32* %arg3 with i32 %14;
    i32* %chunk_start = alloc i32;
    store i32* %chunk_start with i32 0;
    [80 * i32]* %words = alloc [80 * i32];
    i32* %15 = getelementptr &([80 * i32]* %words)[i32 0][i32 0];
    i8* %16 = ptrcast i32* %15 to i8*;
    i8* %17 = call (i8*, i32, i32) -> i8* @cmmc::Intrinsic::memset(i8* %16, i32 0, i32 320);
    i32 %18 = load i32* %chunk_start;
    i32 %19 = load i32* %arg12;
    i32 %20 = load i32* %arg5;
    i32 %21 = load i32* %arg11;
    i32 %22 = load i32* %arg1;
    i32 %23 = load i32* %arg2;
    i32 %24 = load i32* %arg14;
    i32 %25 = load i32* %arg9;
    i32* %26 = load i32** %arg13;
    i32 %27 = load i32* %arg3;
    i32* %28 = load i32** %arg4;
    i1 %29 = scmp lt i32 %18, i32 %27;
    cbr i1 %29, [ ^while.body3 [80 * i32]* %words, i32* %chunk_start, i32* %arg9, i32* %arg10, i32* %arg12, i32* %arg11, i32* %arg14, i32* %arg2, i32* %arg1, i32* %arg8, i32* %arg7, i32* %arg, i32* %arg6, i32* %arg5, [5 * i32]* %arg15, i32* %arg16, [5 * i32]* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32* %28, i32 %27, i32* %26, i32 %25, i32 %24, i32 %23, i32 %22, i32 %21, i32 %20, i32 %19, i32 %18 ], [ ^b3 i32* %arg14, i32* %arg2, i32* %arg1, i32* %arg11, [5 * i32]* %arg15, i32* %arg16, [5 * i32]* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32* %26, i32 %25 ];
^while.body3([80 * i32]* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, [5 * i32]* %arg14, i32* %arg15, [5 * i32]* %arg16, i32* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32 %arg21, i32* %arg22, i32 %arg23, i32 %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28, i32 %arg29, i32 %arg30):
    store i32* %arg3 with i32 %arg23;
    store i32* %arg9 with i32 %arg24;
    store i32* %arg10 with i32 %arg25;
    store i32* %arg11 with i32 %arg26;
    store i32* %arg12 with i32 %arg27;
    i32* %i = alloc i32;
    store i32* %i with i32 0;
    ubr [ ^while.body4 i32* %arg8, i32* %arg7, i32* %arg4, i32* %arg5, i32* %i, [80 * i32]* %arg, i32* %arg9, i32* %arg1, i32* %arg10, i32* %arg13, i32* %arg2, i32* %arg6, i32* %arg3, i32* %arg11, i32* %arg12, [5 * i32]* %arg14, i32* %arg15, [5 * i32]* %arg16, i32* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32 %arg21, i32* %arg22, i32 %arg23, i32 %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg23, i32 %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28, i32 %arg29, i32 %arg30, i32 0 ];
^b3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [5 * i32]* %arg4, i32* %arg5, [5 * i32]* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32 %arg11):
    store i32* %arg10 with i32 %arg11;
    i32 %0 = load i32* %arg;
    i32* %1 = getelementptr &(i32* %arg10)[i32 1];
    store i32* %1 with i32 %0;
    i32 %2 = load i32* %arg1;
    i32* %3 = getelementptr &(i32* %arg10)[i32 2];
    store i32* %3 with i32 %2;
    i32 %4 = load i32* %arg2;
    i32* %5 = getelementptr &(i32* %arg10)[i32 3];
    store i32* %5 with i32 %4;
    i32 %6 = load i32* %arg3;
    i32* %7 = getelementptr &(i32* %arg10)[i32 4];
    store i32* %7 with i32 %6;
    i32 %8 = load i32* %arg5;
    i32 %9 = load i32* %arg9;
    ubr [ ^while.body5 i32* %arg5, [5 * i32]* %arg6, [5 * i32]* %arg4, i32* %arg7, i32* %arg8, i32* %arg9, i32 %9, i32 %8, i32 0 ];
^while.body4(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [80 * i32]* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, [5 * i32]* %arg15, i32* %arg16, [5 * i32]* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32 %arg22, i32* %arg23, i32 %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28, i32 %arg29, i32 %arg30, i32 %arg31, i32 %arg32, i32 %arg33, i32 %arg34, i32 %arg35, i32 %arg36, i32 %arg37):
    i32* %0 = getelementptr &([80 * i32]* %arg5)[i32 0][i32 %arg37];
    i32 %1 = mul i32 %arg37, i32 4;
    i32 %2 = add i32 %arg36, i32 %1;
    i32* %3 = getelementptr &(i32* %arg21)[i32 %2];
    i32 %4 = load i32* %3;
    i32 %5 = mul i32 %4, i32 16777216;
    i32 %6 = add i32 %2, i32 1;
    i32* %7 = getelementptr &(i32* %arg21)[i32 %6];
    i32 %8 = load i32* %7;
    i32 %9 = mul i32 %8, i32 65536;
    i32 %10 = add i32 %5, i32 %9;
    i32 %11 = add i32 %2, i32 2;
    i32* %12 = getelementptr &(i32* %arg21)[i32 %11];
    i32 %13 = load i32* %12;
    i32 %14 = mul i32 %13, i32 256;
    i32 %15 = add i32 %10, i32 %14;
    i32 %16 = add i32 %2, i32 3;
    i32* %17 = getelementptr &(i32* %arg21)[i32 %16];
    i32 %18 = load i32* %17;
    i32 %19 = add i32 %15, i32 %18;
    store i32* %0 with i32 %19;
    i32 %20 = add i32 %arg37, i32 1;
    store i32* %arg4 with i32 %20;
    i1 %21 = scmp lt i32 %20, i32 16;
    cbr i1 %21, [ ^while.body4 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [80 * i32]* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, [5 * i32]* %arg15, i32* %arg16, [5 * i32]* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32 %arg22, i32* %arg23, i32 %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28, i32 %arg29, i32 %arg30, i32 %arg31, i32 %arg32, i32 %arg33, i32 %arg34, i32 %arg35, i32 %arg36, i32 %20 ], [ ^indirect1 i32* %arg14, i32* %arg2, i32* %arg3, i32* %arg4, [80 * i32]* %arg5, i32* %arg6, i32* %arg1, i32* %arg, i32* %arg11, i32* %arg10, i32* %arg8, i32* %arg7, i32* %arg13, i32* %arg9, i32* %arg12, [5 * i32]* %arg15, i32* %arg16, [5 * i32]* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32 %arg22, i32* %arg23, i32 %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28, i32 %arg29, i32 %arg30, i32 %arg31, i32 %arg32, i32 %arg33, i32 %arg34, i32 %arg35, i32 %arg36, i32 %20 ];
^while.body5(i32* %arg, [5 * i32]* %arg1, [5 * i32]* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8):
    i32* %0 = getelementptr &([5 * i32]* %arg2)[i32 0][i32 %arg8];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &([5 * i32]* %arg1)[i32 0][i32 %arg8];
    i32 %3 = load i32* %2;
    i32 %4 = add i32 %1, i32 %3;
    i32 %5 = sub i32 %1, i32 %4;
    i32 %6 = add i32 %5, i32 %3;
    i32 %7 = sub i32 %6, i32 %4;
    store i32* %0 with i32 %7;
    i32 %8 = add i32 %arg8, i32 1;
    i1 %9 = scmp lt i32 %8, i32 5;
    cbr i1 %9, [ ^while.body5 i32* %arg, [5 * i32]* %arg1, [5 * i32]* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %8 ], [ ^b4 [5 * i32]* %arg2, [5 * i32]* %arg1, i32* %arg, i32* %arg4, i32* %arg3, i32* %arg5, i32 %arg6, i32 %arg7 ];
^indirect1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [80 * i32]* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, [5 * i32]* %arg15, i32* %arg16, [5 * i32]* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32 %arg22, i32* %arg23, i32 %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28, i32 %arg29, i32 %arg30, i32 %arg31, i32 %arg32, i32 %arg33, i32 %arg34, i32 %arg35, i32 %arg36, i32 %arg37):
    i1 %0 = scmp lt i32 %arg37, i32 80;
    cbr i1 %0, [ ^while.body6 i32* %arg14, i32* %arg13, i32* %arg12, i32* %arg3, [80 * i32]* %arg4, i32* %arg5, i32* %arg, i32* %arg1, i32* %arg2, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, [5 * i32]* %arg15, i32* %arg16, [5 * i32]* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32 %arg22, i32* %arg23, i32 %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28, i32 %arg29, i32 %arg30, i32 %arg31, i32 %arg32, i32 %arg33, i32 %arg34, i32 %arg35, i32 %arg36, i32 %arg37 ], [ ^while.body7 i32* %arg7, i32* %arg6, i32* %arg3, i32* %arg14, i32* %arg, i32* %arg2, i32* %arg1, i32* %arg13, i32* %arg12, i32* %arg10, i32* %arg11, [80 * i32]* %arg4, i32* %arg5, i32* %arg8, i32* %arg9, i32* %arg20, i32* %arg19, i32* %arg18, [5 * i32]* %arg17, i32* %arg16, [5 * i32]* %arg15, i32* %arg21, i32 %arg22, i32* %arg23, i32 %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28, i32 %arg29, i32 %arg30, i32 %arg31, i32 %arg32, i32 %arg33, i32 %arg34, i32 %arg35, i32 %arg36, i32 0 ];
^b4([5 * i32]* %arg, [5 * i32]* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6, i32 %arg7):
    i32 %0 = sub i32 %arg7, i32 1;
    store i32* %arg2 with i32 %0;
    i1 %1 = scmp gt i32 %0, i32 0;
    cbr i1 %1, [ ^while.body [5 * i32]* %arg, i32* %arg2, [5 * i32]* %arg1, i32* %arg3, i32* %arg4, i32* %arg5, i32 %arg6 ], [ ^b i32* %arg3 ];
^while.body6(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [80 * i32]* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, [5 * i32]* %arg15, i32* %arg16, [5 * i32]* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32 %arg22, i32* %arg23, i32 %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28, i32 %arg29, i32 %arg30, i32 %arg31, i32 %arg32, i32 %arg33, i32 %arg34, i32 %arg35, i32 %arg36, i32 %arg37):
    i32* %0 = getelementptr &([80 * i32]* %arg4)[i32 0][i32 %arg37];
    i32 %1 = sub i32 %arg37, i32 3;
    i32* %2 = getelementptr &([80 * i32]* %arg4)[i32 0][i32 %1];
    i32 %3 = load i32* %2;
    i32 %4 = sub i32 %arg37, i32 8;
    i32* %5 = getelementptr &([80 * i32]* %arg4)[i32 0][i32 %4];
    i32 %6 = load i32* %5;
    i32 %7 = add i32 %3, i32 %6;
    i32 %8 = sub i32 %3, i32 %7;
    i32 %9 = add i32 %8, i32 %6;
    i32 %10 = sub i32 %9, i32 %7;
    i32 %11 = sub i32 %arg37, i32 14;
    i32* %12 = getelementptr &([80 * i32]* %arg4)[i32 0][i32 %11];
    i32 %13 = load i32* %12;
    i32 %14 = add i32 %10, i32 %13;
    i32 %15 = sub i32 %10, i32 %14;
    i32 %16 = add i32 %15, i32 %13;
    i32 %17 = sub i32 %16, i32 %14;
    i32 %18 = sub i32 %arg37, i32 16;
    i32* %19 = getelementptr &([80 * i32]* %arg4)[i32 0][i32 %18];
    i32 %20 = load i32* %19;
    i32 %21 = add i32 %17, i32 %20;
    i32 %22 = sub i32 %17, i32 %21;
    i32 %23 = add i32 %22, i32 %20;
    i32 %24 = sub i32 %23, i32 %21;
    i32 %25 = mul i32 %24, i32 2;
    i32 %26 = srem i32 %24, i32 2;
    i32 %27 = add i32 %25, i32 %26;
    store i32* %0 with i32 %27;
    i32 %28 = add i32 %arg37, i32 1;
    i1 %29 = scmp lt i32 %28, i32 80;
    cbr i1 %29, [ ^while.body6 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [80 * i32]* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, [5 * i32]* %arg15, i32* %arg16, [5 * i32]* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32 %arg22, i32* %arg23, i32 %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28, i32 %arg29, i32 %arg30, i32 %arg31, i32 %arg32, i32 %arg33, i32 %arg34, i32 %arg35, i32 %arg36, i32 %28 ], [ ^while.body7 i32* %arg10, i32* %arg9, i32* %arg3, i32* %arg, i32* %arg6, i32* %arg8, i32* %arg7, i32* %arg1, i32* %arg2, i32* %arg13, i32* %arg14, [80 * i32]* %arg4, i32* %arg5, i32* %arg11, i32* %arg12, i32* %arg20, i32* %arg19, i32* %arg18, [5 * i32]* %arg17, i32* %arg16, [5 * i32]* %arg15, i32* %arg21, i32 %arg22, i32* %arg23, i32 %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28, i32 %arg29, i32 %arg30, i32 %arg31, i32 %arg32, i32 %arg33, i32 %arg34, i32 %arg35, i32 %arg36, i32 0 ];
^while.body7(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, [80 * i32]* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17, [5 * i32]* %arg18, i32* %arg19, [5 * i32]* %arg20, i32* %arg21, i32 %arg22, i32* %arg23, i32 %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28, i32 %arg29, i32 %arg30, i32 %arg31, i32 %arg32, i32 %arg33, i32 %arg34, i32 %arg35, i32 %arg36, i32 %arg37):
    i1 %0 = scmp lt i32 %arg37, i32 20;
    cbr i1 %0, [ ^if.then i32* %arg13, i32* %arg14, i32* %arg10, i32* %arg12, [80 * i32]* %arg11, i32* %arg9, i32* %arg8, i32* %arg7, i32* %arg2, i32* %arg4, i32* %arg3, i32* %arg6, i32* %arg5, i32* %arg1, i32* %arg, [5 * i32]* %arg20, i32* %arg19, [5 * i32]* %arg18, i32* %arg17, i32* %arg16, i32* %arg15, i32* %arg21, i32 %arg22, i32* %arg23, i32 %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28, i32 %arg29, i32 %arg30, i32 %arg31, i32 %arg32, i32 %arg33, i32 %arg36, i32 %arg37 ], [ ^indirect2 i32* %arg14, i32* %arg13, i32* %arg2, i32* %arg4, i32* %arg3, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, [80 * i32]* %arg11, i32* %arg12, i32* %arg, i32* %arg1, i32 %arg37, i32* %arg15, i32* %arg16, i32* %arg17, [5 * i32]* %arg18, i32* %arg19, [5 * i32]* %arg20, i32* %arg21, i32 %arg22, i32* %arg23, i32 %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28, i32 %arg29, i32 %arg30, i32 %arg31, i32 %arg32, i32 %arg33, i32 %arg34, i32 %arg35, i32 %arg36, i32 %arg37 ];
^if.then(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [80 * i32]* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, [5 * i32]* %arg15, i32* %arg16, [5 * i32]* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32 %arg22, i32* %arg23, i32 %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28, i32 %arg29, i32 %arg30, i32 %arg31, i32 %arg32, i32 %arg33, i32 %arg34, i32 %arg35):
    i32 %0 = add i32 %arg30, i32 %arg31;
    i32 %1 = sub i32 -1, i32 %arg30;
    i32 %2 = add i32 %1, i32 %arg32;
    i32 %3 = add i32 %0, i32 %2;
    i32 %4 = sub i32 %0, i32 %3;
    i32 %5 = add i32 %4, i32 %2;
    i32 %6 = sub i32 %5, i32 %3;
    i32 %7 = add i32 %6, i32 %3;
    i32 %8 = sub i32 %6, i32 %7;
    i32 %9 = add i32 %8, i32 %3;
    i32 %10 = sub i32 %9, i32 %7;
    store i32* %arg7 with i32 %10;
    store i32* %arg11 with i32 1518500249;
    ubr [ ^b5 i32* %arg13, i32* %arg14, i32* %arg10, i32* %arg7, i32* %arg9, i32* %arg12, i32* %arg11, i32* %arg8, [80 * i32]* %arg4, i32* %arg3, i32* %arg6, i32* %arg5, i32* %arg2, i32* %arg1, i32* %arg, i32 %arg35, i32 %arg30, i32 %arg32, i32 %arg31, i32 1518500249, i32 %10, [5 * i32]* %arg15, i32* %arg16, [5 * i32]* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32 %arg22, i32* %arg23, i32 %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28, i32 %arg29, i32 %arg33, i32 %10, i32 1518500249, i32 %arg34 ];
^indirect2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, [80 * i32]* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32 %arg15, i32* %arg16, i32* %arg17, i32* %arg18, [5 * i32]* %arg19, i32* %arg20, [5 * i32]* %arg21, i32* %arg22, i32 %arg23, i32* %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28, i32 %arg29, i32 %arg30, i32 %arg31, i32 %arg32, i32 %arg33, i32 %arg34, i32 %arg35, i32 %arg36, i32 %arg37, i32 %arg38):
    i1 %0 = scmp lt i32 %arg15, i32 40;
    cbr i1 %0, [ ^if.then1 i32* %arg13, i32* %arg14, i32* %arg12, [80 * i32]* %arg11, i32* %arg9, i32* %arg10, i32* %arg8, i32* %arg7, i32* %arg4, i32* %arg6, i32* %arg5, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg, [5 * i32]* %arg21, i32* %arg20, [5 * i32]* %arg19, i32* %arg18, i32* %arg17, i32* %arg16, i32* %arg22, i32 %arg23, i32* %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28, i32 %arg29, i32 %arg30, i32 %arg31, i32 %arg32, i32 %arg33, i32 %arg34, i32 %arg37, i32 %arg38 ], [ ^if.else i32* %arg14, i32* %arg13, i32* %arg2, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg12, [80 * i32]* %arg11, i32* %arg4, i32* %arg6, i32* %arg5, i32* %arg3, i32* %arg, i32* %arg1, i32* %arg16, i32* %arg17, i32* %arg18, [5 * i32]* %arg19, i32* %arg20, [5 * i32]* %arg21, i32* %arg22, i32 %arg23, i32* %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28, i32 %arg29, i32 %arg30, i32 %arg31, i32 %arg32, i32 %arg33, i32 %arg34, i32 %arg35, i32 %arg36, i32 %arg37, i32 %arg38 ];
^if.then1(i32* %arg, i32* %arg1, i32* %arg2, [80 * i32]* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, [5 * i32]* %arg15, i32* %arg16, [5 * i32]* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32 %arg22, i32* %arg23, i32 %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28, i32 %arg29, i32 %arg30, i32 %arg31, i32 %arg32, i32 %arg33, i32 %arg34, i32 %arg35):
    i32 %0 = add i32 %arg30, i32 %arg31;
    i32 %1 = sub i32 %arg30, i32 %0;
    i32 %2 = add i32 %1, i32 %arg31;
    i32 %3 = sub i32 %2, i32 %0;
    i32 %4 = add i32 %3, i32 %arg32;
    i32 %5 = sub i32 %3, i32 %4;
    i32 %6 = add i32 %5, i32 %arg32;
    i32 %7 = sub i32 %6, i32 %4;
    store i32* %arg7 with i32 %7;
    store i32* %arg9 with i32 1859775361;
    ubr [ ^b5 i32* %arg1, i32* %arg, i32* %arg8, i32* %arg7, i32* %arg11, i32* %arg10, i32* %arg9, i32* %arg12, [80 * i32]* %arg3, i32* %arg2, i32* %arg6, i32* %arg4, i32* %arg5, i32* %arg14, i32* %arg13, i32 %arg35, i32 %arg30, i32 %arg32, i32 %arg31, i32 1859775361, i32 %7, [5 * i32]* %arg15, i32* %arg16, [5 * i32]* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32 %arg22, i32* %arg23, i32 %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28, i32 %arg29, i32 %arg33, i32 %7, i32 1859775361, i32 %arg34 ];
^b5(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, [80 * i32]* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32 %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, [5 * i32]* %arg21, i32* %arg22, [5 * i32]* %arg23, i32* %arg24, i32* %arg25, i32* %arg26, i32* %arg27, i32 %arg28, i32* %arg29, i32 %arg30, i32 %arg31, i32 %arg32, i32 %arg33, i32 %arg34, i32 %arg35, i32 %arg36, i32 %arg37, i32 %arg38, i32 %arg39):
    i32 %0 = mul i32 %arg35, i32 32;
    i32 %1 = srem i32 %arg35, i32 32;
    i32 %2 = add i32 %0, i32 %1;
    i32 %3 = add i32 %2, i32 %arg20;
    i32 %4 = add i32 %3, i32 %arg36;
    i32 %5 = add i32 %4, i32 %arg19;
    i32* %6 = getelementptr &([80 * i32]* %arg8)[i32 0][i32 %arg15];
    i32 %7 = load i32* %6;
    i32 %8 = add i32 %5, i32 %7;
    store i32* %arg4 with i32 %arg17;
    store i32* %arg10 with i32 %arg18;
    i32 %9 = mul i32 %arg16, i32 1073741824;
    i32 %10 = srem i32 %arg16, i32 1073741824;
    i32 %11 = add i32 %9, i32 %10;
    store i32* %arg11 with i32 %11;
    store i32* %arg9 with i32 %arg35;
    store i32* %arg2 with i32 %8;
    i32 %12 = add i32 %arg15, i32 1;
    store i32* %arg7 with i32 %12;
    i1 %13 = scmp lt i32 %12, i32 80;
    cbr i1 %13, [ ^while.body7 i32* %arg1, i32* %arg, i32* %arg7, i32* %arg2, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg3, i32* %arg10, i32* %arg11, i32* %arg12, [80 * i32]* %arg8, i32* %arg9, i32* %arg14, i32* %arg13, i32* %arg26, i32* %arg25, i32* %arg24, [5 * i32]* %arg23, i32* %arg22, [5 * i32]* %arg21, i32* %arg27, i32 %arg28, i32* %arg29, i32 %arg30, i32 %arg31, i32 %arg32, i32 %arg33, i32 %arg34, i32 %8, i32 %arg35, i32 %11, i32 %arg18, i32 %arg17, i32 %arg37, i32 %arg38, i32 %arg39, i32 %12 ], [ ^b6 [80 * i32]* %arg8, i32* %arg3, i32* %arg13, i32* %arg2, i32* %arg6, i32* %arg5, i32* %arg14, i32* %arg, i32* %arg1, i32* %arg9, i32* %arg11, i32* %arg12, i32* %arg10, i32* %arg4, [5 * i32]* %arg21, i32* %arg22, [5 * i32]* %arg23, i32* %arg24, i32* %arg25, i32* %arg26, i32* %arg27, i32 %arg28, i32* %arg29, i32 %arg30, i32 %arg31, i32 %arg32, i32 %arg33, i32 %arg34, i32 %8, i32 %arg35, i32 %11, i32 %arg18, i32 %arg17, i32 %arg37, i32 %arg38, i32 %arg39 ];
^if.else(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, [80 * i32]* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32* %arg15, i32* %arg16, i32* %arg17, [5 * i32]* %arg18, i32* %arg19, [5 * i32]* %arg20, i32* %arg21, i32 %arg22, i32* %arg23, i32 %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28, i32 %arg29, i32 %arg30, i32 %arg31, i32 %arg32, i32 %arg33, i32 %arg34, i32 %arg35, i32 %arg36, i32 %arg37):
    i1 %0 = scmp lt i32 %arg37, i32 60;
    cbr i1 %0, [ ^if.then2 i32* %arg13, i32* %arg14, i32* %arg6, i32* %arg7, [80 * i32]* %arg8, i32* %arg5, i32* %arg4, i32* %arg3, i32* %arg2, i32* %arg12, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg1, i32* %arg, [5 * i32]* %arg20, i32* %arg19, [5 * i32]* %arg18, i32* %arg17, i32* %arg16, i32* %arg15, i32* %arg21, i32 %arg22, i32* %arg23, i32 %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28, i32 %arg29, i32 %arg30, i32 %arg31, i32 %arg32, i32 %arg33, i32 %arg36, i32 %arg37 ], [ ^indirect3 i32* %arg14, i32* %arg13, i32* %arg2, i32* %arg11, i32* %arg10, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, [80 * i32]* %arg8, i32* %arg12, i32* %arg9, i32* %arg, i32* %arg1, i32 %arg37, i32* %arg15, i32* %arg16, i32* %arg17, [5 * i32]* %arg18, i32* %arg19, [5 * i32]* %arg20, i32* %arg21, i32 %arg22, i32* %arg23, i32 %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28, i32 %arg29, i32 %arg30, i32 %arg31, i32 %arg32, i32 %arg33, i32 %arg34, i32 %arg35, i32 %arg36, i32 %arg37 ];
^if.then2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [80 * i32]* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, [5 * i32]* %arg15, i32* %arg16, [5 * i32]* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32 %arg22, i32* %arg23, i32 %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28, i32 %arg29, i32 %arg30, i32 %arg31, i32 %arg32, i32 %arg33, i32 %arg34, i32 %arg35):
    i32 %0 = add i32 %arg30, i32 %arg31;
    i32 %1 = add i32 %arg30, i32 %arg32;
    i32 %2 = add i32 %0, i32 %1;
    i32 %3 = sub i32 %0, i32 %2;
    i32 %4 = add i32 %3, i32 %1;
    i32 %5 = sub i32 %4, i32 %2;
    i32 %6 = add i32 %5, i32 %2;
    i32 %7 = sub i32 %5, i32 %6;
    i32 %8 = add i32 %7, i32 %2;
    i32 %9 = sub i32 %8, i32 %6;
    i32 %10 = add i32 %arg31, i32 %arg32;
    i32 %11 = add i32 %9, i32 %10;
    i32 %12 = sub i32 %9, i32 %11;
    i32 %13 = add i32 %12, i32 %10;
    i32 %14 = sub i32 %13, i32 %11;
    i32 %15 = add i32 %14, i32 %11;
    i32 %16 = sub i32 %14, i32 %15;
    i32 %17 = add i32 %16, i32 %11;
    i32 %18 = sub i32 %17, i32 %15;
    store i32* %arg7 with i32 %18;
    store i32* %arg11 with i32 -1894007588;
    ubr [ ^b5 i32* %arg14, i32* %arg13, i32* %arg10, i32* %arg7, i32* %arg9, i32* %arg12, i32* %arg11, i32* %arg8, [80 * i32]* %arg4, i32* %arg3, i32* %arg6, i32* %arg5, i32* %arg2, i32* %arg, i32* %arg1, i32 %arg35, i32 %arg30, i32 %arg32, i32 %arg31, i32 -1894007588, i32 %18, [5 * i32]* %arg15, i32* %arg16, [5 * i32]* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32 %arg22, i32* %arg23, i32 %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28, i32 %arg29, i32 %arg33, i32 %18, i32 -1894007588, i32 %arg34 ];
^b6([80 * i32]* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, [5 * i32]* %arg14, i32* %arg15, [5 * i32]* %arg16, i32* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32 %arg21, i32* %arg22, i32 %arg23, i32 %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28, i32 %arg29, i32 %arg30, i32 %arg31, i32 %arg32, i32 %arg33, i32 %arg34, i32 %arg35):
    i32 %0 = add i32 %arg23, i32 %arg28;
    store i32* %arg2 with i32 %0;
    i32 %1 = add i32 %arg24, i32 %arg29;
    store i32* %arg6 with i32 %1;
    i32 %2 = add i32 %arg25, i32 %arg30;
    store i32* %arg7 with i32 %2;
    i32 %3 = add i32 %arg26, i32 %arg31;
    store i32* %arg8 with i32 %3;
    i32 %4 = add i32 %arg27, i32 %arg32;
    store i32* %arg5 with i32 %4;
    i32 %5 = add i32 %arg35, i32 64;
    store i32* %arg11 with i32 %5;
    i1 %6 = scmp lt i32 %5, i32 %arg21;
    cbr i1 %6, [ ^while.body3 [80 * i32]* %arg, i32* %arg11, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg12, i32* %arg13, i32* %arg1, [5 * i32]* %arg14, i32* %arg15, [5 * i32]* %arg16, i32* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32 %arg21, i32* %arg22, i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %arg33, i32 %arg34, i32 %5 ], [ ^b3 i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg5, [5 * i32]* %arg14, i32* %arg15, [5 * i32]* %arg16, i32* %arg17, i32* %arg18, i32* %arg19, i32* %arg22, i32 %0 ];
^indirect3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, [80 * i32]* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, i32 %arg15, i32* %arg16, i32* %arg17, i32* %arg18, [5 * i32]* %arg19, i32* %arg20, [5 * i32]* %arg21, i32* %arg22, i32 %arg23, i32* %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28, i32 %arg29, i32 %arg30, i32 %arg31, i32 %arg32, i32 %arg33, i32 %arg34, i32 %arg35, i32 %arg36, i32 %arg37, i32 %arg38):
    i1 %0 = scmp lt i32 %arg15, i32 80;
    cbr i1 %0, [ ^if.then3 i32* %arg13, i32* %arg14, i32* %arg9, [80 * i32]* %arg10, i32* %arg7, i32* %arg8, i32* %arg6, i32* %arg5, i32* %arg12, i32* %arg4, i32* %arg3, i32* %arg11, i32* %arg2, i32* %arg1, i32* %arg, [5 * i32]* %arg21, i32* %arg20, [5 * i32]* %arg19, i32* %arg18, i32* %arg17, i32* %arg16, i32* %arg22, i32 %arg23, i32* %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28, i32 %arg29, i32 %arg30, i32 %arg31, i32 %arg32, i32 %arg33, i32 %arg34, i32 %arg37, i32 %arg38 ], [ ^b5 i32* %arg13, i32* %arg14, i32* %arg12, i32* %arg5, i32* %arg11, i32* %arg3, i32* %arg4, i32* %arg2, [80 * i32]* %arg10, i32* %arg9, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg1, i32* %arg, i32 %arg15, i32 %arg31, i32 %arg33, i32 %arg32, i32 %arg36, i32 %arg35, [5 * i32]* %arg21, i32* %arg20, [5 * i32]* %arg19, i32* %arg18, i32* %arg17, i32* %arg16, i32* %arg22, i32 %arg23, i32* %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28, i32 %arg29, i32 %arg30, i32 %arg34, i32 %arg35, i32 %arg36, i32 %arg37 ];
^if.then3(i32* %arg, i32* %arg1, i32* %arg2, [80 * i32]* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32* %arg7, i32* %arg8, i32* %arg9, i32* %arg10, i32* %arg11, i32* %arg12, i32* %arg13, i32* %arg14, [5 * i32]* %arg15, i32* %arg16, [5 * i32]* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32 %arg22, i32* %arg23, i32 %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28, i32 %arg29, i32 %arg30, i32 %arg31, i32 %arg32, i32 %arg33, i32 %arg34, i32 %arg35):
    i32 %0 = add i32 %arg30, i32 %arg31;
    i32 %1 = sub i32 %arg30, i32 %0;
    i32 %2 = add i32 %1, i32 %arg31;
    i32 %3 = sub i32 %2, i32 %0;
    i32 %4 = add i32 %3, i32 %arg32;
    i32 %5 = sub i32 %3, i32 %4;
    i32 %6 = add i32 %5, i32 %arg32;
    i32 %7 = sub i32 %6, i32 %4;
    store i32* %arg7 with i32 %7;
    store i32* %arg9 with i32 -899497722;
    ubr [ ^b5 i32* %arg, i32* %arg1, i32* %arg8, i32* %arg7, i32* %arg11, i32* %arg10, i32* %arg9, i32* %arg12, [80 * i32]* %arg3, i32* %arg2, i32* %arg6, i32* %arg4, i32* %arg5, i32* %arg13, i32* %arg14, i32 %arg35, i32 %arg30, i32 %arg32, i32 %arg31, i32 -899497722, i32 %7, [5 * i32]* %arg15, i32* %arg16, [5 * i32]* %arg17, i32* %arg18, i32* %arg19, i32* %arg20, i32* %arg21, i32 %arg22, i32* %arg23, i32 %arg24, i32 %arg25, i32 %arg26, i32 %arg27, i32 %arg28, i32 %arg29, i32 %arg33, i32 %7, i32 -899497722, i32 %arg34 ];
}
