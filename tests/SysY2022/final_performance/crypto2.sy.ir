internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putarray() -> void { NoMemoryWrite };
internal func @starttime() -> void { NoMemoryRead NoMemoryWrite };
internal func @stoptime() -> void { NoMemoryRead NoMemoryWrite };
internal func @cmmc::Intrinsic::memset() -> i8* { NoMemoryRead };
internal [32768 * i32]* @buffer = [0];
func @main() -> i32 { NoRecurse Entry } {
^entry:
    i32** %input = alloc i32*;
    i32* %input_len = alloc i32;
    i32** %output = alloc i32*;
    i32* %h0 = alloc i32;
    i32* %h1 = alloc i32;
    i32* %h2 = alloc i32;
    i32* %h3 = alloc i32;
    i32* %h4 = alloc i32;
    i32* %f = alloc i32;
    i32* %k = alloc i32;
    i32* %orig_len = alloc i32;
    i32* %chunk_st = alloc i32;
    [80 * i32]* %words = alloc [80 * i32];
    i32* %state = alloc i32;
    [5 * i32]* %output_b = alloc [5 * i32];
    [5 * i32]* %output1 = alloc [5 * i32];
    i32* %rounds = alloc i32;
    i32* %0 = getelementptr &([5 * i32]* %output1)[i64 0][i64 0];
    store i32* %0 with i32 0;
    i32* %1 = getelementptr &([5 * i32]* %output1)[i64 0][i64 1];
    store i32* %1 with i32 0;
    i32* %2 = getelementptr &([5 * i32]* %output1)[i64 0][i64 2];
    store i32* %2 with i32 0;
    i32* %3 = getelementptr &([5 * i32]* %output1)[i64 0][i64 3];
    store i32* %3 with i32 0;
    i32* %4 = getelementptr &([5 * i32]* %output1)[i64 0][i64 4];
    store i32* %4 with i32 0;
    i32 %5 = call () -> i32 @getint();
    store i32* %state with i32 %5;
    i32 %6 = call () -> i32 @getint();
    store i32* %rounds with i32 %6;
    call (i32) -> void @starttime(i32 161);
    i32* %7 = getelementptr &([5 * i32]* %output_b)[i64 0][i64 0];
    store i32* %7 with i32 0;
    i32* %8 = getelementptr &([5 * i32]* %output_b)[i64 0][i64 1];
    store i32* %8 with i32 0;
    i32* %9 = getelementptr &([5 * i32]* %output_b)[i64 0][i64 2];
    store i32* %9 with i32 0;
    i32* %10 = getelementptr &([5 * i32]* %output_b)[i64 0][i64 3];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &([5 * i32]* %output_b)[i64 0][i64 4];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &([32768 * i32]* @buffer)[i64 0][i64 0];
    ubr ^while.header;
^while.header:
    i32 %13 = phi [^b4, i32 %134] [^entry, i32 %5];
    i32 %14 = phi [^b4, i32 %188] [^entry, i32 %6];
    i1 %15 = scmp gt i32 %14, i32 0;
    cbr i1 %15(prob = 0.97), ^while.header1, ^b;
^while.header1:
    i32 %16 = phi [^while.header, i32 32000] [^while.body, i32 %16];
    i32 %17 = phi [^while.header, i32 0] [^while.body, i32 %26];
    i32 %18 = phi [^while.header, i32 %13] [^while.body, i32 %24];
    i1 %19 = scmp lt i32 %17, i32 %16;
    cbr i1 %19(prob = 0.97), ^while.body, ^b1;
^b:
    call (i32) -> void @stoptime(i32 184);
    call (i32, i32*) -> void @putarray(i32 5, i32* %7);
    ret i32 0;
^while.body:
    i32* %20 = getelementptr &([32768 * i32]* @buffer)[i64 0][i32 %17];
    i32 %21 = mul i32 %18, i32 8193;
    i32 %22 = sdiv i32 %21, i32 131072;
    i32 %23 = add i32 %21, i32 %22;
    i32 %24 = mul i32 %23, i32 33;
    store i32* %state with i32 %24;
    i32 %25 = srem i32 %24, i32 256;
    store i32* %20 with i32 %25;
    i32 %26 = add i32 %17, i32 1;
    ubr ^while.header1;
^b1:
    store i32** %input with i32* %12;
    store i32** %output with i32* %0;
    store i32* %h0 with i32 1732584193;
    store i32* %h1 with i32 -271733879;
    store i32* %h2 with i32 -1732584194;
    store i32* %h3 with i32 271733878;
    store i32* %h4 with i32 -1009589776;
    store i32* %f with i32 0;
    store i32* %k with i32 0;
    store i32* %orig_len with i32 %16;
    i32* %27 = getelementptr &(i32* %12)[i32 %16];
    store i32* %27 with i32 128;
    i32 %28 = add i32 %16, i32 1;
    store i32* %input_len with i32 %28;
    ubr ^while.header2;
^while.header2:
    i32 %29 = phi [^while.body1, i32 %35] [^b1, i32 %16];
    i32 %30 = phi [^while.body1, i32 %37] [^b1, i32 %28];
    i32* %31 = phi [^while.body1, i32* %31] [^b1, i32* %12];
    i32 %32 = srem i32 %30, i32 64;
    i1 %33 = scmp neq i32 %32, i32 60;
    cbr i1 %33(prob = 0.97), ^while.body1, ^b2;
^while.body1:
    i32* %34 = getelementptr &(i32* %31)[i32 %30];
    store i32* %34 with i32 0;
    i32 %35 = load i32* %orig_len;
    i32 %36 = load i32* %input_len;
    i32 %37 = add i32 %36, i32 1;
    store i32* %input_len with i32 %37;
    ubr ^while.header2;
^b2:
    i32* %38 = getelementptr &(i32* %31)[i32 %30];
    i32 %39 = sdiv i32 %29, i32 16777216;
    i32 %40 = srem i32 %39, i32 256;
    store i32* %38 with i32 %40;
    i32 %41 = load i32* %orig_len;
    i32 %42 = load i32* %input_len;
    i32 %43 = add i32 %42, i32 1;
    i32* %44 = getelementptr &(i32* %31)[i32 %43];
    i32 %45 = sdiv i32 %41, i32 65536;
    i32 %46 = srem i32 %45, i32 256;
    store i32* %44 with i32 %46;
    i32 %47 = load i32* %orig_len;
    i32 %48 = load i32* %input_len;
    i32 %49 = add i32 %48, i32 2;
    i32* %50 = getelementptr &(i32* %31)[i32 %49];
    i32 %51 = sdiv i32 %47, i32 256;
    i32 %52 = srem i32 %51, i32 256;
    store i32* %50 with i32 %52;
    i32 %53 = load i32* %orig_len;
    i32 %54 = load i32* %input_len;
    i32 %55 = add i32 %54, i32 3;
    i32* %56 = getelementptr &(i32* %31)[i32 %55];
    i32 %57 = srem i32 %53, i32 256;
    store i32* %56 with i32 %57;
    i32 %58 = load i32* %input_len;
    i32 %59 = add i32 %58, i32 4;
    store i32* %input_len with i32 %59;
    store i32* %chunk_st with i32 0;
    i32* %60 = getelementptr &([80 * i32]* %words)[i64 0][i64 0];
    i8* %61 = ptrcast i32* %60 to i8*;
    i8* %62 = call (i8*, i32, i64) -> i8* @cmmc::Intrinsic::memset(i8* %61, i32 0, i64 320);
    i32 %63 = load i32* %chunk_st;
    i32 %64 = load i32* %k;
    i32 %65 = load i32* %f;
    i32 %66 = load i32* %h4;
    i32 %67 = load i32* %h3;
    i32 %68 = load i32* %h2;
    i32 %69 = load i32* %h1;
    i32 %70 = load i32* %h0;
    i32* %71 = load i32** %output;
    i32 %72 = load i32* %input_len;
    i32* %73 = load i32** %input;
    ubr ^while.header3;
^while.header3:
    i32 %74 = phi [^b5, i32 %212] [^b2, i32 %63];
    i32 %75 = phi [^b5, i32 %191] [^b2, i32 %64];
    i32 %76 = phi [^b5, i32 %192] [^b2, i32 %65];
    i32 %77 = phi [^b5, i32 %211] [^b2, i32 %66];
    i32 %78 = phi [^b5, i32 %210] [^b2, i32 %67];
    i32 %79 = phi [^b5, i32 %209] [^b2, i32 %68];
    i32 %80 = phi [^b5, i32 %208] [^b2, i32 %69];
    i32 %81 = phi [^b5, i32 %207] [^b2, i32 %70];
    i32* %82 = phi [^b5, i32* %203] [^b2, i32* %71];
    i32 %83 = phi [^b5, i32 %204] [^b2, i32 %72];
    i32* %84 = phi [^b5, i32* %205] [^b2, i32* %73];
    i1 %85 = scmp lt i32 %74, i32 %83;
    cbr i1 %85(prob = 0.97), ^while.header4, ^b3;
^b3:
    store i32* %82 with i32 %81;
    i32 %86 = load i32* %h1;
    i32* %87 = getelementptr &(i32* %82)[i64 1];
    store i32* %87 with i32 %86;
    i32 %88 = load i32* %h2;
    i32* %89 = getelementptr &(i32* %82)[i64 2];
    store i32* %89 with i32 %88;
    i32 %90 = load i32* %h3;
    i32* %91 = getelementptr &(i32* %82)[i64 3];
    store i32* %91 with i32 %90;
    i32 %92 = load i32* %h4;
    i32* %93 = getelementptr &(i32* %82)[i64 4];
    store i32* %93 with i32 %92;
    i32 %94 = load i32* %rounds;
    i32 %95 = load i32* %state;
    ubr ^while.header5;
^while.header4:
    i32 %96 = phi [^while.header3, i32 0] [^while.body2, i32 %131];
    i32 %97 = phi [^while.header3, i32 %74] [^while.body2, i32 %97];
    i32 %98 = phi [^while.header3, i32 %75] [^while.body2, i32 %98];
    i32 %99 = phi [^while.header3, i32 %76] [^while.body2, i32 %99];
    i32 %100 = phi [^while.header3, i32 %77] [^while.body2, i32 %100];
    i32 %101 = phi [^while.header3, i32 %78] [^while.body2, i32 %101];
    i32 %102 = phi [^while.header3, i32 %79] [^while.body2, i32 %102];
    i32 %103 = phi [^while.header3, i32 %80] [^while.body2, i32 %103];
    i32 %104 = phi [^while.header3, i32 %81] [^while.body2, i32 %104];
    i32 %105 = phi [^while.header3, i32 %77] [^while.body2, i32 %105];
    i32 %106 = phi [^while.header3, i32 %78] [^while.body2, i32 %106];
    i32 %107 = phi [^while.header3, i32 %79] [^while.body2, i32 %107];
    i32 %108 = phi [^while.header3, i32 %80] [^while.body2, i32 %108];
    i32 %109 = phi [^while.header3, i32 %81] [^while.body2, i32 %109];
    i32* %110 = phi [^while.header3, i32* %82] [^while.body2, i32* %110];
    i32 %111 = phi [^while.header3, i32 %83] [^while.body2, i32 %111];
    i32* %112 = phi [^while.header3, i32* %84] [^while.body2, i32* %112];
    i1 %113 = scmp lt i32 %96, i32 16;
    cbr i1 %113(prob = 0.97), ^while.body2, ^while.header6;
^while.body2:
    i32* %114 = getelementptr &([80 * i32]* %words)[i64 0][i32 %96];
    i32 %115 = mul i32 %96, i32 4;
    i32 %116 = add i32 %115, i32 %97;
    i32* %117 = getelementptr &(i32* %112)[i32 %116];
    i32 %118 = load i32* %117;
    i32 %119 = mul i32 %118, i32 16777216;
    i32* %120 = getelementptr &(i32* %117)[i64 1];
    i32 %121 = load i32* %120;
    i32 %122 = mul i32 %121, i32 65536;
    i32* %123 = getelementptr &(i32* %117)[i64 2];
    i32 %124 = load i32* %123;
    i32 %125 = mul i32 %124, i32 256;
    i32* %126 = getelementptr &(i32* %117)[i64 3];
    i32 %127 = load i32* %126;
    i32 %128 = add i32 %119, i32 %122;
    i32 %129 = add i32 %128, i32 %125;
    i32 %130 = add i32 %129, i32 %127;
    store i32* %114 with i32 %130;
    i32 %131 = add i32 %96, i32 1;
    ubr ^while.header4;
^while.header5:
    i32 %132 = phi [^while.body3, i32 %132] [^b3, i32 %94];
    i32 %133 = phi [^while.body3, i32 %162] [^b3, i32 0];
    i32 %134 = phi [^while.body3, i32 %134] [^b3, i32 %95];
    i1 %135 = scmp lt i32 %133, i32 5;
    cbr i1 %135(prob = 0.97), ^while.body3, ^b4;
^while.header6:
    i32 %136 = phi [^while.header4, i32 %96] [^while.body4, i32 %187];
    i32 %137 = phi [^while.header4, i32 %97] [^while.body4, i32 %137];
    i32 %138 = phi [^while.header4, i32 %98] [^while.body4, i32 %138];
    i32 %139 = phi [^while.header4, i32 %99] [^while.body4, i32 %139];
    i32 %140 = phi [^while.header4, i32 %100] [^while.body4, i32 %140];
    i32 %141 = phi [^while.header4, i32 %101] [^while.body4, i32 %141];
    i32 %142 = phi [^while.header4, i32 %102] [^while.body4, i32 %142];
    i32 %143 = phi [^while.header4, i32 %103] [^while.body4, i32 %143];
    i32 %144 = phi [^while.header4, i32 %104] [^while.body4, i32 %144];
    i32 %145 = phi [^while.header4, i32 %105] [^while.body4, i32 %145];
    i32 %146 = phi [^while.header4, i32 %106] [^while.body4, i32 %146];
    i32 %147 = phi [^while.header4, i32 %107] [^while.body4, i32 %147];
    i32 %148 = phi [^while.header4, i32 %108] [^while.body4, i32 %148];
    i32 %149 = phi [^while.header4, i32 %109] [^while.body4, i32 %149];
    i32* %150 = phi [^while.header4, i32* %110] [^while.body4, i32* %150];
    i32 %151 = phi [^while.header4, i32 %111] [^while.body4, i32 %151];
    i32* %152 = phi [^while.header4, i32* %112] [^while.body4, i32* %152];
    i1 %153 = scmp lt i32 %136, i32 80;
    cbr i1 %153(prob = 0.97), ^while.body4, ^while.header7;
^while.body3:
    i32* %154 = getelementptr &([5 * i32]* %output_b)[i64 0][i32 %133];
    i32 %155 = load i32* %154;
    i32* %156 = getelementptr &([5 * i32]* %output1)[i64 0][i32 %133];
    i32 %157 = load i32* %156;
    i32 %158 = add i32 %155, i32 %157;
    i32 %159 = sub i32 %155, i32 %158;
    i32 %160 = add i32 %159, i32 %157;
    i32 %161 = sub i32 %160, i32 %158;
    store i32* %154 with i32 %161;
    i32 %162 = add i32 %133, i32 1;
    ubr ^while.header5;
^while.body4:
    i32* %163 = getelementptr &([80 * i32]* %words)[i64 0][i32 %136];
    i32* %164 = getelementptr &(i32* %163)[i64 -3];
    i32 %165 = load i32* %164;
    i32* %166 = getelementptr &(i32* %163)[i64 -8];
    i32 %167 = load i32* %166;
    i32 %168 = add i32 %165, i32 %167;
    i32 %169 = sub i32 %165, i32 %168;
    i32 %170 = add i32 %167, i32 %169;
    i32 %171 = sub i32 %170, i32 %168;
    i32* %172 = getelementptr &(i32* %163)[i64 -14];
    i32 %173 = load i32* %172;
    i32 %174 = add i32 %171, i32 %173;
    i32 %175 = sub i32 %171, i32 %174;
    i32 %176 = add i32 %173, i32 %175;
    i32 %177 = sub i32 %176, i32 %174;
    i32* %178 = getelementptr &(i32* %163)[i64 -16];
    i32 %179 = load i32* %178;
    i32 %180 = add i32 %177, i32 %179;
    i32 %181 = sub i32 %177, i32 %180;
    i32 %182 = add i32 %179, i32 %181;
    i32 %183 = sub i32 %182, i32 %180;
    i32 %184 = mul i32 %183, i32 2;
    i32 %185 = srem i32 %183, i32 2;
    i32 %186 = add i32 %184, i32 %185;
    store i32* %163 with i32 %186;
    i32 %187 = add i32 %136, i32 1;
    ubr ^while.header6;
^b4:
    i32 %188 = add i32 %132, i32 -1;
    store i32* %rounds with i32 %188;
    ubr ^while.header;
^while.header7:
    i32 %189 = phi [^while.header6, i32 0] [^b6, i32 %248];
    i32 %190 = phi [^while.header6, i32 %137] [^b6, i32 %190];
    i32 %191 = phi [^while.header6, i32 %138] [^b6, i32 %234];
    i32 %192 = phi [^while.header6, i32 %139] [^b6, i32 %235];
    i32 %193 = phi [^while.header6, i32 %140] [^b6, i32 %194];
    i32 %194 = phi [^while.header6, i32 %141] [^b6, i32 %195];
    i32 %195 = phi [^while.header6, i32 %142] [^b6, i32 %247];
    i32 %196 = phi [^while.header6, i32 %143] [^b6, i32 %197];
    i32 %197 = phi [^while.header6, i32 %144] [^b6, i32 %244];
    i32 %198 = phi [^while.header6, i32 %145] [^b6, i32 %198];
    i32 %199 = phi [^while.header6, i32 %146] [^b6, i32 %199];
    i32 %200 = phi [^while.header6, i32 %147] [^b6, i32 %200];
    i32 %201 = phi [^while.header6, i32 %148] [^b6, i32 %201];
    i32 %202 = phi [^while.header6, i32 %149] [^b6, i32 %202];
    i32* %203 = phi [^while.header6, i32* %150] [^b6, i32* %203];
    i32 %204 = phi [^while.header6, i32 %151] [^b6, i32 %204];
    i32* %205 = phi [^while.header6, i32* %152] [^b6, i32* %205];
    i1 %206 = scmp lt i32 %189, i32 80;
    cbr i1 %206(prob = 0.97), ^while.body5, ^b5;
^b5:
    i32 %207 = add i32 %202, i32 %197;
    store i32* %h0 with i32 %207;
    i32 %208 = add i32 %201, i32 %196;
    store i32* %h1 with i32 %208;
    i32 %209 = add i32 %200, i32 %195;
    store i32* %h2 with i32 %209;
    i32 %210 = add i32 %199, i32 %194;
    store i32* %h3 with i32 %210;
    i32 %211 = add i32 %198, i32 %193;
    store i32* %h4 with i32 %211;
    i32 %212 = add i32 %190, i32 64;
    store i32* %chunk_st with i32 %212;
    ubr ^while.header3;
^while.body5:
    i1 %213 = scmp lt i32 %189, i32 20;
    cbr i1 %213(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32 %214 = add i32 %196, i32 %195;
    i32 %215 = sub i32 -1, i32 %196;
    i32 %216 = add i32 %215, i32 %196;
    i32 %217 = add i32 %216, i32 %195;
    i32 %218 = add i32 %217, i32 %194;
    i32 %219 = sub i32 %214, i32 %218;
    i32 %220 = add i32 %215, i32 %219;
    i32 %221 = add i32 %220, i32 %194;
    i32 %222 = sub i32 %221, i32 %218;
    i32 %223 = add i32 %215, i32 %222;
    i32 %224 = add i32 %223, i32 %196;
    i32 %225 = add i32 %224, i32 %195;
    i32 %226 = add i32 %225, i32 %194;
    i32 %227 = sub i32 %222, i32 %226;
    i32 %228 = add i32 %215, i32 %227;
    i32 %229 = add i32 %228, i32 %196;
    i32 %230 = add i32 %229, i32 %195;
    i32 %231 = add i32 %230, i32 %194;
    i32 %232 = sub i32 %231, i32 %226;
    store i32* %f with i32 %232;
    store i32* %k with i32 1518500249;
    ubr ^b6;
^if.else:
    i1 %233 = scmp lt i32 %189, i32 40;
    cbr i1 %233(prob = 0.5), ^if.then1, ^if.else1;
^b6:
    i32 %234 = phi [^if.else2, i32 %191] [^if.then2, i32 -1894007588] [^if.then1, i32 1859775361] [^if.then3, i32 -899497722] [^if.then, i32 1518500249];
    i32 %235 = phi [^if.else2, i32 %192] [^if.then2, i32 %287] [^if.then1, i32 %256] [^if.then3, i32 %295] [^if.then, i32 %232];
    i32 %236 = mul i32 %197, i32 32;
    i32 %237 = srem i32 %197, i32 32;
    i32* %238 = getelementptr &([80 * i32]* %words)[i64 0][i32 %189];
    i32 %239 = load i32* %238;
    i32 %240 = add i32 %236, i32 %237;
    i32 %241 = add i32 %240, i32 %239;
    i32 %242 = add i32 %241, i32 %193;
    i32 %243 = add i32 %242, i32 %235;
    i32 %244 = add i32 %243, i32 %234;
    i32 %245 = mul i32 %196, i32 1073741824;
    i32 %246 = srem i32 %196, i32 1073741824;
    i32 %247 = add i32 %245, i32 %246;
    i32 %248 = add i32 %189, i32 1;
    ubr ^while.header7;
^if.then1:
    i32 %249 = add i32 %196, i32 %195;
    i32 %250 = sub i32 %196, i32 %249;
    i32 %251 = add i32 %250, i32 %195;
    i32 %252 = sub i32 %251, i32 %249;
    i32 %253 = add i32 %252, i32 %194;
    i32 %254 = sub i32 %252, i32 %253;
    i32 %255 = add i32 %254, i32 %194;
    i32 %256 = sub i32 %255, i32 %253;
    store i32* %f with i32 %256;
    store i32* %k with i32 1859775361;
    ubr ^b6;
^if.else1:
    i1 %257 = scmp lt i32 %189, i32 60;
    cbr i1 %257(prob = 0.5), ^if.then2, ^if.else2;
^if.then2:
    i32 %258 = add i32 %196, i32 %195;
    i32 %259 = mul i32 %196, i32 2;
    i32 %260 = add i32 %259, i32 %195;
    i32 %261 = add i32 %260, i32 %194;
    i32 %262 = sub i32 %258, i32 %261;
    i32 %263 = add i32 %262, i32 %196;
    i32 %264 = add i32 %263, i32 %194;
    i32 %265 = sub i32 %264, i32 %261;
    i32 %266 = add i32 %265, i32 %259;
    i32 %267 = add i32 %266, i32 %195;
    i32 %268 = add i32 %267, i32 %194;
    i32 %269 = sub i32 %265, i32 %268;
    i32 %270 = add i32 %269, i32 %259;
    i32 %271 = add i32 %270, i32 %195;
    i32 %272 = add i32 %271, i32 %194;
    i32 %273 = sub i32 %272, i32 %268;
    i32 %274 = add i32 %273, i32 %195;
    i32 %275 = add i32 %274, i32 %194;
    i32 %276 = sub i32 %273, i32 %275;
    i32 %277 = add i32 %276, i32 %195;
    i32 %278 = add i32 %277, i32 %194;
    i32 %279 = sub i32 %278, i32 %275;
    i32 %280 = add i32 %273, i32 %279;
    i32 %281 = add i32 %280, i32 %195;
    i32 %282 = add i32 %281, i32 %194;
    i32 %283 = sub i32 %279, i32 %282;
    i32 %284 = add i32 %273, i32 %283;
    i32 %285 = add i32 %284, i32 %195;
    i32 %286 = add i32 %285, i32 %194;
    i32 %287 = sub i32 %286, i32 %282;
    store i32* %f with i32 %287;
    store i32* %k with i32 -1894007588;
    ubr ^b6;
^if.else2:
    cbr i1 %206(prob = 0.5), ^if.then3, ^b6;
^if.then3:
    i32 %288 = add i32 %196, i32 %195;
    i32 %289 = sub i32 %196, i32 %288;
    i32 %290 = add i32 %289, i32 %195;
    i32 %291 = sub i32 %290, i32 %288;
    i32 %292 = add i32 %291, i32 %194;
    i32 %293 = sub i32 %291, i32 %292;
    i32 %294 = add i32 %293, i32 %194;
    i32 %295 = sub i32 %294, i32 %292;
    store i32* %f with i32 %295;
    store i32* %k with i32 -899497722;
    ubr ^b6;
}
