func @read() -> i32 { NoMemoryRead NoMemoryWrite };
func @write(i32) -> void { NoMemoryRead NoMemoryWrite };
func @mod(i32, i32) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
^entry(i32 %arg, i32 %arg1):
    i32 %0 = sdiv i32 %arg, i32 %arg1;
    i32 %1 = mul i32 %arg1, i32 %0;
    i32 %2 = sub i32 %arg, i32 %1;
    ret i32 %2;
}
func @DigitSum(i32) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry(i32 %arg):
    i1 %0 = scmp eq i32 %arg, i32 0;
    cbr i1 %0, [ ^if.then ], [ ^entry1 i32 %arg ];
^if.then():
    ret i32 0;
^entry1(i32 %arg):
    i32 %0 = sdiv i32 %arg, i32 10;
    i32 %1 = mul i32 %0, i32 10;
    i32 %2 = sub i32 %arg, i32 %1;
    i32 %3 = call (i32) -> i32 @DigitSum(i32 %0);
    i32 %4 = add i32 %3, i32 %2;
    ret i32 %4;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
^entry():
    i32 %0 = call () -> i32 @read();
    i1 %1 = scmp lt i32 %0, i32 0;
    cbr i1 %1, [ ^if.then ], [ ^indirect i32 %0 ];
^if.then():
    call (i32) -> void @write(i32 -1);
    ret i32 0;
^indirect(i32 %arg):
    i32 %0 = call (i32) -> i32 @DigitSum(i32 %arg);
    call (i32) -> void @write(i32 %0);
    ret i32 0;
}
