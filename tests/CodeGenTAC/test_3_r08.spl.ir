func @read() -> i32 { NoMemoryRead NoMemoryWrite };
func @write() -> void { NoMemoryRead NoMemoryWrite };
func @mod(i32 %x, i32 %n) -> i32 {
^entry:
    i32* %n1 = alloc i32;
    i32* %x1 = alloc i32;
    store i32* %x1 with i32 %x;
    store i32* %n1 with i32 %n;
    i32 %0 = load i32* %x1;
    i32 %1 = load i32* %x1;
    i32 %2 = load i32* %n1;
    i32 %3 = sdiv i32 %1, i32 %2;
    i32 %4 = load i32* %n1;
    i32 %5 = mul i32 %3, i32 %4;
    i32 %6 = sub i32 %0, i32 %5;
    ret i32 %6;
}
func @DigitSum(i32 %y) -> i32 {
^entry:
    i32* %y1 = alloc i32;
    store i32* %y1 with i32 %y;
    i32 %0 = load i32* %y1;
    i1 %1 = scmp eq i32 %0, i32 0;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^b;
^if.then:
    ret i32 0;
^b:
    i32 %4 = load i32* %y1;
    i32 %5 = call (i32, i32) -> i32 @mod(i32 %4, i32 10);
    i32 %6 = load i32* %y1;
    i32 %7 = sdiv i32 %6, i32 10;
    i32 %8 = call (i32) -> i32 @DigitSum(i32 %7);
    i32 %9 = add i32 %5, i32 %8;
    ret i32 %9;
}
func @main() -> i32 {
^entry:
    i32* %num = alloc i32;
    store i32* %num with i32 0;
    i32 %0 = call () -> i32 @read();
    store i32* %num with i32 %0;
    i32 %1 = load i32* %num;
    i1 %2 = scmp lt i32 %1, i32 0;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.5), ^if.then, ^if.else;
^if.then:
    call (i32) -> void @write(i32 -1);
    ubr ^b;
^if.else:
    i32 %5 = load i32* %num;
    i32 %6 = call (i32) -> i32 @DigitSum(i32 %5);
    call (i32) -> void @write(i32 %6);
    ubr ^b;
^b:
    ret i32 0;
}
