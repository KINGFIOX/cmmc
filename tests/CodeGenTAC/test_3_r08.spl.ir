internal func @read() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @write() -> void { NoMemoryRead NoMemoryWrite };
func @mod(i32 %x, i32 %n) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = sdiv i32 %x, i32 %n;
    i32 %1 = mul i32 %n, i32 %0;
    i32 %2 = sub i32 %x, i32 %1;
    ret i32 %2;
}
func @DigitSum(i32 %y) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^0:
    i1 %1 = icmp eq i32 %y, i32 0;
    cbr i1 %1(prob = 0.5), ^b, ^entry;
  ^entry:
    i32 %2 = phi [^0, i32 %y] [^entry, i32 %4];
    i32 %3 = phi [^0, i32 0] [^entry, i32 %7];
    i32 %4 = sdiv i32 %2, i32 10;
    i32 %5 = mul i32 %4, i32 10;
    i32 %6 = sub i32 %2, i32 %5;
    i32 %7 = add i32 %3, i32 %6;
    i1 %8 = icmp neq i32 %4, i32 0;
    cbr i1 %8(prob = 0.5), ^entry, ^b;
  ^b:
    i32 %9 = phi [^0, i32 0] [^entry, i32 %7];
    ret i32 %9;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    i32 %0 = call () -> i32 @read();
    i1 %1 = icmp slt i32 %0, i32 0;
    cbr i1 %1(prob = 0.5), ^if.then, ^2;
  ^if.then:
    call (i32) -> void @write(i32 -1);
    ubr ^b1;
  ^2:
    i1 %3 = icmp eq i32 %0, i32 0;
    cbr i1 %3(prob = 0.5), ^b, ^entry1;
  ^b:
    i32 %4 = phi [^2, i32 0] [^entry1, i32 %10];
    call (i32) -> void @write(i32 %4);
    ubr ^b1;
  ^entry1:
    i32 %5 = phi [^2, i32 %0] [^entry1, i32 %7];
    i32 %6 = phi [^2, i32 0] [^entry1, i32 %10];
    i32 %7 = sdiv i32 %5, i32 10;
    i32 %8 = mul i32 %7, i32 10;
    i32 %9 = sub i32 %5, i32 %8;
    i32 %10 = add i32 %6, i32 %9;
    i1 %11 = icmp neq i32 %7, i32 0;
    cbr i1 %11(prob = 0.5), ^entry1, ^b;
  ^b1:
    ret i32 0;
}
