struct Operands {i32 o1, i32 o2};

func @read() -> i32 { NoMemoryRead NoMemoryWrite };
func @write() -> void { NoMemoryRead NoMemoryWrite };
func @add(struct Operands* %temp) -> i32 {
^entry:
    struct Operands* %temp1 = alloc struct Operands;
    i32* %0 = getelementptr &(struct Operands* %temp1)[i32 0].o1;
    i32* %1 = getelementptr &(struct Operands* %temp)[i32 0].o1;
    i32 %2 = load i32* %1;
    store i32* %0 with i32 %2;
    i32* %3 = getelementptr &(struct Operands* %temp1)[i32 0].o2;
    i32* %4 = getelementptr &(struct Operands* %temp)[i32 0].o2;
    i32 %5 = load i32* %4;
    store i32* %3 with i32 %5;
    i32* %6 = getelementptr &(struct Operands* %temp1)[i32 0].o1;
    i32 %7 = load i32* %6;
    i32* %8 = getelementptr &(struct Operands* %temp1)[i32 0].o2;
    i32 %9 = load i32* %8;
    i32 %10 = add i32 %7, i32 %9;
    ret i32 %10;
}
func @main() -> i32 {
^entry:
    struct Operands* %op = alloc struct Operands;
    i32* %n = alloc i32;
    store i32* %n with i32 0;
    i32* %0 = getelementptr &(struct Operands* %op)[i32 0].o1;
    store i32* %0 with i32 1;
    i32* %1 = getelementptr &(struct Operands* %op)[i32 0].o2;
    store i32* %1 with i32 2;
    i32 %2 = call (struct Operands*) -> i32 @add(struct Operands* %op);
    store i32* %n with i32 %2;
    i32 %3 = load i32* %n;
    call (i32) -> void @write(i32 %3);
    ret i32 0;
}
