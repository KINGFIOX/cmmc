internal func @read() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @write() -> void { NoMemoryRead NoMemoryWrite };
func @gcd1(i32 %a, i32 %b) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
^entry:
    i32 %0 = sdiv i32 %a, i32 %b;
    i32 %1 = mul i32 %b, i32 %0;
    i32 %2 = sub i32 %a, i32 %1;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^while.body, ^b1;
^while.body:
    i32 %4 = phi [^entry, i32 %b] [^while.body, i32 %5];
    i32 %5 = phi [^entry, i32 %2] [^while.body, i32 %8];
    i32 %6 = sdiv i32 %4, i32 %5;
    i32 %7 = mul i32 %6, i32 %5;
    i32 %8 = sub i32 %4, i32 %7;
    i1 %9 = scmp neq i32 %8, i32 0;
    cbr i1 %9(prob = 0.97), ^while.body, ^b1;
^b1:
    i32 %10 = phi [^entry, i32 %b] [^while.body, i32 %5];
    ret i32 %10;
}
func @gcd2(i32 %x, i32 %y) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^0:
    ubr ^entry;
^entry:
    i32 %1 = phi [^0, i32 %y] [^if.then, i32 %6];
    i32 %2 = phi [^0, i32 %x] [^if.then, i32 %1];
    i1 %3 = scmp gt i32 %2, i32 %1;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32 %4 = sdiv i32 %2, i32 %1;
    i32 %5 = mul i32 %1, i32 %4;
    i32 %6 = sub i32 %2, i32 %5;
    i1 %7 = scmp eq i32 %6, i32 0;
    cbr i1 %7(prob = 0.5), ^b, ^entry;
^if.else:
    i32 %8 = sdiv i32 %1, i32 %2;
    i32 %9 = mul i32 %2, i32 %8;
    i32 %10 = sub i32 %1, i32 %9;
    i1 %11 = scmp eq i32 %10, i32 0;
    cbr i1 %11(prob = 0.5), ^b, ^if.else1;
^if.else1:
    i32 %12 = call (i32, i32) -> i32 @gcd2(i32 %2, i32 %10);
    ubr ^b;
^b:
    i32 %13 = phi [^if.then, i32 %1] [^if.else, i32 %2] [^if.else1, i32 %12];
    ret i32 %13;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
^entry:
    i32 %0 = call () -> i32 @read();
    i32 %1 = call () -> i32 @read();
    i32 %2 = sdiv i32 %0, i32 %1;
    i32 %3 = mul i32 %2, i32 %1;
    i32 %4 = sub i32 %0, i32 %3;
    i1 %5 = scmp neq i32 %4, i32 0;
    cbr i1 %5(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %6 = phi [^entry, i32 %1] [^while.body, i32 %7];
    i32 %7 = phi [^entry, i32 %4] [^while.body, i32 %10];
    i32 %8 = sdiv i32 %6, i32 %7;
    i32 %9 = mul i32 %7, i32 %8;
    i32 %10 = sub i32 %6, i32 %9;
    i1 %11 = scmp neq i32 %10, i32 0;
    cbr i1 %11(prob = 0.97), ^while.body, ^b;
^b:
    i32 %12 = phi [^entry, i32 %1] [^while.body, i32 %7];
    call (i32) -> void @write(i32 %12);
    i32 %13 = call (i32, i32) -> i32 @gcd2(i32 %0, i32 %1);
    call (i32) -> void @write(i32 %13);
    ret i32 0;
}
