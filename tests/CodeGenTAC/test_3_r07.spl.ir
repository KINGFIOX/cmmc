internal func @read() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @write() -> void { NoMemoryRead NoMemoryWrite };
func @gcd1(i32 %a, i32 %b) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = sdiv i32 %a, i32 %b;
    i32 %1 = mul i32 %b, i32 %0;
    i32 %2 = sub i32 %a, i32 %1;
    i1 %3 = icmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^while.body, ^b1;
  ^while.body:
    i32 %4 = phi [^entry, i32 %2] [^while.body, i32 %8];
    i32 %5 = phi [^entry, i32 %b] [^while.body, i32 %4];
    i32 %6 = sdiv i32 %5, i32 %4;
    i32 %7 = mul i32 %4, i32 %6;
    i32 %8 = sub i32 %5, i32 %7;
    i1 %9 = icmp neq i32 %8, i32 0;
    cbr i1 %9(prob = 0.97), ^while.body, ^b1;
  ^b1:
    i32 %10 = phi [^entry, i32 %b] [^while.body, i32 %4];
    ret i32 %10;
}
func @gcd2(i32 %x, i32 %y) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^0:
    ubr ^entry;
  ^entry:
    i32 %1 = phi [^0, i32 %y] [^if.then, i32 %6] [^if.else1, i32 %22];
    i32 %2 = phi [^0, i32 %x] [^if.then, i32 %1] [^if.else1, i32 %13];
    i1 %3 = icmp slt i32 %1, i32 %2;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %4 = sdiv i32 %2, i32 %1;
    i32 %5 = mul i32 %1, i32 %4;
    i32 %6 = sub i32 %2, i32 %5;
    i1 %7 = icmp eq i32 %6, i32 0;
    cbr i1 %7(prob = 0.5), ^b, ^entry;
  ^if.else:
    i32 %8 = sdiv i32 %1, i32 %2;
    i32 %9 = mul i32 %2, i32 %8;
    i32 %10 = sub i32 %1, i32 %9;
    i1 %11 = icmp eq i32 %10, i32 0;
    cbr i1 %11(prob = 0.5), ^b, ^entry1;
  ^entry1:
    i32 %12 = phi [^if.else, i32 %10] [^if.then1, i32 %18];
    i32 %13 = phi [^if.else, i32 %2] [^if.then1, i32 %12];
    i1 %14 = icmp slt i32 %12, i32 %13;
    cbr i1 %14(prob = 0.5), ^if.then1, ^if.else1;
  ^b:
    i32 %15 = phi [^if.then, i32 %1] [^if.else, i32 %2] [^if.then1, i32 %12] [^if.else1, i32 %13];
    ret i32 %15;
  ^if.then1:
    i32 %16 = sdiv i32 %13, i32 %12;
    i32 %17 = mul i32 %12, i32 %16;
    i32 %18 = sub i32 %13, i32 %17;
    i1 %19 = icmp neq i32 %18, i32 0;
    cbr i1 %19(prob = 0.5), ^entry1, ^b;
  ^if.else1:
    i32 %20 = sdiv i32 %12, i32 %13;
    i32 %21 = mul i32 %13, i32 %20;
    i32 %22 = sub i32 %12, i32 %21;
    i1 %23 = icmp eq i32 %22, i32 0;
    cbr i1 %23(prob = 0.5), ^b, ^entry;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    i32 %0 = call () -> i32 @read();
    i32 %1 = call () -> i32 @read();
    i32 %2 = sdiv i32 %0, i32 %1;
    i32 %3 = mul i32 %1, i32 %2;
    i32 %4 = sub i32 %0, i32 %3;
    i1 %5 = icmp neq i32 %4, i32 0;
    cbr i1 %5(prob = 0.97), ^while.body, ^b;
  ^b:
    i32 %6 = phi [^entry, i32 %1] [^while.body, i32 %7];
    call (i32) -> void @write(i32 %6);
    ubr ^entry1;
  ^while.body:
    i32 %7 = phi [^entry, i32 %4] [^while.body, i32 %11];
    i32 %8 = phi [^entry, i32 %1] [^while.body, i32 %7];
    i32 %9 = sdiv i32 %8, i32 %7;
    i32 %10 = mul i32 %7, i32 %9;
    i32 %11 = sub i32 %8, i32 %10;
    i1 %12 = icmp neq i32 %11, i32 0;
    cbr i1 %12(prob = 0.97), ^while.body, ^b;
  ^entry1:
    i32 %13 = phi [^b, i32 %1] [^if.then, i32 %18] [^if.else1, i32 %34];
    i32 %14 = phi [^b, i32 %0] [^if.then, i32 %13] [^if.else1, i32 %25];
    i1 %15 = icmp slt i32 %13, i32 %14;
    cbr i1 %15(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %16 = sdiv i32 %14, i32 %13;
    i32 %17 = mul i32 %13, i32 %16;
    i32 %18 = sub i32 %14, i32 %17;
    i1 %19 = icmp eq i32 %18, i32 0;
    cbr i1 %19(prob = 0.5), ^b1, ^entry1;
  ^if.else:
    i32 %20 = sdiv i32 %13, i32 %14;
    i32 %21 = mul i32 %14, i32 %20;
    i32 %22 = sub i32 %13, i32 %21;
    i1 %23 = icmp eq i32 %22, i32 0;
    cbr i1 %23(prob = 0.5), ^b1, ^entry2;
  ^entry2:
    i32 %24 = phi [^if.else, i32 %22] [^if.then1, i32 %30];
    i32 %25 = phi [^if.else, i32 %14] [^if.then1, i32 %24];
    i1 %26 = icmp slt i32 %24, i32 %25;
    cbr i1 %26(prob = 0.5), ^if.then1, ^if.else1;
  ^b1:
    i32 %27 = phi [^if.then, i32 %13] [^if.else, i32 %14] [^if.then1, i32 %24] [^if.else1, i32 %25];
    call (i32) -> void @write(i32 %27);
    ret i32 0;
  ^if.then1:
    i32 %28 = sdiv i32 %25, i32 %24;
    i32 %29 = mul i32 %24, i32 %28;
    i32 %30 = sub i32 %25, i32 %29;
    i1 %31 = icmp neq i32 %30, i32 0;
    cbr i1 %31(prob = 0.5), ^entry2, ^b1;
  ^if.else1:
    i32 %32 = sdiv i32 %24, i32 %25;
    i32 %33 = mul i32 %25, i32 %32;
    i32 %34 = sub i32 %24, i32 %33;
    i1 %35 = icmp eq i32 %34, i32 0;
    cbr i1 %35(prob = 0.5), ^b1, ^entry1;
}
