internal func @read() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @write() -> void { NoMemoryRead NoMemoryWrite };
func @gcd1(i32 %a, i32 %b) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
^entry:
    i32 %0 = sdiv i32 %a, i32 %b;
    i32 %1 = mul i32 %b, i32 %0;
    i32 %2 = sub i32 %a, i32 %1;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^while.body, ^b1;
^while.body:
    i32 %4 = phi [^entry, i32 %b] [^while.body, i32 %5];
    i32 %5 = phi [^entry, i32 %2] [^while.body, i32 %8];
    i32 %6 = sdiv i32 %4, i32 %5;
    i32 %7 = mul i32 %6, i32 %5;
    i32 %8 = sub i32 %4, i32 %7;
    i1 %9 = scmp neq i32 %8, i32 0;
    cbr i1 %9(prob = 0.97), ^while.body, ^b1;
^b1:
    i32 %10 = phi [^entry, i32 %b] [^while.body, i32 %5];
    ret i32 %10;
}
func @gcd2(i32 %x, i32 %y) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
^0:
    ubr ^1;
^1:
    i32 %2 = phi [^0, i32 %y] [^if.else, i32 %13];
    i32 %3 = phi [^0, i32 %x] [^if.else, i32 %5];
    ubr ^entry;
^entry:
    i32 %4 = phi [^1, i32 %2] [^if.then, i32 %9];
    i32 %5 = phi [^1, i32 %3] [^if.then, i32 %4];
    i1 %6 = scmp gt i32 %5, i32 %4;
    cbr i1 %6(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32 %7 = sdiv i32 %5, i32 %4;
    i32 %8 = mul i32 %4, i32 %7;
    i32 %9 = sub i32 %5, i32 %8;
    i1 %10 = scmp eq i32 %9, i32 0;
    cbr i1 %10(prob = 0.5), ^b, ^entry;
^if.else:
    i32 %11 = sdiv i32 %4, i32 %5;
    i32 %12 = mul i32 %5, i32 %11;
    i32 %13 = sub i32 %4, i32 %12;
    i1 %14 = scmp eq i32 %13, i32 0;
    cbr i1 %14(prob = 0.5), ^b, ^1;
^b:
    i32 %15 = phi [^if.then, i32 %4] [^if.else, i32 %5];
    ret i32 %15;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
^entry:
    i32 %0 = call () -> i32 @read();
    i32 %1 = call () -> i32 @read();
    i32 %2 = sdiv i32 %0, i32 %1;
    i32 %3 = mul i32 %2, i32 %1;
    i32 %4 = sub i32 %0, i32 %3;
    i1 %5 = scmp neq i32 %4, i32 0;
    cbr i1 %5(prob = 0.97), ^while.body, ^b;
^b:
    i32 %6 = phi [^entry, i32 %1] [^while.body, i32 %8];
    call (i32) -> void @write(i32 %6);
    ubr ^13;
^while.body:
    i32 %7 = phi [^entry, i32 %1] [^while.body, i32 %8];
    i32 %8 = phi [^entry, i32 %4] [^while.body, i32 %11];
    i32 %9 = sdiv i32 %7, i32 %8;
    i32 %10 = mul i32 %8, i32 %9;
    i32 %11 = sub i32 %7, i32 %10;
    i1 %12 = scmp neq i32 %11, i32 0;
    cbr i1 %12(prob = 0.97), ^while.body, ^b;
^13:
    i32 %14 = phi [^b, i32 %1] [^if.else, i32 %25];
    i32 %15 = phi [^b, i32 %0] [^if.else, i32 %17];
    ubr ^entry1;
^entry1:
    i32 %16 = phi [^13, i32 %14] [^if.then, i32 %21];
    i32 %17 = phi [^13, i32 %15] [^if.then, i32 %16];
    i1 %18 = scmp gt i32 %17, i32 %16;
    cbr i1 %18(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32 %19 = sdiv i32 %17, i32 %16;
    i32 %20 = mul i32 %16, i32 %19;
    i32 %21 = sub i32 %17, i32 %20;
    i1 %22 = scmp eq i32 %21, i32 0;
    cbr i1 %22(prob = 0.5), ^b1, ^entry1;
^if.else:
    i32 %23 = sdiv i32 %16, i32 %17;
    i32 %24 = mul i32 %17, i32 %23;
    i32 %25 = sub i32 %16, i32 %24;
    i1 %26 = scmp eq i32 %25, i32 0;
    cbr i1 %26(prob = 0.5), ^b1, ^13;
^b1:
    i32 %27 = phi [^if.then, i32 %16] [^if.else, i32 %17];
    call (i32) -> void @write(i32 %27);
    ret i32 0;
}
