func @read() -> i32 { NoMemoryRead NoMemoryWrite };
func @write() -> void { NoMemoryRead NoMemoryWrite };
func @gcd1(i32 %a, i32 %b) -> i32 {
^entry:
    i32* %temp = alloc i32;
    i32* %result = alloc i32;
    i32* %b1 = alloc i32;
    i32* %a1 = alloc i32;
    store i32* %a1 with i32 %a;
    store i32* %b1 with i32 %b;
    store i32* %result with i32 0;
    store i32* %temp with i32 0;
    i32 %0 = load i32* %a1;
    i32 %1 = load i32* %a1;
    i32 %2 = load i32* %b1;
    i32 %3 = sdiv i32 %1, i32 %2;
    i32 %4 = load i32* %b1;
    i32 %5 = mul i32 %3, i32 %4;
    i32 %6 = sub i32 %0, i32 %5;
    store i32* %temp with i32 %6;
    ubr ^while.header;
^while.header:
    i32 %7 = load i32* %temp;
    i1 %8 = scmp neq i32 %7, i32 0;
    i32 %9 = zext i1 %8 to i32;
    i1 %10 = scmp neq i32 %9, i32 0;
    cbr i1 %10(prob = 0.97), ^while.body, ^b2;
^while.body:
    i32 %11 = load i32* %b1;
    store i32* %a1 with i32 %11;
    i32 %12 = load i32* %temp;
    store i32* %b1 with i32 %12;
    i32 %13 = load i32* %a1;
    i32 %14 = load i32* %a1;
    i32 %15 = load i32* %b1;
    i32 %16 = sdiv i32 %14, i32 %15;
    i32 %17 = load i32* %b1;
    i32 %18 = mul i32 %16, i32 %17;
    i32 %19 = sub i32 %13, i32 %18;
    store i32* %temp with i32 %19;
    ubr ^while.header;
^b2:
    i32 %20 = load i32* %b1;
    store i32* %result with i32 %20;
    i32 %21 = load i32* %result;
    ret i32 %21;
}
func @gcd2(i32 %x, i32 %y) -> i32 {
^entry:
    i32* %remainde = alloc i32;
    i32* %y1 = alloc i32;
    i32* %x1 = alloc i32;
    store i32* %x1 with i32 %x;
    store i32* %y1 with i32 %y;
    store i32* %remainde with i32 0;
    i32 %0 = load i32* %x1;
    i32 %1 = load i32* %y1;
    i1 %2 = scmp gt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32 %5 = load i32* %x1;
    i32 %6 = load i32* %x1;
    i32 %7 = load i32* %y1;
    i32 %8 = sdiv i32 %6, i32 %7;
    i32 %9 = load i32* %y1;
    i32 %10 = mul i32 %8, i32 %9;
    i32 %11 = sub i32 %5, i32 %10;
    store i32* %remainde with i32 %11;
    i32 %12 = load i32* %remainde;
    i1 %13 = scmp eq i32 %12, i32 0;
    i32 %14 = zext i1 %13 to i32;
    i1 %15 = scmp neq i32 %14, i32 0;
    cbr i1 %15(prob = 0.5), ^if.then1, ^if.else1;
^if.else:
    i32 %16 = load i32* %y1;
    i32 %17 = load i32* %y1;
    i32 %18 = load i32* %x1;
    i32 %19 = sdiv i32 %17, i32 %18;
    i32 %20 = load i32* %x1;
    i32 %21 = mul i32 %19, i32 %20;
    i32 %22 = sub i32 %16, i32 %21;
    store i32* %remainde with i32 %22;
    i32 %23 = load i32* %remainde;
    i1 %24 = scmp eq i32 %23, i32 0;
    i32 %25 = zext i1 %24 to i32;
    i1 %26 = scmp neq i32 %25, i32 0;
    cbr i1 %26(prob = 0.5), ^if.then2, ^if.else2;
^if.then1:
    i32 %27 = load i32* %y1;
    ret i32 %27;
^if.else1:
    i32 %28 = load i32* %y1;
    i32 %29 = load i32* %remainde;
    i32 %30 = call (i32, i32) -> i32 @gcd2(i32 %28, i32 %29);
    ret i32 %30;
^if.then2:
    i32 %31 = load i32* %x1;
    ret i32 %31;
^if.else2:
    i32 %32 = load i32* %x1;
    i32 %33 = load i32* %remainde;
    i32 %34 = call (i32, i32) -> i32 @gcd2(i32 %32, i32 %33);
    ret i32 %34;
^b:
    unreachable;
^b1:
    ubr ^b;
^b2:
    ubr ^b;
}
func @main() -> i32 {
^entry:
    i32* %n = alloc i32;
    i32* %m = alloc i32;
    i32 %0 = call () -> i32 @read();
    store i32* %m with i32 %0;
    i32 %1 = call () -> i32 @read();
    store i32* %n with i32 %1;
    i32 %2 = load i32* %m;
    i32 %3 = load i32* %n;
    i32 %4 = call (i32, i32) -> i32 @gcd1(i32 %2, i32 %3);
    call (i32) -> void @write(i32 %4);
    i32 %5 = load i32* %m;
    i32 %6 = load i32* %n;
    i32 %7 = call (i32, i32) -> i32 @gcd2(i32 %5, i32 %6);
    call (i32) -> void @write(i32 %7);
    ret i32 0;
}
