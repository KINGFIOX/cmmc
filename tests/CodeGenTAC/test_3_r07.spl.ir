func @read() -> i32 { NoMemoryRead NoMemoryWrite };
func @write(i32) -> void { NoMemoryRead NoMemoryWrite };
func @gcd1(i32, i32) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
^entry(i32 %arg, i32 %arg1):
    i32 %0 = sdiv i32 %arg, i32 %arg1;
    i32 %1 = mul i32 %arg1, i32 %0;
    i32 %2 = sub i32 %arg, i32 %1;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3, [ ^while.body i32 %arg1, i32 %2 ], [ ^b i32 %arg1 ];
^while.body(i32 %arg, i32 %arg1):
    i32 %0 = sdiv i32 %arg, i32 %arg1;
    i32 %1 = mul i32 %arg1, i32 %0;
    i32 %2 = sub i32 %arg, i32 %1;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3, [ ^while.body i32 %arg1, i32 %2 ], [ ^b i32 %arg1 ];
^b(i32 %arg):
    ret i32 %arg;
}
func @gcd2(i32, i32) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
^entry(i32 %arg, i32 %arg1):
    i32* %x = alloc i32;
    store i32* %x with i32 %arg;
    i32* %y = alloc i32;
    store i32* %y with i32 %arg1;
    i32* %remainder = alloc i32;
    i1 %0 = scmp gt i32 %arg, i32 %arg1;
    cbr i1 %0, [ ^indirect i32* %remainder, i32* %y, i32 %arg1, i32 %arg ], [ ^indirect i32* %remainder, i32* %x, i32 %arg, i32 %arg1 ];
^indirect(i32* %arg, i32* %arg1, i32 %arg2, i32 %arg3):
    i32 %0 = sdiv i32 %arg3, i32 %arg2;
    i32 %1 = mul i32 %arg2, i32 %0;
    i32 %2 = sub i32 %arg3, i32 %1;
    store i32* %arg with i32 %2;
    i1 %3 = scmp eq i32 %2, i32 0;
    cbr i1 %3, [ ^if.then i32* %arg1 ], [ ^if.else i32* %arg1, i32 %2 ];
^if.then(i32* %arg):
    i32 %0 = load i32* %arg;
    ret i32 %0;
^if.else(i32* %arg, i32 %arg1):
    i32 %0 = load i32* %arg;
    i32 %1 = call (i32, i32) -> i32 @gcd2(i32 %0, i32 %arg1);
    ret i32 %1;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
^entry():
    i32 %0 = call () -> i32 @read();
    i32 %1 = call () -> i32 @read();
    i32 %2 = sdiv i32 %0, i32 %1;
    i32 %3 = mul i32 %1, i32 %2;
    i32 %4 = sub i32 %0, i32 %3;
    i1 %5 = scmp neq i32 %4, i32 0;
    cbr i1 %5, [ ^while.body i32 %0, i32 %1, i32 %1, i32 %4 ], [ ^b i32 %0, i32 %1, i32 %1 ];
^while.body(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32 %0 = sdiv i32 %arg2, i32 %arg3;
    i32 %1 = mul i32 %0, i32 %arg3;
    i32 %2 = sub i32 %arg2, i32 %1;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3, [ ^while.body i32 %arg, i32 %arg1, i32 %arg3, i32 %2 ], [ ^b i32 %arg, i32 %arg1, i32 %arg3 ];
^b(i32 %arg, i32 %arg1, i32 %arg2):
    call (i32) -> void @write(i32 %arg2);
    i32 %0 = call (i32, i32) -> i32 @gcd2(i32 %arg, i32 %arg1);
    call (i32) -> void @write(i32 %0);
    ret i32 0;
}
