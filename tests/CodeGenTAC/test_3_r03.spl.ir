func @read() -> i32 { NoMemoryRead NoMemoryWrite };
func @write(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
^entry():
    i32* %num = alloc i32;
    store i32* %num with i32 0;
    i32* %i = alloc i32;
    store i32* %i with i32 1;
    i32* %k = alloc i32;
    store i32* %k with i32 1;
    ubr [ ^indirect i32* %num, i32* %k, i32* %i, i32 30, i32 1 ];
^indirect(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4):
    i1 %0 = scmp le i32 1, i32 %arg4;
    cbr i1 %0, [ ^indirect1 i32* %arg, i32* %arg2, i32* %arg1, i32 %arg4, i32 %arg3, i32 0, i32 1, i32 %arg4 ], [ ^b i32* %arg1, i32* %arg2, i32* %arg, i32 %arg3, i32 0, i32 %arg4 ];
^indirect1(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i32 %0 = sdiv i32 %arg3, i32 %arg6;
    i32 %1 = mul i32 %0, i32 %arg6;
    i1 %2 = scmp eq i32 %arg3, i32 %1;
    cbr i1 %2, [ ^indirect2 i32* %arg1, i32* %arg2, i32* %arg, i32 %arg6, i32 %arg4, i32 %arg5, i32 %arg7 ], [ ^b1 i32* %arg, i32* %arg2, i32* %arg1, i32 %arg6, i32 %arg4, i32 %arg5, i32 %arg7 ];
^b(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5):
    i1 %0 = scmp eq i32 %arg4, i32 2;
    cbr i1 %0, [ ^if.then i32* %arg1, i32* %arg2, i32* %arg, i32 %arg3, i32 %arg5 ], [ ^indirect3 i32* %arg, i32* %arg2, i32* %arg1, i32 %arg3, i32 %arg5 ];
^if.then(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4):
    call (i32) -> void @write(i32 %arg4);
    store i32* %arg with i32 1;
    store i32* %arg1 with i32 0;
    i32 %0 = add i32 %arg4, i32 1;
    store i32* %arg2 with i32 %0;
    ubr [ ^while.header i32* %arg1, i32* %arg, i32* %arg2, i32 %arg3, i32 %0, i32 %arg3, i32 %0 ];
^indirect2(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6):
    i32 %0 = add i32 %arg5, i32 1;
    store i32* %arg2 with i32 %0;
    i32 %1 = add i32 %arg3, i32 1;
    store i32* %arg with i32 %1;
    i1 %2 = scmp le i32 %1, i32 %arg6;
    cbr i1 %2, [ ^indirect1 i32* %arg2, i32* %arg, i32* %arg1, i32 %arg6, i32 %arg4, i32 %0, i32 %1, i32 %arg6 ], [ ^b i32* %arg1, i32* %arg, i32* %arg2, i32 %arg4, i32 %0, i32 %arg6 ];
^indirect3(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4):
    store i32* %arg2 with i32 1;
    store i32* %arg1 with i32 0;
    i32 %0 = add i32 %arg4, i32 1;
    store i32* %arg with i32 %0;
    ubr [ ^while.header i32* %arg1, i32* %arg2, i32* %arg, i32 %arg3, i32 %0, i32 %arg3, i32 %0 ];
^b1(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6):
    i32 %0 = add i32 %arg3, i32 1;
    store i32* %arg2 with i32 %0;
    i1 %1 = scmp le i32 %0, i32 %arg6;
    cbr i1 %1, [ ^indirect1 i32* %arg, i32* %arg2, i32* %arg1, i32 %arg6, i32 %arg4, i32 %arg5, i32 %0, i32 %arg6 ], [ ^b i32* %arg1, i32* %arg2, i32* %arg, i32 %arg4, i32 %arg5, i32 %arg6 ];
^while.header(i32* %arg, i32* %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6):
    i1 %0 = scmp le i32 %arg4, i32 %arg3;
    cbr i1 %0, [ ^indirect i32* %arg, i32* %arg2, i32* %arg1, i32 %arg5, i32 %arg6 ], [ ^b2 ];
^b2():
    ret i32 0;
}
