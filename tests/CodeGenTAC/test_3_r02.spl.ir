func @read() -> i32 { NoMemoryRead NoMemoryWrite };
func @write(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
^entry():
    i32 %0 = call () -> i32 @read();
    i32 %1 = call () -> i32 @read();
    i32 %2 = sdiv i32 %0, i32 100;
    i32 %3 = mul i32 %2, i32 100;
    i1 %4 = scmp eq i32 %0, i32 %3;
    cbr i1 %4(prob = 0.5), [ ^indirect i32 %0, i32 %1 ], [ ^indirect1 i32 %0, i32 %1 ];
^indirect(i32 %arg, i32 %arg1):
    i32 %0 = sdiv i32 %arg, i32 400;
    i32 %1 = mul i32 %0, i32 400;
    i1 %2 = scmp eq i32 %arg, i32 %1;
    cbr i1 %2(prob = 0.5), [ ^if.then i32 %arg1 ], [ ^if.else i32 %arg1 ];
^indirect1(i32 %arg, i32 %arg1):
    i32 %0 = sdiv i32 %arg, i32 4;
    i32 %1 = mul i32 %0, i32 4;
    i1 %2 = scmp eq i32 %arg, i32 %1;
    cbr i1 %2(prob = 0.5), [ ^if.then i32 %arg1 ], [ ^if.else i32 %arg1 ];
^if.then(i32 %arg):
    i1 %0 = scmp eq i32 %arg, i32 2;
    cbr i1 %0(prob = 0.5), [ ^if.then1 ], [ ^indirect2 i32 %arg ];
^if.else(i32 %arg):
    i1 %0 = scmp eq i32 %arg, i32 2;
    cbr i1 %0(prob = 0.5), [ ^if.then2 ], [ ^indirect2 i32 %arg ];
^indirect2(i32 %arg):
    i32 %0 = sdiv i32 %arg, i32 2;
    i32 %1 = mul i32 %0, i32 2;
    i1 %2 = scmp eq i32 %arg, i32 %1;
    cbr i1 %2(prob = 0.5), [ ^if.then3 ], [ ^if.else1 ];
^if.then1():
    call (i32) -> void @write(i32 29);
    ret i32 0;
^if.then2():
    call (i32) -> void @write(i32 28);
    ret i32 0;
^if.then3():
    call (i32) -> void @write(i32 30);
    ret i32 0;
^if.else1():
    call (i32) -> void @write(i32 31);
    ret i32 0;
}
