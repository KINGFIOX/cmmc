internal func @read() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @write() -> void { NoMemoryRead NoMemoryWrite };
func @fact(i32 %n) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^0:
    i1 %1 = icmp eq i32 %n, i32 1;
    cbr i1 %1(prob = 0.5), ^b, ^if.else;
  ^if.else:
    i32 %2 = phi [^0, i32 %n] [^if.else, i32 %5];
    i32 %3 = phi [^0, i32 1] [^if.else, i32 %4];
    i32 %4 = mul i32 %2, i32 %3;
    i32 %5 = add i32 %2, i32 -1;
    i1 %6 = icmp neq i32 %5, i32 1;
    cbr i1 %6(prob = 0.5), ^if.else, ^b;
  ^b:
    i32 %7 = phi [^0, i32 %n] [^if.else, i32 %5];
    i32 %8 = phi [^0, i32 1] [^if.else, i32 %4];
    i32 %9 = mul i32 %7, i32 %8;
    ret i32 %9;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    i32 %0 = call () -> i32 @read();
    i1 %1 = icmp sgt i32 %0, i32 1;
    cbr i1 %1(prob = 0.5), ^if.else, ^b;
  ^if.else:
    i32 %2 = phi [^entry, i32 %0] [^if.else, i32 %5];
    i32 %3 = phi [^entry, i32 1] [^if.else, i32 %4];
    i32 %4 = mul i32 %2, i32 %3;
    i32 %5 = add i32 %2, i32 -1;
    i1 %6 = icmp neq i32 %5, i32 1;
    cbr i1 %6(prob = 0.5), ^if.else, ^b1;
  ^b:
    i32 %7 = phi [^entry, i32 1] [^b1, i32 %8];
    call (i32) -> void @write(i32 %7);
    ret i32 0;
  ^b1:
    i32 %8 = mul i32 %4, i32 %5;
    ubr ^b;
}
