internal func @write() -> void { NoMemoryRead NoMemoryWrite };
func @hanoi(i32 %n, i32 %p1, i32 %p2, i32 %p3) -> i32 { NoMemoryRead NoMemoryWrite } {
^0:
    i1 %1 = scmp eq i32 %n, i32 1;
    cbr i1 %1(prob = 0.5), ^if.then, ^if.else;
^if.else:
    i32 %2 = phi [^0, i32 %n] [^if.else, i32 %7];
    i32 %3 = phi [^0, i32 %p1] [^if.else, i32 %4];
    i32 %4 = phi [^0, i32 %p2] [^if.else, i32 %3];
    i32 %5 = phi [^0, i32 undef] [^if.else, i32 %11];
    i1 %6 = phi [^0, i1 false] [^if.else, i1 true];
    i32 %7 = add i32 %2, i32 -1;
    i32 %8 = call (i32, i32, i32, i32) -> i32 @hanoi(i32 %7, i32 %3, i32 %p3, i32 %4);
    i32 %9 = mul i32 %3, i32 1000000;
    i32 %10 = add i32 %p3, i32 %9;
    call (i32) -> void @write(i32 %10);
    i32 %11 = select i1 %6 ? i32 %5 : i32 0;
    i1 %12 = scmp eq i32 %7, i32 1;
    cbr i1 %12(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32 %13 = phi [^0, i32 %p1] [^if.else, i32 %4];
    i32 %14 = phi [^0, i32 undef] [^if.else, i32 %11];
    i1 %15 = phi [^0, i1 false] [^if.else, i1 true];
    i32 %16 = mul i32 %13, i32 1000000;
    i32 %17 = add i32 %p3, i32 %16;
    call (i32) -> void @write(i32 %17);
    i32 %18 = select i1 %15 ? i32 %14 : i32 0;
    ret i32 %18;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
^entry:
    i32 %0 = call (i32, i32, i32, i32) -> i32 @hanoi(i32 3, i32 1, i32 2, i32 3);
    ret i32 0;
}
