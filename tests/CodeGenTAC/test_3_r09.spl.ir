func @read() -> i32 { NoMemoryRead NoMemoryWrite };
func @write() -> void { NoMemoryRead NoMemoryWrite };
func @mod(i32 %number2, i32 %m2) -> i32 {
^entry:
    i32* %result2 = alloc i32;
    i32* %result = alloc i32;
    i32* %m21 = alloc i32;
    i32* %number21 = alloc i32;
    store i32* %number21 with i32 %number2;
    store i32* %m21 with i32 %m2;
    i32 %0 = load i32* %number21;
    i32 %1 = load i32* %number21;
    i32 %2 = load i32* %m21;
    i32 %3 = sdiv i32 %1, i32 %2;
    i32 %4 = load i32* %m21;
    i32 %5 = mul i32 %3, i32 %4;
    i32 %6 = sub i32 %0, i32 %5;
    store i32* %result with i32 %6;
    i32 %7 = load i32* %result;
    store i32* %result2 with i32 %7;
    i32 %8 = load i32* %result;
    ret i32 %8;
}
func @power(i32 %base1, i32 %p1) -> i32 {
^entry:
    i32* %ret1 = alloc i32;
    i32* %p11 = alloc i32;
    i32* %base11 = alloc i32;
    store i32* %base11 with i32 %base1;
    store i32* %p11 with i32 %p1;
    i32 %0 = load i32* %p11;
    i32 %1 = add i32 1, i32 %0;
    i32 %2 = load i32* %p11;
    i32 %3 = sub i32 %1, i32 %2;
    store i32* %ret1 with i32 %3;
    ubr ^while.header;
^while.header:
    i32 %4 = load i32* %p11;
    i32 %5 = load i32* %ret1;
    i32 %6 = load i32* %ret1;
    i32 %7 = sub i32 %5, i32 %6;
    i32 %8 = add i32 %7, i32 90;
    i32 %9 = sub i32 %8, i32 89;
    i32 %10 = add i32 %9, i32 1;
    i32 %11 = sub i32 %10, i32 2;
    i1 %12 = scmp gt i32 %4, i32 %11;
    i32 %13 = zext i1 %12 to i32;
    i1 %14 = scmp neq i32 %13, i32 0;
    cbr i1 %14(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %15 = load i32* %ret1;
    i32 %16 = load i32* %base11;
    i32 %17 = mul i32 %15, i32 %16;
    store i32* %ret1 with i32 %17;
    i32 %18 = load i32* %p11;
    i32 %19 = mul i32 2, i32 %18;
    i32 %20 = load i32* %p11;
    i32 %21 = mul i32 1, i32 %20;
    i32 %22 = sub i32 %19, i32 %21;
    i32 %23 = sub i32 %22, i32 1;
    store i32* %p11 with i32 %23;
    ubr ^while.header;
^b:
    i32 %24 = load i32* %ret1;
    ret i32 %24;
}
func @getNumDigits(i32 %number3) -> i32 {
^entry:
    i32* %ret3 = alloc i32;
    i32* %number31 = alloc i32;
    store i32* %number31 with i32 %number3;
    store i32* %ret3 with i32 0;
    i32 %0 = load i32* %number31;
    i1 %1 = scmp lt i32 %0, i32 0;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^b;
^b:
    ubr ^while.header;
^if.then:
    ret i32 -1;
^while.header:
    i32 %4 = load i32* %number31;
    i1 %5 = scmp gt i32 %4, i32 0;
    i32 %6 = zext i1 %5 to i32;
    i1 %7 = scmp neq i32 %6, i32 0;
    cbr i1 %7(prob = 0.97), ^while.body, ^b1;
^while.body:
    i32 %8 = load i32* %number31;
    i32 %9 = sdiv i32 %8, i32 10;
    store i32* %number31 with i32 %9;
    i32 %10 = load i32* %ret3;
    i32 %11 = add i32 %10, i32 2;
    store i32* %ret3 with i32 %11;
    i32 %12 = load i32* %ret3;
    i32 %13 = add i32 %12, i32 2;
    store i32* %ret3 with i32 %13;
    i32 %14 = load i32* %ret3;
    i32 %15 = sub i32 %14, i32 3;
    store i32* %ret3 with i32 %15;
    ubr ^while.header;
^b1:
    i32 %16 = load i32* %ret3;
    ret i32 %16;
}
func @isNarcissistic(i32 %number4) -> i32 {
^entry:
    i32* %s4 = alloc i32;
    i32* %n4 = alloc i32;
    i32* %sum4 = alloc i32;
    i32* %numDigit = alloc i32;
    i32* %number41 = alloc i32;
    store i32* %number41 with i32 %number4;
    i32 %0 = load i32* %number41;
    i32 %1 = add i32 1, i32 %0;
    i32 %2 = sub i32 %1, i32 1;
    i32 %3 = call (i32) -> i32 @getNumDigits(i32 %2);
    store i32* %numDigit with i32 %3;
    store i32* %sum4 with i32 0;
    i32 %4 = load i32* %number41;
    store i32* %n4 with i32 %4;
    store i32* %s4 with i32 0;
    ubr ^while.header;
^while.header:
    i32 %5 = load i32* %n4;
    i1 %6 = scmp gt i32 %5, i32 0;
    i32 %7 = zext i1 %6 to i32;
    i1 %8 = scmp neq i32 %7, i32 0;
    cbr i1 %8(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %9 = load i32* %n4;
    i32 %10 = call (i32, i32) -> i32 @mod(i32 %9, i32 10);
    store i32* %s4 with i32 %10;
    i32 %11 = load i32* %n4;
    i32 %12 = load i32* %s4;
    i32 %13 = sub i32 %11, i32 %12;
    i32 %14 = sdiv i32 %13, i32 10;
    store i32* %n4 with i32 %14;
    i32 %15 = load i32* %sum4;
    i32 %16 = load i32* %s4;
    i32 %17 = load i32* %numDigit;
    i32 %18 = call (i32, i32) -> i32 @power(i32 %16, i32 %17);
    i32 %19 = add i32 %15, i32 %18;
    store i32* %sum4 with i32 %19;
    ubr ^while.header;
^b:
    i32 %20 = load i32* %sum4;
    i32 %21 = load i32* %number41;
    i1 %22 = scmp eq i32 %20, i32 %21;
    i32 %23 = zext i1 %22 to i32;
    i1 %24 = scmp neq i32 %23, i32 0;
    cbr i1 %24(prob = 0.5), ^if.then, ^if.else;
^if.then:
    ret i32 1;
^if.else:
    ret i32 0;
^b1:
    unreachable;
}
func @main() -> i32 {
^entry:
    i32* %i = alloc i32;
    i32* %count = alloc i32;
    store i32* %count with i32 0;
    store i32* %i with i32 300;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i1 %1 = scmp lt i32 %0, i32 500;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %4 = load i32* %i;
    i32 %5 = call (i32) -> i32 @isNarcissistic(i32 %4);
    i1 %6 = scmp eq i32 %5, i32 1;
    i32 %7 = zext i1 %6 to i32;
    i1 %8 = scmp neq i32 %7, i32 0;
    cbr i1 %8(prob = 0.5), ^if.then, ^b1;
^b:
    i32 %9 = load i32* %count;
    call (i32) -> void @write(i32 %9);
    i32 %10 = load i32* %count;
    ret i32 %10;
^if.then:
    i32 %11 = load i32* %i;
    call (i32) -> void @write(i32 %11);
    i32 %12 = load i32* %count;
    i32 %13 = add i32 %12, i32 1;
    store i32* %count with i32 %13;
    ubr ^b1;
^b1:
    i32 %14 = load i32* %i;
    i32 %15 = add i32 %14, i32 1;
    store i32* %i with i32 %15;
    ubr ^while.header;
}
