func @read() -> i32 { NoMemoryRead NoMemoryWrite };
func @write(i32) -> void { NoMemoryRead NoMemoryWrite };
func @mod(i32, i32) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
^entry(i32 %arg, i32 %arg1):
    i32 %0 = sdiv i32 %arg, i32 %arg1;
    i32 %1 = mul i32 %0, i32 %arg1;
    i32 %2 = sub i32 %arg, i32 %1;
    ret i32 %2;
}
func @power(i32, i32) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
^entry(i32 %arg, i32 %arg1):
    i32 %0 = add i32 %arg1, i32 1;
    i32 %1 = sub i32 %0, i32 %arg1;
    i1 %2 = scmp gt i32 %arg1, i32 0;
    cbr i1 %2, [ ^while.body i32 %arg, i32 %arg1, i32 %1 ], [ ^b i32 %1 ];
^while.body(i32 %arg, i32 %arg1, i32 %arg2):
    i32 %0 = mul i32 %arg2, i32 %arg;
    i32 %1 = mul i32 2, i32 %arg1;
    i32 %2 = sub i32 %1, i32 %arg1;
    i32 %3 = sub i32 %2, i32 1;
    i1 %4 = scmp gt i32 %3, i32 0;
    cbr i1 %4, [ ^while.body i32 %arg, i32 %3, i32 %0 ], [ ^b i32 %0 ];
^b(i32 %arg):
    ret i32 %arg;
}
func @getNumDigits(i32) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
^entry(i32 %arg):
    i1 %0 = scmp lt i32 %arg, i32 0;
    cbr i1 %0, [ ^if.then ], [ ^while.header i32 %arg, i32 %arg ];
^while.header(i32 %arg, i32 %arg1):
    i1 %0 = scmp gt i32 %arg, i32 0;
    cbr i1 %0, [ ^while.body i32 %arg1, i32 0 ], [ ^b i32 0 ];
^if.then():
    ret i32 -1;
^while.body(i32 %arg, i32 %arg1):
    i32 %0 = sdiv i32 %arg, i32 10;
    i32 %1 = add i32 %arg1, i32 1;
    i1 %2 = scmp gt i32 %0, i32 0;
    cbr i1 %2, [ ^while.body i32 %0, i32 %1 ], [ ^b i32 %1 ];
^b(i32 %arg):
    ret i32 %arg;
}
func @isNarcissistic(i32) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
^entry(i32 %arg):
    i1 %0 = scmp lt i32 %arg, i32 0;
    cbr i1 %0, [ ^entry1 i32 -1, i32 %arg, i32 %arg ], [ ^while.header i32 %arg, i32 %arg, i32 %arg, i32 %arg ];
^entry1(i32 %arg, i32 %arg1, i32 %arg2):
    i1 %0 = scmp gt i32 %arg1, i32 0;
    cbr i1 %0, [ ^while.body i32 %arg2, i32 %arg, i32 0, i32 %arg1 ], [ ^b i32 %arg2, i32 0 ];
^while.header(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i1 %0 = scmp gt i32 %arg, i32 0;
    cbr i1 %0, [ ^while.body1 i32 %arg1, i32 %arg2, i32 %arg3, i32 0 ], [ ^entry1 i32 0, i32 %arg1, i32 %arg2 ];
^while.body(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32 %0 = sdiv i32 %arg3, i32 10;
    i32 %1 = mul i32 %0, i32 10;
    i32 %2 = sub i32 %arg3, i32 %1;
    i32 %3 = sub i32 %arg3, i32 %2;
    i32 %4 = sdiv i32 %3, i32 10;
    i32 %5 = add i32 %arg1, i32 1;
    i32 %6 = sub i32 %5, i32 %arg1;
    i1 %7 = scmp gt i32 %arg1, i32 0;
    cbr i1 %7, [ ^while.body2 i32 %arg2, i32 %4, i32 %arg, i32 %arg1, i32 %4, i32 %2, i32 %arg1, i32 %6 ], [ ^b1 i32 %arg2, i32 %4, i32 %arg, i32 %arg1, i32 %4, i32 %6 ];
^while.body1(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32 %0 = sdiv i32 %arg2, i32 10;
    i32 %1 = add i32 %arg3, i32 1;
    i1 %2 = scmp gt i32 %0, i32 0;
    cbr i1 %2, [ ^while.body1 i32 %arg, i32 %arg1, i32 %0, i32 %1 ], [ ^entry1 i32 %1, i32 %arg, i32 %arg1 ];
^b(i32 %arg, i32 %arg1):
    i1 %0 = scmp eq i32 %arg1, i32 %arg;
    cbr i1 %0, [ ^if.then ], [ ^if.else ];
^while.body2(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i32 %0 = mul i32 %arg7, i32 %arg5;
    i32 %1 = mul i32 2, i32 %arg6;
    i32 %2 = sub i32 %1, i32 %arg6;
    i32 %3 = sub i32 %2, i32 1;
    i1 %4 = scmp gt i32 %3, i32 0;
    cbr i1 %4, [ ^while.body2 i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %3, i32 %0 ], [ ^b1 i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %0 ];
^b1(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5):
    i32 %0 = add i32 %arg, i32 %arg5;
    i1 %1 = scmp gt i32 %arg1, i32 0;
    cbr i1 %1, [ ^while.body i32 %arg2, i32 %arg3, i32 %0, i32 %arg4 ], [ ^b i32 %arg2, i32 %0 ];
^if.then():
    ret i32 1;
^if.else():
    ret i32 0;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
^entry():
    ubr [ ^while.body i32 0, i32 300 ];
^while.body(i32 %arg, i32 %arg1):
    i1 %0 = scmp lt i32 %arg1, i32 0;
    cbr i1 %0, [ ^entry1 i32 -1, i32 %arg1, i32 %arg1, i32 %arg, i32 %arg1 ], [ ^while.header i32 %arg1, i32 %arg1, i32 %arg1, i32 %arg, i32 %arg1, i32 %arg1 ];
^entry1(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4):
    i1 %0 = scmp gt i32 %arg1, i32 0;
    cbr i1 %0, [ ^while.body1 i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg, i32 0, i32 %arg1 ], [ ^b i32 %arg2, i32 %arg3, i32 %arg4, i32 0 ];
^while.header(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5):
    i1 %0 = scmp gt i32 %arg, i32 0;
    cbr i1 %0, [ ^while.body2 i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 0 ], [ ^entry1 i32 0, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4 ];
^while.body1(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5):
    i32 %0 = sdiv i32 %arg5, i32 10;
    i32 %1 = mul i32 %0, i32 10;
    i32 %2 = sub i32 %arg5, i32 %1;
    i32 %3 = sub i32 %arg5, i32 %2;
    i32 %4 = sdiv i32 %3, i32 10;
    i32 %5 = add i32 %arg3, i32 1;
    i32 %6 = sub i32 %5, i32 %arg3;
    i1 %7 = scmp gt i32 %arg3, i32 0;
    cbr i1 %7, [ ^while.body3 i32 %arg4, i32 %4, i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %4, i32 %2, i32 %arg3, i32 %6 ], [ ^b1 i32 %arg4, i32 %4, i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %4, i32 %6 ];
^while.body2(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5):
    i32 %0 = sdiv i32 %arg4, i32 10;
    i32 %1 = add i32 %arg5, i32 1;
    i1 %2 = scmp gt i32 %0, i32 0;
    cbr i1 %2, [ ^while.body2 i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %0, i32 %1 ], [ ^entry1 i32 %1, i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3 ];
^b(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i1 %0 = scmp eq i32 %arg3, i32 %arg2;
    cbr i1 %0, [ ^while.body4 i32 1, i32 %arg, i32 %arg1 ], [ ^while.body4 i32 0, i32 %arg, i32 %arg1 ];
^while.body3(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i32 %0 = mul i32 %arg9, i32 %arg7;
    i32 %1 = mul i32 2, i32 %arg8;
    i32 %2 = sub i32 %1, i32 %arg8;
    i32 %3 = sub i32 %2, i32 1;
    i1 %4 = scmp gt i32 %3, i32 0;
    cbr i1 %4, [ ^while.body3 i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %3, i32 %0 ], [ ^b1 i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %0 ];
^while.body4(i32 %arg, i32 %arg1, i32 %arg2):
    i1 %0 = scmp eq i32 %arg, i32 1;
    cbr i1 %0, [ ^indirect i32 %arg1, i32 %arg1, i32 %arg2 ], [ ^b2 i32 %arg1, i32 %arg2 ];
^b1(i32 %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7):
    i32 %0 = add i32 %arg, i32 %arg7;
    i1 %1 = scmp gt i32 %arg1, i32 0;
    cbr i1 %1, [ ^while.body1 i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %0, i32 %arg6 ], [ ^b i32 %arg2, i32 %arg3, i32 %arg4, i32 %0 ];
^indirect(i32 %arg, i32 %arg1, i32 %arg2):
    call (i32) -> void @write(i32 %arg);
    i32 %0 = add i32 %arg2, i32 1;
    i32 %1 = add i32 %arg1, i32 1;
    i1 %2 = scmp lt i32 %1, i32 500;
    cbr i1 %2, [ ^while.body i32 %0, i32 %1 ], [ ^b3 i32 %0 ];
^b2(i32 %arg, i32 %arg1):
    i32 %0 = add i32 %arg, i32 1;
    i1 %1 = scmp lt i32 %0, i32 500;
    cbr i1 %1, [ ^while.body i32 %arg1, i32 %0 ], [ ^b3 i32 %arg1 ];
^b3(i32 %arg):
    call (i32) -> void @write(i32 %arg);
    ret i32 %arg;
}
