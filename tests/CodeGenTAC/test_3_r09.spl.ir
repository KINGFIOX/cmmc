internal func @write() -> void { NoMemoryRead NoMemoryWrite };
func @mod(i32 %number2, i32 %m2) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = sdiv i32 %number2, i32 %m2;
    i32 %1 = mul i32 %m2, i32 %0;
    i32 %2 = sub i32 %number2, i32 %1;
    ret i32 %2;
}
func @power(i32 %base1, i32 %p1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = add i32 %p1, i32 1;
    i32 %1 = sub i32 %0, i32 %p1;
    i1 %2 = icmp sgt i32 %p1, i32 0;
    cbr i1 %2(prob = 0.97), ^while.body, ^b;
  ^while.body:
    i32 %3 = phi [^entry, i32 %p1] [^while.body, i32 %7];
    i32 %4 = phi [^entry, i32 %1] [^while.body, i32 %9];
    i32 %5 = mul i32 %3, i32 2;
    i32 %6 = sub i32 %5, i32 %3;
    i32 %7 = add i32 %6, i32 -1;
    i1 %8 = icmp sgt i32 %7, i32 0;
    i32 %9 = mul i32 %base1, i32 %4;
    cbr i1 %8(prob = 0.97), ^while.body, ^b;
  ^b:
    i32 %10 = phi [^entry, i32 %1] [^while.body, i32 %9];
    ret i32 %10;
}
func @getNumDigits(i32 %number3) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i1 %0 = icmp slt i32 %number3, i32 0;
    cbr i1 %0(prob = 0.5), ^b, ^while.header;
  ^while.header:
    i1 %1 = icmp sgt i32 %number3, i32 0;
    cbr i1 %1(prob = 0.97), ^while.body, ^b;
  ^b:
    i32 %2 = phi [^entry, i32 -1] [^while.header, i32 0] [^while.body, i32 %7];
    ret i32 %2;
  ^while.body:
    i32 %3 = phi [^while.header, i32 %number3] [^while.body, i32 %5];
    i32 %4 = phi [^while.header, i32 0] [^while.body, i32 %7];
    i32 %5 = sdiv i32 %3, i32 10;
    i1 %6 = icmp sgt i32 %5, i32 0;
    i32 %7 = add i32 %4, i32 1;
    cbr i1 %6(prob = 0.97), ^while.body, ^b;
}
func @isNarcissistic(i32 %number4) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i1 %0 = icmp slt i32 %number4, i32 0;
    cbr i1 %0(prob = 0.5), ^b, ^while.header;
  ^b:
    i32 %1 = phi [^entry, i32 -1] [^while.header, i32 0] [^while.body1, i32 %18];
    i32 %2 = add i32 %1, i32 1;
    i32 %3 = sub i32 %2, i32 %1;
    i1 %4 = icmp sgt i32 %number4, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b1;
  ^while.header:
    i1 %5 = icmp sgt i32 %number4, i32 0;
    cbr i1 %5(prob = 0.97), ^while.body1, ^b;
  ^while.body:
    i32 %6 = phi [^b, i32 %number4] [^b2, i32 %12];
    i32 %7 = phi [^b, i32 0] [^b2, i32 %28];
    i32 %8 = sdiv i32 %6, i32 10;
    i32 %9 = mul i32 %8, i32 10;
    i32 %10 = sub i32 %6, i32 %9;
    i32 %11 = sub i32 %6, i32 %10;
    i32 %12 = sdiv i32 %11, i32 10;
    i1 %13 = icmp sgt i32 %1, i32 0;
    cbr i1 %13(prob = 0.97), ^while.body2, ^b2;
  ^while.body1:
    i32 %14 = phi [^while.header, i32 %number4] [^while.body1, i32 %16];
    i32 %15 = phi [^while.header, i32 0] [^while.body1, i32 %18];
    i32 %16 = sdiv i32 %14, i32 10;
    i1 %17 = icmp sgt i32 %16, i32 0;
    i32 %18 = add i32 %15, i32 1;
    cbr i1 %17(prob = 0.97), ^while.body1, ^b;
  ^b1:
    i1 %19 = icmp eq i32 %number4, i32 0;
    cbr i1 %19(prob = 0.5), ^b3, ^if.else;
  ^if.else:
    ubr ^b3;
  ^while.body2:
    i32 %20 = phi [^while.body, i32 %1] [^while.body2, i32 %24];
    i32 %21 = phi [^while.body, i32 %3] [^while.body2, i32 %26];
    i32 %22 = mul i32 %20, i32 2;
    i32 %23 = sub i32 %22, i32 %20;
    i32 %24 = add i32 %23, i32 -1;
    i1 %25 = icmp sgt i32 %24, i32 0;
    i32 %26 = mul i32 %10, i32 %21;
    cbr i1 %25(prob = 0.97), ^while.body2, ^b2;
  ^b2:
    i32 %27 = phi [^while.body, i32 %3] [^while.body2, i32 %26];
    i32 %28 = add i32 %7, i32 %27;
    i1 %29 = icmp sgt i32 %12, i32 0;
    cbr i1 %29(prob = 0.97), ^while.body, ^b4;
  ^b3:
    i32 %30 = phi [^b1, i32 1] [^if.else, i32 0] [^b4, i32 1];
    ret i32 %30;
  ^b4:
    i1 %31 = icmp eq i32 %number4, i32 %28;
    cbr i1 %31(prob = 0.5), ^b3, ^if.else;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    ubr ^while.header;
  ^while.header:
    i32 %0 = phi [^entry, i32 0] [^b5, i32 %30];
    i32 %1 = phi [^entry, i32 300] [^b5, i32 %31];
    i1 %2 = icmp slt i32 %1, i32 500;
    cbr i1 %2(prob = 0.97), ^while.body, ^b;
  ^while.body:
    i32 %3 = phi [^while.header, i32 %1] [^while.body, i32 %5];
    i32 %4 = phi [^while.header, i32 0] [^while.body, i32 %7];
    i32 %5 = sdiv i32 %3, i32 10;
    i1 %6 = icmp sgt i32 %5, i32 0;
    i32 %7 = add i32 %4, i32 1;
    cbr i1 %6(prob = 0.97), ^while.body, ^b1;
  ^b:
    call (i32) -> void @write(i32 %0);
    ret i32 %0;
  ^b1:
    i32 %8 = add i32 %4, i32 2;
    i32 %9 = sub i32 %8, i32 %7;
    ubr ^while.body1;
  ^while.body1:
    i32 %10 = phi [^b1, i32 %1] [^b2, i32 %16];
    i32 %11 = phi [^b1, i32 0] [^b2, i32 %24];
    i32 %12 = sdiv i32 %10, i32 10;
    i32 %13 = mul i32 %12, i32 10;
    i32 %14 = sub i32 %10, i32 %13;
    i32 %15 = sub i32 %10, i32 %14;
    i32 %16 = sdiv i32 %15, i32 10;
    ubr ^while.body2;
  ^while.body2:
    i32 %17 = phi [^while.body1, i32 %7] [^while.body2, i32 %21];
    i32 %18 = phi [^while.body1, i32 %9] [^while.body2, i32 %23];
    i32 %19 = mul i32 %17, i32 2;
    i32 %20 = sub i32 %19, i32 %17;
    i32 %21 = add i32 %20, i32 -1;
    i1 %22 = icmp sgt i32 %21, i32 0;
    i32 %23 = mul i32 %14, i32 %18;
    cbr i1 %22(prob = 0.97), ^while.body2, ^b2;
  ^b2:
    i32 %24 = add i32 %11, i32 %23;
    i1 %25 = icmp sgt i32 %16, i32 0;
    cbr i1 %25(prob = 0.97), ^while.body1, ^b3;
  ^b3:
    i1 %26 = icmp eq i32 %1, i32 %24;
    cbr i1 %26(prob = 0.5), ^b4, ^if.else;
  ^if.else:
    ubr ^b4;
  ^b4:
    i32 %27 = phi [^b3, i32 1] [^if.else, i32 0];
    i1 %28 = icmp eq i32 %27, i32 1;
    cbr i1 %28(prob = 0.5), ^if.then, ^b5;
  ^if.then:
    call (i32) -> void @write(i32 %1);
    i32 %29 = add i32 %0, i32 1;
    ubr ^b5;
  ^b5:
    i32 %30 = phi [^b4, i32 %0] [^if.then, i32 %29];
    i32 %31 = add i32 %1, i32 1;
    ubr ^while.header;
}
