internal func @write() -> void { NoMemoryRead NoMemoryWrite };
func @mod(i32 %number2, i32 %m2) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
^entry:
    i32 %0 = sdiv i32 %number2, i32 %m2;
    i32 %1 = mul i32 %m2, i32 %0;
    i32 %2 = sub i32 %number2, i32 %1;
    ret i32 %2;
}
func @power(i32 %base1, i32 %p1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
^entry:
    i32 %0 = add i32 %p1, i32 1;
    i32 %1 = sub i32 %0, i32 %p1;
    i1 %2 = scmp gt i32 %p1, i32 0;
    cbr i1 %2(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %3 = phi [^entry, i32 %1] [^while.body, i32 %5];
    i32 %4 = phi [^entry, i32 %p1] [^while.body, i32 %8];
    i32 %5 = mul i32 %3, i32 %base1;
    i32 %6 = mul i32 %4, i32 2;
    i32 %7 = sub i32 %6, i32 %4;
    i32 %8 = add i32 %7, i32 -1;
    i1 %9 = scmp gt i32 %8, i32 0;
    cbr i1 %9(prob = 0.97), ^while.body, ^b;
^b:
    i32 %10 = phi [^entry, i32 %1] [^while.body, i32 %5];
    ret i32 %10;
}
func @getNumDigits(i32 %number3) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
^entry:
    i1 %0 = scmp lt i32 %number3, i32 0;
    cbr i1 %0(prob = 0.5), ^b, ^while.header;
^while.header:
    i1 %1 = scmp gt i32 %number3, i32 0;
    cbr i1 %1(prob = 0.97), ^while.body, ^b1;
^b:
    i32 %2 = phi [^entry, i32 -1] [^b1, i32 %3];
    ret i32 %2;
^b1:
    i32 %3 = phi [^while.header, i32 0] [^while.body, i32 %7];
    ubr ^b;
^while.body:
    i32 %4 = phi [^while.header, i32 %number3] [^while.body, i32 %6];
    i32 %5 = phi [^while.header, i32 0] [^while.body, i32 %7];
    i32 %6 = sdiv i32 %4, i32 10;
    i32 %7 = add i32 %5, i32 1;
    i1 %8 = scmp gt i32 %6, i32 0;
    cbr i1 %8(prob = 0.97), ^while.body, ^b1;
}
func @isNarcissistic(i32 %number4) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
^entry:
    i1 %0 = scmp lt i32 %number4, i32 0;
    cbr i1 %0(prob = 0.5), ^b, ^while.header;
^b:
    i32 %1 = phi [^entry, i32 -1] [^b1, i32 %6];
    i1 %2 = scmp gt i32 %number4, i32 0;
    i32 %3 = add i32 %1, i32 1;
    i32 %4 = sub i32 %3, i32 %1;
    cbr i1 %2(prob = 0.97), ^while.body, ^b2;
^while.header:
    i1 %5 = scmp gt i32 %number4, i32 0;
    cbr i1 %5(prob = 0.97), ^while.body1, ^b1;
^b1:
    i32 %6 = phi [^while.header, i32 0] [^while.body1, i32 %18];
    ubr ^b;
^while.body:
    i32 %7 = phi [^b, i32 %number4] [^b3, i32 %13];
    i32 %8 = phi [^b, i32 0] [^b3, i32 %29];
    i32 %9 = sdiv i32 %7, i32 10;
    i32 %10 = mul i32 %9, i32 10;
    i32 %11 = sub i32 %7, i32 %10;
    i32 %12 = sub i32 %7, i32 %11;
    i32 %13 = sdiv i32 %12, i32 10;
    i1 %14 = scmp gt i32 %1, i32 0;
    cbr i1 %14(prob = 0.97), ^while.body2, ^b3;
^while.body1:
    i32 %15 = phi [^while.header, i32 %number4] [^while.body1, i32 %17];
    i32 %16 = phi [^while.header, i32 0] [^while.body1, i32 %18];
    i32 %17 = sdiv i32 %15, i32 10;
    i32 %18 = add i32 %16, i32 1;
    i1 %19 = scmp gt i32 %17, i32 0;
    cbr i1 %19(prob = 0.97), ^while.body1, ^b1;
^b2:
    i1 %20 = scmp eq i32 %number4, i32 0;
    cbr i1 %20(prob = 0.5), ^b4, ^if.else;
^if.else:
    ubr ^b4;
^while.body2:
    i32 %21 = phi [^while.body, i32 %4] [^while.body2, i32 %23];
    i32 %22 = phi [^while.body, i32 %1] [^while.body2, i32 %26];
    i32 %23 = mul i32 %11, i32 %21;
    i32 %24 = mul i32 %22, i32 2;
    i32 %25 = sub i32 %24, i32 %22;
    i32 %26 = add i32 %25, i32 -1;
    i1 %27 = scmp gt i32 %26, i32 0;
    cbr i1 %27(prob = 0.97), ^while.body2, ^b3;
^b3:
    i32 %28 = phi [^while.body, i32 %4] [^while.body2, i32 %23];
    i32 %29 = add i32 %28, i32 %8;
    i1 %30 = scmp gt i32 %13, i32 0;
    cbr i1 %30(prob = 0.97), ^while.body, ^b5;
^b4:
    i32 %31 = phi [^b2, i32 1] [^if.else, i32 0] [^b5, i32 1];
    ret i32 %31;
^b5:
    i1 %32 = scmp eq i32 %29, i32 %number4;
    cbr i1 %32(prob = 0.5), ^b4, ^if.else;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
^entry:
    ubr ^while.header;
^while.header:
    i32 %0 = phi [^entry, i32 0] [^b4, i32 %32];
    i32 %1 = phi [^entry, i32 300] [^b4, i32 %33];
    i1 %2 = scmp lt i32 %1, i32 500;
    cbr i1 %2(prob = 0.97), ^entry1, ^b;
^entry1:
    i1 %3 = scmp lt i32 %1, i32 0;
    cbr i1 %3(prob = 0.5), ^b1, ^while.header1;
^b:
    call (i32) -> void @write(i32 %0);
    ret i32 %0;
^b1:
    i32 %4 = phi [^entry1, i32 -1] [^b2, i32 %9];
    i1 %5 = scmp gt i32 %1, i32 0;
    i32 %6 = add i32 %4, i32 1;
    i32 %7 = sub i32 %6, i32 %4;
    cbr i1 %5(prob = 0.97), ^while.body, ^b3;
^while.header1:
    i1 %8 = scmp gt i32 %1, i32 0;
    cbr i1 %8(prob = 0.97), ^while.body1, ^b2;
^b2:
    i32 %9 = phi [^while.header1, i32 0] [^while.body1, i32 %21];
    ubr ^b1;
^while.body:
    i32 %10 = phi [^b1, i32 %1] [^b5, i32 %16];
    i32 %11 = phi [^b1, i32 0] [^b5, i32 %35];
    i32 %12 = sdiv i32 %10, i32 10;
    i32 %13 = mul i32 %12, i32 10;
    i32 %14 = sub i32 %10, i32 %13;
    i32 %15 = sub i32 %10, i32 %14;
    i32 %16 = sdiv i32 %15, i32 10;
    i1 %17 = scmp gt i32 %4, i32 0;
    cbr i1 %17(prob = 0.97), ^while.body2, ^b5;
^while.body1:
    i32 %18 = phi [^while.header1, i32 %1] [^while.body1, i32 %20];
    i32 %19 = phi [^while.header1, i32 0] [^while.body1, i32 %21];
    i32 %20 = sdiv i32 %18, i32 10;
    i32 %21 = add i32 %19, i32 1;
    i1 %22 = scmp gt i32 %20, i32 0;
    cbr i1 %22(prob = 0.97), ^while.body1, ^b2;
^b3:
    i1 %23 = scmp eq i32 %1, i32 0;
    cbr i1 %23(prob = 0.5), ^if.then, ^b4;
^if.then:
    call (i32) -> void @write(i32 %1);
    i32 %24 = add i32 %0, i32 1;
    ubr ^b4;
^while.body2:
    i32 %25 = phi [^while.body, i32 %7] [^while.body2, i32 %27];
    i32 %26 = phi [^while.body, i32 %4] [^while.body2, i32 %30];
    i32 %27 = mul i32 %14, i32 %25;
    i32 %28 = mul i32 %26, i32 2;
    i32 %29 = sub i32 %28, i32 %26;
    i32 %30 = add i32 %29, i32 -1;
    i1 %31 = scmp gt i32 %30, i32 0;
    cbr i1 %31(prob = 0.97), ^while.body2, ^b5;
^b4:
    i32 %32 = phi [^b3, i32 %0] [^if.then, i32 %24] [^b7, i32 %0];
    i32 %33 = add i32 %1, i32 1;
    ubr ^while.header;
^b5:
    i32 %34 = phi [^while.body, i32 %7] [^while.body2, i32 %27];
    i32 %35 = add i32 %11, i32 %34;
    i1 %36 = scmp gt i32 %16, i32 0;
    cbr i1 %36(prob = 0.97), ^while.body, ^b6;
^b6:
    i1 %37 = scmp eq i32 %35, i32 %1;
    cbr i1 %37(prob = 0.5), ^b7, ^if.else;
^if.else:
    ubr ^b7;
^b7:
    i32 %38 = phi [^b6, i32 1] [^if.else, i32 0];
    i1 %39 = scmp eq i32 %38, i32 1;
    cbr i1 %39(prob = 0.5), ^if.then, ^b4;
}
