internal func @write() -> void { NoMemoryRead NoMemoryWrite };
func @add([2 * i32]* %temp) -> i32 { NoMemoryWrite NoSideEffect NoRecurse } {
^entry:
    i32* %0 = getelementptr &([2 * i32]* %temp)[i32 0][i32 0];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &([2 * i32]* %temp)[i32 0][i32 1];
    i32 %3 = load i32* %2;
    i32 %4 = add i32 %1, i32 %3;
    ret i32 %4;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
^entry:
    [2 * i32]* %0 = alloc [2 * i32];
    ubr ^while.body;
^while.body:
    i32 %1 = phi [^entry, i32 0] [^while.body, i32 %2];
    i32 %2 = add i32 %1, i32 1;
    i32* %3 = getelementptr &([2 * i32]* %0)[i32 0][i32 %1];
    i32 %4 = mul i32 %1, i32 2;
    i32 %5 = add i32 %4, i32 1;
    store i32* %3 with i32 %5;
    call (i32) -> void @write(i32 %5);
    i1 %6 = scmp lt i32 %2, i32 2;
    cbr i1 %6(prob = 0.5), ^while.body, ^b;
^b:
    ret i32 0;
}
