func @read() -> i32 { NoMemoryRead NoMemoryWrite };
func @write(i32) -> void { NoMemoryRead NoMemoryWrite };
func @add([2 * i32]*) -> i32 { NoMemoryWrite NoSideEffect NoRecurse } {
^entry([2 * i32]* %arg):
    [2 * i32]* %temp = alloc [2 * i32];
    [2 * i32] %0 = load [2 * i32]* %arg;
    store [2 * i32]* %temp with [2 * i32] %0;
    i32* %1 = getelementptr &([2 * i32]* %temp)[i32 0][i32 0];
    i32 %2 = load i32* %1;
    i32* %3 = getelementptr &([2 * i32]* %temp)[i32 0][i32 1];
    i32 %4 = load i32* %3;
    i32 %5 = add i32 %2, i32 %4;
    ret i32 %5;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
^entry():
    [2 * i32]* %op = alloc [2 * i32];
    ubr [ ^while.body [2 * i32]* %op, i32 0, i32 0 ];
^while.body([2 * i32]* %arg, i32 %arg1, i32 %arg2):
    i32* %0 = getelementptr &([2 * i32]* %arg)[i32 0][i32 %arg2];
    i32 %1 = add i32 %arg1, i32 %arg2;
    store i32* %0 with i32 %1;
    i32 %2 = add i32 %arg2, i32 1;
    i1 %3 = scmp lt i32 %2, i32 2;
    cbr i1 %3, [ ^while.body [2 * i32]* %arg, i32 %arg1, i32 %2 ], [ ^b [2 * i32]* %arg, i32 %arg1 ];
^b([2 * i32]* %arg, i32 %arg1):
    [2 * i32]* %temp = alloc [2 * i32];
    [2 * i32] %0 = load [2 * i32]* %arg;
    store [2 * i32]* %temp with [2 * i32] %0;
    i32* %1 = getelementptr &([2 * i32]* %temp)[i32 0][i32 0];
    i32 %2 = load i32* %1;
    i32* %3 = getelementptr &([2 * i32]* %temp)[i32 0][i32 1];
    i32 %4 = load i32* %3;
    i32 %5 = add i32 %2, i32 %4;
    call (i32) -> void @write(i32 %5);
    i32 %6 = add i32 %arg1, i32 1;
    i1 %7 = scmp lt i32 %6, i32 2;
    cbr i1 %7, [ ^while.body [2 * i32]* %arg, i32 %6, i32 0 ], [ ^b1 ];
^b1():
    ret i32 0;
}
