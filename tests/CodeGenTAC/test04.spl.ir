func @read() -> i32 { NoMemoryRead NoMemoryWrite };
func @write() -> void { NoMemoryRead NoMemoryWrite };
func @add([2 * i32]* %temp) -> i32 {
^entry:
    i32* %0 = getelementptr &([2 * i32]* %temp)[i32 0][i32 0];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &([2 * i32]* %temp)[i32 0][i32 1];
    i32 %3 = load i32* %2;
    i32 %4 = add i32 %1, i32 %3;
    ret i32 %4;
}
func @main() -> i32 {
^entry:
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    [1 * [2 * i32]]* %r = alloc [1 * [2 * i32]];
    [2 * i32]* %op = alloc [2 * i32];
    store i32* %i with i32 0;
    store i32* %j with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i1 %1 = scmp lt i32 %0, i32 2;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^while.body, ^b;
^while.body:
    ubr ^while.header1;
^b:
    ret i32 0;
^while.header1:
    i32 %4 = load i32* %j;
    i1 %5 = scmp lt i32 %4, i32 2;
    i32 %6 = zext i1 %5 to i32;
    i1 %7 = scmp neq i32 %6, i32 0;
    cbr i1 %7(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %8 = load i32* %j;
    i32* %9 = getelementptr &([2 * i32]* %op)[i32 0][i32 %8];
    i32 %10 = load i32* %i;
    i32 %11 = load i32* %j;
    i32 %12 = add i32 %10, i32 %11;
    store i32* %9 with i32 %12;
    i32 %13 = load i32* %j;
    i32 %14 = add i32 %13, i32 1;
    store i32* %j with i32 %14;
    ubr ^while.header1;
^b1:
    [2 * i32]* %15 = getelementptr &([1 * [2 * i32]]* %r)[i32 0][i32 0];
    i32 %16 = load i32* %i;
    i32* %17 = getelementptr &([2 * i32]* %15)[i32 0][i32 %16];
    i32 %18 = call ([2 * i32]*) -> i32 @add([2 * i32]* %op);
    store i32* %17 with i32 %18;
    [2 * i32]* %19 = getelementptr &([1 * [2 * i32]]* %r)[i32 0][i32 0];
    i32 %20 = load i32* %i;
    i32* %21 = getelementptr &([2 * i32]* %19)[i32 0][i32 %20];
    i32 %22 = load i32* %21;
    call (i32) -> void @write(i32 %22);
    i32 %23 = load i32* %i;
    i32 %24 = add i32 %23, i32 1;
    store i32* %i with i32 %24;
    store i32* %j with i32 0;
    ubr ^while.header;
}
