internal func @write() -> void { NoMemoryRead NoMemoryWrite };
func @add([2 * i32]* %temp) -> i32 { NoMemoryWrite NoSideEffect NoRecurse } {
^entry:
    i32* %0 = getelementptr &([2 * i32]* %temp)[i32 0][i32 0];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &([2 * i32]* %temp)[i32 0][i32 1];
    i32 %3 = load i32* %2;
    i32 %4 = add i32 %1, i32 %3;
    ret i32 %4;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
^entry:
    [1 * [2 * i32]]* %r = alloc [1 * [2 * i32]];
    [2 * i32]* %op = alloc [2 * i32];
    [2 * i32]* %0 = getelementptr &([1 * [2 * i32]]* %r)[i32 0][i32 0];
    i32* %1 = getelementptr &([2 * i32]* %op)[i32 0][i32 0];
    i32* %2 = getelementptr &([2 * i32]* %op)[i32 0][i32 1];
    ubr ^while.body;
^while.body:
    i32 %3 = phi [^entry, i32 0] [^while.body, i32 %4];
    store i32* %1 with i32 %3;
    i32 %4 = add i32 %3, i32 1;
    store i32* %2 with i32 %4;
    i32* %5 = getelementptr &([2 * i32]* %0)[i32 0][i32 %3];
    i32 %6 = load i32* %1;
    i32 %7 = load i32* %2;
    i32 %8 = add i32 %6, i32 %7;
    store i32* %5 with i32 %8;
    call (i32) -> void @write(i32 %8);
    i1 %9 = scmp lt i32 %4, i32 2;
    cbr i1 %9(prob = 0.5), ^while.body, ^b;
^b:
    ret i32 0;
}
