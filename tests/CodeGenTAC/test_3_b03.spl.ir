struct Worker {i32 id, i32 salary, i32 group};
struct Group {i32 group_id, [10 * struct Worker] workers, i32 avg_salary};

func @read() -> i32 { NoMemoryRead NoMemoryWrite };
func @write(i32) -> void { NoMemoryRead NoMemoryWrite };
func @calculate_avg(struct Group*) -> i32 { NoMemoryWrite NoSideEffect NoRecurse } {
^entry(struct Group* %arg):
    struct Group* %g = alloc struct Group;
    i32* %0 = getelementptr &(struct Group* %g)[i32 0].group_id;
    i32* %1 = getelementptr &(struct Group* %arg)[i32 0].group_id;
    i32 %2 = load i32* %1;
    store i32* %0 with i32 %2;
    i32* %3 = getelementptr &(struct Group* %g)[i32 0].workers[i32 0].id;
    i32* %4 = getelementptr &(struct Group* %arg)[i32 0].workers[i32 0].id;
    i32 %5 = load i32* %4;
    store i32* %3 with i32 %5;
    i32* %6 = getelementptr &(struct Group* %g)[i32 0].workers[i32 0].salary;
    i32* %7 = getelementptr &(struct Group* %arg)[i32 0].workers[i32 0].salary;
    i32 %8 = load i32* %7;
    store i32* %6 with i32 %8;
    i32* %9 = getelementptr &(struct Group* %g)[i32 0].workers[i32 0].group;
    i32* %10 = getelementptr &(struct Group* %arg)[i32 0].workers[i32 0].group;
    i32 %11 = load i32* %10;
    store i32* %9 with i32 %11;
    i32* %12 = getelementptr &(struct Group* %g)[i32 0].workers[i32 1].id;
    i32* %13 = getelementptr &(struct Group* %arg)[i32 0].workers[i32 1].id;
    i32 %14 = load i32* %13;
    store i32* %12 with i32 %14;
    i32* %15 = getelementptr &(struct Group* %g)[i32 0].workers[i32 1].salary;
    i32* %16 = getelementptr &(struct Group* %arg)[i32 0].workers[i32 1].salary;
    i32 %17 = load i32* %16;
    store i32* %15 with i32 %17;
    i32* %18 = getelementptr &(struct Group* %g)[i32 0].workers[i32 1].group;
    i32* %19 = getelementptr &(struct Group* %arg)[i32 0].workers[i32 1].group;
    i32 %20 = load i32* %19;
    store i32* %18 with i32 %20;
    i32* %21 = getelementptr &(struct Group* %g)[i32 0].workers[i32 2].id;
    i32* %22 = getelementptr &(struct Group* %arg)[i32 0].workers[i32 2].id;
    i32 %23 = load i32* %22;
    store i32* %21 with i32 %23;
    i32* %24 = getelementptr &(struct Group* %g)[i32 0].workers[i32 2].salary;
    i32* %25 = getelementptr &(struct Group* %arg)[i32 0].workers[i32 2].salary;
    i32 %26 = load i32* %25;
    store i32* %24 with i32 %26;
    i32* %27 = getelementptr &(struct Group* %g)[i32 0].workers[i32 2].group;
    i32* %28 = getelementptr &(struct Group* %arg)[i32 0].workers[i32 2].group;
    i32 %29 = load i32* %28;
    store i32* %27 with i32 %29;
    i32* %30 = getelementptr &(struct Group* %g)[i32 0].workers[i32 3].id;
    i32* %31 = getelementptr &(struct Group* %arg)[i32 0].workers[i32 3].id;
    i32 %32 = load i32* %31;
    store i32* %30 with i32 %32;
    i32* %33 = getelementptr &(struct Group* %g)[i32 0].workers[i32 3].salary;
    i32* %34 = getelementptr &(struct Group* %arg)[i32 0].workers[i32 3].salary;
    i32 %35 = load i32* %34;
    store i32* %33 with i32 %35;
    i32* %36 = getelementptr &(struct Group* %g)[i32 0].workers[i32 3].group;
    i32* %37 = getelementptr &(struct Group* %arg)[i32 0].workers[i32 3].group;
    i32 %38 = load i32* %37;
    store i32* %36 with i32 %38;
    i32* %39 = getelementptr &(struct Group* %g)[i32 0].workers[i32 4].id;
    i32* %40 = getelementptr &(struct Group* %arg)[i32 0].workers[i32 4].id;
    i32 %41 = load i32* %40;
    store i32* %39 with i32 %41;
    i32* %42 = getelementptr &(struct Group* %g)[i32 0].workers[i32 4].salary;
    i32* %43 = getelementptr &(struct Group* %arg)[i32 0].workers[i32 4].salary;
    i32 %44 = load i32* %43;
    store i32* %42 with i32 %44;
    i32* %45 = getelementptr &(struct Group* %g)[i32 0].workers[i32 4].group;
    i32* %46 = getelementptr &(struct Group* %arg)[i32 0].workers[i32 4].group;
    i32 %47 = load i32* %46;
    store i32* %45 with i32 %47;
    i32* %48 = getelementptr &(struct Group* %g)[i32 0].workers[i32 5].id;
    i32* %49 = getelementptr &(struct Group* %arg)[i32 0].workers[i32 5].id;
    i32 %50 = load i32* %49;
    store i32* %48 with i32 %50;
    i32* %51 = getelementptr &(struct Group* %g)[i32 0].workers[i32 5].salary;
    i32* %52 = getelementptr &(struct Group* %arg)[i32 0].workers[i32 5].salary;
    i32 %53 = load i32* %52;
    store i32* %51 with i32 %53;
    i32* %54 = getelementptr &(struct Group* %g)[i32 0].workers[i32 5].group;
    i32* %55 = getelementptr &(struct Group* %arg)[i32 0].workers[i32 5].group;
    i32 %56 = load i32* %55;
    store i32* %54 with i32 %56;
    i32* %57 = getelementptr &(struct Group* %g)[i32 0].workers[i32 6].id;
    i32* %58 = getelementptr &(struct Group* %arg)[i32 0].workers[i32 6].id;
    i32 %59 = load i32* %58;
    store i32* %57 with i32 %59;
    i32* %60 = getelementptr &(struct Group* %g)[i32 0].workers[i32 6].salary;
    i32* %61 = getelementptr &(struct Group* %arg)[i32 0].workers[i32 6].salary;
    i32 %62 = load i32* %61;
    store i32* %60 with i32 %62;
    i32* %63 = getelementptr &(struct Group* %g)[i32 0].workers[i32 6].group;
    i32* %64 = getelementptr &(struct Group* %arg)[i32 0].workers[i32 6].group;
    i32 %65 = load i32* %64;
    store i32* %63 with i32 %65;
    i32* %66 = getelementptr &(struct Group* %g)[i32 0].workers[i32 7].id;
    i32* %67 = getelementptr &(struct Group* %arg)[i32 0].workers[i32 7].id;
    i32 %68 = load i32* %67;
    store i32* %66 with i32 %68;
    i32* %69 = getelementptr &(struct Group* %g)[i32 0].workers[i32 7].salary;
    i32* %70 = getelementptr &(struct Group* %arg)[i32 0].workers[i32 7].salary;
    i32 %71 = load i32* %70;
    store i32* %69 with i32 %71;
    i32* %72 = getelementptr &(struct Group* %g)[i32 0].workers[i32 7].group;
    i32* %73 = getelementptr &(struct Group* %arg)[i32 0].workers[i32 7].group;
    i32 %74 = load i32* %73;
    store i32* %72 with i32 %74;
    i32* %75 = getelementptr &(struct Group* %g)[i32 0].workers[i32 8].id;
    i32* %76 = getelementptr &(struct Group* %arg)[i32 0].workers[i32 8].id;
    i32 %77 = load i32* %76;
    store i32* %75 with i32 %77;
    i32* %78 = getelementptr &(struct Group* %g)[i32 0].workers[i32 8].salary;
    i32* %79 = getelementptr &(struct Group* %arg)[i32 0].workers[i32 8].salary;
    i32 %80 = load i32* %79;
    store i32* %78 with i32 %80;
    i32* %81 = getelementptr &(struct Group* %g)[i32 0].workers[i32 8].group;
    i32* %82 = getelementptr &(struct Group* %arg)[i32 0].workers[i32 8].group;
    i32 %83 = load i32* %82;
    store i32* %81 with i32 %83;
    i32* %84 = getelementptr &(struct Group* %g)[i32 0].workers[i32 9].id;
    i32* %85 = getelementptr &(struct Group* %arg)[i32 0].workers[i32 9].id;
    i32 %86 = load i32* %85;
    store i32* %84 with i32 %86;
    i32* %87 = getelementptr &(struct Group* %g)[i32 0].workers[i32 9].salary;
    i32* %88 = getelementptr &(struct Group* %arg)[i32 0].workers[i32 9].salary;
    i32 %89 = load i32* %88;
    store i32* %87 with i32 %89;
    i32* %90 = getelementptr &(struct Group* %g)[i32 0].workers[i32 9].group;
    i32* %91 = getelementptr &(struct Group* %arg)[i32 0].workers[i32 9].group;
    i32 %92 = load i32* %91;
    store i32* %90 with i32 %92;
    i32* %93 = getelementptr &(struct Group* %g)[i32 0].avg_salary;
    i32* %94 = getelementptr &(struct Group* %arg)[i32 0].avg_salary;
    i32 %95 = load i32* %94;
    store i32* %93 with i32 %95;
    ubr [ ^while.body struct Group* %g, i32 0, i32 0 ];
^while.body(struct Group* %arg, i32 %arg1, i32 %arg2):
    [10 * struct Worker]* %0 = getelementptr &(struct Group* %arg)[i32 0].workers;
    struct Worker* %1 = getelementptr &([10 * struct Worker]* %0)[i32 0][i32 %arg2];
    i32* %2 = getelementptr &(struct Worker* %1)[i32 0].salary;
    i32 %3 = load i32* %2;
    i32 %4 = add i32 %arg1, i32 %3;
    i32 %5 = add i32 %arg2, i32 1;
    i1 %6 = scmp lt i32 %5, i32 10;
    cbr i1 %6, [ ^while.body struct Group* %arg, i32 %4, i32 %5 ], [ ^b i32 %4 ];
^b(i32 %arg):
    i32 %0 = sdiv i32 %arg, i32 10;
    ret i32 %0;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
^entry():
    [5 * struct Group]* %company = alloc [5 * struct Group];
    ubr [ ^while.body [5 * struct Group]* %company, i32 0, i32 0 ];
^while.body([5 * struct Group]* %arg, i32 %arg1, i32 %arg2):
    struct Group* %0 = getelementptr &([5 * struct Group]* %arg)[i32 0][i32 %arg1];
    i32* %1 = getelementptr &(struct Group* %0)[i32 0].group_id;
    store i32* %1 with i32 %arg1;
    ubr [ ^while.body1 [5 * struct Group]* %arg, i32 %arg1, i32 0, i32 %arg2 ];
^while.body1([5 * struct Group]* %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    struct Group* %0 = getelementptr &([5 * struct Group]* %arg)[i32 0][i32 %arg1];
    [10 * struct Worker]* %1 = getelementptr &(struct Group* %0)[i32 0].workers;
    struct Worker* %2 = getelementptr &([10 * struct Worker]* %1)[i32 0][i32 %arg2];
    i32* %3 = getelementptr &(struct Worker* %2)[i32 0].salary;
    i32 %4 = mul i32 %arg1, i32 100;
    i32 %5 = add i32 %4, i32 3000;
    i32 %6 = mul i32 %arg2, i32 150;
    i32 %7 = add i32 %5, i32 %6;
    store i32* %3 with i32 %7;
    i32 %8 = add i32 %arg2, i32 1;
    i1 %9 = scmp lt i32 %8, i32 10;
    cbr i1 %9, [ ^while.body1 [5 * struct Group]* %arg, i32 %arg1, i32 %8, i32 %arg3 ], [ ^b [5 * struct Group]* %arg, i32 %arg1, i32 %arg3 ];
^b([5 * struct Group]* %arg, i32 %arg1, i32 %arg2):
    struct Group* %0 = getelementptr &([5 * struct Group]* %arg)[i32 0][i32 %arg1];
    i32* %1 = getelementptr &(struct Group* %0)[i32 0].avg_salary;
    struct Group* %g = alloc struct Group;
    i32* %2 = getelementptr &(struct Group* %g)[i32 0].group_id;
    i32* %3 = getelementptr &(struct Group* %0)[i32 0].group_id;
    i32 %4 = load i32* %3;
    store i32* %2 with i32 %4;
    i32* %5 = getelementptr &(struct Group* %g)[i32 0].workers[i32 0].id;
    i32* %6 = getelementptr &(struct Group* %0)[i32 0].workers[i32 0].id;
    i32 %7 = load i32* %6;
    store i32* %5 with i32 %7;
    i32* %8 = getelementptr &(struct Group* %g)[i32 0].workers[i32 0].salary;
    i32* %9 = getelementptr &(struct Group* %0)[i32 0].workers[i32 0].salary;
    i32 %10 = load i32* %9;
    store i32* %8 with i32 %10;
    i32* %11 = getelementptr &(struct Group* %g)[i32 0].workers[i32 0].group;
    i32* %12 = getelementptr &(struct Group* %0)[i32 0].workers[i32 0].group;
    i32 %13 = load i32* %12;
    store i32* %11 with i32 %13;
    i32* %14 = getelementptr &(struct Group* %g)[i32 0].workers[i32 1].id;
    i32* %15 = getelementptr &(struct Group* %0)[i32 0].workers[i32 1].id;
    i32 %16 = load i32* %15;
    store i32* %14 with i32 %16;
    i32* %17 = getelementptr &(struct Group* %g)[i32 0].workers[i32 1].salary;
    i32* %18 = getelementptr &(struct Group* %0)[i32 0].workers[i32 1].salary;
    i32 %19 = load i32* %18;
    store i32* %17 with i32 %19;
    i32* %20 = getelementptr &(struct Group* %g)[i32 0].workers[i32 1].group;
    i32* %21 = getelementptr &(struct Group* %0)[i32 0].workers[i32 1].group;
    i32 %22 = load i32* %21;
    store i32* %20 with i32 %22;
    i32* %23 = getelementptr &(struct Group* %g)[i32 0].workers[i32 2].id;
    i32* %24 = getelementptr &(struct Group* %0)[i32 0].workers[i32 2].id;
    i32 %25 = load i32* %24;
    store i32* %23 with i32 %25;
    i32* %26 = getelementptr &(struct Group* %g)[i32 0].workers[i32 2].salary;
    i32* %27 = getelementptr &(struct Group* %0)[i32 0].workers[i32 2].salary;
    i32 %28 = load i32* %27;
    store i32* %26 with i32 %28;
    i32* %29 = getelementptr &(struct Group* %g)[i32 0].workers[i32 2].group;
    i32* %30 = getelementptr &(struct Group* %0)[i32 0].workers[i32 2].group;
    i32 %31 = load i32* %30;
    store i32* %29 with i32 %31;
    i32* %32 = getelementptr &(struct Group* %g)[i32 0].workers[i32 3].id;
    i32* %33 = getelementptr &(struct Group* %0)[i32 0].workers[i32 3].id;
    i32 %34 = load i32* %33;
    store i32* %32 with i32 %34;
    i32* %35 = getelementptr &(struct Group* %g)[i32 0].workers[i32 3].salary;
    i32* %36 = getelementptr &(struct Group* %0)[i32 0].workers[i32 3].salary;
    i32 %37 = load i32* %36;
    store i32* %35 with i32 %37;
    i32* %38 = getelementptr &(struct Group* %g)[i32 0].workers[i32 3].group;
    i32* %39 = getelementptr &(struct Group* %0)[i32 0].workers[i32 3].group;
    i32 %40 = load i32* %39;
    store i32* %38 with i32 %40;
    i32* %41 = getelementptr &(struct Group* %g)[i32 0].workers[i32 4].id;
    i32* %42 = getelementptr &(struct Group* %0)[i32 0].workers[i32 4].id;
    i32 %43 = load i32* %42;
    store i32* %41 with i32 %43;
    i32* %44 = getelementptr &(struct Group* %g)[i32 0].workers[i32 4].salary;
    i32* %45 = getelementptr &(struct Group* %0)[i32 0].workers[i32 4].salary;
    i32 %46 = load i32* %45;
    store i32* %44 with i32 %46;
    i32* %47 = getelementptr &(struct Group* %g)[i32 0].workers[i32 4].group;
    i32* %48 = getelementptr &(struct Group* %0)[i32 0].workers[i32 4].group;
    i32 %49 = load i32* %48;
    store i32* %47 with i32 %49;
    i32* %50 = getelementptr &(struct Group* %g)[i32 0].workers[i32 5].id;
    i32* %51 = getelementptr &(struct Group* %0)[i32 0].workers[i32 5].id;
    i32 %52 = load i32* %51;
    store i32* %50 with i32 %52;
    i32* %53 = getelementptr &(struct Group* %g)[i32 0].workers[i32 5].salary;
    i32* %54 = getelementptr &(struct Group* %0)[i32 0].workers[i32 5].salary;
    i32 %55 = load i32* %54;
    store i32* %53 with i32 %55;
    i32* %56 = getelementptr &(struct Group* %g)[i32 0].workers[i32 5].group;
    i32* %57 = getelementptr &(struct Group* %0)[i32 0].workers[i32 5].group;
    i32 %58 = load i32* %57;
    store i32* %56 with i32 %58;
    i32* %59 = getelementptr &(struct Group* %g)[i32 0].workers[i32 6].id;
    i32* %60 = getelementptr &(struct Group* %0)[i32 0].workers[i32 6].id;
    i32 %61 = load i32* %60;
    store i32* %59 with i32 %61;
    i32* %62 = getelementptr &(struct Group* %g)[i32 0].workers[i32 6].salary;
    i32* %63 = getelementptr &(struct Group* %0)[i32 0].workers[i32 6].salary;
    i32 %64 = load i32* %63;
    store i32* %62 with i32 %64;
    i32* %65 = getelementptr &(struct Group* %g)[i32 0].workers[i32 6].group;
    i32* %66 = getelementptr &(struct Group* %0)[i32 0].workers[i32 6].group;
    i32 %67 = load i32* %66;
    store i32* %65 with i32 %67;
    i32* %68 = getelementptr &(struct Group* %g)[i32 0].workers[i32 7].id;
    i32* %69 = getelementptr &(struct Group* %0)[i32 0].workers[i32 7].id;
    i32 %70 = load i32* %69;
    store i32* %68 with i32 %70;
    i32* %71 = getelementptr &(struct Group* %g)[i32 0].workers[i32 7].salary;
    i32* %72 = getelementptr &(struct Group* %0)[i32 0].workers[i32 7].salary;
    i32 %73 = load i32* %72;
    store i32* %71 with i32 %73;
    i32* %74 = getelementptr &(struct Group* %g)[i32 0].workers[i32 7].group;
    i32* %75 = getelementptr &(struct Group* %0)[i32 0].workers[i32 7].group;
    i32 %76 = load i32* %75;
    store i32* %74 with i32 %76;
    i32* %77 = getelementptr &(struct Group* %g)[i32 0].workers[i32 8].id;
    i32* %78 = getelementptr &(struct Group* %0)[i32 0].workers[i32 8].id;
    i32 %79 = load i32* %78;
    store i32* %77 with i32 %79;
    i32* %80 = getelementptr &(struct Group* %g)[i32 0].workers[i32 8].salary;
    i32* %81 = getelementptr &(struct Group* %0)[i32 0].workers[i32 8].salary;
    i32 %82 = load i32* %81;
    store i32* %80 with i32 %82;
    i32* %83 = getelementptr &(struct Group* %g)[i32 0].workers[i32 8].group;
    i32* %84 = getelementptr &(struct Group* %0)[i32 0].workers[i32 8].group;
    i32 %85 = load i32* %84;
    store i32* %83 with i32 %85;
    i32* %86 = getelementptr &(struct Group* %g)[i32 0].workers[i32 9].id;
    i32* %87 = getelementptr &(struct Group* %0)[i32 0].workers[i32 9].id;
    i32 %88 = load i32* %87;
    store i32* %86 with i32 %88;
    i32* %89 = getelementptr &(struct Group* %g)[i32 0].workers[i32 9].salary;
    i32* %90 = getelementptr &(struct Group* %0)[i32 0].workers[i32 9].salary;
    i32 %91 = load i32* %90;
    store i32* %89 with i32 %91;
    i32* %92 = getelementptr &(struct Group* %g)[i32 0].workers[i32 9].group;
    i32* %93 = getelementptr &(struct Group* %0)[i32 0].workers[i32 9].group;
    i32 %94 = load i32* %93;
    store i32* %92 with i32 %94;
    i32* %95 = getelementptr &(struct Group* %g)[i32 0].avg_salary;
    i32 %96 = load i32* %1;
    store i32* %95 with i32 %96;
    ubr [ ^while.body2 struct Group* %g, i32* %1, i32 %arg1, [5 * struct Group]* %arg, i32 %arg2, i32 0, i32 0 ];
^while.body2(struct Group* %arg, i32* %arg1, i32 %arg2, [5 * struct Group]* %arg3, i32 %arg4, i32 %arg5, i32 %arg6):
    [10 * struct Worker]* %0 = getelementptr &(struct Group* %arg)[i32 0].workers;
    struct Worker* %1 = getelementptr &([10 * struct Worker]* %0)[i32 0][i32 %arg6];
    i32* %2 = getelementptr &(struct Worker* %1)[i32 0].salary;
    i32 %3 = load i32* %2;
    i32 %4 = add i32 %arg5, i32 %3;
    i32 %5 = add i32 %arg6, i32 1;
    i1 %6 = scmp lt i32 %5, i32 10;
    cbr i1 %6, [ ^while.body2 struct Group* %arg, i32* %arg1, i32 %arg2, [5 * struct Group]* %arg3, i32 %arg4, i32 %4, i32 %5 ], [ ^b1 i32* %arg1, i32 %arg2, [5 * struct Group]* %arg3, i32 %arg4, i32 %4 ];
^b1(i32* %arg, i32 %arg1, [5 * struct Group]* %arg2, i32 %arg3, i32 %arg4):
    i32 %0 = sdiv i32 %arg4, i32 10;
    store i32* %arg with i32 %0;
    i32 %1 = add i32 %arg3, i32 %0;
    i32 %2 = add i32 %arg1, i32 1;
    i1 %3 = scmp lt i32 %2, i32 5;
    cbr i1 %3, [ ^while.body [5 * struct Group]* %arg2, i32 %2, i32 %1 ], [ ^b2 i32 %1 ];
^b2(i32 %arg):
    i32 %0 = sdiv i32 %arg, i32 5;
    call (i32) -> void @write(i32 %0);
    ret i32 0;
}
