struct Worker {i32 id, i32 salary, i32 group};
struct Group {i32 group_id, [10 * struct Worker] workers, i32 avg_salary};

internal func @write() -> void { NoMemoryRead NoMemoryWrite };
func @calculate_avg(struct Group* %g) -> i32 { NoMemoryWrite NoSideEffect NoRecurse } {
  ^entry:
    i32* %0 = getelementptr &(struct Group* %g)[i32 0].workers[i32 0].salary;
    i32 %1 = load i32* %0;
    i32 %2 = ztrunc i32 %1 to i32;
    i32* %3 = getelementptr &(struct Group* %g)[i32 0].workers[i32 1].salary;
    i32 %4 = load i32* %3;
    i32 %5 = add i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    i32* %7 = getelementptr &(struct Group* %g)[i32 0].workers[i32 2].salary;
    i32 %8 = load i32* %7;
    i32 %9 = add i32 %6, i32 %8;
    i32 %10 = ztrunc i32 %9 to i32;
    i32* %11 = getelementptr &(struct Group* %g)[i32 0].workers[i32 3].salary;
    i32 %12 = load i32* %11;
    i32 %13 = add i32 %10, i32 %12;
    i32 %14 = ztrunc i32 %13 to i32;
    i32* %15 = getelementptr &(struct Group* %g)[i32 0].workers[i32 4].salary;
    i32 %16 = load i32* %15;
    i32 %17 = add i32 %14, i32 %16;
    i32 %18 = ztrunc i32 %17 to i32;
    i32* %19 = getelementptr &(struct Group* %g)[i32 0].workers[i32 5].salary;
    i32 %20 = load i32* %19;
    i32 %21 = add i32 %18, i32 %20;
    i32 %22 = ztrunc i32 %21 to i32;
    i32* %23 = getelementptr &(struct Group* %g)[i32 0].workers[i32 6].salary;
    i32 %24 = load i32* %23;
    i32 %25 = add i32 %22, i32 %24;
    i32 %26 = ztrunc i32 %25 to i32;
    i32* %27 = getelementptr &(struct Group* %g)[i32 0].workers[i32 7].salary;
    i32 %28 = load i32* %27;
    i32 %29 = add i32 %26, i32 %28;
    i32 %30 = ztrunc i32 %29 to i32;
    i32* %31 = getelementptr &(struct Group* %g)[i32 0].workers[i32 8].salary;
    i32 %32 = load i32* %31;
    i32 %33 = add i32 %30, i32 %32;
    i32 %34 = ztrunc i32 %33 to i32;
    i32* %35 = getelementptr &(struct Group* %g)[i32 0].workers[i32 9].salary;
    i32 %36 = load i32* %35;
    i32 %37 = add i32 %34, i32 %36;
    i32 %38 = strunc i32 %37 to i32;
    i32 %39 = sdiv i32 %38, i32 10;
    i32 %40 = strunc i32 %39 to i32;
    ret i32 %40;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    ubr ^while.body;
  ^while.body:
    i32 %0 = phi [^entry, i32 0] [^while.body, i32 %48];
    i32 %1 = phi [^entry, i32 0] [^while.body, i32 %46];
    i32 %2 = phi [^entry, i32 0] [^while.body, i32 %45];
    i32 %3 = add i32 %0, i32 3000;
    i32 %4 = ztrunc i32 %3 to i32;
    i32 %5 = add i32 %0, i32 3150;
    i32 %6 = ztrunc i32 %5 to i32;
    i32 %7 = add i32 %4, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    i32 %9 = add i32 %0, i32 3300;
    i32 %10 = ztrunc i32 %9 to i32;
    i32 %11 = add i32 %8, i32 %10;
    i32 %12 = ztrunc i32 %11 to i32;
    i32 %13 = add i32 %0, i32 3450;
    i32 %14 = ztrunc i32 %13 to i32;
    i32 %15 = add i32 %12, i32 %14;
    i32 %16 = ztrunc i32 %15 to i32;
    i32 %17 = add i32 %0, i32 3600;
    i32 %18 = ztrunc i32 %17 to i32;
    i32 %19 = add i32 %16, i32 %18;
    i32 %20 = ztrunc i32 %19 to i32;
    i32 %21 = add i32 %0, i32 3750;
    i32 %22 = ztrunc i32 %21 to i32;
    i32 %23 = add i32 %20, i32 %22;
    i32 %24 = ztrunc i32 %23 to i32;
    i32 %25 = add i32 %0, i32 3900;
    i32 %26 = ztrunc i32 %25 to i32;
    i32 %27 = add i32 %24, i32 %26;
    i32 %28 = ztrunc i32 %27 to i32;
    i32 %29 = add i32 %0, i32 4050;
    i32 %30 = ztrunc i32 %29 to i32;
    i32 %31 = add i32 %28, i32 %30;
    i32 %32 = ztrunc i32 %31 to i32;
    i32 %33 = add i32 %0, i32 4200;
    i32 %34 = ztrunc i32 %33 to i32;
    i32 %35 = add i32 %32, i32 %34;
    i32 %36 = ztrunc i32 %35 to i32;
    i32 %37 = add i32 %0, i32 4350;
    i32 %38 = ztrunc i32 %37 to i32;
    i32 %39 = add i32 %36, i32 %38;
    i32 %40 = strunc i32 %39 to i32;
    i32 %41 = sdiv i32 %40, i32 10;
    i32 %42 = ztrunc i32 %41 to i32;
    i32 %43 = ztrunc i32 %2 to i32;
    i32 %44 = add i32 %42, i32 %43;
    i32 %45 = strunc i32 %44 to i32;
    i32 %46 = add i32 %1, i32 1;
    i1 %47 = icmp slt i32 %46, i32 5;
    i32 %48 = add i32 %0, i32 100;
    cbr i1 %47(prob = 0.8), ^while.body, ^b;
  ^b:
    i32 %49 = sdiv i32 %45, i32 5;
    call (i32) -> void @write(i32 %49);
    ret i32 0;
}
