struct Worker {i32 id, i32 salary, i32 group};
struct Group {i32 group_id, [10 * struct Worker] workers, i32 avg_salary};

func @read() -> i32 { NoMemoryRead NoMemoryWrite };
func @write() -> void { NoMemoryRead NoMemoryWrite };
func @calculate_avg(struct Group* %g) -> i32 {
^entry:
    i32* %k = alloc i32;
    i32* %sum = alloc i32;
    struct Group* %g1 = alloc struct Group;
    i32* %0 = getelementptr &(struct Group* %g1)[i32 0].group_id;
    i32* %1 = getelementptr &(struct Group* %g)[i32 0].group_id;
    i32 %2 = load i32* %1;
    store i32* %0 with i32 %2;
    [10 * struct Worker]* %3 = getelementptr &(struct Group* %g1)[i32 0].workers;
    [10 * struct Worker]* %4 = getelementptr &(struct Group* %g)[i32 0].workers;
    struct Worker* %5 = getelementptr &([10 * struct Worker]* %3)[i32 0][i32 0];
    struct Worker* %6 = getelementptr &([10 * struct Worker]* %4)[i32 0][i32 0];
    i32* %7 = getelementptr &(struct Worker* %5)[i32 0].id;
    i32* %8 = getelementptr &(struct Worker* %6)[i32 0].id;
    i32 %9 = load i32* %8;
    store i32* %7 with i32 %9;
    i32* %10 = getelementptr &(struct Worker* %5)[i32 0].salary;
    i32* %11 = getelementptr &(struct Worker* %6)[i32 0].salary;
    i32 %12 = load i32* %11;
    store i32* %10 with i32 %12;
    i32* %13 = getelementptr &(struct Worker* %5)[i32 0].group;
    i32* %14 = getelementptr &(struct Worker* %6)[i32 0].group;
    i32 %15 = load i32* %14;
    store i32* %13 with i32 %15;
    struct Worker* %16 = getelementptr &([10 * struct Worker]* %3)[i32 0][i32 1];
    struct Worker* %17 = getelementptr &([10 * struct Worker]* %4)[i32 0][i32 1];
    i32* %18 = getelementptr &(struct Worker* %16)[i32 0].id;
    i32* %19 = getelementptr &(struct Worker* %17)[i32 0].id;
    i32 %20 = load i32* %19;
    store i32* %18 with i32 %20;
    i32* %21 = getelementptr &(struct Worker* %16)[i32 0].salary;
    i32* %22 = getelementptr &(struct Worker* %17)[i32 0].salary;
    i32 %23 = load i32* %22;
    store i32* %21 with i32 %23;
    i32* %24 = getelementptr &(struct Worker* %16)[i32 0].group;
    i32* %25 = getelementptr &(struct Worker* %17)[i32 0].group;
    i32 %26 = load i32* %25;
    store i32* %24 with i32 %26;
    struct Worker* %27 = getelementptr &([10 * struct Worker]* %3)[i32 0][i32 2];
    struct Worker* %28 = getelementptr &([10 * struct Worker]* %4)[i32 0][i32 2];
    i32* %29 = getelementptr &(struct Worker* %27)[i32 0].id;
    i32* %30 = getelementptr &(struct Worker* %28)[i32 0].id;
    i32 %31 = load i32* %30;
    store i32* %29 with i32 %31;
    i32* %32 = getelementptr &(struct Worker* %27)[i32 0].salary;
    i32* %33 = getelementptr &(struct Worker* %28)[i32 0].salary;
    i32 %34 = load i32* %33;
    store i32* %32 with i32 %34;
    i32* %35 = getelementptr &(struct Worker* %27)[i32 0].group;
    i32* %36 = getelementptr &(struct Worker* %28)[i32 0].group;
    i32 %37 = load i32* %36;
    store i32* %35 with i32 %37;
    struct Worker* %38 = getelementptr &([10 * struct Worker]* %3)[i32 0][i32 3];
    struct Worker* %39 = getelementptr &([10 * struct Worker]* %4)[i32 0][i32 3];
    i32* %40 = getelementptr &(struct Worker* %38)[i32 0].id;
    i32* %41 = getelementptr &(struct Worker* %39)[i32 0].id;
    i32 %42 = load i32* %41;
    store i32* %40 with i32 %42;
    i32* %43 = getelementptr &(struct Worker* %38)[i32 0].salary;
    i32* %44 = getelementptr &(struct Worker* %39)[i32 0].salary;
    i32 %45 = load i32* %44;
    store i32* %43 with i32 %45;
    i32* %46 = getelementptr &(struct Worker* %38)[i32 0].group;
    i32* %47 = getelementptr &(struct Worker* %39)[i32 0].group;
    i32 %48 = load i32* %47;
    store i32* %46 with i32 %48;
    struct Worker* %49 = getelementptr &([10 * struct Worker]* %3)[i32 0][i32 4];
    struct Worker* %50 = getelementptr &([10 * struct Worker]* %4)[i32 0][i32 4];
    i32* %51 = getelementptr &(struct Worker* %49)[i32 0].id;
    i32* %52 = getelementptr &(struct Worker* %50)[i32 0].id;
    i32 %53 = load i32* %52;
    store i32* %51 with i32 %53;
    i32* %54 = getelementptr &(struct Worker* %49)[i32 0].salary;
    i32* %55 = getelementptr &(struct Worker* %50)[i32 0].salary;
    i32 %56 = load i32* %55;
    store i32* %54 with i32 %56;
    i32* %57 = getelementptr &(struct Worker* %49)[i32 0].group;
    i32* %58 = getelementptr &(struct Worker* %50)[i32 0].group;
    i32 %59 = load i32* %58;
    store i32* %57 with i32 %59;
    struct Worker* %60 = getelementptr &([10 * struct Worker]* %3)[i32 0][i32 5];
    struct Worker* %61 = getelementptr &([10 * struct Worker]* %4)[i32 0][i32 5];
    i32* %62 = getelementptr &(struct Worker* %60)[i32 0].id;
    i32* %63 = getelementptr &(struct Worker* %61)[i32 0].id;
    i32 %64 = load i32* %63;
    store i32* %62 with i32 %64;
    i32* %65 = getelementptr &(struct Worker* %60)[i32 0].salary;
    i32* %66 = getelementptr &(struct Worker* %61)[i32 0].salary;
    i32 %67 = load i32* %66;
    store i32* %65 with i32 %67;
    i32* %68 = getelementptr &(struct Worker* %60)[i32 0].group;
    i32* %69 = getelementptr &(struct Worker* %61)[i32 0].group;
    i32 %70 = load i32* %69;
    store i32* %68 with i32 %70;
    struct Worker* %71 = getelementptr &([10 * struct Worker]* %3)[i32 0][i32 6];
    struct Worker* %72 = getelementptr &([10 * struct Worker]* %4)[i32 0][i32 6];
    i32* %73 = getelementptr &(struct Worker* %71)[i32 0].id;
    i32* %74 = getelementptr &(struct Worker* %72)[i32 0].id;
    i32 %75 = load i32* %74;
    store i32* %73 with i32 %75;
    i32* %76 = getelementptr &(struct Worker* %71)[i32 0].salary;
    i32* %77 = getelementptr &(struct Worker* %72)[i32 0].salary;
    i32 %78 = load i32* %77;
    store i32* %76 with i32 %78;
    i32* %79 = getelementptr &(struct Worker* %71)[i32 0].group;
    i32* %80 = getelementptr &(struct Worker* %72)[i32 0].group;
    i32 %81 = load i32* %80;
    store i32* %79 with i32 %81;
    struct Worker* %82 = getelementptr &([10 * struct Worker]* %3)[i32 0][i32 7];
    struct Worker* %83 = getelementptr &([10 * struct Worker]* %4)[i32 0][i32 7];
    i32* %84 = getelementptr &(struct Worker* %82)[i32 0].id;
    i32* %85 = getelementptr &(struct Worker* %83)[i32 0].id;
    i32 %86 = load i32* %85;
    store i32* %84 with i32 %86;
    i32* %87 = getelementptr &(struct Worker* %82)[i32 0].salary;
    i32* %88 = getelementptr &(struct Worker* %83)[i32 0].salary;
    i32 %89 = load i32* %88;
    store i32* %87 with i32 %89;
    i32* %90 = getelementptr &(struct Worker* %82)[i32 0].group;
    i32* %91 = getelementptr &(struct Worker* %83)[i32 0].group;
    i32 %92 = load i32* %91;
    store i32* %90 with i32 %92;
    struct Worker* %93 = getelementptr &([10 * struct Worker]* %3)[i32 0][i32 8];
    struct Worker* %94 = getelementptr &([10 * struct Worker]* %4)[i32 0][i32 8];
    i32* %95 = getelementptr &(struct Worker* %93)[i32 0].id;
    i32* %96 = getelementptr &(struct Worker* %94)[i32 0].id;
    i32 %97 = load i32* %96;
    store i32* %95 with i32 %97;
    i32* %98 = getelementptr &(struct Worker* %93)[i32 0].salary;
    i32* %99 = getelementptr &(struct Worker* %94)[i32 0].salary;
    i32 %100 = load i32* %99;
    store i32* %98 with i32 %100;
    i32* %101 = getelementptr &(struct Worker* %93)[i32 0].group;
    i32* %102 = getelementptr &(struct Worker* %94)[i32 0].group;
    i32 %103 = load i32* %102;
    store i32* %101 with i32 %103;
    struct Worker* %104 = getelementptr &([10 * struct Worker]* %3)[i32 0][i32 9];
    struct Worker* %105 = getelementptr &([10 * struct Worker]* %4)[i32 0][i32 9];
    i32* %106 = getelementptr &(struct Worker* %104)[i32 0].id;
    i32* %107 = getelementptr &(struct Worker* %105)[i32 0].id;
    i32 %108 = load i32* %107;
    store i32* %106 with i32 %108;
    i32* %109 = getelementptr &(struct Worker* %104)[i32 0].salary;
    i32* %110 = getelementptr &(struct Worker* %105)[i32 0].salary;
    i32 %111 = load i32* %110;
    store i32* %109 with i32 %111;
    i32* %112 = getelementptr &(struct Worker* %104)[i32 0].group;
    i32* %113 = getelementptr &(struct Worker* %105)[i32 0].group;
    i32 %114 = load i32* %113;
    store i32* %112 with i32 %114;
    i32* %115 = getelementptr &(struct Group* %g1)[i32 0].avg_salary;
    i32* %116 = getelementptr &(struct Group* %g)[i32 0].avg_salary;
    i32 %117 = load i32* %116;
    store i32* %115 with i32 %117;
    store i32* %sum with i32 0;
    store i32* %k with i32 0;
    ubr ^while.header;
^while.header:
    i32 %118 = load i32* %k;
    i1 %119 = scmp lt i32 %118, i32 10;
    i32 %120 = zext i1 %119 to i32;
    i1 %121 = scmp neq i32 %120, i32 0;
    cbr i1 %121(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %122 = load i32* %sum;
    [10 * struct Worker]* %123 = getelementptr &(struct Group* %g1)[i32 0].workers;
    i32 %124 = load i32* %k;
    struct Worker* %125 = getelementptr &([10 * struct Worker]* %123)[i32 0][i32 %124];
    i32* %126 = getelementptr &(struct Worker* %125)[i32 0].salary;
    i32 %127 = load i32* %126;
    i32 %128 = add i32 %122, i32 %127;
    store i32* %sum with i32 %128;
    i32 %129 = load i32* %k;
    i32 %130 = add i32 %129, i32 1;
    store i32* %k with i32 %130;
    ubr ^while.header;
^b:
    i32* %131 = getelementptr &(struct Group* %g1)[i32 0].avg_salary;
    i32 %132 = load i32* %sum;
    i32 %133 = sdiv i32 %132, i32 10;
    store i32* %131 with i32 %133;
    i32* %134 = getelementptr &(struct Group* %g1)[i32 0].avg_salary;
    i32 %135 = load i32* %134;
    ret i32 %135;
}
func @main() -> i32 {
^entry:
    i32* %avg = alloc i32;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    [5 * struct Group]* %company = alloc [5 * struct Group];
    store i32* %i with i32 0;
    store i32* %j with i32 0;
    store i32* %avg with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i1 %1 = scmp lt i32 %0, i32 5;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.97), ^while.body, ^b;
^while.body:
    store i32* %j with i32 0;
    i32 %4 = load i32* %i;
    struct Group* %5 = getelementptr &([5 * struct Group]* %company)[i32 0][i32 %4];
    i32* %6 = getelementptr &(struct Group* %5)[i32 0].group_id;
    i32 %7 = load i32* %i;
    store i32* %6 with i32 %7;
    ubr ^while.header1;
^b:
    i32 %8 = load i32* %avg;
    i32 %9 = sdiv i32 %8, i32 5;
    store i32* %avg with i32 %9;
    i32 %10 = load i32* %avg;
    call (i32) -> void @write(i32 %10);
    ret i32 0;
^while.header1:
    i32 %11 = load i32* %j;
    i1 %12 = scmp lt i32 %11, i32 10;
    i32 %13 = zext i1 %12 to i32;
    i1 %14 = scmp neq i32 %13, i32 0;
    cbr i1 %14(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %15 = load i32* %i;
    struct Group* %16 = getelementptr &([5 * struct Group]* %company)[i32 0][i32 %15];
    [10 * struct Worker]* %17 = getelementptr &(struct Group* %16)[i32 0].workers;
    i32 %18 = load i32* %j;
    struct Worker* %19 = getelementptr &([10 * struct Worker]* %17)[i32 0][i32 %18];
    i32* %20 = getelementptr &(struct Worker* %19)[i32 0].salary;
    i32 %21 = load i32* %i;
    i32 %22 = mul i32 %21, i32 100;
    i32 %23 = add i32 3000, i32 %22;
    i32 %24 = load i32* %j;
    i32 %25 = mul i32 %24, i32 150;
    i32 %26 = add i32 %23, i32 %25;
    store i32* %20 with i32 %26;
    i32 %27 = load i32* %j;
    i32 %28 = add i32 %27, i32 1;
    store i32* %j with i32 %28;
    ubr ^while.header1;
^b1:
    i32 %29 = load i32* %i;
    struct Group* %30 = getelementptr &([5 * struct Group]* %company)[i32 0][i32 %29];
    i32* %31 = getelementptr &(struct Group* %30)[i32 0].avg_salary;
    i32 %32 = load i32* %i;
    struct Group* %33 = getelementptr &([5 * struct Group]* %company)[i32 0][i32 %32];
    i32 %34 = call (struct Group*) -> i32 @calculate_avg(struct Group* %33);
    store i32* %31 with i32 %34;
    i32 %35 = load i32* %avg;
    i32 %36 = load i32* %i;
    struct Group* %37 = getelementptr &([5 * struct Group]* %company)[i32 0][i32 %36];
    i32* %38 = getelementptr &(struct Group* %37)[i32 0].avg_salary;
    i32 %39 = load i32* %38;
    i32 %40 = add i32 %35, i32 %39;
    store i32* %avg with i32 %40;
    i32 %41 = load i32* %i;
    i32 %42 = add i32 %41, i32 1;
    store i32* %i with i32 %42;
    ubr ^while.header;
}
