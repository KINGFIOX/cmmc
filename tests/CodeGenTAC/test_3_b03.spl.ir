struct Worker {i32 id, i32 salary, i32 group};
struct Group {i32 group_id, [10 * struct Worker] workers, i32 avg_salary};

func @read() -> i32 { NoMemoryRead NoMemoryWrite };
func @write(i32) -> void { NoMemoryRead NoMemoryWrite };
func @calculate_avg(struct Group*) -> i32 { NoMemoryWrite NoSideEffect NoRecurse } {
^entry(struct Group* %arg):
    i32* %0 = getelementptr &(struct Group* %arg)[i32 0].workers[i32 0].salary;
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &(struct Group* %arg)[i32 0].workers[i32 1].salary;
    i32 %3 = load i32* %2;
    i32* %4 = getelementptr &(struct Group* %arg)[i32 0].workers[i32 2].salary;
    i32 %5 = load i32* %4;
    i32* %6 = getelementptr &(struct Group* %arg)[i32 0].workers[i32 3].salary;
    i32 %7 = load i32* %6;
    i32* %8 = getelementptr &(struct Group* %arg)[i32 0].workers[i32 4].salary;
    i32 %9 = load i32* %8;
    i32* %10 = getelementptr &(struct Group* %arg)[i32 0].workers[i32 5].salary;
    i32 %11 = load i32* %10;
    i32* %12 = getelementptr &(struct Group* %arg)[i32 0].workers[i32 6].salary;
    i32 %13 = load i32* %12;
    i32* %14 = getelementptr &(struct Group* %arg)[i32 0].workers[i32 7].salary;
    i32 %15 = load i32* %14;
    i32* %16 = getelementptr &(struct Group* %arg)[i32 0].workers[i32 8].salary;
    i32 %17 = load i32* %16;
    i32* %18 = getelementptr &(struct Group* %arg)[i32 0].workers[i32 9].salary;
    i32 %19 = load i32* %18;
    i32 %20 = add i32 %11, i32 %13;
    i32 %21 = add i32 %20, i32 %15;
    i32 %22 = add i32 %21, i32 %17;
    i32 %23 = add i32 %22, i32 %19;
    i32 %24 = add i32 %23, i32 %1;
    i32 %25 = add i32 %24, i32 %3;
    i32 %26 = add i32 %25, i32 %5;
    i32 %27 = add i32 %26, i32 %7;
    i32 %28 = add i32 %27, i32 %9;
    i32 %29 = sdiv i32 %28, i32 10;
    ret i32 %29;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
^entry():
    call (i32) -> void @write(i32 3875);
    ret i32 0;
}
