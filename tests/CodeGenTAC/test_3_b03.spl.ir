struct Worker {i32 id, i32 salary, i32 group};
struct Group {i32 group_id, [10 * struct Worker] workers, i32 avg_salary};

internal func @write() -> void { NoMemoryRead NoMemoryWrite };
func @calculate_avg(struct Group* %g) -> i32 { NoMemoryWrite NoSideEffect NoRecurse } {
^entry:
    i32* %0 = getelementptr &(struct Group* %g)[i32 0].workers[i32 0].salary;
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &(struct Group* %g)[i32 0].workers[i32 1].salary;
    i32 %3 = load i32* %2;
    i32* %4 = getelementptr &(struct Group* %g)[i32 0].workers[i32 2].salary;
    i32 %5 = load i32* %4;
    i32* %6 = getelementptr &(struct Group* %g)[i32 0].workers[i32 3].salary;
    i32 %7 = load i32* %6;
    i32* %8 = getelementptr &(struct Group* %g)[i32 0].workers[i32 4].salary;
    i32 %9 = load i32* %8;
    i32* %10 = getelementptr &(struct Group* %g)[i32 0].workers[i32 5].salary;
    i32 %11 = load i32* %10;
    i32* %12 = getelementptr &(struct Group* %g)[i32 0].workers[i32 6].salary;
    i32 %13 = load i32* %12;
    i32* %14 = getelementptr &(struct Group* %g)[i32 0].workers[i32 7].salary;
    i32 %15 = load i32* %14;
    i32* %16 = getelementptr &(struct Group* %g)[i32 0].workers[i32 8].salary;
    i32 %17 = load i32* %16;
    i32* %18 = getelementptr &(struct Group* %g)[i32 0].workers[i32 9].salary;
    i32 %19 = load i32* %18;
    i32 %20 = add i32 %1, i32 %3;
    i32 %21 = add i32 %20, i32 %5;
    i32 %22 = add i32 %21, i32 %7;
    i32 %23 = add i32 %22, i32 %9;
    i32 %24 = add i32 %23, i32 %11;
    i32 %25 = add i32 %24, i32 %13;
    i32 %26 = add i32 %25, i32 %15;
    i32 %27 = add i32 %26, i32 %17;
    i32 %28 = add i32 %27, i32 %19;
    i32 %29 = sdiv i32 %28, i32 10;
    ret i32 %29;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
^entry:
    [5 * struct Group]* %company = alloc [5 * struct Group];
    ubr ^while.body;
^while.body:
    i32 %0 = phi [^entry, i32 0] [^while.body, i32 %30];
    i32 %1 = phi [^entry, i32 0] [^while.body, i32 %29];
    struct Group* %2 = getelementptr &([5 * struct Group]* %company)[i32 0][i32 %0];
    i32* %3 = getelementptr &(struct Group* %2)[i32 0].group_id;
    store i32* %3 with i32 %0;
    i32 %4 = mul i32 %0, i32 100;
    i32 %5 = add i32 %4, i32 3000;
    i32* %6 = getelementptr &(struct Group* %2)[i32 0].workers[i32 0].salary;
    store i32* %6 with i32 %5;
    i32* %7 = getelementptr &(struct Group* %2)[i32 0].workers[i32 1].salary;
    i32 %8 = add i32 %4, i32 3150;
    store i32* %7 with i32 %8;
    i32* %9 = getelementptr &(struct Group* %2)[i32 0].workers[i32 2].salary;
    i32 %10 = add i32 %4, i32 3300;
    store i32* %9 with i32 %10;
    i32* %11 = getelementptr &(struct Group* %2)[i32 0].workers[i32 3].salary;
    i32 %12 = add i32 %4, i32 3450;
    store i32* %11 with i32 %12;
    i32* %13 = getelementptr &(struct Group* %2)[i32 0].workers[i32 4].salary;
    i32 %14 = add i32 %4, i32 3600;
    store i32* %13 with i32 %14;
    i32* %15 = getelementptr &(struct Group* %2)[i32 0].workers[i32 5].salary;
    i32 %16 = add i32 %4, i32 3750;
    store i32* %15 with i32 %16;
    i32* %17 = getelementptr &(struct Group* %2)[i32 0].workers[i32 6].salary;
    i32 %18 = add i32 %4, i32 3900;
    store i32* %17 with i32 %18;
    i32* %19 = getelementptr &(struct Group* %2)[i32 0].workers[i32 7].salary;
    i32 %20 = add i32 %4, i32 4050;
    store i32* %19 with i32 %20;
    i32* %21 = getelementptr &(struct Group* %2)[i32 0].workers[i32 8].salary;
    i32 %22 = add i32 %4, i32 4200;
    store i32* %21 with i32 %22;
    i32* %23 = getelementptr &(struct Group* %2)[i32 0].workers[i32 9].salary;
    i32 %24 = add i32 %4, i32 4350;
    store i32* %23 with i32 %24;
    i32* %25 = getelementptr &(struct Group* %2)[i32 0].avg_salary;
    i32 %26 = mul i32 %0, i32 1000;
    i32 %27 = add i32 %26, i32 36750;
    i32 %28 = sdiv i32 %27, i32 10;
    store i32* %25 with i32 %28;
    i32 %29 = add i32 %1, i32 %28;
    i32 %30 = add i32 %0, i32 1;
    i1 %31 = scmp lt i32 %30, i32 5;
    cbr i1 %31(prob = 0.8), ^while.body, ^b;
^b:
    i32 %32 = sdiv i32 %29, i32 5;
    call (i32) -> void @write(i32 %32);
    ret i32 0;
}
