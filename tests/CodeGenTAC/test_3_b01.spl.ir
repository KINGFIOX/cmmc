func @read() -> i32 { NoMemoryRead NoMemoryWrite };
func @write(i32) -> void { NoMemoryRead NoMemoryWrite };
func @Joseph(i32, i32) -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
^entry(i32 %arg, i32 %arg1):
    [100 * i32]* %people = alloc [100 * i32];
    i1 %0 = scmp le i32 1, i32 %arg;
    cbr i1 %0, [ ^while.body [100 * i32]* %people, i32 %arg, i32 %arg1, i32 1, i1 %0, i1 %0 ], [ ^b [100 * i32]* %people, i32 %arg, i32 %arg1, i1 %0, i1 %0 ];
^while.body([100 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i1 %arg4, i1 %arg5):
    i32* %0 = getelementptr &([100 * i32]* %arg)[i32 0][i32 %arg3];
    store i32* %0 with i32 1;
    i32 %1 = add i32 %arg3, i32 1;
    i1 %2 = scmp le i32 %1, i32 %arg1;
    cbr i1 %2, [ ^while.body [100 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %1, i1 %arg4, i1 %arg5 ], [ ^b [100 * i32]* %arg, i32 %arg1, i32 %arg2, i1 %arg4, i1 %arg5 ];
^b([100 * i32]* %arg, i32 %arg1, i32 %arg2, i1 %arg3, i1 %arg4):
    cbr i1 %arg3, [ ^while.body1 [100 * i32]* %arg, i32 %arg1, i32 %arg2, i32 1, i32 0, i32 0, i1 %arg4 ], [ ^b1 ];
^while.body1([100 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i1 %arg6):
    i32* %0 = getelementptr &([100 * i32]* %arg)[i32 0][i32 %arg3];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 1;
    cbr i1 %2, [ ^indirect [100 * i32]* %arg, i32 %1, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i1 %arg6 ], [ ^indirect1 [100 * i32]* %arg, i32 %arg3, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i1 %arg6 ];
^b1():
    ret i32 0;
^indirect([100 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i1 %arg7):
    i32 %0 = add i32 %arg5, i32 %arg1;
    i1 %1 = scmp eq i32 %0, i32 %arg3;
    cbr i1 %1, [ ^if.then [100 * i32]* %arg, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg6, i1 %arg7 ], [ ^indirect2 [100 * i32]* %arg, i32 %arg2, i32 %arg3, i32 %arg4, i32 %0, i32 %arg6, i1 %arg7 ];
^indirect1([100 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i1 %arg7):
    i1 %0 = scmp eq i32 %arg1, i32 %arg2;
    cbr i1 %0, [ ^b2 [100 * i32]* %arg, i32 %arg2, i32 %arg3, i32 %arg5, i32 %arg6, i1 %arg7 ], [ ^indirect3 [100 * i32]* %arg, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i1 %arg7 ];
^if.then([100 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i1 %arg5):
    call (i32) -> void @write(i32 %arg3);
    i32* %0 = getelementptr &([100 * i32]* %arg)[i32 0][i32 %arg3];
    store i32* %0 with i32 0;
    i32 %1 = add i32 %arg4, i32 1;
    i1 %2 = scmp eq i32 %1, i32 %arg1;
    cbr i1 %2, [ ^b1 ], [ ^indirect4 [100 * i32]* %arg, i32 %arg1, i32 %arg1, i32 %arg2, i32 %arg3, i32 0, i32 %1, i1 %arg5 ];
^indirect2([100 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i1 %arg6):
    i1 %0 = scmp eq i32 %arg5, i32 %arg1;
    cbr i1 %0, [ ^b1 ], [ ^indirect4 [100 * i32]* %arg, i32 %arg1, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i1 %arg6 ];
^b2([100 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i1 %arg5):
    cbr i1 %arg5, [ ^while.body1 [100 * i32]* %arg, i32 %arg1, i32 %arg2, i32 1, i32 %arg3, i32 %arg4, i1 %arg5 ], [ ^b1 ];
^indirect3([100 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i1 %arg6):
    i32 %0 = add i32 %arg3, i32 1;
    i1 %1 = scmp le i32 %0, i32 %arg1;
    cbr i1 %1, [ ^while.body1 [100 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %0, i32 %arg4, i32 %arg5, i1 %arg6 ], [ ^b1 ];
^indirect4([100 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i1 %arg7):
    i1 %0 = scmp eq i32 %arg4, i32 %arg1;
    cbr i1 %0, [ ^b2 [100 * i32]* %arg, i32 %arg2, i32 %arg3, i32 %arg5, i32 %arg6, i1 %arg7 ], [ ^indirect3 [100 * i32]* %arg, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i1 %arg7 ];
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
^entry():
    i32 %0 = call () -> i32 @read();
    i32 %1 = call () -> i32 @read();
    [100 * i32]* %people = alloc [100 * i32];
    i1 %2 = scmp le i32 1, i32 %0;
    cbr i1 %2, [ ^while.body [100 * i32]* %people, i32 %0, i32 %1, i32 1, i1 %2, i1 %2 ], [ ^b [100 * i32]* %people, i32 %0, i32 %1, i1 %2, i1 %2 ];
^while.body([100 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i1 %arg4, i1 %arg5):
    i32* %0 = getelementptr &([100 * i32]* %arg)[i32 0][i32 %arg3];
    store i32* %0 with i32 1;
    i32 %1 = add i32 %arg3, i32 1;
    i1 %2 = scmp le i32 %1, i32 %arg1;
    cbr i1 %2, [ ^while.body [100 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %1, i1 %arg4, i1 %arg5 ], [ ^b [100 * i32]* %arg, i32 %arg1, i32 %arg2, i1 %arg4, i1 %arg5 ];
^b([100 * i32]* %arg, i32 %arg1, i32 %arg2, i1 %arg3, i1 %arg4):
    cbr i1 %arg3, [ ^while.body1 [100 * i32]* %arg, i32 %arg1, i32 %arg2, i32 1, i32 0, i32 0, i1 %arg4 ], [ ^entry1 ];
^while.body1([100 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i1 %arg6):
    i32* %0 = getelementptr &([100 * i32]* %arg)[i32 0][i32 %arg3];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 1;
    cbr i1 %2, [ ^indirect [100 * i32]* %arg, i32 %1, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i1 %arg6 ], [ ^indirect1 [100 * i32]* %arg, i32 %arg3, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i1 %arg6 ];
^entry1():
    ret i32 0;
^indirect([100 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i1 %arg7):
    i32 %0 = add i32 %arg1, i32 %arg5;
    i1 %1 = scmp eq i32 %0, i32 %arg3;
    cbr i1 %1, [ ^if.then [100 * i32]* %arg, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg6, i1 %arg7 ], [ ^indirect2 [100 * i32]* %arg, i32 %arg2, i32 %arg3, i32 %arg4, i32 %0, i32 %arg6, i1 %arg7 ];
^indirect1([100 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i1 %arg7):
    i1 %0 = scmp eq i32 %arg1, i32 %arg2;
    cbr i1 %0, [ ^b1 [100 * i32]* %arg, i32 %arg2, i32 %arg3, i32 %arg5, i32 %arg6, i1 %arg7 ], [ ^indirect3 [100 * i32]* %arg, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i1 %arg7 ];
^if.then([100 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i1 %arg5):
    call (i32) -> void @write(i32 %arg3);
    i32* %0 = getelementptr &([100 * i32]* %arg)[i32 0][i32 %arg3];
    store i32* %0 with i32 0;
    i32 %1 = add i32 %arg4, i32 1;
    i1 %2 = scmp eq i32 %1, i32 %arg1;
    cbr i1 %2, [ ^entry1 ], [ ^indirect4 [100 * i32]* %arg, i32 %arg1, i32 %arg1, i32 %arg2, i32 %arg3, i32 0, i32 %1, i1 %arg5 ];
^indirect2([100 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i1 %arg6):
    i1 %0 = scmp eq i32 %arg5, i32 %arg1;
    cbr i1 %0, [ ^entry1 ], [ ^indirect4 [100 * i32]* %arg, i32 %arg1, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i1 %arg6 ];
^b1([100 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i1 %arg5):
    cbr i1 %arg5, [ ^while.body1 [100 * i32]* %arg, i32 %arg1, i32 %arg2, i32 1, i32 %arg3, i32 %arg4, i1 %arg5 ], [ ^entry1 ];
^indirect3([100 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i1 %arg6):
    i32 %0 = add i32 %arg3, i32 1;
    i1 %1 = scmp le i32 %0, i32 %arg1;
    cbr i1 %1, [ ^while.body1 [100 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %0, i32 %arg4, i32 %arg5, i1 %arg6 ], [ ^entry1 ];
^indirect4([100 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i1 %arg7):
    i1 %0 = scmp eq i32 %arg4, i32 %arg1;
    cbr i1 %0, [ ^b1 [100 * i32]* %arg, i32 %arg2, i32 %arg3, i32 %arg5, i32 %arg6, i1 %arg7 ], [ ^indirect3 [100 * i32]* %arg, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i1 %arg7 ];
}
