func @read() -> i32 { NoMemoryRead NoMemoryWrite };
func @write(i32) -> void { NoMemoryRead NoMemoryWrite };
func @Joseph(i32, i32) -> i32 { NoRecurse } {
^entry(i32 %arg, i32 %arg1):
    i32* %n = alloc i32;
    store i32* %n with i32 %arg;
    i32* %m = alloc i32;
    store i32* %m with i32 %arg1;
    [100 * i32]* %people = alloc [100 * i32];
    i32* %i = alloc i32;
    i32* %j = alloc i32;
    store i32* %j with i32 0;
    i32* %k = alloc i32;
    store i32* %k with i32 0;
    i32* %num = alloc i32;
    store i32* %num with i32 0;
    i1 %0 = scmp le i32 1, i32 %arg;
    cbr i1 %0, [ ^while.body i32* %j, i32* %num, i32* %k, i32* %n, i32* %m, [100 * i32]* %people, i32* %i, i32 %arg, i32 1 ], [ ^b i32* %n, i32* %j, i32* %num, i32* %k, i32* %m, [100 * i32]* %people, i32* %i, i32 %arg ];
^while.body(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [100 * i32]* %arg5, i32* %arg6, i32 %arg7, i32 %arg8):
    i32* %0 = getelementptr &([100 * i32]* %arg5)[i32 0][i32 %arg8];
    store i32* %0 with i32 1;
    i32 %1 = add i32 %arg8, i32 1;
    i1 %2 = scmp le i32 %1, i32 %arg7;
    cbr i1 %2, [ ^while.body i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [100 * i32]* %arg5, i32* %arg6, i32 %arg7, i32 %1 ], [ ^indirect i32* %arg3, i32* %arg, i32* %arg1, i32* %arg2, i32* %arg4, [100 * i32]* %arg5, i32* %arg6 ];
^b(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [100 * i32]* %arg5, i32* %arg6, i32 %arg7):
    store i32* %arg6 with i32 1;
    i1 %0 = scmp le i32 1, i32 %arg7;
    cbr i1 %0, [ ^while.body1 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, [100 * i32]* %arg5, i32* %arg6, i32 1 ], [ ^b1 ];
^indirect(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [100 * i32]* %arg5, i32* %arg6):
    i32 %0 = load i32* %arg;
    ubr [ ^b i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [100 * i32]* %arg5, i32* %arg6, i32 %0 ];
^while.body1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [100 * i32]* %arg5, i32* %arg6, i32 %arg7):
    i32* %0 = getelementptr &([100 * i32]* %arg5)[i32 0][i32 %arg7];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 1;
    cbr i1 %2, [ ^indirect1 i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg4, [100 * i32]* %arg5, i32* %arg6, i32* %arg, i32 %arg7 ], [ ^indirect2 i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, [100 * i32]* %arg5, i32* %arg1, i32* %arg6, i32 %arg7 ];
^b1():
    ret i32 0;
^indirect1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [100 * i32]* %arg4, i32* %arg5, i32* %arg6, i32 %arg7):
    i32 %0 = load i32* %arg6;
    i32* %1 = getelementptr &([100 * i32]* %arg4)[i32 0][i32 %arg7];
    i32 %2 = load i32* %1;
    i32 %3 = add i32 %0, i32 %2;
    store i32* %arg6 with i32 %3;
    i32 %4 = load i32* %arg3;
    i1 %5 = scmp eq i32 %3, i32 %4;
    cbr i1 %5, [ ^if.then1 i32* %arg2, i32* %arg1, i32* %arg, i32* %arg3, [100 * i32]* %arg4, i32* %arg6, i32* %arg5 ], [ ^indirect4 i32* %arg6, i32* %arg3, [100 * i32]* %arg4, i32* %arg5, i32* %arg1, i32* %arg2, i32* %arg ];
^indirect2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [100 * i32]* %arg4, i32* %arg5, i32* %arg6, i32 %arg7):
    i32 %0 = load i32* %arg5;
    i1 %1 = scmp eq i32 %arg7, i32 %0;
    cbr i1 %1, [ ^if.then [100 * i32]* %arg4, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg, i32* %arg5, i32* %arg6 ], [ ^indirect3 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [100 * i32]* %arg4, i32* %arg5, i32* %arg6 ];
^if.then([100 * i32]* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    store i32* %arg6 with i32 1;
    ubr [ ^while.header [100 * i32]* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 1 ];
^if.then1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [100 * i32]* %arg4, i32* %arg5, i32* %arg6):
    i32 %0 = load i32* %arg6;
    call (i32) -> void @write(i32 %0);
    store i32* %arg5 with i32 0;
    i32* %1 = getelementptr &([100 * i32]* %arg4)[i32 0][i32 %0];
    store i32* %1 with i32 0;
    i32 %2 = load i32* %arg2;
    i32 %3 = add i32 %2, i32 1;
    store i32* %arg2 with i32 %3;
    i32 %4 = load i32* %arg;
    i1 %5 = scmp eq i32 %3, i32 %4;
    cbr i1 %5, [ ^if.then2 i32* %arg1, i32 %0 ], [ ^indirect8 i32* %arg5, i32* %arg1, i32* %arg2, i32* %arg3, [100 * i32]* %arg4, i32* %arg, i32* %arg6, i32 %4, i32 %0 ];
^indirect3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [100 * i32]* %arg4, i32* %arg5, i32* %arg6):
    i32 %0 = load i32* %arg6;
    ubr [ ^indirect6 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [100 * i32]* %arg4, i32* %arg5, i32* %arg6, i32 %0 ];
^indirect4(i32* %arg, i32* %arg1, [100 * i32]* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    i32 %0 = load i32* %arg6;
    i32 %1 = load i32* %arg5;
    i1 %2 = scmp eq i32 %0, i32 %1;
    cbr i1 %2, [ ^indirect5 i32* %arg4, i32* %arg3 ], [ ^indirect7 i32* %arg, i32* %arg4, i32* %arg6, i32* %arg1, [100 * i32]* %arg2, i32* %arg5, i32* %arg3, i32 %1 ];
^indirect5(i32* %arg, i32* %arg1):
    i32 %0 = load i32* %arg1;
    ubr [ ^if.then2 i32* %arg, i32 %0 ];
^indirect6(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [100 * i32]* %arg4, i32* %arg5, i32* %arg6, i32 %arg7):
    i32 %0 = add i32 %arg7, i32 1;
    store i32* %arg6 with i32 %0;
    ubr [ ^while.header [100 * i32]* %arg4, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg, i32* %arg5, i32* %arg6, i32 %0 ];
^indirect7(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [100 * i32]* %arg4, i32* %arg5, i32* %arg6, i32 %arg7):
    i32 %0 = load i32* %arg6;
    ubr [ ^indirect8 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [100 * i32]* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %0 ];
^while.header([100 * i32]* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7):
    i32 %0 = load i32* %arg5;
    i1 %1 = scmp le i32 %arg7, i32 %0;
    cbr i1 %1, [ ^indirect9 i32* %arg4, i32* %arg5, i32* %arg3, i32* %arg2, i32* %arg1, [100 * i32]* %arg, i32* %arg6 ], [ ^b1 ];
^indirect8(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [100 * i32]* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8):
    i1 %0 = scmp eq i32 %arg8, i32 %arg7;
    cbr i1 %0, [ ^if.then [100 * i32]* %arg4, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg, i32* %arg5, i32* %arg6 ], [ ^indirect6 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [100 * i32]* %arg4, i32* %arg5, i32* %arg6, i32 %arg8 ];
^if.then2(i32* %arg, i32 %arg1):
    store i32* %arg with i32 %arg1;
    ret i32 0;
^indirect9(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [100 * i32]* %arg5, i32* %arg6):
    i32 %0 = load i32* %arg6;
    ubr [ ^while.body1 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [100 * i32]* %arg5, i32* %arg6, i32 %0 ];
}
func @main() -> i32 { NoRecurse } {
^entry():
    i32 %0 = call () -> i32 @read();
    i32 %1 = call () -> i32 @read();
    i32* %n = alloc i32;
    store i32* %n with i32 %0;
    i32* %m = alloc i32;
    store i32* %m with i32 %1;
    [100 * i32]* %people = alloc [100 * i32];
    i32* %i = alloc i32;
    i32* %j = alloc i32;
    store i32* %j with i32 0;
    i32* %k = alloc i32;
    store i32* %k with i32 0;
    i32* %num = alloc i32;
    store i32* %num with i32 0;
    i1 %2 = scmp le i32 1, i32 %0;
    cbr i1 %2, [ ^while.body i32* %j, i32* %num, i32* %k, i32* %n, i32* %m, [100 * i32]* %people, i32* %i, i32 %0, i32 1 ], [ ^b i32* %n, i32* %j, i32* %num, i32* %k, i32* %m, [100 * i32]* %people, i32* %i, i32 %0 ];
^while.body(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [100 * i32]* %arg5, i32* %arg6, i32 %arg7, i32 %arg8):
    i32* %0 = getelementptr &([100 * i32]* %arg5)[i32 0][i32 %arg8];
    store i32* %0 with i32 1;
    i32 %1 = add i32 %arg8, i32 1;
    i1 %2 = scmp le i32 %1, i32 %arg7;
    cbr i1 %2, [ ^while.body i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [100 * i32]* %arg5, i32* %arg6, i32 %arg7, i32 %1 ], [ ^indirect i32* %arg3, i32* %arg, i32* %arg1, i32* %arg2, i32* %arg4, [100 * i32]* %arg5, i32* %arg6 ];
^b(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [100 * i32]* %arg5, i32* %arg6, i32 %arg7):
    store i32* %arg6 with i32 1;
    i1 %0 = scmp le i32 1, i32 %arg7;
    cbr i1 %0, [ ^while.body1 i32* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, [100 * i32]* %arg5, i32* %arg6, i32 1 ], [ ^entry1 ];
^indirect(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [100 * i32]* %arg5, i32* %arg6):
    i32 %0 = load i32* %arg;
    ubr [ ^b i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [100 * i32]* %arg5, i32* %arg6, i32 %0 ];
^while.body1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [100 * i32]* %arg5, i32* %arg6, i32 %arg7):
    i32* %0 = getelementptr &([100 * i32]* %arg5)[i32 0][i32 %arg7];
    i32 %1 = load i32* %0;
    i1 %2 = scmp eq i32 %1, i32 1;
    cbr i1 %2, [ ^indirect1 i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg4, [100 * i32]* %arg5, i32* %arg6, i32* %arg, i32 %arg7 ], [ ^indirect2 i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, [100 * i32]* %arg5, i32* %arg1, i32* %arg6, i32 %arg7 ];
^entry1():
    ret i32 0;
^indirect1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [100 * i32]* %arg4, i32* %arg5, i32* %arg6, i32 %arg7):
    i32 %0 = load i32* %arg6;
    i32* %1 = getelementptr &([100 * i32]* %arg4)[i32 0][i32 %arg7];
    i32 %2 = load i32* %1;
    i32 %3 = add i32 %0, i32 %2;
    store i32* %arg6 with i32 %3;
    i32 %4 = load i32* %arg3;
    i1 %5 = scmp eq i32 %3, i32 %4;
    cbr i1 %5, [ ^if.then1 i32* %arg2, i32* %arg1, i32* %arg, i32* %arg3, [100 * i32]* %arg4, i32* %arg6, i32* %arg5 ], [ ^indirect4 i32* %arg6, i32* %arg3, [100 * i32]* %arg4, i32* %arg5, i32* %arg1, i32* %arg2, i32* %arg ];
^indirect2(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [100 * i32]* %arg4, i32* %arg5, i32* %arg6, i32 %arg7):
    i32 %0 = load i32* %arg5;
    i1 %1 = scmp eq i32 %arg7, i32 %0;
    cbr i1 %1, [ ^if.then [100 * i32]* %arg4, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg, i32* %arg5, i32* %arg6 ], [ ^indirect3 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [100 * i32]* %arg4, i32* %arg5, i32* %arg6 ];
^if.then([100 * i32]* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    store i32* %arg6 with i32 1;
    ubr [ ^while.header [100 * i32]* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 1 ];
^if.then1(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [100 * i32]* %arg4, i32* %arg5, i32* %arg6):
    i32 %0 = load i32* %arg6;
    call (i32) -> void @write(i32 %0);
    store i32* %arg5 with i32 0;
    i32* %1 = getelementptr &([100 * i32]* %arg4)[i32 0][i32 %0];
    store i32* %1 with i32 0;
    i32 %2 = load i32* %arg2;
    i32 %3 = add i32 %2, i32 1;
    store i32* %arg2 with i32 %3;
    i32 %4 = load i32* %arg;
    i1 %5 = scmp eq i32 %3, i32 %4;
    cbr i1 %5, [ ^if.then2 i32* %arg1, i32 %0 ], [ ^indirect8 i32* %arg5, i32* %arg1, i32* %arg2, i32* %arg3, [100 * i32]* %arg4, i32* %arg, i32* %arg6, i32 %4, i32 %0 ];
^indirect3(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [100 * i32]* %arg4, i32* %arg5, i32* %arg6):
    i32 %0 = load i32* %arg6;
    ubr [ ^indirect6 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [100 * i32]* %arg4, i32* %arg5, i32* %arg6, i32 %0 ];
^indirect4(i32* %arg, i32* %arg1, [100 * i32]* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6):
    i32 %0 = load i32* %arg6;
    i32 %1 = load i32* %arg5;
    i1 %2 = scmp eq i32 %0, i32 %1;
    cbr i1 %2, [ ^indirect5 i32* %arg4, i32* %arg3 ], [ ^indirect7 i32* %arg, i32* %arg4, i32* %arg6, i32* %arg1, [100 * i32]* %arg2, i32* %arg5, i32* %arg3, i32 %1 ];
^indirect5(i32* %arg, i32* %arg1):
    i32 %0 = load i32* %arg1;
    ubr [ ^if.then2 i32* %arg, i32 %0 ];
^indirect6(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [100 * i32]* %arg4, i32* %arg5, i32* %arg6, i32 %arg7):
    i32 %0 = add i32 %arg7, i32 1;
    store i32* %arg6 with i32 %0;
    ubr [ ^while.header [100 * i32]* %arg4, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg, i32* %arg5, i32* %arg6, i32 %0 ];
^indirect7(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [100 * i32]* %arg4, i32* %arg5, i32* %arg6, i32 %arg7):
    i32 %0 = load i32* %arg6;
    ubr [ ^indirect8 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [100 * i32]* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %0 ];
^while.header([100 * i32]* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, i32* %arg5, i32* %arg6, i32 %arg7):
    i32 %0 = load i32* %arg5;
    i1 %1 = scmp le i32 %arg7, i32 %0;
    cbr i1 %1, [ ^indirect9 i32* %arg4, i32* %arg5, i32* %arg3, i32* %arg2, i32* %arg1, [100 * i32]* %arg, i32* %arg6 ], [ ^entry1 ];
^indirect8(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [100 * i32]* %arg4, i32* %arg5, i32* %arg6, i32 %arg7, i32 %arg8):
    i1 %0 = scmp eq i32 %arg8, i32 %arg7;
    cbr i1 %0, [ ^if.then [100 * i32]* %arg4, i32* %arg3, i32* %arg2, i32* %arg1, i32* %arg, i32* %arg5, i32* %arg6 ], [ ^indirect6 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, [100 * i32]* %arg4, i32* %arg5, i32* %arg6, i32 %arg8 ];
^if.then2(i32* %arg, i32 %arg1):
    store i32* %arg with i32 %arg1;
    ret i32 0;
^indirect9(i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [100 * i32]* %arg5, i32* %arg6):
    i32 %0 = load i32* %arg6;
    ubr [ ^while.body1 i32* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [100 * i32]* %arg5, i32* %arg6, i32 %0 ];
}
