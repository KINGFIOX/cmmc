func @read() -> i32 { NoMemoryRead NoMemoryWrite };
func @write() -> void { NoMemoryRead NoMemoryWrite };
func @Joseph(i32 %n, i32 %m) -> i32 {
^entry:
    i32* %num = alloc i32;
    i32* %k = alloc i32;
    i32* %j = alloc i32;
    i32* %i = alloc i32;
    [100 * i32]* %people = alloc [100 * i32];
    i32* %m1 = alloc i32;
    i32* %n1 = alloc i32;
    store i32* %n1 with i32 %n;
    store i32* %m1 with i32 %m;
    store i32* %i with i32 1;
    store i32* %j with i32 0;
    store i32* %k with i32 0;
    store i32* %num with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i32 %1 = load i32* %n1;
    i1 %2 = scmp le i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %5 = load i32* %i;
    i32* %6 = getelementptr &([100 * i32]* %people)[i32 0][i32 %5];
    store i32* %6 with i32 1;
    i32 %7 = load i32* %i;
    i32 %8 = add i32 %7, i32 1;
    store i32* %i with i32 %8;
    ubr ^while.header;
^b:
    store i32* %i with i32 1;
    ubr ^while.header1;
^while.header1:
    i32 %9 = load i32* %i;
    i32 %10 = load i32* %n1;
    i1 %11 = scmp le i32 %9, i32 %10;
    i32 %12 = zext i1 %11 to i32;
    i1 %13 = scmp neq i32 %12, i32 0;
    cbr i1 %13(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %14 = load i32* %i;
    i32* %15 = getelementptr &([100 * i32]* %people)[i32 0][i32 %14];
    i32 %16 = load i32* %15;
    i1 %17 = scmp eq i32 %16, i32 1;
    i32 %18 = zext i1 %17 to i32;
    i1 %19 = scmp neq i32 %18, i32 0;
    cbr i1 %19(prob = 0.5), ^if.then, ^b2;
^b1:
    ret i32 0;
^if.then:
    i32 %20 = load i32* %j;
    i32 %21 = load i32* %i;
    i32* %22 = getelementptr &([100 * i32]* %people)[i32 0][i32 %21];
    i32 %23 = load i32* %22;
    i32 %24 = add i32 %20, i32 %23;
    store i32* %j with i32 %24;
    i32 %25 = load i32* %j;
    i32 %26 = load i32* %m1;
    i1 %27 = scmp eq i32 %25, i32 %26;
    i32 %28 = zext i1 %27 to i32;
    i1 %29 = scmp neq i32 %28, i32 0;
    cbr i1 %29(prob = 0.5), ^if.then1, ^b4;
^b2:
    i32 %30 = load i32* %i;
    i32 %31 = load i32* %n1;
    i1 %32 = scmp eq i32 %30, i32 %31;
    i32 %33 = zext i1 %32 to i32;
    i1 %34 = scmp neq i32 %33, i32 0;
    cbr i1 %34(prob = 0.5), ^if.then2, ^b3;
^if.then1:
    i32 %35 = load i32* %i;
    call (i32) -> void @write(i32 %35);
    store i32* %j with i32 0;
    i32 %36 = load i32* %i;
    i32* %37 = getelementptr &([100 * i32]* %people)[i32 0][i32 %36];
    store i32* %37 with i32 0;
    i32 %38 = load i32* %k;
    i32 %39 = add i32 %38, i32 1;
    store i32* %k with i32 %39;
    ubr ^b4;
^if.then2:
    store i32* %i with i32 0;
    ubr ^b3;
^b3:
    i32 %40 = load i32* %i;
    i32 %41 = add i32 %40, i32 1;
    store i32* %i with i32 %41;
    ubr ^while.header1;
^b4:
    i32 %42 = load i32* %k;
    i32 %43 = load i32* %n1;
    i1 %44 = scmp eq i32 %42, i32 %43;
    i32 %45 = zext i1 %44 to i32;
    i1 %46 = scmp neq i32 %45, i32 0;
    cbr i1 %46(prob = 0.5), ^if.then3, ^b5;
^b5:
    ubr ^b2;
^if.then3:
    i32 %47 = load i32* %i;
    store i32* %num with i32 %47;
    ret i32 0;
}
func @main() -> i32 {
^entry:
    i32* %b = alloc i32;
    i32* %a = alloc i32;
    store i32* %a with i32 0;
    store i32* %b with i32 0;
    i32 %0 = call () -> i32 @read();
    store i32* %a with i32 %0;
    i32 %1 = call () -> i32 @read();
    store i32* %b with i32 %1;
    i32 %2 = load i32* %a;
    i32 %3 = load i32* %b;
    i32 %4 = call (i32, i32) -> i32 @Joseph(i32 %2, i32 %3);
    ret i32 0;
}
