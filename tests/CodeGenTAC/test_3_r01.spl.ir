func @read() -> i32 { NoMemoryRead NoMemoryWrite };
func @write() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 {
^entry:
    i32* %final = alloc i32;
    i32* %c = alloc i32;
    i32* %b = alloc i32;
    i32* %a = alloc i32;
    store i32* %a with i32 0;
    store i32* %b with i32 0;
    store i32* %c with i32 0;
    store i32* %final with i32 0;
    store i32* %a with i32 5;
    i32 %0 = load i32* %a;
    i32 %1 = load i32* %a;
    i32 %2 = mul i32 %0, i32 %1;
    i32 %3 = load i32* %a;
    i32 %4 = add i32 %3, i32 2;
    i32 %5 = mul i32 %2, i32 %4;
    store i32* %b with i32 %5;
    i32 %6 = load i32* %b;
    call (i32) -> void @write(i32 %6);
    i32 %7 = load i32* %b;
    i32 %8 = load i32* %a;
    i32 %9 = sdiv i32 %7, i32 %8;
    i32 %10 = add i32 %9, i32 1;
    store i32* %c with i32 %10;
    i32 %11 = load i32* %c;
    call (i32) -> void @write(i32 %11);
    i32 %12 = load i32* %a;
    i32 %13 = load i32* %b;
    i32 %14 = add i32 %12, i32 %13;
    i32 %15 = load i32* %c;
    i32 %16 = mul i32 %15, i32 3;
    i32 %17 = sub i32 %14, i32 %16;
    i32 %18 = load i32* %b;
    i32 %19 = load i32* %a;
    i32 %20 = sdiv i32 %18, i32 %19;
    i32 %21 = sub i32 %20, i32 4;
    i32 %22 = add i32 %17, i32 %21;
    store i32* %final with i32 %22;
    i32 %23 = load i32* %final;
    call (i32) -> void @write(i32 %23);
    ret i32 0;
}
