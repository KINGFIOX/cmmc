func @read() -> i32 { NoMemoryRead NoMemoryWrite };
func @write(i32) -> void { NoMemoryRead NoMemoryWrite };
func @Swap([8 * i32]*, i32, i32) -> i32 { NoRecurse } {
^entry([8 * i32]* %arg, i32 %arg1, i32 %arg2):
    i32* %0 = getelementptr &([8 * i32]* %arg)[i32 0][i32 %arg1];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &([8 * i32]* %arg)[i32 0][i32 %arg2];
    i32 %3 = load i32* %2;
    store i32* %0 with i32 %3;
    store i32* %2 with i32 %1;
    ret i32 0;
}
func @Partition([8 * i32]*, i32, i32) -> i32 { NoRecurse } {
^entry([8 * i32]* %arg, i32 %arg1, i32 %arg2):
    i32* %0 = getelementptr &([8 * i32]* %arg)[i32 0][i32 %arg1];
    i32 %1 = load i32* %0;
    i1 %2 = scmp lt i32 %arg1, i32 %arg2;
    cbr i1 %2, [ ^indirect [8 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %1 ], [ ^b i32 %arg1 ];
^indirect([8 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i1 %0 = scmp lt i32 %arg1, i32 %arg2;
    cbr i1 %0, [ ^b1 [8 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3 ], [ ^b2 [8 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3 ];
^b(i32 %arg):
    ret i32 %arg;
^b1([8 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32* %0 = getelementptr &([8 * i32]* %arg)[i32 0][i32 %arg2];
    i32 %1 = load i32* %0;
    i1 %2 = scmp ge i32 %1, i32 %arg3;
    cbr i1 %2, [ ^while.body [8 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3 ], [ ^b2 [8 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3 ];
^b2([8 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32* %0 = getelementptr &([8 * i32]* %arg)[i32 0][i32 %arg1];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &([8 * i32]* %arg)[i32 0][i32 %arg2];
    i32 %3 = load i32* %2;
    store i32* %0 with i32 %3;
    store i32* %2 with i32 %1;
    i1 %4 = scmp lt i32 %arg1, i32 %arg2;
    cbr i1 %4, [ ^b3 [8 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3 ], [ ^b4 [8 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3 ];
^while.body([8 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32 %0 = sub i32 %arg2, i32 1;
    i1 %1 = scmp lt i32 %arg1, i32 %0;
    cbr i1 %1, [ ^b1 [8 * i32]* %arg, i32 %arg1, i32 %0, i32 %arg3 ], [ ^b2 [8 * i32]* %arg, i32 %arg1, i32 %0, i32 %arg3 ];
^b3([8 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32* %0 = getelementptr &([8 * i32]* %arg)[i32 0][i32 %arg1];
    i32 %1 = load i32* %0;
    i1 %2 = scmp le i32 %1, i32 %arg3;
    cbr i1 %2, [ ^while.body1 [8 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3 ], [ ^b4 [8 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3 ];
^b4([8 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32* %0 = getelementptr &([8 * i32]* %arg)[i32 0][i32 %arg1];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &([8 * i32]* %arg)[i32 0][i32 %arg2];
    i32 %3 = load i32* %2;
    store i32* %0 with i32 %3;
    store i32* %2 with i32 %1;
    i1 %4 = scmp lt i32 %arg1, i32 %arg2;
    cbr i1 %4, [ ^indirect [8 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3 ], [ ^b i32 %arg1 ];
^while.body1([8 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3):
    i32 %0 = add i32 %arg1, i32 1;
    i1 %1 = scmp lt i32 %0, i32 %arg2;
    cbr i1 %1, [ ^b3 [8 * i32]* %arg, i32 %0, i32 %arg2, i32 %arg3 ], [ ^b4 [8 * i32]* %arg, i32 %0, i32 %arg2, i32 %arg3 ];
}
func @QuickSort([8 * i32]*, i32, i32) -> i32 {
^entry([8 * i32]* %arg, i32 %arg1, i32 %arg2):
    i1 %0 = scmp lt i32 %arg1, i32 %arg2;
    cbr i1 %0, [ ^indirect [8 * i32]* %arg, i32 %arg2, i32 %arg1, i32 %arg1, i32 %arg2 ], [ ^b ];
^indirect([8 * i32]* %arg, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4):
    i32* %base1 = alloc i32;
    i32* %low = alloc i32;
    store i32* %low with i32 %arg2;
    i32* %high = alloc i32;
    store i32* %high with i32 %arg1;
    i32* %base = alloc i32;
    i32* %0 = getelementptr &([8 * i32]* %arg)[i32 0][i32 %arg2];
    i32 %1 = load i32* %0;
    store i32* %base with i32 %1;
    i1 %2 = scmp lt i32 %arg2, i32 %arg1;
    cbr i1 %2, [ ^indirect1 [8 * i32]* %arg, i32* %base, i32* %high, i32* %low, i32* %base1, [8 * i32]* %arg, i32 %arg3, i32 %arg4, i32 %arg2, i32 %arg1, i32 %1 ], [ ^b1 i32* %base1, [8 * i32]* %arg, i32 %arg3, i32 %arg4, i32 %arg2 ];
^b():
    ret i32 0;
^indirect1([8 * i32]* %arg, i32* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [8 * i32]* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i1 %0 = scmp lt i32 %arg8, i32 %arg9;
    cbr i1 %0, [ ^b2 i32* %arg3, i32* %arg1, [8 * i32]* %arg, i32* %arg2, i32* %arg4, [8 * i32]* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10 ], [ ^b3 i32* %arg1, [8 * i32]* %arg, i32* %arg2, i32* %arg3, i32* %arg4, [8 * i32]* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9 ];
^b1(i32* %arg, [8 * i32]* %arg1, i32 %arg2, i32 %arg3, i32 %arg4):
    i32 %0 = sub i32 %arg4, i32 1;
    i32 %1 = call ([8 * i32]*, i32, i32) -> i32 @QuickSort([8 * i32]* %arg1, i32 %arg2, i32 %0);
    i32 %2 = add i32 %arg4, i32 1;
    i32 %3 = call ([8 * i32]*, i32, i32) -> i32 @QuickSort([8 * i32]* %arg1, i32 %2, i32 %arg3);
    free i32* %arg;
    ret i32 0;
^b2(i32* %arg, i32* %arg1, [8 * i32]* %arg2, i32* %arg3, i32* %arg4, [8 * i32]* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i32* %0 = getelementptr &([8 * i32]* %arg2)[i32 0][i32 %arg9];
    i32 %1 = load i32* %0;
    i1 %2 = scmp ge i32 %1, i32 %arg10;
    cbr i1 %2, [ ^while.body i32* %arg1, [8 * i32]* %arg2, i32* %arg, i32* %arg3, i32* %arg4, [8 * i32]* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10 ], [ ^b3 i32* %arg1, [8 * i32]* %arg2, i32* %arg3, i32* %arg, i32* %arg4, [8 * i32]* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9 ];
^b3(i32* %arg, [8 * i32]* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [8 * i32]* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i32* %0 = getelementptr &([8 * i32]* %arg1)[i32 0][i32 %arg8];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &([8 * i32]* %arg1)[i32 0][i32 %arg9];
    i32 %3 = load i32* %2;
    store i32* %0 with i32 %3;
    store i32* %2 with i32 %1;
    i32 %4 = load i32* %arg;
    i32 %5 = load i32* %arg2;
    i32 %6 = load i32* %arg3;
    i1 %7 = scmp lt i32 %arg8, i32 %arg9;
    cbr i1 %7, [ ^b4 i32* %arg2, i32* %arg, [8 * i32]* %arg1, i32* %arg3, i32* %arg4, [8 * i32]* %arg5, i32 %arg6, i32 %arg7, i32 %6, i32 %5, i32 %4 ], [ ^b5 i32* %arg, [8 * i32]* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [8 * i32]* %arg5, i32 %arg6, i32 %arg7, i32 %6, i32 %5 ];
^while.body(i32* %arg, [8 * i32]* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [8 * i32]* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i32 %0 = sub i32 %arg9, i32 1;
    store i32* %arg3 with i32 %0;
    i1 %1 = scmp lt i32 %arg8, i32 %0;
    cbr i1 %1, [ ^b2 i32* %arg2, i32* %arg, [8 * i32]* %arg1, i32* %arg3, i32* %arg4, [8 * i32]* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %0, i32 %arg10 ], [ ^b3 i32* %arg, [8 * i32]* %arg1, i32* %arg3, i32* %arg2, i32* %arg4, [8 * i32]* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %0 ];
^b4(i32* %arg, i32* %arg1, [8 * i32]* %arg2, i32* %arg3, i32* %arg4, [8 * i32]* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i32* %0 = getelementptr &([8 * i32]* %arg2)[i32 0][i32 %arg8];
    i32 %1 = load i32* %0;
    i1 %2 = scmp le i32 %1, i32 %arg10;
    cbr i1 %2, [ ^while.body1 i32* %arg1, [8 * i32]* %arg2, i32* %arg, i32* %arg3, i32* %arg4, [8 * i32]* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10 ], [ ^b5 i32* %arg1, [8 * i32]* %arg2, i32* %arg, i32* %arg3, i32* %arg4, [8 * i32]* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9 ];
^b5(i32* %arg, [8 * i32]* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [8 * i32]* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9):
    i32* %0 = getelementptr &([8 * i32]* %arg1)[i32 0][i32 %arg8];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &([8 * i32]* %arg1)[i32 0][i32 %arg9];
    i32 %3 = load i32* %2;
    store i32* %0 with i32 %3;
    store i32* %2 with i32 %1;
    i32 %4 = load i32* %arg;
    i32 %5 = load i32* %arg2;
    i32 %6 = load i32* %arg3;
    i1 %7 = scmp lt i32 %arg8, i32 %arg9;
    cbr i1 %7, [ ^indirect1 [8 * i32]* %arg1, i32* %arg, i32* %arg2, i32* %arg3, i32* %arg4, [8 * i32]* %arg5, i32 %arg6, i32 %arg7, i32 %6, i32 %5, i32 %4 ], [ ^b1 i32* %arg4, [8 * i32]* %arg5, i32 %arg6, i32 %arg7, i32 %6 ];
^while.body1(i32* %arg, [8 * i32]* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [8 * i32]* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10):
    i32 %0 = add i32 %arg8, i32 1;
    store i32* %arg3 with i32 %0;
    i1 %1 = scmp lt i32 %0, i32 %arg9;
    cbr i1 %1, [ ^b4 i32* %arg2, i32* %arg, [8 * i32]* %arg1, i32* %arg3, i32* %arg4, [8 * i32]* %arg5, i32 %arg6, i32 %arg7, i32 %0, i32 %arg9, i32 %arg10 ], [ ^b5 i32* %arg, [8 * i32]* %arg1, i32* %arg2, i32* %arg3, i32* %arg4, [8 * i32]* %arg5, i32 %arg6, i32 %arg7, i32 %0, i32 %arg9 ];
}
func @main() -> i32 { NoRecurse } {
^entry():
    [8 * i32]* %arr = alloc [8 * i32];
    ubr [ ^while.body [8 * i32]* %arr, i32 0 ];
^while.body([8 * i32]* %arg, i32 %arg1):
    i32* %0 = getelementptr &([8 * i32]* %arg)[i32 0][i32 %arg1];
    i32 %1 = call () -> i32 @read();
    store i32* %0 with i32 %1;
    i32 %2 = add i32 %arg1, i32 1;
    i1 %3 = scmp lt i32 %2, i32 8;
    cbr i1 %3, [ ^while.body [8 * i32]* %arg, i32 %2 ], [ ^b [8 * i32]* %arg ];
^b([8 * i32]* %arg):
    i32 %0 = call ([8 * i32]*, i32, i32) -> i32 @QuickSort([8 * i32]* %arg, i32 0, i32 7);
    ubr [ ^while.body1 [8 * i32]* %arg, i32 0 ];
^while.body1([8 * i32]* %arg, i32 %arg1):
    i32* %0 = getelementptr &([8 * i32]* %arg)[i32 0][i32 %arg1];
    i32 %1 = load i32* %0;
    call (i32) -> void @write(i32 %1);
    i32 %2 = add i32 %arg1, i32 1;
    i1 %3 = scmp lt i32 %2, i32 8;
    cbr i1 %3, [ ^while.body1 [8 * i32]* %arg, i32 %2 ], [ ^b1 ];
^b1():
    ret i32 0;
}
