func @read() -> i32 { NoMemoryRead NoMemoryWrite };
func @write() -> void { NoMemoryRead NoMemoryWrite };
func @Swap([8 * i32]* %a, i32 %l, i32 %h) -> i32 {
^entry:
    i32* %temp = alloc i32;
    i32* %h1 = alloc i32;
    i32* %l1 = alloc i32;
    store i32* %l1 with i32 %l;
    store i32* %h1 with i32 %h;
    store i32* %temp with i32 0;
    i32 %0 = load i32* %l1;
    i32* %1 = getelementptr &([8 * i32]* %a)[i32 0][i32 %0];
    i32 %2 = load i32* %1;
    store i32* %temp with i32 %2;
    i32 %3 = load i32* %l1;
    i32* %4 = getelementptr &([8 * i32]* %a)[i32 0][i32 %3];
    i32 %5 = load i32* %h1;
    i32* %6 = getelementptr &([8 * i32]* %a)[i32 0][i32 %5];
    i32 %7 = load i32* %6;
    store i32* %4 with i32 %7;
    i32 %8 = load i32* %h1;
    i32* %9 = getelementptr &([8 * i32]* %a)[i32 0][i32 %8];
    i32 %10 = load i32* %temp;
    store i32* %9 with i32 %10;
    ret i32 0;
}
func @Partition([8 * i32]* %b, i32 %low, i32 %high) -> i32 {
^entry:
    i32* %base = alloc i32;
    i32* %high1 = alloc i32;
    i32* %low1 = alloc i32;
    store i32* %low1 with i32 %low;
    store i32* %high1 with i32 %high;
    i32 %0 = load i32* %low1;
    i32* %1 = getelementptr &([8 * i32]* %b)[i32 0][i32 %0];
    i32 %2 = load i32* %1;
    store i32* %base with i32 %2;
    ubr ^while.header;
^while.header:
    i32 %3 = load i32* %low1;
    i32 %4 = load i32* %high1;
    i1 %5 = scmp lt i32 %3, i32 %4;
    i32 %6 = zext i1 %5 to i32;
    i1 %7 = scmp neq i32 %6, i32 0;
    cbr i1 %7(prob = 0.97), ^while.body, ^b1;
^while.body:
    ubr ^while.header1;
^b1:
    i32 %8 = load i32* %low1;
    ret i32 %8;
^while.header1:
    i32 %9 = load i32* %low1;
    i32 %10 = load i32* %high1;
    i1 %11 = scmp lt i32 %9, i32 %10;
    i32 %12 = zext i1 %11 to i32;
    i1 %13 = scmp neq i32 %12, i32 0;
    cbr i1 %13(prob = 0.5), ^b2, ^b3;
^b2:
    i32 %14 = load i32* %high1;
    i32* %15 = getelementptr &([8 * i32]* %b)[i32 0][i32 %14];
    i32 %16 = load i32* %15;
    i32 %17 = load i32* %base;
    i1 %18 = scmp ge i32 %16, i32 %17;
    i32 %19 = zext i1 %18 to i32;
    i1 %20 = scmp neq i32 %19, i32 0;
    ubr ^b3;
^b3:
    i1 %21 = phi [^b2, i1 %20] [^while.header1, i1 false];
    i32 %22 = zext i1 %21 to i32;
    i1 %23 = scmp neq i32 %22, i32 0;
    cbr i1 %23(prob = 0.97), ^while.body1, ^b4;
^while.body1:
    i32 %24 = load i32* %high1;
    i32 %25 = sub i32 %24, i32 1;
    store i32* %high1 with i32 %25;
    ubr ^while.header1;
^b4:
    i32 %26 = load i32* %low1;
    i32 %27 = load i32* %high1;
    i32 %28 = call ([8 * i32]*, i32, i32) -> i32 @Swap([8 * i32]* %b, i32 %26, i32 %27);
    ubr ^while.header2;
^while.header2:
    i32 %29 = load i32* %low1;
    i32 %30 = load i32* %high1;
    i1 %31 = scmp lt i32 %29, i32 %30;
    i32 %32 = zext i1 %31 to i32;
    i1 %33 = scmp neq i32 %32, i32 0;
    cbr i1 %33(prob = 0.5), ^b5, ^b6;
^b5:
    i32 %34 = load i32* %low1;
    i32* %35 = getelementptr &([8 * i32]* %b)[i32 0][i32 %34];
    i32 %36 = load i32* %35;
    i32 %37 = load i32* %base;
    i1 %38 = scmp le i32 %36, i32 %37;
    i32 %39 = zext i1 %38 to i32;
    i1 %40 = scmp neq i32 %39, i32 0;
    ubr ^b6;
^b6:
    i1 %41 = phi [^b5, i1 %40] [^while.header2, i1 false];
    i32 %42 = zext i1 %41 to i32;
    i1 %43 = scmp neq i32 %42, i32 0;
    cbr i1 %43(prob = 0.97), ^while.body2, ^b7;
^while.body2:
    i32 %44 = load i32* %low1;
    i32 %45 = add i32 %44, i32 1;
    store i32* %low1 with i32 %45;
    ubr ^while.header2;
^b7:
    i32 %46 = load i32* %low1;
    i32 %47 = load i32* %high1;
    i32 %48 = call ([8 * i32]*, i32, i32) -> i32 @Swap([8 * i32]* %b, i32 %46, i32 %47);
    ubr ^while.header;
}
func @QuickSort([8 * i32]* %c, i32 %low1, i32 %high1) -> i32 {
^entry:
    i32* %base1 = alloc i32;
    i32* %high11 = alloc i32;
    i32* %low11 = alloc i32;
    store i32* %low11 with i32 %low1;
    store i32* %high11 with i32 %high1;
    i32 %0 = load i32* %low11;
    i32 %1 = load i32* %high11;
    i1 %2 = scmp lt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.5), ^if.then, ^b;
^if.then:
    i32 %5 = load i32* %low11;
    i32 %6 = load i32* %high11;
    i32 %7 = call ([8 * i32]*, i32, i32) -> i32 @Partition([8 * i32]* %c, i32 %5, i32 %6);
    store i32* %base1 with i32 %7;
    i32 %8 = load i32* %low11;
    i32 %9 = load i32* %base1;
    i32 %10 = sub i32 %9, i32 1;
    i32 %11 = call ([8 * i32]*, i32, i32) -> i32 @QuickSort([8 * i32]* %c, i32 %8, i32 %10);
    i32 %12 = load i32* %base1;
    i32 %13 = add i32 %12, i32 1;
    i32 %14 = load i32* %high11;
    i32 %15 = call ([8 * i32]*, i32, i32) -> i32 @QuickSort([8 * i32]* %c, i32 %13, i32 %14);
    ubr ^b;
^b:
    ret i32 0;
}
func @main() -> i32 {
^entry:
    i32* %i = alloc i32;
    [8 * i32]* %arr = alloc [8 * i32];
    i32* %n = alloc i32;
    store i32* %n with i32 8;
    store i32* %i with i32 0;
    ubr ^while.header;
^while.header:
    i32 %0 = load i32* %i;
    i32 %1 = load i32* %n;
    i1 %2 = scmp lt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^while.body:
    i32 %5 = load i32* %i;
    i32* %6 = getelementptr &([8 * i32]* %arr)[i32 0][i32 %5];
    i32 %7 = call () -> i32 @read();
    store i32* %6 with i32 %7;
    i32 %8 = load i32* %i;
    i32 %9 = add i32 %8, i32 1;
    store i32* %i with i32 %9;
    ubr ^while.header;
^b:
    i32 %10 = load i32* %n;
    i32 %11 = sub i32 %10, i32 1;
    i32 %12 = call ([8 * i32]*, i32, i32) -> i32 @QuickSort([8 * i32]* %arr, i32 0, i32 %11);
    store i32* %i with i32 0;
    ubr ^while.header1;
^while.header1:
    i32 %13 = load i32* %i;
    i32 %14 = load i32* %n;
    i1 %15 = scmp lt i32 %13, i32 %14;
    i32 %16 = zext i1 %15 to i32;
    i1 %17 = scmp neq i32 %16, i32 0;
    cbr i1 %17(prob = 0.97), ^while.body1, ^b1;
^while.body1:
    i32 %18 = load i32* %i;
    i32* %19 = getelementptr &([8 * i32]* %arr)[i32 0][i32 %18];
    i32 %20 = load i32* %19;
    call (i32) -> void @write(i32 %20);
    i32 %21 = load i32* %i;
    i32 %22 = add i32 %21, i32 1;
    store i32* %i with i32 %22;
    ubr ^while.header1;
^b1:
    ret i32 0;
}
