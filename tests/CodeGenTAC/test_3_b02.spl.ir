internal func @read() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @write() -> void { NoMemoryRead NoMemoryWrite };
func @Swap([8 * i32]* %a, i32 %l, i32 %h) -> i32 { NoRecurse } {
^entry:
    i32* %0 = getelementptr &([8 * i32]* %a)[i32 0][i32 %l];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &([8 * i32]* %a)[i32 0][i32 %h];
    i32 %3 = load i32* %2;
    store i32* %0 with i32 %3;
    store i32* %2 with i32 %1;
    ret i32 0;
}
func @Partition([8 * i32]* %b, i32 %low, i32 %high) -> i32 { NoRecurse } {
^entry:
    i32* %0 = getelementptr &([8 * i32]* %b)[i32 0][i32 %low];
    i32 %1 = load i32* %0;
    ubr ^while.header;
^while.header:
    i32 %2 = phi [^entry, i32 %low] [^entry2, i32 %16];
    i32 %3 = phi [^entry, i32 %high] [^entry2, i32 %5];
    i1 %4 = scmp lt i32 %2, i32 %3;
    cbr i1 %4(prob = 0.97), ^while.header1, ^b1;
^while.header1:
    i32 %5 = phi [^while.header, i32 %3] [^while.body, i32 %11];
    i1 %6 = scmp lt i32 %2, i32 %5;
    cbr i1 %6(prob = 0.5), ^b2, ^b3;
^b1:
    ret i32 %2;
^b2:
    i32* %7 = getelementptr &([8 * i32]* %b)[i32 0][i32 %5];
    i32 %8 = load i32* %7;
    i1 %9 = scmp ge i32 %8, i32 %1;
    ubr ^b3;
^b3:
    i1 %10 = phi [^while.header1, i1 false] [^b2, i1 %9];
    cbr i1 %10(prob = 0.97), ^while.body, ^entry1;
^while.body:
    i32 %11 = add i32 %5, i32 -1;
    ubr ^while.header1;
^entry1:
    i32* %12 = getelementptr &([8 * i32]* %b)[i32 0][i32 %2];
    i32 %13 = load i32* %12;
    i32* %14 = getelementptr &([8 * i32]* %b)[i32 0][i32 %5];
    i32 %15 = load i32* %14;
    store i32* %12 with i32 %15;
    store i32* %14 with i32 %13;
    ubr ^while.header2;
^while.header2:
    i32 %16 = phi [^entry1, i32 %2] [^while.body1, i32 %22];
    i1 %17 = scmp lt i32 %16, i32 %5;
    cbr i1 %17(prob = 0.5), ^b4, ^b5;
^b4:
    i32* %18 = getelementptr &([8 * i32]* %b)[i32 0][i32 %16];
    i32 %19 = load i32* %18;
    i1 %20 = scmp le i32 %19, i32 %1;
    ubr ^b5;
^b5:
    i1 %21 = phi [^while.header2, i1 false] [^b4, i1 %20];
    cbr i1 %21(prob = 0.97), ^while.body1, ^entry2;
^while.body1:
    i32 %22 = add i32 %16, i32 1;
    ubr ^while.header2;
^entry2:
    i32* %23 = getelementptr &([8 * i32]* %b)[i32 0][i32 %16];
    i32 %24 = load i32* %23;
    i32* %25 = getelementptr &([8 * i32]* %b)[i32 0][i32 %5];
    i32 %26 = load i32* %25;
    store i32* %23 with i32 %26;
    store i32* %25 with i32 %24;
    ubr ^while.header;
}
func @QuickSort([8 * i32]* %c, i32 %low1, i32 %high1) -> i32 {
^0:
    ubr ^entry;
^entry:
    i1 %1 = phi [^0, i1 false] [^if.then, i1 true];
    i32 %2 = phi [^0, i32 undef] [^if.then, i32 %14];
    i32 %3 = phi [^0, i32 %low1] [^if.then, i32 %13];
    i1 %4 = scmp lt i32 %3, i32 %high1;
    cbr i1 %4(prob = 0.5), ^entry1, ^b;
^entry1:
    i32* %5 = getelementptr &([8 * i32]* %c)[i32 0][i32 %3];
    i32 %6 = load i32* %5;
    ubr ^while.header;
^b:
    i32 %7 = select i1 %1 ? i32 %2 : i32 0;
    ret i32 %7;
^while.header:
    i32 %8 = phi [^entry1, i32 %3] [^entry3, i32 %26];
    i32 %9 = phi [^entry1, i32 %high1] [^entry3, i32 %15];
    i1 %10 = scmp lt i32 %8, i32 %9;
    cbr i1 %10(prob = 0.97), ^while.header1, ^if.then;
^if.then:
    i32 %11 = add i32 %8, i32 -1;
    i32 %12 = call ([8 * i32]*, i32, i32) -> i32 @QuickSort([8 * i32]* %c, i32 %3, i32 %11);
    i32 %13 = add i32 %8, i32 1;
    i32 %14 = select i1 %1 ? i32 %2 : i32 0;
    ubr ^entry;
^while.header1:
    i32 %15 = phi [^while.header, i32 %9] [^while.body, i32 %21];
    i1 %16 = scmp lt i32 %8, i32 %15;
    cbr i1 %16(prob = 0.5), ^b1, ^b2;
^b1:
    i32* %17 = getelementptr &([8 * i32]* %c)[i32 0][i32 %15];
    i32 %18 = load i32* %17;
    i1 %19 = scmp ge i32 %18, i32 %6;
    ubr ^b2;
^b2:
    i1 %20 = phi [^while.header1, i1 false] [^b1, i1 %19];
    cbr i1 %20(prob = 0.97), ^while.body, ^entry2;
^while.body:
    i32 %21 = add i32 %15, i32 -1;
    ubr ^while.header1;
^entry2:
    i32* %22 = getelementptr &([8 * i32]* %c)[i32 0][i32 %8];
    i32 %23 = load i32* %22;
    i32* %24 = getelementptr &([8 * i32]* %c)[i32 0][i32 %15];
    i32 %25 = load i32* %24;
    store i32* %22 with i32 %25;
    store i32* %24 with i32 %23;
    ubr ^while.header2;
^while.header2:
    i32 %26 = phi [^entry2, i32 %8] [^while.body1, i32 %32];
    i1 %27 = scmp lt i32 %26, i32 %15;
    cbr i1 %27(prob = 0.5), ^b3, ^b4;
^b3:
    i32* %28 = getelementptr &([8 * i32]* %c)[i32 0][i32 %26];
    i32 %29 = load i32* %28;
    i1 %30 = scmp le i32 %29, i32 %6;
    ubr ^b4;
^b4:
    i1 %31 = phi [^while.header2, i1 false] [^b3, i1 %30];
    cbr i1 %31(prob = 0.97), ^while.body1, ^entry3;
^while.body1:
    i32 %32 = add i32 %26, i32 1;
    ubr ^while.header2;
^entry3:
    i32* %33 = getelementptr &([8 * i32]* %c)[i32 0][i32 %26];
    i32 %34 = load i32* %33;
    i32* %35 = getelementptr &([8 * i32]* %c)[i32 0][i32 %15];
    i32 %36 = load i32* %35;
    store i32* %33 with i32 %36;
    store i32* %35 with i32 %34;
    ubr ^while.header;
}
func @main() -> i32 { NoRecurse } {
^entry:
    [8 * i32]* %arr = alloc [8 * i32];
    ubr ^while.body;
^while.body:
    i32 %0 = phi [^entry, i32 0] [^while.body, i32 %3];
    i32* %1 = getelementptr &([8 * i32]* %arr)[i32 0][i32 %0];
    i32 %2 = call () -> i32 @read();
    store i32* %1 with i32 %2;
    i32 %3 = add i32 %0, i32 1;
    i1 %4 = scmp lt i32 %3, i32 8;
    cbr i1 %4(prob = 0.88), ^while.body, ^b;
^b:
    i32 %5 = call ([8 * i32]*, i32, i32) -> i32 @QuickSort([8 * i32]* %arr, i32 0, i32 7);
    ubr ^while.body1;
^while.body1:
    i32 %6 = phi [^b, i32 0] [^while.body1, i32 %9];
    i32* %7 = getelementptr &([8 * i32]* %arr)[i32 0][i32 %6];
    i32 %8 = load i32* %7;
    call (i32) -> void @write(i32 %8);
    i32 %9 = add i32 %6, i32 1;
    i1 %10 = scmp lt i32 %9, i32 8;
    cbr i1 %10(prob = 0.88), ^while.body1, ^b1;
^b1:
    ret i32 0;
}
