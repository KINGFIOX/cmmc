internal func @read() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @write() -> void { NoMemoryRead NoMemoryWrite };
func @Swap([8 * i32]* %a, i32 %l, i32 %h) -> i32 { NoRecurse } {
  ^entry:
    i32* %0 = getelementptr &([8 * i32]* %a)[i32 0][i32 %l];
    i32 %1 = load i32* %0;
    i32* %2 = getelementptr &([8 * i32]* %a)[i32 0][i32 %h];
    i32 %3 = load i32* %2;
    store i32* %0 with i32 %3;
    store i32* %2 with i32 %1;
    ret i32 0;
}
func @Partition([8 * i32]* %b, i32 %low, i32 %high) -> i32 { NoRecurse } {
  ^entry:
    i32* %0 = getelementptr &([8 * i32]* %b)[i32 0][i32 %low];
    i32 %1 = load i32* %0;
    ubr ^while.header;
  ^while.header:
    i32 %2 = phi [^entry, i32 %high] [^entry2, i32 %5];
    i32 %3 = phi [^entry, i32 %low] [^entry2, i32 %15];
    i1 %4 = icmp sgt i32 %2, i32 %3;
    cbr i1 %4(prob = 0.97), ^while.header1, ^b1;
  ^while.header1:
    i32 %5 = phi [^while.header, i32 %2] [^while.body, i32 %14];
    i1 %6 = icmp slt i32 %3, i32 %5;
    cbr i1 %6(prob = 0.5), ^b2, ^entry1;
  ^b1:
    ret i32 %3;
  ^entry1:
    i32* %7 = getelementptr &([8 * i32]* %b)[i32 0][i32 %3];
    i32 %8 = load i32* %7;
    i32* %9 = getelementptr &([8 * i32]* %b)[i32 0][i32 %5];
    i32 %10 = load i32* %9;
    store i32* %7 with i32 %10;
    store i32* %9 with i32 %8;
    ubr ^while.header2;
  ^b2:
    i32* %11 = getelementptr &([8 * i32]* %b)[i32 0][i32 %5];
    i32 %12 = load i32* %11;
    i1 %13 = icmp sle i32 %1, i32 %12;
    cbr i1 %13(prob = 0.97), ^while.body, ^entry1;
  ^while.body:
    i32 %14 = add i32 %5, i32 -1;
    ubr ^while.header1;
  ^while.header2:
    i32 %15 = phi [^entry1, i32 %3] [^while.body1, i32 %24];
    i1 %16 = icmp sgt i32 %5, i32 %15;
    cbr i1 %16(prob = 0.5), ^b3, ^entry2;
  ^entry2:
    i32* %17 = getelementptr &([8 * i32]* %b)[i32 0][i32 %15];
    i32 %18 = load i32* %17;
    i32* %19 = getelementptr &([8 * i32]* %b)[i32 0][i32 %5];
    i32 %20 = load i32* %19;
    store i32* %17 with i32 %20;
    store i32* %19 with i32 %18;
    ubr ^while.header;
  ^b3:
    i32* %21 = getelementptr &([8 * i32]* %b)[i32 0][i32 %15];
    i32 %22 = load i32* %21;
    i1 %23 = icmp sge i32 %1, i32 %22;
    cbr i1 %23(prob = 0.97), ^while.body1, ^entry2;
  ^while.body1:
    i32 %24 = add i32 %15, i32 1;
    ubr ^while.header2;
}
func @QuickSort([8 * i32]* %c, i32 %low1, i32 %high1) -> i32 {
  ^0:
    ubr ^entry;
  ^entry:
    i1 %1 = phi [^0, i1 false] [^if.then, i1 true];
    i32 %2 = phi [^0, i32 undef] [^if.then, i32 %13];
    i32 %3 = phi [^0, i32 %low1] [^if.then, i32 %14];
    i1 %4 = icmp sgt i32 %high1, i32 %3;
    cbr i1 %4(prob = 0.5), ^entry1, ^b;
  ^entry1:
    i32* %5 = getelementptr &([8 * i32]* %c)[i32 0][i32 %3];
    i32 %6 = load i32* %5;
    ubr ^while.header;
  ^b:
    i32 %7 = select i1 %1 ? i32 %2 : i32 0;
    ret i32 %7;
  ^while.header:
    i32 %8 = phi [^entry1, i32 %high1] [^entry3, i32 %15];
    i32 %9 = phi [^entry1, i32 %3] [^entry3, i32 %25];
    i1 %10 = icmp sgt i32 %8, i32 %9;
    cbr i1 %10(prob = 0.97), ^while.header1, ^if.then;
  ^if.then:
    i32 %11 = add i32 %9, i32 -1;
    i32 %12 = call ([8 * i32]*, i32, i32) -> i32 @QuickSort([8 * i32]* %c, i32 %3, i32 %11);
    i32 %13 = select i1 %1 ? i32 %2 : i32 0;
    i32 %14 = add i32 %9, i32 1;
    ubr ^entry;
  ^while.header1:
    i32 %15 = phi [^while.header, i32 %8] [^while.body, i32 %24];
    i1 %16 = icmp slt i32 %9, i32 %15;
    cbr i1 %16(prob = 0.5), ^b1, ^entry2;
  ^entry2:
    i32* %17 = getelementptr &([8 * i32]* %c)[i32 0][i32 %9];
    i32 %18 = load i32* %17;
    i32* %19 = getelementptr &([8 * i32]* %c)[i32 0][i32 %15];
    i32 %20 = load i32* %19;
    store i32* %17 with i32 %20;
    store i32* %19 with i32 %18;
    ubr ^while.header2;
  ^b1:
    i32* %21 = getelementptr &([8 * i32]* %c)[i32 0][i32 %15];
    i32 %22 = load i32* %21;
    i1 %23 = icmp sle i32 %6, i32 %22;
    cbr i1 %23(prob = 0.97), ^while.body, ^entry2;
  ^while.body:
    i32 %24 = add i32 %15, i32 -1;
    ubr ^while.header1;
  ^while.header2:
    i32 %25 = phi [^entry2, i32 %9] [^while.body1, i32 %34];
    i1 %26 = icmp sgt i32 %15, i32 %25;
    cbr i1 %26(prob = 0.5), ^b2, ^entry3;
  ^entry3:
    i32* %27 = getelementptr &([8 * i32]* %c)[i32 0][i32 %25];
    i32 %28 = load i32* %27;
    i32* %29 = getelementptr &([8 * i32]* %c)[i32 0][i32 %15];
    i32 %30 = load i32* %29;
    store i32* %27 with i32 %30;
    store i32* %29 with i32 %28;
    ubr ^while.header;
  ^b2:
    i32* %31 = getelementptr &([8 * i32]* %c)[i32 0][i32 %25];
    i32 %32 = load i32* %31;
    i1 %33 = icmp sge i32 %6, i32 %32;
    cbr i1 %33(prob = 0.97), ^while.body1, ^entry3;
  ^while.body1:
    i32 %34 = add i32 %25, i32 1;
    ubr ^while.header2;
}
func @main() -> i32 { NoRecurse } {
  ^entry:
    [8 * i32]* %arr = alloc [8 * i32], align 8;
    ubr ^while.body;
  ^while.body:
    i32 %0 = phi [^entry, i32 0] [^while.body, i32 %3];
    i32 %1 = call () -> i32 @read();
    i32* %2 = getelementptr &([8 * i32]* %arr)[i32 0][i32 %0];
    store i32* %2 with i32 %1;
    i32 %3 = add i32 %0, i32 1;
    i1 %4 = icmp slt i32 %3, i32 8;
    cbr i1 %4(prob = 0.88), ^while.body, ^b;
  ^b:
    i32 %5 = call ([8 * i32]*, i32, i32) -> i32 @QuickSort([8 * i32]* %arr, i32 0, i32 7);
    ubr ^while.body1;
  ^while.body1:
    i32 %6 = phi [^b, i32 0] [^while.body1, i32 %9];
    i32* %7 = getelementptr &([8 * i32]* %arr)[i32 0][i32 %6];
    i32 %8 = load i32* %7;
    call (i32) -> void @write(i32 %8);
    i32 %9 = add i32 %6, i32 1;
    i1 %10 = icmp slt i32 %9, i32 8;
    cbr i1 %10(prob = 0.88), ^while.body1, ^b1;
  ^b1:
    ret i32 0;
}
