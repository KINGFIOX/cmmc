func @test1() -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ret i32 100;
}
func @test2(i32 %x) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = shl i32 1, i32 %x;
    ret i32 %0;
}
func @test3(i32 %x) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ret i32 %x;
}
func @test4(i32 %x) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = add i32 %x, i32 1;
    ret i32 %0;
}
func @test5(i32 %x) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = neg i32 %x;
    ret i32 %0;
}
func @test6(i32 %x) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    [10 * i32]* %c = alloc [10 * i32];
    i32* %0 = getelementptr &([10 * i32]* %c)[i64 0][i64 0];
    store i32* %0 with i32 0;
    i32* %1 = getelementptr &([10 * i32]* %c)[i64 0][i64 1];
    store i32* %1 with i32 1;
    i32* %2 = getelementptr &([10 * i32]* %c)[i64 0][i64 2];
    store i32* %2 with i32 2;
    i32* %3 = getelementptr &([10 * i32]* %c)[i64 0][i64 3];
    store i32* %3 with i32 3;
    i32* %4 = getelementptr &([10 * i32]* %c)[i64 0][i64 5];
    store i32* %4 with i32 5;
    i32* %5 = getelementptr &([10 * i32]* %c)[i64 0][i64 6];
    store i32* %5 with i32 6;
    i32* %6 = getelementptr &([10 * i32]* %c)[i64 0][i64 7];
    store i32* %6 with i32 7;
    i32* %7 = getelementptr &([10 * i32]* %c)[i64 0][i64 8];
    store i32* %7 with i32 8;
    i32* %8 = getelementptr &([10 * i32]* %c)[i64 0][i64 9];
    store i32* %8 with i32 9;
    i32* %9 = getelementptr &([10 * i32]* %c)[i64 0][i64 4];
    store i32* %9 with i32 100;
    i32* %10 = getelementptr &([10 * i32]* %c)[i64 0][i32 %x];
    i32 %11 = load i32* %10;
    i32 %12 = add i32 %x, i32 %11;
    ret i32 %12;
}
