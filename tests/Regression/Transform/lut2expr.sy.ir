func @test1(i32 %x) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ret i32 100;
}
func @test2(i32 %x) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = shl i32 1, i32 %x;
    ret i32 %0;
}
func @test3(i32 %x) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ret i32 %x;
}
func @test4(i32 %x) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = add i32 %x, i32 1;
    ret i32 %0;
}
func @test5(i32 %x) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = neg i32 %x;
    ret i32 %0;
}
func @test6(i32 %x) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    [10 * i32]* %c = alloc [10 * i32], align 8;
    i32* %0 = getelementptr &([10 * i32]* %c)[i64 0][i64 0];
    store i32* %0 with i32 0;
    i32* %1 = getelementptr &([10 * i32]* %c)[i64 0][i64 1];
    store i32* %1 with i32 1;
    i32* %2 = getelementptr &([10 * i32]* %c)[i64 0][i64 2];
    store i32* %2 with i32 2;
    i32* %3 = getelementptr &([10 * i32]* %c)[i64 0][i64 3];
    store i32* %3 with i32 3;
    i32* %4 = getelementptr &([10 * i32]* %c)[i64 0][i64 5];
    store i32* %4 with i32 5;
    i32* %5 = getelementptr &([10 * i32]* %c)[i64 0][i64 6];
    store i32* %5 with i32 6;
    i32* %6 = getelementptr &([10 * i32]* %c)[i64 0][i64 7];
    store i32* %6 with i32 7;
    i32* %7 = getelementptr &([10 * i32]* %c)[i64 0][i64 8];
    store i32* %7 with i32 8;
    i32* %8 = getelementptr &([10 * i32]* %c)[i64 0][i64 9];
    store i32* %8 with i32 9;
    i32* %9 = getelementptr &([10 * i32]* %c)[i64 0][i64 4];
    store i32* %9 with i32 100;
    i32* %10 = getelementptr &([10 * i32]* %c)[i64 0][i32 %x];
    i32 %11 = load i32* %10;
    i32 %12 = add i32 %x, i32 %11;
    ret i32 %12;
}
func @test7(i32 %x) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i1 %0 = icmp sgt i32 %x, i32 0;
    cbr i1 %0(prob = 0.984615), ^super.header, ^b;
  ^super.header:
    i1 %1 = icmp sgt i32 %x, i32 3;
    cbr i1 %1(prob = 0.941176), ^super.header1, ^scalar.header;
  ^b:
    i32 %2 = phi [^entry, i32 0] [^scalar.header, i32 %8] [^for.body1, i32 %86];
    ret i32 %2;
  ^super.header1:
    i32 %3 = add i32 %x, i32 -3;
    i1 %4 = icmp sgt i32 %3, i32 15;
    i32 %5 = add i32 %x, i32 -18;
    cbr i1 %4(prob = 0.941176), ^for.body, ^scalar.header1;
  ^scalar.header:
    i32 %6 = phi [^super.header, i32 0] [^scalar.final, i32 %89];
    i32 %7 = phi [^super.header, i32 0] [^scalar.final, i32 %90];
    i32 %8 = phi [^super.header, i32 undef] [^scalar.final, i32 %89];
    i1 %9 = icmp sgt i32 %x, i32 %7;
    cbr i1 %9(prob = 0.75), ^for.body1, ^b;
  ^for.body:
    i32 %10 = phi [^super.header1, i32 0] [^for.body, i32 %75];
    i32 %11 = phi [^super.header1, i32 0] [^for.body, i32 %74];
    i32 %12 = add i32 %10, i32 1;
    i32 %13 = sub i32 8, i32 %10;
    i32 %14 = mul i32 %12, i32 %13;
    i32 %15 = sub i32 9, i32 %10;
    i32 %16 = mul i32 %10, i32 %15;
    i32 %17 = add i32 %14, i32 %16;
    i32 %18 = add i32 %10, i32 2;
    i32 %19 = sub i32 7, i32 %10;
    i32 %20 = mul i32 %18, i32 %19;
    i32 %21 = add i32 %17, i32 %20;
    i32 %22 = add i32 %10, i32 3;
    i32 %23 = sub i32 6, i32 %10;
    i32 %24 = mul i32 %22, i32 %23;
    i32 %25 = add i32 %21, i32 %24;
    i32 %26 = add i32 %10, i32 4;
    i32 %27 = sub i32 5, i32 %10;
    i32 %28 = mul i32 %26, i32 %27;
    i32 %29 = add i32 %25, i32 %28;
    i32 %30 = add i32 %10, i32 5;
    i32 %31 = sub i32 4, i32 %10;
    i32 %32 = mul i32 %30, i32 %31;
    i32 %33 = add i32 %29, i32 %32;
    i32 %34 = add i32 %10, i32 6;
    i32 %35 = sub i32 3, i32 %10;
    i32 %36 = mul i32 %34, i32 %35;
    i32 %37 = add i32 %33, i32 %36;
    i32 %38 = add i32 %10, i32 7;
    i32 %39 = sub i32 2, i32 %10;
    i32 %40 = mul i32 %38, i32 %39;
    i32 %41 = add i32 %37, i32 %40;
    i32 %42 = add i32 %10, i32 8;
    i32 %43 = sub i32 1, i32 %10;
    i32 %44 = mul i32 %42, i32 %43;
    i32 %45 = add i32 %41, i32 %44;
    i32 %46 = add i32 %10, i32 9;
    i32 %47 = neg i32 %10;
    i32 %48 = mul i32 %46, i32 %47;
    i32 %49 = add i32 %45, i32 %48;
    i32 %50 = add i32 %10, i32 10;
    i32 %51 = xor i32 %10, i32 -1;
    i32 %52 = mul i32 %50, i32 %51;
    i32 %53 = add i32 %49, i32 %52;
    i32 %54 = add i32 %10, i32 11;
    i32 %55 = sub i32 -2, i32 %10;
    i32 %56 = mul i32 %54, i32 %55;
    i32 %57 = add i32 %53, i32 %56;
    i32 %58 = add i32 %10, i32 12;
    i32 %59 = sub i32 -3, i32 %10;
    i32 %60 = mul i32 %58, i32 %59;
    i32 %61 = add i32 %57, i32 %60;
    i32 %62 = add i32 %10, i32 13;
    i32 %63 = sub i32 -4, i32 %10;
    i32 %64 = mul i32 %62, i32 %63;
    i32 %65 = add i32 %61, i32 %64;
    i32 %66 = add i32 %10, i32 14;
    i32 %67 = sub i32 -5, i32 %10;
    i32 %68 = mul i32 %66, i32 %67;
    i32 %69 = add i32 %65, i32 %68;
    i32 %70 = add i32 %10, i32 15;
    i32 %71 = sub i32 -6, i32 %10;
    i32 %72 = mul i32 %70, i32 %71;
    i32 %73 = add i32 %69, i32 %72;
    i32 %74 = add i32 %11, i32 %73;
    i32 %75 = add i32 %10, i32 16;
    i1 %76 = icmp sgt i32 %5, i32 %75;
    cbr i1 %76(prob = 0.941176), ^for.body, ^scalar.header1;
  ^scalar.header1:
    i32 %77 = phi [^super.header1, i32 0] [^for.body, i32 %75];
    i32 %78 = phi [^super.header1, i32 0] [^for.body, i32 %74];
    i32 %79 = phi [^super.header1, i32 undef] [^for.body, i32 %74];
    i32 %80 = phi [^super.header1, i32 undef] [^for.body, i32 %75];
    i1 %81 = icmp sgt i32 %3, i32 %77;
    cbr i1 %81(prob = 0.75), ^for.body2, ^scalar.final;
  ^for.body1 {scalar}:
    i32 %82 = phi [^scalar.header, i32 %7] [^for.body1, i32 %87];
    i32 %83 = phi [^scalar.header, i32 %6] [^for.body1, i32 %86];
    i32 %84 = sub i32 9, i32 %82;
    i32 %85 = mul i32 %82, i32 %84;
    i32 %86 = add i32 %83, i32 %85;
    i32 %87 = add i32 %82, i32 1;
    i1 %88 = icmp sgt i32 %x, i32 %87;
    cbr i1 %88(prob = 0.75), ^for.body1, ^b;
  ^scalar.final:
    i32 %89 = phi [^scalar.header1, i32 %79] [^for.body2, i32 %107];
    i32 %90 = phi [^scalar.header1, i32 %80] [^for.body2, i32 %108];
    ubr ^scalar.header;
  ^for.body2 {scalar}:
    i32 %91 = phi [^scalar.header1, i32 %78] [^for.body2, i32 %107];
    i32 %92 = phi [^scalar.header1, i32 %77] [^for.body2, i32 %108];
    i32 %93 = add i32 %92, i32 1;
    i32 %94 = sub i32 8, i32 %92;
    i32 %95 = mul i32 %93, i32 %94;
    i32 %96 = sub i32 9, i32 %92;
    i32 %97 = mul i32 %92, i32 %96;
    i32 %98 = add i32 %95, i32 %97;
    i32 %99 = add i32 %92, i32 2;
    i32 %100 = sub i32 7, i32 %92;
    i32 %101 = mul i32 %99, i32 %100;
    i32 %102 = add i32 %98, i32 %101;
    i32 %103 = add i32 %92, i32 3;
    i32 %104 = sub i32 6, i32 %92;
    i32 %105 = mul i32 %103, i32 %104;
    i32 %106 = add i32 %102, i32 %105;
    i32 %107 = add i32 %91, i32 %106;
    i32 %108 = add i32 %92, i32 4;
    i1 %109 = icmp sgt i32 %3, i32 %108;
    cbr i1 %109(prob = 0.75), ^for.body2, ^scalar.final;
}
