func @test1() -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ret i32 100;
}
func @test2(i32 %x) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = shl i32 1, i32 %x;
    ret i32 %0;
}
func @test3(i32 %x) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ret i32 %x;
}
func @test4(i32 %x) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = add i32 %x, i32 1;
    ret i32 %0;
}
func @test5(i32 %x) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = neg i32 %x;
    ret i32 %0;
}
func @test6(i32 %x) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    [10 * i32]* %c = alloc [10 * i32], align 8;
    i32* %0 = getelementptr &([10 * i32]* %c)[i64 0][i64 0];
    store i32* %0 with i32 0;
    i32* %1 = getelementptr &([10 * i32]* %c)[i64 0][i64 1];
    store i32* %1 with i32 1;
    i32* %2 = getelementptr &([10 * i32]* %c)[i64 0][i64 2];
    store i32* %2 with i32 2;
    i32* %3 = getelementptr &([10 * i32]* %c)[i64 0][i64 3];
    store i32* %3 with i32 3;
    i32* %4 = getelementptr &([10 * i32]* %c)[i64 0][i64 5];
    store i32* %4 with i32 5;
    i32* %5 = getelementptr &([10 * i32]* %c)[i64 0][i64 6];
    store i32* %5 with i32 6;
    i32* %6 = getelementptr &([10 * i32]* %c)[i64 0][i64 7];
    store i32* %6 with i32 7;
    i32* %7 = getelementptr &([10 * i32]* %c)[i64 0][i64 8];
    store i32* %7 with i32 8;
    i32* %8 = getelementptr &([10 * i32]* %c)[i64 0][i64 9];
    store i32* %8 with i32 9;
    i32* %9 = getelementptr &([10 * i32]* %c)[i64 0][i64 4];
    store i32* %9 with i32 100;
    i32* %10 = getelementptr &([10 * i32]* %c)[i64 0][i32 %x];
    i32 %11 = load i32* %10;
    i32 %12 = add i32 %x, i32 %11;
    ret i32 %12;
}
func @test7(i32 %x) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i1 %0 = icmp sgt i32 %x, i32 0;
    cbr i1 %0(prob = 0.984615), ^super.header, ^b;
  ^super.header:
    i1 %1 = icmp sgt i32 %x, i32 4;
    cbr i1 %1(prob = 0.941176), ^super.header1, ^for.body;
  ^b:
    i32 %2 = phi [^entry, i32 0] [^for.body, i32 %10];
    ret i32 %2;
  ^super.header1:
    i32 %3 = add i32 %x, i32 -4;
    i1 %4 = icmp sgt i32 %3, i32 16;
    i32 %5 = add i32 %x, i32 -20;
    cbr i1 %4(prob = 0.941176), ^for.body1, ^for.body2;
  ^for.body {scalar}:
    i32 %6 = phi [^super.header, i32 0] [^for.body, i32 %11] [^for.body2, i32 %97];
    i32 %7 = phi [^super.header, i32 0] [^for.body, i32 %10] [^for.body2, i32 %96];
    i32 %8 = sub i32 9, i32 %6;
    i32 %9 = mul i32 %6, i32 %8;
    i32 %10 = add i32 %7, i32 %9;
    i32 %11 = add i32 %6, i32 1;
    i1 %12 = icmp sgt i32 %x, i32 %11;
    cbr i1 %12(prob = 0.75), ^for.body, ^b;
  ^for.body1:
    i32 %13 = phi [^super.header1, i32 0] [^for.body1, i32 %78];
    i32 %14 = phi [^super.header1, i32 0] [^for.body1, i32 %77];
    i32 %15 = add i32 %13, i32 1;
    i32 %16 = sub i32 8, i32 %13;
    i32 %17 = mul i32 %15, i32 %16;
    i32 %18 = sub i32 9, i32 %13;
    i32 %19 = mul i32 %13, i32 %18;
    i32 %20 = add i32 %17, i32 %19;
    i32 %21 = add i32 %13, i32 2;
    i32 %22 = sub i32 7, i32 %13;
    i32 %23 = mul i32 %21, i32 %22;
    i32 %24 = add i32 %20, i32 %23;
    i32 %25 = add i32 %13, i32 3;
    i32 %26 = sub i32 6, i32 %13;
    i32 %27 = mul i32 %25, i32 %26;
    i32 %28 = add i32 %24, i32 %27;
    i32 %29 = add i32 %13, i32 4;
    i32 %30 = sub i32 5, i32 %13;
    i32 %31 = mul i32 %29, i32 %30;
    i32 %32 = add i32 %28, i32 %31;
    i32 %33 = add i32 %13, i32 5;
    i32 %34 = sub i32 4, i32 %13;
    i32 %35 = mul i32 %33, i32 %34;
    i32 %36 = add i32 %32, i32 %35;
    i32 %37 = add i32 %13, i32 6;
    i32 %38 = sub i32 3, i32 %13;
    i32 %39 = mul i32 %37, i32 %38;
    i32 %40 = add i32 %36, i32 %39;
    i32 %41 = add i32 %13, i32 7;
    i32 %42 = sub i32 2, i32 %13;
    i32 %43 = mul i32 %41, i32 %42;
    i32 %44 = add i32 %40, i32 %43;
    i32 %45 = add i32 %13, i32 8;
    i32 %46 = sub i32 1, i32 %13;
    i32 %47 = mul i32 %45, i32 %46;
    i32 %48 = add i32 %44, i32 %47;
    i32 %49 = add i32 %13, i32 9;
    i32 %50 = neg i32 %13;
    i32 %51 = mul i32 %49, i32 %50;
    i32 %52 = add i32 %48, i32 %51;
    i32 %53 = add i32 %13, i32 10;
    i32 %54 = sub i32 -1, i32 %13;
    i32 %55 = mul i32 %53, i32 %54;
    i32 %56 = add i32 %52, i32 %55;
    i32 %57 = add i32 %13, i32 11;
    i32 %58 = sub i32 -2, i32 %13;
    i32 %59 = mul i32 %57, i32 %58;
    i32 %60 = add i32 %56, i32 %59;
    i32 %61 = add i32 %13, i32 12;
    i32 %62 = sub i32 -3, i32 %13;
    i32 %63 = mul i32 %61, i32 %62;
    i32 %64 = add i32 %60, i32 %63;
    i32 %65 = add i32 %13, i32 13;
    i32 %66 = sub i32 -4, i32 %13;
    i32 %67 = mul i32 %65, i32 %66;
    i32 %68 = add i32 %64, i32 %67;
    i32 %69 = add i32 %13, i32 14;
    i32 %70 = sub i32 -5, i32 %13;
    i32 %71 = mul i32 %69, i32 %70;
    i32 %72 = add i32 %68, i32 %71;
    i32 %73 = add i32 %13, i32 15;
    i32 %74 = sub i32 -6, i32 %13;
    i32 %75 = mul i32 %73, i32 %74;
    i32 %76 = add i32 %72, i32 %75;
    i32 %77 = add i32 %14, i32 %76;
    i32 %78 = add i32 %13, i32 16;
    i1 %79 = icmp sgt i32 %5, i32 %78;
    cbr i1 %79(prob = 0.941176), ^for.body1, ^for.body2;
  ^for.body2 {scalar}:
    i32 %80 = phi [^super.header1, i32 0] [^for.body1, i32 %77] [^for.body2, i32 %96];
    i32 %81 = phi [^super.header1, i32 0] [^for.body1, i32 %78] [^for.body2, i32 %97];
    i32 %82 = add i32 %81, i32 1;
    i32 %83 = sub i32 8, i32 %81;
    i32 %84 = mul i32 %82, i32 %83;
    i32 %85 = sub i32 9, i32 %81;
    i32 %86 = mul i32 %81, i32 %85;
    i32 %87 = add i32 %84, i32 %86;
    i32 %88 = add i32 %81, i32 2;
    i32 %89 = sub i32 7, i32 %81;
    i32 %90 = mul i32 %88, i32 %89;
    i32 %91 = add i32 %87, i32 %90;
    i32 %92 = add i32 %81, i32 3;
    i32 %93 = sub i32 6, i32 %81;
    i32 %94 = mul i32 %92, i32 %93;
    i32 %95 = add i32 %91, i32 %94;
    i32 %96 = add i32 %80, i32 %95;
    i32 %97 = add i32 %81, i32 4;
    i1 %98 = icmp sgt i32 %3, i32 %97;
    cbr i1 %98(prob = 0.75), ^for.body2, ^for.body;
}
