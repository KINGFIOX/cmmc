internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp neq i32 %0, i32 0;
    cbr i1 %1(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %2 = call () -> i32 @getint();
    call (i32) -> void @putint(i32 %2);
    ubr ^b;
  ^if.else:
    call (i32) -> void @putint(i32 0);
    ubr ^b;
  ^b:
    ret i32 0;
}
func @test(i32* %x, i32 %n, i32 %z) -> void { NoMemoryRead NoRecurse } {
  ^entry:
    i1 %0 = icmp sgt i32 %n, i32 0;
    cbr i1 %0(prob = 0.984615), ^super.header, ^b;
  ^super.header:
    i1 %1 = icmp sgt i32 %n, i32 4;
    i1 %2 = icmp neq i32 %z, i32 0;
    cbr i1 %1(prob = 0.941176), ^super.header1, ^b1;
  ^b:
    ret;
  ^super.header1:
    i32 %3 = add i32 %n, i32 -4;
    i1 %4 = icmp sgt i32 %3, i32 16;
    i32 %5 = add i32 %n, i32 -20;
    cbr i1 %4(prob = 0.941176), ^b2, ^b3;
  ^b1 {scalar}:
    i32 %6 = phi [^super.header, i32 0] [^b4, i32 %10] [^b6, i32 %34];
    cbr i1 %2(prob = 0.5), ^if.then, ^b4;
  ^if.then:
    i32* %7 = getelementptr &(i32* %x)[i32 %6];
    store i32* %7 with i32 %z;
    ubr ^b4;
  ^b2:
    i32 %8 = phi [^super.header1, i32 0] [^b5, i32 %32];
    cbr i1 %2(prob = 0.5), ^if.then1, ^b5;
  ^b3 {scalar}:
    i32 %9 = phi [^super.header1, i32 0] [^b5, i32 %32] [^b6, i32 %34];
    cbr i1 %2(prob = 0.5), ^if.then2, ^b6;
  ^b4:
    i32 %10 = add i32 %6, i32 1;
    i1 %11 = icmp sgt i32 %n, i32 %10;
    cbr i1 %11(prob = 0.75), ^b1, ^b;
  ^if.then1:
    i32* %12 = getelementptr &(i32* %x)[i32 %8];
    store i32* %12 with i32 %z;
    i32* %13 = getelementptr &(i32* %12)[i64 1];
    store i32* %13 with i32 %z;
    i32* %14 = getelementptr &(i32* %12)[i64 2];
    store i32* %14 with i32 %z;
    i32* %15 = getelementptr &(i32* %12)[i64 3];
    store i32* %15 with i32 %z;
    i32* %16 = getelementptr &(i32* %12)[i64 4];
    store i32* %16 with i32 %z;
    i32* %17 = getelementptr &(i32* %12)[i64 5];
    store i32* %17 with i32 %z;
    i32* %18 = getelementptr &(i32* %12)[i64 6];
    store i32* %18 with i32 %z;
    i32* %19 = getelementptr &(i32* %12)[i64 7];
    store i32* %19 with i32 %z;
    i32* %20 = getelementptr &(i32* %12)[i64 8];
    store i32* %20 with i32 %z;
    i32* %21 = getelementptr &(i32* %12)[i64 9];
    store i32* %21 with i32 %z;
    i32* %22 = getelementptr &(i32* %12)[i64 10];
    store i32* %22 with i32 %z;
    i32* %23 = getelementptr &(i32* %12)[i64 11];
    store i32* %23 with i32 %z;
    i32* %24 = getelementptr &(i32* %12)[i64 12];
    store i32* %24 with i32 %z;
    i32* %25 = getelementptr &(i32* %12)[i64 13];
    store i32* %25 with i32 %z;
    i32* %26 = getelementptr &(i32* %12)[i64 14];
    store i32* %26 with i32 %z;
    i32* %27 = getelementptr &(i32* %12)[i64 15];
    store i32* %27 with i32 %z;
    ubr ^b5;
  ^if.then2:
    i32* %28 = getelementptr &(i32* %x)[i32 %9];
    store i32* %28 with i32 %z;
    i32* %29 = getelementptr &(i32* %28)[i64 1];
    store i32* %29 with i32 %z;
    i32* %30 = getelementptr &(i32* %28)[i64 2];
    store i32* %30 with i32 %z;
    i32* %31 = getelementptr &(i32* %28)[i64 3];
    store i32* %31 with i32 %z;
    ubr ^b6;
  ^b5:
    i32 %32 = add i32 %8, i32 16;
    i1 %33 = icmp sgt i32 %5, i32 %32;
    cbr i1 %33(prob = 0.941176), ^b2, ^b3;
  ^b6:
    i32 %34 = add i32 %9, i32 4;
    i1 %35 = icmp sgt i32 %3, i32 %34;
    cbr i1 %35(prob = 0.75), ^b3, ^b1;
}
