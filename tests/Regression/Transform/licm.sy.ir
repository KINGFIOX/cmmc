func @licm1(i32 %x) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i1 %0 = icmp sgt i32 %x, i32 0;
    cbr i1 %0(prob = 0.97), ^prebody, ^b;
  ^prebody:
    i32 %1 = mul i32 %x, i32 %x;
    i32 %2 = mul i32 %x, i32 4;
    i32 %3 = mul i32 %1, i32 %2;
    i32 %4 = add i32 %3, i32 8;
    i32 %5 = mul i32 %x, i32 %1;
    i1 %6 = icmp sgt i32 %x, i32 4;
    cbr i1 %6(prob = 0.89), ^for.body, ^for.body1;
  ^b:
    i32 %7 = phi [^entry, i32 0] [^for.body1, i32 %29];
    ret i32 %7;
  ^for.body:
    i32 %8 = phi [^prebody, i32 0] [^for.body, i32 %16];
    i32 %9 = phi [^prebody, i32 0] [^for.body, i32 %23];
    i32 %10 = phi [^prebody, i32 1] [^for.body, i32 %22];
    i32 %11 = phi [^prebody, i32 0] [^for.body, i32 %19];
    i32 %12 = mul i32 %10, i32 6;
    i32 %13 = add i32 %4, i32 %12;
    i32 %14 = mul i32 %11, i32 4;
    i32 %15 = add i32 %13, i32 %14;
    i32 %16 = add i32 %8, i32 %15;
    i32 %17 = mul i32 %10, i32 4;
    i32 %18 = add i32 %17, i32 12;
    i32 %19 = add i32 %11, i32 %18;
    i32 %20 = add i32 %9, i32 8;
    i1 %21 = icmp sgt i32 %x, i32 %20;
    i32 %22 = add i32 %10, i32 8;
    i32 %23 = add i32 %9, i32 4;
    cbr i1 %21(prob = 0.89), ^for.body, ^for.body1;
  ^for.body1:
    i32 %24 = phi [^prebody, i32 0] [^for.body, i32 %19] [^for.body1, i32 %32];
    i32 %25 = phi [^prebody, i32 1] [^for.body, i32 %22] [^for.body1, i32 %33];
    i32 %26 = phi [^prebody, i32 0] [^for.body, i32 %23] [^for.body1, i32 %30];
    i32 %27 = phi [^prebody, i32 0] [^for.body, i32 %16] [^for.body1, i32 %29];
    i32 %28 = add i32 %5, i32 %24;
    i32 %29 = add i32 %27, i32 %28;
    i32 %30 = add i32 %26, i32 1;
    i1 %31 = icmp sgt i32 %x, i32 %30;
    i32 %32 = add i32 %24, i32 %25;
    i32 %33 = add i32 %25, i32 2;
    cbr i1 %31(prob = 0.75), ^for.body1, ^b;
}
func @licm2(i32* %head, i32* %tail, i32 %i) -> i32 { NoRecurse } {
  ^entry:
    i32* %0 = getelementptr &(i32* %head)[i32 %i];
    i32* %1 = getelementptr &(i32* %tail)[i32 %i];
    ubr ^while.header;
  ^while.header:
    i32 %2 = load i32* %0;
    i32 %3 = load i32* %1;
    i1 %4 = icmp slt i32 %2, i32 %3;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
  ^while.body:
    i32 %5 = add i32 %2, i32 1;
    store i32* %0 with i32 %5;
    ubr ^while.header;
  ^b:
    ret i32 %2;
}
[123 * i32]* @a;
[123 * i32]* @b;
func @licm3(i32 %x) -> void { NoRecurse } {
  ^entry:
    i1 %0 = icmp sgt i32 %x, i32 0;
    cbr i1 %0(prob = 0.97), ^prebody, ^b;
  ^prebody:
    [123 * i32]* %1 = ptrcast [123 * i32]* @a to [123 * i32]*;
    i32* %2 = getelementptr &([123 * i32]* %1)[i64 0][i32 %x];
    i32 %3 = load i32* %2;
    i1 %4 = icmp sgt i32 %x, i32 4;
    [123 * i32]* %5 = ptrcast [123 * i32]* @b to [123 * i32]*;
    cbr i1 %4(prob = 0.89), ^for.body, ^for.body1;
  ^b:
    ret;
  ^for.body:
    i32 %6 = phi [^prebody, i32 0] [^for.body, i32 %13];
    i32* %7 = getelementptr &([123 * i32]* %5)[i64 0][i32 %6];
    store i32* %7 with i32 %3;
    i32* %8 = getelementptr &(i32* %7)[i64 1];
    store i32* %8 with i32 %3;
    i32* %9 = getelementptr &(i32* %7)[i64 2];
    store i32* %9 with i32 %3;
    i32* %10 = getelementptr &(i32* %7)[i64 3];
    store i32* %10 with i32 %3;
    i32 %11 = add i32 %6, i32 8;
    i1 %12 = icmp sgt i32 %x, i32 %11;
    i32 %13 = add i32 %6, i32 4;
    cbr i1 %12(prob = 0.89), ^for.body, ^for.body1;
  ^for.body1:
    i32 %14 = phi [^prebody, i32 0] [^for.body, i32 %13] [^for.body1, i32 %16];
    i32* %15 = getelementptr &([123 * i32]* %5)[i64 0][i32 %14];
    store i32* %15 with i32 %3;
    i32 %16 = add i32 %14, i32 1;
    i1 %17 = icmp sgt i32 %x, i32 %16;
    cbr i1 %17(prob = 0.75), ^for.body1, ^b;
}
func @licm4(i32* %a, f32* %b, i32 %c, i32 %n) -> void { NoRecurse } {
  ^entry:
    i1 %0 = icmp sgt i32 %n, i32 0;
    cbr i1 %0(prob = 0.97), ^prebody, ^b1;
  ^prebody:
    f32* %1 = getelementptr &(f32* %b)[i32 %c];
    f32 %2 = load f32* %1;
    i1 %3 = icmp sgt i32 %n, i32 4;
    cbr i1 %3(prob = 0.89), ^for.body, ^for.body1;
  ^b1:
    ret;
  ^for.body:
    i32 %4 = phi [^prebody, i32 0] [^for.body, i32 %27];
    i32* %5 = getelementptr &(i32* %a)[i32 %4];
    i32 %6 = load i32* %5;
    f32 %7 = s2f i32 %6 to f32;
    f32 %8 = fadd f32 %2, f32 %7;
    i32 %9 = f2s f32 %8 to i32;
    store i32* %5 with i32 %9;
    i32* %10 = getelementptr &(i32* %5)[i64 1];
    i32 %11 = load i32* %10;
    f32 %12 = s2f i32 %11 to f32;
    f32 %13 = fadd f32 %2, f32 %12;
    i32 %14 = f2s f32 %13 to i32;
    store i32* %10 with i32 %14;
    i32* %15 = getelementptr &(i32* %5)[i64 2];
    i32 %16 = load i32* %15;
    f32 %17 = s2f i32 %16 to f32;
    f32 %18 = fadd f32 %2, f32 %17;
    i32 %19 = f2s f32 %18 to i32;
    store i32* %15 with i32 %19;
    i32* %20 = getelementptr &(i32* %5)[i64 3];
    i32 %21 = load i32* %20;
    f32 %22 = s2f i32 %21 to f32;
    f32 %23 = fadd f32 %2, f32 %22;
    i32 %24 = f2s f32 %23 to i32;
    store i32* %20 with i32 %24;
    i32 %25 = add i32 %4, i32 8;
    i1 %26 = icmp sgt i32 %n, i32 %25;
    i32 %27 = add i32 %4, i32 4;
    cbr i1 %26(prob = 0.89), ^for.body, ^for.body1;
  ^for.body1:
    i32 %28 = phi [^prebody, i32 0] [^for.body, i32 %27] [^for.body1, i32 %34];
    i32* %29 = getelementptr &(i32* %a)[i32 %28];
    i32 %30 = load i32* %29;
    f32 %31 = s2f i32 %30 to f32;
    f32 %32 = fadd f32 %2, f32 %31;
    i32 %33 = f2s f32 %32 to i32;
    store i32* %29 with i32 %33;
    i32 %34 = add i32 %28, i32 1;
    i1 %35 = icmp sgt i32 %n, i32 %34;
    cbr i1 %35(prob = 0.75), ^for.body1, ^b1;
}
func @licm5(i32 %i) -> i32 { NoRecurse } {
  ^entry:
    [123 * i32]* %0 = ptrcast [123 * i32]* @a to [123 * i32]*;
    i32* %1 = getelementptr &([123 * i32]* %0)[i64 0][i32 %i];
    i32 %2 = load i32* %1;
    [123 * i32]* %3 = ptrcast [123 * i32]* @b to [123 * i32]*;
    i32* %4 = getelementptr &([123 * i32]* %3)[i64 0][i32 %i];
    i32 %5 = load i32* %4;
    i1 %6 = icmp slt i32 %2, i32 %5;
    cbr i1 %6(prob = 0.97), ^while.body, ^b;
  ^while.body:
    store i32* %1 with i32 %5;
    ubr ^b;
  ^b:
    i32 %7 = phi [^entry, i32 %2] [^while.body, i32 %5];
    ret i32 %7;
}
