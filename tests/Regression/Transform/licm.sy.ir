func @licm1(i32 %x) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i1 %0 = icmp sgt i32 %x, i32 0;
    cbr i1 %0(prob = 0.97), ^prebody, ^b;
  ^prebody:
    i32 %1 = mul i32 %x, i32 %x;
    i32 %2 = mul i32 %x, i32 %1;
    i1 %3 = icmp sgt i32 %x, i32 4;
    cbr i1 %3(prob = 0.89), ^super.header, ^for.body;
  ^b:
    i32 %4 = phi [^entry, i32 0] [^for.body, i32 %14];
    ret i32 %4;
  ^super.header:
    i32 %5 = mul i32 %2, i32 4;
    i32 %6 = add i32 %5, i32 8;
    i32 %7 = add i32 %x, i32 -4;
    i1 %8 = icmp sgt i32 %7, i32 16;
    cbr i1 %8(prob = 0.89), ^prebody1, ^for.body1;
  ^for.body {scalar}:
    i32 %9 = phi [^prebody, i32 0] [^for.body, i32 %17] [^for.body1, i32 %34];
    i32 %10 = phi [^prebody, i32 1] [^for.body, i32 %18] [^for.body1, i32 %37];
    i32 %11 = phi [^prebody, i32 0] [^for.body, i32 %15] [^for.body1, i32 %35];
    i32 %12 = phi [^prebody, i32 0] [^for.body, i32 %14] [^for.body1, i32 %31];
    i32 %13 = add i32 %2, i32 %9;
    i32 %14 = add i32 %12, i32 %13;
    i32 %15 = add i32 %11, i32 1;
    i1 %16 = icmp sgt i32 %x, i32 %15;
    i32 %17 = add i32 %9, i32 %10;
    i32 %18 = add i32 %10, i32 2;
    cbr i1 %16(prob = 0.75), ^for.body, ^b;
  ^prebody1:
    i32 %19 = mul i32 %2, i32 16;
    i32 %20 = add i32 %19, i32 1120;
    i32 %21 = add i32 %x, i32 -20;
    i1 %22 = icmp sgt i32 %21, i32 64;
    cbr i1 %22(prob = 0.89), ^super.header1, ^for.body2;
  ^for.body1 {scalar}:
    i32 %23 = phi [^super.header, i32 0] [^for.body1, i32 %31] [^for.body2, i32 %50];
    i32 %24 = phi [^super.header, i32 0] [^for.body1, i32 %35] [^for.body2, i32 %53];
    i32 %25 = phi [^super.header, i32 1] [^for.body1, i32 %37] [^for.body2, i32 %55];
    i32 %26 = phi [^super.header, i32 0] [^for.body1, i32 %34] [^for.body2, i32 %52];
    i32 %27 = mul i32 %25, i32 6;
    i32 %28 = add i32 %6, i32 %27;
    i32 %29 = mul i32 %26, i32 4;
    i32 %30 = add i32 %28, i32 %29;
    i32 %31 = add i32 %23, i32 %30;
    i32 %32 = mul i32 %25, i32 4;
    i32 %33 = add i32 %32, i32 12;
    i32 %34 = add i32 %26, i32 %33;
    i32 %35 = add i32 %24, i32 4;
    i1 %36 = icmp sgt i32 %7, i32 %35;
    i32 %37 = add i32 %25, i32 8;
    cbr i1 %36(prob = 0.75), ^for.body1, ^for.body;
  ^super.header1:
    i32 %38 = add i32 %x, i32 -84;
    i1 %39 = icmp sgt i32 %38, i32 256;
    i32 %40 = add i32 %x, i32 -340;
    cbr i1 %39(prob = 0.89), ^for.body3, ^for.body4;
  ^for.body2 {scalar}:
    i32 %41 = phi [^prebody1, i32 120] [^for.body2, i32 %57] [^for.body4, i32 %217];
    i32 %42 = phi [^prebody1, i32 16] [^for.body2, i32 %56] [^for.body4, i32 %216];
    i32 %43 = phi [^prebody1, i32 0] [^for.body2, i32 %52] [^for.body4, i32 %212];
    i32 %44 = phi [^prebody1, i32 1] [^for.body2, i32 %55] [^for.body4, i32 %215];
    i32 %45 = phi [^prebody1, i32 0] [^for.body2, i32 %53] [^for.body4, i32 %213];
    i32 %46 = phi [^prebody1, i32 0] [^for.body2, i32 %50] [^for.body4, i32 %210];
    i32 %47 = mul i32 %43, i32 16;
    i32 %48 = add i32 %20, i32 %47;
    i32 %49 = add i32 %41, i32 %48;
    i32 %50 = add i32 %46, i32 %49;
    i32 %51 = add i32 %42, i32 240;
    i32 %52 = add i32 %43, i32 %51;
    i32 %53 = add i32 %45, i32 16;
    i1 %54 = icmp sgt i32 %21, i32 %53;
    i32 %55 = add i32 %44, i32 32;
    i32 %56 = add i32 %42, i32 512;
    i32 %57 = add i32 %41, i32 3840;
    cbr i1 %54(prob = 0.75), ^for.body2, ^for.body1;
  ^for.body3:
    i32 %58 = phi [^super.header1, i32 120] [^for.body3, i32 %179];
    i32 %59 = phi [^super.header1, i32 16] [^for.body3, i32 %178];
    i32 %60 = phi [^super.header1, i32 0] [^for.body3, i32 %174];
    i32 %61 = phi [^super.header1, i32 1] [^for.body3, i32 %177];
    i32 %62 = phi [^super.header1, i32 0] [^for.body3, i32 %175];
    i32 %63 = phi [^super.header1, i32 0] [^for.body3, i32 %172];
    i32 %64 = add i32 %59, i32 240;
    i32 %65 = add i32 %60, i32 %64;
    i32 %66 = mul i32 %65, i32 16;
    i32 %67 = add i32 %20, i32 %66;
    i32 %68 = add i32 %58, i32 3840;
    i32 %69 = add i32 %67, i32 %68;
    i32 %70 = mul i32 %60, i32 16;
    i32 %71 = add i32 %20, i32 %70;
    i32 %72 = add i32 %58, i32 %71;
    i32 %73 = add i32 %63, i32 %72;
    i32 %74 = add i32 %69, i32 %73;
    i32 %75 = add i32 %59, i32 752;
    i32 %76 = add i32 %65, i32 %75;
    i32 %77 = mul i32 %76, i32 16;
    i32 %78 = add i32 %20, i32 %77;
    i32 %79 = add i32 %58, i32 7680;
    i32 %80 = add i32 %78, i32 %79;
    i32 %81 = add i32 %74, i32 %80;
    i32 %82 = add i32 %59, i32 1264;
    i32 %83 = add i32 %76, i32 %82;
    i32 %84 = mul i32 %83, i32 16;
    i32 %85 = add i32 %20, i32 %84;
    i32 %86 = add i32 %58, i32 11520;
    i32 %87 = add i32 %85, i32 %86;
    i32 %88 = add i32 %81, i32 %87;
    i32 %89 = add i32 %59, i32 1776;
    i32 %90 = add i32 %83, i32 %89;
    i32 %91 = mul i32 %90, i32 16;
    i32 %92 = add i32 %20, i32 %91;
    i32 %93 = add i32 %58, i32 15360;
    i32 %94 = add i32 %92, i32 %93;
    i32 %95 = add i32 %88, i32 %94;
    i32 %96 = add i32 %59, i32 2288;
    i32 %97 = add i32 %90, i32 %96;
    i32 %98 = mul i32 %97, i32 16;
    i32 %99 = add i32 %20, i32 %98;
    i32 %100 = add i32 %58, i32 19200;
    i32 %101 = add i32 %99, i32 %100;
    i32 %102 = add i32 %95, i32 %101;
    i32 %103 = add i32 %59, i32 2800;
    i32 %104 = add i32 %97, i32 %103;
    i32 %105 = mul i32 %104, i32 16;
    i32 %106 = add i32 %20, i32 %105;
    i32 %107 = add i32 %58, i32 23040;
    i32 %108 = add i32 %106, i32 %107;
    i32 %109 = add i32 %102, i32 %108;
    i32 %110 = add i32 %59, i32 3312;
    i32 %111 = add i32 %104, i32 %110;
    i32 %112 = mul i32 %111, i32 16;
    i32 %113 = add i32 %20, i32 %112;
    i32 %114 = add i32 %58, i32 26880;
    i32 %115 = add i32 %113, i32 %114;
    i32 %116 = add i32 %109, i32 %115;
    i32 %117 = add i32 %59, i32 3824;
    i32 %118 = add i32 %111, i32 %117;
    i32 %119 = mul i32 %118, i32 16;
    i32 %120 = add i32 %20, i32 %119;
    i32 %121 = add i32 %58, i32 30720;
    i32 %122 = add i32 %120, i32 %121;
    i32 %123 = add i32 %116, i32 %122;
    i32 %124 = add i32 %59, i32 4336;
    i32 %125 = add i32 %118, i32 %124;
    i32 %126 = mul i32 %125, i32 16;
    i32 %127 = add i32 %20, i32 %126;
    i32 %128 = add i32 %58, i32 34560;
    i32 %129 = add i32 %127, i32 %128;
    i32 %130 = add i32 %123, i32 %129;
    i32 %131 = add i32 %59, i32 4848;
    i32 %132 = add i32 %125, i32 %131;
    i32 %133 = mul i32 %132, i32 16;
    i32 %134 = add i32 %20, i32 %133;
    i32 %135 = add i32 %58, i32 38400;
    i32 %136 = add i32 %134, i32 %135;
    i32 %137 = add i32 %130, i32 %136;
    i32 %138 = add i32 %59, i32 5360;
    i32 %139 = add i32 %132, i32 %138;
    i32 %140 = mul i32 %139, i32 16;
    i32 %141 = add i32 %20, i32 %140;
    i32 %142 = add i32 %58, i32 42240;
    i32 %143 = add i32 %141, i32 %142;
    i32 %144 = add i32 %137, i32 %143;
    i32 %145 = add i32 %59, i32 5872;
    i32 %146 = add i32 %139, i32 %145;
    i32 %147 = mul i32 %146, i32 16;
    i32 %148 = add i32 %20, i32 %147;
    i32 %149 = add i32 %58, i32 46080;
    i32 %150 = add i32 %148, i32 %149;
    i32 %151 = add i32 %144, i32 %150;
    i32 %152 = add i32 %59, i32 6384;
    i32 %153 = add i32 %146, i32 %152;
    i32 %154 = mul i32 %153, i32 16;
    i32 %155 = add i32 %20, i32 %154;
    i32 %156 = add i32 %58, i32 49920;
    i32 %157 = add i32 %155, i32 %156;
    i32 %158 = add i32 %151, i32 %157;
    i32 %159 = add i32 %59, i32 6896;
    i32 %160 = add i32 %153, i32 %159;
    i32 %161 = mul i32 %160, i32 16;
    i32 %162 = add i32 %20, i32 %161;
    i32 %163 = add i32 %58, i32 53760;
    i32 %164 = add i32 %162, i32 %163;
    i32 %165 = add i32 %158, i32 %164;
    i32 %166 = add i32 %59, i32 7408;
    i32 %167 = add i32 %160, i32 %166;
    i32 %168 = mul i32 %167, i32 16;
    i32 %169 = add i32 %20, i32 %168;
    i32 %170 = add i32 %58, i32 57600;
    i32 %171 = add i32 %169, i32 %170;
    i32 %172 = add i32 %165, i32 %171;
    i32 %173 = add i32 %59, i32 7920;
    i32 %174 = add i32 %167, i32 %173;
    i32 %175 = add i32 %62, i32 256;
    i1 %176 = icmp sgt i32 %40, i32 %175;
    i32 %177 = add i32 %61, i32 512;
    i32 %178 = add i32 %59, i32 8192;
    i32 %179 = add i32 %58, i32 61440;
    cbr i1 %176(prob = 0.89), ^for.body3, ^for.body4;
  ^for.body4 {scalar}:
    i32 %180 = phi [^super.header1, i32 0] [^for.body3, i32 %172] [^for.body4, i32 %210];
    i32 %181 = phi [^super.header1, i32 0] [^for.body3, i32 %175] [^for.body4, i32 %213];
    i32 %182 = phi [^super.header1, i32 1] [^for.body3, i32 %177] [^for.body4, i32 %215];
    i32 %183 = phi [^super.header1, i32 0] [^for.body3, i32 %174] [^for.body4, i32 %212];
    i32 %184 = phi [^super.header1, i32 16] [^for.body3, i32 %178] [^for.body4, i32 %216];
    i32 %185 = phi [^super.header1, i32 120] [^for.body3, i32 %179] [^for.body4, i32 %217];
    i32 %186 = add i32 %184, i32 240;
    i32 %187 = add i32 %183, i32 %186;
    i32 %188 = mul i32 %187, i32 16;
    i32 %189 = add i32 %20, i32 %188;
    i32 %190 = add i32 %185, i32 3840;
    i32 %191 = add i32 %189, i32 %190;
    i32 %192 = mul i32 %183, i32 16;
    i32 %193 = add i32 %20, i32 %192;
    i32 %194 = add i32 %185, i32 %193;
    i32 %195 = add i32 %180, i32 %194;
    i32 %196 = add i32 %191, i32 %195;
    i32 %197 = add i32 %184, i32 752;
    i32 %198 = add i32 %187, i32 %197;
    i32 %199 = mul i32 %198, i32 16;
    i32 %200 = add i32 %20, i32 %199;
    i32 %201 = add i32 %185, i32 7680;
    i32 %202 = add i32 %200, i32 %201;
    i32 %203 = add i32 %196, i32 %202;
    i32 %204 = add i32 %184, i32 1264;
    i32 %205 = add i32 %198, i32 %204;
    i32 %206 = mul i32 %205, i32 16;
    i32 %207 = add i32 %20, i32 %206;
    i32 %208 = add i32 %185, i32 11520;
    i32 %209 = add i32 %207, i32 %208;
    i32 %210 = add i32 %203, i32 %209;
    i32 %211 = add i32 %184, i32 1776;
    i32 %212 = add i32 %205, i32 %211;
    i32 %213 = add i32 %181, i32 64;
    i1 %214 = icmp sgt i32 %38, i32 %213;
    i32 %215 = add i32 %182, i32 128;
    i32 %216 = add i32 %184, i32 2048;
    i32 %217 = add i32 %185, i32 15360;
    cbr i1 %214(prob = 0.75), ^for.body4, ^for.body2;
}
func @licm2(i32* %head, i32* %tail, i32 %i) -> i32 { NoRecurse } {
  ^entry:
    i32* %0 = getelementptr &(i32* %head)[i32 %i];
    i32* %1 = getelementptr &(i32* %tail)[i32 %i];
    ubr ^while.header;
  ^while.header:
    i32 %2 = load i32* %0;
    i32 %3 = load i32* %1;
    i1 %4 = icmp slt i32 %2, i32 %3;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
  ^while.body:
    i32 %5 = add i32 %2, i32 1;
    store i32* %0 with i32 %5;
    ubr ^while.header;
  ^b:
    ret i32 %2;
}
[123 * i32]* @a, align 8;
[123 * i32]* @b, align 8;
func @licm3(i32 %x) -> void { NoRecurse } {
  ^entry:
    i1 %0 = icmp sgt i32 %x, i32 0;
    cbr i1 %0(prob = 0.97), ^prebody, ^b;
  ^prebody:
    [123 * i32]* %1 = ptrcast [123 * i32]* @a to [123 * i32]*;
    i32* %2 = getelementptr &([123 * i32]* %1)[i64 0][i32 %x];
    i32 %3 = load i32* %2;
    i1 %4 = icmp sgt i32 %x, i32 4;
    [123 * i32]* %5 = ptrcast [123 * i32]* @b to [123 * i32]*;
    cbr i1 %4(prob = 0.89), ^super.header, ^for.body;
  ^b:
    ret;
  ^super.header:
    i32 %6 = add i32 %x, i32 -4;
    i1 %7 = icmp sgt i32 %6, i32 16;
    i32 %8 = add i32 %x, i32 -20;
    cbr i1 %7(prob = 0.89), ^for.body1, ^for.body2;
  ^for.body {scalar}:
    i32 %9 = phi [^prebody, i32 0] [^for.body, i32 %11] [^for.body2, i32 %37];
    i32* %10 = getelementptr &([123 * i32]* %5)[i64 0][i32 %9];
    store i32* %10 with i32 %3;
    i32 %11 = add i32 %9, i32 1;
    i1 %12 = icmp sgt i32 %x, i32 %11;
    cbr i1 %12(prob = 0.75), ^for.body, ^b;
  ^for.body1:
    i32 %13 = phi [^super.header, i32 0] [^for.body1, i32 %30];
    i32* %14 = getelementptr &([123 * i32]* %5)[i64 0][i32 %13];
    store i32* %14 with i32 %3;
    i32* %15 = getelementptr &(i32* %14)[i64 1];
    store i32* %15 with i32 %3;
    i32* %16 = getelementptr &(i32* %14)[i64 2];
    store i32* %16 with i32 %3;
    i32* %17 = getelementptr &(i32* %14)[i64 3];
    store i32* %17 with i32 %3;
    i32* %18 = getelementptr &(i32* %14)[i64 4];
    store i32* %18 with i32 %3;
    i32* %19 = getelementptr &(i32* %14)[i64 5];
    store i32* %19 with i32 %3;
    i32* %20 = getelementptr &(i32* %14)[i64 6];
    store i32* %20 with i32 %3;
    i32* %21 = getelementptr &(i32* %14)[i64 7];
    store i32* %21 with i32 %3;
    i32* %22 = getelementptr &(i32* %14)[i64 8];
    store i32* %22 with i32 %3;
    i32* %23 = getelementptr &(i32* %14)[i64 9];
    store i32* %23 with i32 %3;
    i32* %24 = getelementptr &(i32* %14)[i64 10];
    store i32* %24 with i32 %3;
    i32* %25 = getelementptr &(i32* %14)[i64 11];
    store i32* %25 with i32 %3;
    i32* %26 = getelementptr &(i32* %14)[i64 12];
    store i32* %26 with i32 %3;
    i32* %27 = getelementptr &(i32* %14)[i64 13];
    store i32* %27 with i32 %3;
    i32* %28 = getelementptr &(i32* %14)[i64 14];
    store i32* %28 with i32 %3;
    i32* %29 = getelementptr &(i32* %14)[i64 15];
    store i32* %29 with i32 %3;
    i32 %30 = add i32 %13, i32 16;
    i1 %31 = icmp sgt i32 %8, i32 %30;
    cbr i1 %31(prob = 0.89), ^for.body1, ^for.body2;
  ^for.body2 {scalar}:
    i32 %32 = phi [^super.header, i32 0] [^for.body1, i32 %30] [^for.body2, i32 %37];
    i32* %33 = getelementptr &([123 * i32]* %5)[i64 0][i32 %32];
    store i32* %33 with i32 %3;
    i32* %34 = getelementptr &(i32* %33)[i64 1];
    store i32* %34 with i32 %3;
    i32* %35 = getelementptr &(i32* %33)[i64 2];
    store i32* %35 with i32 %3;
    i32* %36 = getelementptr &(i32* %33)[i64 3];
    store i32* %36 with i32 %3;
    i32 %37 = add i32 %32, i32 4;
    i1 %38 = icmp sgt i32 %6, i32 %37;
    cbr i1 %38(prob = 0.75), ^for.body2, ^for.body;
}
func @licm4(i32* %a, f32* %b, i32 %c, i32 %n) -> void { NoRecurse } {
  ^entry:
    i1 %0 = icmp sgt i32 %n, i32 0;
    cbr i1 %0(prob = 0.97), ^prebody, ^b1;
  ^prebody:
    f32* %1 = getelementptr &(f32* %b)[i32 %c];
    f32 %2 = load f32* %1;
    i32 %3 = add i32 %n, i32 -4;
    i1 %4 = icmp sgt i32 %n, i32 4;
    cbr i1 %4(prob = 0.89), ^for.body, ^for.body1;
  ^b1:
    ret;
  ^for.body:
    i32 %5 = phi [^prebody, i32 0] [^for.body, i32 %26];
    i32* %6 = getelementptr &(i32* %a)[i32 %5];
    i32 %7 = load i32* %6;
    f32 %8 = s2f i32 %7 to f32;
    f32 %9 = fadd f32 %2, f32 %8;
    i32 %10 = f2s f32 %9 to i32;
    store i32* %6 with i32 %10;
    i32* %11 = getelementptr &(i32* %6)[i64 1];
    i32 %12 = load i32* %11;
    f32 %13 = s2f i32 %12 to f32;
    f32 %14 = fadd f32 %2, f32 %13;
    i32 %15 = f2s f32 %14 to i32;
    store i32* %11 with i32 %15;
    i32* %16 = getelementptr &(i32* %6)[i64 2];
    i32 %17 = load i32* %16;
    f32 %18 = s2f i32 %17 to f32;
    f32 %19 = fadd f32 %2, f32 %18;
    i32 %20 = f2s f32 %19 to i32;
    store i32* %16 with i32 %20;
    i32* %21 = getelementptr &(i32* %6)[i64 3];
    i32 %22 = load i32* %21;
    f32 %23 = s2f i32 %22 to f32;
    f32 %24 = fadd f32 %2, f32 %23;
    i32 %25 = f2s f32 %24 to i32;
    store i32* %21 with i32 %25;
    i32 %26 = add i32 %5, i32 4;
    i1 %27 = icmp sgt i32 %3, i32 %26;
    cbr i1 %27(prob = 0.89), ^for.body, ^for.body1;
  ^for.body1 {scalar}:
    i32 %28 = phi [^prebody, i32 0] [^for.body, i32 %26] [^for.body1, i32 %34];
    i32* %29 = getelementptr &(i32* %a)[i32 %28];
    i32 %30 = load i32* %29;
    f32 %31 = s2f i32 %30 to f32;
    f32 %32 = fadd f32 %2, f32 %31;
    i32 %33 = f2s f32 %32 to i32;
    store i32* %29 with i32 %33;
    i32 %34 = add i32 %28, i32 1;
    i1 %35 = icmp sgt i32 %n, i32 %34;
    cbr i1 %35(prob = 0.75), ^for.body1, ^b1;
}
func @licm5(i32 %i) -> i32 { NoRecurse } {
  ^entry:
    [123 * i32]* %0 = ptrcast [123 * i32]* @a to [123 * i32]*;
    i32* %1 = getelementptr &([123 * i32]* %0)[i64 0][i32 %i];
    i32 %2 = load i32* %1;
    [123 * i32]* %3 = ptrcast [123 * i32]* @b to [123 * i32]*;
    i32* %4 = getelementptr &([123 * i32]* %3)[i64 0][i32 %i];
    i32 %5 = load i32* %4;
    i1 %6 = icmp slt i32 %2, i32 %5;
    cbr i1 %6(prob = 0.97), ^while.body, ^b;
  ^while.body:
    store i32* %1 with i32 %5;
    ubr ^b;
  ^b:
    i32 %7 = phi [^entry, i32 %2] [^while.body, i32 %5];
    ret i32 %7;
}
