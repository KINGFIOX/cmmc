// FIXME
internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = scmp gt i32 %0, i32 0;
    cbr i1 %1(prob = 0.97), ^indirect, ^b;
  ^indirect:
    i32 %2 = mul i32 %0, i32 %0;
    i32 %3 = mul i32 %0, i32 %2;
    i32 %4 = shl i32 %3, i32 4;
    ubr ^super.header;
  ^b:
    i32 %5 = phi [^entry, i32 0] [^for.body2, i32 %114];
    call (i32) -> void @putint(i32 %5);
    ret i32 0;
  ^super.header:
    i32 %6 = phi [^indirect, i32 0] [^for.body, i32 %57];
    i32 %7 = phi [^indirect, i32 0] [^for.body, i32 %8];
    i32 %8 = add i32 %7, i32 16;
    i1 %9 = scmp lt i32 %8, i32 %0;
    cbr i1 %9(prob = 0.67), ^for.body, ^super.header1;
  ^for.body:
    i32 %10 = mul i32 %7, i32 %7;
    i32 %11 = add i32 %7, i32 1;
    i32 %12 = mul i32 %11, i32 %11;
    i32 %13 = add i32 %7, i32 2;
    i32 %14 = mul i32 %13, i32 %13;
    i32 %15 = add i32 %7, i32 3;
    i32 %16 = mul i32 %15, i32 %15;
    i32 %17 = add i32 %7, i32 4;
    i32 %18 = mul i32 %17, i32 %17;
    i32 %19 = add i32 %7, i32 5;
    i32 %20 = mul i32 %19, i32 %19;
    i32 %21 = add i32 %7, i32 6;
    i32 %22 = mul i32 %21, i32 %21;
    i32 %23 = add i32 %7, i32 7;
    i32 %24 = mul i32 %23, i32 %23;
    i32 %25 = add i32 %7, i32 8;
    i32 %26 = mul i32 %25, i32 %25;
    i32 %27 = add i32 %7, i32 9;
    i32 %28 = mul i32 %27, i32 %27;
    i32 %29 = add i32 %7, i32 10;
    i32 %30 = mul i32 %29, i32 %29;
    i32 %31 = add i32 %7, i32 11;
    i32 %32 = mul i32 %31, i32 %31;
    i32 %33 = add i32 %7, i32 12;
    i32 %34 = mul i32 %33, i32 %33;
    i32 %35 = add i32 %7, i32 13;
    i32 %36 = mul i32 %35, i32 %35;
    i32 %37 = add i32 %7, i32 14;
    i32 %38 = mul i32 %37, i32 %37;
    i32 %39 = add i32 %7, i32 15;
    i32 %40 = mul i32 %39, i32 %39;
    i32 %41 = add i32 %4, i32 %10;
    i32 %42 = add i32 %41, i32 %12;
    i32 %43 = add i32 %42, i32 %14;
    i32 %44 = add i32 %43, i32 %16;
    i32 %45 = add i32 %44, i32 %18;
    i32 %46 = add i32 %45, i32 %20;
    i32 %47 = add i32 %46, i32 %22;
    i32 %48 = add i32 %47, i32 %24;
    i32 %49 = add i32 %48, i32 %26;
    i32 %50 = add i32 %49, i32 %28;
    i32 %51 = add i32 %50, i32 %30;
    i32 %52 = add i32 %51, i32 %32;
    i32 %53 = add i32 %52, i32 %34;
    i32 %54 = add i32 %53, i32 %36;
    i32 %55 = add i32 %54, i32 %38;
    i32 %56 = add i32 %55, i32 %40;
    i32 %57 = add i32 %56, i32 %6;
    ubr ^super.header;
  ^super.header1:
    i32 %58 = phi [^super.header, i32 %6] [^for.body1, i32 %109];
    i32 %59 = phi [^super.header, i32 %7] [^for.body1, i32 %60];
    i32 %60 = add i32 %59, i32 16;
    i1 %61 = scmp lt i32 %60, i32 %0;
    cbr i1 %61(prob = 0.67), ^for.body1, ^for.body2;
  ^for.body1:
    i32 %62 = mul i32 %59, i32 %59;
    i32 %63 = add i32 %59, i32 1;
    i32 %64 = mul i32 %63, i32 %63;
    i32 %65 = add i32 %59, i32 2;
    i32 %66 = mul i32 %65, i32 %65;
    i32 %67 = add i32 %59, i32 3;
    i32 %68 = mul i32 %67, i32 %67;
    i32 %69 = add i32 %59, i32 4;
    i32 %70 = mul i32 %69, i32 %69;
    i32 %71 = add i32 %59, i32 5;
    i32 %72 = mul i32 %71, i32 %71;
    i32 %73 = add i32 %59, i32 6;
    i32 %74 = mul i32 %73, i32 %73;
    i32 %75 = add i32 %59, i32 7;
    i32 %76 = mul i32 %75, i32 %75;
    i32 %77 = add i32 %59, i32 8;
    i32 %78 = mul i32 %77, i32 %77;
    i32 %79 = add i32 %59, i32 9;
    i32 %80 = mul i32 %79, i32 %79;
    i32 %81 = add i32 %59, i32 10;
    i32 %82 = mul i32 %81, i32 %81;
    i32 %83 = add i32 %59, i32 11;
    i32 %84 = mul i32 %83, i32 %83;
    i32 %85 = add i32 %59, i32 12;
    i32 %86 = mul i32 %85, i32 %85;
    i32 %87 = add i32 %59, i32 13;
    i32 %88 = mul i32 %87, i32 %87;
    i32 %89 = add i32 %59, i32 14;
    i32 %90 = mul i32 %89, i32 %89;
    i32 %91 = add i32 %59, i32 15;
    i32 %92 = mul i32 %91, i32 %91;
    i32 %93 = add i32 %58, i32 %4;
    i32 %94 = add i32 %93, i32 %62;
    i32 %95 = add i32 %94, i32 %64;
    i32 %96 = add i32 %95, i32 %66;
    i32 %97 = add i32 %96, i32 %68;
    i32 %98 = add i32 %97, i32 %70;
    i32 %99 = add i32 %98, i32 %72;
    i32 %100 = add i32 %99, i32 %74;
    i32 %101 = add i32 %100, i32 %76;
    i32 %102 = add i32 %101, i32 %78;
    i32 %103 = add i32 %102, i32 %80;
    i32 %104 = add i32 %103, i32 %82;
    i32 %105 = add i32 %104, i32 %84;
    i32 %106 = add i32 %105, i32 %86;
    i32 %107 = add i32 %106, i32 %88;
    i32 %108 = add i32 %107, i32 %90;
    i32 %109 = add i32 %108, i32 %92;
    ubr ^super.header1;
  ^for.body2:
    i32 %110 = phi [^super.header1, i32 %58] [^for.body2, i32 %114];
    i32 %111 = phi [^super.header1, i32 %59] [^for.body2, i32 %115];
    i32 %112 = mul i32 %111, i32 %111;
    i32 %113 = add i32 %3, i32 %112;
    i32 %114 = add i32 %113, i32 %110;
    i32 %115 = add i32 %111, i32 1;
    i1 %116 = scmp lt i32 %115, i32 %0;
    cbr i1 %116(prob = 0.97), ^for.body2, ^b;
}
