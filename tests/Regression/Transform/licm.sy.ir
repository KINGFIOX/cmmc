func @licm1(i32 %x) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i1 %0 = icmp sgt i32 %x, i32 0;
    cbr i1 %0(prob = 0.97), ^prebody, ^b;
  ^prebody:
    i32 %1 = mul i32 %x, i32 %x;
    i32 %2 = mul i32 %x, i32 4;
    i32 %3 = mul i32 %1, i32 %2;
    i32 %4 = mul i32 %x, i32 %1;
    i32 %5 = mul i32 %4, i32 4;
    ubr ^super.header;
  ^b:
    i32 %6 = phi [^entry, i32 0] [^for.body2, i32 %43];
    ret i32 %6;
  ^super.header:
    i32 %7 = phi [^prebody, i32 0] [^for.body, i32 %9];
    i32 %8 = phi [^prebody, i32 0] [^for.body, i32 %22];
    i32 %9 = add i32 %7, i32 4;
    i1 %10 = icmp sgt i32 %x, i32 %9;
    cbr i1 %10(prob = 0.89), ^for.body, ^super.header1;
  ^for.body:
    i32 %11 = mul i32 %7, i32 %7;
    i32 %12 = add i32 %3, i32 %11;
    i32 %13 = add i32 %7, i32 1;
    i32 %14 = mul i32 %13, i32 %13;
    i32 %15 = add i32 %12, i32 %14;
    i32 %16 = add i32 %7, i32 2;
    i32 %17 = mul i32 %16, i32 %16;
    i32 %18 = add i32 %15, i32 %17;
    i32 %19 = add i32 %7, i32 3;
    i32 %20 = mul i32 %19, i32 %19;
    i32 %21 = add i32 %18, i32 %20;
    i32 %22 = add i32 %8, i32 %21;
    ubr ^super.header;
  ^super.header1:
    i32 %23 = phi [^super.header, i32 %7] [^for.body1, i32 %25];
    i32 %24 = phi [^super.header, i32 %8] [^for.body1, i32 %38];
    i32 %25 = add i32 %23, i32 4;
    i1 %26 = icmp sgt i32 %x, i32 %25;
    cbr i1 %26(prob = 0.89), ^for.body1, ^for.body2;
  ^for.body1:
    i32 %27 = add i32 %5, i32 %24;
    i32 %28 = mul i32 %23, i32 %23;
    i32 %29 = add i32 %27, i32 %28;
    i32 %30 = add i32 %23, i32 1;
    i32 %31 = mul i32 %30, i32 %30;
    i32 %32 = add i32 %29, i32 %31;
    i32 %33 = add i32 %23, i32 2;
    i32 %34 = mul i32 %33, i32 %33;
    i32 %35 = add i32 %32, i32 %34;
    i32 %36 = add i32 %23, i32 3;
    i32 %37 = mul i32 %36, i32 %36;
    i32 %38 = add i32 %35, i32 %37;
    ubr ^super.header1;
  ^for.body2:
    i32 %39 = phi [^super.header1, i32 %23] [^for.body2, i32 %44];
    i32 %40 = phi [^super.header1, i32 %24] [^for.body2, i32 %43];
    i32 %41 = mul i32 %39, i32 %39;
    i32 %42 = add i32 %4, i32 %41;
    i32 %43 = add i32 %40, i32 %42;
    i32 %44 = add i32 %39, i32 1;
    i1 %45 = icmp sgt i32 %x, i32 %44;
    cbr i1 %45(prob = 0.97), ^for.body2, ^b;
}
func @licm2(i32* %head, i32* %tail, i32 %i) -> i32 { NoRecurse } {
  ^entry:
    i32* %0 = getelementptr &(i32* %head)[i32 %i];
    i32* %1 = getelementptr &(i32* %tail)[i32 %i];
    ubr ^while.header;
  ^while.header:
    i32 %2 = load i32* %0;
    i32 %3 = load i32* %1;
    i1 %4 = icmp slt i32 %2, i32 %3;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
  ^while.body:
    i32 %5 = add i32 %2, i32 1;
    store i32* %0 with i32 %5;
    ubr ^while.header;
  ^b:
    ret i32 %2;
}
[123 * i32]* @a;
[123 * i32]* @b;
func @licm3(i32 %x) -> void { NoRecurse } {
  ^entry:
    i1 %0 = icmp sgt i32 %x, i32 0;
    cbr i1 %0(prob = 0.97), ^prebody, ^b;
  ^prebody:
    [123 * i32]* %1 = ptrcast [123 * i32]* @a to [123 * i32]*;
    i32* %2 = getelementptr &([123 * i32]* %1)[i64 0][i32 %x];
    i32 %3 = load i32* %2;
    [123 * i32]* %4 = ptrcast [123 * i32]* @b to [123 * i32]*;
    ubr ^super.header;
  ^b:
    ret;
  ^super.header:
    i32 %5 = phi [^prebody, i32 0] [^for.body, i32 %6];
    i32 %6 = add i32 %5, i32 4;
    i1 %7 = icmp sgt i32 %x, i32 %6;
    cbr i1 %7(prob = 0.89), ^for.body, ^super.header1;
  ^for.body:
    i32* %8 = getelementptr &([123 * i32]* %4)[i64 0][i32 %5];
    store i32* %8 with i32 %3;
    i32* %9 = getelementptr &(i32* %8)[i64 1];
    store i32* %9 with i32 %3;
    i32* %10 = getelementptr &(i32* %8)[i64 2];
    store i32* %10 with i32 %3;
    i32* %11 = getelementptr &(i32* %8)[i64 3];
    store i32* %11 with i32 %3;
    ubr ^super.header;
  ^super.header1:
    i32 %12 = phi [^super.header, i32 %5] [^for.body1, i32 %13];
    i32 %13 = add i32 %12, i32 4;
    i1 %14 = icmp sgt i32 %x, i32 %13;
    cbr i1 %14(prob = 0.89), ^for.body1, ^for.body2;
  ^for.body1:
    i32* %15 = getelementptr &([123 * i32]* %4)[i64 0][i32 %12];
    store i32* %15 with i32 %3;
    i32* %16 = getelementptr &(i32* %15)[i64 1];
    store i32* %16 with i32 %3;
    i32* %17 = getelementptr &(i32* %15)[i64 2];
    store i32* %17 with i32 %3;
    i32* %18 = getelementptr &(i32* %15)[i64 3];
    store i32* %18 with i32 %3;
    ubr ^super.header1;
  ^for.body2:
    i32 %19 = phi [^super.header1, i32 %12] [^for.body2, i32 %21];
    i32* %20 = getelementptr &([123 * i32]* %4)[i64 0][i32 %19];
    store i32* %20 with i32 %3;
    i32 %21 = add i32 %19, i32 1;
    i1 %22 = icmp sgt i32 %x, i32 %21;
    cbr i1 %22(prob = 0.97), ^for.body2, ^b;
}
func @licm4(i32* %a, f32* %b, i32 %c, i32 %n) -> void { NoRecurse } {
  ^entry:
    i1 %0 = icmp sgt i32 %n, i32 0;
    cbr i1 %0(prob = 0.97), ^prebody, ^b1;
  ^prebody:
    f32* %1 = getelementptr &(f32* %b)[i32 %c];
    f32 %2 = load f32* %1;
    ubr ^super.header;
  ^b1:
    ret;
  ^super.header:
    i32 %3 = phi [^prebody, i32 0] [^for.body, i32 %4];
    i32 %4 = add i32 %3, i32 4;
    i1 %5 = icmp sgt i32 %n, i32 %4;
    cbr i1 %5(prob = 0.89), ^for.body, ^super.header1;
  ^for.body:
    i32* %6 = getelementptr &(i32* %a)[i32 %3];
    i32 %7 = load i32* %6;
    f32 %8 = s2f i32 %7 to f32;
    f32 %9 = fadd f32 %2, f32 %8;
    i32 %10 = f2s f32 %9 to i32;
    store i32* %6 with i32 %10;
    i32* %11 = getelementptr &(i32* %6)[i64 1];
    i32 %12 = load i32* %11;
    f32 %13 = s2f i32 %12 to f32;
    f32 %14 = fadd f32 %2, f32 %13;
    i32 %15 = f2s f32 %14 to i32;
    store i32* %11 with i32 %15;
    i32* %16 = getelementptr &(i32* %6)[i64 2];
    i32 %17 = load i32* %16;
    f32 %18 = s2f i32 %17 to f32;
    f32 %19 = fadd f32 %2, f32 %18;
    i32 %20 = f2s f32 %19 to i32;
    store i32* %16 with i32 %20;
    i32* %21 = getelementptr &(i32* %6)[i64 3];
    i32 %22 = load i32* %21;
    f32 %23 = s2f i32 %22 to f32;
    f32 %24 = fadd f32 %2, f32 %23;
    i32 %25 = f2s f32 %24 to i32;
    store i32* %21 with i32 %25;
    ubr ^super.header;
  ^super.header1:
    i32 %26 = phi [^super.header, i32 %3] [^for.body1, i32 %27];
    i32 %27 = add i32 %26, i32 4;
    i1 %28 = icmp sgt i32 %n, i32 %27;
    cbr i1 %28(prob = 0.89), ^for.body1, ^for.body2;
  ^for.body1:
    i32* %29 = getelementptr &(i32* %a)[i32 %26];
    i32 %30 = load i32* %29;
    f32 %31 = s2f i32 %30 to f32;
    f32 %32 = fadd f32 %2, f32 %31;
    i32 %33 = f2s f32 %32 to i32;
    store i32* %29 with i32 %33;
    i32* %34 = getelementptr &(i32* %29)[i64 1];
    i32 %35 = load i32* %34;
    f32 %36 = s2f i32 %35 to f32;
    f32 %37 = fadd f32 %2, f32 %36;
    i32 %38 = f2s f32 %37 to i32;
    store i32* %34 with i32 %38;
    i32* %39 = getelementptr &(i32* %29)[i64 2];
    i32 %40 = load i32* %39;
    f32 %41 = s2f i32 %40 to f32;
    f32 %42 = fadd f32 %2, f32 %41;
    i32 %43 = f2s f32 %42 to i32;
    store i32* %39 with i32 %43;
    i32* %44 = getelementptr &(i32* %29)[i64 3];
    i32 %45 = load i32* %44;
    f32 %46 = s2f i32 %45 to f32;
    f32 %47 = fadd f32 %2, f32 %46;
    i32 %48 = f2s f32 %47 to i32;
    store i32* %44 with i32 %48;
    ubr ^super.header1;
  ^for.body2:
    i32 %49 = phi [^super.header1, i32 %26] [^for.body2, i32 %55];
    i32* %50 = getelementptr &(i32* %a)[i32 %49];
    i32 %51 = load i32* %50;
    f32 %52 = s2f i32 %51 to f32;
    f32 %53 = fadd f32 %2, f32 %52;
    i32 %54 = f2s f32 %53 to i32;
    store i32* %50 with i32 %54;
    i32 %55 = add i32 %49, i32 1;
    i1 %56 = icmp sgt i32 %n, i32 %55;
    cbr i1 %56(prob = 0.97), ^for.body2, ^b1;
}
func @licm5(i32 %i) -> i32 { NoRecurse } {
  ^entry:
    [123 * i32]* %0 = ptrcast [123 * i32]* @a to [123 * i32]*;
    i32* %1 = getelementptr &([123 * i32]* %0)[i64 0][i32 %i];
    i32 %2 = load i32* %1;
    [123 * i32]* %3 = ptrcast [123 * i32]* @b to [123 * i32]*;
    i32* %4 = getelementptr &([123 * i32]* %3)[i64 0][i32 %i];
    i32 %5 = load i32* %4;
    i1 %6 = icmp slt i32 %2, i32 %5;
    cbr i1 %6(prob = 0.97), ^super.header, ^b;
  ^super.header:
    i32 %7 = phi [^entry, i32 %2] [^super.header, i32 %8];
    i32 %8 = add i32 %7, i32 16;
    i1 %9 = icmp sgt i32 %5, i32 %8;
    cbr i1 %9(prob = 0.89), ^super.header, ^super.header1;
  ^b:
    i32 %10 = phi [^entry, i32 %2] [^postbody, i32 %18];
    ret i32 %10;
  ^super.header1:
    i32 %11 = phi [^super.header, i32 %7] [^super.header1, i32 %12];
    i32 %12 = add i32 %11, i32 4;
    i1 %13 = icmp sgt i32 %5, i32 %12;
    cbr i1 %13(prob = 0.89), ^super.header1, ^super.header2;
  ^super.header2:
    i32 %14 = phi [^super.header1, i32 %11] [^super.header2, i32 %15];
    i32 %15 = add i32 %14, i32 4;
    i1 %16 = icmp sgt i32 %5, i32 %15;
    cbr i1 %16(prob = 0.89), ^super.header2, ^while.body;
  ^while.body:
    i32 %17 = phi [^super.header2, i32 %14] [^while.body, i32 %18];
    i32 %18 = add i32 %17, i32 1;
    i1 %19 = icmp sgt i32 %5, i32 %18;
    cbr i1 %19(prob = 0.97), ^while.body, ^postbody;
  ^postbody:
    store i32* %1 with i32 %18;
    ubr ^b;
}
