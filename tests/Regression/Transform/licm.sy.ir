func @licm1(i32 %x) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = mul i32 %x, i32 %x;
    i32 %1 = mul i32 %x, i32 4;
    i32 %2 = mul i32 %0, i32 %1;
    i32 %3 = mul i32 %x, i32 %0;
    i32 %4 = mul i32 %3, i32 4;
    i1 %5 = icmp sgt i32 %x, i32 0;
    cbr i1 %5(prob = 0.97), ^super.header, ^b;
  ^super.header:
    i32 %6 = phi [^entry, i32 0] [^for.body, i32 %8];
    i32 %7 = phi [^entry, i32 0] [^for.body, i32 %22];
    i32 %8 = add i32 %6, i32 4;
    i1 %9 = icmp sgt i32 %x, i32 %8;
    cbr i1 %9(prob = 0.89), ^for.body, ^super.header1;
  ^b:
    i32 %10 = phi [^entry, i32 0] [^for.body2, i32 %43];
    ret i32 %10;
  ^for.body:
    i32 %11 = add i32 %2, i32 %7;
    i32 %12 = mul i32 %6, i32 %6;
    i32 %13 = add i32 %11, i32 %12;
    i32 %14 = add i32 %6, i32 1;
    i32 %15 = mul i32 %14, i32 %14;
    i32 %16 = add i32 %13, i32 %15;
    i32 %17 = add i32 %6, i32 2;
    i32 %18 = mul i32 %17, i32 %17;
    i32 %19 = add i32 %16, i32 %18;
    i32 %20 = add i32 %6, i32 3;
    i32 %21 = mul i32 %20, i32 %20;
    i32 %22 = add i32 %19, i32 %21;
    ubr ^super.header;
  ^super.header1:
    i32 %23 = phi [^super.header, i32 %6] [^for.body1, i32 %25];
    i32 %24 = phi [^super.header, i32 %7] [^for.body1, i32 %38];
    i32 %25 = add i32 %23, i32 4;
    i1 %26 = icmp sgt i32 %x, i32 %25;
    cbr i1 %26(prob = 0.89), ^for.body1, ^for.body2;
  ^for.body1:
    i32 %27 = add i32 %4, i32 %24;
    i32 %28 = mul i32 %23, i32 %23;
    i32 %29 = add i32 %27, i32 %28;
    i32 %30 = add i32 %23, i32 1;
    i32 %31 = mul i32 %30, i32 %30;
    i32 %32 = add i32 %29, i32 %31;
    i32 %33 = add i32 %23, i32 2;
    i32 %34 = mul i32 %33, i32 %33;
    i32 %35 = add i32 %32, i32 %34;
    i32 %36 = add i32 %23, i32 3;
    i32 %37 = mul i32 %36, i32 %36;
    i32 %38 = add i32 %35, i32 %37;
    ubr ^super.header1;
  ^for.body2:
    i32 %39 = phi [^super.header1, i32 %23] [^for.body2, i32 %44];
    i32 %40 = phi [^super.header1, i32 %24] [^for.body2, i32 %43];
    i32 %41 = mul i32 %39, i32 %39;
    i32 %42 = add i32 %3, i32 %41;
    i32 %43 = add i32 %40, i32 %42;
    i32 %44 = add i32 %39, i32 1;
    i1 %45 = icmp sgt i32 %x, i32 %44;
    cbr i1 %45(prob = 0.97), ^for.body2, ^b;
}
func @licm2(i32* %head, i32* %tail, i32 %i) -> i32 { NoRecurse } {
  ^entry:
    i32* %0 = getelementptr &(i32* %head)[i32 %i];
    i32* %1 = getelementptr &(i32* %tail)[i32 %i];
    ubr ^while.header;
  ^while.header:
    i32 %2 = load i32* %0;
    i32 %3 = load i32* %1;
    i1 %4 = icmp slt i32 %2, i32 %3;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
  ^while.body:
    i32 %5 = add i32 %2, i32 1;
    store i32* %0 with i32 %5;
    ubr ^while.header;
  ^b:
    ret i32 %2;
}
[123 * i32]* @a;
[123 * i32]* @b;
func @licm3(i32 %x) -> void { NoRecurse } {
  ^entry:
    [123 * i32]* %0 = ptrcast [123 * i32]* @a to [123 * i32]*;
    i32* %1 = getelementptr &([123 * i32]* %0)[i64 0][i32 %x];
    i1 %2 = icmp sgt i32 %x, i32 0;
    [123 * i32]* %3 = ptrcast [123 * i32]* @b to [123 * i32]*;
    cbr i1 %2(prob = 0.97), ^indirect, ^b;
  ^indirect:
    i32 %4 = load i32* %1;
    ubr ^super.header;
  ^b:
    ret;
  ^super.header:
    i32 %5 = phi [^indirect, i32 0] [^for.body, i32 %6];
    i32 %6 = add i32 %5, i32 4;
    i1 %7 = icmp sgt i32 %x, i32 %6;
    cbr i1 %7(prob = 0.89), ^for.body, ^super.header1;
  ^for.body:
    i32* %8 = getelementptr &([123 * i32]* %3)[i64 0][i32 %5];
    store i32* %8 with i32 %4;
    i32* %9 = getelementptr &(i32* %8)[i64 1];
    store i32* %9 with i32 %4;
    i32* %10 = getelementptr &(i32* %8)[i64 2];
    store i32* %10 with i32 %4;
    i32* %11 = getelementptr &(i32* %8)[i64 3];
    store i32* %11 with i32 %4;
    ubr ^super.header;
  ^super.header1:
    i32 %12 = phi [^super.header, i32 %5] [^for.body1, i32 %13];
    i32 %13 = add i32 %12, i32 4;
    i1 %14 = icmp sgt i32 %x, i32 %13;
    cbr i1 %14(prob = 0.89), ^for.body1, ^for.body2;
  ^for.body1:
    i32* %15 = getelementptr &([123 * i32]* %3)[i64 0][i32 %12];
    store i32* %15 with i32 %4;
    i32* %16 = getelementptr &(i32* %15)[i64 1];
    store i32* %16 with i32 %4;
    i32* %17 = getelementptr &(i32* %15)[i64 2];
    store i32* %17 with i32 %4;
    i32* %18 = getelementptr &(i32* %15)[i64 3];
    store i32* %18 with i32 %4;
    ubr ^super.header1;
  ^for.body2:
    i32 %19 = phi [^super.header1, i32 %12] [^for.body2, i32 %21];
    i32* %20 = getelementptr &([123 * i32]* %3)[i64 0][i32 %19];
    store i32* %20 with i32 %4;
    i32 %21 = add i32 %19, i32 1;
    i1 %22 = icmp sgt i32 %x, i32 %21;
    cbr i1 %22(prob = 0.97), ^for.body2, ^b;
}
