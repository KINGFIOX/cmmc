func @test(i32* %x, i32 %n, i32 %i) -> void { NoMemoryRead NoRecurse } {
  ^entry:
    i32 %0 = add i32 %i, i32 1;
    i32 %1 = smin i32 %n, i32 %0;
    i1 %2 = icmp sgt i32 %1, i32 0;
    cbr i1 %2(prob = 0.886154), ^super.header, ^b;
  ^super.header:
    i1 %3 = icmp sgt i32 %1, i32 3;
    cbr i1 %3(prob = 0.941176), ^super.header1, ^scalar.header;
  ^b:
    ret;
  ^super.header1:
    i32 %4 = add i32 %1, i32 -3;
    i1 %5 = icmp sgt i32 %4, i32 15;
    i32 %6 = add i32 %1, i32 -18;
    cbr i1 %5(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header:
    i32 %7 = phi [^super.header, i32 0] [^scalar.header1, i32 %29] [^b3, i32 %40];
    i1 %8 = icmp sgt i32 %1, i32 %7;
    cbr i1 %8(prob = 0.75), ^b2, ^b;
  ^b1:
    i32 %9 = phi [^super.header1, i32 0] [^b1, i32 %26];
    i32* %10 = getelementptr &(i32* %x)[i32 %9];
    store i32* %10 with i32 0;
    i32* %11 = getelementptr &(i32* %10)[i64 1];
    store i32* %11 with i32 0;
    i32* %12 = getelementptr &(i32* %10)[i64 2];
    store i32* %12 with i32 0;
    i32* %13 = getelementptr &(i32* %10)[i64 3];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &(i32* %10)[i64 4];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &(i32* %10)[i64 5];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &(i32* %10)[i64 6];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &(i32* %10)[i64 7];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &(i32* %10)[i64 8];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &(i32* %10)[i64 9];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &(i32* %10)[i64 10];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &(i32* %10)[i64 11];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &(i32* %10)[i64 12];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &(i32* %10)[i64 13];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &(i32* %10)[i64 14];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &(i32* %10)[i64 15];
    store i32* %25 with i32 0;
    i32 %26 = add i32 %9, i32 16;
    i1 %27 = icmp sgt i32 %6, i32 %26;
    cbr i1 %27(prob = 0.941176), ^b1, ^scalar.header1;
  ^scalar.header1:
    i32 %28 = phi [^super.header1, i32 0] [^b1, i32 %26];
    i32 %29 = phi [^super.header1, i32 undef] [^b1, i32 %26];
    i1 %30 = icmp sgt i32 %4, i32 %28;
    cbr i1 %30(prob = 0.75), ^b3, ^scalar.header;
  ^b2 {scalar}:
    i32 %31 = phi [^scalar.header, i32 %7] [^b2, i32 %32];
    i32 %32 = add i32 %31, i32 1;
    i1 %33 = icmp sgt i32 %1, i32 %32;
    i32* %34 = getelementptr &(i32* %x)[i32 %31];
    store i32* %34 with i32 0;
    cbr i1 %33(prob = 0.75), ^b2, ^b;
  ^b3 {scalar}:
    i32 %35 = phi [^scalar.header1, i32 %28] [^b3, i32 %40];
    i32* %36 = getelementptr &(i32* %x)[i32 %35];
    store i32* %36 with i32 0;
    i32* %37 = getelementptr &(i32* %36)[i64 1];
    store i32* %37 with i32 0;
    i32* %38 = getelementptr &(i32* %36)[i64 2];
    store i32* %38 with i32 0;
    i32* %39 = getelementptr &(i32* %36)[i64 3];
    store i32* %39 with i32 0;
    i32 %40 = add i32 %35, i32 4;
    i1 %41 = icmp sgt i32 %4, i32 %40;
    cbr i1 %41(prob = 0.75), ^b3, ^scalar.header;
}
