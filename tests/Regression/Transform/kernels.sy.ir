func @gameoflife(i32* %a, i32 %b, i32 %c) -> void { NoMemoryRead NoRecurse } {
  ^entry:
    i32 %0 = xor i32 %b, i32 2;
    i32 %1 = xor i32 %c, i32 1;
    i32 %2 = or i32 %0, i32 %1;
    i1 %3 = icmp eq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    store i32* %a with i32 1;
    ubr ^b1;
  ^if.else:
    i1 %4 = icmp eq i32 %b, i32 3;
    i32 %5 = zext i1 %4 to i32;
    store i32* %a with i32 %5;
    ubr ^b1;
  ^b1:
    ret;
}
i32* @max, align 4 { ReadOnly } = 1073741824;
func @checkrange(i32 %num) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i1 %0 = icmp sgt i32 %num, i32 1073741824;
    cbr i1 %0(prob = 0.984615), ^while.body, ^while.header;
  ^while.body:
    i32 %1 = phi [^entry, i32 %num] [^while.body, i32 %2];
    i32 %2 = add i32 %1, i32 -1073741824;
    i1 %3 = icmp sgt i32 %2, i32 1073741824;
    cbr i1 %3(prob = 0.984615), ^while.body, ^while.header;
  ^while.header:
    i32 %4 = phi [^entry, i32 %num] [^while.body, i32 %2];
    i1 %5 = icmp slt i32 %4, i32 0;
    cbr i1 %5(prob = 0.984615), ^while.body1, ^b;
  ^while.body1:
    i32 %6 = phi [^while.header, i32 %4] [^while.body1, i32 %7];
    i32 %7 = add i32 %6, i32 1073741824;
    i1 %8 = icmp slt i32 %7, i32 0;
    cbr i1 %8(prob = 0.984615), ^while.body1, ^b;
  ^b:
    i32 %9 = phi [^while.header, i32 %4] [^while.body1, i32 %7];
    ret i32 %9;
}
func @xorv(i32 %x, i32 %y) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ubr ^while.body;
  ^while.body:
    i32 %0 = phi [^entry, i32 1] [^while.body, i32 %11];
    i32 %1 = phi [^entry, i32 0] [^while.body, i32 %10];
    i32 %2 = sdiv i32 %x, i32 %0;
    i32 %3 = srem i32 %2, i32 2;
    i32 %4 = sdiv i32 %y, i32 %0;
    i32 %5 = srem i32 %4, i32 2;
    i1 %6 = icmp eq i32 %3, i32 %5;
    i32 %7 = zext i1 %6 to i32;
    i32 %8 = mul i32 %1, i32 2;
    i32 %9 = add i32 %8, i32 1;
    i32 %10 = sub i32 %9, i32 %7;
    i32 %11 = mul i32 %0, i32 2;
    i1 %12 = icmp slt i32 %11, i32 1073741824;
    cbr i1 %12(prob = 0.984615), ^while.body, ^b;
  ^b:
    ret i32 %10;
}
func @maxv(i32 %x, i32 %y) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = smax i32 %x, i32 %y;
    ret i32 %0;
}
func @orv(i32 %x, i32 %y) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ubr ^while.body;
  ^while.body:
    i32 %0 = phi [^entry, i32 1] [^b1, i32 %12];
    i32 %1 = phi [^entry, i32 0] [^b1, i32 %11];
    i32 %2 = sdiv i32 %x, i32 %0;
    i32 %3 = and i32 %2, i32 -2147483647;
    i1 %4 = icmp eq i32 %3, i32 1;
    cbr i1 %4(prob = 0.5), ^b1, ^b;
  ^b:
    i32 %5 = sdiv i32 %y, i32 %0;
    i32 %6 = and i32 %5, i32 -2147483647;
    i1 %7 = icmp eq i32 %6, i32 1;
    ubr ^b1;
  ^b1:
    i1 %8 = phi [^while.body, i1 true] [^b, i1 %7];
    i32 %9 = mul i32 %1, i32 2;
    i32 %10 = zext i1 %8 to i32;
    i32 %11 = add i32 %9, i32 %10;
    i32 %12 = mul i32 %0, i32 2;
    i1 %13 = icmp slt i32 %12, i32 1073741824;
    cbr i1 %13(prob = 0.984615), ^while.body, ^b2;
  ^b2:
    ret i32 %11;
}
func @andv(i32 %x, i32 %y) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ubr ^while.body;
  ^while.body:
    i32 %0 = phi [^entry, i32 1] [^b1, i32 %12];
    i32 %1 = phi [^entry, i32 0] [^b1, i32 %11];
    i32 %2 = sdiv i32 %x, i32 %0;
    i32 %3 = and i32 %2, i32 -2147483647;
    i1 %4 = icmp eq i32 %3, i32 1;
    cbr i1 %4(prob = 0.5), ^b, ^b1;
  ^b:
    i32 %5 = sdiv i32 %y, i32 %0;
    i32 %6 = and i32 %5, i32 -2147483647;
    i1 %7 = icmp eq i32 %6, i32 1;
    ubr ^b1;
  ^b1:
    i1 %8 = phi [^while.body, i1 false] [^b, i1 %7];
    i32 %9 = mul i32 %1, i32 2;
    i32 %10 = zext i1 %8 to i32;
    i32 %11 = add i32 %9, i32 %10;
    i32 %12 = mul i32 %0, i32 2;
    i1 %13 = icmp slt i32 %12, i32 1073741824;
    cbr i1 %13(prob = 0.984615), ^while.body, ^b2;
  ^b2:
    ret i32 %11;
}
