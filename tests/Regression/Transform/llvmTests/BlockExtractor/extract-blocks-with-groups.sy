// This file is automatically generated by llvm2c from llvm/test/Transforms/BlockExtractor/extract-blocks-with-groups

// function declarations
uint32_t bar(uint32_t var0, uint32_t var1);
uint32_t foo(uint32_t var0, uint32_t var1);

uint32_t bar(uint32_t var0, uint32_t var1){
    uint32_t var5_phi;
    int var2;
    int var3;
    int var4;
    block0:
    if ((((int)var0) > ((int)0)) && (((int)var1) > ((int)0))) {
        var2 = (((int)(var1 << ((uint32_t)2))) + ((int)var0));
        var5_phi = var2;
        return var5_phi;
    } else {
        if (((int)(var1 & var0)) < ((int)0)) {
            var3 = (((int)(((int)var1) / ((int)6))) + ((int)(((int)var0) * ((int)3))));
            var5_phi = var3;
            return var5_phi;
        } else {
            var4 = (((int)var0) - ((int)var1));
            var5_phi = var4;
            return var5_phi;
        }
    }
}

uint32_t foo(uint32_t var0, uint32_t var1){
    uint32_t var4_phi;
    int var2;
    int var3;
    block0:
    if ((((int)var0) > ((int)0)) && (((int)var1) > ((int)0))) {
        var2 = (((int)(var1 << ((uint32_t)2))) + ((int)var0));
        var4_phi = var2;
        goto block3;
    } else {
        var3 = (((int)(((int)var1) / ((int)6))) + ((int)(((int)var0) * ((int)3))));
        var4_phi = var3;
        goto block3;
    }
    block3:
    if (((int)(var4_phi & var0)) < ((int)0)) {
        return 0;
    } else {
        return 1;
    }
}

