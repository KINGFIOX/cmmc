func @foo(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i1 %1 = scmp gt i32 %0, i32 0;
    i32 %2 = strunc i32 %var1 to i32;
    i1 %3 = scmp gt i32 %2, i32 0;
    i1 %4 = and i1 %1, i1 %3;
    cbr i1 %4(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %5 = shl i32 %var1, i32 2;
    i32 %6 = strunc i32 %5 to i32;
    i32 %7 = add i32 %0, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ubr ^b;
  ^if.else:
    i32 %9 = and i32 %var0, i32 %var1;
    i32 %10 = strunc i32 %9 to i32;
    i1 %11 = scmp lt i32 %10, i32 0;
    cbr i1 %11(prob = 0.5), ^if.then1, ^if.else1;
  ^if.then1:
    i32 %12 = sdiv i32 %2, i32 6;
    i32 %13 = mul i32 %0, i32 3;
    i32 %14 = add i32 %12, i32 %13;
    i32 %15 = ztrunc i32 %14 to i32;
    ubr ^b;
  ^if.else1:
    i32 %16 = sub i32 %0, i32 %2;
    i32 %17 = ztrunc i32 %16 to i32;
    ubr ^b;
  ^b:
    i32 %18 = phi [^if.then, i32 %8] [^if.then1, i32 %15] [^if.else1, i32 %17];
    ret i32 %18;
}
