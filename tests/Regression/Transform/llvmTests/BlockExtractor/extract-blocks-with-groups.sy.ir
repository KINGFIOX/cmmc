func @bar(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i32 %1 = strunc i32 %var1 to i32;
    i32 %2 = smin i32 %0, i32 %1;
    i1 %3 = icmp sgt i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %4 = shl i32 %var1, i32 2;
    i32 %5 = strunc i32 %4 to i32;
    i32 %6 = add i32 %0, i32 %5;
    i32 %7 = ztrunc i32 %6 to i32;
    ubr ^b;
  ^if.else:
    i32 %8 = and i32 %var0, i32 %var1;
    i32 %9 = strunc i32 %8 to i32;
    i1 %10 = icmp slt i32 %9, i32 0;
    cbr i1 %10(prob = 0.5), ^if.then1, ^if.else1;
  ^if.then1:
    i32 %11 = sdiv i32 %1, i32 6;
    i32 %12 = mul i32 %0, i32 3;
    i32 %13 = add i32 %11, i32 %12;
    i32 %14 = ztrunc i32 %13 to i32;
    ubr ^b;
  ^if.else1:
    i32 %15 = sub i32 %0, i32 %1;
    i32 %16 = ztrunc i32 %15 to i32;
    ubr ^b;
  ^b:
    i32 %17 = phi [^if.then, i32 %7] [^if.then1, i32 %14] [^if.else1, i32 %16];
    ret i32 %17;
}
func @foo(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i32 %1 = strunc i32 %var1 to i32;
    i32 %2 = smin i32 %0, i32 %1;
    i1 %3 = icmp sgt i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %4 = shl i32 %var1, i32 2;
    i32 %5 = strunc i32 %4 to i32;
    i32 %6 = add i32 %0, i32 %5;
    i32 %7 = ztrunc i32 %6 to i32;
    ubr ^block3;
  ^if.else:
    i32 %8 = sdiv i32 %1, i32 6;
    i32 %9 = mul i32 %0, i32 3;
    i32 %10 = add i32 %8, i32 %9;
    i32 %11 = ztrunc i32 %10 to i32;
    ubr ^block3;
  ^block3:
    i32 %12 = phi [^if.then, i32 %7] [^if.else, i32 %11];
    i32 %13 = and i32 %var0, i32 %12;
    i32 %14 = strunc i32 %13 to i32;
    i32 %15 = lshr i32 %14, i32 31;
    i32 %16 = sub i32 1, i32 %15;
    ret i32 %16;
}
