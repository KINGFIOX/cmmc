func @test1(i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = ztrunc i32 %var1 to i32;
    ret i32 %0;
}
func @test2(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i1 %1 = icmp sgt i32 %0, i32 1;
    cbr i1 %1(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %2 = phi [^entry, i32 1] [^if.then, i32 %5];
    i32 %3 = phi [^entry, i32 %var1] [^if.then, i32 %7];
    i32 %4 = strunc i32 %2 to i32;
    i32 %5 = add i32 %4, i32 1;
    i1 %6 = icmp sgt i32 %0, i32 %5;
    i32 %7 = ztrunc i32 %3 to i32;
    cbr i1 %6(prob = 0.5), ^if.then, ^if.else;
  ^if.else:
    i32 %8 = phi [^entry, i32 %var1] [^if.then, i32 %7];
    ret i32 %8;
}
func @test3(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    ubr ^block1;
  ^block1:
    i32 %1 = phi [^entry, i32 0] [^if.then1, i32 %10];
    i32 %2 = phi [^entry, i32 %var1] [^if.then1, i32 %7];
    i32 %3 = strunc i32 %1 to i32;
    i1 %4 = icmp slt i32 %3, i32 42;
    cbr i1 %4(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %5 = ztrunc i32 %2 to i32;
    ubr ^block4;
  ^if.else:
    i32 %6 = ztrunc i32 %2 to i32;
    ubr ^block4;
  ^block4:
    i32 %7 = phi [^if.then, i32 %5] [^if.else, i32 %6];
    i32 %8 = add i32 %3, i32 1;
    i1 %9 = icmp sgt i32 %0, i32 %8;
    cbr i1 %9(prob = 0.5), ^if.then1, ^if.else1;
  ^if.then1:
    i32 %10 = ztrunc i32 %8 to i32;
    ubr ^block1;
  ^if.else1:
    ret i32 %2;
}
func @test4(i32 %var0, i32 %var1, i32 %var2) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var1 to i32;
    i1 %1 = icmp sgt i32 %0, i32 1;
    i32 %2 = strunc i32 %var0 to i32;
    ubr ^block1;
  ^block1:
    i32 %3 = phi [^entry, i32 0] [^if.then1, i32 %16];
    i32 %4 = phi [^entry, i32 %var2] [^if.then1, i32 %12];
    i32 %5 = ztrunc i32 %4 to i32;
    cbr i1 %1(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %6 = phi [^block1, i32 1] [^if.then, i32 %9];
    i32 %7 = phi [^block1, i32 %5] [^if.then, i32 %11];
    i32 %8 = strunc i32 %6 to i32;
    i32 %9 = add i32 %8, i32 1;
    i1 %10 = icmp sgt i32 %0, i32 %9;
    i32 %11 = ztrunc i32 %7 to i32;
    cbr i1 %10(prob = 0.5), ^if.then, ^if.else;
  ^if.else:
    i32 %12 = phi [^block1, i32 %5] [^if.then, i32 %11];
    i32 %13 = strunc i32 %3 to i32;
    i32 %14 = add i32 %13, i32 1;
    i1 %15 = icmp sgt i32 %2, i32 %14;
    cbr i1 %15(prob = 0.5), ^if.then1, ^if.else1;
  ^if.then1:
    i32 %16 = ztrunc i32 %14 to i32;
    ubr ^block1;
  ^if.else1:
    ret i32 %4;
}
