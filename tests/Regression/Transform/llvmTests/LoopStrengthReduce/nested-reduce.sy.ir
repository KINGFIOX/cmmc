func @foo(i32 %var0, i32 %var1, i32 %var2, i32 %var3) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var2 to i32;
    i1 %1 = icmp sgt i32 %0, i32 0;
    i32 %2 = zext i1 %1 to i32;
    i32 %3 = ztrunc i32 %2 to i32;
    i1 %4 = icmp neq i32 %3, i32 0;
    i32 %5 = and i32 %var0, i32 1;
    ubr ^block1;
  ^block1:
    i32 %6 = phi [^entry, i32 0] [^block7, i32 %10];
    i32 %7 = phi [^entry, i32 0] [^block7, i32 %9];
    cbr i1 %4(prob = 0.5), ^if.then, ^block7;
  ^if.then:
    i32 %8 = mul i32 %6, i32 6;
    ubr ^block3;
  ^block7:
    i32 %9 = phi [^block1, i32 %7] [^if.then2, i32 %25] [^if.else, i32 %12];
    i32 %10 = add i32 %6, i32 1;
    i1 %11 = icmp eq i32 %10, i32 4;
    cbr i1 %11(prob = 0.5), ^if.then1, ^block1;
  ^block3:
    i32 %12 = phi [^if.then, i32 %7] [^if.then2, i32 %25];
    i32 %13 = phi [^if.then, i32 0] [^if.then2, i32 %21];
    i32 %14 = add i32 %8, i32 %13;
    i32 %15 = add i32 %13, i32 1;
    ubr ^block4;
  ^if.then1:
    ret i32 %9;
  ^block4:
    i32 %16 = phi [^block3, i32 0] [^if.else, i32 %26];
    i32 %17 = add i32 %14, i32 %16;
    i32 %18 = and i32 %17, i32 255;
    i32 %19 = shl i32 %var3, i32 %18;
    i1 %20 = icmp eq i32 %var1, i32 %19;
    i32 %21 = add i32 %15, i32 %16;
    i32 %22 = strunc i32 %21 to i32;
    i1 %23 = icmp sgt i32 %0, i32 %22;
    cbr i1 %20(prob = 0.5), ^if.then2, ^if.else;
  ^if.then2:
    i32 %24 = and i32 %5, i32 %19;
    i32 %25 = add i32 %12, i32 %24;
    cbr i1 %23(prob = 0.5), ^block3, ^block7;
  ^if.else:
    i32 %26 = add i32 %16, i32 1;
    cbr i1 %23(prob = 0.5), ^block4, ^block7;
}
