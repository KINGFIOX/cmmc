func @caller1() -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ret i32 2;
}
func @caller2(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i1 %0 = scmp neq i32 %var0, i32 0;
    cbr i1 %0(prob = 0.5), ^entry1, ^b;
  ^entry1:
    i1 %1 = scmp neq i32 %var1, i32 0;
    i32 %2 = select i1 %1 ? i32 10 : i32 -10;
    i1 %3 = ucmp eq i32 %2, i32 0;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    i1 %6 = scmp neq i32 %5, i32 0;
    i32 %7 = select i1 %6 ? i32 20 : i32 200;
    i32 %8 = ztrunc i32 %7 to i32;
    i32 %9 = strunc i32 %2 to i32;
    i1 %10 = scmp gt i32 %9, i32 5;
    i32 %11 = select i1 %10 ? i32 10 : i32 100;
    i32 %12 = ztrunc i32 %11 to i32;
    i32 %13 = add i32 %8, i32 %12;
    i1 %14 = scmp lt i32 %9, i32 0;
    i32 %15 = zext i1 %14 to i32;
    i32 %16 = ztrunc i32 %15 to i32;
    i1 %17 = scmp neq i32 %16, i32 0;
    i32 %18 = select i1 %17 ? i32 30 : i32 300;
    i32 %19 = ztrunc i32 %18 to i32;
    i32 %20 = add i32 %13, i32 %19;
    i1 %21 = scmp gt i32 %9, i32 10;
    i32 %22 = zext i1 %21 to i32;
    i32 %23 = ztrunc i32 %22 to i32;
    i1 %24 = scmp neq i32 %23, i32 0;
    i32 %25 = select i1 %24 ? i32 40 : i32 400;
    i32 %26 = ztrunc i32 %25 to i32;
    i32 %27 = add i32 %20, i32 %26;
    i1 %28 = scmp le i32 %9, i32 10;
    i32 %29 = zext i1 %28 to i32;
    i32 %30 = ztrunc i32 %29 to i32;
    i1 %31 = scmp neq i32 %30, i32 0;
    i32 %32 = select i1 %31 ? i32 50 : i32 500;
    i32 %33 = ztrunc i32 %32 to i32;
    i32 %34 = add i32 %27, i32 %33;
    i1 %35 = scmp lt i32 %9, i32 -11;
    i32 %36 = zext i1 %35 to i32;
    i32 %37 = ztrunc i32 %36 to i32;
    i1 %38 = scmp neq i32 %37, i32 0;
    i32 %39 = select i1 %38 ? i32 70 : i32 700;
    i32 %40 = ztrunc i32 %39 to i32;
    i32 %41 = add i32 %34, i32 %40;
    ubr ^b;
  ^b:
    i32 %42 = phi [^entry, i32 1570] [^entry1, i32 %41];
    ret i32 %42;
}
func @caller3(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i1 %0 = scmp neq i32 %var1, i32 0;
    cbr i1 %0(prob = 0.5), ^entry1, ^b;
  ^entry1:
    i1 %1 = ucmp eq i32 %var0, i32 0;
    i32 %2 = zext i1 %1 to i32;
    i32 %3 = ztrunc i32 %2 to i32;
    i1 %4 = scmp neq i32 %3, i32 0;
    i32 %5 = select i1 %4 ? i32 20 : i32 200;
    i32 %6 = ztrunc i32 %5 to i32;
    i32 %7 = strunc i32 %var0 to i32;
    i1 %8 = scmp gt i32 %7, i32 5;
    i32 %9 = select i1 %8 ? i32 10 : i32 100;
    i32 %10 = ztrunc i32 %9 to i32;
    i32 %11 = add i32 %6, i32 %10;
    i1 %12 = scmp lt i32 %7, i32 0;
    i32 %13 = zext i1 %12 to i32;
    i32 %14 = ztrunc i32 %13 to i32;
    i1 %15 = scmp neq i32 %14, i32 0;
    i32 %16 = select i1 %15 ? i32 30 : i32 300;
    i32 %17 = ztrunc i32 %16 to i32;
    i32 %18 = add i32 %11, i32 %17;
    i1 %19 = scmp gt i32 %7, i32 10;
    i32 %20 = zext i1 %19 to i32;
    i32 %21 = ztrunc i32 %20 to i32;
    i1 %22 = scmp neq i32 %21, i32 0;
    i32 %23 = select i1 %22 ? i32 40 : i32 400;
    i32 %24 = ztrunc i32 %23 to i32;
    i32 %25 = add i32 %18, i32 %24;
    i1 %26 = scmp le i32 %7, i32 10;
    i32 %27 = zext i1 %26 to i32;
    i32 %28 = ztrunc i32 %27 to i32;
    i1 %29 = scmp neq i32 %28, i32 0;
    i32 %30 = select i1 %29 ? i32 50 : i32 500;
    i32 %31 = ztrunc i32 %30 to i32;
    i32 %32 = add i32 %25, i32 %31;
    i1 %33 = scmp lt i32 %7, i32 -11;
    i32 %34 = zext i1 %33 to i32;
    i32 %35 = ztrunc i32 %34 to i32;
    i1 %36 = scmp neq i32 %35, i32 0;
    i32 %37 = select i1 %36 ? i32 70 : i32 700;
    i32 %38 = ztrunc i32 %37 to i32;
    i32 %39 = add i32 %32, i32 %38;
    ubr ^b;
  ^b:
    i32 %40 = phi [^entry, i32 1570] [^entry1, i32 %39];
    ret i32 %40;
}
func @f1(i32 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i1 %1 = scmp gt i32 %0, i32 300;
    i32 %2 = zext i1 %1 to i32;
    i32 %3 = sub i32 2, i32 %2;
    i32 %4 = ztrunc i32 %3 to i32;
    ret i32 %4;
}
func @f2(i32 %var0, i32 %var1, i32 %var2, i32 %var3, i32 %var4) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i1 %0 = scmp neq i32 %var4, i32 0;
    i32 %1 = select i1 %0 ? i32 %var2 : i32 %var1;
    i1 %2 = scmp neq i32 %var3, i32 0;
    i32 %3 = select i1 %2 ? i32 %1 : i32 %var0;
    i1 %4 = ucmp eq i32 %3, i32 0;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = ztrunc i32 %5 to i32;
    i1 %7 = scmp neq i32 %6, i32 0;
    i32 %8 = select i1 %7 ? i32 20 : i32 200;
    i32 %9 = ztrunc i32 %8 to i32;
    i32 %10 = strunc i32 %3 to i32;
    i1 %11 = scmp gt i32 %10, i32 5;
    i32 %12 = select i1 %11 ? i32 10 : i32 100;
    i32 %13 = ztrunc i32 %12 to i32;
    i32 %14 = add i32 %9, i32 %13;
    i1 %15 = scmp lt i32 %10, i32 0;
    i32 %16 = zext i1 %15 to i32;
    i32 %17 = ztrunc i32 %16 to i32;
    i1 %18 = scmp neq i32 %17, i32 0;
    i32 %19 = select i1 %18 ? i32 30 : i32 300;
    i32 %20 = ztrunc i32 %19 to i32;
    i32 %21 = add i32 %14, i32 %20;
    i1 %22 = scmp gt i32 %10, i32 10;
    i32 %23 = zext i1 %22 to i32;
    i32 %24 = ztrunc i32 %23 to i32;
    i1 %25 = scmp neq i32 %24, i32 0;
    i32 %26 = select i1 %25 ? i32 40 : i32 400;
    i32 %27 = ztrunc i32 %26 to i32;
    i32 %28 = add i32 %21, i32 %27;
    i1 %29 = scmp le i32 %10, i32 10;
    i32 %30 = zext i1 %29 to i32;
    i32 %31 = ztrunc i32 %30 to i32;
    i1 %32 = scmp neq i32 %31, i32 0;
    i32 %33 = select i1 %32 ? i32 50 : i32 500;
    i32 %34 = ztrunc i32 %33 to i32;
    i32 %35 = add i32 %28, i32 %34;
    i1 %36 = scmp lt i32 %10, i32 -11;
    i32 %37 = zext i1 %36 to i32;
    i32 %38 = ztrunc i32 %37 to i32;
    i1 %39 = scmp neq i32 %38, i32 0;
    i32 %40 = select i1 %39 ? i32 70 : i32 700;
    i32 %41 = ztrunc i32 %40 to i32;
    i32 %42 = add i32 %35, i32 %41;
    ret i32 %42;
}
func @f3(i32 %var0, i32 %var1, i32 %var2) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i1 %0 = scmp neq i32 %var2, i32 0;
    i32 %1 = select i1 %0 ? i32 %var1 : i32 %var0;
    i1 %2 = ucmp eq i32 %1, i32 0;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = ztrunc i32 %3 to i32;
    i1 %5 = scmp neq i32 %4, i32 0;
    i32 %6 = select i1 %5 ? i32 20 : i32 200;
    i32 %7 = ztrunc i32 %6 to i32;
    i32 %8 = strunc i32 %1 to i32;
    i1 %9 = scmp gt i32 %8, i32 5;
    i32 %10 = select i1 %9 ? i32 10 : i32 100;
    i32 %11 = ztrunc i32 %10 to i32;
    i32 %12 = add i32 %7, i32 %11;
    i1 %13 = scmp lt i32 %8, i32 0;
    i32 %14 = zext i1 %13 to i32;
    i32 %15 = ztrunc i32 %14 to i32;
    i1 %16 = scmp neq i32 %15, i32 0;
    i32 %17 = select i1 %16 ? i32 30 : i32 300;
    i32 %18 = ztrunc i32 %17 to i32;
    i32 %19 = add i32 %12, i32 %18;
    i1 %20 = scmp gt i32 %8, i32 10;
    i32 %21 = zext i1 %20 to i32;
    i32 %22 = ztrunc i32 %21 to i32;
    i1 %23 = scmp neq i32 %22, i32 0;
    i32 %24 = select i1 %23 ? i32 40 : i32 400;
    i32 %25 = ztrunc i32 %24 to i32;
    i32 %26 = add i32 %19, i32 %25;
    i1 %27 = scmp le i32 %8, i32 10;
    i32 %28 = zext i1 %27 to i32;
    i32 %29 = ztrunc i32 %28 to i32;
    i1 %30 = scmp neq i32 %29, i32 0;
    i32 %31 = select i1 %30 ? i32 50 : i32 500;
    i32 %32 = ztrunc i32 %31 to i32;
    i32 %33 = add i32 %26, i32 %32;
    i1 %34 = scmp lt i32 %8, i32 -11;
    i32 %35 = zext i1 %34 to i32;
    i32 %36 = ztrunc i32 %35 to i32;
    i1 %37 = scmp neq i32 %36, i32 0;
    i32 %38 = select i1 %37 ? i32 70 : i32 700;
    i32 %39 = ztrunc i32 %38 to i32;
    i32 %40 = add i32 %33, i32 %39;
    ret i32 %40;
}
