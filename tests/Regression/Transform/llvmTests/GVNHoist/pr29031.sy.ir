func @main() -> i32 { NoRecurse } {
  ^entry:
    i32* %0 = ptrcast i32* @a to i32*;
    i32 %1 = load i32* %0;
    i32 %2 = strunc i32 %1 to i32;
    i1 %3 = icmp slt i32 %2, i32 1;
    cbr i1 %3(prob = 0.5), ^block2, ^if.else;
  ^block2:
    i32 %4 = phi [^entry, i32 %1] [^if.else1, i32 %13];
    i32 %5 = strunc i32 %4 to i32;
    i1 %6 = icmp slt i32 %5, i32 1;
    cbr i1 %6(prob = 0.5), ^if.then, ^if.else1;
  ^if.else:
    i32 %7 = phi [^entry, i32 %2] [^if.else1, i32 %14];
    ret i32 %7;
  ^if.then:
    i32 %8 = phi [^block2, i32 %5] [^block5, i32 %23];
    i32 %9 = phi [^block2, i32 %4] [^block5, i32 %22];
    i1 %10 = icmp neq i32 %9, i32 0;
    cbr i1 %10(prob = 0.5), ^if.then1, ^indirect;
  ^if.else1:
    i32 %11 = phi [^block2, i32 %5] [^block5, i32 %23];
    i32 %12 = add i32 %11, i32 1;
    i32 %13 = ztrunc i32 %12 to i32;
    store i32* %0 with i32 %13;
    i32 %14 = strunc i32 %12 to i32;
    i1 %15 = icmp slt i32 %14, i32 1;
    cbr i1 %15(prob = 0.5), ^block2, ^if.else;
  ^if.then1:
    i32 %16 = add i32 %8, i32 1;
    i32 %17 = ztrunc i32 %16 to i32;
    ubr ^block5;
  ^indirect:
    i32 %18 = load i32* %0;
    ubr ^block5;
  ^block5:
    i32 %19 = phi [^if.then1, i32 %17] [^indirect, i32 %18];
    i32 %20 = strunc i32 %19 to i32;
    i32 %21 = add i32 %20, i32 1;
    i32 %22 = ztrunc i32 %21 to i32;
    store i32* %0 with i32 %22;
    i32 %23 = strunc i32 %21 to i32;
    i1 %24 = icmp slt i32 %23, i32 1;
    cbr i1 %24(prob = 0.5), ^if.then, ^if.else1;
}
i32* @a, align 4 = 0;
