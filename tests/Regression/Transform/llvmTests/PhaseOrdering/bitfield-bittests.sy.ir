func @allclear(i32 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = and i32 %var0, i32 255;
    i32 %1 = ashr i32 %0, i32 1;
    i32 %2 = and i32 %1, i32 1;
    i32 %3 = ztrunc i32 %2 to i32;
    i32 %4 = ashr i32 %0, i32 3;
    i32 %5 = and i32 %4, i32 1;
    i32 %6 = ztrunc i32 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ashr i32 %0, i32 2;
    i32 %9 = and i32 %8, i32 1;
    i32 %10 = ztrunc i32 %9 to i32;
    i32 %11 = and i32 %0, i32 1;
    i32 %12 = ztrunc i32 %11 to i32;
    i32 %13 = or i32 %10, i32 %12;
    i32 %14 = or i32 %7, i32 %13;
    i1 %15 = icmp eq i32 %14, i32 0;
    i32 %16 = zext i1 %15 to i32;
    i32 %17 = ztrunc i32 %16 to i32;
    ret i32 %17;
}
func @allset(i32 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = and i32 %var0, i32 255;
    i32 %1 = ashr i32 %0, i32 1;
    i32 %2 = and i32 %1, i32 1;
    i32 %3 = ztrunc i32 %2 to i32;
    i32 %4 = ashr i32 %0, i32 3;
    i32 %5 = and i32 %4, i32 1;
    i32 %6 = ztrunc i32 %5 to i32;
    i32 %7 = and i32 %3, i32 %6;
    i32 %8 = ashr i32 %0, i32 2;
    i32 %9 = and i32 %8, i32 1;
    i32 %10 = ztrunc i32 %9 to i32;
    i32 %11 = and i32 %0, i32 1;
    i32 %12 = ztrunc i32 %11 to i32;
    i32 %13 = and i32 %10, i32 %12;
    i32 %14 = and i32 %7, i32 %13;
    i1 %15 = icmp neq i32 %14, i32 0;
    i32 %16 = zext i1 %15 to i32;
    i32 %17 = ztrunc i32 %16 to i32;
    ret i32 %17;
}
func @anyclear(i32 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = and i32 %var0, i32 255;
    i32 %1 = ashr i32 %0, i32 1;
    i32 %2 = and i32 %1, i32 1;
    i32 %3 = ztrunc i32 %2 to i32;
    i32 %4 = ashr i32 %0, i32 3;
    i32 %5 = and i32 %4, i32 1;
    i32 %6 = ztrunc i32 %5 to i32;
    i32 %7 = and i32 %3, i32 %6;
    i32 %8 = ashr i32 %0, i32 2;
    i32 %9 = and i32 %8, i32 1;
    i32 %10 = ztrunc i32 %9 to i32;
    i32 %11 = and i32 %0, i32 1;
    i32 %12 = ztrunc i32 %11 to i32;
    i32 %13 = and i32 %10, i32 %12;
    i32 %14 = and i32 %7, i32 %13;
    i1 %15 = icmp eq i32 %14, i32 0;
    i32 %16 = zext i1 %15 to i32;
    i32 %17 = ztrunc i32 %16 to i32;
    ret i32 %17;
}
func @anyset(i32 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = and i32 %var0, i32 255;
    i32 %1 = ashr i32 %0, i32 1;
    i32 %2 = and i32 %1, i32 1;
    i32 %3 = ztrunc i32 %2 to i32;
    i32 %4 = ashr i32 %0, i32 3;
    i32 %5 = and i32 %4, i32 1;
    i32 %6 = ztrunc i32 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ashr i32 %0, i32 2;
    i32 %9 = and i32 %8, i32 1;
    i32 %10 = ztrunc i32 %9 to i32;
    i32 %11 = and i32 %0, i32 1;
    i32 %12 = ztrunc i32 %11 to i32;
    i32 %13 = or i32 %10, i32 %12;
    i32 %14 = or i32 %7, i32 %13;
    i1 %15 = icmp neq i32 %14, i32 0;
    i32 %16 = zext i1 %15 to i32;
    i32 %17 = ztrunc i32 %16 to i32;
    ret i32 %17;
}
