func @callee(i32 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i1 %1 = icmp sgt i32 %0, i32 2000;
    cbr i1 %1(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %2 = mul i32 %0, i32 10;
    i32 %3 = ztrunc i32 %2 to i32;
    i32 %4 = strunc i32 %3 to i32;
    i32 %5 = add i32 %4, i32 200;
    i32 %6 = ztrunc i32 %5 to i32;
    ubr ^b;
  ^if.else:
    i32 %7 = add i32 %0, i32 200;
    i32 %8 = ztrunc i32 %7 to i32;
    ubr ^b;
  ^b:
    i32 %9 = phi [^if.then, i32 %6] [^if.else, i32 %8];
    ret i32 %9;
}
func @callee2(i32 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i1 %1 = icmp sgt i32 %0, i32 2000;
    cbr i1 %1(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %2 = add i32 %var0, i32 -10;
    i32 %3 = strunc i32 %2 to i32;
    i32 %4 = add i32 %3, i32 200;
    i32 %5 = ztrunc i32 %4 to i32;
    ubr ^b;
  ^if.else:
    i32 %6 = add i32 %0, i32 200;
    i32 %7 = ztrunc i32 %6 to i32;
    ubr ^b;
  ^b:
    i32 %8 = phi [^if.then, i32 %5] [^if.else, i32 %7];
    ret i32 %8;
}
func @caller(i32 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i1 %1 = icmp sgt i32 %0, i32 2000;
    cbr i1 %1(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %2 = mul i32 %0, i32 10;
    i32 %3 = ztrunc i32 %2 to i32;
    i32 %4 = strunc i32 %3 to i32;
    i32 %5 = add i32 %4, i32 200;
    i32 %6 = ztrunc i32 %5 to i32;
    ubr ^b;
  ^if.else:
    i32 %7 = add i32 %0, i32 200;
    i32 %8 = ztrunc i32 %7 to i32;
    ubr ^b;
  ^b:
    i32 %9 = phi [^if.then, i32 %6] [^if.else, i32 %8];
    ret i32 %9;
}
func @caller2(i32 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i1 %1 = icmp sgt i32 %0, i32 2000;
    cbr i1 %1(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %2 = add i32 %var0, i32 -10;
    i32 %3 = strunc i32 %2 to i32;
    i32 %4 = add i32 %3, i32 200;
    i32 %5 = ztrunc i32 %4 to i32;
    ubr ^b;
  ^if.else:
    i32 %6 = add i32 %0, i32 200;
    i32 %7 = ztrunc i32 %6 to i32;
    ubr ^b;
  ^b:
    i32 %8 = phi [^if.then, i32 %5] [^if.else, i32 %7];
    ret i32 %8;
}
