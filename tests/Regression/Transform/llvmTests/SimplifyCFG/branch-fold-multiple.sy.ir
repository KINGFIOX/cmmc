func @test1(i32 %var0, i32 %var1, i32 %var2, i32 %var3) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = mul i32 %var0, i32 %var0;
    i32 %1 = strunc i32 %0 to i32;
    i1 %2 = icmp sgt i32 %1, i32 0;
    cbr i1 %2(prob = 0.5), ^b, ^if.else;
  ^if.else:
    i32 %3 = mul i32 %var1, i32 %var1;
    i32 %4 = strunc i32 %3 to i32;
    i1 %5 = icmp sgt i32 %4, i32 0;
    cbr i1 %5(prob = 0.5), ^b, ^if.else1;
  ^b:
    i32 %6 = phi [^entry, i32 0] [^if.else, i32 0] [^if.else1, i32 0] [^if.else2, i32 %13];
    ret i32 %6;
  ^if.else1:
    i32 %7 = mul i32 %var2, i32 %var2;
    i32 %8 = strunc i32 %7 to i32;
    i1 %9 = icmp sgt i32 %8, i32 0;
    cbr i1 %9(prob = 0.5), ^b, ^if.else2;
  ^if.else2:
    i32 %10 = mul i32 %var3, i32 %var3;
    i32 %11 = strunc i32 %10 to i32;
    i1 %12 = icmp sle i32 %11, i32 0;
    i32 %13 = zext i1 %12 to i32;
    ubr ^b;
}
func @test2(i32 %var0, i32 %var1, i32 %var2, i32 %var3) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i1 %1 = icmp sgt i32 %0, i32 0;
    cbr i1 %1(prob = 0.5), ^b, ^if.else;
  ^if.else:
    i32 %2 = strunc i32 %var1 to i32;
    i1 %3 = icmp sgt i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^b, ^if.else1;
  ^b:
    i32 %4 = phi [^entry, i32 0] [^if.else, i32 0] [^if.else1, i32 %10];
    ret i32 %4;
  ^if.else1:
    i32 %5 = strunc i32 %var2 to i32;
    i1 %6 = icmp sle i32 %5, i32 0;
    i32 %7 = strunc i32 %var3 to i32;
    i1 %8 = icmp sle i32 %7, i32 0;
    i1 %9 = and i1 %6, i1 %8;
    i32 %10 = zext i1 %9 to i32;
    ubr ^b;
}
func @test3(i32 %var0, i32 %var1, i32 %var2, i32 %var3) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i1 %1 = icmp sgt i32 %0, i32 0;
    cbr i1 %1(prob = 0.5), ^b, ^if.else;
  ^if.else:
    i32 %2 = mul i32 %var0, i32 %var1;
    i32 %3 = mul i32 %var2, i32 %2;
    i32 %4 = mul i32 %var3, i32 %3;
    i32 %5 = mul i32 %var3, i32 %var3;
    i32 %6 = mul i32 %4, i32 %5;
    i32 %7 = strunc i32 %6 to i32;
    i1 %8 = icmp sgt i32 %7, i32 0;
    cbr i1 %8(prob = 0.5), ^b, ^if.else1;
  ^b:
    i32 %9 = phi [^entry, i32 0] [^if.else, i32 0] [^if.else1, i32 %15];
    ret i32 %9;
  ^if.else1:
    i32 %10 = strunc i32 %var2 to i32;
    i1 %11 = icmp sle i32 %10, i32 0;
    i32 %12 = strunc i32 %var3 to i32;
    i1 %13 = icmp sle i32 %12, i32 0;
    i1 %14 = and i1 %11, i1 %13;
    i32 %15 = zext i1 %14 to i32;
    ubr ^b;
}
