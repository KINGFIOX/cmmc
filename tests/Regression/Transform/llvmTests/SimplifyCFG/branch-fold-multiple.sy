// This file is automatically generated by llvm2c from llvm/test/Transforms/SimplifyCFG/branch-fold-multiple

// function declarations
uint32_t test1(uint32_t var0, uint32_t var1, uint32_t var2, uint32_t var3);
uint32_t test2(uint32_t var0, uint32_t var1, uint32_t var2, uint32_t var3);
uint32_t test3(uint32_t var0, uint32_t var1, uint32_t var2, uint32_t var3);

uint32_t test1(uint32_t var0, uint32_t var1, uint32_t var2, uint32_t var3){
    uint32_t var4_phi;
    block0:
    if (((int)(var0 * var0)) > ((int)0)) {
        var4_phi = 0;
        return var4_phi;
    } else {
        if (((int)(var1 * var1)) > ((int)0)) {
            var4_phi = 0;
            return var4_phi;
        } else {
            if (((int)(var2 * var2)) > ((int)0)) {
                var4_phi = 0;
                return var4_phi;
            } else {
                if (((int)(var3 * var3)) > ((int)0)) {
                    var4_phi = 0;
                    return var4_phi;
                } else {
                    var4_phi = 1;
                    return var4_phi;
                }
            }
        }
    }
}

uint32_t test2(uint32_t var0, uint32_t var1, uint32_t var2, uint32_t var3){
    uint32_t var4_phi;
    block0:
    if (((int)var0) > ((int)0)) {
        var4_phi = 0;
        return var4_phi;
    } else {
        if (((int)var1) > ((int)0)) {
            var4_phi = 0;
            return var4_phi;
        } else {
            if (((int)var2) > ((int)0)) {
                var4_phi = 0;
                return var4_phi;
            } else {
                if (((int)var3) > ((int)0)) {
                    var4_phi = 0;
                    return var4_phi;
                } else {
                    var4_phi = 1;
                    return var4_phi;
                }
            }
        }
    }
}

uint32_t test3(uint32_t var0, uint32_t var1, uint32_t var2, uint32_t var3){
    uint32_t var6_phi;
    uint32_t var4;
    uint32_t var5;
    block0:
    if (((int)var0) > ((int)0)) {
        var6_phi = 0;
        return var6_phi;
    } else {
        var4 = (((((var0 * var1) * var2) * var3) * var3) * var3);
        var5 = (var4 * var3);
        if (((int)var4) > ((int)0)) {
            var6_phi = 0;
            return var6_phi;
        } else {
            if (((int)var2) > ((int)0)) {
                var6_phi = 0;
                return var6_phi;
            } else {
                if (((int)var3) > ((int)0)) {
                    var6_phi = 0;
                    return var6_phi;
                } else {
                    var6_phi = 1;
                    return var6_phi;
                }
            }
        }
    }
}

