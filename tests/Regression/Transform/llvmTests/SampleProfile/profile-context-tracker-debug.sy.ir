func @_Z3fibi() -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ret i32 0;
}
func @_Z5funcAi(i32 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i32 %1 = add i32 %0, i32 100000;
    i32 %2 = strunc i32 %1 to i32;
    i1 %3 = icmp sgt i32 %2, i32 0;
    i32 %4 = ztrunc i32 %1 to i32;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %5 = phi [^entry, i32 %4] [^if.then, i32 %8];
    i32 %6 = strunc i32 %5 to i32;
    i1 %7 = icmp sgt i32 %6, i32 0;
    i32 %8 = ztrunc i32 %5 to i32;
    cbr i1 %7(prob = 0.5), ^if.then, ^b;
  ^if.else:
    i1 %9 = icmp slt i32 %2, i32 0;
    cbr i1 %9(prob = 0.5), ^if.then1, ^b;
  ^if.then1:
    i32 %10 = phi [^if.else, i32 %4] [^if.then1, i32 %13];
    i32 %11 = strunc i32 %10 to i32;
    i1 %12 = icmp slt i32 %11, i32 0;
    i32 %13 = ztrunc i32 %10 to i32;
    cbr i1 %12(prob = 0.5), ^if.then1, ^b;
  ^b:
    i32 %14 = phi [^if.then, i32 %8] [^if.else, i32 0] [^if.then1, i32 %13];
    ret i32 %14;
}
func @_Z5funcBi(i32 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i32 %1 = add i32 %0, i32 -100000;
    i32 %2 = strunc i32 %1 to i32;
    i1 %3 = icmp sgt i32 %2, i32 0;
    i32 %4 = ztrunc i32 %1 to i32;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %5 = phi [^entry, i32 %4] [^if.then, i32 %8];
    i32 %6 = strunc i32 %5 to i32;
    i1 %7 = icmp sgt i32 %6, i32 0;
    i32 %8 = ztrunc i32 %5 to i32;
    cbr i1 %7(prob = 0.5), ^if.then, ^b;
  ^if.else:
    i1 %9 = icmp slt i32 %2, i32 0;
    cbr i1 %9(prob = 0.5), ^if.then1, ^b;
  ^if.then1:
    i32 %10 = phi [^if.else, i32 %4] [^if.then1, i32 %13];
    i32 %11 = strunc i32 %10 to i32;
    i1 %12 = icmp slt i32 %11, i32 0;
    i32 %13 = ztrunc i32 %10 to i32;
    cbr i1 %12(prob = 0.5), ^if.then1, ^b;
  ^b:
    i32 %14 = phi [^if.then, i32 %8] [^if.else, i32 0] [^if.then1, i32 %13];
    ret i32 %14;
}
func @_Z8funcLeafi(i32 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i1 %1 = icmp sgt i32 %0, i32 0;
    cbr i1 %1(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %2 = phi [^entry, i32 %var0] [^if.then, i32 %5];
    i32 %3 = strunc i32 %2 to i32;
    i1 %4 = icmp sgt i32 %3, i32 0;
    i32 %5 = ztrunc i32 %2 to i32;
    cbr i1 %4(prob = 0.5), ^if.then, ^b;
  ^if.else:
    i1 %6 = icmp slt i32 %0, i32 0;
    cbr i1 %6(prob = 0.5), ^if.then1, ^b;
  ^if.then1:
    i32 %7 = phi [^if.else, i32 %var0] [^if.then1, i32 %10];
    i32 %8 = strunc i32 %7 to i32;
    i1 %9 = icmp slt i32 %8, i32 0;
    i32 %10 = ztrunc i32 %7 to i32;
    cbr i1 %9(prob = 0.5), ^if.then1, ^b;
  ^b:
    i32 %11 = phi [^if.then, i32 %5] [^if.else, i32 0] [^if.then1, i32 %10];
    ret i32 %11;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ubr ^block2;
  ^block2:
    i32 %0 = phi [^entry, i32 0] [^if.else2, i32 %30];
    i32 %1 = phi [^entry, i32 300000] [^if.else2, i32 %37];
    i32 %2 = strunc i32 %1 to i32;
    i32 %3 = add i32 %2, i32 -100000;
    i32 %4 = strunc i32 %3 to i32;
    i1 %5 = icmp sgt i32 %4, i32 0;
    i32 %6 = ztrunc i32 %3 to i32;
    cbr i1 %5(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %7 = phi [^block2, i32 %6] [^if.then, i32 %10];
    i32 %8 = strunc i32 %7 to i32;
    i1 %9 = icmp sgt i32 %8, i32 0;
    i32 %10 = ztrunc i32 %7 to i32;
    cbr i1 %9(prob = 0.5), ^if.then, ^b;
  ^if.else:
    i1 %11 = icmp slt i32 %4, i32 0;
    cbr i1 %11(prob = 0.5), ^if.then1, ^b;
  ^b:
    i32 %12 = phi [^if.then, i32 %10] [^if.else, i32 0] [^if.then1, i32 %22];
    i32 %13 = add i32 %2, i32 1;
    i32 %14 = strunc i32 %13 to i32;
    i32 %15 = add i32 %14, i32 100000;
    i32 %16 = strunc i32 %15 to i32;
    i1 %17 = icmp sgt i32 %16, i32 0;
    i32 %18 = ztrunc i32 %15 to i32;
    cbr i1 %17(prob = 0.5), ^if.then2, ^if.else1;
  ^if.then1:
    i32 %19 = phi [^if.else, i32 %6] [^if.then1, i32 %22];
    i32 %20 = strunc i32 %19 to i32;
    i1 %21 = icmp slt i32 %20, i32 0;
    i32 %22 = ztrunc i32 %19 to i32;
    cbr i1 %21(prob = 0.5), ^if.then1, ^b;
  ^if.then2:
    i32 %23 = phi [^b, i32 %18] [^if.then2, i32 %26];
    i32 %24 = strunc i32 %23 to i32;
    i1 %25 = icmp sgt i32 %24, i32 0;
    i32 %26 = ztrunc i32 %23 to i32;
    cbr i1 %25(prob = 0.5), ^if.then2, ^b1;
  ^if.else1:
    i1 %27 = icmp slt i32 %16, i32 0;
    cbr i1 %27(prob = 0.5), ^if.then3, ^b1;
  ^b1:
    i32 %28 = phi [^if.then2, i32 %26] [^if.else1, i32 0] [^if.then3, i32 %36];
    i32 %29 = add i32 %0, i32 %28;
    i32 %30 = add i32 %12, i32 %29;
    i32 %31 = add i32 %2, i32 -1;
    i1 %32 = icmp eq i32 %1, i32 0;
    cbr i1 %32(prob = 0.5), ^if.then4, ^if.else2;
  ^if.then3:
    i32 %33 = phi [^if.else1, i32 %18] [^if.then3, i32 %36];
    i32 %34 = strunc i32 %33 to i32;
    i1 %35 = icmp slt i32 %34, i32 0;
    i32 %36 = ztrunc i32 %33 to i32;
    cbr i1 %35(prob = 0.5), ^if.then3, ^b1;
  ^if.else2:
    i32 %37 = ztrunc i32 %31 to i32;
    ubr ^block2;
  ^if.then4:
    i32 %38 = strunc i32 %30 to i32;
    ret i32 %38;
}
i32* @factor = 3;
