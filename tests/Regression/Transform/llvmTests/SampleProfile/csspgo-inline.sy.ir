func @_Z3fibi() -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ret i32 0;
}
func @_Z5funcAi(i32 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i32 %1 = add i32 %0, i32 100;
    i32 %2 = strunc i32 %1 to i32;
    i1 %3 = icmp sgt i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %4 = phi [^entry, i32 %2] [^if.then, i32 %5];
    i32 %5 = strunc i32 %4 to i32;
    i1 %6 = icmp sgt i32 %5, i32 0;
    cbr i1 %6(prob = 0.5), ^if.then, ^if.else1;
  ^if.else:
    i1 %7 = icmp slt i32 %2, i32 0;
    cbr i1 %7(prob = 0.5), ^if.then1, ^b;
  ^if.else1:
    i32 %8 = ztrunc i32 %4 to i32;
    ubr ^b;
  ^if.then1:
    i32 %9 = phi [^if.else, i32 %2] [^if.then1, i32 %10];
    i32 %10 = strunc i32 %9 to i32;
    i1 %11 = icmp slt i32 %10, i32 0;
    cbr i1 %11(prob = 0.5), ^if.then1, ^if.else2;
  ^b:
    i32 %12 = phi [^if.else, i32 0] [^if.else1, i32 %8] [^if.else2, i32 %13];
    ret i32 %12;
  ^if.else2:
    i32 %13 = ztrunc i32 %9 to i32;
    ubr ^b;
}
func @_Z5funcBi(i32 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i32 %1 = add i32 %0, i32 -100;
    i32 %2 = strunc i32 %1 to i32;
    i1 %3 = icmp sgt i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %4 = phi [^entry, i32 %2] [^if.then, i32 %5];
    i32 %5 = strunc i32 %4 to i32;
    i1 %6 = icmp sgt i32 %5, i32 0;
    cbr i1 %6(prob = 0.5), ^if.then, ^if.else1;
  ^if.else:
    i1 %7 = icmp slt i32 %2, i32 0;
    cbr i1 %7(prob = 0.5), ^if.then1, ^b;
  ^if.else1:
    i32 %8 = ztrunc i32 %4 to i32;
    ubr ^b;
  ^if.then1:
    i32 %9 = phi [^if.else, i32 %2] [^if.then1, i32 %10];
    i32 %10 = strunc i32 %9 to i32;
    i1 %11 = icmp slt i32 %10, i32 0;
    cbr i1 %11(prob = 0.5), ^if.then1, ^if.else2;
  ^b:
    i32 %12 = phi [^if.else, i32 0] [^if.else1, i32 %8] [^if.else2, i32 %13];
    ret i32 %12;
  ^if.else2:
    i32 %13 = ztrunc i32 %9 to i32;
    ubr ^b;
}
func @_Z8funcLeafi(i32 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i1 %1 = icmp sgt i32 %0, i32 0;
    cbr i1 %1(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %2 = phi [^entry, i32 %0] [^if.then, i32 %3];
    i32 %3 = strunc i32 %2 to i32;
    i1 %4 = icmp sgt i32 %3, i32 0;
    cbr i1 %4(prob = 0.5), ^if.then, ^if.else1;
  ^if.else:
    i1 %5 = icmp slt i32 %0, i32 0;
    cbr i1 %5(prob = 0.5), ^if.then1, ^b;
  ^if.else1:
    i32 %6 = ztrunc i32 %2 to i32;
    ubr ^b;
  ^if.then1:
    i32 %7 = phi [^if.else, i32 %0] [^if.then1, i32 %8];
    i32 %8 = strunc i32 %7 to i32;
    i1 %9 = icmp slt i32 %8, i32 0;
    cbr i1 %9(prob = 0.5), ^if.then1, ^if.else2;
  ^b:
    i32 %10 = phi [^if.else, i32 0] [^if.else1, i32 %6] [^if.else2, i32 %11];
    ret i32 %10;
  ^if.else2:
    i32 %11 = ztrunc i32 %7 to i32;
    ubr ^b;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ubr ^if.then;
  ^if.then:
    i32 %0 = phi [^entry, i32 200] [^if.then, i32 %1];
    i32 %1 = strunc i32 %0 to i32;
    i1 %2 = icmp sgt i32 %1, i32 0;
    cbr i1 %2(prob = 0.5), ^if.then, ^if.else;
  ^if.else:
    i32 %3 = ztrunc i32 %0 to i32;
    ubr ^if.then1;
  ^if.then1:
    i32 %4 = phi [^if.else, i32 401] [^if.then1, i32 %5];
    i32 %5 = strunc i32 %4 to i32;
    i1 %6 = icmp sgt i32 %5, i32 0;
    cbr i1 %6(prob = 0.5), ^if.then1, ^if.else1;
  ^if.else1:
    i32 %7 = ztrunc i32 %4 to i32;
    i32 %8 = add i32 %3, i32 %7;
    ubr ^if.else2;
  ^if.else2:
    i32 %9 = phi [^if.else1, i32 299] [^b1, i32 %42];
    i32 %10 = phi [^if.else1, i32 %8] [^b1, i32 %41];
    i32 %11 = strunc i32 %9 to i32;
    i32 %12 = add i32 %11, i32 -100;
    i32 %13 = strunc i32 %12 to i32;
    i1 %14 = icmp sgt i32 %13, i32 0;
    i32 %15 = ztrunc i32 %9 to i32;
    cbr i1 %14(prob = 0.5), ^if.then2, ^if.else3;
  ^if.then2:
    i32 %16 = phi [^if.else2, i32 %13] [^if.then2, i32 %17];
    i32 %17 = strunc i32 %16 to i32;
    i1 %18 = icmp sgt i32 %17, i32 0;
    cbr i1 %18(prob = 0.5), ^if.then2, ^if.else4;
  ^if.else3:
    i1 %19 = icmp slt i32 %13, i32 0;
    cbr i1 %19(prob = 0.5), ^if.then3, ^b;
  ^if.else4:
    i32 %20 = ztrunc i32 %16 to i32;
    ubr ^b;
  ^if.then3:
    i32 %21 = phi [^if.else3, i32 %13] [^if.then3, i32 %22];
    i32 %22 = strunc i32 %21 to i32;
    i1 %23 = icmp slt i32 %22, i32 0;
    cbr i1 %23(prob = 0.5), ^if.then3, ^if.else5;
  ^b:
    i32 %24 = phi [^if.else3, i32 0] [^if.else4, i32 %20] [^if.else5, i32 %30];
    i32 %25 = add i32 %11, i32 1;
    i32 %26 = strunc i32 %25 to i32;
    i32 %27 = add i32 %26, i32 100;
    i32 %28 = strunc i32 %27 to i32;
    i1 %29 = icmp sgt i32 %28, i32 0;
    cbr i1 %29(prob = 0.5), ^if.then4, ^if.else6;
  ^if.else5:
    i32 %30 = ztrunc i32 %21 to i32;
    ubr ^b;
  ^if.then4:
    i32 %31 = phi [^b, i32 %28] [^if.then4, i32 %32];
    i32 %32 = strunc i32 %31 to i32;
    i1 %33 = icmp sgt i32 %32, i32 0;
    cbr i1 %33(prob = 0.5), ^if.then4, ^if.else7;
  ^if.else6:
    i1 %34 = icmp slt i32 %28, i32 0;
    cbr i1 %34(prob = 0.5), ^if.then5, ^b1;
  ^if.else7:
    i32 %35 = ztrunc i32 %31 to i32;
    ubr ^b1;
  ^if.then5:
    i32 %36 = phi [^if.else6, i32 %28] [^if.then5, i32 %37];
    i32 %37 = strunc i32 %36 to i32;
    i1 %38 = icmp slt i32 %37, i32 0;
    cbr i1 %38(prob = 0.5), ^if.then5, ^if.else8;
  ^b1:
    i32 %39 = phi [^if.else6, i32 0] [^if.else7, i32 %35] [^if.else8, i32 %44];
    i32 %40 = add i32 %10, i32 %24;
    i32 %41 = add i32 %39, i32 %40;
    i32 %42 = add i32 %11, i32 -1;
    i1 %43 = icmp eq i32 %15, i32 0;
    cbr i1 %43(prob = 0.5), ^if.then6, ^if.else2;
  ^if.else8:
    i32 %44 = ztrunc i32 %36 to i32;
    ubr ^b1;
  ^if.then6:
    i32 %45 = strunc i32 %41 to i32;
    ret i32 %45;
}
i32* @factor = 3;
