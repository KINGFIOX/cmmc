func @_Z3fibi() -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ret i32 0;
}
func @_Z5funcAi(i32 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i32 %1 = add i32 %0, i32 100000;
    i32 %2 = ztrunc i32 %1 to i32;
    i32 %3 = strunc i32 %2 to i32;
    i1 %4 = scmp gt i32 %3, i32 0;
    cbr i1 %4(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %5 = phi [^entry, i32 %3] [^if.then, i32 %7];
    i32 %6 = ztrunc i32 %5 to i32;
    i32 %7 = strunc i32 %6 to i32;
    i1 %8 = scmp gt i32 %7, i32 0;
    cbr i1 %8(prob = 0.5), ^if.then, ^if.else1;
  ^if.else:
    i1 %9 = scmp lt i32 %3, i32 0;
    cbr i1 %9(prob = 0.5), ^if.then1, ^b;
  ^if.else1:
    i32 %10 = ztrunc i32 %7 to i32;
    ubr ^b;
  ^if.then1:
    i32 %11 = phi [^if.else, i32 %3] [^if.then1, i32 %13];
    i32 %12 = ztrunc i32 %11 to i32;
    i32 %13 = strunc i32 %12 to i32;
    i1 %14 = scmp lt i32 %13, i32 0;
    cbr i1 %14(prob = 0.5), ^if.then1, ^if.else2;
  ^b:
    i32 %15 = phi [^if.else, i32 0] [^if.else1, i32 %10] [^if.else2, i32 %16];
    ret i32 %15;
  ^if.else2:
    i32 %16 = ztrunc i32 %13 to i32;
    ubr ^b;
}
func @_Z5funcBi(i32 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i32 %1 = add i32 %0, i32 -100000;
    i32 %2 = ztrunc i32 %1 to i32;
    i32 %3 = strunc i32 %2 to i32;
    i1 %4 = scmp gt i32 %3, i32 0;
    cbr i1 %4(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %5 = phi [^entry, i32 %3] [^if.then, i32 %7];
    i32 %6 = ztrunc i32 %5 to i32;
    i32 %7 = strunc i32 %6 to i32;
    i1 %8 = scmp gt i32 %7, i32 0;
    cbr i1 %8(prob = 0.5), ^if.then, ^if.else1;
  ^if.else:
    i1 %9 = scmp lt i32 %3, i32 0;
    cbr i1 %9(prob = 0.5), ^if.then1, ^b;
  ^if.else1:
    i32 %10 = ztrunc i32 %7 to i32;
    ubr ^b;
  ^if.then1:
    i32 %11 = phi [^if.else, i32 %3] [^if.then1, i32 %13];
    i32 %12 = ztrunc i32 %11 to i32;
    i32 %13 = strunc i32 %12 to i32;
    i1 %14 = scmp lt i32 %13, i32 0;
    cbr i1 %14(prob = 0.5), ^if.then1, ^if.else2;
  ^b:
    i32 %15 = phi [^if.else, i32 0] [^if.else1, i32 %10] [^if.else2, i32 %16];
    ret i32 %15;
  ^if.else2:
    i32 %16 = ztrunc i32 %13 to i32;
    ubr ^b;
}
func @_Z8funcLeafi(i32 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i1 %1 = scmp gt i32 %0, i32 0;
    cbr i1 %1(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %2 = phi [^entry, i32 %0] [^if.then, i32 %4];
    i32 %3 = ztrunc i32 %2 to i32;
    i32 %4 = strunc i32 %3 to i32;
    i1 %5 = scmp gt i32 %4, i32 0;
    cbr i1 %5(prob = 0.5), ^if.then, ^if.else1;
  ^if.else:
    i1 %6 = scmp lt i32 %0, i32 0;
    cbr i1 %6(prob = 0.5), ^if.then1, ^b;
  ^if.else1:
    i32 %7 = ztrunc i32 %4 to i32;
    ubr ^b;
  ^if.then1:
    i32 %8 = phi [^if.else, i32 %0] [^if.then1, i32 %10];
    i32 %9 = ztrunc i32 %8 to i32;
    i32 %10 = strunc i32 %9 to i32;
    i1 %11 = scmp lt i32 %10, i32 0;
    cbr i1 %11(prob = 0.5), ^if.then1, ^if.else2;
  ^b:
    i32 %12 = phi [^if.else, i32 0] [^if.else1, i32 %7] [^if.else2, i32 %13];
    ret i32 %12;
  ^if.else2:
    i32 %13 = ztrunc i32 %10 to i32;
    ubr ^b;
}
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ubr ^if.then;
  ^if.then:
    i32 %0 = phi [^entry, i32 200000] [^if.then, i32 %2];
    i32 %1 = ztrunc i32 %0 to i32;
    i32 %2 = strunc i32 %1 to i32;
    i1 %3 = scmp gt i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
  ^if.else:
    i32 %4 = ztrunc i32 %2 to i32;
    ubr ^if.then1;
  ^if.then1:
    i32 %5 = phi [^if.else, i32 400001] [^if.then1, i32 %7];
    i32 %6 = ztrunc i32 %5 to i32;
    i32 %7 = strunc i32 %6 to i32;
    i1 %8 = scmp gt i32 %7, i32 0;
    cbr i1 %8(prob = 0.5), ^if.then1, ^if.else1;
  ^if.else1:
    i32 %9 = ztrunc i32 %7 to i32;
    i32 %10 = add i32 %4, i32 %9;
    ubr ^if.else2;
  ^if.else2:
    i32 %11 = phi [^if.else1, i32 299999] [^b1, i32 %51];
    i32 %12 = phi [^if.else1, i32 %10] [^b1, i32 %50];
    i32 %13 = ztrunc i32 %11 to i32;
    i32 %14 = strunc i32 %13 to i32;
    i32 %15 = add i32 %14, i32 -100000;
    i32 %16 = ztrunc i32 %15 to i32;
    i32 %17 = strunc i32 %16 to i32;
    i1 %18 = scmp gt i32 %17, i32 0;
    cbr i1 %18(prob = 0.5), ^if.then2, ^if.else3;
  ^if.then2:
    i32 %19 = phi [^if.else2, i32 %17] [^if.then2, i32 %21];
    i32 %20 = ztrunc i32 %19 to i32;
    i32 %21 = strunc i32 %20 to i32;
    i1 %22 = scmp gt i32 %21, i32 0;
    cbr i1 %22(prob = 0.5), ^if.then2, ^if.else4;
  ^if.else3:
    i1 %23 = scmp lt i32 %17, i32 0;
    cbr i1 %23(prob = 0.5), ^if.then3, ^b;
  ^if.else4:
    i32 %24 = ztrunc i32 %21 to i32;
    ubr ^b;
  ^if.then3:
    i32 %25 = phi [^if.else3, i32 %17] [^if.then3, i32 %27];
    i32 %26 = ztrunc i32 %25 to i32;
    i32 %27 = strunc i32 %26 to i32;
    i1 %28 = scmp lt i32 %27, i32 0;
    cbr i1 %28(prob = 0.5), ^if.then3, ^if.else5;
  ^b:
    i32 %29 = phi [^if.else3, i32 0] [^if.else4, i32 %24] [^if.else5, i32 %37];
    i32 %30 = add i32 %14, i32 1;
    i32 %31 = ztrunc i32 %30 to i32;
    i32 %32 = strunc i32 %31 to i32;
    i32 %33 = add i32 %32, i32 100000;
    i32 %34 = ztrunc i32 %33 to i32;
    i32 %35 = strunc i32 %34 to i32;
    i1 %36 = scmp gt i32 %35, i32 0;
    cbr i1 %36(prob = 0.5), ^if.then4, ^if.else6;
  ^if.else5:
    i32 %37 = ztrunc i32 %27 to i32;
    ubr ^b;
  ^if.then4:
    i32 %38 = phi [^b, i32 %35] [^if.then4, i32 %40];
    i32 %39 = ztrunc i32 %38 to i32;
    i32 %40 = strunc i32 %39 to i32;
    i1 %41 = scmp gt i32 %40, i32 0;
    cbr i1 %41(prob = 0.5), ^if.then4, ^if.else7;
  ^if.else6:
    i1 %42 = scmp lt i32 %35, i32 0;
    cbr i1 %42(prob = 0.5), ^if.then5, ^b1;
  ^if.else7:
    i32 %43 = ztrunc i32 %40 to i32;
    ubr ^b1;
  ^if.then5:
    i32 %44 = phi [^if.else6, i32 %35] [^if.then5, i32 %46];
    i32 %45 = ztrunc i32 %44 to i32;
    i32 %46 = strunc i32 %45 to i32;
    i1 %47 = scmp lt i32 %46, i32 0;
    cbr i1 %47(prob = 0.5), ^if.then5, ^if.else8;
  ^b1:
    i32 %48 = phi [^if.else6, i32 0] [^if.else7, i32 %43] [^if.else8, i32 %53];
    i32 %49 = add i32 %12, i32 %29;
    i32 %50 = add i32 %48, i32 %49;
    i32 %51 = add i32 %14, i32 -1;
    i1 %52 = ucmp eq i32 %13, i32 0;
    cbr i1 %52(prob = 0.5), ^if.then6, ^if.else2;
  ^if.else8:
    i32 %53 = ztrunc i32 %46 to i32;
    ubr ^b1;
  ^if.then6:
    i32 %54 = strunc i32 %50 to i32;
    ret i32 %54;
}
i32* @factor = 3;
