func @fib(i32 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i1 %1 = icmp slt i32 %0, i32 2;
    cbr i1 %1(prob = 0.5), ^b, ^if.else;
  ^if.else:
    i32 %2 = add i32 %0, i32 -2;
    i32 %3 = strunc i32 %2 to i32;
    i1 %4 = icmp slt i32 %3, i32 2;
    cbr i1 %4(prob = 0.5), ^if.else2, ^if.else1;
  ^b:
    i32 %5 = phi [^entry, i32 1] [^if.else3, i32 %24];
    ret i32 %5;
  ^if.else1:
    i32 %6 = add i32 %3, i32 -2;
    i32 %7 = ztrunc i32 %6 to i32;
    i32 %8 = call (i32) -> i32 @fib(i32 %7);
    i32 %9 = strunc i32 %8 to i32;
    i32 %10 = add i32 %3, i32 -1;
    i32 %11 = ztrunc i32 %10 to i32;
    i32 %12 = call (i32) -> i32 @fib(i32 %11);
    i32 %13 = strunc i32 %12 to i32;
    i32 %14 = add i32 %9, i32 %13;
    i32 %15 = ztrunc i32 %14 to i32;
    ubr ^if.else2;
  ^if.else2:
    i32 %16 = phi [^if.else, i32 1] [^if.else1, i32 %15];
    i32 %17 = add i32 %0, i32 -1;
    i32 %18 = strunc i32 %17 to i32;
    i1 %19 = icmp slt i32 %18, i32 2;
    i32 %20 = strunc i32 %16 to i32;
    cbr i1 %19(prob = 0.5), ^if.else3, ^if.else4;
  ^if.else3:
    i32 %21 = phi [^if.else2, i32 1] [^if.else4, i32 %34];
    i32 %22 = strunc i32 %21 to i32;
    i32 %23 = add i32 %20, i32 %22;
    i32 %24 = ztrunc i32 %23 to i32;
    ubr ^b;
  ^if.else4:
    i32 %25 = add i32 %18, i32 -2;
    i32 %26 = ztrunc i32 %25 to i32;
    i32 %27 = call (i32) -> i32 @fib(i32 %26);
    i32 %28 = strunc i32 %27 to i32;
    i32 %29 = add i32 %18, i32 -1;
    i32 %30 = ztrunc i32 %29 to i32;
    i32 %31 = call (i32) -> i32 @fib(i32 %30);
    i32 %32 = strunc i32 %31 to i32;
    i32 %33 = add i32 %28, i32 %32;
    i32 %34 = ztrunc i32 %33 to i32;
    ubr ^if.else3;
}
