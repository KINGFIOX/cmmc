func @Ack(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^0:
    ubr ^1;
  ^1:
    i32 %2 = phi [^0, i32 %var1] [^if.else1, i32 %11];
    i32 %3 = phi [^0, i32 %var0] [^if.else1, i32 %12];
    ubr ^entry;
  ^entry:
    i32 %4 = phi [^1, i32 %2] [^if.then1, i32 1];
    i32 %5 = phi [^1, i32 %3] [^if.then1, i32 %9];
    i1 %6 = ucmp eq i32 %5, i32 0;
    cbr i1 %6(prob = 0.5), ^if.then, ^if.else;
  ^if.else:
    i1 %7 = ucmp eq i32 %4, i32 0;
    cbr i1 %7(prob = 0.5), ^if.then1, ^if.else1;
  ^if.then:
    i32 %8 = add i32 %4, i32 1;
    ret i32 %8;
  ^if.then1:
    i32 %9 = add i32 %5, i32 -1;
    ubr ^entry;
  ^if.else1:
    i32 %10 = add i32 %4, i32 -1;
    i32 %11 = call (i32, i32) -> i32 @Ack(i32 %5, i32 %10);
    i32 %12 = add i32 %5, i32 -1;
    ubr ^1;
}
