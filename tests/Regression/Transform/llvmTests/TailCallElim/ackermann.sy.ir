func @Ack(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^0:
    ubr ^entry;
  ^entry:
    i32 %1 = phi [^0, i32 %var1] [^if.then1, i32 1] [^if.else1, i32 %8];
    i32 %2 = phi [^0, i32 %var0] [^if.then1, i32 %6] [^if.else1, i32 %9];
    i1 %3 = ucmp eq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
  ^if.else:
    i1 %4 = ucmp eq i32 %1, i32 0;
    cbr i1 %4(prob = 0.5), ^if.then1, ^if.else1;
  ^if.then:
    i32 %5 = add i32 %1, i32 1;
    ret i32 %5;
  ^if.then1:
    i32 %6 = add i32 %2, i32 -1;
    ubr ^entry;
  ^if.else1:
    i32 %7 = add i32 %1, i32 -1;
    i32 %8 = call (i32, i32) -> i32 @Ack(i32 %2, i32 %7);
    i32 %9 = add i32 %2, i32 -1;
    ubr ^entry;
}
