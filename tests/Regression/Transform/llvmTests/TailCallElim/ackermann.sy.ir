func @Ack(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^0:
    [4084 * i32]* %1 = ptrcast [4084 * i32]* @lut_Ack to [4084 * i32]*;
    i32* %2 = call ([4084 * i32]*, i32, i32) -> i32* @cmmcCacheLookup([4084 * i32]* %1, i32 %var0, i32 %var1);
    i32* %3 = getelementptr &(i32* %2)[i64 3];
    i32 %4 = load i32* %3;
    i1 %5 = icmp neq i32 %4, i32 0;
    i32* %6 = getelementptr &(i32* %2)[i64 2];
    cbr i1 %5(prob = 0.9), ^b, ^entry;
  ^b:
    i32 %7 = load i32* %6;
    ubr ^b1;
  ^entry:
    i32 %8 = phi [^0, i32 %var1] [^if.else, i32 1];
    i32 %9 = phi [^0, i32 %var0] [^if.else, i32 %13];
    i1 %10 = icmp eq i32 %9, i32 0;
    cbr i1 %10(prob = 0.49), ^if.then, ^if.else;
  ^if.then:
    i32 %11 = add i32 %8, i32 1;
    store i32* %3 with i32 1;
    store i32* %6 with i32 %11;
    ubr ^b1;
  ^if.else:
    i1 %12 = icmp eq i32 %8, i32 0;
    i32 %13 = add i32 %9, i32 -1;
    cbr i1 %12(prob = 0.49), ^entry, ^if.else1;
  ^b1:
    i32 %14 = phi [^b, i32 %7] [^if.then, i32 %11] [^if.else1, i32 %17];
    ret i32 %14;
  ^if.else1:
    i32 %15 = add i32 %8, i32 -1;
    i32 %16 = call (i32, i32) -> i32 @Ack(i32 %9, i32 %15);
    i32 %17 = call (i32, i32) -> i32 @Ack(i32 %13, i32 %16);
    store i32* %3 with i32 1;
    store i32* %6 with i32 %17;
    ubr ^b1;
}
internal func @cmmcCacheLookup([4084 * i32]*, i32, i32) -> i32* { Builtin };
internal [4084 * i32]* @lut_Ack, align 8;
