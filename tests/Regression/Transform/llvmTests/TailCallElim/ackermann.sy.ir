func @Ack(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^0:
    ubr ^entry;
  ^entry:
    i32 %1 = phi [^0, i32 %var1] [^if.else, i32 1] [^if.then4, i32 %36] [^if.then10, i32 %85];
    i32 %2 = phi [^0, i32 %var0] [^if.else, i32 %6] [^if.then4, i32 %21] [^if.then10, i32 %21];
    i1 %3 = icmp eq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %4 = add i32 %1, i32 1;
    ubr ^b;
  ^if.else:
    i1 %5 = icmp eq i32 %1, i32 0;
    i32 %6 = add i32 %2, i32 -1;
    cbr i1 %5(prob = 0.5), ^entry, ^if.else1;
  ^if.else1:
    i32 %7 = add i32 %1, i32 -1;
    ubr ^entry1;
  ^b:
    i32 %8 = phi [^if.then, i32 %4] [^if.then2, i32 %19];
    ret i32 %8;
  ^entry1:
    i32 %9 = phi [^if.else1, i32 %7] [^if.else2, i32 1];
    i32 %10 = phi [^if.else1, i32 %2] [^if.else2, i32 %14];
    i1 %11 = icmp eq i32 %10, i32 0;
    cbr i1 %11(prob = 0.5), ^if.then1, ^if.else2;
  ^if.then1:
    i32 %12 = add i32 %9, i32 1;
    ubr ^entry2;
  ^if.else2:
    i1 %13 = icmp eq i32 %9, i32 0;
    i32 %14 = add i32 %10, i32 -1;
    cbr i1 %13(prob = 0.5), ^entry1, ^if.else3;
  ^if.else3:
    i32 %15 = add i32 %9, i32 -1;
    ubr ^entry3;
  ^entry2:
    i32 %16 = phi [^if.then1, i32 %12] [^if.else4, i32 1] [^if.then5, i32 %37] [^if.then11, i32 %86];
    i32 %17 = phi [^if.then1, i32 %6] [^if.else4, i32 %21] [^if.then5, i32 %6] [^if.then11, i32 %6];
    i1 %18 = icmp eq i32 %17, i32 0;
    cbr i1 %18(prob = 0.5), ^if.then2, ^if.else4;
  ^if.then2:
    i32 %19 = add i32 %16, i32 1;
    ubr ^b;
  ^if.else4:
    i1 %20 = icmp eq i32 %16, i32 0;
    i32 %21 = add i32 %17, i32 -1;
    cbr i1 %20(prob = 0.5), ^entry2, ^if.else5;
  ^entry3:
    i32 %22 = phi [^if.else3, i32 %15] [^if.else6, i32 1] [^if.else17, i32 %72];
    i32 %23 = phi [^if.else3, i32 %10] [^if.else6, i32 %28] [^if.else17, i32 %66];
    i1 %24 = icmp eq i32 %23, i32 0;
    cbr i1 %24(prob = 0.5), ^if.then3, ^if.else6;
  ^if.else5:
    i32 %25 = add i32 %16, i32 -1;
    ubr ^entry4;
  ^if.then3:
    i32 %26 = add i32 %22, i32 1;
    ubr ^entry5;
  ^if.else6:
    i1 %27 = icmp eq i32 %22, i32 0;
    i32 %28 = add i32 %23, i32 -1;
    cbr i1 %27(prob = 0.5), ^entry3, ^if.else7;
  ^if.else7:
    i32 %29 = add i32 %22, i32 -1;
    ubr ^entry6;
  ^entry4:
    i32 %30 = phi [^if.else5, i32 %25] [^if.else8, i32 1] [^if.else22, i32 %92];
    i32 %31 = phi [^if.else5, i32 %17] [^if.else8, i32 %39] [^if.else22, i32 %88];
    i1 %32 = icmp eq i32 %31, i32 0;
    cbr i1 %32(prob = 0.5), ^if.then4, ^if.else8;
  ^entry5:
    i32 %33 = phi [^if.then3, i32 %26] [^if.else9, i32 1] [^if.then7, i32 %62] [^if.else23, i32 %94];
    i32 %34 = phi [^if.then3, i32 %14] [^if.else9, i32 %41] [^if.then7, i32 %14] [^if.else23, i32 %90];
    i1 %35 = icmp eq i32 %34, i32 0;
    cbr i1 %35(prob = 0.5), ^if.then5, ^if.else9;
  ^if.then4:
    i32 %36 = add i32 %30, i32 1;
    ubr ^entry;
  ^if.then5:
    i32 %37 = add i32 %33, i32 1;
    ubr ^entry2;
  ^if.else8:
    i1 %38 = icmp eq i32 %30, i32 0;
    i32 %39 = add i32 %31, i32 -1;
    cbr i1 %38(prob = 0.5), ^entry4, ^if.else10;
  ^if.else9:
    i1 %40 = icmp eq i32 %33, i32 0;
    i32 %41 = add i32 %34, i32 -1;
    cbr i1 %40(prob = 0.5), ^entry5, ^if.else11;
  ^entry6:
    i32 %42 = phi [^if.else7, i32 %29] [^if.else12, i32 1];
    i32 %43 = phi [^if.else7, i32 %23] [^if.else12, i32 %49];
    i1 %44 = icmp eq i32 %43, i32 0;
    cbr i1 %44(prob = 0.5), ^if.then6, ^if.else12;
  ^if.then6:
    i32 %45 = add i32 %42, i32 1;
    ubr ^entry7;
  ^if.else10:
    i32 %46 = add i32 %30, i32 -1;
    ubr ^entry8;
  ^if.else11:
    i32 %47 = add i32 %33, i32 -1;
    ubr ^entry9;
  ^if.else12:
    i1 %48 = icmp eq i32 %42, i32 0;
    i32 %49 = add i32 %43, i32 -1;
    cbr i1 %48(prob = 0.5), ^entry6, ^if.else13;
  ^if.else13:
    i32 %50 = add i32 %42, i32 -1;
    i32 %51 = call (i32, i32) -> i32 @Ack(i32 %43, i32 %50);
    i32 %52 = call (i32, i32) -> i32 @Ack(i32 %49, i32 %51);
    ubr ^entry7;
  ^entry7:
    i32 %53 = phi [^if.then6, i32 %45] [^if.else13, i32 %52] [^if.else14, i32 1];
    i32 %54 = phi [^if.then6, i32 %28] [^if.else13, i32 %28] [^if.else14, i32 %66];
    i1 %55 = icmp eq i32 %54, i32 0;
    cbr i1 %55(prob = 0.5), ^if.then7, ^if.else14;
  ^entry8:
    i32 %56 = phi [^if.else10, i32 %46] [^if.else15, i32 1];
    i32 %57 = phi [^if.else10, i32 %31] [^if.else15, i32 %68];
    i1 %58 = icmp eq i32 %57, i32 0;
    cbr i1 %58(prob = 0.5), ^if.then8, ^if.else15;
  ^entry9:
    i32 %59 = phi [^if.else11, i32 %47] [^if.else16, i32 1];
    i32 %60 = phi [^if.else11, i32 %34] [^if.else16, i32 %70];
    i1 %61 = icmp eq i32 %60, i32 0;
    cbr i1 %61(prob = 0.5), ^if.then9, ^if.else16;
  ^if.then7:
    i32 %62 = add i32 %53, i32 1;
    ubr ^entry5;
  ^if.then8:
    i32 %63 = add i32 %56, i32 1;
    ubr ^entry10;
  ^if.then9:
    i32 %64 = add i32 %59, i32 1;
    ubr ^entry11;
  ^if.else14:
    i1 %65 = icmp eq i32 %53, i32 0;
    i32 %66 = add i32 %54, i32 -1;
    cbr i1 %65(prob = 0.5), ^entry7, ^if.else17;
  ^if.else15:
    i1 %67 = icmp eq i32 %56, i32 0;
    i32 %68 = add i32 %57, i32 -1;
    cbr i1 %67(prob = 0.5), ^entry8, ^if.else18;
  ^if.else16:
    i1 %69 = icmp eq i32 %59, i32 0;
    i32 %70 = add i32 %60, i32 -1;
    cbr i1 %69(prob = 0.5), ^entry9, ^if.else19;
  ^if.else17:
    i32 %71 = add i32 %53, i32 -1;
    i32 %72 = call (i32, i32) -> i32 @Ack(i32 %54, i32 %71);
    ubr ^entry3;
  ^if.else18:
    i32 %73 = add i32 %56, i32 -1;
    i32 %74 = call (i32, i32) -> i32 @Ack(i32 %57, i32 %73);
    i32 %75 = call (i32, i32) -> i32 @Ack(i32 %68, i32 %74);
    ubr ^entry10;
  ^entry10:
    i32 %76 = phi [^if.then8, i32 %63] [^if.else18, i32 %75] [^if.else20, i32 1];
    i32 %77 = phi [^if.then8, i32 %39] [^if.else18, i32 %39] [^if.else20, i32 %88];
    i1 %78 = icmp eq i32 %77, i32 0;
    cbr i1 %78(prob = 0.5), ^if.then10, ^if.else20;
  ^if.else19:
    i32 %79 = add i32 %59, i32 -1;
    i32 %80 = call (i32, i32) -> i32 @Ack(i32 %60, i32 %79);
    i32 %81 = call (i32, i32) -> i32 @Ack(i32 %70, i32 %80);
    ubr ^entry11;
  ^entry11:
    i32 %82 = phi [^if.then9, i32 %64] [^if.else19, i32 %81] [^if.else21, i32 1];
    i32 %83 = phi [^if.then9, i32 %41] [^if.else19, i32 %41] [^if.else21, i32 %90];
    i1 %84 = icmp eq i32 %83, i32 0;
    cbr i1 %84(prob = 0.5), ^if.then11, ^if.else21;
  ^if.then10:
    i32 %85 = add i32 %76, i32 1;
    ubr ^entry;
  ^if.then11:
    i32 %86 = add i32 %82, i32 1;
    ubr ^entry2;
  ^if.else20:
    i1 %87 = icmp eq i32 %76, i32 0;
    i32 %88 = add i32 %77, i32 -1;
    cbr i1 %87(prob = 0.5), ^entry10, ^if.else22;
  ^if.else21:
    i1 %89 = icmp eq i32 %82, i32 0;
    i32 %90 = add i32 %83, i32 -1;
    cbr i1 %89(prob = 0.5), ^entry11, ^if.else23;
  ^if.else22:
    i32 %91 = add i32 %76, i32 -1;
    i32 %92 = call (i32, i32) -> i32 @Ack(i32 %77, i32 %91);
    ubr ^entry4;
  ^if.else23:
    i32 %93 = add i32 %82, i32 -1;
    i32 %94 = call (i32, i32) -> i32 @Ack(i32 %83, i32 %93);
    ubr ^entry5;
}
