func @fib(i32 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i1 %1 = scmp lt i32 %0, i32 2;
    cbr i1 %1(prob = 0.5), ^b, ^if.else;
  ^if.else:
    i32 %2 = add i32 %0, i32 -2;
    i32 %3 = ztrunc i32 %2 to i32;
    i32 %4 = strunc i32 %3 to i32;
    i1 %5 = scmp lt i32 %4, i32 2;
    cbr i1 %5(prob = 0.5), ^if.else2, ^if.else1;
  ^b:
    i32 %6 = phi [^entry, i32 1] [^if.else3, i32 %26];
    ret i32 %6;
  ^if.else1:
    i32 %7 = add i32 %4, i32 -2;
    i32 %8 = ztrunc i32 %7 to i32;
    i32 %9 = call (i32) -> i32 @fib(i32 %8);
    i32 %10 = strunc i32 %9 to i32;
    i32 %11 = add i32 %4, i32 -1;
    i32 %12 = ztrunc i32 %11 to i32;
    i32 %13 = call (i32) -> i32 @fib(i32 %12);
    i32 %14 = strunc i32 %13 to i32;
    i32 %15 = add i32 %10, i32 %14;
    i32 %16 = ztrunc i32 %15 to i32;
    ubr ^if.else2;
  ^if.else2:
    i32 %17 = phi [^if.else, i32 1] [^if.else1, i32 %16];
    i32 %18 = add i32 %0, i32 -1;
    i32 %19 = ztrunc i32 %18 to i32;
    i32 %20 = strunc i32 %19 to i32;
    i1 %21 = scmp lt i32 %20, i32 2;
    i32 %22 = strunc i32 %17 to i32;
    cbr i1 %21(prob = 0.5), ^if.else3, ^if.else4;
  ^if.else3:
    i32 %23 = phi [^if.else2, i32 1] [^if.else4, i32 %36];
    i32 %24 = strunc i32 %23 to i32;
    i32 %25 = add i32 %22, i32 %24;
    i32 %26 = ztrunc i32 %25 to i32;
    ubr ^b;
  ^if.else4:
    i32 %27 = add i32 %20, i32 -2;
    i32 %28 = ztrunc i32 %27 to i32;
    i32 %29 = call (i32) -> i32 @fib(i32 %28);
    i32 %30 = strunc i32 %29 to i32;
    i32 %31 = add i32 %20, i32 -1;
    i32 %32 = ztrunc i32 %31 to i32;
    i32 %33 = call (i32) -> i32 @fib(i32 %32);
    i32 %34 = strunc i32 %33 to i32;
    i32 %35 = add i32 %30, i32 %34;
    i32 %36 = ztrunc i32 %35 to i32;
    ubr ^if.else3;
}
