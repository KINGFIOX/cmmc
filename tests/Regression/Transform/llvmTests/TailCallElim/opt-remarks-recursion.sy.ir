func @fib(i32 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    [4084 * i32]* %0 = ptrcast [4084 * i32]* @lut_fib to [4084 * i32]*;
    i32* %1 = call ([4084 * i32]*, i32, i32) -> i32* @cmmcCacheLookup([4084 * i32]* %0, i32 %var0, i32 0);
    i32* %2 = getelementptr &(i32* %1)[i64 3];
    i32 %3 = load i32* %2;
    i1 %4 = icmp neq i32 %3, i32 0;
    i32* %5 = getelementptr &(i32* %1)[i64 2];
    cbr i1 %4(prob = 0.9), ^b, ^entry1;
  ^b:
    i32 %6 = load i32* %5;
    ubr ^b2;
  ^entry1:
    i32 %7 = strunc i32 %var0 to i32;
    i1 %8 = icmp slt i32 %7, i32 2;
    cbr i1 %8(prob = 0.5), ^b1, ^if.else;
  ^b1:
    store i32* %2 with i32 1;
    store i32* %5 with i32 1;
    ubr ^b2;
  ^if.else:
    i32 %9 = add i32 %7, i32 -2;
    i32 %10 = ztrunc i32 %9 to i32;
    i32 %11 = call (i32) -> i32 @fib(i32 %10);
    i32 %12 = strunc i32 %11 to i32;
    i32 %13 = add i32 %7, i32 -1;
    i32 %14 = ztrunc i32 %13 to i32;
    i32 %15 = call (i32) -> i32 @fib(i32 %14);
    i32 %16 = strunc i32 %15 to i32;
    i32 %17 = add i32 %12, i32 %16;
    i32 %18 = ztrunc i32 %17 to i32;
    store i32* %2 with i32 1;
    store i32* %5 with i32 %18;
    ubr ^b2;
  ^b2:
    i32 %19 = phi [^b, i32 %6] [^b1, i32 1] [^if.else, i32 %18];
    ret i32 %19;
}
internal func @cmmcCacheLookup([4084 * i32]*, i32, i32) -> i32* { Builtin };
[4084 * i32]* @lut_fib, align 8;
