func @fib(i32 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i1 %1 = icmp slt i32 %0, i32 2;
    cbr i1 %1(prob = 0.5), ^b, ^if.else;
  ^if.else:
    i32 %2 = add i32 %0, i32 -2;
    i32 %3 = strunc i32 %2 to i32;
    i1 %4 = icmp slt i32 %3, i32 2;
    cbr i1 %4(prob = 0.5), ^if.else1, ^if.else2;
  ^b:
    i32 %5 = phi [^entry, i32 1] [^if.else3, i32 %17];
    ret i32 %5;
  ^if.else1:
    i32 %6 = phi [^if.else, i32 1] [^b2, i32 %32];
    i32 %7 = add i32 %0, i32 -1;
    i32 %8 = strunc i32 %7 to i32;
    i1 %9 = icmp slt i32 %8, i32 2;
    i32 %10 = strunc i32 %6 to i32;
    cbr i1 %9(prob = 0.5), ^if.else3, ^if.else4;
  ^if.else2:
    i32 %11 = add i32 %3, i32 -2;
    i32 %12 = strunc i32 %11 to i32;
    i1 %13 = icmp slt i32 %12, i32 2;
    cbr i1 %13(prob = 0.5), ^b1, ^if.else5;
  ^if.else3:
    i32 %14 = phi [^if.else1, i32 1] [^b4, i32 %62];
    i32 %15 = strunc i32 %14 to i32;
    i32 %16 = add i32 %10, i32 %15;
    i32 %17 = ztrunc i32 %16 to i32;
    ubr ^b;
  ^if.else4:
    i32 %18 = add i32 %8, i32 -2;
    i32 %19 = strunc i32 %18 to i32;
    i1 %20 = icmp slt i32 %19, i32 2;
    cbr i1 %20(prob = 0.5), ^b3, ^if.else8;
  ^b1:
    i32 %21 = phi [^if.else2, i32 1] [^if.else10, i32 %66];
    i32 %22 = add i32 %3, i32 -1;
    i32 %23 = strunc i32 %22 to i32;
    i1 %24 = icmp slt i32 %23, i32 2;
    i32 %25 = strunc i32 %21 to i32;
    cbr i1 %24(prob = 0.5), ^b2, ^if.else9;
  ^if.else5:
    i32 %26 = add i32 %12, i32 -2;
    i32 %27 = strunc i32 %26 to i32;
    i1 %28 = icmp slt i32 %27, i32 2;
    cbr i1 %28(prob = 0.5), ^if.else7, ^if.else6;
  ^b2:
    i32 %29 = phi [^b1, i32 1] [^if.else18, i32 %117];
    i32 %30 = strunc i32 %29 to i32;
    i32 %31 = add i32 %25, i32 %30;
    i32 %32 = ztrunc i32 %31 to i32;
    ubr ^if.else1;
  ^b3:
    i32 %33 = phi [^if.else4, i32 1] [^if.else17, i32 %113];
    i32 %34 = add i32 %8, i32 -1;
    i32 %35 = strunc i32 %34 to i32;
    i1 %36 = icmp slt i32 %35, i32 2;
    i32 %37 = strunc i32 %33 to i32;
    cbr i1 %36(prob = 0.5), ^b4, ^if.else16;
  ^if.else6:
    i32 %38 = add i32 %27, i32 -2;
    i32 %39 = ztrunc i32 %38 to i32;
    i32 %40 = call (i32) -> i32 @fib(i32 %39);
    i32 %41 = strunc i32 %40 to i32;
    i32 %42 = add i32 %27, i32 -1;
    i32 %43 = ztrunc i32 %42 to i32;
    i32 %44 = call (i32) -> i32 @fib(i32 %43);
    i32 %45 = strunc i32 %44 to i32;
    i32 %46 = add i32 %41, i32 %45;
    i32 %47 = ztrunc i32 %46 to i32;
    ubr ^if.else7;
  ^if.else7:
    i32 %48 = phi [^if.else5, i32 1] [^if.else6, i32 %47];
    i32 %49 = add i32 %12, i32 -1;
    i32 %50 = strunc i32 %49 to i32;
    i1 %51 = icmp slt i32 %50, i32 2;
    i32 %52 = strunc i32 %48 to i32;
    cbr i1 %51(prob = 0.5), ^if.else10, ^if.else11;
  ^if.else8:
    i32 %53 = add i32 %19, i32 -2;
    i32 %54 = strunc i32 %53 to i32;
    i1 %55 = icmp slt i32 %54, i32 2;
    cbr i1 %55(prob = 0.5), ^if.else14, ^if.else12;
  ^if.else9:
    i32 %56 = add i32 %23, i32 -2;
    i32 %57 = strunc i32 %56 to i32;
    i1 %58 = icmp slt i32 %57, i32 2;
    cbr i1 %58(prob = 0.5), ^if.else15, ^if.else13;
  ^b4:
    i32 %59 = phi [^b3, i32 1] [^if.else23, i32 %156];
    i32 %60 = strunc i32 %59 to i32;
    i32 %61 = add i32 %37, i32 %60;
    i32 %62 = ztrunc i32 %61 to i32;
    ubr ^if.else3;
  ^if.else10:
    i32 %63 = phi [^if.else7, i32 1] [^if.else11, i32 %76];
    i32 %64 = strunc i32 %63 to i32;
    i32 %65 = add i32 %52, i32 %64;
    i32 %66 = ztrunc i32 %65 to i32;
    ubr ^b1;
  ^if.else11:
    i32 %67 = add i32 %50, i32 -2;
    i32 %68 = ztrunc i32 %67 to i32;
    i32 %69 = call (i32) -> i32 @fib(i32 %68);
    i32 %70 = strunc i32 %69 to i32;
    i32 %71 = add i32 %50, i32 -1;
    i32 %72 = ztrunc i32 %71 to i32;
    i32 %73 = call (i32) -> i32 @fib(i32 %72);
    i32 %74 = strunc i32 %73 to i32;
    i32 %75 = add i32 %70, i32 %74;
    i32 %76 = ztrunc i32 %75 to i32;
    ubr ^if.else10;
  ^if.else12:
    i32 %77 = add i32 %54, i32 -2;
    i32 %78 = ztrunc i32 %77 to i32;
    i32 %79 = call (i32) -> i32 @fib(i32 %78);
    i32 %80 = strunc i32 %79 to i32;
    i32 %81 = add i32 %54, i32 -1;
    i32 %82 = ztrunc i32 %81 to i32;
    i32 %83 = call (i32) -> i32 @fib(i32 %82);
    i32 %84 = strunc i32 %83 to i32;
    i32 %85 = add i32 %80, i32 %84;
    i32 %86 = ztrunc i32 %85 to i32;
    ubr ^if.else14;
  ^if.else13:
    i32 %87 = add i32 %57, i32 -2;
    i32 %88 = ztrunc i32 %87 to i32;
    i32 %89 = call (i32) -> i32 @fib(i32 %88);
    i32 %90 = strunc i32 %89 to i32;
    i32 %91 = add i32 %57, i32 -1;
    i32 %92 = ztrunc i32 %91 to i32;
    i32 %93 = call (i32) -> i32 @fib(i32 %92);
    i32 %94 = strunc i32 %93 to i32;
    i32 %95 = add i32 %90, i32 %94;
    i32 %96 = ztrunc i32 %95 to i32;
    ubr ^if.else15;
  ^if.else14:
    i32 %97 = phi [^if.else8, i32 1] [^if.else12, i32 %86];
    i32 %98 = add i32 %19, i32 -1;
    i32 %99 = strunc i32 %98 to i32;
    i1 %100 = icmp slt i32 %99, i32 2;
    i32 %101 = strunc i32 %97 to i32;
    cbr i1 %100(prob = 0.5), ^if.else17, ^if.else19;
  ^if.else15:
    i32 %102 = phi [^if.else9, i32 1] [^if.else13, i32 %96];
    i32 %103 = add i32 %23, i32 -1;
    i32 %104 = strunc i32 %103 to i32;
    i1 %105 = icmp slt i32 %104, i32 2;
    i32 %106 = strunc i32 %102 to i32;
    cbr i1 %105(prob = 0.5), ^if.else18, ^if.else20;
  ^if.else16:
    i32 %107 = add i32 %35, i32 -2;
    i32 %108 = strunc i32 %107 to i32;
    i1 %109 = icmp slt i32 %108, i32 2;
    cbr i1 %109(prob = 0.5), ^if.else22, ^if.else21;
  ^if.else17:
    i32 %110 = phi [^if.else14, i32 1] [^if.else19, i32 %127];
    i32 %111 = strunc i32 %110 to i32;
    i32 %112 = add i32 %101, i32 %111;
    i32 %113 = ztrunc i32 %112 to i32;
    ubr ^b3;
  ^if.else18:
    i32 %114 = phi [^if.else15, i32 1] [^if.else20, i32 %137];
    i32 %115 = strunc i32 %114 to i32;
    i32 %116 = add i32 %106, i32 %115;
    i32 %117 = ztrunc i32 %116 to i32;
    ubr ^b2;
  ^if.else19:
    i32 %118 = add i32 %99, i32 -2;
    i32 %119 = ztrunc i32 %118 to i32;
    i32 %120 = call (i32) -> i32 @fib(i32 %119);
    i32 %121 = strunc i32 %120 to i32;
    i32 %122 = add i32 %99, i32 -1;
    i32 %123 = ztrunc i32 %122 to i32;
    i32 %124 = call (i32) -> i32 @fib(i32 %123);
    i32 %125 = strunc i32 %124 to i32;
    i32 %126 = add i32 %121, i32 %125;
    i32 %127 = ztrunc i32 %126 to i32;
    ubr ^if.else17;
  ^if.else20:
    i32 %128 = add i32 %104, i32 -2;
    i32 %129 = ztrunc i32 %128 to i32;
    i32 %130 = call (i32) -> i32 @fib(i32 %129);
    i32 %131 = strunc i32 %130 to i32;
    i32 %132 = add i32 %104, i32 -1;
    i32 %133 = ztrunc i32 %132 to i32;
    i32 %134 = call (i32) -> i32 @fib(i32 %133);
    i32 %135 = strunc i32 %134 to i32;
    i32 %136 = add i32 %131, i32 %135;
    i32 %137 = ztrunc i32 %136 to i32;
    ubr ^if.else18;
  ^if.else21:
    i32 %138 = add i32 %108, i32 -2;
    i32 %139 = ztrunc i32 %138 to i32;
    i32 %140 = call (i32) -> i32 @fib(i32 %139);
    i32 %141 = strunc i32 %140 to i32;
    i32 %142 = add i32 %108, i32 -1;
    i32 %143 = ztrunc i32 %142 to i32;
    i32 %144 = call (i32) -> i32 @fib(i32 %143);
    i32 %145 = strunc i32 %144 to i32;
    i32 %146 = add i32 %141, i32 %145;
    i32 %147 = ztrunc i32 %146 to i32;
    ubr ^if.else22;
  ^if.else22:
    i32 %148 = phi [^if.else16, i32 1] [^if.else21, i32 %147];
    i32 %149 = add i32 %35, i32 -1;
    i32 %150 = strunc i32 %149 to i32;
    i1 %151 = icmp slt i32 %150, i32 2;
    i32 %152 = strunc i32 %148 to i32;
    cbr i1 %151(prob = 0.5), ^if.else23, ^if.else24;
  ^if.else23:
    i32 %153 = phi [^if.else22, i32 1] [^if.else24, i32 %166];
    i32 %154 = strunc i32 %153 to i32;
    i32 %155 = add i32 %152, i32 %154;
    i32 %156 = ztrunc i32 %155 to i32;
    ubr ^b4;
  ^if.else24:
    i32 %157 = add i32 %150, i32 -2;
    i32 %158 = ztrunc i32 %157 to i32;
    i32 %159 = call (i32) -> i32 @fib(i32 %158);
    i32 %160 = strunc i32 %159 to i32;
    i32 %161 = add i32 %150, i32 -1;
    i32 %162 = ztrunc i32 %161 to i32;
    i32 %163 = call (i32) -> i32 @fib(i32 %162);
    i32 %164 = strunc i32 %163 to i32;
    i32 %165 = add i32 %160, i32 %164;
    i32 %166 = ztrunc i32 %165 to i32;
    ubr ^if.else23;
}
