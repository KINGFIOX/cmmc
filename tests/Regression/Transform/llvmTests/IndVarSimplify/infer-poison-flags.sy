// This file is automatically generated by llvm2c from llvm/test/Transforms/IndVarSimplify/infer-poison-flags

// function declarations
void add_cr_none(void);
void add_cr_nsw(void);
void add_cr_nsw_nuw(void);
void add_cr_nuw(void);
void add_unknown_none(uint32_t var0);
void ashr_cr_nsw(void);
void ashr_cr_nsw_nuw(void);
void lshr_cr_nsw_nuw(void);
void lshr_cr_nuw(void);
void mul_cr_nsw_nuw(void);
void shl_cr_nsw_nuw(void);
void sub_cr_nsw_nuw(void);
void sub_unknown_none(uint32_t var0);

// global variable definitions
uint32_t A;

void add_cr_none(void){
    uint32_t var0_phi;
    uint32_t var1;
    block0:
    var0_phi = 10;
    goto block1;
    block1:
    var1 = (var0_phi + 1);
    A = var0_phi;
    if (var1 != 0) {
        var0_phi = var1;
        goto block1;
    } else {
        return;
    }
}

void add_cr_nsw(void){
    uint32_t var0_phi;
    uint32_t var1;
    block0:
    var0_phi = -10;
    goto block1;
    block1:
    var1 = (var0_phi + 1);
    A = var0_phi;
    if (var1 != 10) {
        var0_phi = var1;
        goto block1;
    } else {
        return;
    }
}

void add_cr_nsw_nuw(void){
    uint32_t var0_phi;
    uint32_t var1;
    block0:
    var0_phi = 0;
    goto block1;
    block1:
    var1 = (var0_phi + 1);
    A = var0_phi;
    if (var1 != 1000) {
        var0_phi = var1;
        goto block1;
    } else {
        return;
    }
}

void add_cr_nuw(void){
    uint32_t var0_phi;
    uint32_t var1;
    block0:
    var0_phi = 0;
    goto block1;
    block1:
    var1 = (var0_phi + 1);
    A = var0_phi;
    if (var1 != -1) {
        var0_phi = var1;
        goto block1;
    } else {
        return;
    }
}

void add_unknown_none(uint32_t var0){
    uint32_t var1_phi;
    uint32_t var2;
    block0:
    var1_phi = 0;
    goto block1;
    block1:
    var2 = (var1_phi + 1);
    A = var1_phi;
    if (var2 != var0) {
        var1_phi = var2;
        goto block1;
    } else {
        return;
    }
}

void ashr_cr_nsw(void){
    uint32_t var0_phi;
    uint32_t var1;
    block0:
    var0_phi = -1024;
    goto block1;
    block1:
    var1 = (var0_phi >> ((uint32_t)1));
    A = var0_phi;
    if (var1 != 1) {
        var0_phi = var1;
        goto block1;
    } else {
        return;
    }
}

void ashr_cr_nsw_nuw(void){
    uint32_t var0_phi;
    uint32_t var1;
    block0:
    var0_phi = 1024;
    goto block1;
    block1:
    var1 = (var0_phi >> ((uint32_t)1));
    A = var0_phi;
    if (var1 != 0) {
        var0_phi = var1;
        goto block1;
    } else {
        return;
    }
}

void lshr_cr_nsw_nuw(void){
    uint32_t var0_phi;
    uint32_t var1;
    block0:
    var0_phi = 1024;
    goto block1;
    block1:
    var1 = ((var0_phi) >> (1));
    A = var0_phi;
    if (var1 != 0) {
        var0_phi = var1;
        goto block1;
    } else {
        return;
    }
}

void lshr_cr_nuw(void){
    uint32_t var0_phi;
    uint32_t var1;
    block0:
    var0_phi = -1;
    goto block1;
    block1:
    var1 = ((var0_phi) >> (1));
    A = var0_phi;
    if (var1 != 0) {
        var0_phi = var1;
        goto block1;
    } else {
        return;
    }
}

void mul_cr_nsw_nuw(void){
    uint32_t var0_phi;
    uint32_t var1;
    block0:
    var0_phi = 1;
    goto block1;
    block1:
    var1 = (var0_phi * 2);
    A = var0_phi;
    if (var1 != 1024) {
        var0_phi = var1;
        goto block1;
    } else {
        return;
    }
}

void shl_cr_nsw_nuw(void){
    uint32_t var0_phi;
    uint32_t var1;
    block0:
    var0_phi = 1;
    goto block1;
    block1:
    var1 = (var0_phi << ((uint32_t)1));
    A = var0_phi;
    if (var1 != 1024) {
        var0_phi = var1;
        goto block1;
    } else {
        return;
    }
}

void sub_cr_nsw_nuw(void){
    uint32_t var0_phi;
    uint32_t var1;
    block0:
    var0_phi = 0;
    goto block1;
    block1:
    var1 = (var0_phi - -1);
    A = var0_phi;
    if (var1 != 1000) {
        var0_phi = var1;
        goto block1;
    } else {
        return;
    }
}

void sub_unknown_none(uint32_t var0){
    uint32_t var1_phi;
    uint32_t var2;
    block0:
    var1_phi = 0;
    goto block1;
    block1:
    var2 = (var1_phi - -1);
    A = var1_phi;
    if (var2 != var0) {
        var1_phi = var2;
        goto block1;
    } else {
        return;
    }
}

