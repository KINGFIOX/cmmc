func @analyzeable_early_exit(i32 %var0) -> void { NoMemoryRead NoRecurse } {
  ^entry:
    ubr ^block1;
  ^block1:
    i32 %0 = phi [^entry, i32 0] [^if.then, i32 %3];
    i1 %1 = icmp ugt i32 %var0, i32 %0;
    cbr i1 %1(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32* %2 = ptrcast i32* @A to i32*;
    store i32* %2 with i32 %0;
    i32 %3 = add i32 %0, i32 1;
    i1 %4 = icmp ult i32 %3, i32 1000;
    cbr i1 %4(prob = 0.5), ^block1, ^if.else;
  ^if.else:
    ret;
}
func @combine_ivs(i32 %var0) -> void { NoMemoryRead NoRecurse } {
  ^entry:
    ubr ^block1;
  ^block1:
    i32 %0 = phi [^entry, i32 1] [^if.then, i32 %4];
    i32 %1 = phi [^entry, i32 0] [^if.then, i32 %6];
    i1 %2 = icmp ugt i32 %var0, i32 %1;
    cbr i1 %2(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32* %3 = ptrcast i32* @A to i32*;
    store i32* %3 with i32 %1;
    i32 %4 = add i32 %0, i32 1;
    i1 %5 = icmp ult i32 %4, i32 1000;
    i32 %6 = add i32 %1, i32 1;
    cbr i1 %5(prob = 0.5), ^block1, ^if.else;
  ^if.else:
    ret;
}
func @combine_ivs2(i32 %var0) -> void { NoMemoryRead NoRecurse } {
  ^entry:
    ubr ^block1;
  ^block1:
    i32 %0 = phi [^entry, i32 1000] [^if.then, i32 %4];
    i32 %1 = phi [^entry, i32 0] [^if.then, i32 %6];
    i1 %2 = icmp ugt i32 %var0, i32 %1;
    cbr i1 %2(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32* %3 = ptrcast i32* @A to i32*;
    store i32* %3 with i32 %1;
    i32 %4 = add i32 %0, i32 -1;
    i1 %5 = icmp ugt i32 %4, i32 0;
    i32 %6 = add i32 %1, i32 1;
    cbr i1 %5(prob = 0.5), ^block1, ^if.else;
  ^if.else:
    ret;
}
func @compound_early_exit(i32 %var0, i32 %var1) -> void { NoMemoryRead NoRecurse } {
  ^entry:
    ubr ^block1;
  ^block1:
    i32 %0 = phi [^entry, i32 0] [^if.then, i32 %5];
    i1 %1 = icmp ugt i32 %var0, i32 %0;
    i1 %2 = icmp ugt i32 %var1, i32 %0;
    i1 %3 = and i1 %1, i1 %2;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32* %4 = ptrcast i32* @A to i32*;
    store i32* %4 with i32 %0;
    i32 %5 = add i32 %0, i32 1;
    i1 %6 = icmp ult i32 %5, i32 1000;
    cbr i1 %6(prob = 0.5), ^block1, ^if.else;
  ^if.else:
    ret;
}
func @multiple_early_exits(i32 %var0, i32 %var1) -> void { NoMemoryRead NoRecurse } {
  ^entry:
    ubr ^block1;
  ^block1:
    i32 %0 = phi [^entry, i32 0] [^if.then1, i32 %4];
    i1 %1 = icmp ugt i32 %var0, i32 %0;
    cbr i1 %1(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32* %2 = ptrcast i32* @A to i32*;
    store i32* %2 with i32 %0;
    i1 %3 = icmp ugt i32 %var1, i32 %0;
    cbr i1 %3(prob = 0.5), ^if.then1, ^if.else;
  ^if.else:
    ret;
  ^if.then1:
    store i32* %2 with i32 %0;
    i32 %4 = add i32 %0, i32 1;
    i1 %5 = icmp ult i32 %4, i32 1000;
    cbr i1 %5(prob = 0.5), ^block1, ^if.else;
}
func @nested(i32 %var0) -> void { NoMemoryRead NoRecurse } {
  ^entry:
    i32* %0 = ptrcast i32* @A to i32*;
    ubr ^block1;
  ^block1:
    i32 %1 = phi [^entry, i32 0] [^if.else1, i32 %2];
    i32 %2 = add i32 %1, i32 1;
    ubr ^block2;
  ^block2:
    i32 %3 = phi [^block1, i32 0] [^if.then, i32 %6];
    store i32* %0 with i32 %3;
    i1 %4 = icmp ult i32 %3, i32 20;
    cbr i1 %4(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i1 %5 = icmp ugt i32 %var0, i32 %3;
    i32 %6 = add i32 %3, i32 1;
    cbr i1 %5(prob = 0.5), ^block2, ^if.else1;
  ^if.else:
    ret;
  ^if.else1:
    i1 %7 = icmp ult i32 %1, i32 20;
    cbr i1 %7(prob = 0.5), ^block1, ^if.else;
}
func @no_latch_exit(i32 %var0, i32 %var1) -> void { NoMemoryRead NoRecurse } {
  ^entry:
    ubr ^block1;
  ^block1:
    i32 %0 = phi [^entry, i32 0] [^if.then1, i32 %4];
    i1 %1 = icmp ugt i32 %var0, i32 %0;
    cbr i1 %1(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32* %2 = ptrcast i32* @A to i32*;
    store i32* %2 with i32 %0;
    i1 %3 = icmp ugt i32 %var1, i32 %0;
    cbr i1 %3(prob = 0.5), ^if.then1, ^if.else;
  ^if.else:
    ret;
  ^if.then1:
    store i32* %2 with i32 %0;
    i32 %4 = add i32 %0, i32 1;
    ubr ^block1;
}
func @simplify_exit_test(i32 %var0) -> void { NoMemoryRead NoRecurse } {
  ^entry:
    ubr ^block1;
  ^block1:
    i32 %0 = phi [^entry, i32 0] [^if.then, i32 %5];
    i1 %1 = icmp ugt i32 %var0, i32 %0;
    cbr i1 %1(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32* %2 = ptrcast i32* @A to i32*;
    store i32* %2 with i32 %0;
    i32 %3 = shl i32 %0, i32 4;
    i1 %4 = icmp ult i32 %3, i32 1024;
    i32 %5 = add i32 %0, i32 1;
    cbr i1 %4(prob = 0.5), ^block1, ^if.else;
  ^if.else:
    ret;
}
func @simplify_exit_test2() -> void { NoRecurse } {
  ^entry:
    i32* %0 = ptrcast i32* @A to i32*;
    i32 %1 = load i32* %0;
    ubr ^block1;
  ^block1:
    i32 %2 = phi [^entry, i32 %1] [^if.then, i32 %3];
    i32 %3 = phi [^entry, i32 0] [^if.then, i32 %7];
    i1 %4 = icmp neq i32 %2, i32 0;
    cbr i1 %4(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    store i32* %0 with i32 %3;
    i32 %5 = udiv i32 %3, i32 4;
    i1 %6 = icmp ult i32 %5, i32 1024;
    i32 %7 = add i32 %3, i32 1;
    cbr i1 %6(prob = 0.5), ^block1, ^if.else;
  ^if.else:
    ret;
}
func @single_exit_no_latch(i32 %var0) -> void { NoMemoryRead NoRecurse } {
  ^entry:
    i1 %0 = icmp ugt i32 %var0, i32 0;
    cbr i1 %0(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %1 = phi [^entry, i32 0] [^if.then, i32 %2];
    i32 %2 = add i32 %1, i32 1;
    i1 %3 = icmp ugt i32 %var0, i32 %2;
    i32* %4 = ptrcast i32* @A to i32*;
    store i32* %4 with i32 %1;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
  ^if.else:
    ret;
}
func @unanalyzeable_early_exit() -> void { NoRecurse } {
  ^entry:
    i32* %0 = ptrcast i32* @A to i32*;
    i32 %1 = load i32* %0;
    ubr ^block1;
  ^block1:
    i32 %2 = phi [^entry, i32 %1] [^if.then, i32 %3];
    i32 %3 = phi [^entry, i32 0] [^if.then, i32 %5];
    i1 %4 = icmp neq i32 %2, i32 0;
    cbr i1 %4(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    store i32* %0 with i32 %3;
    i32 %5 = add i32 %3, i32 1;
    i1 %6 = icmp ult i32 %5, i32 1000;
    cbr i1 %6(prob = 0.5), ^block1, ^if.else;
  ^if.else:
    ret;
}
func @unanalyzeable_latch(i32 %var0) -> void { NoMemoryRead NoRecurse } {
  ^entry:
    ubr ^block1;
  ^block1:
    i32 %0 = phi [^entry, i32 0] [^if.then, i32 %3];
    i1 %1 = icmp ugt i32 %var0, i32 %0;
    cbr i1 %1(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32* %2 = ptrcast i32* @A to i32*;
    store i32* %2 with i32 %0;
    i32 %3 = add i32 %0, i32 1;
    i1 %4 = icmp ult i32 %0, i32 1000;
    cbr i1 %4(prob = 0.5), ^block1, ^if.else;
  ^if.else:
    ret;
}
i32* @A, align 8;
