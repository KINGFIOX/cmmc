func @fn() -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ret i32 10;
}
func @test_nested2(i32 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ubr ^block1;
  ^block1:
    i32 %0 = phi [^entry, i32 0] [^if.else1, i32 %8];
    i32 %1 = phi [^entry, i32 0] [^if.else1, i32 %10];
    i32 %2 = strunc i32 %1 to i32;
    i1 %3 = icmp slt i32 %2, i32 10;
    cbr i1 %3(prob = 0.5), ^block4, ^if.else;
  ^block4:
    i1 %4 = icmp sgt i32 %2, i32 0;
    cbr i1 %4(prob = 0.5), ^if.then, ^if.else1;
  ^if.else:
    i1 %5 = icmp eq i32 %0, i32 45;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
  ^if.else1:
    i32 %8 = phi [^block4, i32 %0] [^if.then, i32 %19];
    i32 %9 = add i32 %2, i32 1;
    i32 %10 = ztrunc i32 %9 to i32;
    ubr ^block1;
  ^if.then:
    i32 %11 = phi [^block4, i32 0] [^if.then, i32 %20];
    i32 %12 = phi [^block4, i32 %0] [^if.then, i32 %19];
    i32 %13 = strunc i32 %11 to i32;
    i32 %14 = add i32 %13, i32 1;
    i32 %15 = strunc i32 %14 to i32;
    i1 %16 = icmp sgt i32 %2, i32 %15;
    i32 %17 = strunc i32 %12 to i32;
    i32 %18 = add i32 %17, i32 1;
    i32 %19 = ztrunc i32 %18 to i32;
    i32 %20 = ztrunc i32 %14 to i32;
    cbr i1 %16(prob = 0.5), ^if.then, ^if.else1;
}
