func @fn() -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ret i32 10;
}
func @test_nested2(i32 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ubr ^if.then;
  ^if.then:
    i32 %0 = phi [^entry, i32 0] [^if.else, i32 %15];
    i32 %1 = phi [^entry, i32 0] [^if.else, i32 %17];
    i32 %2 = phi [^entry, i32 0] [^if.else, i32 %12];
    i1 %3 = icmp sgt i32 %0, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then1, ^if.else;
  ^if.then1:
    i32 %4 = phi [^if.then, i32 0] [^if.then1, i32 %7];
    i32 %5 = phi [^if.then, i32 %2] [^if.then1, i32 %11];
    i32 %6 = add i32 %4, i32 1;
    i32 %7 = strunc i32 %6 to i32;
    i1 %8 = icmp sgt i32 %0, i32 %7;
    i32 %9 = strunc i32 %5 to i32;
    i32 %10 = add i32 %9, i32 1;
    i32 %11 = ztrunc i32 %10 to i32;
    cbr i1 %8(prob = 0.5), ^if.then1, ^if.else;
  ^if.else:
    i32 %12 = phi [^if.then, i32 %2] [^if.then1, i32 %11];
    i32 %13 = strunc i32 %1 to i32;
    i32 %14 = add i32 %13, i32 1;
    i32 %15 = strunc i32 %14 to i32;
    i1 %16 = icmp slt i32 %15, i32 10;
    i32 %17 = ztrunc i32 %14 to i32;
    cbr i1 %16(prob = 0.5), ^if.then, ^if.else1;
  ^if.else1:
    i1 %18 = icmp eq i32 %12, i32 45;
    i32 %19 = zext i1 %18 to i32;
    i32 %20 = ztrunc i32 %19 to i32;
    ret i32 %20;
}
