func @fn() -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ret i32 10;
}
func @test_nested2(i32 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ubr ^if.then;
  ^if.then:
    i32 %0 = phi [^entry, i32 0] [^if.else, i32 %18];
    i32 %1 = phi [^entry, i32 0] [^if.else, i32 %14];
    i32 %2 = strunc i32 %0 to i32;
    i1 %3 = icmp sgt i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then1, ^if.else;
  ^if.then1:
    i32 %4 = phi [^if.then, i32 0] [^if.then1, i32 %13];
    i32 %5 = phi [^if.then, i32 %1] [^if.then1, i32 %12];
    i32 %6 = strunc i32 %4 to i32;
    i32 %7 = add i32 %6, i32 1;
    i32 %8 = strunc i32 %7 to i32;
    i1 %9 = icmp sgt i32 %2, i32 %8;
    i32 %10 = strunc i32 %5 to i32;
    i32 %11 = add i32 %10, i32 1;
    i32 %12 = ztrunc i32 %11 to i32;
    i32 %13 = ztrunc i32 %7 to i32;
    cbr i1 %9(prob = 0.5), ^if.then1, ^if.else;
  ^if.else:
    i32 %14 = phi [^if.then, i32 %1] [^if.then1, i32 %12];
    i32 %15 = add i32 %2, i32 1;
    i32 %16 = strunc i32 %15 to i32;
    i1 %17 = icmp slt i32 %16, i32 10;
    i32 %18 = ztrunc i32 %15 to i32;
    cbr i1 %17(prob = 0.5), ^if.then, ^if.else1;
  ^if.else1:
    i1 %19 = icmp eq i32 %14, i32 45;
    i32 %20 = zext i1 %19 to i32;
    i32 %21 = ztrunc i32 %20 to i32;
    ret i32 %21;
}
