func @logical_and_2ops(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ubr ^block1;
  ^block1:
    i32 %0 = phi [^entry, i32 0] [^block1, i32 %4];
    i1 %1 = icmp ugt i32 %var0, i32 %0;
    i1 %2 = icmp ugt i32 %var1, i32 %0;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = add i32 %0, i32 1;
    cbr i1 %3(prob = 0.5), ^block1, ^if.else;
  ^if.else:
    ret i32 %0;
}
func @logical_and_3ops(i32 %var0, i32 %var1, i32 %var2) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ubr ^block1;
  ^block1:
    i32 %0 = phi [^entry, i32 0] [^block1, i32 %9];
    i1 %1 = icmp ugt i32 %var0, i32 %0;
    i1 %2 = icmp ugt i32 %var1, i32 %0;
    i1 %3 = and i1 %1, i1 %2;
    i1 %4 = icmp ugt i32 %var2, i32 %0;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = ztrunc i32 %5 to i32;
    i32 %7 = select i1 %3 ? i32 %6 : i32 0;
    i1 %8 = icmp neq i32 %7, i32 0;
    i32 %9 = add i32 %0, i32 1;
    cbr i1 %8(prob = 0.5), ^block1, ^if.else;
  ^if.else:
    ret i32 %0;
}
func @logical_or_2ops(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ubr ^block1;
  ^block1:
    i32 %0 = phi [^entry, i32 0] [^block1, i32 %4];
    i1 %1 = icmp ule i32 %var0, i32 %0;
    i1 %2 = icmp ule i32 %var1, i32 %0;
    i1 %3 = or i1 %1, i1 %2;
    i32 %4 = add i32 %0, i32 1;
    cbr i1 %3(prob = 0.5), ^if.then, ^block1;
  ^if.then:
    ret i32 %0;
}
func @logical_or_3ops(i32 %var0, i32 %var1, i32 %var2) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ubr ^block1;
  ^block1:
    i32 %0 = phi [^entry, i32 0] [^block1, i32 %9];
    i1 %1 = icmp ule i32 %var0, i32 %0;
    i1 %2 = icmp ule i32 %var1, i32 %0;
    i1 %3 = or i1 %1, i1 %2;
    i1 %4 = icmp ule i32 %var2, i32 %0;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = ztrunc i32 %5 to i32;
    i1 %7 = icmp neq i32 %6, i32 0;
    i1 %8 = or i1 %3, i1 %7;
    i32 %9 = add i32 %0, i32 1;
    cbr i1 %8(prob = 0.5), ^if.then, ^block1;
  ^if.then:
    ret i32 %0;
}
