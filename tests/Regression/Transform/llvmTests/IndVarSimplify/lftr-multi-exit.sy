// This file is automatically generated by llvm2c from llvm/test/Transforms/IndVarSimplify/lftr-multi-exit

// function declarations
void analyzeable_early_exit(uint32_t var0);
void combine_ivs(uint32_t var0);
void combine_ivs2(uint32_t var0);
void compound_early_exit(uint32_t var0, uint32_t var1);
void multiple_early_exits(uint32_t var0, uint32_t var1);
void nested(uint32_t var0);
void no_latch_exit(uint32_t var0, uint32_t var1);
void simplify_exit_test(uint32_t var0);
void simplify_exit_test2(uint32_t var0);
void single_exit_no_latch(uint32_t var0);
void unanalyzeable_early_exit(void);
void unanalyzeable_latch(uint32_t var0);

// global variable definitions
uint32_t A;

void analyzeable_early_exit(uint32_t var0){
    uint32_t var1_phi;
    uint32_t var2;
    block0:
    var1_phi = 0;
    goto block1;
    block1:
    if (var1_phi < var0) {
        var2 = (var1_phi + 1);
        A = var1_phi;
        if (var2 < 1000) {
            var1_phi = var2;
            goto block1;
        } else {
            return;
        }
    } else {
        return;
    }
}

void combine_ivs(uint32_t var0){
    uint32_t var1_phi;
    uint32_t var2_phi;
    uint32_t var3;
    uint32_t var4;
    block0:
    var1_phi = 0;
    var2_phi = 1;
    goto block1;
    block1:
    if (var1_phi < var0) {
        var3 = (var1_phi + 1);
        var4 = (var2_phi + 1);
        A = var1_phi;
        if (var4 < 1000) {
            var1_phi = var3;
            var2_phi = var4;
            goto block1;
        } else {
            return;
        }
    } else {
        return;
    }
}

void combine_ivs2(uint32_t var0){
    uint32_t var1_phi;
    uint32_t var2_phi;
    uint32_t var3;
    uint32_t var4;
    block0:
    var1_phi = 0;
    var2_phi = 1000;
    goto block1;
    block1:
    if (var1_phi < var0) {
        var3 = (var1_phi + 1);
        var4 = (var2_phi - 1);
        A = var1_phi;
        if (var4 > 0) {
            var1_phi = var3;
            var2_phi = var4;
            goto block1;
        } else {
            return;
        }
    } else {
        return;
    }
}

void compound_early_exit(uint32_t var0, uint32_t var1){
    uint32_t var2_phi;
    uint32_t var3;
    block0:
    var2_phi = 0;
    goto block1;
    block1:
    if ((var2_phi < var0) && (var2_phi < var1)) {
        var3 = (var2_phi + 1);
        A = var2_phi;
        if (var3 < 1000) {
            var2_phi = var3;
            goto block1;
        } else {
            return;
        }
    } else {
        return;
    }
}

void multiple_early_exits(uint32_t var0, uint32_t var1){
    uint32_t var2_phi;
    uint32_t var3;
    block0:
    var2_phi = 0;
    goto block1;
    block1:
    if (var2_phi < var0) {
        A = var2_phi;
        if (var2_phi < var1) {
            var3 = (var2_phi + 1);
            A = var2_phi;
            if (var3 < 1000) {
                var2_phi = var3;
                goto block1;
            } else {
                return;
            }
        } else {
            return;
        }
    } else {
        return;
    }
}

void nested(uint32_t var0){
    uint32_t var1_phi;
    uint32_t var3_phi;
    uint32_t var2;
    uint32_t var4;
    block0:
    var1_phi = 0;
    goto block1;
    block1:
    A = var1_phi;
    var2 = (var1_phi + 1);
    var3_phi = 0;
    goto block2;
    block2:
    A = var3_phi;
    var4 = (var3_phi + 1);
    if (var3_phi < 20) {
        if (var3_phi < var0) {
            var3_phi = var4;
            goto block2;
        } else {
            if (var1_phi < 20) {
                var1_phi = var2;
                goto block1;
            } else {
                return;
            }
        }
    } else {
        return;
    }
}

void no_latch_exit(uint32_t var0, uint32_t var1){
    uint32_t var2_phi;
    uint32_t var3;
    block0:
    var2_phi = 0;
    goto block1;
    block1:
    if (var2_phi < var0) {
        A = var2_phi;
        if (var2_phi < var1) {
            A = var2_phi;
            var3 = (var2_phi + 1);
            var2_phi = var3;
            goto block1;
        } else {
            return;
        }
    } else {
        return;
    }
}

void simplify_exit_test(uint32_t var0){
    uint32_t var1_phi;
    uint32_t var2;
    uint32_t var3;
    block0:
    var1_phi = 0;
    goto block1;
    block1:
    if (var1_phi < var0) {
        var2 = (var1_phi + 1);
        var3 = (var1_phi << ((uint32_t)4));
        A = var1_phi;
        if (var3 < 1024) {
            var1_phi = var2;
            goto block1;
        } else {
            return;
        }
    } else {
        return;
    }
}

void simplify_exit_test2(uint32_t var0){
    uint32_t var1_phi;
    uint32_t var2;
    uint32_t var3;
    block0:
    var1_phi = 0;
    goto block1;
    block1:
    if (A != 0) {
        var2 = (var1_phi + 1);
        var3 = (var1_phi / 4);
        A = var1_phi;
        if (var3 < 1024) {
            var1_phi = var2;
            goto block1;
        } else {
            return;
        }
    } else {
        return;
    }
}

void single_exit_no_latch(uint32_t var0){
    uint32_t var1_phi;
    uint32_t var2;
    block0:
    var1_phi = 0;
    goto block1;
    block1:
    if (var1_phi < var0) {
        var2 = (var1_phi + 1);
        A = var1_phi;
        var1_phi = var2;
        goto block1;
    } else {
        return;
    }
}

void unanalyzeable_early_exit(void){
    uint32_t var0_phi;
    uint32_t var1;
    block0:
    var0_phi = 0;
    goto block1;
    block1:
    if (A != 0) {
        var1 = (var0_phi + 1);
        A = var0_phi;
        if (var1 < 1000) {
            var0_phi = var1;
            goto block1;
        } else {
            return;
        }
    } else {
        return;
    }
}

void unanalyzeable_latch(uint32_t var0){
    uint32_t var1_phi;
    uint32_t var2;
    block0:
    var1_phi = 0;
    goto block1;
    block1:
    if (var1_phi < var0) {
        var2 = (var1_phi + 1);
        A = var1_phi;
        if (A < 1000) {
            var1_phi = var2;
            goto block1;
        } else {
            return;
        }
    } else {
        return;
    }
}

