func @f() -> void { NoRecurse } {
  ^entry:
    i32* %0 = ptrcast i32* @a to i32*;
    i32 %1 = load i32* %0;
    i1 %2 = icmp eq i32 %1, i32 0;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = ztrunc i32 %3 to i32;
    i1 %5 = icmp neq i32 %4, i32 0;
    ubr ^block1;
  ^block1:
    i8 %6 = phi [^entry, i8 -14] [^block47, i8 %11];
    cbr i1 %5(prob = 0.5), ^block47, ^if.else;
  ^block47:
    i32 %7 = zext i8 %6 to i32;
    i32 %8 = add i32 %7, i32 1;
    i32 %9 = and i32 %8, i32 255;
    i1 %10 = icmp sgt i32 %9, i32 50;
    i8 %11 = ztrunc i32 %8 to i8;
    cbr i1 %10(prob = 0.5), ^block1, ^if.else2;
  ^if.else:
    i32 %12 = zext i8 %6 to i32;
    i1 %13 = icmp eq i32 %12, i32 0;
    i32 %14 = zext i1 %13 to i32;
    i32 %15 = ztrunc i32 %14 to i32;
    i1 %16 = icmp neq i32 %15, i32 0;
    i8 %17 = strunc i8 %6 to i8;
    i32 %18 = sext i8 %17 to i32;
    cbr i1 %16(prob = 0.5), ^if.then, ^if.else1;
  ^if.then:
    i32 %19 = add i32 %18, i32 1;
    i32 %20 = ztrunc i32 %19 to i32;
    i1 %21 = icmp ult i32 %20, i32 3;
    i32 %22 = select i1 %21 ? i32 %18 : i32 0;
    i32 %23 = ztrunc i32 %22 to i32;
    i32* %24 = ptrcast i32* @b to i32*;
    i32 %25 = load i32* %24;
    i32 %26 = strunc i32 %25 to i32;
    i1 %27 = icmp slt i32 %26, i32 1;
    cbr i1 %27(prob = 0.5), ^block13, ^block46;
  ^if.else1:
    i32* %28 = ptrcast i32* @b to i32*;
    i32 %29 = load i32* %28;
    i32 %30 = strunc i32 %29 to i32;
    i1 %31 = icmp slt i32 %30, i32 1;
    i32 %32 = ztrunc i32 %18 to i32;
    cbr i1 %31(prob = 0.5), ^block31, ^block46;
  ^if.else2:
    ret;
  ^block46:
    i32 %33 = phi [^if.then, i32 %23] [^if.else1, i32 %32] [^if.else3, i32 %23] [^if.else4, i32 %32];
    i32* %34 = ptrcast i32* @c to i32*;
    store i32* %34 with i32 %33;
    ubr ^block47;
  ^block13:
    i32 %35 = add i32 %26, i32 1;
    i1 %36 = icmp slt i32 %35, i32 1;
    cbr i1 %36(prob = 0.5), ^if.then1, ^if.else3;
  ^block31:
    i32 %37 = add i32 %30, i32 1;
    i1 %38 = icmp slt i32 %37, i32 1;
    cbr i1 %38(prob = 0.5), ^if.then2, ^if.else4;
  ^if.else3:
    i32 %39 = phi [^block13, i32 %35] [^if.then1, i32 %47];
    i32 %40 = ztrunc i32 %39 to i32;
    i32* %41 = ptrcast i32* @b to i32*;
    store i32* %41 with i32 %40;
    ubr ^block46;
  ^if.else4:
    i32 %42 = phi [^block31, i32 %37] [^if.then2, i32 %51];
    i32 %43 = ztrunc i32 %42 to i32;
    i32* %44 = ptrcast i32* @b to i32*;
    store i32* %44 with i32 %43;
    ubr ^block46;
  ^if.then1:
    i32 %45 = phi [^block13, i32 %35] [^if.then1, i32 %47];
    i32 %46 = strunc i32 %45 to i32;
    i32 %47 = add i32 %46, i32 1;
    i1 %48 = icmp slt i32 %47, i32 1;
    cbr i1 %48(prob = 0.5), ^if.then1, ^if.else3;
  ^if.then2:
    i32 %49 = phi [^block31, i32 %37] [^if.then2, i32 %51];
    i32 %50 = strunc i32 %49 to i32;
    i32 %51 = add i32 %50, i32 1;
    i1 %52 = icmp slt i32 %51, i32 1;
    cbr i1 %52(prob = 0.5), ^if.then2, ^if.else4;
}
i32* @a, align 4 = 0;
i32* @c, align 4 = 0;
i32* @b, align 4 = 0;
