func @f() -> void { NoRecurse } {
  ^entry:
    i32* %0 = ptrcast i32* @a to i32*;
    i32 %1 = load i32* %0;
    i1 %2 = icmp eq i32 %1, i32 0;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = ztrunc i32 %3 to i32;
    ubr ^block1;
  ^block1:
    i8 %5 = phi [^entry, i8 -14] [^block47, i8 %13];
    i32 %6 = phi [^entry, i32 %4] [^block47, i32 %8];
    i1 %7 = icmp neq i32 %6, i32 0;
    cbr i1 %7(prob = 0.5), ^block47, ^if.else;
  ^block47:
    i32 %8 = phi [^block1, i32 %6] [^block46, i32 0];
    i32 %9 = zext i8 %5 to i32;
    i32 %10 = add i32 %9, i32 1;
    i32 %11 = and i32 %10, i32 255;
    i1 %12 = icmp sgt i32 %11, i32 50;
    i8 %13 = ztrunc i32 %10 to i8;
    cbr i1 %12(prob = 0.5), ^block1, ^if.else2;
  ^if.else:
    i32 %14 = zext i8 %5 to i32;
    i1 %15 = icmp eq i32 %14, i32 0;
    i32 %16 = zext i1 %15 to i32;
    i32 %17 = ztrunc i32 %16 to i32;
    i1 %18 = icmp neq i32 %17, i32 0;
    i8 %19 = strunc i8 %5 to i8;
    i32 %20 = sext i8 %19 to i32;
    cbr i1 %18(prob = 0.5), ^if.then, ^if.else1;
  ^if.then:
    i32 %21 = add i32 %20, i32 1;
    i32 %22 = ztrunc i32 %21 to i32;
    i1 %23 = icmp ult i32 %22, i32 3;
    i32 %24 = select i1 %23 ? i32 %20 : i32 0;
    i32 %25 = ztrunc i32 %24 to i32;
    i32* %26 = ptrcast i32* @b to i32*;
    i32 %27 = load i32* %26;
    i32 %28 = strunc i32 %27 to i32;
    i1 %29 = icmp slt i32 %28, i32 1;
    cbr i1 %29(prob = 0.5), ^block13, ^block46;
  ^if.else1:
    i32* %30 = ptrcast i32* @b to i32*;
    i32 %31 = load i32* %30;
    i32 %32 = strunc i32 %31 to i32;
    i1 %33 = icmp slt i32 %32, i32 1;
    i32 %34 = ztrunc i32 %20 to i32;
    cbr i1 %33(prob = 0.5), ^block31, ^block46;
  ^if.else2:
    ret;
  ^block46:
    i32 %35 = phi [^if.then, i32 %25] [^if.else1, i32 %34] [^if.else3, i32 %25] [^if.else4, i32 %34];
    i32* %36 = ptrcast i32* @c to i32*;
    store i32* %36 with i32 %35;
    ubr ^block47;
  ^block13:
    i32 %37 = add i32 %28, i32 1;
    i1 %38 = icmp slt i32 %37, i32 1;
    cbr i1 %38(prob = 0.5), ^if.then1, ^if.else3;
  ^block31:
    i32 %39 = add i32 %32, i32 1;
    i1 %40 = icmp slt i32 %39, i32 1;
    cbr i1 %40(prob = 0.5), ^if.then2, ^if.else4;
  ^if.else3:
    i32 %41 = phi [^block13, i32 %37] [^if.then1, i32 %49];
    i32 %42 = ztrunc i32 %41 to i32;
    i32* %43 = ptrcast i32* @b to i32*;
    store i32* %43 with i32 %42;
    ubr ^block46;
  ^if.else4:
    i32 %44 = phi [^block31, i32 %39] [^if.then2, i32 %53];
    i32 %45 = ztrunc i32 %44 to i32;
    i32* %46 = ptrcast i32* @b to i32*;
    store i32* %46 with i32 %45;
    ubr ^block46;
  ^if.then1:
    i32 %47 = phi [^block13, i32 %37] [^if.then1, i32 %49];
    i32 %48 = strunc i32 %47 to i32;
    i32 %49 = add i32 %48, i32 1;
    i1 %50 = icmp slt i32 %49, i32 1;
    cbr i1 %50(prob = 0.5), ^if.then1, ^if.else3;
  ^if.then2:
    i32 %51 = phi [^block31, i32 %39] [^if.then2, i32 %53];
    i32 %52 = strunc i32 %51 to i32;
    i32 %53 = add i32 %52, i32 1;
    i1 %54 = icmp slt i32 %53, i32 1;
    cbr i1 %54(prob = 0.5), ^if.then2, ^if.else4;
}
i32* @a = 0;
i32* @c = 0;
i32* @b = 0;
