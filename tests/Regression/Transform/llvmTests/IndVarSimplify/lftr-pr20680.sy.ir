func @f() -> void { NoRecurse } {
  ^entry:
    i32* %0 = ptrcast i32* @a to i32*;
    i32 %1 = load i32* %0;
    i1 %2 = icmp eq i32 %1, i32 0;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = ztrunc i32 %3 to i32;
    i1 %5 = icmp neq i32 %4, i32 0;
    ubr ^block1;
  ^block1:
    i8 %6 = phi [^entry, i8 -14] [^block47, i8 %11];
    i32 %7 = zext i8 %6 to i32;
    cbr i1 %5(prob = 0.5), ^block47, ^if.else;
  ^block47:
    i32 %8 = add i32 %7, i32 1;
    i32 %9 = and i32 %8, i32 255;
    i1 %10 = icmp sgt i32 %9, i32 50;
    i8 %11 = ztrunc i32 %8 to i8;
    cbr i1 %10(prob = 0.5), ^block1, ^if.else2;
  ^if.else:
    i1 %12 = icmp eq i32 %7, i32 0;
    i32 %13 = zext i1 %12 to i32;
    i32 %14 = ztrunc i32 %13 to i32;
    i1 %15 = icmp neq i32 %14, i32 0;
    i8 %16 = strunc i8 %6 to i8;
    i32 %17 = sext i8 %16 to i32;
    i32* %18 = ptrcast i32* @b to i32*;
    cbr i1 %15(prob = 0.5), ^if.then, ^if.else1;
  ^if.then:
    i32 %19 = add i32 %17, i32 1;
    i32 %20 = ztrunc i32 %19 to i32;
    i1 %21 = icmp ult i32 %20, i32 3;
    i32 %22 = select i1 %21 ? i32 %17 : i32 0;
    i32 %23 = ztrunc i32 %22 to i32;
    i32 %24 = load i32* %18;
    i32 %25 = strunc i32 %24 to i32;
    i1 %26 = icmp slt i32 %25, i32 1;
    cbr i1 %26(prob = 0.5), ^if.then1, ^block46;
  ^if.else1:
    i32 %27 = load i32* %18;
    i32 %28 = strunc i32 %27 to i32;
    i1 %29 = icmp slt i32 %28, i32 1;
    i32 %30 = ztrunc i32 %17 to i32;
    cbr i1 %29(prob = 0.5), ^block31, ^block46;
  ^if.else2:
    ret;
  ^block46:
    i32 %31 = phi [^if.then, i32 %23] [^if.else1, i32 %30] [^if.else3, i32 %23] [^if.else4, i32 %30];
    i32* %32 = ptrcast i32* @c to i32*;
    store i32* %32 with i32 %31;
    ubr ^block47;
  ^if.then1:
    i32 %33 = add i32 %25, i32 1;
    i1 %34 = icmp slt i32 %33, i32 1;
    cbr i1 %34(prob = 0.5), ^if.then2, ^if.else3;
  ^block31:
    i32 %35 = phi [^if.else1, i32 %27] [^block31, i32 %39];
    i32 %36 = strunc i32 %35 to i32;
    i32 %37 = add i32 %36, i32 1;
    i1 %38 = icmp slt i32 %37, i32 1;
    i32 %39 = ztrunc i32 %37 to i32;
    cbr i1 %38(prob = 0.5), ^block31, ^if.else4;
  ^if.else3:
    i32 %40 = phi [^if.then1, i32 %33] [^if.then2, i32 %44];
    i32 %41 = ztrunc i32 %40 to i32;
    store i32* %18 with i32 %41;
    ubr ^block46;
  ^if.then2:
    i32 %42 = phi [^if.then1, i32 %33] [^if.then2, i32 %44];
    i32 %43 = strunc i32 %42 to i32;
    i32 %44 = add i32 %43, i32 1;
    i1 %45 = icmp slt i32 %44, i32 1;
    cbr i1 %45(prob = 0.5), ^if.then2, ^if.else3;
  ^if.else4:
    store i32* %18 with i32 %39;
    ubr ^block46;
}
i32* @a, align 4 = 0;
i32* @c, align 4 = 0;
i32* @b, align 4 = 0;
