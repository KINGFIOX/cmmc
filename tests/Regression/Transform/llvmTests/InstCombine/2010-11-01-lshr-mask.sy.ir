func @foo(i8 %var0, i8 %var1) -> i8 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i32 %1 = shl i32 %0, i32 7;
    i32 %2 = zext i8 %var1 to i32;
    i32 %3 = and i32 %2, i32 -118;
    i32 %4 = xor i32 %1, i32 %3;
    i32 %5 = and i32 %4, i32 255;
    i32 %6 = and i32 %2, i32 84;
    i32 %7 = sub i32 -88, i32 %6;
    i32 %8 = and i32 %7, i32 84;
    i32 %9 = or i32 %5, i32 %8;
    i32 %10 = and i32 %2, i32 33;
    i32 %11 = or i32 %9, i32 %10;
    i32 %12 = ashr i32 %5, i32 7;
    i32 %13 = shl i32 %12, i32 5;
    i32 %14 = xor i32 %11, i32 %13;
    i8 %15 = ztrunc i32 %14 to i8;
    ret i8 %15;
}
func @main(i32 %argc) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = and i32 %argc, i32 255;
    i32 %1 = and i32 %0, i32 122;
    i32 %2 = xor i32 %1, i32 -17;
    i32 %3 = and i32 %2, i32 255;
    i32 %4 = shl i32 %3, i32 6;
    i32 %5 = or i32 %0, i32 -17;
    i32 %6 = xor i32 %4, i32 %5;
    i32 %7 = xor i32 %3, i32 %6;
    i32 %8 = ashr i32 %7, i32 7;
    i32 %9 = mul i32 %8, i32 64;
    i32 %10 = strunc i32 %9 to i32;
    ret i32 %10;
}
