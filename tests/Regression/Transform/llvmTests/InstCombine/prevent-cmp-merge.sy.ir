func @test1(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = xor i32 %var0, i32 5;
    i1 %1 = icmp eq i32 %var1, i32 %0;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = icmp eq i32 %0, i32 10;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @test1_logical(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = xor i32 %var0, i32 5;
    i1 %1 = icmp eq i32 %var1, i32 %0;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = icmp eq i32 %0, i32 10;
    i32 %4 = select i1 %3 ? i32 1 : i32 %2;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @test2(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = xor i32 %var0, i32 %var1;
    i1 %1 = icmp eq i32 %0, i32 0;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = icmp eq i32 %0, i32 32;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = xor i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @test3(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i32 %1 = strunc i32 %var1 to i32;
    i32 %2 = sub i32 %0, i32 %1;
    i1 %3 = icmp eq i32 %2, i32 0;
    i32 %4 = zext i1 %3 to i32;
    i1 %5 = icmp eq i32 %2, i32 31;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %4, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @test3_logical(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i32 %1 = strunc i32 %var1 to i32;
    i32 %2 = sub i32 %0, i32 %1;
    i1 %3 = icmp eq i32 %2, i32 31;
    i32 %4 = zext i1 %3 to i32;
    i1 %5 = icmp eq i32 %2, i32 0;
    i32 %6 = select i1 %5 ? i32 1 : i32 %4;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
