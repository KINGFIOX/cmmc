// This file is automatically generated by llvm2c from llvm/test/Transforms/InstCombine/range-check

// function declarations
uint32_t negative1(uint32_t var0, uint32_t var1);
uint32_t negative1_logical(uint32_t var0, uint32_t var1);
uint32_t negative2(uint32_t var0, uint32_t var1);
uint32_t negative2_logical(uint32_t var0, uint32_t var1);
uint32_t negative3(uint32_t var0, uint32_t var1, uint32_t var2);
uint32_t negative3_logical(uint32_t var0, uint32_t var1, uint32_t var2);
uint32_t negative4(uint32_t var0, uint32_t var1);
uint32_t negative4_logical(uint32_t var0, uint32_t var1);
uint32_t negative5(uint32_t var0, uint32_t var1);
uint32_t negative5_logical(uint32_t var0, uint32_t var1);
uint32_t test_and1(uint32_t var0, uint32_t var1);
uint32_t test_and1_logical(uint32_t var0, uint32_t var1);
uint32_t test_and2(uint32_t var0, uint32_t var1);
uint32_t test_and2_logical(uint32_t var0, uint32_t var1);
uint32_t test_and3(uint32_t var0, uint32_t var1);
uint32_t test_and3_logical(uint32_t var0, uint32_t var1);
uint32_t test_and4(uint32_t var0, uint32_t var1);
uint32_t test_and4_logical(uint32_t var0, uint32_t var1);
uint32_t test_or1(uint32_t var0, uint32_t var1);
uint32_t test_or1_logical(uint32_t var0, uint32_t var1);
uint32_t test_or2(uint32_t var0, uint32_t var1);
uint32_t test_or2_logical(uint32_t var0, uint32_t var1);
uint32_t test_or3(uint32_t var0, uint32_t var1);
uint32_t test_or3_logical(uint32_t var0, uint32_t var1);
uint32_t test_or4(uint32_t var0, uint32_t var1);
uint32_t test_or4_logical(uint32_t var0, uint32_t var1);

uint32_t negative1(uint32_t var0, uint32_t var1){
    block0:
    return (((int)var0) < ((int)(var1 & 2147483647))) && (((int)var0) > ((int)0));
}

uint32_t negative1_logical(uint32_t var0, uint32_t var1){
    block0:
    return (((int)var0) < ((int)(var1 & 2147483647))) ? (((int)var0) > ((int)0)) : 0;
}

uint32_t negative2(uint32_t var0, uint32_t var1){
    block0:
    return (((int)var0) < ((int)var1)) && (((int)var0) >= ((int)0));
}

uint32_t negative2_logical(uint32_t var0, uint32_t var1){
    block0:
    return (((int)var0) < ((int)var1)) ? (((int)var0) >= ((int)0)) : 0;
}

uint32_t negative3(uint32_t var0, uint32_t var1, uint32_t var2){
    block0:
    return (((int)var0) < ((int)(var2 & 2147483647))) && (((int)var1) >= ((int)0));
}

uint32_t negative3_logical(uint32_t var0, uint32_t var1, uint32_t var2){
    block0:
    return (((int)var0) < ((int)(var2 & 2147483647))) ? (((int)var1) >= ((int)0)) : 0;
}

uint32_t negative4(uint32_t var0, uint32_t var1){
    block0:
    return (var0 != (var1 & 2147483647)) && (((int)var0) >= ((int)0));
}

uint32_t negative4_logical(uint32_t var0, uint32_t var1){
    block0:
    return (var0 != (var1 & 2147483647)) ? (((int)var0) >= ((int)0)) : 0;
}

uint32_t negative5(uint32_t var0, uint32_t var1){
    block0:
    return (((int)var0) < ((int)(var1 & 2147483647))) | (((int)var0) >= ((int)0));
}

uint32_t negative5_logical(uint32_t var0, uint32_t var1){
    block0:
    return (((int)var0) < ((int)(var1 & 2147483647))) ? 1 : (((int)var0) >= ((int)0));
}

uint32_t test_and1(uint32_t var0, uint32_t var1){
    block0:
    return (((int)var0) >= ((int)0)) && (((int)var0) < ((int)(var1 & 2147483647)));
}

uint32_t test_and1_logical(uint32_t var0, uint32_t var1){
    block0:
    return (((int)var0) >= ((int)0)) ? (((int)var0) < ((int)(var1 & 2147483647))) : 0;
}

uint32_t test_and2(uint32_t var0, uint32_t var1){
    block0:
    return (((int)var0) > ((int)-1)) && (((int)var0) <= ((int)(var1 & 2147483647)));
}

uint32_t test_and2_logical(uint32_t var0, uint32_t var1){
    block0:
    return (((int)var0) > ((int)-1)) ? (((int)var0) <= ((int)(var1 & 2147483647))) : 0;
}

uint32_t test_and3(uint32_t var0, uint32_t var1){
    block0:
    return (((int)(var1 & 2147483647)) > ((int)var0)) && (((int)var0) >= ((int)0));
}

uint32_t test_and3_logical(uint32_t var0, uint32_t var1){
    block0:
    return (((int)(var1 & 2147483647)) > ((int)var0)) ? (((int)var0) >= ((int)0)) : 0;
}

uint32_t test_and4(uint32_t var0, uint32_t var1){
    block0:
    return (((int)(var1 & 2147483647)) >= ((int)var0)) && (((int)var0) >= ((int)0));
}

uint32_t test_and4_logical(uint32_t var0, uint32_t var1){
    block0:
    return (((int)(var1 & 2147483647)) >= ((int)var0)) ? (((int)var0) >= ((int)0)) : 0;
}

uint32_t test_or1(uint32_t var0, uint32_t var1){
    block0:
    return (((int)var0) < ((int)0)) | (((int)var0) >= ((int)(var1 & 2147483647)));
}

uint32_t test_or1_logical(uint32_t var0, uint32_t var1){
    block0:
    return (((int)var0) < ((int)0)) ? 1 : (((int)var0) >= ((int)(var1 & 2147483647)));
}

uint32_t test_or2(uint32_t var0, uint32_t var1){
    block0:
    return (((int)var0) <= ((int)-1)) | (((int)var0) > ((int)(var1 & 2147483647)));
}

uint32_t test_or2_logical(uint32_t var0, uint32_t var1){
    block0:
    return (((int)var0) <= ((int)-1)) ? 1 : (((int)var0) > ((int)(var1 & 2147483647)));
}

uint32_t test_or3(uint32_t var0, uint32_t var1){
    block0:
    return (((int)(var1 & 2147483647)) <= ((int)var0)) | (((int)var0) < ((int)0));
}

uint32_t test_or3_logical(uint32_t var0, uint32_t var1){
    block0:
    return (((int)(var1 & 2147483647)) <= ((int)var0)) ? 1 : (((int)var0) < ((int)0));
}

uint32_t test_or4(uint32_t var0, uint32_t var1){
    block0:
    return (((int)(var1 & 2147483647)) < ((int)var0)) | (((int)var0) < ((int)0));
}

uint32_t test_or4_logical(uint32_t var0, uint32_t var1){
    block0:
    return (((int)(var1 & 2147483647)) < ((int)var0)) ? 1 : (((int)var0) < ((int)0));
}

