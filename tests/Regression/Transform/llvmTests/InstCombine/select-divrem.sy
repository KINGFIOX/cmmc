// This file is automatically generated by llvm2c from llvm/test/Transforms/InstCombine/select-divrem

// function declarations
uint8_t sdiv_common_dividend(uint32_t var0, uint8_t var1, uint8_t var2, uint8_t var3);
uint8_t sdiv_common_dividend_defined_cond(uint32_t var0, uint8_t var1, uint8_t var2, uint8_t var3);
uint8_t sdiv_common_divisor(uint32_t var0, uint8_t var1, uint8_t var2, uint8_t var3);
uint8_t sdiv_common_divisor_defined_cond(uint32_t var0, uint8_t var1, uint8_t var2, uint8_t var3);
uint8_t srem_common_dividend(uint32_t var0, uint8_t var1, uint8_t var2, uint8_t var3);
uint8_t srem_common_dividend_defined_cond(uint32_t var0, uint8_t var1, uint8_t var2, uint8_t var3);
uint8_t srem_common_divisor(uint32_t var0, uint8_t var1, uint8_t var2, uint8_t var3);
uint8_t srem_common_divisor_defined_cond(uint32_t var0, uint8_t var1, uint8_t var2, uint8_t var3);
uint8_t udiv_common_dividend(uint32_t var0, uint8_t var1, uint8_t var2, uint8_t var3);
uint8_t udiv_common_dividend_defined_cond(uint32_t var0, uint8_t var1, uint8_t var2, uint8_t var3);
uint8_t udiv_common_divisor(uint32_t var0, uint8_t var1, uint8_t var2, uint8_t var3);
uint8_t udiv_common_divisor_defined_cond(uint32_t var0, uint8_t var1, uint8_t var2, uint8_t var3);
uint8_t urem_common_dividend(uint32_t var0, uint8_t var1, uint8_t var2, uint8_t var3);
uint8_t urem_common_dividend_defined_cond(uint32_t var0, uint8_t var1, uint8_t var2, uint8_t var3);
uint8_t urem_common_divisor(uint32_t var0, uint8_t var1, uint8_t var2, uint8_t var3);
uint8_t urem_common_divisor_defined_cond(uint32_t var0, uint8_t var1, uint8_t var2, uint8_t var3);

uint8_t sdiv_common_dividend(uint32_t var0, uint8_t var1, uint8_t var2, uint8_t var3){
    block0:
    return var0 ? (((char)var1) / ((char)var3)) : (((char)var1) / ((char)var2));
}

uint8_t sdiv_common_dividend_defined_cond(uint32_t var0, uint8_t var1, uint8_t var2, uint8_t var3){
    block0:
    return var0 ? (((char)var1) / ((char)var3)) : (((char)var1) / ((char)var2));
}

uint8_t sdiv_common_divisor(uint32_t var0, uint8_t var1, uint8_t var2, uint8_t var3){
    block0:
    return var0 ? (((char)var3) / ((char)var1)) : (((char)var2) / ((char)var1));
}

uint8_t sdiv_common_divisor_defined_cond(uint32_t var0, uint8_t var1, uint8_t var2, uint8_t var3){
    block0:
    return var0 ? (((char)var3) / ((char)var1)) : (((char)var2) / ((char)var1));
}

uint8_t srem_common_dividend(uint32_t var0, uint8_t var1, uint8_t var2, uint8_t var3){
    block0:
    return var0 ? (((char)var1) % ((char)var3)) : (((char)var1) % ((char)var2));
}

uint8_t srem_common_dividend_defined_cond(uint32_t var0, uint8_t var1, uint8_t var2, uint8_t var3){
    block0:
    return var0 ? (((char)var1) % ((char)var3)) : (((char)var1) % ((char)var2));
}

uint8_t srem_common_divisor(uint32_t var0, uint8_t var1, uint8_t var2, uint8_t var3){
    block0:
    return var0 ? (((char)var3) % ((char)var1)) : (((char)var2) % ((char)var1));
}

uint8_t srem_common_divisor_defined_cond(uint32_t var0, uint8_t var1, uint8_t var2, uint8_t var3){
    block0:
    return var0 ? (((char)var3) % ((char)var1)) : (((char)var2) % ((char)var1));
}

uint8_t udiv_common_dividend(uint32_t var0, uint8_t var1, uint8_t var2, uint8_t var3){
    block0:
    return var0 ? (var1 / var3) : (var1 / var2);
}

uint8_t udiv_common_dividend_defined_cond(uint32_t var0, uint8_t var1, uint8_t var2, uint8_t var3){
    block0:
    return var0 ? (var1 / var3) : (var1 / var2);
}

uint8_t udiv_common_divisor(uint32_t var0, uint8_t var1, uint8_t var2, uint8_t var3){
    block0:
    return var0 ? (var3 / var1) : (var2 / var1);
}

uint8_t udiv_common_divisor_defined_cond(uint32_t var0, uint8_t var1, uint8_t var2, uint8_t var3){
    block0:
    return var0 ? (var3 / var1) : (var2 / var1);
}

uint8_t urem_common_dividend(uint32_t var0, uint8_t var1, uint8_t var2, uint8_t var3){
    block0:
    return var0 ? (var1 % var3) : (var1 % var2);
}

uint8_t urem_common_dividend_defined_cond(uint32_t var0, uint8_t var1, uint8_t var2, uint8_t var3){
    block0:
    return var0 ? (var1 % var3) : (var1 % var2);
}

uint8_t urem_common_divisor(uint32_t var0, uint8_t var1, uint8_t var2, uint8_t var3){
    block0:
    return var0 ? (var3 % var1) : (var2 % var1);
}

uint8_t urem_common_divisor_defined_cond(uint32_t var0, uint8_t var1, uint8_t var2, uint8_t var3){
    block0:
    return var0 ? (var3 % var1) : (var2 % var1);
}

