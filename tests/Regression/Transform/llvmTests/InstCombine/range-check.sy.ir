func @negative1(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = and i32 %var1, i32 2147483647;
    i32 %1 = strunc i32 %0 to i32;
    i32 %2 = strunc i32 %var0 to i32;
    i1 %3 = icmp sgt i32 %1, i32 %2;
    i1 %4 = icmp sgt i32 %2, i32 0;
    i1 %5 = and i1 %3, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @negative1_logical(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = and i32 %var1, i32 2147483647;
    i32 %1 = strunc i32 %0 to i32;
    i32 %2 = strunc i32 %var0 to i32;
    i1 %3 = icmp sgt i32 %1, i32 %2;
    i1 %4 = icmp sgt i32 %2, i32 0;
    i1 %5 = and i1 %3, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @negative2(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i32 %1 = strunc i32 %var1 to i32;
    i1 %2 = icmp slt i32 %0, i32 %1;
    i1 %3 = icmp sge i32 %0, i32 0;
    i1 %4 = and i1 %2, i1 %3;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @negative2_logical(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i32 %1 = strunc i32 %var1 to i32;
    i1 %2 = icmp slt i32 %0, i32 %1;
    i1 %3 = icmp sge i32 %0, i32 0;
    i1 %4 = and i1 %2, i1 %3;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @negative3(i32 %var0, i32 %var1, i32 %var2) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = and i32 %var2, i32 2147483647;
    i32 %1 = strunc i32 %0 to i32;
    i32 %2 = strunc i32 %var0 to i32;
    i1 %3 = icmp sgt i32 %1, i32 %2;
    i32 %4 = strunc i32 %var1 to i32;
    i1 %5 = icmp sge i32 %4, i32 0;
    i1 %6 = and i1 %3, i1 %5;
    i32 %7 = zext i1 %6 to i32;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @negative3_logical(i32 %var0, i32 %var1, i32 %var2) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = and i32 %var2, i32 2147483647;
    i32 %1 = strunc i32 %0 to i32;
    i32 %2 = strunc i32 %var0 to i32;
    i1 %3 = icmp sgt i32 %1, i32 %2;
    i32 %4 = strunc i32 %var1 to i32;
    i1 %5 = icmp sge i32 %4, i32 0;
    i1 %6 = and i1 %3, i1 %5;
    i32 %7 = zext i1 %6 to i32;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @negative4(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = and i32 %var1, i32 2147483647;
    i1 %1 = icmp neq i32 %var0, i32 %0;
    i32 %2 = strunc i32 %var0 to i32;
    i1 %3 = icmp sge i32 %2, i32 0;
    i1 %4 = and i1 %1, i1 %3;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @negative4_logical(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = and i32 %var1, i32 2147483647;
    i1 %1 = icmp neq i32 %var0, i32 %0;
    i32 %2 = strunc i32 %var0 to i32;
    i1 %3 = icmp sge i32 %2, i32 0;
    i1 %4 = and i1 %1, i1 %3;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @negative5(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = and i32 %var1, i32 2147483647;
    i32 %1 = strunc i32 %0 to i32;
    i32 %2 = strunc i32 %var0 to i32;
    i1 %3 = icmp sgt i32 %1, i32 %2;
    i32 %4 = zext i1 %3 to i32;
    i1 %5 = icmp sge i32 %2, i32 0;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %4, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @negative5_logical(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = and i32 %var1, i32 2147483647;
    i32 %1 = strunc i32 %0 to i32;
    i32 %2 = strunc i32 %var0 to i32;
    i1 %3 = icmp sgt i32 %1, i32 %2;
    i1 %4 = icmp sge i32 %2, i32 0;
    i1 %5 = or i1 %3, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @test_and1(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = and i32 %var1, i32 2147483647;
    i32 %1 = strunc i32 %0 to i32;
    i32 %2 = strunc i32 %var0 to i32;
    i1 %3 = icmp ugt i32 %1, i32 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @test_and1_logical(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i1 %1 = icmp sgt i32 %0, i32 -1;
    cbr i1 %1(prob = 0.5), ^lhsBlock, ^b;
  ^lhsBlock:
    i32 %2 = and i32 %var1, i32 2147483647;
    i32 %3 = strunc i32 %2 to i32;
    i1 %4 = icmp slt i32 %0, i32 %3;
    i32 %5 = zext i1 %4 to i32;
    ubr ^b;
  ^b:
    i32 %6 = phi [^entry, i32 0] [^lhsBlock, i32 %5];
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @test_and2(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = and i32 %var1, i32 2147483647;
    i32 %1 = strunc i32 %0 to i32;
    i32 %2 = strunc i32 %var0 to i32;
    i1 %3 = icmp uge i32 %1, i32 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @test_and2_logical(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i1 %1 = icmp sgt i32 %0, i32 -1;
    cbr i1 %1(prob = 0.5), ^lhsBlock, ^b;
  ^lhsBlock:
    i32 %2 = and i32 %var1, i32 2147483647;
    i32 %3 = strunc i32 %2 to i32;
    i1 %4 = icmp sle i32 %0, i32 %3;
    i32 %5 = zext i1 %4 to i32;
    ubr ^b;
  ^b:
    i32 %6 = phi [^entry, i32 0] [^lhsBlock, i32 %5];
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @test_and3(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = and i32 %var1, i32 2147483647;
    i32 %1 = strunc i32 %0 to i32;
    i32 %2 = strunc i32 %var0 to i32;
    i1 %3 = icmp ugt i32 %1, i32 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @test_and3_logical(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = and i32 %var1, i32 2147483647;
    i32 %1 = strunc i32 %0 to i32;
    i32 %2 = strunc i32 %var0 to i32;
    i1 %3 = icmp ugt i32 %1, i32 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @test_and4(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = and i32 %var1, i32 2147483647;
    i32 %1 = strunc i32 %0 to i32;
    i32 %2 = strunc i32 %var0 to i32;
    i1 %3 = icmp uge i32 %1, i32 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @test_and4_logical(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = and i32 %var1, i32 2147483647;
    i32 %1 = strunc i32 %0 to i32;
    i32 %2 = strunc i32 %var0 to i32;
    i1 %3 = icmp uge i32 %1, i32 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @test_or1(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = and i32 %var1, i32 2147483647;
    i32 %1 = strunc i32 %0 to i32;
    i32 %2 = strunc i32 %var0 to i32;
    i1 %3 = icmp sle i32 %1, i32 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = lshr i32 %2, i32 31;
    i32 %6 = or i32 %4, i32 %5;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @test_or1_logical(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i1 %1 = icmp slt i32 %0, i32 0;
    cbr i1 %1(prob = 0.5), ^b, ^rhsBlock;
  ^rhsBlock:
    i32 %2 = and i32 %var1, i32 2147483647;
    i32 %3 = strunc i32 %2 to i32;
    i1 %4 = icmp sge i32 %0, i32 %3;
    i32 %5 = zext i1 %4 to i32;
    ubr ^b;
  ^b:
    i32 %6 = phi [^entry, i32 1] [^rhsBlock, i32 %5];
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @test_or2(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = and i32 %var1, i32 2147483647;
    i32 %1 = strunc i32 %0 to i32;
    i32 %2 = strunc i32 %var0 to i32;
    i1 %3 = icmp slt i32 %1, i32 %2;
    i32 %4 = zext i1 %3 to i32;
    i1 %5 = icmp sle i32 %2, i32 -1;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %4, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @test_or2_logical(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i1 %1 = icmp slt i32 %0, i32 0;
    cbr i1 %1(prob = 0.5), ^b, ^rhsBlock;
  ^rhsBlock:
    i32 %2 = and i32 %var1, i32 2147483647;
    i32 %3 = strunc i32 %2 to i32;
    i1 %4 = icmp sgt i32 %0, i32 %3;
    i32 %5 = zext i1 %4 to i32;
    ubr ^b;
  ^b:
    i32 %6 = phi [^entry, i32 1] [^rhsBlock, i32 %5];
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @test_or3(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = and i32 %var1, i32 2147483647;
    i32 %1 = strunc i32 %0 to i32;
    i32 %2 = strunc i32 %var0 to i32;
    i1 %3 = icmp sle i32 %1, i32 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = lshr i32 %2, i32 31;
    i32 %6 = or i32 %4, i32 %5;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @test_or3_logical(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = and i32 %var1, i32 2147483647;
    i32 %1 = strunc i32 %0 to i32;
    i32 %2 = strunc i32 %var0 to i32;
    i1 %3 = icmp sle i32 %1, i32 %2;
    i32 %4 = lshr i32 %2, i32 31;
    i32 %5 = select i1 %3 ? i32 1 : i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @test_or4(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = and i32 %var1, i32 2147483647;
    i32 %1 = strunc i32 %0 to i32;
    i32 %2 = strunc i32 %var0 to i32;
    i1 %3 = icmp slt i32 %1, i32 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = lshr i32 %2, i32 31;
    i32 %6 = or i32 %4, i32 %5;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @test_or4_logical(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = and i32 %var1, i32 2147483647;
    i32 %1 = strunc i32 %0 to i32;
    i32 %2 = strunc i32 %var0 to i32;
    i1 %3 = icmp slt i32 %1, i32 %2;
    i32 %4 = lshr i32 %2, i32 31;
    i32 %5 = select i1 %3 ? i32 1 : i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
