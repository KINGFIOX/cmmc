// This file is automatically generated by llvm2c from llvm/test/Transforms/InstCombine/canonicalize-clamp-with-select-of-constant-threshold-pattern

// function declarations
uint32_t t0_select_cond_and_v0(uint32_t var0);
uint32_t t0_select_cond_and_v0_logical(uint32_t var0);
uint32_t t1_select_cond_and_v1(uint32_t var0);
uint32_t t1_select_cond_and_v1_logical(uint32_t var0);
uint32_t t2_select_cond_or_v0(uint32_t var0);
uint32_t t2_select_cond_or_v0_logical(uint32_t var0);
uint32_t t3_select_cond_or_v1(uint32_t var0);
uint32_t t3_select_cond_or_v1_logical(uint32_t var0);
uint32_t t4_select_cond_xor_v0(uint32_t var0);
uint32_t t4_select_cond_xor_v1(uint32_t var0);
uint32_t t5_select_cond_xor_v2(uint32_t var0);
uint32_t t5_select_cond_xor_v3(uint32_t var0);

uint32_t t0_select_cond_and_v0(uint32_t var0){
    uint32_t var1;
    uint32_t var2;
    block0:
    var1 = (((int)var0) <= ((int)32767));
    var2 = (((int)var0) >= ((int)-32768));
    return (var1 && var2) ? var0 : (var1 ? -32768 : 32767);
}

uint32_t t0_select_cond_and_v0_logical(uint32_t var0){
    uint32_t var1;
    uint32_t var2;
    uint32_t var3;
    block0:
    var1 = (((int)var0) <= ((int)32767));
    var2 = (((int)var0) >= ((int)-32768));
    var3 = (var1 ? -32768 : 32767);
    return (var1 ? var2 : 0) ? var0 : var3;
}

uint32_t t1_select_cond_and_v1(uint32_t var0){
    uint32_t var1;
    uint32_t var2;
    block0:
    var1 = (((int)var0) <= ((int)32767));
    var2 = (((int)var0) >= ((int)-32768));
    return (var1 && var2) ? var0 : (var2 ? 32767 : -32768);
}

uint32_t t1_select_cond_and_v1_logical(uint32_t var0){
    uint32_t var1;
    uint32_t var2;
    uint32_t var3;
    block0:
    var1 = (((int)var0) <= ((int)32767));
    var2 = (((int)var0) >= ((int)-32768));
    var3 = (var2 ? 32767 : -32768);
    return (var1 ? var2 : 0) ? var0 : var3;
}

uint32_t t2_select_cond_or_v0(uint32_t var0){
    uint32_t var1;
    uint32_t var2;
    block0:
    var1 = (((int)var0) > ((int)32767));
    var2 = (((int)var0) < ((int)-32768));
    return (var1 | var2) ? (var1 ? 32767 : -32768) : var0;
}

uint32_t t2_select_cond_or_v0_logical(uint32_t var0){
    uint32_t var1;
    uint32_t var2;
    uint32_t var3;
    block0:
    var1 = (((int)var0) > ((int)32767));
    var2 = (((int)var0) < ((int)-32768));
    var3 = (var1 ? 32767 : -32768);
    return (var1 ? 1 : var2) ? var3 : var0;
}

uint32_t t3_select_cond_or_v1(uint32_t var0){
    uint32_t var1;
    uint32_t var2;
    block0:
    var1 = (((int)var0) > ((int)32767));
    var2 = (((int)var0) < ((int)-32768));
    return (var1 | var2) ? (var2 ? -32768 : 32767) : var0;
}

uint32_t t3_select_cond_or_v1_logical(uint32_t var0){
    uint32_t var1;
    uint32_t var2;
    uint32_t var3;
    block0:
    var1 = (((int)var0) > ((int)32767));
    var2 = (((int)var0) < ((int)-32768));
    var3 = (var2 ? -32768 : 32767);
    return (var1 ? 1 : var2) ? var3 : var0;
}

uint32_t t4_select_cond_xor_v0(uint32_t var0){
    uint32_t var1;
    uint32_t var2;
    block0:
    var1 = (((int)var0) > ((int)32767));
    var2 = (((int)var0) > ((int)-32768));
    return (var1 ^ var2) ? var0 : (var1 ? 32767 : -32768);
}

uint32_t t4_select_cond_xor_v1(uint32_t var0){
    uint32_t var1;
    uint32_t var2;
    block0:
    var1 = (((int)var0) > ((int)32767));
    var2 = (((int)var0) > ((int)-32768));
    return (var1 ^ var2) ? var0 : (var2 ? 32767 : -32768);
}

uint32_t t5_select_cond_xor_v2(uint32_t var0){
    uint32_t var1;
    uint32_t var2;
    block0:
    var1 = (((int)var0) <= ((int)32767));
    var2 = (((int)var0) <= ((int)-32768));
    return (var1 ^ var2) ? var0 : (var2 ? -32768 : 32767);
}

uint32_t t5_select_cond_xor_v3(uint32_t var0){
    uint32_t var1;
    uint32_t var2;
    block0:
    var1 = (((int)var0) <= ((int)32767));
    var2 = (((int)var0) <= ((int)-32768));
    return (var1 ^ var2) ? var0 : (var1 ? -32768 : 32767);
}

