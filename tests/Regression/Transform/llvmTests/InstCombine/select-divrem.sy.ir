func @sdiv_common_dividend(i32 %var0, i8 %var1, i8 %var2, i8 %var3) -> i8 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var1 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = icmp neq i32 %var0, i32 0;
    cbr i1 %2(prob = 0.5), ^lhsBlock, ^rhsBlock;
  ^lhsBlock:
    i8 %3 = strunc i8 %var3 to i8;
    i32 %4 = sext i8 %3 to i32;
    i32 %5 = sdiv i32 %1, i32 %4;
    ubr ^b;
  ^rhsBlock:
    i8 %6 = strunc i8 %var2 to i8;
    i32 %7 = sext i8 %6 to i32;
    i32 %8 = sdiv i32 %1, i32 %7;
    ubr ^b;
  ^b:
    i32 %9 = phi [^lhsBlock, i32 %5] [^rhsBlock, i32 %8];
    i8 %10 = ztrunc i32 %9 to i8;
    ret i8 %10;
}
func @sdiv_common_dividend_defined_cond(i32 %var0, i8 %var1, i8 %var2, i8 %var3) -> i8 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var1 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = icmp neq i32 %var0, i32 0;
    cbr i1 %2(prob = 0.5), ^lhsBlock, ^rhsBlock;
  ^lhsBlock:
    i8 %3 = strunc i8 %var3 to i8;
    i32 %4 = sext i8 %3 to i32;
    i32 %5 = sdiv i32 %1, i32 %4;
    ubr ^b;
  ^rhsBlock:
    i8 %6 = strunc i8 %var2 to i8;
    i32 %7 = sext i8 %6 to i32;
    i32 %8 = sdiv i32 %1, i32 %7;
    ubr ^b;
  ^b:
    i32 %9 = phi [^lhsBlock, i32 %5] [^rhsBlock, i32 %8];
    i8 %10 = ztrunc i32 %9 to i8;
    ret i8 %10;
}
func @sdiv_common_divisor(i32 %var0, i8 %var1, i8 %var2, i8 %var3) -> i8 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var1 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = icmp neq i32 %var0, i32 0;
    cbr i1 %2(prob = 0.5), ^lhsBlock, ^rhsBlock;
  ^lhsBlock:
    i8 %3 = strunc i8 %var3 to i8;
    i32 %4 = sext i8 %3 to i32;
    i32 %5 = sdiv i32 %4, i32 %1;
    ubr ^b;
  ^rhsBlock:
    i8 %6 = strunc i8 %var2 to i8;
    i32 %7 = sext i8 %6 to i32;
    i32 %8 = sdiv i32 %7, i32 %1;
    ubr ^b;
  ^b:
    i32 %9 = phi [^lhsBlock, i32 %5] [^rhsBlock, i32 %8];
    i8 %10 = ztrunc i32 %9 to i8;
    ret i8 %10;
}
func @sdiv_common_divisor_defined_cond(i32 %var0, i8 %var1, i8 %var2, i8 %var3) -> i8 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var1 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = icmp neq i32 %var0, i32 0;
    cbr i1 %2(prob = 0.5), ^lhsBlock, ^rhsBlock;
  ^lhsBlock:
    i8 %3 = strunc i8 %var3 to i8;
    i32 %4 = sext i8 %3 to i32;
    i32 %5 = sdiv i32 %4, i32 %1;
    ubr ^b;
  ^rhsBlock:
    i8 %6 = strunc i8 %var2 to i8;
    i32 %7 = sext i8 %6 to i32;
    i32 %8 = sdiv i32 %7, i32 %1;
    ubr ^b;
  ^b:
    i32 %9 = phi [^lhsBlock, i32 %5] [^rhsBlock, i32 %8];
    i8 %10 = ztrunc i32 %9 to i8;
    ret i8 %10;
}
func @srem_common_dividend(i32 %var0, i8 %var1, i8 %var2, i8 %var3) -> i8 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var1 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = icmp neq i32 %var0, i32 0;
    cbr i1 %2(prob = 0.5), ^lhsBlock, ^rhsBlock;
  ^lhsBlock:
    i8 %3 = strunc i8 %var3 to i8;
    i32 %4 = sext i8 %3 to i32;
    i32 %5 = srem i32 %1, i32 %4;
    ubr ^b;
  ^rhsBlock:
    i8 %6 = strunc i8 %var2 to i8;
    i32 %7 = sext i8 %6 to i32;
    i32 %8 = srem i32 %1, i32 %7;
    ubr ^b;
  ^b:
    i32 %9 = phi [^lhsBlock, i32 %5] [^rhsBlock, i32 %8];
    i8 %10 = ztrunc i32 %9 to i8;
    ret i8 %10;
}
func @srem_common_dividend_defined_cond(i32 %var0, i8 %var1, i8 %var2, i8 %var3) -> i8 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var1 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = icmp neq i32 %var0, i32 0;
    cbr i1 %2(prob = 0.5), ^lhsBlock, ^rhsBlock;
  ^lhsBlock:
    i8 %3 = strunc i8 %var3 to i8;
    i32 %4 = sext i8 %3 to i32;
    i32 %5 = srem i32 %1, i32 %4;
    ubr ^b;
  ^rhsBlock:
    i8 %6 = strunc i8 %var2 to i8;
    i32 %7 = sext i8 %6 to i32;
    i32 %8 = srem i32 %1, i32 %7;
    ubr ^b;
  ^b:
    i32 %9 = phi [^lhsBlock, i32 %5] [^rhsBlock, i32 %8];
    i8 %10 = ztrunc i32 %9 to i8;
    ret i8 %10;
}
func @srem_common_divisor(i32 %var0, i8 %var1, i8 %var2, i8 %var3) -> i8 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var1 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = icmp neq i32 %var0, i32 0;
    cbr i1 %2(prob = 0.5), ^lhsBlock, ^rhsBlock;
  ^lhsBlock:
    i8 %3 = strunc i8 %var3 to i8;
    i32 %4 = sext i8 %3 to i32;
    i32 %5 = srem i32 %4, i32 %1;
    ubr ^b;
  ^rhsBlock:
    i8 %6 = strunc i8 %var2 to i8;
    i32 %7 = sext i8 %6 to i32;
    i32 %8 = srem i32 %7, i32 %1;
    ubr ^b;
  ^b:
    i32 %9 = phi [^lhsBlock, i32 %5] [^rhsBlock, i32 %8];
    i8 %10 = ztrunc i32 %9 to i8;
    ret i8 %10;
}
func @srem_common_divisor_defined_cond(i32 %var0, i8 %var1, i8 %var2, i8 %var3) -> i8 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var1 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = icmp neq i32 %var0, i32 0;
    cbr i1 %2(prob = 0.5), ^lhsBlock, ^rhsBlock;
  ^lhsBlock:
    i8 %3 = strunc i8 %var3 to i8;
    i32 %4 = sext i8 %3 to i32;
    i32 %5 = srem i32 %4, i32 %1;
    ubr ^b;
  ^rhsBlock:
    i8 %6 = strunc i8 %var2 to i8;
    i32 %7 = sext i8 %6 to i32;
    i32 %8 = srem i32 %7, i32 %1;
    ubr ^b;
  ^b:
    i32 %9 = phi [^lhsBlock, i32 %5] [^rhsBlock, i32 %8];
    i8 %10 = ztrunc i32 %9 to i8;
    ret i8 %10;
}
func @udiv_common_dividend(i32 %var0, i8 %var1, i8 %var2, i8 %var3) -> i8 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i1 %0 = icmp neq i32 %var0, i32 0;
    i32 %1 = zext i8 %var1 to i32;
    cbr i1 %0(prob = 0.5), ^lhsBlock, ^rhsBlock;
  ^lhsBlock:
    i32 %2 = zext i8 %var3 to i32;
    i32 %3 = sdiv i32 %1, i32 %2;
    ubr ^b;
  ^rhsBlock:
    i32 %4 = zext i8 %var2 to i32;
    i32 %5 = sdiv i32 %1, i32 %4;
    ubr ^b;
  ^b:
    i32 %6 = phi [^lhsBlock, i32 %3] [^rhsBlock, i32 %5];
    i8 %7 = ztrunc i32 %6 to i8;
    ret i8 %7;
}
func @udiv_common_dividend_defined_cond(i32 %var0, i8 %var1, i8 %var2, i8 %var3) -> i8 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i1 %0 = icmp neq i32 %var0, i32 0;
    i32 %1 = zext i8 %var1 to i32;
    cbr i1 %0(prob = 0.5), ^lhsBlock, ^rhsBlock;
  ^lhsBlock:
    i32 %2 = zext i8 %var3 to i32;
    i32 %3 = sdiv i32 %1, i32 %2;
    ubr ^b;
  ^rhsBlock:
    i32 %4 = zext i8 %var2 to i32;
    i32 %5 = sdiv i32 %1, i32 %4;
    ubr ^b;
  ^b:
    i32 %6 = phi [^lhsBlock, i32 %3] [^rhsBlock, i32 %5];
    i8 %7 = ztrunc i32 %6 to i8;
    ret i8 %7;
}
func @udiv_common_divisor(i32 %var0, i8 %var1, i8 %var2, i8 %var3) -> i8 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i1 %0 = icmp neq i32 %var0, i32 0;
    i32 %1 = zext i8 %var1 to i32;
    cbr i1 %0(prob = 0.5), ^lhsBlock, ^rhsBlock;
  ^lhsBlock:
    i32 %2 = zext i8 %var3 to i32;
    i32 %3 = sdiv i32 %2, i32 %1;
    ubr ^b;
  ^rhsBlock:
    i32 %4 = zext i8 %var2 to i32;
    i32 %5 = sdiv i32 %4, i32 %1;
    ubr ^b;
  ^b:
    i32 %6 = phi [^lhsBlock, i32 %3] [^rhsBlock, i32 %5];
    i8 %7 = ztrunc i32 %6 to i8;
    ret i8 %7;
}
func @udiv_common_divisor_defined_cond(i32 %var0, i8 %var1, i8 %var2, i8 %var3) -> i8 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i1 %0 = icmp neq i32 %var0, i32 0;
    i32 %1 = zext i8 %var1 to i32;
    cbr i1 %0(prob = 0.5), ^lhsBlock, ^rhsBlock;
  ^lhsBlock:
    i32 %2 = zext i8 %var3 to i32;
    i32 %3 = sdiv i32 %2, i32 %1;
    ubr ^b;
  ^rhsBlock:
    i32 %4 = zext i8 %var2 to i32;
    i32 %5 = sdiv i32 %4, i32 %1;
    ubr ^b;
  ^b:
    i32 %6 = phi [^lhsBlock, i32 %3] [^rhsBlock, i32 %5];
    i8 %7 = ztrunc i32 %6 to i8;
    ret i8 %7;
}
func @urem_common_dividend(i32 %var0, i8 %var1, i8 %var2, i8 %var3) -> i8 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i1 %0 = icmp neq i32 %var0, i32 0;
    i32 %1 = zext i8 %var1 to i32;
    cbr i1 %0(prob = 0.5), ^lhsBlock, ^rhsBlock;
  ^lhsBlock:
    i32 %2 = zext i8 %var3 to i32;
    i32 %3 = srem i32 %1, i32 %2;
    ubr ^b;
  ^rhsBlock:
    i32 %4 = zext i8 %var2 to i32;
    i32 %5 = srem i32 %1, i32 %4;
    ubr ^b;
  ^b:
    i32 %6 = phi [^lhsBlock, i32 %3] [^rhsBlock, i32 %5];
    i8 %7 = ztrunc i32 %6 to i8;
    ret i8 %7;
}
func @urem_common_dividend_defined_cond(i32 %var0, i8 %var1, i8 %var2, i8 %var3) -> i8 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i1 %0 = icmp neq i32 %var0, i32 0;
    i32 %1 = zext i8 %var1 to i32;
    cbr i1 %0(prob = 0.5), ^lhsBlock, ^rhsBlock;
  ^lhsBlock:
    i32 %2 = zext i8 %var3 to i32;
    i32 %3 = srem i32 %1, i32 %2;
    ubr ^b;
  ^rhsBlock:
    i32 %4 = zext i8 %var2 to i32;
    i32 %5 = srem i32 %1, i32 %4;
    ubr ^b;
  ^b:
    i32 %6 = phi [^lhsBlock, i32 %3] [^rhsBlock, i32 %5];
    i8 %7 = ztrunc i32 %6 to i8;
    ret i8 %7;
}
func @urem_common_divisor(i32 %var0, i8 %var1, i8 %var2, i8 %var3) -> i8 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i1 %0 = icmp neq i32 %var0, i32 0;
    i32 %1 = zext i8 %var1 to i32;
    cbr i1 %0(prob = 0.5), ^lhsBlock, ^rhsBlock;
  ^lhsBlock:
    i32 %2 = zext i8 %var3 to i32;
    i32 %3 = srem i32 %2, i32 %1;
    ubr ^b;
  ^rhsBlock:
    i32 %4 = zext i8 %var2 to i32;
    i32 %5 = srem i32 %4, i32 %1;
    ubr ^b;
  ^b:
    i32 %6 = phi [^lhsBlock, i32 %3] [^rhsBlock, i32 %5];
    i8 %7 = ztrunc i32 %6 to i8;
    ret i8 %7;
}
func @urem_common_divisor_defined_cond(i32 %var0, i8 %var1, i8 %var2, i8 %var3) -> i8 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i1 %0 = icmp neq i32 %var0, i32 0;
    i32 %1 = zext i8 %var1 to i32;
    cbr i1 %0(prob = 0.5), ^lhsBlock, ^rhsBlock;
  ^lhsBlock:
    i32 %2 = zext i8 %var3 to i32;
    i32 %3 = srem i32 %2, i32 %1;
    ubr ^b;
  ^rhsBlock:
    i32 %4 = zext i8 %var2 to i32;
    i32 %5 = srem i32 %4, i32 %1;
    ubr ^b;
  ^b:
    i32 %6 = phi [^lhsBlock, i32 %3] [^rhsBlock, i32 %5];
    i8 %7 = ztrunc i32 %6 to i8;
    ret i8 %7;
}
