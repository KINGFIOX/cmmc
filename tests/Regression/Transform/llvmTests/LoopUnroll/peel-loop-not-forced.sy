// This file is automatically generated by llvm2c from llvm/test/Transforms/LoopUnroll/peel-loop-not-forced

// function declarations
uint32_t cycled_phis(uint32_t var0, uint32_t var1);
uint32_t invariant_backedge_1(uint32_t var0, uint32_t var1);
uint32_t invariant_backedge_2(uint32_t var0, uint32_t var1);
uint32_t invariant_backedge_3(uint32_t var0, uint32_t var1);
uint32_t invariant_backedge_limited_by_size(uint32_t var0, uint32_t var1);
uint32_t invariant_backedge_negative(uint32_t var0, uint32_t var1);

uint32_t cycled_phis(uint32_t var0, uint32_t var1){
    uint32_t var2_phi;
    uint32_t var3_phi;
    uint32_t var4_phi;
    uint32_t var5_phi;
    uint32_t var6;
    uint32_t var7;
    block0:
    var2_phi = 0;
    var3_phi = var0;
    var4_phi = var1;
    var5_phi = 0;
    goto block1;
    block1:
    var6 = (var5_phi + var3_phi);
    var7 = (var2_phi + 1);
    if (((int)var2_phi) < ((int)1000)) {
        var2_phi = var7;
        var3_phi = var4_phi;
        var4_phi = var3_phi;
        var5_phi = var6;
        goto block1;
    } else {
        return var5_phi;
    }
}

uint32_t invariant_backedge_1(uint32_t var0, uint32_t var1){
    uint32_t var2_phi;
    uint32_t var3_phi;
    uint32_t var4_phi;
    uint32_t var5;
    uint32_t var6;
    block0:
    var2_phi = 0;
    var3_phi = 0;
    var4_phi = var0;
    goto block1;
    block1:
    var5 = (var3_phi + var4_phi);
    var6 = (var2_phi + 1);
    if (((int)var2_phi) < ((int)1000)) {
        var2_phi = var6;
        var3_phi = var5;
        var4_phi = var1;
        goto block1;
    } else {
        return var3_phi;
    }
}

uint32_t invariant_backedge_2(uint32_t var0, uint32_t var1){
    uint32_t var2_phi;
    uint32_t var3_phi;
    uint32_t var4_phi;
    uint32_t var5_phi;
    uint32_t var6;
    uint32_t var7;
    block0:
    var2_phi = 0;
    var3_phi = 0;
    var4_phi = var0;
    var5_phi = var0;
    goto block1;
    block1:
    var6 = (var3_phi + var5_phi);
    var7 = (var2_phi + 1);
    if (((int)var2_phi) < ((int)1000)) {
        var2_phi = var7;
        var3_phi = var6;
        var4_phi = var1;
        var5_phi = var4_phi;
        goto block1;
    } else {
        return var3_phi;
    }
}

uint32_t invariant_backedge_3(uint32_t var0, uint32_t var1){
    uint32_t var2_phi;
    uint32_t var3_phi;
    uint32_t var4_phi;
    uint32_t var5_phi;
    uint32_t var6_phi;
    uint32_t var7;
    uint32_t var8;
    block0:
    var2_phi = 0;
    var3_phi = 0;
    var4_phi = var0;
    var5_phi = var0;
    var6_phi = var0;
    goto block1;
    block1:
    var7 = (var3_phi + var6_phi);
    var8 = (var2_phi + 1);
    if (((int)var2_phi) < ((int)1000)) {
        var2_phi = var8;
        var3_phi = var7;
        var4_phi = var1;
        var5_phi = var4_phi;
        var6_phi = var5_phi;
        goto block1;
    } else {
        return var3_phi;
    }
}

uint32_t invariant_backedge_limited_by_size(uint32_t var0, uint32_t var1){
    uint32_t var2_phi;
    uint32_t var3_phi;
    uint32_t var4_phi;
    uint32_t var5_phi;
    uint32_t var6_phi;
    uint32_t var7;
    uint32_t var8;
    uint32_t var9;
    uint32_t var10;
    uint32_t var11;
    uint32_t var12;
    uint32_t var13;
    uint32_t var14;
    block0:
    var2_phi = 0;
    var3_phi = 0;
    var4_phi = var0;
    var5_phi = var0;
    var6_phi = var0;
    goto block1;
    block1:
    var7 = (var3_phi + var6_phi);
    var8 = (var2_phi + 1);
    var9 = (var7 + var6_phi);
    var10 = (var7 + var6_phi);
    var11 = (var7 + var6_phi);
    var12 = (var7 + var6_phi);
    var13 = (var7 + var6_phi);
    var14 = (var7 + var6_phi);
    if (((int)var2_phi) < ((int)1000)) {
        var2_phi = var8;
        var3_phi = var7;
        var4_phi = var1;
        var5_phi = var4_phi;
        var6_phi = var5_phi;
        goto block1;
    } else {
        return var3_phi;
    }
}

uint32_t invariant_backedge_negative(uint32_t var0, uint32_t var1){
    uint32_t var2_phi;
    uint32_t var3_phi;
    uint32_t var4_phi;
    uint32_t var5;
    uint32_t var6;
    uint32_t var7;
    uint32_t var8;
    uint32_t var9;
    uint32_t var10;
    uint32_t var11;
    uint32_t var12;
    uint32_t var13;
    uint32_t var14;
    uint32_t var15;
    uint32_t var16;
    uint32_t var17;
    uint32_t var18;
    uint32_t var19;
    uint32_t var20;
    block0:
    var2_phi = 0;
    var3_phi = 0;
    var4_phi = var0;
    goto block1;
    block1:
    var5 = (var3_phi + var4_phi);
    var6 = (var5 + var4_phi);
    var7 = (var5 + var4_phi);
    var8 = (var5 + var4_phi);
    var9 = (var5 + var4_phi);
    var10 = (var5 + var4_phi);
    var11 = (var5 + var4_phi);
    var12 = (var5 + var4_phi);
    var13 = (var5 + var4_phi);
    var14 = (var5 + var4_phi);
    var15 = (var5 + var4_phi);
    var16 = (var5 + var4_phi);
    var17 = (var5 + var4_phi);
    var18 = (var5 + var4_phi);
    var19 = (var5 + var4_phi);
    var20 = (var2_phi + 1);
    if (((int)var2_phi) < ((int)1000)) {
        var2_phi = var20;
        var3_phi = var6;
        var4_phi = var1;
        goto block1;
    } else {
        return var3_phi;
    }
}

