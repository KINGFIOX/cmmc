func @cycled_phis(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ubr ^if.then;
  ^if.then:
    i32 %0 = phi [^entry, i32 1] [^if.then, i32 %5];
    i32 %1 = phi [^entry, i32 %var0] [^if.then, i32 %4];
    i32 %2 = strunc i32 %0 to i32;
    i1 %3 = scmp lt i32 %2, i32 1000;
    i32 %4 = add i32 %var1, i32 %1;
    i32 %5 = add i32 %0, i32 1;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
  ^if.else:
    ret i32 %1;
}
func @invariant_backedge_1(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ubr ^if.then;
  ^if.then:
    i32 %0 = phi [^entry, i32 1] [^if.then, i32 %5];
    i32 %1 = phi [^entry, i32 %var0] [^if.then, i32 %4];
    i32 %2 = strunc i32 %0 to i32;
    i1 %3 = scmp lt i32 %2, i32 1000;
    i32 %4 = add i32 %var1, i32 %1;
    i32 %5 = add i32 %0, i32 1;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
  ^if.else:
    ret i32 %1;
}
func @invariant_backedge_2(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ubr ^if.then;
  ^if.then:
    i32 %0 = phi [^entry, i32 1] [^if.then, i32 %5];
    i32 %1 = phi [^entry, i32 %var0] [^if.then, i32 %4];
    i32 %2 = strunc i32 %0 to i32;
    i1 %3 = scmp lt i32 %2, i32 1000;
    i32 %4 = add i32 %var1, i32 %1;
    i32 %5 = add i32 %0, i32 1;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
  ^if.else:
    ret i32 %1;
}
func @invariant_backedge_3(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ubr ^if.then;
  ^if.then:
    i32 %0 = phi [^entry, i32 1] [^if.then, i32 %5];
    i32 %1 = phi [^entry, i32 %var0] [^if.then, i32 %4];
    i32 %2 = strunc i32 %0 to i32;
    i1 %3 = scmp lt i32 %2, i32 1000;
    i32 %4 = add i32 %var1, i32 %1;
    i32 %5 = add i32 %0, i32 1;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
  ^if.else:
    ret i32 %1;
}
func @invariant_backedge_limited_by_size(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ubr ^if.then;
  ^if.then:
    i32 %0 = phi [^entry, i32 1] [^if.then, i32 %5];
    i32 %1 = phi [^entry, i32 %var0] [^if.then, i32 %4];
    i32 %2 = strunc i32 %0 to i32;
    i1 %3 = scmp lt i32 %2, i32 1000;
    i32 %4 = add i32 %var1, i32 %1;
    i32 %5 = add i32 %0, i32 1;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
  ^if.else:
    ret i32 %1;
}
func @invariant_backedge_negative(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = mul i32 %var0, i32 2;
    i32 %1 = mul i32 %var1, i32 2;
    ubr ^if.then;
  ^if.then:
    i32 %2 = phi [^entry, i32 1] [^if.then, i32 %7];
    i32 %3 = phi [^entry, i32 %0] [^if.then, i32 %4];
    i32 %4 = add i32 %1, i32 %3;
    i32 %5 = strunc i32 %2 to i32;
    i1 %6 = scmp lt i32 %5, i32 1000;
    i32 %7 = add i32 %2, i32 1;
    cbr i1 %6(prob = 0.5), ^if.then, ^if.else;
  ^if.else:
    ret i32 %3;
}
