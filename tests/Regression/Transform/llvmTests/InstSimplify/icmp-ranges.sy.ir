func @and_eq_eq(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i32 %1 = xor i32 %0, i32 17;
    i32 %2 = xor i32 %0, i32 13;
    i32 %3 = or i32 %1, i32 %2;
    i1 %4 = scmp eq i32 %3, i32 0;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @and_eq_eq_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i32 %1 = xor i32 %0, i32 17;
    i32 %2 = xor i32 %0, i32 23;
    i32 %3 = or i32 %1, i32 %2;
    i1 %4 = scmp eq i32 %3, i32 0;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @and_eq_ne(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp eq i32 %0, i32 13;
    i1 %2 = scmp neq i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_eq_ne_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp eq i32 %0, i32 23;
    i1 %2 = scmp neq i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_eq_sge(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp eq i32 %3, i32 13;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_eq_sge_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp eq i32 %3, i32 23;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_eq_sgt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp eq i32 %3, i32 13;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_eq_sgt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp eq i32 %3, i32 23;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_eq_sle(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp eq i32 %3, i32 13;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_eq_sle_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp eq i32 %3, i32 23;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_eq_slt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp eq i32 %3, i32 13;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_eq_slt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp eq i32 %3, i32 23;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_eq_uge(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp eq i32 %0, i32 13;
    i1 %2 = scmp ge i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_eq_uge_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp eq i32 %0, i32 23;
    i1 %2 = scmp ge i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_eq_ugt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp eq i32 %0, i32 13;
    i1 %2 = scmp gt i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_eq_ugt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp eq i32 %0, i32 23;
    i1 %2 = scmp gt i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_eq_ule(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp eq i32 %0, i32 13;
    i1 %2 = scmp le i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_eq_ule_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp eq i32 %0, i32 23;
    i1 %2 = scmp le i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_eq_ult(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp eq i32 %0, i32 13;
    i1 %2 = scmp lt i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_eq_ult_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp eq i32 %0, i32 23;
    i1 %2 = scmp lt i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_ne_eq(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp neq i32 %0, i32 13;
    i1 %2 = scmp eq i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_ne_eq_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp neq i32 %0, i32 23;
    i1 %2 = scmp eq i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_ne_ne(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp neq i32 %0, i32 13;
    i1 %2 = scmp neq i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_ne_ne_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp neq i32 %0, i32 23;
    i1 %2 = scmp neq i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_ne_sge(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp neq i32 %3, i32 13;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_ne_sge_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp neq i32 %3, i32 23;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_ne_sgt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp neq i32 %3, i32 13;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_ne_sgt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp neq i32 %3, i32 23;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_ne_sle(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp neq i32 %3, i32 13;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_ne_sle_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp neq i32 %3, i32 23;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_ne_slt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp neq i32 %3, i32 13;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_ne_slt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp neq i32 %3, i32 23;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_ne_uge(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp neq i32 %0, i32 13;
    i1 %2 = scmp ge i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_ne_uge_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp neq i32 %0, i32 23;
    i1 %2 = scmp ge i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_ne_ugt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp neq i32 %0, i32 13;
    i1 %2 = scmp gt i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_ne_ugt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp neq i32 %0, i32 23;
    i1 %2 = scmp gt i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_ne_ule(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp neq i32 %0, i32 13;
    i1 %2 = scmp le i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_ne_ule_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp neq i32 %0, i32 23;
    i1 %2 = scmp le i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_ne_ult(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp neq i32 %0, i32 13;
    i1 %2 = scmp lt i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_ne_ult_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp neq i32 %0, i32 23;
    i1 %2 = scmp lt i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_sge_eq(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 12;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp eq i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_sge_eq_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 22;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp eq i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_sge_ne(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 12;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp neq i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_sge_ne_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 22;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp neq i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_sge_sge(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 12;
    i1 %3 = scmp ge i32 %1, i32 17;
    i1 %4 = and i1 %2, i1 %3;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @and_sge_sge_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 22;
    i1 %3 = scmp ge i32 %1, i32 17;
    i1 %4 = and i1 %2, i1 %3;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @and_sge_sgt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 12;
    i1 %3 = scmp gt i32 %1, i32 17;
    i1 %4 = and i1 %2, i1 %3;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @and_sge_sgt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 22;
    i1 %3 = scmp gt i32 %1, i32 17;
    i1 %4 = and i1 %2, i1 %3;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @and_sge_sle(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i32 %2 = add i32 %1, i32 -13;
    i1 %3 = ucmp lt i32 %2, i32 5;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_sge_sle_swap() -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ret i32 0;
}
func @and_sge_slt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i32 %2 = add i32 %1, i32 -13;
    i1 %3 = ucmp lt i32 %2, i32 4;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_sge_slt_swap() -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ret i32 0;
}
func @and_sge_uge(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 12;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp ge i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_sge_uge_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 22;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp ge i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_sge_ugt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 12;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp gt i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_sge_ugt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 22;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp gt i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_sge_ule(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 12;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp le i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_sge_ule_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 22;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp le i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_sge_ult(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 12;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp lt i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_sge_ult_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 22;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp lt i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_sgt_eq(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 13;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp eq i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_sgt_eq_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 23;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp eq i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_sgt_ne(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 13;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp neq i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_sgt_ne_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 23;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp neq i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_sgt_sge(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 13;
    i1 %3 = scmp ge i32 %1, i32 17;
    i1 %4 = and i1 %2, i1 %3;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @and_sgt_sge_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 23;
    i1 %3 = scmp ge i32 %1, i32 17;
    i1 %4 = and i1 %2, i1 %3;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @and_sgt_sgt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 13;
    i1 %3 = scmp gt i32 %1, i32 17;
    i1 %4 = and i1 %2, i1 %3;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @and_sgt_sgt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 23;
    i1 %3 = scmp gt i32 %1, i32 17;
    i1 %4 = and i1 %2, i1 %3;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @and_sgt_sle(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i32 %2 = add i32 %1, i32 -14;
    i1 %3 = ucmp lt i32 %2, i32 4;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_sgt_sle_swap() -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ret i32 0;
}
func @and_sgt_slt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i32 %2 = add i32 %1, i32 -14;
    i1 %3 = ucmp lt i32 %2, i32 3;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_sgt_slt_swap() -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ret i32 0;
}
func @and_sgt_uge(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 13;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp ge i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_sgt_uge_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 23;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp ge i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_sgt_ugt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 13;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp gt i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_sgt_ugt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 23;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp gt i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_sgt_ule(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 13;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp le i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_sgt_ule_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 23;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp le i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_sgt_ult(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 13;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp lt i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_sgt_ult_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 23;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp lt i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_sle_eq(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 14;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp eq i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_sle_eq_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 24;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp eq i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_sle_ne(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 14;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp neq i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_sle_ne_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 24;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp neq i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_sle_sge() -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ret i32 0;
}
func @and_sle_sge_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i32 %2 = add i32 %1, i32 -17;
    i1 %3 = ucmp lt i32 %2, i32 7;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_sle_sgt() -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ret i32 0;
}
func @and_sle_sgt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i32 %2 = add i32 %1, i32 -18;
    i1 %3 = ucmp lt i32 %2, i32 6;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_sle_sle(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 14;
    i1 %3 = scmp le i32 %1, i32 17;
    i1 %4 = and i1 %2, i1 %3;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @and_sle_sle_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 24;
    i1 %3 = scmp le i32 %1, i32 17;
    i1 %4 = and i1 %2, i1 %3;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @and_sle_slt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 14;
    i1 %3 = scmp lt i32 %1, i32 17;
    i1 %4 = and i1 %2, i1 %3;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @and_sle_slt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 24;
    i1 %3 = scmp lt i32 %1, i32 17;
    i1 %4 = and i1 %2, i1 %3;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @and_sle_uge(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 14;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp ge i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_sle_uge_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 24;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp ge i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_sle_ugt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 14;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp gt i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_sle_ugt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 24;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp gt i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_sle_ule(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 14;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp le i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_sle_ule_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 24;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp le i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_sle_ult(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 14;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp lt i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_sle_ult_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 24;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp lt i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_slt_eq(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 13;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp eq i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_slt_eq_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 23;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp eq i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_slt_ne(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 13;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp neq i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_slt_ne_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 23;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp neq i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_slt_sge() -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ret i32 0;
}
func @and_slt_sge_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i32 %2 = add i32 %1, i32 -17;
    i1 %3 = ucmp lt i32 %2, i32 6;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_slt_sgt() -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ret i32 0;
}
func @and_slt_sgt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i32 %2 = add i32 %1, i32 -18;
    i1 %3 = ucmp lt i32 %2, i32 5;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_slt_sle(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 13;
    i1 %3 = scmp le i32 %1, i32 17;
    i1 %4 = and i1 %2, i1 %3;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @and_slt_sle_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 23;
    i1 %3 = scmp le i32 %1, i32 17;
    i1 %4 = and i1 %2, i1 %3;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @and_slt_slt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 13;
    i1 %3 = scmp lt i32 %1, i32 17;
    i1 %4 = and i1 %2, i1 %3;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @and_slt_slt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 23;
    i1 %3 = scmp lt i32 %1, i32 17;
    i1 %4 = and i1 %2, i1 %3;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @and_slt_uge(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 13;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp ge i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_slt_uge_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 23;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp ge i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_slt_ugt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 13;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp gt i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_slt_ugt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 23;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp gt i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_slt_ule(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 13;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp le i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_slt_ule_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 23;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp le i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_slt_ult(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 13;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp lt i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_slt_ult_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 23;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp lt i32 %3, i32 17;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_uge_eq(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp gt i32 %0, i32 12;
    i1 %2 = scmp eq i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_uge_eq_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp gt i32 %0, i32 22;
    i1 %2 = scmp eq i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_uge_ne(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp gt i32 %0, i32 12;
    i1 %2 = scmp neq i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_uge_ne_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp gt i32 %0, i32 22;
    i1 %2 = scmp neq i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_uge_sge(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp gt i32 %3, i32 12;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_uge_sge_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp gt i32 %3, i32 22;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_uge_sgt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp gt i32 %3, i32 12;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_uge_sgt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp gt i32 %3, i32 22;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_uge_sle(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp gt i32 %3, i32 12;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_uge_sle_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp gt i32 %3, i32 22;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_uge_slt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp gt i32 %3, i32 12;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_uge_slt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp gt i32 %3, i32 22;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_uge_uge(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp gt i32 %0, i32 12;
    i1 %2 = scmp ge i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_uge_uge_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp gt i32 %0, i32 22;
    i1 %2 = scmp ge i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_uge_ugt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp gt i32 %0, i32 12;
    i1 %2 = scmp gt i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_uge_ugt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp gt i32 %0, i32 22;
    i1 %2 = scmp gt i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_uge_ule(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i32 %1 = add i32 %0, i32 -13;
    i1 %2 = ucmp lt i32 %1, i32 5;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = ztrunc i32 %3 to i32;
    ret i32 %4;
}
func @and_uge_ule_swap() -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ret i32 0;
}
func @and_uge_ult(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i32 %1 = add i32 %0, i32 -13;
    i1 %2 = ucmp lt i32 %1, i32 4;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = ztrunc i32 %3 to i32;
    ret i32 %4;
}
func @and_uge_ult_swap() -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ret i32 0;
}
func @and_ugt_eq(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp gt i32 %0, i32 13;
    i1 %2 = scmp eq i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_ugt_eq_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp gt i32 %0, i32 23;
    i1 %2 = scmp eq i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_ugt_ne(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp gt i32 %0, i32 13;
    i1 %2 = scmp neq i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_ugt_ne_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp gt i32 %0, i32 23;
    i1 %2 = scmp neq i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_ugt_sge(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp gt i32 %3, i32 13;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_ugt_sge_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp gt i32 %3, i32 23;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_ugt_sgt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp gt i32 %3, i32 13;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_ugt_sgt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp gt i32 %3, i32 23;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_ugt_sle(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp gt i32 %3, i32 13;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_ugt_sle_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp gt i32 %3, i32 23;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_ugt_slt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp gt i32 %3, i32 13;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_ugt_slt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp gt i32 %3, i32 23;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_ugt_uge(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp gt i32 %0, i32 13;
    i1 %2 = scmp ge i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_ugt_uge_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp gt i32 %0, i32 23;
    i1 %2 = scmp ge i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_ugt_ugt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp gt i32 %0, i32 13;
    i1 %2 = scmp gt i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_ugt_ugt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp gt i32 %0, i32 23;
    i1 %2 = scmp gt i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_ugt_ule(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i32 %1 = add i32 %0, i32 -14;
    i1 %2 = ucmp lt i32 %1, i32 4;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = ztrunc i32 %3 to i32;
    ret i32 %4;
}
func @and_ugt_ule_swap() -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ret i32 0;
}
func @and_ugt_ult(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i32 %1 = add i32 %0, i32 -14;
    i1 %2 = ucmp lt i32 %1, i32 3;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = ztrunc i32 %3 to i32;
    ret i32 %4;
}
func @and_ugt_ult_swap() -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ret i32 0;
}
func @and_ule_eq(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp lt i32 %0, i32 14;
    i1 %2 = scmp eq i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_ule_eq_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp lt i32 %0, i32 24;
    i1 %2 = scmp eq i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_ule_ne(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp lt i32 %0, i32 14;
    i1 %2 = scmp neq i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_ule_ne_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp lt i32 %0, i32 24;
    i1 %2 = scmp neq i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_ule_sge(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp lt i32 %3, i32 14;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_ule_sge_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp lt i32 %3, i32 24;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_ule_sgt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp lt i32 %3, i32 14;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_ule_sgt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp lt i32 %3, i32 24;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_ule_sle(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp lt i32 %3, i32 14;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_ule_sle_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp lt i32 %3, i32 24;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_ule_slt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp lt i32 %3, i32 14;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_ule_slt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp lt i32 %3, i32 24;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_ule_uge() -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ret i32 0;
}
func @and_ule_uge_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i32 %1 = add i32 %0, i32 -17;
    i1 %2 = ucmp lt i32 %1, i32 7;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = ztrunc i32 %3 to i32;
    ret i32 %4;
}
func @and_ule_ugt() -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ret i32 0;
}
func @and_ule_ugt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i32 %1 = add i32 %0, i32 -18;
    i1 %2 = ucmp lt i32 %1, i32 6;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = ztrunc i32 %3 to i32;
    ret i32 %4;
}
func @and_ule_ule(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp lt i32 %0, i32 14;
    i1 %2 = scmp le i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_ule_ule_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp lt i32 %0, i32 24;
    i1 %2 = scmp le i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_ule_ult(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp lt i32 %0, i32 14;
    i1 %2 = scmp lt i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_ule_ult_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp lt i32 %0, i32 24;
    i1 %2 = scmp lt i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_ult_eq(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp lt i32 %0, i32 13;
    i1 %2 = scmp eq i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_ult_eq_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp lt i32 %0, i32 23;
    i1 %2 = scmp eq i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_ult_ne(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp lt i32 %0, i32 13;
    i1 %2 = scmp neq i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_ult_ne_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp lt i32 %0, i32 23;
    i1 %2 = scmp neq i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_ult_sge(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp lt i32 %3, i32 13;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_ult_sge_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp lt i32 %3, i32 23;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_ult_sgt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp lt i32 %3, i32 13;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_ult_sgt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp lt i32 %3, i32 23;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_ult_sle(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp lt i32 %3, i32 13;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_ult_sle_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp lt i32 %3, i32 23;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_ult_slt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp lt i32 %3, i32 13;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_ult_slt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 17;
    i32 %3 = zext i8 %var0 to i32;
    i1 %4 = scmp lt i32 %3, i32 23;
    i1 %5 = and i1 %2, i1 %4;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @and_ult_uge() -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ret i32 0;
}
func @and_ult_uge_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i32 %1 = add i32 %0, i32 -17;
    i1 %2 = ucmp lt i32 %1, i32 6;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = ztrunc i32 %3 to i32;
    ret i32 %4;
}
func @and_ult_ugt() -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ret i32 0;
}
func @and_ult_ugt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i32 %1 = add i32 %0, i32 -18;
    i1 %2 = ucmp lt i32 %1, i32 5;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = ztrunc i32 %3 to i32;
    ret i32 %4;
}
func @and_ult_ule(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp lt i32 %0, i32 13;
    i1 %2 = scmp le i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_ult_ule_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp lt i32 %0, i32 23;
    i1 %2 = scmp le i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_ult_ult(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp lt i32 %0, i32 13;
    i1 %2 = scmp lt i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @and_ult_ult_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp lt i32 %0, i32 23;
    i1 %2 = scmp lt i32 %0, i32 17;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @empty2(i32 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i1 %1 = scmp lt i32 %0, i32 0;
    i1 %2 = ucmp lt i32 %var0, i32 31;
    i1 %3 = and i1 %1, i1 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = ztrunc i32 %4 to i32;
    ret i32 %5;
}
func @or_eq_eq(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp eq i32 %0, i32 13;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp eq i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_eq_eq_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp eq i32 %0, i32 23;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp eq i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_eq_ne(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp eq i32 %0, i32 13;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_eq_ne_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp eq i32 %0, i32 23;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_eq_sge(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp eq i32 %4, i32 13;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_eq_sge_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp eq i32 %4, i32 23;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_eq_sgt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp eq i32 %4, i32 13;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_eq_sgt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp eq i32 %4, i32 23;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_eq_sle(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp eq i32 %4, i32 13;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_eq_sle_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp eq i32 %4, i32 23;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_eq_slt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp eq i32 %4, i32 13;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_eq_slt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp eq i32 %4, i32 23;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_eq_uge(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp eq i32 %0, i32 13;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp ge i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_eq_uge_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp eq i32 %0, i32 23;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp ge i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_eq_ugt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp eq i32 %0, i32 13;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp gt i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_eq_ugt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp eq i32 %0, i32 23;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp gt i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_eq_ule(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp eq i32 %0, i32 13;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp le i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_eq_ule_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp eq i32 %0, i32 23;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp le i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_eq_ult(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp eq i32 %0, i32 13;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp lt i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_eq_ult_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp eq i32 %0, i32 23;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp lt i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ne_eq(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp neq i32 %0, i32 13;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp eq i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ne_eq_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp neq i32 %0, i32 23;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp eq i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ne_ne(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp neq i32 %0, i32 13;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ne_ne_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp neq i32 %0, i32 23;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ne_sge(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp neq i32 %4, i32 13;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_ne_sge_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp neq i32 %4, i32 23;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_ne_sgt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp neq i32 %4, i32 13;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_ne_sgt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp neq i32 %4, i32 23;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_ne_sle(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp neq i32 %4, i32 13;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_ne_sle_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp neq i32 %4, i32 23;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_ne_slt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp neq i32 %4, i32 13;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_ne_slt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp neq i32 %4, i32 23;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_ne_uge(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp neq i32 %0, i32 13;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp ge i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ne_uge_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp neq i32 %0, i32 23;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp ge i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ne_ugt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp neq i32 %0, i32 13;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp gt i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ne_ugt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp neq i32 %0, i32 23;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp gt i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ne_ule(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp neq i32 %0, i32 13;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp le i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ne_ule_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp neq i32 %0, i32 23;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp le i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ne_ult(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp neq i32 %0, i32 13;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp lt i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ne_ult_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp neq i32 %0, i32 23;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp lt i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_sge_eq(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 13;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp eq i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_sge_eq_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 23;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp eq i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_sge_ne(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 13;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp neq i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_sge_ne_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 23;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp neq i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_sge_sge(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 13;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp ge i32 %1, i32 17;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = or i32 %3, i32 %5;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @or_sge_sge_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 23;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp ge i32 %1, i32 17;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = or i32 %3, i32 %5;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @or_sge_sgt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 13;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp gt i32 %1, i32 17;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = or i32 %3, i32 %5;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @or_sge_sgt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 23;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp gt i32 %1, i32 17;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = or i32 %3, i32 %5;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @or_sge_sle(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 13;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp le i32 %1, i32 17;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = or i32 %3, i32 %5;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @or_sge_sle_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 23;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp le i32 %1, i32 17;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = or i32 %3, i32 %5;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @or_sge_slt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 13;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp lt i32 %1, i32 17;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = or i32 %3, i32 %5;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @or_sge_slt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 23;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp lt i32 %1, i32 17;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = or i32 %3, i32 %5;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @or_sge_uge(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 13;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp ge i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_sge_uge_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 23;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp ge i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_sge_ugt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 13;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp gt i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_sge_ugt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 23;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp gt i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_sge_ule(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 13;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp le i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_sge_ule_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 23;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp le i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_sge_ult(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 13;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp lt i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_sge_ult_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 23;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp lt i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_sgt_eq(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 13;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp eq i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_sgt_eq_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 23;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp eq i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_sgt_ne(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 13;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp neq i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_sgt_ne_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 23;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp neq i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_sgt_sge(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 13;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp ge i32 %1, i32 17;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = or i32 %3, i32 %5;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @or_sgt_sge_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 23;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp ge i32 %1, i32 17;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = or i32 %3, i32 %5;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @or_sgt_sgt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 13;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp gt i32 %1, i32 17;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = or i32 %3, i32 %5;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @or_sgt_sgt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 23;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp gt i32 %1, i32 17;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = or i32 %3, i32 %5;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @or_sgt_sle(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 13;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp le i32 %1, i32 17;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = or i32 %3, i32 %5;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @or_sgt_sle_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 23;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp le i32 %1, i32 17;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = or i32 %3, i32 %5;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @or_sgt_slt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 13;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp lt i32 %1, i32 17;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = or i32 %3, i32 %5;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @or_sgt_slt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 23;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp lt i32 %1, i32 17;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = or i32 %3, i32 %5;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @or_sgt_uge(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 13;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp ge i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_sgt_uge_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 23;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp ge i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_sgt_ugt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 13;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp gt i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_sgt_ugt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 23;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp gt i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_sgt_ule(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 13;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp le i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_sgt_ule_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 23;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp le i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_sgt_ult(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 13;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp lt i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_sgt_ult_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 23;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp lt i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_sle_eq(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 13;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp eq i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_sle_eq_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 23;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp eq i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_sle_ne(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 13;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp neq i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_sle_ne_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 23;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp neq i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_sle_sge(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 13;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp ge i32 %1, i32 17;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = or i32 %3, i32 %5;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @or_sle_sge_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 23;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp ge i32 %1, i32 17;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = or i32 %3, i32 %5;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @or_sle_sgt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 13;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp gt i32 %1, i32 17;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = or i32 %3, i32 %5;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @or_sle_sgt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 23;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp gt i32 %1, i32 17;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = or i32 %3, i32 %5;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @or_sle_sle(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 13;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp le i32 %1, i32 17;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = or i32 %3, i32 %5;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @or_sle_sle_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 23;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp le i32 %1, i32 17;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = or i32 %3, i32 %5;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @or_sle_slt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 13;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp lt i32 %1, i32 17;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = or i32 %3, i32 %5;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @or_sle_slt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 23;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp lt i32 %1, i32 17;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = or i32 %3, i32 %5;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @or_sle_uge(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 13;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp ge i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_sle_uge_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 23;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp ge i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_sle_ugt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 13;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp gt i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_sle_ugt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 23;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp gt i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_sle_ule(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 13;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp le i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_sle_ule_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 23;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp le i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_sle_ult(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 13;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp lt i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_sle_ult_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 23;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp lt i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_slt_eq(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 13;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp eq i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_slt_eq_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 23;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp eq i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_slt_ne(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 13;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp neq i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_slt_ne_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 23;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp neq i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_slt_sge(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 13;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp ge i32 %1, i32 17;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = or i32 %3, i32 %5;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @or_slt_sge_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 23;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp ge i32 %1, i32 17;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = or i32 %3, i32 %5;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @or_slt_sgt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 13;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp gt i32 %1, i32 17;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = or i32 %3, i32 %5;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @or_slt_sgt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 23;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp gt i32 %1, i32 17;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = or i32 %3, i32 %5;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @or_slt_sle(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 13;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp le i32 %1, i32 17;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = or i32 %3, i32 %5;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @or_slt_sle_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 23;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp le i32 %1, i32 17;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = or i32 %3, i32 %5;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @or_slt_slt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 13;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp lt i32 %1, i32 17;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = or i32 %3, i32 %5;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @or_slt_slt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 23;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp lt i32 %1, i32 17;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = or i32 %3, i32 %5;
    i32 %7 = ztrunc i32 %6 to i32;
    ret i32 %7;
}
func @or_slt_uge(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 13;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp ge i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_slt_uge_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 23;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp ge i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_slt_ugt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 13;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp gt i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_slt_ugt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 23;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp gt i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_slt_ule(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 13;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp le i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_slt_ule_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 23;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp le i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_slt_ult(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 13;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp lt i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_slt_ult_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 23;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp lt i32 %4, i32 17;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_uge_eq(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp ge i32 %0, i32 13;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp eq i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_uge_eq_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp ge i32 %0, i32 23;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp eq i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_uge_ne(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp ge i32 %0, i32 13;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_uge_ne_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp ge i32 %0, i32 23;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_uge_sge(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp ge i32 %4, i32 13;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_uge_sge_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp ge i32 %4, i32 23;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_uge_sgt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp ge i32 %4, i32 13;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_uge_sgt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp ge i32 %4, i32 23;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_uge_sle(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp ge i32 %4, i32 13;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_uge_sle_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp ge i32 %4, i32 23;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_uge_slt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp ge i32 %4, i32 13;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_uge_slt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp ge i32 %4, i32 23;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_uge_uge(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp ge i32 %0, i32 13;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp ge i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_uge_uge_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp ge i32 %0, i32 23;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp ge i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_uge_ugt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp ge i32 %0, i32 13;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp gt i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_uge_ugt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp ge i32 %0, i32 23;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp gt i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_uge_ule(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp ge i32 %0, i32 13;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp le i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_uge_ule_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp ge i32 %0, i32 23;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp le i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_uge_ult(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp ge i32 %0, i32 13;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp lt i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_uge_ult_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp ge i32 %0, i32 23;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp lt i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ugt_eq(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp gt i32 %0, i32 13;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp eq i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ugt_eq_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp gt i32 %0, i32 23;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp eq i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ugt_ne(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp gt i32 %0, i32 13;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ugt_ne_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp gt i32 %0, i32 23;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ugt_sge(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp gt i32 %4, i32 13;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_ugt_sge_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp gt i32 %4, i32 23;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_ugt_sgt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp gt i32 %4, i32 13;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_ugt_sgt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp gt i32 %4, i32 23;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_ugt_sle(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp gt i32 %4, i32 13;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_ugt_sle_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp gt i32 %4, i32 23;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_ugt_slt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp gt i32 %4, i32 13;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_ugt_slt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp gt i32 %4, i32 23;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_ugt_uge(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp gt i32 %0, i32 13;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp ge i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ugt_uge_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp gt i32 %0, i32 23;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp ge i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ugt_ugt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp gt i32 %0, i32 13;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp gt i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ugt_ugt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp gt i32 %0, i32 23;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp gt i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ugt_ule(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp gt i32 %0, i32 13;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp le i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ugt_ule_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp gt i32 %0, i32 23;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp le i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ugt_ult(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp gt i32 %0, i32 13;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp lt i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ugt_ult_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp gt i32 %0, i32 23;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp lt i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ule_eq(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp le i32 %0, i32 13;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp eq i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ule_eq_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp le i32 %0, i32 23;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp eq i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ule_ne(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp le i32 %0, i32 13;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ule_ne_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp le i32 %0, i32 23;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ule_sge(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp le i32 %4, i32 13;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_ule_sge_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp le i32 %4, i32 23;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_ule_sgt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp le i32 %4, i32 13;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_ule_sgt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp le i32 %4, i32 23;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_ule_sle(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp le i32 %4, i32 13;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_ule_sle_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp le i32 %4, i32 23;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_ule_slt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp le i32 %4, i32 13;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_ule_slt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp le i32 %4, i32 23;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_ule_uge(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp le i32 %0, i32 13;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp ge i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ule_uge_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp le i32 %0, i32 23;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp ge i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ule_ugt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp le i32 %0, i32 13;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp gt i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ule_ugt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp le i32 %0, i32 23;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp gt i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ule_ule(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp le i32 %0, i32 13;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp le i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ule_ule_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp le i32 %0, i32 23;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp le i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ule_ult(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp le i32 %0, i32 13;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp lt i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ule_ult_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp le i32 %0, i32 23;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp lt i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ult_eq(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp lt i32 %0, i32 13;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp eq i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ult_eq_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp lt i32 %0, i32 23;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp eq i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ult_ne(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp lt i32 %0, i32 13;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ult_ne_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp lt i32 %0, i32 23;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ult_sge(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp lt i32 %4, i32 13;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_ult_sge_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp ge i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp lt i32 %4, i32 23;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_ult_sgt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp lt i32 %4, i32 13;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_ult_sgt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp gt i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp lt i32 %4, i32 23;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_ult_sle(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp lt i32 %4, i32 13;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_ult_sle_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp le i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp lt i32 %4, i32 23;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_ult_slt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp lt i32 %4, i32 13;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_ult_slt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp lt i32 %1, i32 17;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i1 %5 = scmp lt i32 %4, i32 23;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = or i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    ret i32 %8;
}
func @or_ult_uge(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp lt i32 %0, i32 13;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp ge i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ult_uge_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp lt i32 %0, i32 23;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp ge i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ult_ugt(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp lt i32 %0, i32 13;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp gt i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ult_ugt_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp lt i32 %0, i32 23;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp gt i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ult_ule(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp lt i32 %0, i32 13;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp le i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ult_ule_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp lt i32 %0, i32 23;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp le i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ult_ult(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp lt i32 %0, i32 13;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp lt i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
func @or_ult_ult_swap(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp lt i32 %0, i32 23;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp lt i32 %0, i32 17;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = ztrunc i32 %5 to i32;
    ret i32 %6;
}
