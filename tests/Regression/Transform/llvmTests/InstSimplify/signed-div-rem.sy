// This file is automatically generated by llvm2c from llvm/test/Transforms/InstSimplify/signed-div-rem

// function declarations
uint32_t not_sdiv_dividend_known_smaller_than_neg_divisor_clear_bits(uint32_t var0);
uint32_t not_sdiv_dividend_known_smaller_than_neg_divisor_set_bits(uint32_t var0);
uint32_t not_sdiv_dividend_known_smaller_than_pos_divisor_clear_bits(uint32_t var0);
uint32_t not_sdiv_dividend_known_smaller_than_pos_divisor_set_bits(uint32_t var0);
uint32_t not_sdiv_sext_big_divisor(uint8_t var0);
uint32_t not_sdiv_sext_small_divisor(uint8_t var0);
uint32_t not_sdiv_zext_big_divisor(uint8_t var0);
uint32_t not_sdiv_zext_small_divisor(uint8_t var0);
uint32_t not_srem_dividend_known_smaller_than_neg_divisor_clear_bits(uint32_t var0);
uint32_t not_srem_dividend_known_smaller_than_neg_divisor_set_bits(uint32_t var0);
uint32_t not_srem_dividend_known_smaller_than_pos_divisor_clear_bits(uint32_t var0);
uint32_t not_srem_dividend_known_smaller_than_pos_divisor_set_bits(uint32_t var0);
uint32_t not_srem_sext_big_divisor(uint8_t var0);
uint32_t not_srem_sext_small_divisor(uint8_t var0);
uint32_t not_srem_zext_big_divisor(uint8_t var0);
uint32_t not_srem_zext_small_divisor(uint8_t var0);
uint32_t sdiv_dividend_known_smaller_than_neg_divisor_clear_bits(uint32_t var0);
uint32_t sdiv_dividend_known_smaller_than_neg_divisor_set_bits(uint32_t var0);
uint32_t sdiv_dividend_known_smaller_than_pos_divisor_clear_bits(uint32_t var0);
uint32_t sdiv_dividend_known_smaller_than_pos_divisor_set_bits(uint32_t var0);
uint16_t sdiv_min_dividend(uint8_t var0);
uint16_t sdiv_min_divisor(uint8_t var0);
uint32_t sdiv_sext_big_divisor(uint8_t var0);
uint32_t sdiv_sext_small_divisor(uint8_t var0);
uint32_t sdiv_zext_big_divisor(uint8_t var0);
uint32_t sdiv_zext_small_divisor(uint8_t var0);
uint32_t srem_dividend_known_smaller_than_neg_divisor_clear_bits(uint32_t var0);
uint32_t srem_dividend_known_smaller_than_neg_divisor_set_bits(uint32_t var0);
uint32_t srem_dividend_known_smaller_than_pos_divisor_clear_bits(uint32_t var0);
uint32_t srem_dividend_known_smaller_than_pos_divisor_set_bits(uint32_t var0);
uint32_t srem_sext_big_divisor(uint8_t var0);
uint32_t srem_sext_small_divisor(uint8_t var0);
uint32_t srem_zext_big_divisor(uint8_t var0);
uint32_t srem_zext_small_divisor(uint8_t var0);

uint32_t not_sdiv_dividend_known_smaller_than_neg_divisor_clear_bits(uint32_t var0){
    block0:
    return ((int)(var0 & 253)) / ((int)-253);
}

uint32_t not_sdiv_dividend_known_smaller_than_neg_divisor_set_bits(uint32_t var0){
    block0:
    return ((int)(var0 | -253)) / ((int)-253);
}

uint32_t not_sdiv_dividend_known_smaller_than_pos_divisor_clear_bits(uint32_t var0){
    block0:
    return ((int)(var0 & 253)) / ((int)253);
}

uint32_t not_sdiv_dividend_known_smaller_than_pos_divisor_set_bits(uint32_t var0){
    block0:
    return ((int)(var0 | -253)) / ((int)253);
}

uint32_t not_sdiv_sext_big_divisor(uint8_t var0){
    block0:
    return ((int)((int)((char)var0))) / ((int)128);
}

uint32_t not_sdiv_sext_small_divisor(uint8_t var0){
    block0:
    return ((int)((int)((char)var0))) / ((int)-128);
}

uint32_t not_sdiv_zext_big_divisor(uint8_t var0){
    block0:
    return ((int)((uint32_t)var0)) / ((int)255);
}

uint32_t not_sdiv_zext_small_divisor(uint8_t var0){
    block0:
    return ((int)((uint32_t)var0)) / ((int)-255);
}

uint32_t not_srem_dividend_known_smaller_than_neg_divisor_clear_bits(uint32_t var0){
    block0:
    return ((int)(var0 & 253)) % ((int)-253);
}

uint32_t not_srem_dividend_known_smaller_than_neg_divisor_set_bits(uint32_t var0){
    block0:
    return ((int)(var0 | -253)) % ((int)-253);
}

uint32_t not_srem_dividend_known_smaller_than_pos_divisor_clear_bits(uint32_t var0){
    block0:
    return ((int)(var0 & 253)) % ((int)253);
}

uint32_t not_srem_dividend_known_smaller_than_pos_divisor_set_bits(uint32_t var0){
    block0:
    return ((int)(var0 | -253)) % ((int)253);
}

uint32_t not_srem_sext_big_divisor(uint8_t var0){
    block0:
    return ((int)((int)((char)var0))) % ((int)128);
}

uint32_t not_srem_sext_small_divisor(uint8_t var0){
    block0:
    return ((int)((int)((char)var0))) % ((int)-128);
}

uint32_t not_srem_zext_big_divisor(uint8_t var0){
    block0:
    return ((int)((uint32_t)var0)) % ((int)255);
}

uint32_t not_srem_zext_small_divisor(uint8_t var0){
    block0:
    return ((int)((uint32_t)var0)) % ((int)-255);
}

uint32_t sdiv_dividend_known_smaller_than_neg_divisor_clear_bits(uint32_t var0){
    block0:
    return ((int)(var0 & 253)) / ((int)-254);
}

uint32_t sdiv_dividend_known_smaller_than_neg_divisor_set_bits(uint32_t var0){
    block0:
    return ((int)(var0 | -253)) / ((int)-254);
}

uint32_t sdiv_dividend_known_smaller_than_pos_divisor_clear_bits(uint32_t var0){
    block0:
    return ((int)(var0 & 253)) / ((int)254);
}

uint32_t sdiv_dividend_known_smaller_than_pos_divisor_set_bits(uint32_t var0){
    block0:
    return ((int)(var0 | -253)) / ((int)254);
}

uint16_t sdiv_min_dividend(uint8_t var0){
    block0:
    return ((int16_t)-32768) / ((int16_t)((uint16_t)var0));
}

uint16_t sdiv_min_divisor(uint8_t var0){
    block0:
    return ((int16_t)((uint16_t)var0)) / ((int16_t)-32768);
}

uint32_t sdiv_sext_big_divisor(uint8_t var0){
    block0:
    return ((int)((int)((char)var0))) / ((int)129);
}

uint32_t sdiv_sext_small_divisor(uint8_t var0){
    block0:
    return ((int)((int)((char)var0))) / ((int)-129);
}

uint32_t sdiv_zext_big_divisor(uint8_t var0){
    block0:
    return ((int)((uint32_t)var0)) / ((int)256);
}

uint32_t sdiv_zext_small_divisor(uint8_t var0){
    block0:
    return ((int)((uint32_t)var0)) / ((int)-256);
}

uint32_t srem_dividend_known_smaller_than_neg_divisor_clear_bits(uint32_t var0){
    block0:
    return ((int)(var0 & 253)) % ((int)-254);
}

uint32_t srem_dividend_known_smaller_than_neg_divisor_set_bits(uint32_t var0){
    block0:
    return ((int)(var0 | -253)) % ((int)-254);
}

uint32_t srem_dividend_known_smaller_than_pos_divisor_clear_bits(uint32_t var0){
    block0:
    return ((int)(var0 & 253)) % ((int)254);
}

uint32_t srem_dividend_known_smaller_than_pos_divisor_set_bits(uint32_t var0){
    block0:
    return ((int)(var0 | -253)) % ((int)254);
}

uint32_t srem_sext_big_divisor(uint8_t var0){
    block0:
    return ((int)((int)((char)var0))) % ((int)129);
}

uint32_t srem_sext_small_divisor(uint8_t var0){
    block0:
    return ((int)((int)((char)var0))) % ((int)-129);
}

uint32_t srem_zext_big_divisor(uint8_t var0){
    block0:
    return ((int)((uint32_t)var0)) % ((int)256);
}

uint32_t srem_zext_small_divisor(uint8_t var0){
    block0:
    return ((int)((uint32_t)var0)) % ((int)-256);
}

