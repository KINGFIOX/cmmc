func @basic(i32 %var0, i32 %var1, i32 %var2, i32 %var3, i32 %var4) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i1 %0 = icmp neq i32 %var0, i32 0;
    cbr i1 %0(prob = 0.5), ^block1, ^block2;
  ^block1:
    i32 %1 = phi [^entry, i32 %var3] [^block2, i32 %4];
    i32 %2 = add i32 %1, i32 1;
    i1 %3 = icmp neq i32 %var1, i32 0;
    cbr i1 %3(prob = 0.5), ^block2, ^b;
  ^block2:
    i32 %4 = phi [^entry, i32 %var4] [^block1, i32 %2];
    i1 %5 = icmp neq i32 %var2, i32 0;
    cbr i1 %5(prob = 0.5), ^block1, ^b;
  ^b:
    i32 %6 = phi [^block1, i32 %2] [^block2, i32 %4];
    ret i32 %6;
}
func @feedback_loop(i32 %var0, i32 %var1, i32 %var2, i32 %var3, i32 %var4) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i1 %0 = icmp neq i32 %var0, i32 0;
    cbr i1 %0(prob = 0.5), ^block1, ^block2;
  ^block1:
    i32 %1 = phi [^entry, i32 %var3] [^block2, i32 %3];
    i1 %2 = icmp neq i32 %var1, i32 0;
    cbr i1 %2(prob = 0.5), ^block2, ^b;
  ^block2:
    i32 %3 = phi [^entry, i32 %var4] [^block1, i32 %1];
    i1 %4 = icmp neq i32 %var2, i32 0;
    cbr i1 %4(prob = 0.5), ^block1, ^b;
  ^b:
    i32 %5 = phi [^block1, i32 %1] [^block2, i32 %3];
    ret i32 %5;
}
func @four_headers() -> void { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ret;
}
func @hidden_nodes(i32 %var0, i32 %var4, i32 %var5, i32 %var6) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i1 %0 = icmp neq i32 %var0, i32 0;
    i1 %1 = icmp neq i32 %var4, i32 0;
    cbr i1 %0(prob = 0.5), ^block1, ^block2;
  ^block1:
    i32 %2 = phi [^entry, i32 %var5] [^block2, i32 %5];
    i32 %3 = add i32 %2, i32 1;
    ubr ^block2;
  ^block2:
    i32 %4 = phi [^entry, i32 %var6] [^block1, i32 %3];
    i32 %5 = add i32 %4, i32 1;
    cbr i1 %1(prob = 0.5), ^if.then, ^block1;
  ^if.then:
    ret i32 %4;
}
func @multiple_predecessors(i32 %var0, i32 %var1, i32 %var2, i32 %var3, i32 %var4, i32 %var5, i32 %var6) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i1 %0 = icmp neq i32 %var0, i32 0;
    cbr i1 %0(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i1 %1 = icmp neq i32 %var1, i32 0;
    i32 %2 = add i32 %var5, i32 1;
    cbr i1 %1(prob = 0.5), ^block3, ^block4;
  ^if.else:
    i1 %3 = icmp neq i32 %var2, i32 0;
    cbr i1 %3(prob = 0.5), ^block4, ^block3;
  ^block3:
    i32 %4 = phi [^if.then, i32 %var5] [^if.else, i32 %var6] [^block4, i32 %7];
    i1 %5 = icmp neq i32 %var3, i32 0;
    cbr i1 %5(prob = 0.5), ^block4, ^b;
  ^block4:
    i32 %6 = phi [^if.then, i32 %2] [^if.else, i32 %var6] [^block3, i32 %4];
    i32 %7 = add i32 %6, i32 1;
    i1 %8 = icmp neq i32 %var4, i32 0;
    cbr i1 %8(prob = 0.5), ^b, ^block3;
  ^b:
    i32 %9 = phi [^block3, i32 %4] [^block4, i32 %7];
    ret i32 %9;
}
func @separate_predecessors(i32 %var0, i32 %var3, i32 %var4, i32 %var5, i32 %var6) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i1 %0 = icmp neq i32 %var0, i32 0;
    cbr i1 %0(prob = 0.5), ^block3, ^block4;
  ^block3:
    i32 %1 = phi [^entry, i32 %var5] [^block4, i32 %4];
    i1 %2 = icmp neq i32 %var3, i32 0;
    cbr i1 %2(prob = 0.5), ^b, ^block4;
  ^block4:
    i32 %3 = phi [^entry, i32 %var6] [^block3, i32 %1];
    i32 %4 = add i32 %3, i32 1;
    i1 %5 = icmp neq i32 %var4, i32 0;
    cbr i1 %5(prob = 0.5), ^b, ^block3;
  ^b:
    i32 %6 = phi [^block3, i32 %1] [^block4, i32 %4];
    ret i32 %6;
}
