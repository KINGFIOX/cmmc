func @test1(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = shl i32 %var0, i32 1;
    i32 %1 = add i32 %var1, i32 %0;
    i32 %2 = mul i32 %var1, i32 %1;
    i32 %3 = mul i32 %var0, i32 %var0;
    i32 %4 = add i32 %2, i32 %3;
    ret i32 %4;
}
func @test2(i32 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = mul i32 %var0, i32 6;
    i32 %1 = add i32 %0, i32 15;
    i32 %2 = mul i32 %var0, i32 36;
    i32 %3 = add i32 %1, i32 %2;
    ret i32 %3;
}
func @test3(i32 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = mul i32 %var0, i32 %var0;
    i32 %1 = mul i32 %0, i32 %0;
    i32 %2 = mul i32 %1, i32 %1;
    ret i32 %2;
}
func @test4(i32 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = mul i32 %var0, i32 %var0;
    i32 %1 = mul i32 %0, i32 %0;
    i32 %2 = mul i32 %var0, i32 %1;
    i32 %3 = mul i32 %0, i32 %2;
    ret i32 %3;
}
func @test5(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = mul i32 %var0, i32 %var0;
    i32 %1 = mul i32 %0, i32 %0;
    i32 %2 = mul i32 %var1, i32 %var1;
    i32 %3 = mul i32 %1, i32 %2;
    ret i32 %3;
}
func @test6(i32 %var0, i32 %var1, i32 %var2) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = mul i32 %var0, i32 %var0;
    i32 %1 = mul i32 %0, i32 %0;
    i32 %2 = mul i32 %var1, i32 %var1;
    i32 %3 = mul i32 %1, i32 %2;
    i32 %4 = mul i32 %var0, i32 %var1;
    i32 %5 = mul i32 %var2, i32 %4;
    i32 %6 = mul i32 %3, i32 %5;
    ret i32 %6;
}
func @test7(i32 %var0, i32 %var1, i32 %var2) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = mul i32 %var0, i32 %var0;
    i32 %1 = mul i32 %0, i32 %0;
    i32 %2 = mul i32 %var1, i32 %var1;
    i32 %3 = mul i32 %1, i32 %2;
    i32 %4 = mul i32 %var2, i32 %var2;
    i32 %5 = mul i32 %var1, i32 %4;
    i32 %6 = mul i32 %3, i32 %5;
    ret i32 %6;
}
