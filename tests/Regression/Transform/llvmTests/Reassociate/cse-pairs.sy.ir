func @threePairsAllOpInPairs(i32 %var0, i32 %var1, i32 %var2, i32 %var3, i32 %var4, i32 %var5) -> i32 { NoMemoryRead NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i32 %1 = strunc i32 %var1 to i32;
    i32 %2 = add i32 %0, i32 %1;
    i32 %3 = strunc i32 %var2 to i32;
    i32 %4 = add i32 %2, i32 %3;
    i32 %5 = strunc i32 %var3 to i32;
    i32 %6 = add i32 %4, i32 %5;
    i32 %7 = strunc i32 %var4 to i32;
    i32 %8 = add i32 %6, i32 %7;
    i32 %9 = strunc i32 %var5 to i32;
    i32 %10 = add i32 %8, i32 %9;
    i32 %11 = ztrunc i32 %10 to i32;
    i32* %12 = ptrcast i32* @num1 to i32*;
    store i32* %12 with i32 %11;
    i32 %13 = add i32 %0, i32 %9;
    i32 %14 = ztrunc i32 %13 to i32;
    i32* %15 = ptrcast i32* @num2 to i32*;
    store i32* %15 with i32 %14;
    i32 %16 = add i32 %1, i32 %7;
    i32 %17 = ztrunc i32 %16 to i32;
    i32* %18 = ptrcast i32* @num3 to i32*;
    store i32* %18 with i32 %17;
    i32 %19 = add i32 %3, i32 %5;
    i32 %20 = ztrunc i32 %19 to i32;
    i32* %21 = ptrcast i32* @num4 to i32*;
    store i32* %21 with i32 %20;
    ret i32 0;
}
func @twoPairs(i32 %var0, i32 %var1, i32 %var2, i32 %var3, i32 %var4) -> i32 { NoMemoryRead NoRecurse } {
  ^entry:
    i32 %0 = add i32 %var0, i32 %var1;
    i32 %1 = add i32 %var2, i32 %0;
    i32 %2 = add i32 %var3, i32 %1;
    i32 %3 = add i32 %var4, i32 %2;
    i32* %4 = ptrcast i32* @num1 to i32*;
    store i32* %4 with i32 %3;
    i32 %5 = strunc i32 %var0 to i32;
    i32 %6 = strunc i32 %var2 to i32;
    i32 %7 = add i32 %5, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    i32* %9 = ptrcast i32* @num2 to i32*;
    store i32* %9 with i32 %8;
    i32 %10 = strunc i32 %var1 to i32;
    i32 %11 = strunc i32 %var3 to i32;
    i32 %12 = add i32 %10, i32 %11;
    i32 %13 = ztrunc i32 %12 to i32;
    i32* %14 = ptrcast i32* @num3 to i32*;
    store i32* %14 with i32 %13;
    ret i32 0;
}
func @twoPairsAllOpInPairs(i32 %var0, i32 %var1, i32 %var2, i32 %var3) -> i32 { NoMemoryRead NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i32 %1 = strunc i32 %var1 to i32;
    i32 %2 = add i32 %0, i32 %1;
    i32 %3 = strunc i32 %var2 to i32;
    i32 %4 = add i32 %2, i32 %3;
    i32 %5 = strunc i32 %var3 to i32;
    i32 %6 = add i32 %4, i32 %5;
    i32 %7 = ztrunc i32 %6 to i32;
    i32* %8 = ptrcast i32* @num1 to i32*;
    store i32* %8 with i32 %7;
    i32 %9 = add i32 %1, i32 %3;
    i32 %10 = ztrunc i32 %9 to i32;
    i32* %11 = ptrcast i32* @num2 to i32*;
    store i32* %11 with i32 %10;
    i32 %12 = add i32 %0, i32 %5;
    i32 %13 = ztrunc i32 %12 to i32;
    i32* %14 = ptrcast i32* @num3 to i32*;
    store i32* %14 with i32 %13;
    ret i32 0;
}
i32* @num1, align 8 = 0;
i32* @num2, align 8 = 0;
i32* @num3, align 8 = 0;
i32* @num4, align 8 = 0;
