func @fn1() -> i32 { NoRecurse } {
  ^entry:
    i32* %0 = ptrcast i32* @a to i32*;
    i32 %1 = load i32* %0;
    i32 %2 = strunc i32 %1 to i32;
    i32 %3 = add i32 %2, i32 -1;
    i32* %4 = ptrcast i32* @d to i32*;
    i32 %5 = load i32* %4;
    i32 %6 = strunc i32 %5 to i32;
    i32 %7 = sub i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    i32 %9 = strunc i32 %8 to i32;
    i32 %10 = ztrunc i32 %3 to i32;
    i32 %11 = strunc i32 %10 to i32;
    i32 %12 = add i32 %11, i32 -1;
    i32 %13 = sub i32 %12, i32 %9;
    i32 %14 = ztrunc i32 %13 to i32;
    i32 %15 = strunc i32 %14 to i32;
    i32 %16 = ztrunc i32 %12 to i32;
    i32 %17 = strunc i32 %16 to i32;
    i32 %18 = add i32 %17, i32 -1;
    i32 %19 = sub i32 %18, i32 %15;
    i32 %20 = ztrunc i32 %19 to i32;
    i32 %21 = strunc i32 %20 to i32;
    i32 %22 = ztrunc i32 %18 to i32;
    i32 %23 = strunc i32 %22 to i32;
    i32 %24 = add i32 %23, i32 -1;
    i32 %25 = sub i32 %24, i32 %21;
    i32 %26 = ztrunc i32 %25 to i32;
    i32 %27 = strunc i32 %26 to i32;
    i32 %28 = ztrunc i32 %24 to i32;
    i32 %29 = strunc i32 %28 to i32;
    i32 %30 = add i32 %29, i32 -1;
    i32 %31 = sub i32 %30, i32 %27;
    i32 %32 = ztrunc i32 %31 to i32;
    i32 %33 = ztrunc i32 %30 to i32;
    store i32* %0 with i32 %33;
    store i32* %4 with i32 %32;
    ret i32 0;
}
func @fn2() -> i32 { NoRecurse } {
  ^entry:
    i32* %0 = ptrcast i32* @a to i32*;
    i32 %1 = load i32* %0;
    i32 %2 = strunc i32 %1 to i32;
    i32 %3 = add i32 %2, i32 -1;
    i32* %4 = ptrcast i32* @d to i32*;
    i32 %5 = load i32* %4;
    i32 %6 = strunc i32 %5 to i32;
    i32 %7 = sub i32 %3, i32 %6;
    i32 %8 = ztrunc i32 %7 to i32;
    i32 %9 = strunc i32 %8 to i32;
    i32 %10 = ztrunc i32 %3 to i32;
    i32 %11 = strunc i32 %10 to i32;
    i32 %12 = add i32 %11, i32 -1;
    i32 %13 = sub i32 %12, i32 %9;
    i32 %14 = ztrunc i32 %13 to i32;
    i32 %15 = strunc i32 %14 to i32;
    i32 %16 = ztrunc i32 %12 to i32;
    i32 %17 = strunc i32 %16 to i32;
    i32 %18 = add i32 %17, i32 -1;
    i32 %19 = sub i32 %18, i32 %15;
    i32 %20 = ztrunc i32 %19 to i32;
    i32 %21 = strunc i32 %20 to i32;
    i32 %22 = ztrunc i32 %18 to i32;
    i32 %23 = strunc i32 %22 to i32;
    i32 %24 = add i32 %23, i32 -1;
    i32 %25 = sub i32 %24, i32 %21;
    i32 %26 = ztrunc i32 %25 to i32;
    i32 %27 = strunc i32 %26 to i32;
    i32 %28 = ztrunc i32 %24 to i32;
    i32 %29 = strunc i32 %28 to i32;
    i32 %30 = add i32 %29, i32 -1;
    i32 %31 = sub i32 %30, i32 %27;
    i32 %32 = ztrunc i32 %31 to i32;
    i32 %33 = ztrunc i32 %30 to i32;
    store i32* %0 with i32 %33;
    store i32* %4 with i32 %32;
    ret i32 0;
}
i32* @a = 0;
i32* @d = 0;
