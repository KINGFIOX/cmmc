// This file is automatically generated by llvm2c from llvm/test/Transforms/Reassociate/repeats

// function declarations
uint8_t add(uint8_t var0);
uint8_t cst_add(void);
uint8_t cst_mul(void);
uint8_t foo3x5(uint8_t var0);
uint8_t foo3x6(uint8_t var0);
uint8_t foo3x7(uint8_t var0);
uint8_t foo4x10(uint8_t var0);
uint8_t foo4x11(uint8_t var0);
uint8_t foo4x12(uint8_t var0);
uint8_t foo4x13(uint8_t var0);
uint8_t foo4x14(uint8_t var0);
uint8_t foo4x15(uint8_t var0);
uint8_t foo4x8(uint8_t var0);
uint8_t foo4x9(uint8_t var0);
uint8_t idempotent(uint8_t var0);
uint8_t nilpotent(uint8_t var0);

uint8_t add(uint8_t var0){
    block0:
    return ((var0 + var0) + var0) + var0;
}

uint8_t cst_add(void){
    block0:
    return (1 + 1) + 1;
}

uint8_t cst_mul(void){
    block0:
    return (((3 * 3) * 3) * 3) * 3;
}

uint8_t foo3x5(uint8_t var0){
    block0:
    return (((var0 * var0) * var0) * var0) * var0;
}

uint8_t foo3x6(uint8_t var0){
    block0:
    return ((((var0 * var0) * var0) * var0) * var0) * var0;
}

uint8_t foo3x7(uint8_t var0){
    block0:
    return (((((var0 * var0) * var0) * var0) * var0) * var0) * var0;
}

uint8_t foo4x10(uint8_t var0){
    block0:
    return ((((((((var0 * var0) * var0) * var0) * var0) * var0) * var0) * var0) * var0) * var0;
}

uint8_t foo4x11(uint8_t var0){
    block0:
    return (((((((((var0 * var0) * var0) * var0) * var0) * var0) * var0) * var0) * var0) * var0) * var0;
}

uint8_t foo4x12(uint8_t var0){
    block0:
    return ((((((((((var0 * var0) * var0) * var0) * var0) * var0) * var0) * var0) * var0) * var0) * var0) * var0;
}

uint8_t foo4x13(uint8_t var0){
    block0:
    return (((((((((((var0 * var0) * var0) * var0) * var0) * var0) * var0) * var0) * var0) * var0) * var0) * var0) * var0;
}

uint8_t foo4x14(uint8_t var0){
    block0:
    return ((((((((((((var0 * var0) * var0) * var0) * var0) * var0) * var0) * var0) * var0) * var0) * var0) * var0) * var0) * var0;
}

uint8_t foo4x15(uint8_t var0){
    block0:
    return (((((((((((((var0 * var0) * var0) * var0) * var0) * var0) * var0) * var0) * var0) * var0) * var0) * var0) * var0) * var0) * var0;
}

uint8_t foo4x8(uint8_t var0){
    block0:
    return ((((((var0 * var0) * var0) * var0) * var0) * var0) * var0) * var0;
}

uint8_t foo4x9(uint8_t var0){
    block0:
    return (((((((var0 * var0) * var0) * var0) * var0) * var0) * var0) * var0) * var0;
}

uint8_t idempotent(uint8_t var0){
    block0:
    return ((var0 & var0) & var0) & var0;
}

uint8_t nilpotent(uint8_t var0){
    block0:
    return var0 ^ var0;
}

