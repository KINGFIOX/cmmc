// This file is automatically generated by llvm2c from llvm/test/Transforms/AggressiveInstCombine/trunc_select_cmp

// function declarations
uint16_t cmp_select_sext(uint8_t var0, uint8_t var1);
uint16_t cmp_select_sext_const(uint8_t var0);
uint16_t cmp_select_signed_const_i16Const_noTransformation(uint8_t var0);
uint16_t cmp_select_unsigned_const_i16Const(uint8_t var0);
uint16_t cmp_select_unsigned_const_i16Const_noTransformation(uint8_t var0);
uint16_t cmp_select_zext(uint8_t var0, uint8_t var1);
uint16_t cmp_select_zext_sext(uint8_t var0, uint8_t var1);
uint16_t cmp_select_zext_sext_diffOrigTy(uint8_t var0, uint16_t var1);
uint16_t my_abs_sext(uint8_t var0);
uint16_t my_abs_zext(uint8_t var0);
uint16_t select_sext(uint8_t var0, uint32_t var1);
uint16_t select_zext(uint8_t var0, uint32_t var1);

uint16_t cmp_select_sext(uint8_t var0, uint8_t var1){
    int var2;
    int var3;
    block0:
    var2 = ((int)((char)var0));
    var3 = ((int)((char)var1));
    return (uint16_t)((var2 < var3) ? var3 : var2);
}

uint16_t cmp_select_sext_const(uint8_t var0){
    int var1;
    block0:
    var1 = ((int)((char)var0));
    return (uint16_t)((var1 < ((int)109)) ? 109 : var1);
}

uint16_t cmp_select_signed_const_i16Const_noTransformation(uint8_t var0){
    int var1;
    block0:
    var1 = ((int)((char)var0));
    return (uint16_t)((var1 < ((int)32768)) ? 32768 : var1);
}

uint16_t cmp_select_unsigned_const_i16Const(uint8_t var0){
    uint32_t var1;
    block0:
    var1 = ((uint32_t)var0);
    return (uint16_t)((var1 < 32768) ? 32768 : var1);
}

uint16_t cmp_select_unsigned_const_i16Const_noTransformation(uint8_t var0){
    uint32_t var1;
    block0:
    var1 = ((uint32_t)var0);
    return (uint16_t)((var1 < 65536) ? 65536 : var1);
}

uint16_t cmp_select_zext(uint8_t var0, uint8_t var1){
    uint32_t var2;
    uint32_t var3;
    block0:
    var2 = ((uint32_t)var0);
    var3 = ((uint32_t)var1);
    return (uint16_t)((((int)var2) < ((int)var3)) ? var3 : var2);
}

uint16_t cmp_select_zext_sext(uint8_t var0, uint8_t var1){
    uint32_t var2;
    int var3;
    block0:
    var2 = ((uint32_t)var0);
    var3 = ((int)((char)var1));
    return (uint16_t)((((int)var2) < var3) ? var3 : var2);
}

uint16_t cmp_select_zext_sext_diffOrigTy(uint8_t var0, uint16_t var1){
    uint32_t var2;
    int var3;
    block0:
    var2 = ((uint32_t)var0);
    var3 = ((int)((int16_t)var1));
    return (uint16_t)((((int)var2) < var3) ? var3 : var2);
}

uint16_t my_abs_sext(uint8_t var0){
    int var1;
    block0:
    var1 = ((int)((char)var0));
    return (uint16_t)((var1 < ((int)0)) ? (((int)0) - ((int)var1)) : var1);
}

uint16_t my_abs_zext(uint8_t var0){
    uint32_t var1;
    block0:
    var1 = ((uint32_t)var0);
    return (uint16_t)((((int)var1) < ((int)0)) ? (((int)0) - ((int)var1)) : var1);
}

uint16_t select_sext(uint8_t var0, uint32_t var1){
    int var2;
    block0:
    var2 = ((int)((char)var0));
    return (uint16_t)(var1 ? (((int)0) - ((int)var2)) : var2);
}

uint16_t select_zext(uint8_t var0, uint32_t var1){
    uint32_t var2;
    block0:
    var2 = ((uint32_t)var0);
    return (uint16_t)(var1 ? (((int)0) - ((int)var2)) : var2);
}

