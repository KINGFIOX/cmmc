func @select_i16(i16 %var0, i16 %var1, i32 %var2) -> i16 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i1 %0 = scmp neq i32 %var2, i32 0;
    cbr i1 %0(prob = 0.5), ^lhsBlock, ^rhsBlock;
  ^lhsBlock:
    i16 %1 = strunc i16 %var0 to i16;
    i32 %2 = sext i16 %1 to i32;
    ubr ^b;
  ^rhsBlock:
    i16 %3 = strunc i16 %var1 to i16;
    i32 %4 = sext i16 %3 to i32;
    ubr ^b;
  ^b:
    i32 %5 = phi [^lhsBlock, i32 %2] [^rhsBlock, i32 %4];
    i16 %6 = ztrunc i32 %5 to i16;
    ret i16 %6;
}
func @select_i16_bigConst(i16 %var0, i32 %var1) -> i16 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i16 %0 = strunc i16 %var0 to i16;
    i32 %1 = sext i16 %0 to i32;
    i1 %2 = scmp neq i32 %var1, i32 0;
    i32 %3 = select i1 %2 ? i32 3080196 : i32 %1;
    i16 %4 = ztrunc i32 %3 to i16;
    ret i16 %4;
}
func @select_i16_const(i16 %var0, i32 %var1) -> i16 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i16 %0 = strunc i16 %var0 to i16;
    i32 %1 = sext i16 %0 to i32;
    i1 %2 = scmp neq i32 %var1, i32 0;
    i32 %3 = select i1 %2 ? i32 109 : i32 %1;
    i16 %4 = ztrunc i32 %3 to i16;
    ret i16 %4;
}
func @select_i8(i8 %var0, i8 %var1, i32 %var2) -> i8 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i1 %0 = scmp neq i32 %var2, i32 0;
    cbr i1 %0(prob = 0.5), ^lhsBlock, ^rhsBlock;
  ^lhsBlock:
    i8 %1 = strunc i8 %var0 to i8;
    i32 %2 = sext i8 %1 to i32;
    ubr ^b;
  ^rhsBlock:
    i8 %3 = strunc i8 %var1 to i8;
    i32 %4 = sext i8 %3 to i32;
    ubr ^b;
  ^b:
    i32 %5 = phi [^lhsBlock, i32 %2] [^rhsBlock, i32 %4];
    i8 %6 = ztrunc i32 %5 to i8;
    ret i8 %6;
}
func @select_i8Ops_trunc_i16(i8 %var0, i8 %var1, i32 %var2) -> i16 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i1 %0 = scmp neq i32 %var2, i32 0;
    cbr i1 %0(prob = 0.5), ^lhsBlock, ^rhsBlock;
  ^lhsBlock:
    i8 %1 = strunc i8 %var0 to i8;
    i32 %2 = sext i8 %1 to i32;
    ubr ^b;
  ^rhsBlock:
    i8 %3 = strunc i8 %var1 to i8;
    i32 %4 = sext i8 %3 to i32;
    ubr ^b;
  ^b:
    i32 %5 = phi [^lhsBlock, i32 %2] [^rhsBlock, i32 %4];
    i16 %6 = ztrunc i32 %5 to i16;
    ret i16 %6;
}
func @select_i8_bigConst(i8 %var0, i32 %var1) -> i8 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp neq i32 %var1, i32 0;
    i32 %3 = select i1 %2 ? i32 20228 : i32 %1;
    i8 %4 = ztrunc i32 %3 to i8;
    ret i8 %4;
}
func @select_i8_const(i8 %var0, i32 %var1) -> i8 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = scmp neq i32 %var1, i32 0;
    i32 %3 = select i1 %2 ? i32 109 : i32 %1;
    i8 %4 = ztrunc i32 %3 to i8;
    ret i8 %4;
}
func @select_sext(i8 %var0, i32 %var1) -> i16 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i32 %2 = neg i32 %1;
    i1 %3 = scmp neq i32 %var1, i32 0;
    i32 %4 = select i1 %3 ? i32 %2 : i32 %1;
    i16 %5 = ztrunc i32 %4 to i16;
    ret i16 %5;
}
func @select_zext(i8 %var0, i32 %var1) -> i16 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i32 %1 = strunc i32 %0 to i32;
    i32 %2 = neg i32 %1;
    i32 %3 = ztrunc i32 %2 to i32;
    i1 %4 = scmp neq i32 %var1, i32 0;
    i32 %5 = select i1 %4 ? i32 %3 : i32 %0;
    i16 %6 = ztrunc i32 %5 to i16;
    ret i16 %6;
}
