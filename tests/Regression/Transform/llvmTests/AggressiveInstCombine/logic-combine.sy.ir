func @leaf1_and_a_false() -> i8 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ret i8 0;
}
func @leaf1_and_aa(i8 %var0) -> i8 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i8 %1 = ztrunc i32 %0 to i8;
    ret i8 %1;
}
func @leaf1_and_not(i8 %var0) -> i8 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i32 %1 = xor i32 %0, i32 -1;
    i32 %2 = and i32 %0, i32 %1;
    i8 %3 = ztrunc i32 %2 to i8;
    ret i8 %3;
}
func @leaf1_or_not(i8 %var0) -> i8 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i32 %1 = xor i32 %0, i32 -1;
    i32 %2 = or i32 %0, i32 %1;
    i8 %3 = ztrunc i32 %2 to i8;
    ret i8 %3;
}
func @leaf1_xor_aa() -> i8 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ret i8 0;
}
func @leaf2_or_ret_const_false(i8 %var0, i8 %var1) -> i8 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i32 %1 = zext i8 %var1 to i32;
    i32 %2 = or i32 %0, i32 %1;
    i32 %3 = and i32 %0, i32 %1;
    i32 %4 = xor i32 %2, i32 %3;
    i32 %5 = and i32 %4, i32 255;
    i32 %6 = xor i32 %1, i32 %5;
    i8 %7 = ztrunc i32 %6 to i8;
    ret i8 %7;
}
func @leaf2_or_ret_leaf(i8 %var0, i8 %var1) -> i8 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i32 %1 = zext i8 %var1 to i32;
    i32 %2 = or i32 %0, i32 %1;
    i32 %3 = and i32 %0, i32 %1;
    i32 %4 = xor i32 %2, i32 %3;
    i32 %5 = xor i32 %0, i32 %4;
    i8 %6 = ztrunc i32 %5 to i8;
    ret i8 %6;
}
func @leaf2_type_is_i1(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i1 %0 = icmp eq i32 %var0, i32 0;
    i32 %1 = zext i1 %0 to i32;
    i32 %2 = ztrunc i32 %1 to i32;
    i32 %3 = xor i32 %var1, i32 %2;
    i32 %4 = xor i32 %var0, i32 %var1;
    i32 %5 = or i32 %3, i32 %4;
    ret i32 %5;
}
func @leaf2_xor(i8 %var1) -> i8 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var1 to i32;
    i8 %1 = ztrunc i32 %0 to i8;
    ret i8 %1;
}
func @leaf2_xor_ret_const_false() -> i8 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ret i8 0;
}
func @leaf3_complex_ret_const_false(i8 %var0, i8 %var1, i8 %var2) -> i8 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i32 %1 = zext i8 %var1 to i32;
    i32 %2 = or i32 %0, i32 %1;
    i32 %3 = zext i8 %var2 to i32;
    i32 %4 = or i32 %2, i32 %3;
    i32 %5 = xor i32 %4, i32 -1;
    i32 %6 = and i32 %0, i32 %5;
    i8 %7 = ztrunc i32 %6 to i8;
    ret i8 %7;
}
func @leaf3_complex_ret_leaf(i8 %var0, i8 %var1, i8 %var2) -> i8 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i32 %1 = zext i8 %var1 to i32;
    i32 %2 = and i32 %0, i32 %1;
    i32 %3 = zext i8 %var2 to i32;
    i32 %4 = xor i32 %0, i32 %3;
    i32 %5 = or i32 %2, i32 %4;
    i32 %6 = and i32 %1, i32 %3;
    i32 %7 = xor i32 %6, i32 -1;
    i32 %8 = and i32 %0, i32 %7;
    i32 %9 = xor i32 %5, i32 %8;
    i8 %10 = ztrunc i32 %9 to i8;
    ret i8 %10;
}
func @leaf4_ret_const_true(i8 %var0, i8 %var1, i8 %var2, i8 %var3) -> i8 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var1 to i32;
    i32 %1 = zext i8 %var3 to i32;
    i32 %2 = and i32 %0, i32 %1;
    i32 %3 = xor i32 %2, i32 -1;
    i32 %4 = zext i8 %var0 to i32;
    i32 %5 = xor i32 %0, i32 %4;
    i32 %6 = or i32 %3, i32 %5;
    i32 %7 = or i32 %4, i32 %6;
    i32 %8 = zext i8 %var2 to i32;
    i32 %9 = or i32 %7, i32 %8;
    i8 %10 = ztrunc i32 %9 to i8;
    ret i8 %10;
}
func @leaf4_ret_leaf(i8 %var0, i8 %var1, i8 %var2, i8 %var3) -> i8 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var1 to i32;
    i32 %1 = zext i8 %var3 to i32;
    i32 %2 = and i32 %0, i32 %1;
    i32 %3 = xor i32 %2, i32 -1;
    i32 %4 = zext i8 %var2 to i32;
    i32 %5 = xor i32 %3, i32 %4;
    i32 %6 = zext i8 %var0 to i32;
    i32 %7 = xor i32 %0, i32 %6;
    i32 %8 = or i32 %5, i32 %7;
    i32 %9 = or i32 %6, i32 %8;
    i32 %10 = or i32 %4, i32 %9;
    i32 %11 = and i32 %0, i32 %10;
    i8 %12 = ztrunc i32 %11 to i8;
    ret i8 %12;
}
func @leaf4_ret_leaf2(i8 %var0, i8 %var1, i8 %var2, i8 %var3) -> i8 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var1 to i32;
    i32 %1 = zext i8 %var3 to i32;
    i32 %2 = and i32 %0, i32 %1;
    i32 %3 = xor i32 %2, i32 -1;
    i32 %4 = zext i8 %var2 to i32;
    i32 %5 = xor i32 %3, i32 %4;
    i32 %6 = zext i8 %var0 to i32;
    i32 %7 = xor i32 %0, i32 %6;
    i32 %8 = or i32 %5, i32 %7;
    i32 %9 = or i32 %6, i32 %8;
    i32 %10 = or i32 %4, i32 %9;
    i32 %11 = and i32 %0, i32 %10;
    i8 %12 = ztrunc i32 %11 to i8;
    ret i8 %12;
}
