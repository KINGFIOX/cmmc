func @test_01(i32 %var0, i32 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i32 %1 = strunc i32 %var1 to i32;
    i1 %2 = icmp slt i32 %0, i32 %1;
    i32 %3 = select i1 %2 ? i32 %var0 : i32 %var1;
    ret i32 %3;
}
func @test_02(i32 %var0, i32 %var1, i32 %var2) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i32 %1 = strunc i32 %var1 to i32;
    i1 %2 = icmp slt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = ztrunc i32 %3 to i32;
    i32 %5 = and i32 %var2, i32 %4;
    i1 %6 = icmp neq i32 %5, i32 0;
    cbr i1 %6(prob = 0.5), ^rhsBlock, ^rhsBlock1;
  ^rhsBlock:
    i32 %7 = select i1 %2 ? i32 %var0 : i32 %var1;
    ubr ^b;
  ^rhsBlock1:
    i32 %8 = select i1 %2 ? i32 %var0 : i32 %var1;
    ubr ^b;
  ^b:
    i32 %9 = phi [^rhsBlock, i32 %7] [^rhsBlock1, i32 %8];
    ret i32 %9;
}
func @test_02_select(i32 %var0, i32 %var1, i32 %var2) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i32 %1 = strunc i32 %var1 to i32;
    i1 %2 = icmp slt i32 %0, i32 %1;
    i32 %3 = select i1 %2 ? i32 %var2 : i32 0;
    i1 %4 = icmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.5), ^rhsBlock, ^rhsBlock1;
  ^rhsBlock:
    i32 %5 = select i1 %2 ? i32 %var0 : i32 %var1;
    ubr ^b;
  ^rhsBlock1:
    i32 %6 = select i1 %2 ? i32 %var0 : i32 %var1;
    ubr ^b;
  ^b:
    i32 %7 = phi [^rhsBlock, i32 %5] [^rhsBlock1, i32 %6];
    ret i32 %7;
}
func @test_03(i32 %var0, i32 %var1, i32 %var2) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i32 %1 = strunc i32 %var1 to i32;
    i1 %2 = icmp slt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = ztrunc i32 %3 to i32;
    i32 %5 = or i32 %var2, i32 %4;
    i1 %6 = icmp neq i32 %5, i32 0;
    cbr i1 %6(prob = 0.5), ^rhsBlock, ^rhsBlock1;
  ^rhsBlock:
    i32 %7 = select i1 %2 ? i32 %var0 : i32 %var1;
    ubr ^b;
  ^rhsBlock1:
    i32 %8 = select i1 %2 ? i32 %var0 : i32 %var1;
    ubr ^b;
  ^b:
    i32 %9 = phi [^rhsBlock, i32 %7] [^rhsBlock1, i32 %8];
    ret i32 %9;
}
func @test_03_select(i32 %var0, i32 %var1, i32 %var2) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i32 %1 = strunc i32 %var1 to i32;
    i1 %2 = icmp slt i32 %0, i32 %1;
    i32 %3 = select i1 %2 ? i32 1 : i32 %var2;
    i1 %4 = icmp neq i32 %3, i32 0;
    cbr i1 %4(prob = 0.5), ^rhsBlock, ^rhsBlock1;
  ^rhsBlock:
    i32 %5 = select i1 %2 ? i32 %var0 : i32 %var1;
    ubr ^b;
  ^rhsBlock1:
    i32 %6 = select i1 %2 ? i32 %var0 : i32 %var1;
    ubr ^b;
  ^b:
    i32 %7 = phi [^rhsBlock, i32 %5] [^rhsBlock1, i32 %6];
    ret i32 %7;
}
func @test_04(i32 %var0, i32 %var1, i32 %var2, i32 %var3) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i32 %1 = strunc i32 %var1 to i32;
    i1 %2 = icmp slt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = ztrunc i32 %3 to i32;
    i32 %5 = and i32 %var2, i32 %var3;
    i32 %6 = and i32 %4, i32 %5;
    i1 %7 = icmp neq i32 %6, i32 0;
    cbr i1 %7(prob = 0.5), ^rhsBlock, ^rhsBlock1;
  ^rhsBlock:
    i32 %8 = select i1 %2 ? i32 %var0 : i32 %var1;
    ubr ^b;
  ^rhsBlock1:
    i32 %9 = select i1 %2 ? i32 %var0 : i32 %var1;
    ubr ^b;
  ^b:
    i32 %10 = phi [^rhsBlock, i32 %8] [^rhsBlock1, i32 %9];
    ret i32 %10;
}
func @test_04_select(i32 %var0, i32 %var1, i32 %var2, i32 %var3) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i32 %1 = strunc i32 %var1 to i32;
    i1 %2 = icmp slt i32 %0, i32 %1;
    i32 %3 = select i1 %2 ? i32 %var2 : i32 0;
    i1 %4 = icmp neq i32 %3, i32 0;
    i32 %5 = select i1 %4 ? i32 %var3 : i32 0;
    i1 %6 = icmp neq i32 %5, i32 0;
    cbr i1 %6(prob = 0.5), ^rhsBlock, ^rhsBlock1;
  ^rhsBlock:
    i32 %7 = select i1 %2 ? i32 %var0 : i32 %var1;
    ubr ^b;
  ^rhsBlock1:
    i32 %8 = select i1 %2 ? i32 %var0 : i32 %var1;
    ubr ^b;
  ^b:
    i32 %9 = phi [^rhsBlock, i32 %7] [^rhsBlock1, i32 %8];
    ret i32 %9;
}
func @test_05(i32 %var0, i32 %var1, i32 %var2, i32 %var3) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i32 %1 = strunc i32 %var1 to i32;
    i1 %2 = icmp slt i32 %0, i32 %1;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = ztrunc i32 %3 to i32;
    i32 %5 = or i32 %var2, i32 %var3;
    i32 %6 = or i32 %4, i32 %5;
    i1 %7 = icmp neq i32 %6, i32 0;
    cbr i1 %7(prob = 0.5), ^rhsBlock, ^rhsBlock1;
  ^rhsBlock:
    i32 %8 = select i1 %2 ? i32 %var0 : i32 %var1;
    ubr ^b;
  ^rhsBlock1:
    i32 %9 = select i1 %2 ? i32 %var0 : i32 %var1;
    ubr ^b;
  ^b:
    i32 %10 = phi [^rhsBlock, i32 %8] [^rhsBlock1, i32 %9];
    ret i32 %10;
}
func @test_05_select(i32 %var0, i32 %var1, i32 %var2, i32 %var3) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var0 to i32;
    i32 %1 = strunc i32 %var1 to i32;
    i1 %2 = icmp slt i32 %0, i32 %1;
    i32 %3 = select i1 %2 ? i32 1 : i32 %var2;
    i1 %4 = icmp neq i32 %3, i32 0;
    i32 %5 = select i1 %4 ? i32 1 : i32 %var3;
    i1 %6 = icmp neq i32 %5, i32 0;
    cbr i1 %6(prob = 0.5), ^rhsBlock, ^rhsBlock1;
  ^rhsBlock:
    i32 %7 = select i1 %2 ? i32 %var0 : i32 %var1;
    ubr ^b;
  ^rhsBlock1:
    i32 %8 = select i1 %2 ? i32 %var0 : i32 %var1;
    ubr ^b;
  ^b:
    i32 %9 = phi [^rhsBlock, i32 %7] [^rhsBlock1, i32 %8];
    ret i32 %9;
}
