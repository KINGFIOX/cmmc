func @test_eq_ne_0(i8 %var0, i8 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = icmp neq i32 %0, i32 0;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = icmp neq i32 %0, i32 1;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = xor i32 %2, i32 %4;
    i32 %6 = zext i8 %var1 to i32;
    i1 %7 = icmp neq i32 %0, i32 %6;
    i32 %8 = zext i1 %7 to i32;
    i32 %9 = xor i32 %5, i32 %8;
    i32 %10 = ztrunc i32 %9 to i32;
    ret i32 %10;
}
func @test_eq_ne_1(i8 %var0, i8 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = icmp neq i32 %0, i32 0;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = icmp neq i32 %0, i32 1;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = xor i32 %2, i32 %4;
    i32 %6 = zext i8 %var1 to i32;
    i1 %7 = icmp neq i32 %0, i32 %6;
    i32 %8 = zext i1 %7 to i32;
    i32 %9 = xor i32 %5, i32 %8;
    i32 %10 = ztrunc i32 %9 to i32;
    ret i32 %10;
}
func @test_ne_eq_0(i8 %var0, i8 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = icmp neq i32 %0, i32 0;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = icmp neq i32 %0, i32 1;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = xor i32 %2, i32 %4;
    i32 %6 = zext i8 %var1 to i32;
    i1 %7 = icmp neq i32 %0, i32 %6;
    i32 %8 = zext i1 %7 to i32;
    i32 %9 = xor i32 %5, i32 %8;
    i1 %10 = icmp eq i32 %0, i32 %6;
    i32 %11 = zext i1 %10 to i32;
    i32 %12 = xor i32 %9, i32 %11;
    i1 %13 = icmp eq i32 %0, i32 0;
    i32 %14 = zext i1 %13 to i32;
    i32 %15 = xor i32 %12, i32 %14;
    i1 %16 = icmp sgt i32 %0, i32 0;
    i32 %17 = zext i1 %16 to i32;
    i32 %18 = xor i32 %15, i32 %17;
    i1 %19 = icmp sge i32 %0, i32 1;
    i32 %20 = zext i1 %19 to i32;
    i32 %21 = xor i32 %18, i32 %20;
    i1 %22 = icmp sgt i32 %0, i32 1;
    i32 %23 = zext i1 %22 to i32;
    i32 %24 = xor i32 %21, i32 %23;
    i8 %25 = strunc i8 %var0 to i8;
    i32 %26 = sext i8 %25 to i32;
    i1 %27 = icmp sgt i32 %26, i32 0;
    i32 %28 = zext i1 %27 to i32;
    i32 %29 = xor i32 %24, i32 %28;
    i32 %30 = ztrunc i32 %29 to i32;
    ret i32 %30;
}
func @test_ne_eq_1(i8 %var0, i8 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = icmp neq i32 %0, i32 1;
    cbr i1 %1(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %2 = zext i8 %var1 to i32;
    i1 %3 = icmp neq i32 %0, i32 %2;
    i32 %4 = zext i1 %3 to i32;
    i1 %5 = icmp neq i32 %0, i32 0;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = xor i32 %6, i32 1;
    i32 %8 = xor i32 %4, i32 %7;
    i1 %9 = icmp eq i32 %0, i32 %2;
    i32 %10 = zext i1 %9 to i32;
    i32 %11 = xor i32 %8, i32 %10;
    i1 %12 = icmp eq i32 %0, i32 0;
    i32 %13 = zext i1 %12 to i32;
    i32 %14 = xor i32 %11, i32 %13;
    i32 %15 = ztrunc i32 %14 to i32;
    ubr ^b;
  ^if.else:
    i32 %16 = zext i8 %var1 to i32;
    i1 %17 = icmp neq i32 %0, i32 %16;
    i32 %18 = zext i1 %17 to i32;
    i32 %19 = xor i32 %18, i32 1;
    i1 %20 = icmp eq i32 %0, i32 %16;
    i32 %21 = zext i1 %20 to i32;
    i32 %22 = xor i32 %19, i32 %21;
    i8 %23 = strunc i8 %var0 to i8;
    i32 %24 = sext i8 %23 to i32;
    i1 %25 = icmp sgt i32 %24, i32 0;
    i32 %26 = zext i1 %25 to i32;
    i32 %27 = xor i32 %22, i32 %26;
    i32 %28 = ztrunc i32 %27 to i32;
    ubr ^b;
  ^b:
    i32 %29 = phi [^if.then, i32 %15] [^if.else, i32 %28];
    ret i32 %29;
}
