func @test_eq_ne_0(i8 %var0, i8 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = icmp eq i32 %0, i32 0;
    cbr i1 %1(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %2 = zext i8 %var1 to i32;
    i1 %3 = icmp neq i32 %0, i32 %2;
    i32 %4 = zext i1 %3 to i32;
    i1 %5 = icmp neq i32 %0, i32 0;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = xor i32 %4, i32 %6;
    i1 %8 = icmp neq i32 %0, i32 1;
    i32 %9 = zext i1 %8 to i32;
    i32 %10 = xor i32 %7, i32 %9;
    i32 %11 = ztrunc i32 %10 to i32;
    ubr ^b;
  ^if.else:
    i32 %12 = zext i8 %var1 to i32;
    i1 %13 = icmp neq i32 %0, i32 %12;
    i32 %14 = zext i1 %13 to i32;
    i1 %15 = icmp neq i32 %0, i32 0;
    i32 %16 = zext i1 %15 to i32;
    i32 %17 = xor i32 %14, i32 %16;
    i1 %18 = icmp neq i32 %0, i32 1;
    i32 %19 = zext i1 %18 to i32;
    i32 %20 = xor i32 %17, i32 %19;
    i32 %21 = ztrunc i32 %20 to i32;
    ubr ^b;
  ^b:
    i32 %22 = phi [^if.then, i32 %11] [^if.else, i32 %21];
    ret i32 %22;
}
func @test_eq_ne_1(i8 %var0, i8 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = icmp eq i32 %0, i32 1;
    cbr i1 %1(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %2 = zext i8 %var1 to i32;
    i1 %3 = icmp neq i32 %0, i32 %2;
    i32 %4 = zext i1 %3 to i32;
    i1 %5 = icmp neq i32 %0, i32 0;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = xor i32 %4, i32 %6;
    i1 %8 = icmp neq i32 %0, i32 1;
    i32 %9 = zext i1 %8 to i32;
    i32 %10 = xor i32 %7, i32 %9;
    i32 %11 = ztrunc i32 %10 to i32;
    ubr ^b;
  ^if.else:
    i32 %12 = zext i8 %var1 to i32;
    i1 %13 = icmp neq i32 %0, i32 %12;
    i32 %14 = zext i1 %13 to i32;
    i1 %15 = icmp neq i32 %0, i32 0;
    i32 %16 = zext i1 %15 to i32;
    i32 %17 = xor i32 %14, i32 %16;
    i1 %18 = icmp neq i32 %0, i32 1;
    i32 %19 = zext i1 %18 to i32;
    i32 %20 = xor i32 %17, i32 %19;
    i32 %21 = ztrunc i32 %20 to i32;
    ubr ^b;
  ^b:
    i32 %22 = phi [^if.then, i32 %11] [^if.else, i32 %21];
    ret i32 %22;
}
func @test_ne_eq_0(i8 %var0, i8 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = icmp neq i32 %0, i32 0;
    cbr i1 %1(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %2 = zext i8 %var1 to i32;
    i1 %3 = icmp neq i32 %0, i32 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = xor i32 %4, i32 1;
    i1 %6 = icmp eq i32 %0, i32 0;
    i32 %7 = zext i1 %6 to i32;
    i32 %8 = xor i32 %5, i32 %7;
    i1 %9 = icmp sge i32 %0, i32 1;
    i32 %10 = zext i1 %9 to i32;
    i32 %11 = xor i32 %8, i32 %10;
    i8 %12 = strunc i8 %var0 to i8;
    i32 %13 = sext i8 %12 to i32;
    i1 %14 = icmp sgt i32 %13, i32 0;
    i32 %15 = zext i1 %14 to i32;
    i32 %16 = xor i32 %11, i32 %15;
    i1 %17 = icmp eq i32 %0, i32 %2;
    i32 %18 = zext i1 %17 to i32;
    i1 %19 = icmp neq i32 %0, i32 1;
    i32 %20 = zext i1 %19 to i32;
    i32 %21 = xor i32 %18, i32 %20;
    i1 %22 = icmp sgt i32 %0, i32 0;
    i32 %23 = zext i1 %22 to i32;
    i32 %24 = xor i32 %21, i32 %23;
    i1 %25 = icmp sgt i32 %0, i32 1;
    i32 %26 = zext i1 %25 to i32;
    i32 %27 = xor i32 %24, i32 %26;
    i32 %28 = xor i32 %16, i32 %27;
    i32 %29 = ztrunc i32 %28 to i32;
    ubr ^b;
  ^if.else:
    i32 %30 = zext i8 %var1 to i32;
    i1 %31 = icmp neq i32 %0, i32 %30;
    i32 %32 = zext i1 %31 to i32;
    i1 %33 = icmp eq i32 %0, i32 0;
    i32 %34 = zext i1 %33 to i32;
    i32 %35 = xor i32 %32, i32 %34;
    i1 %36 = icmp sge i32 %0, i32 1;
    i32 %37 = zext i1 %36 to i32;
    i32 %38 = xor i32 %35, i32 %37;
    i8 %39 = strunc i8 %var0 to i8;
    i32 %40 = sext i8 %39 to i32;
    i1 %41 = icmp sgt i32 %40, i32 0;
    i32 %42 = zext i1 %41 to i32;
    i32 %43 = xor i32 %38, i32 %42;
    i1 %44 = icmp eq i32 %0, i32 %30;
    i32 %45 = zext i1 %44 to i32;
    i1 %46 = icmp neq i32 %0, i32 1;
    i32 %47 = zext i1 %46 to i32;
    i32 %48 = xor i32 %45, i32 %47;
    i1 %49 = icmp sgt i32 %0, i32 0;
    i32 %50 = zext i1 %49 to i32;
    i32 %51 = xor i32 %48, i32 %50;
    i1 %52 = icmp sgt i32 %0, i32 1;
    i32 %53 = zext i1 %52 to i32;
    i32 %54 = xor i32 %51, i32 %53;
    i32 %55 = xor i32 %43, i32 %54;
    i32 %56 = ztrunc i32 %55 to i32;
    ubr ^b;
  ^b:
    i32 %57 = phi [^if.then, i32 %29] [^if.else, i32 %56];
    ret i32 %57;
}
func @test_ne_eq_1(i8 %var0, i8 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = icmp neq i32 %0, i32 1;
    cbr i1 %1(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %2 = zext i8 %var1 to i32;
    i1 %3 = icmp neq i32 %0, i32 %2;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = xor i32 %4, i32 1;
    i1 %6 = icmp eq i32 %0, i32 0;
    i32 %7 = zext i1 %6 to i32;
    i32 %8 = xor i32 %5, i32 %7;
    i1 %9 = icmp eq i32 %0, i32 %2;
    i32 %10 = zext i1 %9 to i32;
    i1 %11 = icmp neq i32 %0, i32 0;
    i32 %12 = zext i1 %11 to i32;
    i32 %13 = xor i32 %10, i32 %12;
    i32 %14 = xor i32 %8, i32 %13;
    i32 %15 = ztrunc i32 %14 to i32;
    ubr ^b;
  ^if.else:
    i32 %16 = zext i8 %var1 to i32;
    i1 %17 = icmp neq i32 %0, i32 %16;
    i32 %18 = zext i1 %17 to i32;
    i1 %19 = icmp eq i32 %0, i32 0;
    i32 %20 = zext i1 %19 to i32;
    i32 %21 = xor i32 %18, i32 %20;
    i1 %22 = icmp sge i32 %0, i32 1;
    i32 %23 = zext i1 %22 to i32;
    i32 %24 = xor i32 %21, i32 %23;
    i8 %25 = strunc i8 %var0 to i8;
    i32 %26 = sext i8 %25 to i32;
    i1 %27 = icmp sgt i32 %26, i32 0;
    i32 %28 = zext i1 %27 to i32;
    i32 %29 = xor i32 %24, i32 %28;
    i1 %30 = icmp eq i32 %0, i32 %16;
    i32 %31 = zext i1 %30 to i32;
    i1 %32 = icmp neq i32 %0, i32 0;
    i32 %33 = zext i1 %32 to i32;
    i32 %34 = xor i32 %31, i32 %33;
    i1 %35 = icmp sgt i32 %0, i32 0;
    i32 %36 = zext i1 %35 to i32;
    i32 %37 = xor i32 %34, i32 %36;
    i1 %38 = icmp sgt i32 %0, i32 1;
    i32 %39 = zext i1 %38 to i32;
    i32 %40 = xor i32 %37, i32 %39;
    i32 %41 = xor i32 %29, i32 %40;
    i32 %42 = ztrunc i32 %41 to i32;
    ubr ^b;
  ^b:
    i32 %43 = phi [^if.then, i32 %15] [^if.else, i32 %42];
    ret i32 %43;
}
