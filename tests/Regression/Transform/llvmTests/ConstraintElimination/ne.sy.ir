func @test_eq_ne_0(i8 %var0, i8 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp eq i32 %0, i32 0;
    cbr i1 %1(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i1 %2 = scmp neq i32 %0, i32 0;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %0, i32 1;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = xor i32 %3, i32 %5;
    i32 %7 = zext i8 %var1 to i32;
    i1 %8 = scmp neq i32 %0, i32 %7;
    i32 %9 = zext i1 %8 to i32;
    i32 %10 = xor i32 %6, i32 %9;
    i32 %11 = ztrunc i32 %10 to i32;
    ubr ^b;
  ^if.else:
    i1 %12 = scmp neq i32 %0, i32 0;
    i32 %13 = zext i1 %12 to i32;
    i1 %14 = scmp neq i32 %0, i32 1;
    i32 %15 = zext i1 %14 to i32;
    i32 %16 = xor i32 %13, i32 %15;
    i32 %17 = zext i8 %var1 to i32;
    i1 %18 = scmp neq i32 %0, i32 %17;
    i32 %19 = zext i1 %18 to i32;
    i32 %20 = xor i32 %16, i32 %19;
    i32 %21 = ztrunc i32 %20 to i32;
    ubr ^b;
  ^b:
    i32 %22 = phi [^if.then, i32 %11] [^if.else, i32 %21];
    ret i32 %22;
}
func @test_eq_ne_1(i8 %var0, i8 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp eq i32 %0, i32 1;
    cbr i1 %1(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i1 %2 = scmp neq i32 %0, i32 0;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = scmp neq i32 %0, i32 1;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = xor i32 %3, i32 %5;
    i32 %7 = zext i8 %var1 to i32;
    i1 %8 = scmp neq i32 %0, i32 %7;
    i32 %9 = zext i1 %8 to i32;
    i32 %10 = xor i32 %6, i32 %9;
    i32 %11 = ztrunc i32 %10 to i32;
    ubr ^b;
  ^if.else:
    i1 %12 = scmp neq i32 %0, i32 0;
    i32 %13 = zext i1 %12 to i32;
    i1 %14 = scmp neq i32 %0, i32 1;
    i32 %15 = zext i1 %14 to i32;
    i32 %16 = xor i32 %13, i32 %15;
    i32 %17 = zext i8 %var1 to i32;
    i1 %18 = scmp neq i32 %0, i32 %17;
    i32 %19 = zext i1 %18 to i32;
    i32 %20 = xor i32 %16, i32 %19;
    i32 %21 = ztrunc i32 %20 to i32;
    ubr ^b;
  ^b:
    i32 %22 = phi [^if.then, i32 %11] [^if.else, i32 %21];
    ret i32 %22;
}
func @test_ne_eq_0(i8 %var0, i8 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp neq i32 %0, i32 0;
    cbr i1 %1(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %2 = zext i8 %var1 to i32;
    i1 %3 = scmp neq i32 %0, i32 %2;
    i32 %4 = zext i1 %3 to i32;
    i1 %5 = scmp neq i32 %0, i32 1;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = xor i32 %6, i32 1;
    i32 %8 = xor i32 %4, i32 %7;
    i1 %9 = scmp eq i32 %0, i32 %2;
    i32 %10 = zext i1 %9 to i32;
    i32 %11 = xor i32 %8, i32 %10;
    i1 %12 = scmp eq i32 %0, i32 0;
    i32 %13 = zext i1 %12 to i32;
    i32 %14 = xor i32 %11, i32 %13;
    i1 %15 = scmp gt i32 %0, i32 0;
    i32 %16 = zext i1 %15 to i32;
    i32 %17 = xor i32 %14, i32 %16;
    i1 %18 = scmp ge i32 %0, i32 1;
    i32 %19 = zext i1 %18 to i32;
    i32 %20 = xor i32 %17, i32 %19;
    i1 %21 = scmp gt i32 %0, i32 1;
    i32 %22 = zext i1 %21 to i32;
    i32 %23 = xor i32 %20, i32 %22;
    i8 %24 = strunc i8 %var0 to i8;
    i32 %25 = sext i8 %24 to i32;
    i1 %26 = scmp gt i32 %25, i32 0;
    i32 %27 = zext i1 %26 to i32;
    i32 %28 = xor i32 %23, i32 %27;
    i32 %29 = ztrunc i32 %28 to i32;
    ubr ^b;
  ^if.else:
    i32 %30 = zext i8 %var1 to i32;
    i1 %31 = scmp neq i32 %0, i32 %30;
    i32 %32 = zext i1 %31 to i32;
    i1 %33 = scmp neq i32 %0, i32 1;
    i32 %34 = zext i1 %33 to i32;
    i32 %35 = xor i32 %32, i32 %34;
    i1 %36 = scmp eq i32 %0, i32 %30;
    i32 %37 = zext i1 %36 to i32;
    i32 %38 = xor i32 %35, i32 %37;
    i1 %39 = scmp eq i32 %0, i32 0;
    i32 %40 = zext i1 %39 to i32;
    i32 %41 = xor i32 %38, i32 %40;
    i1 %42 = scmp gt i32 %0, i32 0;
    i32 %43 = zext i1 %42 to i32;
    i32 %44 = xor i32 %41, i32 %43;
    i1 %45 = scmp ge i32 %0, i32 1;
    i32 %46 = zext i1 %45 to i32;
    i32 %47 = xor i32 %44, i32 %46;
    i1 %48 = scmp gt i32 %0, i32 1;
    i32 %49 = zext i1 %48 to i32;
    i32 %50 = xor i32 %47, i32 %49;
    i8 %51 = strunc i8 %var0 to i8;
    i32 %52 = sext i8 %51 to i32;
    i1 %53 = scmp gt i32 %52, i32 0;
    i32 %54 = zext i1 %53 to i32;
    i32 %55 = xor i32 %50, i32 %54;
    i32 %56 = ztrunc i32 %55 to i32;
    ubr ^b;
  ^b:
    i32 %57 = phi [^if.then, i32 %29] [^if.else, i32 %56];
    ret i32 %57;
}
func @test_ne_eq_1(i8 %var0, i8 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp neq i32 %0, i32 1;
    cbr i1 %1(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %2 = zext i8 %var1 to i32;
    i1 %3 = scmp neq i32 %0, i32 %2;
    i32 %4 = zext i1 %3 to i32;
    i1 %5 = scmp neq i32 %0, i32 0;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = xor i32 %6, i32 1;
    i32 %8 = xor i32 %4, i32 %7;
    i1 %9 = scmp eq i32 %0, i32 %2;
    i32 %10 = zext i1 %9 to i32;
    i32 %11 = xor i32 %8, i32 %10;
    i1 %12 = scmp eq i32 %0, i32 0;
    i32 %13 = zext i1 %12 to i32;
    i32 %14 = xor i32 %11, i32 %13;
    i32 %15 = ztrunc i32 %14 to i32;
    ubr ^b;
  ^if.else:
    i32 %16 = zext i8 %var1 to i32;
    i1 %17 = scmp neq i32 %0, i32 %16;
    i32 %18 = zext i1 %17 to i32;
    i1 %19 = scmp neq i32 %0, i32 0;
    i32 %20 = zext i1 %19 to i32;
    i32 %21 = xor i32 %18, i32 %20;
    i1 %22 = scmp eq i32 %0, i32 %16;
    i32 %23 = zext i1 %22 to i32;
    i32 %24 = xor i32 %21, i32 %23;
    i1 %25 = scmp eq i32 %0, i32 0;
    i32 %26 = zext i1 %25 to i32;
    i32 %27 = xor i32 %24, i32 %26;
    i1 %28 = scmp gt i32 %0, i32 0;
    i32 %29 = zext i1 %28 to i32;
    i32 %30 = xor i32 %27, i32 %29;
    i1 %31 = scmp ge i32 %0, i32 1;
    i32 %32 = zext i1 %31 to i32;
    i32 %33 = xor i32 %30, i32 %32;
    i1 %34 = scmp gt i32 %0, i32 1;
    i32 %35 = zext i1 %34 to i32;
    i32 %36 = xor i32 %33, i32 %35;
    i8 %37 = strunc i8 %var0 to i8;
    i32 %38 = sext i8 %37 to i32;
    i1 %39 = scmp gt i32 %38, i32 0;
    i32 %40 = zext i1 %39 to i32;
    i32 %41 = xor i32 %36, i32 %40;
    i32 %42 = ztrunc i32 %41 to i32;
    ubr ^b;
  ^b:
    i32 %43 = phi [^if.then, i32 %15] [^if.else, i32 %42];
    ret i32 %43;
}
