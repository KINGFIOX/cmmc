func @test_eq_ne_0(i8 %var0, i8 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = icmp neq i32 %0, i32 0;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = icmp neq i32 %0, i32 1;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = xor i32 %2, i32 %4;
    i32 %6 = zext i8 %var1 to i32;
    i1 %7 = icmp neq i32 %0, i32 %6;
    i32 %8 = zext i1 %7 to i32;
    i32 %9 = xor i32 %5, i32 %8;
    i32 %10 = ztrunc i32 %9 to i32;
    ret i32 %10;
}
func @test_eq_ne_1(i8 %var0, i8 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = icmp neq i32 %0, i32 0;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = icmp neq i32 %0, i32 1;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = xor i32 %2, i32 %4;
    i32 %6 = zext i8 %var1 to i32;
    i1 %7 = icmp neq i32 %0, i32 %6;
    i32 %8 = zext i1 %7 to i32;
    i32 %9 = xor i32 %5, i32 %8;
    i32 %10 = ztrunc i32 %9 to i32;
    ret i32 %10;
}
func @test_ne_eq_0(i8 %var0, i8 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = icmp neq i32 %0, i32 0;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = icmp neq i32 %0, i32 1;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = xor i32 %2, i32 %4;
    i32 %6 = zext i8 %var1 to i32;
    i1 %7 = icmp neq i32 %0, i32 %6;
    i32 %8 = zext i1 %7 to i32;
    i32 %9 = xor i32 %5, i32 %8;
    i1 %10 = icmp eq i32 %0, i32 %6;
    i32 %11 = zext i1 %10 to i32;
    i32 %12 = xor i32 %9, i32 %11;
    i1 %13 = icmp eq i32 %0, i32 0;
    i32 %14 = zext i1 %13 to i32;
    i32 %15 = xor i32 %12, i32 %14;
    i1 %16 = icmp sgt i32 %0, i32 1;
    i32 %17 = zext i1 %16 to i32;
    i32 %18 = xor i32 %15, i32 %17;
    i8 %19 = strunc i8 %var0 to i8;
    i32 %20 = sext i8 %19 to i32;
    i1 %21 = icmp sgt i32 %20, i32 0;
    i32 %22 = zext i1 %21 to i32;
    i32 %23 = xor i32 %18, i32 %22;
    i32 %24 = ztrunc i32 %23 to i32;
    ret i32 %24;
}
func @test_ne_eq_1(i8 %var0, i8 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = icmp neq i32 %0, i32 1;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = icmp neq i32 %0, i32 0;
    i32 %4 = zext i1 %3 to i32;
    i32 %5 = xor i32 %2, i32 %4;
    i32 %6 = zext i8 %var1 to i32;
    i1 %7 = icmp neq i32 %0, i32 %6;
    i32 %8 = zext i1 %7 to i32;
    i32 %9 = xor i32 %5, i32 %8;
    i1 %10 = icmp eq i32 %0, i32 %6;
    i32 %11 = zext i1 %10 to i32;
    i32 %12 = xor i32 %9, i32 %11;
    i1 %13 = icmp eq i32 %0, i32 0;
    i32 %14 = zext i1 %13 to i32;
    i32 %15 = xor i32 %12, i32 %14;
    cbr i1 %1(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %16 = ztrunc i32 %15 to i32;
    ubr ^b;
  ^if.else:
    i8 %17 = strunc i8 %var0 to i8;
    i32 %18 = sext i8 %17 to i32;
    i1 %19 = icmp sgt i32 %18, i32 0;
    i32 %20 = zext i1 %19 to i32;
    i32 %21 = xor i32 %15, i32 %20;
    i32 %22 = ztrunc i32 %21 to i32;
    ubr ^b;
  ^b:
    i32 %23 = phi [^if.then, i32 %16] [^if.else, i32 %22];
    ret i32 %23;
}
