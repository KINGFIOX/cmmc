func @test_add_nsw(i8 %var0, i8 %var2) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i32 %1 = add i32 %0, i32 1;
    i8 %2 = ztrunc i32 %1 to i8;
    i8 %3 = strunc i8 %2 to i8;
    i32 %4 = sext i8 %3 to i32;
    i8 %5 = strunc i8 %var2 to i8;
    i32 %6 = sext i8 %5 to i32;
    i1 %7 = icmp sge i32 %4, i32 %6;
    i32 %8 = zext i1 %7 to i32;
    i32 %9 = zext i8 %var2 to i32;
    i1 %10 = icmp sgt i32 %0, i32 %9;
    i32 %11 = zext i1 %10 to i32;
    i32 %12 = xor i32 %8, i32 %11;
    i32 %13 = and i32 %1, i32 255;
    i1 %14 = icmp sle i32 %9, i32 %13;
    i32 %15 = zext i1 %14 to i32;
    i32 %16 = xor i32 %12, i32 %15;
    i32 %17 = add i32 %0, i32 3;
    i32 %18 = and i32 %17, i32 255;
    i1 %19 = icmp sle i32 %9, i32 %18;
    i32 %20 = zext i1 %19 to i32;
    i32 %21 = xor i32 %16, i32 %20;
    i8 %22 = strunc i8 %var0 to i8;
    i32 %23 = sext i8 %22 to i32;
    i32 %24 = add i32 %23, i32 3;
    i1 %25 = icmp sle i32 %6, i32 %24;
    i8 %26 = ztrunc i32 %17 to i8;
    i8 %27 = strunc i8 %26 to i8;
    i32 %28 = sext i8 %27 to i32;
    cbr i1 %25(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i1 %29 = icmp slt i32 %9, i32 %18;
    i32 %30 = zext i1 %29 to i32;
    i32 %31 = xor i32 %21, i32 %30;
    i1 %32 = icmp sle i32 %6, i32 %28;
    i32 %33 = zext i1 %32 to i32;
    i32 %34 = xor i32 %31, i32 %33;
    i32 %35 = ztrunc i32 %34 to i32;
    ubr ^b;
  ^if.else:
    i32 %36 = add i32 %0, i32 2;
    i32 %37 = and i32 %36, i32 255;
    i1 %38 = icmp sle i32 %9, i32 %37;
    i32 %39 = zext i1 %38 to i32;
    i1 %40 = icmp slt i32 %6, i32 %23;
    i32 %41 = zext i1 %40 to i32;
    i32 %42 = xor i32 %21, i32 %41;
    i32 %43 = xor i32 %39, i32 %42;
    i8 %44 = ztrunc i32 %36 to i8;
    i8 %45 = strunc i8 %44 to i8;
    i32 %46 = sext i8 %45 to i32;
    i1 %47 = icmp sle i32 %6, i32 %46;
    i32 %48 = zext i1 %47 to i32;
    i32 %49 = xor i32 %43, i32 %48;
    i1 %50 = icmp sge i32 %4, i32 %46;
    i32 %51 = zext i1 %50 to i32;
    i32 %52 = xor i32 %49, i32 %51;
    i1 %53 = icmp sle i32 %4, i32 %28;
    i32 %54 = zext i1 %53 to i32;
    i32 %55 = xor i32 %52, i32 %54;
    i32 %56 = add i32 %0, i32 4;
    i32 %57 = and i32 %56, i32 255;
    i1 %58 = icmp sle i32 %9, i32 %57;
    i32 %59 = zext i1 %58 to i32;
    i32 %60 = xor i32 %55, i32 %59;
    i8 %61 = ztrunc i32 %56 to i8;
    i8 %62 = strunc i8 %61 to i8;
    i32 %63 = sext i8 %62 to i32;
    i1 %64 = icmp sle i32 %4, i32 %63;
    i32 %65 = zext i1 %64 to i32;
    i32 %66 = xor i32 %60, i32 %65;
    i1 %67 = icmp sle i32 %6, i32 %63;
    i32 %68 = zext i1 %67 to i32;
    i32 %69 = xor i32 %66, i32 %68;
    i32 %70 = ztrunc i32 %69 to i32;
    ubr ^b;
  ^b:
    i32 %71 = phi [^if.then, i32 %35] [^if.else, i32 %70];
    ret i32 %71;
}
func @test_add_nuw(i8 %var0, i8 %var2) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i32 %1 = add i32 %0, i32 1;
    i8 %2 = ztrunc i32 %1 to i8;
    i8 %3 = strunc i8 %2 to i8;
    i32 %4 = sext i8 %3 to i32;
    i8 %5 = strunc i8 %var2 to i8;
    i32 %6 = sext i8 %5 to i32;
    i1 %7 = icmp sge i32 %4, i32 %6;
    i32 %8 = zext i1 %7 to i32;
    i32 %9 = zext i8 %var2 to i32;
    i1 %10 = icmp sgt i32 %0, i32 %9;
    i32 %11 = zext i1 %10 to i32;
    i32 %12 = xor i32 %8, i32 %11;
    i32 %13 = and i32 %1, i32 255;
    i1 %14 = icmp sle i32 %9, i32 %13;
    i32 %15 = zext i1 %14 to i32;
    i32 %16 = xor i32 %12, i32 %15;
    i32 %17 = add i32 %0, i32 3;
    i32 %18 = and i32 %17, i32 255;
    i1 %19 = icmp sle i32 %9, i32 %18;
    i32 %20 = zext i1 %19 to i32;
    i32 %21 = xor i32 %16, i32 %20;
    i8 %22 = ztrunc i32 %17 to i8;
    i8 %23 = strunc i8 %22 to i8;
    i32 %24 = sext i8 %23 to i32;
    i1 %25 = icmp sle i32 %9, i32 %17;
    cbr i1 %25(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i1 %26 = icmp slt i32 %9, i32 %18;
    i32 %27 = zext i1 %26 to i32;
    i32 %28 = xor i32 %21, i32 %27;
    i1 %29 = icmp sle i32 %6, i32 %24;
    i32 %30 = zext i1 %29 to i32;
    i32 %31 = xor i32 %28, i32 %30;
    i32 %32 = ztrunc i32 %31 to i32;
    ubr ^b;
  ^if.else:
    i8 %33 = strunc i8 %var0 to i8;
    i32 %34 = sext i8 %33 to i32;
    i1 %35 = icmp slt i32 %6, i32 %34;
    i32 %36 = zext i1 %35 to i32;
    i32 %37 = xor i32 %21, i32 %36;
    i32 %38 = add i32 %0, i32 2;
    i32 %39 = and i32 %38, i32 255;
    i1 %40 = icmp sle i32 %9, i32 %39;
    i32 %41 = zext i1 %40 to i32;
    i32 %42 = xor i32 %37, i32 %41;
    i8 %43 = ztrunc i32 %38 to i8;
    i8 %44 = strunc i8 %43 to i8;
    i32 %45 = sext i8 %44 to i32;
    i1 %46 = icmp sle i32 %6, i32 %45;
    i32 %47 = zext i1 %46 to i32;
    i32 %48 = xor i32 %42, i32 %47;
    i1 %49 = icmp sge i32 %4, i32 %45;
    i32 %50 = zext i1 %49 to i32;
    i32 %51 = xor i32 %48, i32 %50;
    i1 %52 = icmp sle i32 %4, i32 %24;
    i32 %53 = zext i1 %52 to i32;
    i32 %54 = xor i32 %51, i32 %53;
    i32 %55 = add i32 %0, i32 4;
    i32 %56 = and i32 %55, i32 255;
    i1 %57 = icmp sle i32 %9, i32 %56;
    i32 %58 = zext i1 %57 to i32;
    i32 %59 = xor i32 %54, i32 %58;
    i8 %60 = ztrunc i32 %55 to i8;
    i8 %61 = strunc i8 %60 to i8;
    i32 %62 = sext i8 %61 to i32;
    i1 %63 = icmp sle i32 %4, i32 %62;
    i32 %64 = zext i1 %63 to i32;
    i32 %65 = xor i32 %59, i32 %64;
    i1 %66 = icmp sle i32 %6, i32 %62;
    i32 %67 = zext i1 %66 to i32;
    i32 %68 = xor i32 %65, i32 %67;
    i32 %69 = ztrunc i32 %68 to i32;
    ubr ^b;
  ^b:
    i32 %70 = phi [^if.then, i32 %32] [^if.else, i32 %69];
    ret i32 %70;
}
func @test_and_ule_sge(i32 %var0, i32 %var1, i32 %var2, i32 %var3) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i1 %0 = icmp ule i32 %var0, i32 %var1;
    i32 %1 = zext i1 %0 to i32;
    i1 %2 = icmp ule i32 %var0, i32 %var2;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = xor i32 %1, i32 %3;
    i1 %5 = icmp ule i32 %var1, i32 %var2;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = xor i32 %4, i32 %6;
    i1 %8 = icmp ule i32 %var0, i32 %var3;
    i32 %9 = zext i1 %8 to i32;
    i32 %10 = xor i32 %7, i32 %9;
    i32 %11 = strunc i32 %var0 to i32;
    i32 %12 = strunc i32 %var2 to i32;
    i1 %13 = icmp sle i32 %11, i32 %12;
    i32 %14 = zext i1 %13 to i32;
    i32 %15 = xor i32 %10, i32 %14;
    i32 %16 = strunc i32 %var1 to i32;
    i1 %17 = icmp sle i32 %11, i32 %16;
    i32 %18 = zext i1 %17 to i32;
    i32 %19 = xor i32 %15, i32 %18;
    i1 %20 = icmp sge i32 %12, i32 %16;
    i32 %21 = zext i1 %20 to i32;
    i32 %22 = xor i32 %19, i32 %21;
    i32 %23 = strunc i32 %var3 to i32;
    i1 %24 = icmp sle i32 %11, i32 %23;
    i32 %25 = zext i1 %24 to i32;
    i32 %26 = xor i32 %22, i32 %25;
    i32 %27 = ztrunc i32 %26 to i32;
    ret i32 %27;
}
func @test_sub_nuw(i8 %var0, i8 %var2) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i32 %1 = add i32 %0, i32 -1;
    i8 %2 = ztrunc i32 %1 to i8;
    i8 %3 = strunc i8 %2 to i8;
    i32 %4 = sext i8 %3 to i32;
    i8 %5 = strunc i8 %var2 to i8;
    i32 %6 = sext i8 %5 to i32;
    i1 %7 = icmp sge i32 %4, i32 %6;
    i32 %8 = zext i1 %7 to i32;
    i32 %9 = zext i8 %var2 to i32;
    i1 %10 = icmp sgt i32 %0, i32 %9;
    i32 %11 = zext i1 %10 to i32;
    i32 %12 = xor i32 %8, i32 %11;
    i32 %13 = and i32 %1, i32 255;
    i1 %14 = icmp sle i32 %9, i32 %13;
    i32 %15 = zext i1 %14 to i32;
    i32 %16 = xor i32 %12, i32 %15;
    i32 %17 = add i32 %0, i32 -3;
    i1 %18 = icmp sle i32 %9, i32 %17;
    cbr i1 %18(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %19 = add i32 %0, i32 3;
    i32 %20 = and i32 %19, i32 255;
    i1 %21 = icmp sle i32 %9, i32 %20;
    i32 %22 = zext i1 %21 to i32;
    i32 %23 = xor i32 %16, i32 %22;
    i1 %24 = icmp slt i32 %9, i32 %20;
    i32 %25 = zext i1 %24 to i32;
    i32 %26 = xor i32 %23, i32 %25;
    i8 %27 = ztrunc i32 %19 to i8;
    i8 %28 = strunc i8 %27 to i8;
    i32 %29 = sext i8 %28 to i32;
    i1 %30 = icmp sle i32 %6, i32 %29;
    i32 %31 = zext i1 %30 to i32;
    i32 %32 = xor i32 %26, i32 %31;
    i32 %33 = ztrunc i32 %32 to i32;
    ubr ^b;
  ^if.else:
    i8 %34 = strunc i8 %var0 to i8;
    i32 %35 = sext i8 %34 to i32;
    i1 %36 = icmp slt i32 %6, i32 %35;
    i32 %37 = zext i1 %36 to i32;
    i32 %38 = xor i32 %16, i32 %37;
    i32 %39 = add i32 %0, i32 -2;
    i32 %40 = and i32 %39, i32 255;
    i1 %41 = icmp sle i32 %9, i32 %40;
    i32 %42 = zext i1 %41 to i32;
    i32 %43 = xor i32 %38, i32 %42;
    i8 %44 = ztrunc i32 %39 to i8;
    i8 %45 = strunc i8 %44 to i8;
    i32 %46 = sext i8 %45 to i32;
    i1 %47 = icmp sle i32 %6, i32 %46;
    i32 %48 = zext i1 %47 to i32;
    i32 %49 = xor i32 %43, i32 %48;
    i1 %50 = icmp sge i32 %4, i32 %46;
    i32 %51 = zext i1 %50 to i32;
    i32 %52 = xor i32 %49, i32 %51;
    i32 %53 = and i32 %17, i32 255;
    i1 %54 = icmp sle i32 %9, i32 %53;
    i32 %55 = zext i1 %54 to i32;
    i32 %56 = xor i32 %52, i32 %55;
    i8 %57 = ztrunc i32 %17 to i8;
    i8 %58 = strunc i8 %57 to i8;
    i32 %59 = sext i8 %58 to i32;
    i1 %60 = icmp sle i32 %4, i32 %59;
    i32 %61 = zext i1 %60 to i32;
    i32 %62 = xor i32 %56, i32 %61;
    i32 %63 = add i32 %0, i32 -4;
    i32 %64 = and i32 %63, i32 255;
    i1 %65 = icmp sle i32 %9, i32 %64;
    i32 %66 = zext i1 %65 to i32;
    i32 %67 = xor i32 %62, i32 %66;
    i8 %68 = ztrunc i32 %63 to i8;
    i8 %69 = strunc i8 %68 to i8;
    i32 %70 = sext i8 %69 to i32;
    i1 %71 = icmp sle i32 %4, i32 %70;
    i32 %72 = zext i1 %71 to i32;
    i32 %73 = xor i32 %67, i32 %72;
    i1 %74 = icmp sle i32 %6, i32 %70;
    i32 %75 = zext i1 %74 to i32;
    i32 %76 = xor i32 %73, i32 %75;
    i32 %77 = ztrunc i32 %76 to i32;
    ubr ^b;
  ^b:
    i32 %78 = phi [^if.then, i32 %33] [^if.else, i32 %77];
    ret i32 %78;
}
