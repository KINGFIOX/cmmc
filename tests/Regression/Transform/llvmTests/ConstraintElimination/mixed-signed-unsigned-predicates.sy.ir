func @test_add_nsw(i8 %var0, i8 %var2) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i32 %2 = add i32 %1, i32 3;
    i8 %3 = strunc i8 %var2 to i8;
    i32 %4 = sext i8 %3 to i32;
    i1 %5 = icmp sge i32 %2, i32 %4;
    cbr i1 %5(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %6 = zext i8 %var0 to i32;
    i32 %7 = add i32 %6, i32 1;
    i32 %8 = and i32 %7, i32 255;
    i32 %9 = zext i8 %var2 to i32;
    i1 %10 = icmp sge i32 %8, i32 %9;
    i32 %11 = zext i1 %10 to i32;
    i1 %12 = icmp sgt i32 %6, i32 %9;
    i32 %13 = zext i1 %12 to i32;
    i32 %14 = xor i32 %11, i32 %13;
    i32 %15 = add i32 %6, i32 3;
    i32 %16 = and i32 %15, i32 255;
    i1 %17 = icmp sle i32 %9, i32 %16;
    i32 %18 = zext i1 %17 to i32;
    i32 %19 = xor i32 %14, i32 %18;
    i1 %20 = icmp slt i32 %9, i32 %16;
    i32 %21 = zext i1 %20 to i32;
    i32 %22 = xor i32 %19, i32 %21;
    i8 %23 = ztrunc i32 %7 to i8;
    i8 %24 = strunc i8 %23 to i8;
    i32 %25 = sext i8 %24 to i32;
    i1 %26 = icmp sle i32 %4, i32 %25;
    i32 %27 = zext i1 %26 to i32;
    i32 %28 = xor i32 %22, i32 %27;
    i8 %29 = ztrunc i32 %15 to i8;
    i8 %30 = strunc i8 %29 to i8;
    i32 %31 = sext i8 %30 to i32;
    i1 %32 = icmp sle i32 %4, i32 %31;
    i32 %33 = zext i1 %32 to i32;
    i32 %34 = xor i32 %28, i32 %33;
    i32 %35 = ztrunc i32 %34 to i32;
    ubr ^b;
  ^if.else:
    i32 %36 = zext i8 %var0 to i32;
    i32 %37 = add i32 %36, i32 1;
    i32 %38 = and i32 %37, i32 255;
    i32 %39 = zext i8 %var2 to i32;
    i1 %40 = icmp sge i32 %38, i32 %39;
    i32 %41 = zext i1 %40 to i32;
    i1 %42 = icmp sgt i32 %36, i32 %39;
    i32 %43 = zext i1 %42 to i32;
    i32 %44 = xor i32 %41, i32 %43;
    i1 %45 = icmp sgt i32 %1, i32 %4;
    i32 %46 = zext i1 %45 to i32;
    i32 %47 = xor i32 %44, i32 %46;
    i8 %48 = ztrunc i32 %37 to i8;
    i8 %49 = strunc i8 %48 to i8;
    i32 %50 = sext i8 %49 to i32;
    i1 %51 = icmp sle i32 %4, i32 %50;
    i32 %52 = zext i1 %51 to i32;
    i32 %53 = xor i32 %47, i32 %52;
    i32 %54 = add i32 %36, i32 2;
    i32 %55 = and i32 %54, i32 255;
    i1 %56 = icmp sle i32 %39, i32 %55;
    i32 %57 = zext i1 %56 to i32;
    i32 %58 = xor i32 %53, i32 %57;
    i8 %59 = ztrunc i32 %54 to i8;
    i8 %60 = strunc i8 %59 to i8;
    i32 %61 = sext i8 %60 to i32;
    i1 %62 = icmp sle i32 %4, i32 %61;
    i32 %63 = zext i1 %62 to i32;
    i32 %64 = xor i32 %58, i32 %63;
    i1 %65 = icmp sge i32 %50, i32 %61;
    i32 %66 = zext i1 %65 to i32;
    i32 %67 = xor i32 %64, i32 %66;
    i32 %68 = add i32 %36, i32 3;
    i32 %69 = and i32 %68, i32 255;
    i1 %70 = icmp sle i32 %39, i32 %69;
    i32 %71 = zext i1 %70 to i32;
    i32 %72 = xor i32 %67, i32 %71;
    i8 %73 = ztrunc i32 %68 to i8;
    i8 %74 = strunc i8 %73 to i8;
    i32 %75 = sext i8 %74 to i32;
    i1 %76 = icmp sle i32 %50, i32 %75;
    i32 %77 = zext i1 %76 to i32;
    i32 %78 = xor i32 %72, i32 %77;
    i32 %79 = add i32 %36, i32 4;
    i32 %80 = and i32 %79, i32 255;
    i1 %81 = icmp sle i32 %39, i32 %80;
    i32 %82 = zext i1 %81 to i32;
    i32 %83 = xor i32 %78, i32 %82;
    i8 %84 = ztrunc i32 %79 to i8;
    i8 %85 = strunc i8 %84 to i8;
    i32 %86 = sext i8 %85 to i32;
    i1 %87 = icmp sle i32 %50, i32 %86;
    i32 %88 = zext i1 %87 to i32;
    i32 %89 = xor i32 %83, i32 %88;
    i1 %90 = icmp sle i32 %4, i32 %86;
    i32 %91 = zext i1 %90 to i32;
    i32 %92 = xor i32 %89, i32 %91;
    i32 %93 = ztrunc i32 %92 to i32;
    ubr ^b;
  ^b:
    i32 %94 = phi [^if.then, i32 %35] [^if.else, i32 %93];
    ret i32 %94;
}
func @test_add_nuw(i8 %var0, i8 %var2) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i32 %1 = add i32 %0, i32 3;
    i32 %2 = zext i8 %var2 to i32;
    i1 %3 = icmp sge i32 %1, i32 %2;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %4 = add i32 %0, i32 1;
    i32 %5 = and i32 %4, i32 255;
    i1 %6 = icmp sle i32 %2, i32 %5;
    i32 %7 = zext i1 %6 to i32;
    i1 %8 = icmp sgt i32 %0, i32 %2;
    i32 %9 = zext i1 %8 to i32;
    i32 %10 = xor i32 %7, i32 %9;
    i32 %11 = and i32 %1, i32 255;
    i1 %12 = icmp sle i32 %2, i32 %11;
    i32 %13 = zext i1 %12 to i32;
    i32 %14 = xor i32 %10, i32 %13;
    i1 %15 = icmp slt i32 %2, i32 %11;
    i32 %16 = zext i1 %15 to i32;
    i32 %17 = xor i32 %14, i32 %16;
    i8 %18 = ztrunc i32 %4 to i8;
    i8 %19 = strunc i8 %18 to i8;
    i32 %20 = sext i8 %19 to i32;
    i8 %21 = strunc i8 %var2 to i8;
    i32 %22 = sext i8 %21 to i32;
    i1 %23 = icmp sge i32 %20, i32 %22;
    i32 %24 = zext i1 %23 to i32;
    i32 %25 = xor i32 %17, i32 %24;
    i8 %26 = ztrunc i32 %1 to i8;
    i8 %27 = strunc i8 %26 to i8;
    i32 %28 = sext i8 %27 to i32;
    i1 %29 = icmp sle i32 %22, i32 %28;
    i32 %30 = zext i1 %29 to i32;
    i32 %31 = xor i32 %25, i32 %30;
    i32 %32 = ztrunc i32 %31 to i32;
    ubr ^b;
  ^if.else:
    i32 %33 = add i32 %0, i32 1;
    i32 %34 = and i32 %33, i32 255;
    i1 %35 = icmp sle i32 %2, i32 %34;
    i32 %36 = zext i1 %35 to i32;
    i1 %37 = icmp sgt i32 %0, i32 %2;
    i32 %38 = zext i1 %37 to i32;
    i32 %39 = xor i32 %36, i32 %38;
    i8 %40 = strunc i8 %var0 to i8;
    i32 %41 = sext i8 %40 to i32;
    i8 %42 = strunc i8 %var2 to i8;
    i32 %43 = sext i8 %42 to i32;
    i1 %44 = icmp sgt i32 %41, i32 %43;
    i32 %45 = zext i1 %44 to i32;
    i32 %46 = xor i32 %39, i32 %45;
    i8 %47 = ztrunc i32 %33 to i8;
    i8 %48 = strunc i8 %47 to i8;
    i32 %49 = sext i8 %48 to i32;
    i1 %50 = icmp sle i32 %43, i32 %49;
    i32 %51 = zext i1 %50 to i32;
    i32 %52 = xor i32 %46, i32 %51;
    i32 %53 = add i32 %0, i32 2;
    i32 %54 = and i32 %53, i32 255;
    i1 %55 = icmp sle i32 %2, i32 %54;
    i32 %56 = zext i1 %55 to i32;
    i32 %57 = xor i32 %52, i32 %56;
    i8 %58 = ztrunc i32 %53 to i8;
    i8 %59 = strunc i8 %58 to i8;
    i32 %60 = sext i8 %59 to i32;
    i1 %61 = icmp sle i32 %43, i32 %60;
    i32 %62 = zext i1 %61 to i32;
    i32 %63 = xor i32 %57, i32 %62;
    i1 %64 = icmp sge i32 %49, i32 %60;
    i32 %65 = zext i1 %64 to i32;
    i32 %66 = xor i32 %63, i32 %65;
    i32 %67 = and i32 %1, i32 255;
    i1 %68 = icmp sle i32 %2, i32 %67;
    i32 %69 = zext i1 %68 to i32;
    i32 %70 = xor i32 %66, i32 %69;
    i8 %71 = ztrunc i32 %1 to i8;
    i8 %72 = strunc i8 %71 to i8;
    i32 %73 = sext i8 %72 to i32;
    i1 %74 = icmp sle i32 %49, i32 %73;
    i32 %75 = zext i1 %74 to i32;
    i32 %76 = xor i32 %70, i32 %75;
    i32 %77 = add i32 %0, i32 4;
    i32 %78 = and i32 %77, i32 255;
    i1 %79 = icmp sle i32 %2, i32 %78;
    i32 %80 = zext i1 %79 to i32;
    i32 %81 = xor i32 %76, i32 %80;
    i8 %82 = ztrunc i32 %77 to i8;
    i8 %83 = strunc i8 %82 to i8;
    i32 %84 = sext i8 %83 to i32;
    i1 %85 = icmp sle i32 %49, i32 %84;
    i32 %86 = zext i1 %85 to i32;
    i32 %87 = xor i32 %81, i32 %86;
    i1 %88 = icmp sle i32 %43, i32 %84;
    i32 %89 = zext i1 %88 to i32;
    i32 %90 = xor i32 %87, i32 %89;
    i32 %91 = ztrunc i32 %90 to i32;
    ubr ^b;
  ^b:
    i32 %92 = phi [^if.then, i32 %32] [^if.else, i32 %91];
    ret i32 %92;
}
func @test_and_ule_sge(i32 %var0, i32 %var1, i32 %var2, i32 %var3) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = strunc i32 %var1 to i32;
    i32 %1 = strunc i32 %var2 to i32;
    i1 %2 = icmp sle i32 %0, i32 %1;
    i1 %3 = icmp ule i32 %var0, i32 %var1;
    i1 %4 = and i1 %2, i1 %3;
    cbr i1 %4(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i1 %5 = icmp ule i32 %var0, i32 %var2;
    i32 %6 = zext i1 %5 to i32;
    i1 %7 = icmp ule i32 %var1, i32 %var2;
    i32 %8 = zext i1 %7 to i32;
    i32 %9 = xor i32 %6, i32 %8;
    i1 %10 = icmp ule i32 %var0, i32 %var3;
    i32 %11 = zext i1 %10 to i32;
    i32 %12 = xor i32 %9, i32 %11;
    i32 %13 = strunc i32 %var0 to i32;
    i1 %14 = icmp sge i32 %1, i32 %13;
    i32 %15 = zext i1 %14 to i32;
    i32 %16 = xor i32 %12, i32 %15;
    i1 %17 = icmp sge i32 %0, i32 %13;
    i32 %18 = zext i1 %17 to i32;
    i32 %19 = xor i32 %16, i32 %18;
    i32 %20 = strunc i32 %var3 to i32;
    i1 %21 = icmp sle i32 %13, i32 %20;
    i32 %22 = zext i1 %21 to i32;
    i32 %23 = xor i32 %19, i32 %22;
    i32 %24 = ztrunc i32 %23 to i32;
    ubr ^b;
  ^if.else:
    i1 %25 = icmp ule i32 %var0, i32 %var2;
    i32 %26 = zext i1 %25 to i32;
    i1 %27 = icmp ule i32 %var0, i32 %var3;
    i32 %28 = zext i1 %27 to i32;
    i32 %29 = xor i32 %26, i32 %28;
    i32 %30 = zext i1 %3 to i32;
    i32 %31 = xor i32 %29, i32 %30;
    i1 %32 = icmp ule i32 %var1, i32 %var2;
    i32 %33 = zext i1 %32 to i32;
    i32 %34 = xor i32 %31, i32 %33;
    i32 %35 = strunc i32 %var0 to i32;
    i1 %36 = icmp sge i32 %1, i32 %35;
    i32 %37 = zext i1 %36 to i32;
    i32 %38 = xor i32 %34, i32 %37;
    i32 %39 = strunc i32 %var3 to i32;
    i1 %40 = icmp sle i32 %35, i32 %39;
    i32 %41 = zext i1 %40 to i32;
    i32 %42 = xor i32 %38, i32 %41;
    i1 %43 = icmp sge i32 %0, i32 %35;
    i32 %44 = zext i1 %43 to i32;
    i32 %45 = xor i32 %42, i32 %44;
    i32 %46 = zext i1 %2 to i32;
    i32 %47 = xor i32 %45, i32 %46;
    i32 %48 = ztrunc i32 %47 to i32;
    ubr ^b;
  ^b:
    i32 %49 = phi [^if.then, i32 %24] [^if.else, i32 %48];
    ret i32 %49;
}
func @test_sub_nuw(i8 %var0, i8 %var2) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i32 %1 = add i32 %0, i32 -3;
    i32 %2 = zext i8 %var2 to i32;
    i1 %3 = icmp sge i32 %1, i32 %2;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %4 = add i32 %0, i32 -1;
    i32 %5 = and i32 %4, i32 255;
    i1 %6 = icmp sle i32 %2, i32 %5;
    i32 %7 = zext i1 %6 to i32;
    i1 %8 = icmp sgt i32 %0, i32 %2;
    i32 %9 = zext i1 %8 to i32;
    i32 %10 = xor i32 %7, i32 %9;
    i32 %11 = add i32 %0, i32 3;
    i32 %12 = and i32 %11, i32 255;
    i1 %13 = icmp sle i32 %2, i32 %12;
    i32 %14 = zext i1 %13 to i32;
    i32 %15 = xor i32 %10, i32 %14;
    i1 %16 = icmp slt i32 %2, i32 %12;
    i32 %17 = zext i1 %16 to i32;
    i32 %18 = xor i32 %15, i32 %17;
    i8 %19 = ztrunc i32 %4 to i8;
    i8 %20 = strunc i8 %19 to i8;
    i32 %21 = sext i8 %20 to i32;
    i8 %22 = strunc i8 %var2 to i8;
    i32 %23 = sext i8 %22 to i32;
    i1 %24 = icmp sge i32 %21, i32 %23;
    i32 %25 = zext i1 %24 to i32;
    i32 %26 = xor i32 %18, i32 %25;
    i8 %27 = ztrunc i32 %11 to i8;
    i8 %28 = strunc i8 %27 to i8;
    i32 %29 = sext i8 %28 to i32;
    i1 %30 = icmp sle i32 %23, i32 %29;
    i32 %31 = zext i1 %30 to i32;
    i32 %32 = xor i32 %26, i32 %31;
    i32 %33 = ztrunc i32 %32 to i32;
    ubr ^b;
  ^if.else:
    i32 %34 = add i32 %0, i32 -1;
    i32 %35 = and i32 %34, i32 255;
    i1 %36 = icmp sle i32 %2, i32 %35;
    i32 %37 = zext i1 %36 to i32;
    i1 %38 = icmp sgt i32 %0, i32 %2;
    i32 %39 = zext i1 %38 to i32;
    i32 %40 = xor i32 %37, i32 %39;
    i8 %41 = strunc i8 %var0 to i8;
    i32 %42 = sext i8 %41 to i32;
    i8 %43 = strunc i8 %var2 to i8;
    i32 %44 = sext i8 %43 to i32;
    i1 %45 = icmp sgt i32 %42, i32 %44;
    i32 %46 = zext i1 %45 to i32;
    i32 %47 = xor i32 %40, i32 %46;
    i8 %48 = ztrunc i32 %34 to i8;
    i8 %49 = strunc i8 %48 to i8;
    i32 %50 = sext i8 %49 to i32;
    i1 %51 = icmp sle i32 %44, i32 %50;
    i32 %52 = zext i1 %51 to i32;
    i32 %53 = xor i32 %47, i32 %52;
    i32 %54 = add i32 %0, i32 -2;
    i32 %55 = and i32 %54, i32 255;
    i1 %56 = icmp sle i32 %2, i32 %55;
    i32 %57 = zext i1 %56 to i32;
    i32 %58 = xor i32 %53, i32 %57;
    i8 %59 = ztrunc i32 %54 to i8;
    i8 %60 = strunc i8 %59 to i8;
    i32 %61 = sext i8 %60 to i32;
    i1 %62 = icmp sle i32 %44, i32 %61;
    i32 %63 = zext i1 %62 to i32;
    i32 %64 = xor i32 %58, i32 %63;
    i1 %65 = icmp sge i32 %50, i32 %61;
    i32 %66 = zext i1 %65 to i32;
    i32 %67 = xor i32 %64, i32 %66;
    i32 %68 = and i32 %1, i32 255;
    i1 %69 = icmp sle i32 %2, i32 %68;
    i32 %70 = zext i1 %69 to i32;
    i32 %71 = xor i32 %67, i32 %70;
    i8 %72 = ztrunc i32 %1 to i8;
    i8 %73 = strunc i8 %72 to i8;
    i32 %74 = sext i8 %73 to i32;
    i1 %75 = icmp sle i32 %50, i32 %74;
    i32 %76 = zext i1 %75 to i32;
    i32 %77 = xor i32 %71, i32 %76;
    i32 %78 = add i32 %0, i32 -4;
    i32 %79 = and i32 %78, i32 255;
    i1 %80 = icmp sle i32 %2, i32 %79;
    i32 %81 = zext i1 %80 to i32;
    i32 %82 = xor i32 %77, i32 %81;
    i8 %83 = ztrunc i32 %78 to i8;
    i8 %84 = strunc i8 %83 to i8;
    i32 %85 = sext i8 %84 to i32;
    i1 %86 = icmp sle i32 %50, i32 %85;
    i32 %87 = zext i1 %86 to i32;
    i32 %88 = xor i32 %82, i32 %87;
    i1 %89 = icmp sle i32 %44, i32 %85;
    i32 %90 = zext i1 %89 to i32;
    i32 %91 = xor i32 %88, i32 %90;
    i32 %92 = ztrunc i32 %91 to i32;
    ubr ^b;
  ^b:
    i32 %93 = phi [^if.then, i32 %33] [^if.else, i32 %92];
    ret i32 %93;
}
