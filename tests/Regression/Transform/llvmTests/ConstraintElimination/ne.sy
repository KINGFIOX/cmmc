// This file is automatically generated by llvm2c from llvm/test/Transforms/ConstraintElimination/ne

// function declarations
uint32_t test_eq_ne_0(uint8_t var0, uint8_t var1);
uint32_t test_eq_ne_1(uint8_t var0, uint8_t var1);
uint32_t test_ne_eq_0(uint8_t var0, uint8_t var1);
uint32_t test_ne_eq_1(uint8_t var0, uint8_t var1);

uint32_t test_eq_ne_0(uint8_t var0, uint8_t var1){
    block0:
    if (var0 == 0) {
        return ((var0 != 0) ^ (var0 != 1)) ^ (var0 != var1);
    } else {
        return ((var0 != 0) ^ (var0 != 1)) ^ (var0 != var1);
    }
}

uint32_t test_eq_ne_1(uint8_t var0, uint8_t var1){
    block0:
    if (var0 == 1) {
        return ((var0 != 0) ^ (var0 != 1)) ^ (var0 != var1);
    } else {
        return ((var0 != 0) ^ (var0 != 1)) ^ (var0 != var1);
    }
}

uint32_t test_ne_eq_0(uint8_t var0, uint8_t var1){
    block0:
    if (var0 != 0) {
        return ((((((((var0 != 0) ^ (var0 != 1)) ^ (var0 != var1)) ^ (var0 == var1)) ^ (var0 == 0)) ^ (var0 > 0)) ^ (var0 >= 1)) ^ (var0 > 1)) ^ (((char)var0) > ((char)0));
    } else {
        return ((((((((var0 != 0) ^ (var0 != 1)) ^ (var0 != var1)) ^ (var0 == var1)) ^ (var0 == 0)) ^ (var0 > 0)) ^ (var0 >= 1)) ^ (var0 > 1)) ^ (((char)var0) > ((char)0));
    }
}

uint32_t test_ne_eq_1(uint8_t var0, uint8_t var1){
    uint32_t var2;
    uint32_t var3;
    uint32_t var4;
    uint32_t var5;
    block0:
    if (var0 != 1) {
        var2 = (var0 > 0);
        var3 = (var0 >= 1);
        var4 = (var0 > 1);
        var5 = (((char)var0) > ((char)0));
        return ((((((((var0 != 1) ^ (var0 != 0)) ^ (var0 != var1)) ^ (var0 == var1)) ^ (var0 == 0)) ^ var2) ^ var3) ^ var2) ^ var3;
    } else {
        return ((((((((var0 != 0) ^ (var0 != 1)) ^ (var0 != var1)) ^ (var0 == var1)) ^ (var0 == 0)) ^ (var0 > 0)) ^ (var0 >= 1)) ^ (var0 > 1)) ^ (((char)var0) > ((char)0));
    }
}

