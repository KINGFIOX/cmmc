func @idx_known_positive_via_len_1(i8 %var0, i8 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i32 %1 = zext i8 %var1 to i32;
    i1 %2 = icmp sgt i32 %0, i32 %1;
    i8 %3 = strunc i8 %var0 to i8;
    i32 %4 = sext i8 %3 to i32;
    i1 %5 = icmp sgt i32 %4, i32 -1;
    i1 %6 = and i1 %2, i1 %5;
    i8 %7 = strunc i8 %var1 to i8;
    i32 %8 = sext i8 %7 to i32;
    i1 %9 = icmp sgt i32 %8, i32 -1;
    i32 %10 = zext i1 %9 to i32;
    cbr i1 %6(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i1 %11 = icmp sgt i32 %8, i32 0;
    i32 %12 = zext i1 %11 to i32;
    i32 %13 = xor i32 %10, i32 1;
    i32 %14 = xor i32 %12, i32 %13;
    i1 %15 = icmp sgt i32 %4, i32 0;
    i32 %16 = zext i1 %15 to i32;
    i32 %17 = xor i32 %14, i32 %16;
    i32 %18 = ztrunc i32 %17 to i32;
    ubr ^b;
  ^if.else:
    i32 %19 = ztrunc i32 %10 to i32;
    ubr ^b;
  ^b:
    i32 %20 = phi [^if.then, i32 %18] [^if.else, i32 %19];
    ret i32 %20;
}
func @idx_known_positive_via_len_2(i8 %var0, i8 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i32 %1 = zext i8 %var1 to i32;
    i1 %2 = icmp sgt i32 %0, i32 %1;
    i8 %3 = strunc i8 %var0 to i8;
    i32 %4 = sext i8 %3 to i32;
    i1 %5 = icmp sgt i32 %4, i32 -1;
    i1 %6 = and i1 %2, i1 %5;
    i8 %7 = strunc i8 %var1 to i8;
    i32 %8 = sext i8 %7 to i32;
    i1 %9 = icmp sgt i32 %8, i32 -1;
    i32 %10 = zext i1 %9 to i32;
    cbr i1 %6(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i1 %11 = icmp sgt i32 %8, i32 0;
    i32 %12 = zext i1 %11 to i32;
    i32 %13 = xor i32 %10, i32 1;
    i32 %14 = xor i32 %12, i32 %13;
    i1 %15 = icmp sgt i32 %4, i32 0;
    i32 %16 = zext i1 %15 to i32;
    i32 %17 = xor i32 %14, i32 %16;
    i32 %18 = ztrunc i32 %17 to i32;
    ubr ^b;
  ^if.else:
    i32 %19 = ztrunc i32 %10 to i32;
    ubr ^b;
  ^b:
    i32 %20 = phi [^if.then, i32 %18] [^if.else, i32 %19];
    ret i32 %20;
}
func @idx_not_known_positive_via_len(i8 %var0, i8 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var1 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = icmp sgt i32 %1, i32 -1;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i32 %5 = zext i8 %var1 to i32;
    i1 %6 = icmp sgt i32 %4, i32 %5;
    cbr i1 %6(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i1 %7 = icmp sgt i32 %1, i32 0;
    i32 %8 = zext i1 %7 to i32;
    i32 %9 = xor i32 %3, i32 1;
    i32 %10 = xor i32 %8, i32 %9;
    i8 %11 = strunc i8 %var0 to i8;
    i32 %12 = sext i8 %11 to i32;
    i1 %13 = icmp sgt i32 %12, i32 0;
    i32 %14 = zext i1 %13 to i32;
    i32 %15 = xor i32 %10, i32 %14;
    i32 %16 = ztrunc i32 %15 to i32;
    ubr ^b;
  ^if.else:
    i32 %17 = ztrunc i32 %3 to i32;
    ubr ^b;
  ^b:
    i32 %18 = phi [^if.then, i32 %16] [^if.else, i32 %17];
    ret i32 %18;
}
func @idx_not_known_positive_via_len_uge(i8 %var0, i8 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var1 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = icmp sgt i32 %1, i32 -1;
    i32 %3 = zext i1 %2 to i32;
    i32 %4 = zext i8 %var0 to i32;
    i32 %5 = zext i8 %var1 to i32;
    i1 %6 = icmp sgt i32 %4, i32 %5;
    cbr i1 %6(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i1 %7 = icmp sgt i32 %1, i32 0;
    i32 %8 = zext i1 %7 to i32;
    i32 %9 = xor i32 %3, i32 1;
    i32 %10 = xor i32 %8, i32 %9;
    i8 %11 = strunc i8 %var0 to i8;
    i32 %12 = sext i8 %11 to i32;
    i1 %13 = icmp sgt i32 %12, i32 0;
    i32 %14 = zext i1 %13 to i32;
    i32 %15 = xor i32 %10, i32 %14;
    i32 %16 = ztrunc i32 %15 to i32;
    ubr ^b;
  ^if.else:
    i32 %17 = ztrunc i32 %3 to i32;
    ubr ^b;
  ^b:
    i32 %18 = phi [^if.then, i32 %16] [^if.else, i32 %17];
    ret i32 %18;
}
func @ult_signed_neg_constant() -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ret i32 0;
}
func @ult_signed_pos_constant(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i1 %2 = icmp sgt i32 %1, i32 -1;
    i32 %3 = zext i1 %2 to i32;
    i1 %4 = icmp slt i32 %1, i32 4;
    i32 %5 = zext i1 %4 to i32;
    i32 %6 = xor i32 %3, i32 %5;
    i1 %7 = icmp slt i32 %1, i32 5;
    i32 %8 = zext i1 %7 to i32;
    i32 %9 = xor i32 %6, i32 %8;
    i32 %10 = ztrunc i32 %9 to i32;
    ret i32 %10;
}
