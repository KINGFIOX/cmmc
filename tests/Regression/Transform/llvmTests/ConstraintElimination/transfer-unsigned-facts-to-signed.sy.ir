func @idx_known_positive_via_len_1(i8 %var0, i8 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i32 %1 = zext i8 %var1 to i32;
    i1 %2 = scmp gt i32 %0, i32 %1;
    i8 %3 = strunc i8 %var0 to i8;
    i32 %4 = sext i8 %3 to i32;
    i1 %5 = scmp gt i32 %4, i32 -1;
    i1 %6 = and i1 %2, i1 %5;
    cbr i1 %6(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i8 %7 = strunc i8 %var1 to i8;
    i32 %8 = sext i8 %7 to i32;
    i1 %9 = scmp ge i32 %8, i32 0;
    i32 %10 = zext i1 %9 to i32;
    i32 %11 = zext i1 %2 to i32;
    i32 %12 = xor i32 %10, i32 %11;
    i1 %13 = scmp ge i32 %8, i32 1;
    i32 %14 = zext i1 %13 to i32;
    i32 %15 = xor i32 %12, i32 %14;
    i1 %16 = scmp ge i32 %4, i32 1;
    i32 %17 = zext i1 %16 to i32;
    i32 %18 = xor i32 %15, i32 %17;
    i32 %19 = ztrunc i32 %18 to i32;
    ubr ^b;
  ^if.else:
    i8 %20 = strunc i8 %var1 to i8;
    i32 %21 = sext i8 %20 to i32;
    i1 %22 = scmp ge i32 %21, i32 0;
    i32 %23 = zext i1 %22 to i32;
    i32 %24 = ztrunc i32 %23 to i32;
    ubr ^b;
  ^b:
    i32 %25 = phi [^if.then, i32 %19] [^if.else, i32 %24];
    ret i32 %25;
}
func @idx_known_positive_via_len_2(i8 %var0, i8 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i32 %1 = zext i8 %var1 to i32;
    i1 %2 = scmp gt i32 %0, i32 %1;
    i8 %3 = strunc i8 %var0 to i8;
    i32 %4 = sext i8 %3 to i32;
    i1 %5 = scmp ge i32 %4, i32 0;
    i1 %6 = and i1 %2, i1 %5;
    cbr i1 %6(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i8 %7 = strunc i8 %var1 to i8;
    i32 %8 = sext i8 %7 to i32;
    i1 %9 = scmp ge i32 %8, i32 0;
    i32 %10 = zext i1 %9 to i32;
    i32 %11 = zext i1 %2 to i32;
    i32 %12 = xor i32 %10, i32 %11;
    i1 %13 = scmp ge i32 %8, i32 1;
    i32 %14 = zext i1 %13 to i32;
    i32 %15 = xor i32 %12, i32 %14;
    i1 %16 = scmp ge i32 %4, i32 1;
    i32 %17 = zext i1 %16 to i32;
    i32 %18 = xor i32 %15, i32 %17;
    i32 %19 = ztrunc i32 %18 to i32;
    ubr ^b;
  ^if.else:
    i8 %20 = strunc i8 %var1 to i8;
    i32 %21 = sext i8 %20 to i32;
    i1 %22 = scmp ge i32 %21, i32 0;
    i32 %23 = zext i1 %22 to i32;
    i32 %24 = ztrunc i32 %23 to i32;
    ubr ^b;
  ^b:
    i32 %25 = phi [^if.then, i32 %19] [^if.else, i32 %24];
    ret i32 %25;
}
func @idx_not_known_positive_via_len(i8 %var0, i8 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i32 %1 = zext i8 %var1 to i32;
    i1 %2 = scmp gt i32 %0, i32 %1;
    cbr i1 %2(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i8 %3 = strunc i8 %var1 to i8;
    i32 %4 = sext i8 %3 to i32;
    i1 %5 = scmp ge i32 %4, i32 0;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = xor i32 %6, i32 1;
    i1 %8 = scmp ge i32 %4, i32 1;
    i32 %9 = zext i1 %8 to i32;
    i32 %10 = xor i32 %7, i32 %9;
    i8 %11 = strunc i8 %var0 to i8;
    i32 %12 = sext i8 %11 to i32;
    i1 %13 = scmp ge i32 %12, i32 1;
    i32 %14 = zext i1 %13 to i32;
    i32 %15 = xor i32 %10, i32 %14;
    i32 %16 = ztrunc i32 %15 to i32;
    ubr ^b;
  ^if.else:
    i8 %17 = strunc i8 %var1 to i8;
    i32 %18 = sext i8 %17 to i32;
    i1 %19 = scmp ge i32 %18, i32 0;
    i32 %20 = zext i1 %19 to i32;
    i32 %21 = ztrunc i32 %20 to i32;
    ubr ^b;
  ^b:
    i32 %22 = phi [^if.then, i32 %16] [^if.else, i32 %21];
    ret i32 %22;
}
func @idx_not_known_positive_via_len_uge(i8 %var0, i8 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i32 %1 = zext i8 %var1 to i32;
    i1 %2 = scmp gt i32 %0, i32 %1;
    i1 %3 = scmp gt i32 %0, i32 -1;
    i1 %4 = and i1 %2, i1 %3;
    cbr i1 %4(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i8 %5 = strunc i8 %var1 to i8;
    i32 %6 = sext i8 %5 to i32;
    i1 %7 = scmp ge i32 %6, i32 0;
    i32 %8 = zext i1 %7 to i32;
    i32 %9 = zext i1 %2 to i32;
    i32 %10 = xor i32 %8, i32 %9;
    i1 %11 = scmp ge i32 %6, i32 1;
    i32 %12 = zext i1 %11 to i32;
    i32 %13 = xor i32 %10, i32 %12;
    i8 %14 = strunc i8 %var0 to i8;
    i32 %15 = sext i8 %14 to i32;
    i1 %16 = scmp ge i32 %15, i32 1;
    i32 %17 = zext i1 %16 to i32;
    i32 %18 = xor i32 %13, i32 %17;
    i32 %19 = ztrunc i32 %18 to i32;
    ubr ^b;
  ^if.else:
    i8 %20 = strunc i8 %var1 to i8;
    i32 %21 = sext i8 %20 to i32;
    i1 %22 = scmp ge i32 %21, i32 0;
    i32 %23 = zext i1 %22 to i32;
    i32 %24 = ztrunc i32 %23 to i32;
    ubr ^b;
  ^b:
    i32 %25 = phi [^if.then, i32 %19] [^if.else, i32 %24];
    ret i32 %25;
}
func @ult_signed_neg_constant(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp lt i32 %0, i32 -2;
    cbr i1 %1(prob = 0.5), ^if.then, ^b;
  ^if.then:
    i8 %2 = strunc i8 %var0 to i8;
    i32 %3 = sext i8 %2 to i32;
    i1 %4 = scmp ge i32 %3, i32 0;
    i32 %5 = zext i1 %4 to i32;
    i1 %6 = scmp lt i32 %3, i32 -2;
    i32 %7 = zext i1 %6 to i32;
    i32 %8 = xor i32 %5, i32 %7;
    i32 %9 = ztrunc i32 %8 to i32;
    ubr ^b;
  ^b:
    i32 %10 = phi [^entry, i32 0] [^if.then, i32 %9];
    ret i32 %10;
}
func @ult_signed_pos_constant(i8 %var0) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i1 %1 = scmp lt i32 %0, i32 4;
    cbr i1 %1(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i8 %2 = strunc i8 %var0 to i8;
    i32 %3 = sext i8 %2 to i32;
    i1 %4 = scmp ge i32 %3, i32 0;
    i32 %5 = zext i1 %4 to i32;
    i1 %6 = scmp lt i32 %3, i32 4;
    i32 %7 = zext i1 %6 to i32;
    i32 %8 = xor i32 %5, i32 %7;
    i1 %9 = scmp lt i32 %3, i32 5;
    i32 %10 = zext i1 %9 to i32;
    i32 %11 = xor i32 %8, i32 %10;
    i32 %12 = ztrunc i32 %11 to i32;
    ubr ^b;
  ^if.else:
    i8 %13 = strunc i8 %var0 to i8;
    i32 %14 = sext i8 %13 to i32;
    i1 %15 = scmp ge i32 %14, i32 0;
    i32 %16 = zext i1 %15 to i32;
    i1 %17 = scmp lt i32 %14, i32 4;
    i32 %18 = zext i1 %17 to i32;
    i32 %19 = xor i32 %16, i32 %18;
    i1 %20 = scmp lt i32 %14, i32 5;
    i32 %21 = zext i1 %20 to i32;
    i32 %22 = xor i32 %19, i32 %21;
    i32 %23 = ztrunc i32 %22 to i32;
    ubr ^b;
  ^b:
    i32 %24 = phi [^if.then, i32 %12] [^if.else, i32 %23];
    ret i32 %24;
}
