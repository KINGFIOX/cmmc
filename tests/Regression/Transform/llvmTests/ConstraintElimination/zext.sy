// This file is automatically generated by llvm2c from llvm/test/Transforms/ConstraintElimination/zext

// function declarations
uint32_t sge_compare_int16_t_and_extended(uint8_t var0, uint8_t var1);
uint32_t sge_zext(uint8_t var0, uint16_t var1);
uint32_t test_pr58009_const_zext(void);
uint32_t uge_compare_int16_t_and_extended(uint8_t var0, uint8_t var1);
uint32_t uge_zext(uint8_t var0, uint16_t var1);
uint32_t uge_zext_add(uint8_t var0, uint16_t var1);

uint32_t sge_compare_int16_t_and_extended(uint8_t var0, uint8_t var1){
    uint16_t var2;
    uint16_t var3;
    block0:
    var2 = ((uint16_t)var0);
    var3 = ((uint16_t)var1);
    if (((char)var0) >= ((char)var1)) {
        return (((((int16_t)var2) >= ((int16_t)var3)) ^ (((int16_t)var2) >= ((int16_t)10))) ^ (((int16_t)var3) >= ((int16_t)var2))) ^ (((int16_t)10) >= ((int16_t)var2));
    } else {
        return (((((int16_t)var3) >= ((int16_t)var2)) ^ (((int16_t)var2) >= ((int16_t)var3))) ^ (((int16_t)var2) >= ((int16_t)10))) ^ (((int16_t)10) >= ((int16_t)var2));
    }
}

uint32_t sge_zext(uint8_t var0, uint16_t var1){
    uint16_t var2;
    block0:
    var2 = ((uint16_t)var0);
    if (((int16_t)var2) >= ((int16_t)var1)) {
        return (((((int16_t)var2) >= ((int16_t)var1)) ^ (((int16_t)var2) >= ((int16_t)10))) ^ (((int16_t)var1) >= ((int16_t)var2))) ^ (((int16_t)10) >= ((int16_t)var2));
    } else {
        return (((((int16_t)var1) >= ((int16_t)var2)) ^ (((int16_t)var2) >= ((int16_t)var1))) ^ (((int16_t)var2) >= ((int16_t)10))) ^ (((int16_t)10) >= ((int16_t)var2));
    }
}

uint32_t test_pr58009_const_zext(void){
    uint16_t var0;
    uint16_t var1;
    uint16_t var2;
    uint16_t var3;
    block0:
    var0 = ((uint16_t)1);
    var1 = ((uint16_t)1);
    var2 = ((uint16_t)0);
    var3 = ((uint16_t)0);
    return (((((var0 >= var1) ^ (var0 > var1)) ^ (var2 >= var3)) ^ (var2 > var3)) ^ (var2 < var1)) ^ (var2 > var1);
}

uint32_t uge_compare_int16_t_and_extended(uint8_t var0, uint8_t var1){
    uint16_t var2;
    uint16_t var3;
    block0:
    var2 = ((uint16_t)var0);
    var3 = ((uint16_t)var1);
    if (var0 >= var1) {
        return (((var2 >= var3) ^ (var2 >= 10)) ^ (((int16_t)var3) >= ((int16_t)var2))) ^ (10 >= var2);
    } else {
        return (((var3 >= var2) ^ (var2 >= var3)) ^ (var2 >= 10)) ^ (10 >= var2);
    }
}

uint32_t uge_zext(uint8_t var0, uint16_t var1){
    uint16_t var2;
    block0:
    var2 = ((uint16_t)var0);
    if (var2 >= var1) {
        return (((var2 >= var1) ^ (var2 >= 10)) ^ (var1 >= var2)) ^ (10 >= var2);
    } else {
        return (((var1 >= var2) ^ (var2 >= var1)) ^ (var2 >= 10)) ^ (10 >= var2);
    }
}

uint32_t uge_zext_add(uint8_t var0, uint16_t var1){
    uint16_t var2;
    block0:
    var2 = ((uint16_t)var0);
    if (((uint16_t)(((char)var0) + ((char)1))) >= var1) {
        return (((var2 >= var1) ^ (var2 >= 10)) ^ (var1 >= var2)) ^ (10 >= var2);
    } else {
        return (((var1 >= var2) ^ (var2 >= var1)) ^ (var2 >= 10)) ^ (10 >= var2);
    }
}

