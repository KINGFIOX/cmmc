// This file is automatically generated by llvm2c from llvm/test/Transforms/ConstraintElimination/transfer-unsigned-facts-to-signed

// function declarations
uint32_t idx_known_positive_via_len_1(uint8_t var0, uint8_t var1);
uint32_t idx_known_positive_via_len_2(uint8_t var0, uint8_t var1);
uint32_t idx_not_known_positive_via_len(uint8_t var0, uint8_t var1);
uint32_t idx_not_known_positive_via_len_uge(uint8_t var0, uint8_t var1);
uint32_t ult_signed_neg_constant(uint8_t var0);
uint32_t ult_signed_pos_constant(uint8_t var0);

uint32_t idx_known_positive_via_len_1(uint8_t var0, uint8_t var1){
    block0:
    if ((((char)var0) >= ((char)0)) && (var1 < var0)) {
        return (((var1 < var0) ^ (((char)var1) >= ((char)0))) ^ (((char)var1) >= ((char)1))) ^ (((char)var0) >= ((char)1));
    } else {
        return ((char)var1) >= ((char)0);
    }
}

uint32_t idx_known_positive_via_len_2(uint8_t var0, uint8_t var1){
    block0:
    if ((var1 < var0) && (((char)var0) >= ((char)0))) {
        return (((var1 < var0) ^ (((char)var1) >= ((char)0))) ^ (((char)var1) >= ((char)1))) ^ (((char)var0) >= ((char)1));
    } else {
        return ((char)var1) >= ((char)0);
    }
}

uint32_t idx_not_known_positive_via_len(uint8_t var0, uint8_t var1){
    block0:
    if (var1 < var0) {
        return (((var1 < var0) ^ (((char)var1) >= ((char)0))) ^ (((char)var1) >= ((char)1))) ^ (((char)var0) >= ((char)1));
    } else {
        return ((char)var1) >= ((char)0);
    }
}

uint32_t idx_not_known_positive_via_len_uge(uint8_t var0, uint8_t var1){
    block0:
    if ((var0 >= 0) && (var1 < var0)) {
        return (((var1 < var0) ^ (((char)var1) >= ((char)0))) ^ (((char)var1) >= ((char)1))) ^ (((char)var0) >= ((char)1));
    } else {
        return ((char)var1) >= ((char)0);
    }
}

uint32_t ult_signed_neg_constant(uint8_t var0){
    block0:
    if (var0 < -2) {
        return (((char)var0) >= ((char)0)) ^ (((char)var0) < ((char)-2));
    } else {
        return 0;
    }
}

uint32_t ult_signed_pos_constant(uint8_t var0){
    block0:
    if (var0 < 4) {
        return ((((char)var0) >= ((char)0)) ^ (((char)var0) < ((char)4))) ^ (((char)var0) < ((char)5));
    } else {
        return ((((char)var0) >= ((char)0)) ^ (((char)var0) < ((char)4))) ^ (((char)var0) < ((char)5));
    }
}

