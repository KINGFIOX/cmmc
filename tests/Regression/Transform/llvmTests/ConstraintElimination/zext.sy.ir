func @sge_compare_int16_t_and_extended(i8 %var0, i8 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i16 %0 = zext i8 %var0 to i16;
    i16 %1 = strunc i16 %0 to i16;
    i32 %2 = sext i16 %1 to i32;
    i16 %3 = zext i8 %var1 to i16;
    i16 %4 = strunc i16 %3 to i16;
    i32 %5 = sext i16 %4 to i32;
    i1 %6 = icmp sge i32 %2, i32 %5;
    i32 %7 = zext i1 %6 to i32;
    i1 %8 = icmp sgt i32 %2, i32 9;
    i32 %9 = zext i1 %8 to i32;
    i32 %10 = xor i32 %7, i32 %9;
    i1 %11 = icmp sle i32 %2, i32 %5;
    i32 %12 = zext i1 %11 to i32;
    i32 %13 = xor i32 %10, i32 %12;
    i1 %14 = icmp slt i32 %2, i32 11;
    i32 %15 = zext i1 %14 to i32;
    i32 %16 = xor i32 %13, i32 %15;
    i32 %17 = ztrunc i32 %16 to i32;
    ret i32 %17;
}
func @sge_zext(i8 %var0, i16 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i16 %0 = zext i8 %var0 to i16;
    i16 %1 = strunc i16 %0 to i16;
    i32 %2 = sext i16 %1 to i32;
    i16 %3 = strunc i16 %var1 to i16;
    i32 %4 = sext i16 %3 to i32;
    i1 %5 = icmp sge i32 %2, i32 %4;
    i32 %6 = zext i1 %5 to i32;
    i1 %7 = icmp sgt i32 %2, i32 9;
    i32 %8 = zext i1 %7 to i32;
    i32 %9 = xor i32 %6, i32 %8;
    i1 %10 = icmp sle i32 %2, i32 %4;
    i32 %11 = zext i1 %10 to i32;
    i32 %12 = xor i32 %9, i32 %11;
    i1 %13 = icmp slt i32 %2, i32 11;
    i32 %14 = zext i1 %13 to i32;
    i32 %15 = xor i32 %12, i32 %14;
    i32 %16 = ztrunc i32 %15 to i32;
    ret i32 %16;
}
func @test_pr58009_const_zext() -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^b:
    ret i32 1;
}
func @uge_compare_int16_t_and_extended(i8 %var0, i8 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i16 %0 = zext i8 %var0 to i16;
    i32 %1 = zext i16 %0 to i32;
    i16 %2 = zext i8 %var1 to i16;
    i32 %3 = zext i16 %2 to i32;
    i1 %4 = icmp sge i32 %1, i32 %3;
    i32 %5 = zext i1 %4 to i32;
    i1 %6 = icmp sgt i32 %1, i32 9;
    i32 %7 = zext i1 %6 to i32;
    i32 %8 = xor i32 %5, i32 %7;
    i1 %9 = icmp slt i32 %1, i32 11;
    i32 %10 = zext i1 %9 to i32;
    i32 %11 = xor i32 %8, i32 %10;
    i32 %12 = zext i8 %var0 to i32;
    i32 %13 = zext i8 %var1 to i32;
    i1 %14 = icmp sge i32 %12, i32 %13;
    cbr i1 %14(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i16 %15 = strunc i16 %2 to i16;
    i32 %16 = sext i16 %15 to i32;
    i16 %17 = strunc i16 %0 to i16;
    i32 %18 = sext i16 %17 to i32;
    i1 %19 = icmp sge i32 %16, i32 %18;
    i32 %20 = zext i1 %19 to i32;
    i32 %21 = xor i32 %11, i32 %20;
    i32 %22 = ztrunc i32 %21 to i32;
    ubr ^b;
  ^if.else:
    i1 %23 = icmp sle i32 %1, i32 %3;
    i32 %24 = zext i1 %23 to i32;
    i32 %25 = xor i32 %11, i32 %24;
    i32 %26 = ztrunc i32 %25 to i32;
    ubr ^b;
  ^b:
    i32 %27 = phi [^if.then, i32 %22] [^if.else, i32 %26];
    ret i32 %27;
}
func @uge_zext(i8 %var0, i16 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i16 %0 = zext i8 %var0 to i16;
    i32 %1 = zext i16 %0 to i32;
    i32 %2 = zext i16 %var1 to i32;
    i1 %3 = icmp sge i32 %1, i32 %2;
    i32 %4 = zext i1 %3 to i32;
    i1 %5 = icmp sgt i32 %1, i32 9;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = xor i32 %4, i32 %6;
    i1 %8 = icmp sle i32 %1, i32 %2;
    i32 %9 = zext i1 %8 to i32;
    i32 %10 = xor i32 %7, i32 %9;
    i1 %11 = icmp slt i32 %1, i32 11;
    i32 %12 = zext i1 %11 to i32;
    i32 %13 = xor i32 %10, i32 %12;
    i32 %14 = ztrunc i32 %13 to i32;
    ret i32 %14;
}
func @uge_zext_add(i8 %var0, i16 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i16 %0 = zext i8 %var0 to i16;
    i32 %1 = zext i16 %0 to i32;
    i32 %2 = zext i16 %var1 to i32;
    i1 %3 = icmp sge i32 %1, i32 %2;
    i32 %4 = zext i1 %3 to i32;
    i1 %5 = icmp sgt i32 %1, i32 9;
    i32 %6 = zext i1 %5 to i32;
    i32 %7 = xor i32 %4, i32 %6;
    i1 %8 = icmp sle i32 %1, i32 %2;
    i32 %9 = zext i1 %8 to i32;
    i32 %10 = xor i32 %7, i32 %9;
    i1 %11 = icmp slt i32 %1, i32 11;
    i32 %12 = zext i1 %11 to i32;
    i32 %13 = xor i32 %10, i32 %12;
    i32 %14 = ztrunc i32 %13 to i32;
    ret i32 %14;
}
