func @sge_compare_int16_t_and_extended(i8 %var0, i8 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i8 %2 = strunc i8 %var1 to i8;
    i32 %3 = sext i8 %2 to i32;
    i1 %4 = icmp sge i32 %1, i32 %3;
    i16 %5 = zext i8 %var0 to i16;
    i16 %6 = zext i8 %var1 to i16;
    cbr i1 %4(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i16 %7 = strunc i16 %5 to i16;
    i32 %8 = sext i16 %7 to i32;
    i16 %9 = strunc i16 %6 to i16;
    i32 %10 = sext i16 %9 to i32;
    i1 %11 = icmp sge i32 %8, i32 %10;
    i32 %12 = zext i1 %11 to i32;
    i1 %13 = icmp sle i32 %8, i32 %10;
    i32 %14 = zext i1 %13 to i32;
    i32 %15 = xor i32 %12, i32 %14;
    i1 %16 = icmp sge i32 %8, i32 10;
    i32 %17 = zext i1 %16 to i32;
    i1 %18 = icmp sle i32 %8, i32 10;
    i32 %19 = zext i1 %18 to i32;
    i32 %20 = xor i32 %17, i32 %19;
    i32 %21 = xor i32 %15, i32 %20;
    i32 %22 = ztrunc i32 %21 to i32;
    ubr ^b;
  ^if.else:
    i16 %23 = strunc i16 %6 to i16;
    i32 %24 = sext i16 %23 to i32;
    i16 %25 = strunc i16 %5 to i16;
    i32 %26 = sext i16 %25 to i32;
    i1 %27 = icmp sge i32 %24, i32 %26;
    i32 %28 = zext i1 %27 to i32;
    i1 %29 = icmp sge i32 %26, i32 10;
    i32 %30 = zext i1 %29 to i32;
    i32 %31 = xor i32 %28, i32 %30;
    i1 %32 = icmp sle i32 %24, i32 %26;
    i32 %33 = zext i1 %32 to i32;
    i1 %34 = icmp sle i32 %26, i32 10;
    i32 %35 = zext i1 %34 to i32;
    i32 %36 = xor i32 %33, i32 %35;
    i32 %37 = xor i32 %31, i32 %36;
    i32 %38 = ztrunc i32 %37 to i32;
    ubr ^b;
  ^b:
    i32 %39 = phi [^if.then, i32 %22] [^if.else, i32 %38];
    ret i32 %39;
}
func @sge_zext(i8 %var0, i16 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i16 %0 = zext i8 %var0 to i16;
    i16 %1 = strunc i16 %0 to i16;
    i32 %2 = sext i16 %1 to i32;
    i16 %3 = strunc i16 %var1 to i16;
    i32 %4 = sext i16 %3 to i32;
    i1 %5 = icmp sge i32 %2, i32 %4;
    cbr i1 %5(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i1 %6 = icmp sge i32 %2, i32 10;
    i32 %7 = zext i1 %6 to i32;
    i1 %8 = icmp sle i32 %2, i32 10;
    i32 %9 = zext i1 %8 to i32;
    i32 %10 = xor i32 %7, i32 %9;
    i1 %11 = icmp sle i32 %2, i32 %4;
    i32 %12 = zext i1 %11 to i32;
    i32 %13 = xor i32 %12, i32 1;
    i32 %14 = xor i32 %10, i32 %13;
    i32 %15 = ztrunc i32 %14 to i32;
    ubr ^b;
  ^if.else:
    i1 %16 = icmp sle i32 %2, i32 %4;
    i32 %17 = zext i1 %16 to i32;
    i1 %18 = icmp sle i32 %2, i32 10;
    i32 %19 = zext i1 %18 to i32;
    i32 %20 = xor i32 %17, i32 %19;
    i1 %21 = icmp sge i32 %2, i32 10;
    i32 %22 = zext i1 %21 to i32;
    i32 %23 = xor i32 %20, i32 %22;
    i32 %24 = ztrunc i32 %23 to i32;
    ubr ^b;
  ^b:
    i32 %25 = phi [^if.then, i32 %15] [^if.else, i32 %24];
    ret i32 %25;
}
func @test_pr58009_const_zext() -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^b:
    ret i32 1;
}
func @uge_compare_int16_t_and_extended(i8 %var0, i8 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = zext i8 %var0 to i32;
    i32 %1 = zext i8 %var1 to i32;
    i1 %2 = icmp sge i32 %0, i32 %1;
    i16 %3 = zext i8 %var0 to i16;
    i16 %4 = zext i8 %var1 to i16;
    cbr i1 %2(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i16 %5 = strunc i16 %4 to i16;
    i32 %6 = sext i16 %5 to i32;
    i16 %7 = strunc i16 %3 to i16;
    i32 %8 = sext i16 %7 to i32;
    i1 %9 = icmp sge i32 %6, i32 %8;
    i32 %10 = zext i1 %9 to i32;
    i32 %11 = zext i16 %3 to i32;
    i32 %12 = zext i16 %4 to i32;
    i1 %13 = icmp sge i32 %11, i32 %12;
    i32 %14 = zext i1 %13 to i32;
    i32 %15 = xor i32 %10, i32 %14;
    i1 %16 = icmp sge i32 %11, i32 10;
    i32 %17 = zext i1 %16 to i32;
    i1 %18 = icmp sle i32 %11, i32 10;
    i32 %19 = zext i1 %18 to i32;
    i32 %20 = xor i32 %17, i32 %19;
    i32 %21 = xor i32 %15, i32 %20;
    i32 %22 = ztrunc i32 %21 to i32;
    ubr ^b;
  ^if.else:
    i32 %23 = zext i16 %4 to i32;
    i32 %24 = zext i16 %3 to i32;
    i1 %25 = icmp sge i32 %23, i32 %24;
    i32 %26 = zext i1 %25 to i32;
    i1 %27 = icmp sge i32 %24, i32 10;
    i32 %28 = zext i1 %27 to i32;
    i32 %29 = xor i32 %26, i32 %28;
    i1 %30 = icmp sle i32 %23, i32 %24;
    i32 %31 = zext i1 %30 to i32;
    i1 %32 = icmp sle i32 %24, i32 10;
    i32 %33 = zext i1 %32 to i32;
    i32 %34 = xor i32 %31, i32 %33;
    i32 %35 = xor i32 %29, i32 %34;
    i32 %36 = ztrunc i32 %35 to i32;
    ubr ^b;
  ^b:
    i32 %37 = phi [^if.then, i32 %22] [^if.else, i32 %36];
    ret i32 %37;
}
func @uge_zext(i8 %var0, i16 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i16 %0 = zext i8 %var0 to i16;
    i32 %1 = zext i16 %0 to i32;
    i32 %2 = zext i16 %var1 to i32;
    i1 %3 = icmp sge i32 %1, i32 %2;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i1 %4 = icmp sge i32 %1, i32 10;
    i32 %5 = zext i1 %4 to i32;
    i1 %6 = icmp sle i32 %1, i32 10;
    i32 %7 = zext i1 %6 to i32;
    i32 %8 = xor i32 %5, i32 %7;
    i1 %9 = icmp sle i32 %1, i32 %2;
    i32 %10 = zext i1 %9 to i32;
    i32 %11 = xor i32 %10, i32 1;
    i32 %12 = xor i32 %8, i32 %11;
    i32 %13 = ztrunc i32 %12 to i32;
    ubr ^b;
  ^if.else:
    i1 %14 = icmp sle i32 %1, i32 %2;
    i32 %15 = zext i1 %14 to i32;
    i1 %16 = icmp sle i32 %1, i32 10;
    i32 %17 = zext i1 %16 to i32;
    i32 %18 = xor i32 %15, i32 %17;
    i1 %19 = icmp sge i32 %1, i32 10;
    i32 %20 = zext i1 %19 to i32;
    i32 %21 = xor i32 %18, i32 %20;
    i32 %22 = ztrunc i32 %21 to i32;
    ubr ^b;
  ^b:
    i32 %23 = phi [^if.then, i32 %13] [^if.else, i32 %22];
    ret i32 %23;
}
func @uge_zext_add(i8 %var0, i16 %var1) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i8 %0 = strunc i8 %var0 to i8;
    i32 %1 = sext i8 %0 to i32;
    i32 %2 = add i32 %1, i32 1;
    i32 %3 = and i32 %2, i32 65535;
    i32 %4 = zext i16 %var1 to i32;
    i1 %5 = icmp sge i32 %3, i32 %4;
    i16 %6 = zext i8 %var0 to i16;
    cbr i1 %5(prob = 0.5), ^if.then, ^if.else;
  ^if.then:
    i32 %7 = zext i16 %6 to i32;
    i1 %8 = icmp sle i32 %4, i32 %7;
    i32 %9 = zext i1 %8 to i32;
    i1 %10 = icmp sge i32 %4, i32 %7;
    i32 %11 = zext i1 %10 to i32;
    i32 %12 = xor i32 %9, i32 %11;
    i1 %13 = icmp sge i32 %7, i32 10;
    i32 %14 = zext i1 %13 to i32;
    i1 %15 = icmp sle i32 %7, i32 10;
    i32 %16 = zext i1 %15 to i32;
    i32 %17 = xor i32 %14, i32 %16;
    i32 %18 = xor i32 %12, i32 %17;
    i32 %19 = ztrunc i32 %18 to i32;
    ubr ^b;
  ^if.else:
    i32 %20 = zext i16 %6 to i32;
    i1 %21 = icmp sge i32 %4, i32 %20;
    i32 %22 = zext i1 %21 to i32;
    i1 %23 = icmp sge i32 %20, i32 10;
    i32 %24 = zext i1 %23 to i32;
    i32 %25 = xor i32 %22, i32 %24;
    i1 %26 = icmp sle i32 %4, i32 %20;
    i32 %27 = zext i1 %26 to i32;
    i1 %28 = icmp sle i32 %20, i32 10;
    i32 %29 = zext i1 %28 to i32;
    i32 %30 = xor i32 %27, i32 %29;
    i32 %31 = xor i32 %25, i32 %30;
    i32 %32 = ztrunc i32 %31 to i32;
    ubr ^b;
  ^b:
    i32 %33 = phi [^if.then, i32 %19] [^if.else, i32 %32];
    ret i32 %33;
}
