internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
internal func @putfloat() -> void { NoMemoryRead NoMemoryWrite };
func @fac(i32 %a) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^0:
    i1 %1 = scmp eq i32 %a, i32 1;
    cbr i1 %1(prob = 0.5), ^b, ^if.else;
  ^if.else:
    i32 %2 = phi [^0, i32 %a] [^if.else, i32 %4];
    i32 %3 = phi [^0, i32 1] [^if.else, i32 %5];
    i32 %4 = add i32 %2, i32 -1;
    i32 %5 = mul i32 %3, i32 %2;
    i1 %6 = scmp eq i32 %4, i32 1;
    cbr i1 %6(prob = 0.5), ^b, ^if.else;
  ^b:
    i32 %7 = phi [^0, i32 1] [^if.else, i32 %5];
    ret i32 %7;
}
func @fib(i32 %a) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^0:
    i1 %1 = scmp lt i32 %a, i32 3;
    cbr i1 %1(prob = 0.5), ^b1, ^b;
  ^b:
    i32 %2 = phi [^0, i32 %a] [^b, i32 %6];
    i32 %3 = phi [^0, i32 0] [^b, i32 %7];
    i32 %4 = add i32 %2, i32 -1;
    i32 %5 = call (i32) -> i32 @fib(i32 %4);
    i32 %6 = add i32 %2, i32 -2;
    i32 %7 = add i32 %3, i32 %5;
    i1 %8 = scmp lt i32 %6, i32 3;
    cbr i1 %8(prob = 0.5), ^b1, ^b;
  ^b1:
    i32 %9 = phi [^0, i32 0] [^b, i32 %7];
    i32 %10 = add i32 %9, i32 1;
    ret i32 %10;
}
func @gcd(i32 %a, i32 %b) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^0:
    i1 %1 = scmp neq i32 %b, i32 0;
    cbr i1 %1(prob = 0.5), ^lhsBlock, ^b1;
  ^lhsBlock:
    i32 %2 = phi [^0, i32 %a] [^lhsBlock, i32 %3];
    i32 %3 = phi [^0, i32 %b] [^lhsBlock, i32 %4];
    i32 %4 = srem i32 %2, i32 %3;
    i1 %5 = scmp neq i32 %4, i32 0;
    cbr i1 %5(prob = 0.5), ^lhsBlock, ^b1;
  ^b1:
    i32 %6 = phi [^0, i32 %a] [^lhsBlock, i32 %3];
    ret i32 %6;
}
i32* @g = 0;
func @test(i32 %n) -> void { NoRecurse } {
  ^0:
    i1 %1 = scmp eq i32 %n, i32 0;
    cbr i1 %1(prob = 0.5), ^b1, ^b;
  ^b:
    i32 %2 = phi [^0, i32 %n] [^b, i32 %6];
    i32* %3 = ptrcast i32* @g to i32*;
    i32 %4 = load i32* %3;
    i32 %5 = add i32 %4, i32 1;
    store i32* %3 with i32 %5;
    i32 %6 = add i32 %2, i32 -1;
    i1 %7 = scmp eq i32 %6, i32 0;
    cbr i1 %7(prob = 0.5), ^b1, ^b;
  ^b1:
    ret;
}
f32* @eps { ReadOnly } = 1e-08;
func @f(f32 %x) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    f32 %0 = fmul f32 %x, f32 %x;
    ret f32 %0;
}
func @my_fabs(f32 %x) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i1 %0 = fcmp ge f32 %x, f32 0;
    cbr i1 %0(prob = 0.5), ^b, ^rhsBlock;
  ^rhsBlock:
    f32 %1 = fneg f32 %x;
    ubr ^b;
  ^b:
    f32 %2 = phi [^entry, f32 %x] [^rhsBlock, f32 %1];
    ret f32 %2;
}
func @simpson(f32 %l, f32 %r, f32 %fl, f32 %fm, f32 %fr) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    f32 %0 = fsub f32 %r, f32 %l;
    f32 %1 = fmul f32 4, f32 %fm;
    f32 %2 = fadd f32 %fl, f32 %1;
    f32 %3 = fadd f32 %2, f32 %fr;
    f32 %4 = fmul f32 %0, f32 %3;
    f32 %5 = fdiv f32 %4, f32 6;
    ret f32 %5;
}
func @SAAImpl(f32 %l, f32 %m, f32 %r, f32 %fl, f32 %fm, f32 %fr, f32 %sm) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    f32 %0 = fadd f32 %l, f32 %m;
    f32 %1 = fmul f32 %0, f32 0.5;
    f32 %2 = fmul f32 %1, f32 %1;
    f32 %3 = fsub f32 %m, f32 %l;
    f32 %4 = fmul f32 4, f32 %2;
    f32 %5 = fadd f32 %fl, f32 %4;
    f32 %6 = fadd f32 %5, f32 %fm;
    f32 %7 = fmul f32 %3, f32 %6;
    f32 %8 = fdiv f32 %7, f32 6;
    f32 %9 = fadd f32 %m, f32 %r;
    f32 %10 = fmul f32 %9, f32 0.5;
    f32 %11 = fmul f32 %10, f32 %10;
    f32 %12 = fsub f32 %r, f32 %m;
    f32 %13 = fmul f32 4, f32 %11;
    f32 %14 = fadd f32 %fm, f32 %13;
    f32 %15 = fadd f32 %14, f32 %fr;
    f32 %16 = fmul f32 %12, f32 %15;
    f32 %17 = fdiv f32 %16, f32 6;
    f32 %18 = fadd f32 %8, f32 %17;
    f32 %19 = fsub f32 %sm, f32 %18;
    i1 %20 = fcmp ge f32 %19, f32 0;
    cbr i1 %20(prob = 0.5), ^b, ^rhsBlock;
  ^rhsBlock:
    f32 %21 = fneg f32 %19;
    ubr ^b;
  ^b:
    f32 %22 = phi [^entry, f32 %19] [^rhsBlock, f32 %21];
    i1 %23 = fcmp lt f32 %22, f32 1e-08;
    cbr i1 %23(prob = 0.5), ^b2, ^b1;
  ^b1:
    f32 %24 = call (f32, f32, f32, f32, f32, f32, f32) -> f32 @SAAImpl(f32 %l, f32 %1, f32 %m, f32 %fl, f32 %2, f32 %fm, f32 %8);
    f32 %25 = call (f32, f32, f32, f32, f32, f32, f32) -> f32 @SAAImpl(f32 %m, f32 %10, f32 %r, f32 %fm, f32 %11, f32 %fr, f32 %17);
    f32 %26 = fadd f32 %24, f32 %25;
    ubr ^b2;
  ^b2:
    f32 %27 = phi [^b, f32 %18] [^b1, f32 %26];
    ret f32 %27;
}
func @SAA(f32 %l, f32 %r) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    f32 %0 = fadd f32 %l, f32 %r;
    f32 %1 = fmul f32 %0, f32 0.5;
    f32 %2 = fmul f32 %l, f32 %l;
    f32 %3 = fmul f32 %1, f32 %1;
    f32 %4 = fmul f32 %r, f32 %r;
    f32 %5 = fsub f32 %r, f32 %l;
    f32 %6 = fmul f32 4, f32 %3;
    f32 %7 = fadd f32 %2, f32 %6;
    f32 %8 = fadd f32 %7, f32 %4;
    f32 %9 = fmul f32 %5, f32 %8;
    f32 %10 = fdiv f32 %9, f32 6;
    f32 %11 = call (f32, f32, f32, f32, f32, f32, f32) -> f32 @SAAImpl(f32 %l, f32 %1, f32 %r, f32 %2, f32 %3, f32 %4, f32 %10);
    ret f32 %11;
}
func @main() -> i32 { NoRecurse } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    f32 %1 = call () -> f32 @getfloat();
    f32 %2 = call () -> f32 @getfloat();
    i32* %3 = ptrcast i32* @g to i32*;
    store i32* %3 with i32 %0;
    i1 %4 = scmp eq i32 %0, i32 0;
    cbr i1 %4(prob = 0.5), ^5, ^b;
  ^5:
    i1 %6 = scmp eq i32 %0, i32 1;
    cbr i1 %6(prob = 0.5), ^b1, ^if.else;
  ^b:
    i32 %7 = phi [^entry, i32 %0] [^b, i32 %9];
    i32 %8 = phi [^entry, i32 %0] [^b, i32 %10];
    i32 %9 = add i32 %7, i32 1;
    store i32* %3 with i32 %9;
    i32 %10 = add i32 %8, i32 -1;
    i1 %11 = scmp eq i32 %10, i32 0;
    cbr i1 %11(prob = 0.5), ^5, ^b;
  ^b1:
    i32 %12 = phi [^5, i32 1] [^if.else, i32 %18];
    call (i32) -> void @putint(i32 %12);
    i32 %13 = call (i32) -> i32 @fib(i32 %0);
    call (i32) -> void @putint(i32 %13);
    i1 %14 = scmp neq i32 %0, i32 0;
    cbr i1 %14(prob = 0.5), ^lhsBlock, ^b2;
  ^if.else:
    i32 %15 = phi [^5, i32 %0] [^if.else, i32 %17];
    i32 %16 = phi [^5, i32 1] [^if.else, i32 %18];
    i32 %17 = add i32 %15, i32 -1;
    i32 %18 = mul i32 %15, i32 %16;
    i1 %19 = scmp eq i32 %17, i32 1;
    cbr i1 %19(prob = 0.5), ^b1, ^if.else;
  ^lhsBlock:
    i32 %20 = phi [^b1, i32 %0] [^lhsBlock, i32 %21];
    i32 %21 = phi [^b1, i32 %0] [^lhsBlock, i32 %22];
    i32 %22 = srem i32 %20, i32 %21;
    i1 %23 = scmp neq i32 %22, i32 0;
    cbr i1 %23(prob = 0.5), ^lhsBlock, ^b2;
  ^b2:
    i32 %24 = phi [^b1, i32 %0] [^lhsBlock, i32 %21];
    call (i32) -> void @putint(i32 %24);
    i32 %25 = load i32* %3;
    call (i32) -> void @putint(i32 %25);
    f32 %26 = fadd f32 %1, f32 %2;
    f32 %27 = fmul f32 %26, f32 0.5;
    f32 %28 = fmul f32 %1, f32 %1;
    f32 %29 = fmul f32 %27, f32 %27;
    f32 %30 = fmul f32 %2, f32 %2;
    f32 %31 = fsub f32 %2, f32 %1;
    f32 %32 = fmul f32 4, f32 %29;
    f32 %33 = fadd f32 %28, f32 %32;
    f32 %34 = fadd f32 %33, f32 %30;
    f32 %35 = fmul f32 %31, f32 %34;
    f32 %36 = fdiv f32 %35, f32 6;
    f32 %37 = call (f32, f32, f32, f32, f32, f32, f32) -> f32 @SAAImpl(f32 %1, f32 %27, f32 %2, f32 %28, f32 %29, f32 %30, f32 %36);
    call (f32) -> void @putfloat(f32 %37);
    ret i32 0;
}
