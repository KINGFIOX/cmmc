internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @getfloat() -> f32 { NoMemoryRead NoMemoryWrite };
internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
internal func @putfloat(f32) -> void { NoMemoryRead NoMemoryWrite };
func @fac(i32 %a) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^0:
    i1 %1 = icmp eq i32 %a, i32 1;
    cbr i1 %1(prob = 0.5), ^b, ^if.else;
  ^if.else:
    i32 %2 = phi [^0, i32 %a] [^if.else, i32 %5];
    i32 %3 = phi [^0, i32 1] [^if.else, i32 %4];
    i32 %4 = mul i32 %2, i32 %3;
    i32 %5 = add i32 %2, i32 -1;
    i1 %6 = icmp neq i32 %5, i32 1;
    cbr i1 %6(prob = 0.5), ^if.else, ^b;
  ^b:
    i32 %7 = phi [^0, i32 1] [^if.else, i32 %4];
    ret i32 %7;
}
func @fib(i32 %a) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^0:
    ubr ^entry;
  ^entry:
    i32 %1 = phi [^0, i32 0] [^b2, i32 %8];
    i32 %2 = phi [^0, i32 %a] [^b2, i32 %9];
    i1 %3 = icmp slt i32 %2, i32 3;
    i32 %4 = add i32 %1, i32 1;
    cbr i1 %3(prob = 0.5), ^b1, ^b;
  ^b:
    i32 %5 = add i32 %2, i32 -1;
    i1 %6 = icmp slt i32 %5, i32 3;
    cbr i1 %6(prob = 0.5), ^b2, ^b3;
  ^b1:
    ret i32 %4;
  ^b2:
    i32 %7 = phi [^b, i32 0] [^b4, i32 %17];
    i32 %8 = add i32 %4, i32 %7;
    i32 %9 = add i32 %2, i32 -2;
    ubr ^entry;
  ^b3:
    i32 %10 = phi [^b, i32 %5] [^b4, i32 %18];
    i32 %11 = phi [^b, i32 0] [^b4, i32 %17];
    i32 %12 = add i32 %10, i32 -1;
    ubr ^entry1;
  ^entry1:
    i32 %13 = phi [^b3, i32 0] [^b6, i32 %23];
    i32 %14 = phi [^b3, i32 %12] [^b6, i32 %24];
    i1 %15 = icmp slt i32 %14, i32 3;
    i32 %16 = add i32 %13, i32 1;
    cbr i1 %15(prob = 0.5), ^b4, ^b5;
  ^b4:
    i32 %17 = add i32 %11, i32 %16;
    i32 %18 = add i32 %10, i32 -2;
    i1 %19 = icmp sgt i32 %18, i32 2;
    cbr i1 %19(prob = 0.5), ^b3, ^b2;
  ^b5:
    i32 %20 = add i32 %14, i32 -1;
    i1 %21 = icmp slt i32 %20, i32 3;
    cbr i1 %21(prob = 0.5), ^b6, ^b7;
  ^b6:
    i32 %22 = phi [^b5, i32 0] [^b8, i32 %32];
    i32 %23 = add i32 %16, i32 %22;
    i32 %24 = add i32 %14, i32 -2;
    ubr ^entry1;
  ^b7:
    i32 %25 = phi [^b5, i32 %20] [^b8, i32 %33];
    i32 %26 = phi [^b5, i32 0] [^b8, i32 %32];
    i32 %27 = add i32 %25, i32 -1;
    ubr ^entry2;
  ^entry2:
    i32 %28 = phi [^b7, i32 0] [^b10, i32 %38];
    i32 %29 = phi [^b7, i32 %27] [^b10, i32 %39];
    i1 %30 = icmp slt i32 %29, i32 3;
    i32 %31 = add i32 %28, i32 1;
    cbr i1 %30(prob = 0.5), ^b8, ^b9;
  ^b8:
    i32 %32 = add i32 %26, i32 %31;
    i32 %33 = add i32 %25, i32 -2;
    i1 %34 = icmp sgt i32 %33, i32 2;
    cbr i1 %34(prob = 0.5), ^b7, ^b6;
  ^b9:
    i32 %35 = add i32 %29, i32 -1;
    i1 %36 = icmp slt i32 %35, i32 3;
    cbr i1 %36(prob = 0.5), ^b10, ^b11;
  ^b10:
    i32 %37 = phi [^b9, i32 0] [^b12, i32 %47];
    i32 %38 = add i32 %31, i32 %37;
    i32 %39 = add i32 %29, i32 -2;
    ubr ^entry2;
  ^b11:
    i32 %40 = phi [^b9, i32 %35] [^b12, i32 %48];
    i32 %41 = phi [^b9, i32 0] [^b12, i32 %47];
    i32 %42 = add i32 %40, i32 -1;
    ubr ^entry3;
  ^entry3:
    i32 %43 = phi [^b11, i32 0] [^b14, i32 %53];
    i32 %44 = phi [^b11, i32 %42] [^b14, i32 %54];
    i1 %45 = icmp slt i32 %44, i32 3;
    i32 %46 = add i32 %43, i32 1;
    cbr i1 %45(prob = 0.5), ^b12, ^b13;
  ^b12:
    i32 %47 = add i32 %41, i32 %46;
    i32 %48 = add i32 %40, i32 -2;
    i1 %49 = icmp sgt i32 %48, i32 2;
    cbr i1 %49(prob = 0.5), ^b11, ^b10;
  ^b13:
    i32 %50 = add i32 %44, i32 -1;
    i1 %51 = icmp slt i32 %50, i32 3;
    cbr i1 %51(prob = 0.5), ^b14, ^b15;
  ^b14:
    i32 %52 = phi [^b13, i32 0] [^b15, i32 %59];
    i32 %53 = add i32 %46, i32 %52;
    i32 %54 = add i32 %44, i32 -2;
    ubr ^entry3;
  ^b15:
    i32 %55 = phi [^b13, i32 %50] [^b15, i32 %60];
    i32 %56 = phi [^b13, i32 0] [^b15, i32 %59];
    i32 %57 = add i32 %55, i32 -1;
    i32 %58 = call (i32) -> i32 @fib(i32 %57);
    i32 %59 = add i32 %56, i32 %58;
    i32 %60 = add i32 %55, i32 -2;
    i1 %61 = icmp sgt i32 %60, i32 2;
    cbr i1 %61(prob = 0.5), ^b15, ^b14;
}
func @gcd(i32 %a, i32 %b) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^0:
    i1 %1 = icmp neq i32 %b, i32 0;
    cbr i1 %1(prob = 0.5), ^lhsBlock, ^b1;
  ^lhsBlock:
    i32 %2 = phi [^0, i32 %a] [^lhsBlock, i32 %3];
    i32 %3 = phi [^0, i32 %b] [^lhsBlock, i32 %4];
    i32 %4 = srem i32 %2, i32 %3;
    i1 %5 = icmp neq i32 %4, i32 0;
    cbr i1 %5(prob = 0.5), ^lhsBlock, ^b1;
  ^b1:
    i32 %6 = phi [^0, i32 %a] [^lhsBlock, i32 %3];
    ret i32 %6;
}
i32* @g, align 4 = 0;
func @test(i32 %n) -> void { NoRecurse } {
  ^0:
    i1 %1 = icmp eq i32 %n, i32 0;
    cbr i1 %1(prob = 0.5), ^b1, ^b;
  ^b:
    i32 %2 = phi [^0, i32 %n] [^b, i32 %6];
    i32* %3 = ptrcast i32* @g to i32*;
    i32 %4 = load i32* %3;
    i32 %5 = add i32 %4, i32 1;
    store i32* %3 with i32 %5;
    i32 %6 = add i32 %2, i32 -1;
    i1 %7 = icmp neq i32 %6, i32 0;
    cbr i1 %7(prob = 0.5), ^b, ^b1;
  ^b1:
    ret;
}
f32* @eps, align 4 { ReadOnly } = 1e-08;
func @f(f32 %x) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    f32 %0 = fmul f32 %x, f32 %x;
    ret f32 %0;
}
func @my_fabs(f32 %x) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    f32 %0 = fabs f32 %x;
    ret f32 %0;
}
func @simpson(f32 %l, f32 %r, f32 %fl, f32 %fm, f32 %fr) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    f32 %0 = fmul f32 %fm, f32 4;
    f32 %1 = fadd f32 %fl, f32 %0;
    f32 %2 = fadd f32 %1, f32 %fr;
    f32 %3 = fsub f32 %r, f32 %l;
    f32 %4 = fmul f32 %3, f32 %2;
    f32 %5 = fdiv f32 %4, f32 6;
    ret f32 %5;
}
func @SAAImpl(f32 %l, f32 %m, f32 %r, f32 %fl, f32 %fm, f32 %fr, f32 %sm) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    f32 %0 = fadd f32 %l, f32 %m;
    f32 %1 = fmul f32 %0, f32 0.5;
    f32 %2 = fmul f32 %1, f32 %1;
    f32 %3 = fmul f32 %2, f32 4;
    f32 %4 = fadd f32 %fl, f32 %3;
    f32 %5 = fadd f32 %4, f32 %fm;
    f32 %6 = fsub f32 %m, f32 %l;
    f32 %7 = fmul f32 %6, f32 %5;
    f32 %8 = fdiv f32 %7, f32 6;
    f32 %9 = fadd f32 %m, f32 %r;
    f32 %10 = fmul f32 %9, f32 0.5;
    f32 %11 = fmul f32 %10, f32 %10;
    f32 %12 = fmul f32 %11, f32 4;
    f32 %13 = fadd f32 %fm, f32 %12;
    f32 %14 = fadd f32 %13, f32 %fr;
    f32 %15 = fsub f32 %r, f32 %m;
    f32 %16 = fmul f32 %15, f32 %14;
    f32 %17 = fdiv f32 %16, f32 6;
    f32 %18 = fadd f32 %8, f32 %17;
    f32 %19 = fsub f32 %sm, f32 %18;
    f32 %20 = fabs f32 %19;
    i1 %21 = fcmp olt f32 %20, f32 1e-08;
    cbr i1 %21(prob = 0.5), ^b, ^entry1;
  ^entry1:
    f32 %22 = fadd f32 %l, f32 %1;
    f32 %23 = fmul f32 %22, f32 0.5;
    f32 %24 = fmul f32 %23, f32 %23;
    f32 %25 = fmul f32 %24, f32 4;
    f32 %26 = fadd f32 %fl, f32 %25;
    f32 %27 = fadd f32 %26, f32 %2;
    f32 %28 = fsub f32 %1, f32 %l;
    f32 %29 = fmul f32 %28, f32 %27;
    f32 %30 = fdiv f32 %29, f32 6;
    f32 %31 = fadd f32 %1, f32 %m;
    f32 %32 = fmul f32 %31, f32 0.5;
    f32 %33 = fmul f32 %32, f32 %32;
    f32 %34 = fmul f32 %33, f32 4;
    f32 %35 = fadd f32 %2, f32 %34;
    f32 %36 = fadd f32 %35, f32 %fm;
    f32 %37 = fsub f32 %m, f32 %1;
    f32 %38 = fmul f32 %37, f32 %36;
    f32 %39 = fdiv f32 %38, f32 6;
    f32 %40 = fadd f32 %30, f32 %39;
    f32 %41 = fsub f32 %8, f32 %40;
    f32 %42 = fabs f32 %41;
    i1 %43 = fcmp olt f32 %42, f32 1e-08;
    cbr i1 %43(prob = 0.5), ^b2, ^b1;
  ^b:
    f32 %44 = phi [^entry, f32 %18] [^b3, f32 %72];
    ret f32 %44;
  ^b1:
    f32 %45 = call (f32, f32, f32, f32, f32, f32, f32) -> f32 @SAAImpl(f32 %l, f32 %23, f32 %1, f32 %fl, f32 %24, f32 %2, f32 %30);
    f32 %46 = call (f32, f32, f32, f32, f32, f32, f32) -> f32 @SAAImpl(f32 %1, f32 %32, f32 %m, f32 %2, f32 %33, f32 %fm, f32 %39);
    f32 %47 = fadd f32 %45, f32 %46;
    ubr ^b2;
  ^b2:
    f32 %48 = phi [^entry1, f32 %40] [^b1, f32 %47];
    f32 %49 = fadd f32 %m, f32 %10;
    f32 %50 = fmul f32 %49, f32 0.5;
    f32 %51 = fmul f32 %50, f32 %50;
    f32 %52 = fmul f32 %51, f32 4;
    f32 %53 = fadd f32 %fm, f32 %52;
    f32 %54 = fadd f32 %53, f32 %11;
    f32 %55 = fsub f32 %10, f32 %m;
    f32 %56 = fmul f32 %55, f32 %54;
    f32 %57 = fdiv f32 %56, f32 6;
    f32 %58 = fadd f32 %10, f32 %r;
    f32 %59 = fmul f32 %58, f32 0.5;
    f32 %60 = fmul f32 %59, f32 %59;
    f32 %61 = fmul f32 %60, f32 4;
    f32 %62 = fadd f32 %11, f32 %61;
    f32 %63 = fadd f32 %62, f32 %fr;
    f32 %64 = fsub f32 %r, f32 %10;
    f32 %65 = fmul f32 %64, f32 %63;
    f32 %66 = fdiv f32 %65, f32 6;
    f32 %67 = fadd f32 %57, f32 %66;
    f32 %68 = fsub f32 %17, f32 %67;
    f32 %69 = fabs f32 %68;
    i1 %70 = fcmp olt f32 %69, f32 1e-08;
    cbr i1 %70(prob = 0.5), ^b3, ^b4;
  ^b3:
    f32 %71 = phi [^b2, f32 %67] [^b4, f32 %75];
    f32 %72 = fadd f32 %48, f32 %71;
    ubr ^b;
  ^b4:
    f32 %73 = call (f32, f32, f32, f32, f32, f32, f32) -> f32 @SAAImpl(f32 %m, f32 %50, f32 %10, f32 %fm, f32 %51, f32 %11, f32 %57);
    f32 %74 = call (f32, f32, f32, f32, f32, f32, f32) -> f32 @SAAImpl(f32 %10, f32 %59, f32 %r, f32 %11, f32 %60, f32 %fr, f32 %66);
    f32 %75 = fadd f32 %73, f32 %74;
    ubr ^b3;
}
func @SAA(f32 %l, f32 %r) -> f32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    f32 %0 = fadd f32 %l, f32 %r;
    f32 %1 = fmul f32 %0, f32 0.5;
    f32 %2 = fmul f32 %1, f32 %1;
    f32 %3 = fmul f32 %2, f32 4;
    f32 %4 = fmul f32 %l, f32 %l;
    f32 %5 = fadd f32 %4, f32 %3;
    f32 %6 = fmul f32 %r, f32 %r;
    f32 %7 = fadd f32 %5, f32 %6;
    f32 %8 = fsub f32 %r, f32 %l;
    f32 %9 = fmul f32 %8, f32 %7;
    f32 %10 = fdiv f32 %9, f32 6;
    f32 %11 = call (f32, f32, f32, f32, f32, f32, f32) -> f32 @SAAImpl(f32 %l, f32 %1, f32 %r, f32 %4, f32 %2, f32 %6, f32 %10);
    ret f32 %11;
}
func @main() -> i32 { NoRecurse } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    f32 %1 = call () -> f32 @getfloat();
    f32 %2 = call () -> f32 @getfloat();
    i32* %3 = ptrcast i32* @g to i32*;
    store i32* %3 with i32 %0;
    i1 %4 = icmp eq i32 %0, i32 0;
    cbr i1 %4(prob = 0.5), ^5, ^b;
  ^5:
    i1 %6 = icmp eq i32 %0, i32 1;
    cbr i1 %6(prob = 0.5), ^b1, ^if.else;
  ^b:
    i32 %7 = phi [^entry, i32 %0] [^b, i32 %9];
    i32 %8 = phi [^entry, i32 %0] [^b, i32 %10];
    i32 %9 = add i32 %7, i32 1;
    store i32* %3 with i32 %9;
    i32 %10 = add i32 %8, i32 -1;
    i1 %11 = icmp neq i32 %10, i32 0;
    cbr i1 %11(prob = 0.5), ^b, ^5;
  ^b1:
    i32 %12 = phi [^5, i32 1] [^if.else, i32 %17];
    call (i32) -> void @putint(i32 %12);
    i32 %13 = call (i32) -> i32 @fib(i32 %0);
    call (i32) -> void @putint(i32 %13);
    i1 %14 = icmp neq i32 %0, i32 0;
    cbr i1 %14(prob = 0.5), ^lhsBlock, ^b2;
  ^if.else:
    i32 %15 = phi [^5, i32 %0] [^if.else, i32 %18];
    i32 %16 = phi [^5, i32 1] [^if.else, i32 %17];
    i32 %17 = mul i32 %15, i32 %16;
    i32 %18 = add i32 %15, i32 -1;
    i1 %19 = icmp neq i32 %18, i32 1;
    cbr i1 %19(prob = 0.5), ^if.else, ^b1;
  ^lhsBlock:
    i32 %20 = phi [^b1, i32 %0] [^lhsBlock, i32 %21];
    i32 %21 = phi [^b1, i32 %0] [^lhsBlock, i32 %22];
    i32 %22 = srem i32 %20, i32 %21;
    i1 %23 = icmp neq i32 %22, i32 0;
    cbr i1 %23(prob = 0.5), ^lhsBlock, ^b2;
  ^b2:
    i32 %24 = phi [^b1, i32 %0] [^lhsBlock, i32 %21];
    f32 %25 = fadd f32 %1, f32 %2;
    f32 %26 = fmul f32 %25, f32 0.5;
    f32 %27 = fmul f32 %26, f32 %26;
    f32 %28 = fmul f32 %27, f32 4;
    f32 %29 = fmul f32 %1, f32 %1;
    f32 %30 = fadd f32 %29, f32 %28;
    f32 %31 = fmul f32 %2, f32 %2;
    f32 %32 = fadd f32 %30, f32 %31;
    f32 %33 = fsub f32 %2, f32 %1;
    f32 %34 = fmul f32 %33, f32 %32;
    f32 %35 = fdiv f32 %34, f32 6;
    f32 %36 = call (f32, f32, f32, f32, f32, f32, f32) -> f32 @SAAImpl(f32 %1, f32 %26, f32 %2, f32 %29, f32 %27, f32 %31, f32 %35);
    call (i32) -> void @putint(i32 %24);
    i32 %37 = load i32* %3;
    call (i32) -> void @putint(i32 %37);
    call (f32) -> void @putfloat(f32 %36);
    ret i32 0;
}
