func @callee_cmmc_noinline(i32 %x, i32 %y) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ret i32 %x;
}
func @caller(i32 %x) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = call (i32, i32) -> i32 @callee_cmmc_noinline(i32 %x, i32 0);
    ret i32 %0;
}
func @callee_fibx_cmmc_noinline(i32 %x, i32 %y) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless } {
  ^entry:
    [4084 * i32]* %0 = ptrcast [4084 * i32]* @lut_callee_fibx_cmmc_noinline to [4084 * i32]*;
    i32* %1 = call ([4084 * i32]*, i32, i32) -> i32* @cmmcCacheLookup([4084 * i32]* %0, i32 %x, i32 %y);
    i32* %2 = getelementptr &(i32* %1)[i64 3];
    i32 %3 = load i32* %2;
    i1 %4 = icmp neq i32 %3, i32 0;
    i32* %5 = getelementptr &(i32* %1)[i64 2];
    cbr i1 %4(prob = 0.9), ^b, ^entry1;
  ^b:
    i32 %6 = load i32* %5;
    ubr ^b3;
  ^entry1:
    i1 %7 = icmp slt i32 %x, i32 3;
    cbr i1 %7(prob = 0.5), ^b1, ^b2;
  ^b1:
    store i32* %2 with i32 1;
    store i32* %5 with i32 1;
    ubr ^b3;
  ^b2:
    i32 %8 = add i32 %x, i32 -1;
    i32 %9 = call (i32, i32) -> i32 @callee_fibx_cmmc_noinline(i32 %8, i32 %y);
    i32 %10 = add i32 %x, i32 -2;
    i32 %11 = call (i32, i32) -> i32 @callee_fibx_cmmc_noinline(i32 %10, i32 %y);
    i32 %12 = sub i32 %9, i32 %11;
    store i32* %2 with i32 1;
    store i32* %5 with i32 %12;
    ubr ^b3;
  ^b3:
    i32 %13 = phi [^b, i32 %6] [^b1, i32 1] [^b2, i32 %12];
    ret i32 %13;
}
func @caller_fibx(i32 %x) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    i32 %0 = add i32 %x, i32 10;
    i32 %1 = call (i32, i32) -> i32 @callee_fibx_cmmc_noinline(i32 %x, i32 %0);
    ret i32 %1;
}
internal func @cmmcCacheLookup([4084 * i32]*, i32, i32) -> i32* { Builtin };
internal [4084 * i32]* @lut_callee_fibx_cmmc_noinline, align 8;
