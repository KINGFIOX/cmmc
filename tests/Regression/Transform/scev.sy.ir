func @foo(i32* %a, i32 %n, i32 %k) -> void { NoMemoryRead NoRecurse } {
  ^entry:
    i1 %0 = icmp sgt i32 %n, i32 0;
    cbr i1 %0(prob = 0.97), ^super.header, ^b;
  ^super.header:
    i32 %1 = phi [^entry, i32 0] [^for.body, i32 %2];
    i32 %2 = add i32 %1, i32 4;
    i1 %3 = icmp sgt i32 %n, i32 %2;
    cbr i1 %3(prob = 0.89), ^for.body, ^for.body1;
  ^b:
    ret;
  ^for.body:
    i32* %4 = getelementptr &(i32* %a)[i32 %1];
    i32 %5 = mul i32 %k, i32 %1;
    store i32* %4 with i32 %5;
    i32* %6 = getelementptr &(i32* %4)[i64 1];
    i32 %7 = add i32 %1, i32 1;
    i32 %8 = mul i32 %k, i32 %7;
    store i32* %6 with i32 %8;
    i32* %9 = getelementptr &(i32* %4)[i64 2];
    i32 %10 = add i32 %1, i32 2;
    i32 %11 = mul i32 %k, i32 %10;
    store i32* %9 with i32 %11;
    i32* %12 = getelementptr &(i32* %4)[i64 3];
    i32 %13 = add i32 %1, i32 3;
    i32 %14 = mul i32 %k, i32 %13;
    store i32* %12 with i32 %14;
    ubr ^super.header;
  ^for.body1:
    i32 %15 = phi [^super.header, i32 %1] [^for.body1, i32 %18];
    i32* %16 = getelementptr &(i32* %a)[i32 %15];
    i32 %17 = mul i32 %k, i32 %15;
    store i32* %16 with i32 %17;
    i32 %18 = add i32 %15, i32 1;
    i1 %19 = icmp sgt i32 %n, i32 %18;
    cbr i1 %19(prob = 0.97), ^for.body1, ^b;
}
func @foo2(i32* %a, i32 %n) -> void { NoMemoryRead NoRecurse } {
  ^entry:
    i1 %0 = icmp sgt i32 %n, i32 0;
    cbr i1 %0(prob = 0.97), ^super.header, ^b;
  ^super.header:
    i32 %1 = phi [^entry, i32 0] [^for.body, i32 %2];
    i32 %2 = add i32 %1, i32 4;
    i1 %3 = icmp sgt i32 %n, i32 %2;
    cbr i1 %3(prob = 0.89), ^for.body, ^for.body1;
  ^b:
    ret;
  ^for.body:
    i32 %4 = add i32 %1, i32 2;
    i32 %5 = mul i32 %1, i32 %4;
    i32 %6 = add i32 %5, i32 3;
    i32 %7 = mul i32 %1, i32 %6;
    i32 %8 = add i32 %7, i32 7;
    i32* %9 = getelementptr &(i32* %a)[i32 %1];
    store i32* %9 with i32 %8;
    i32 %10 = add i32 %1, i32 1;
    i32 %11 = add i32 %1, i32 3;
    i32 %12 = mul i32 %10, i32 %11;
    i32 %13 = add i32 %12, i32 3;
    i32 %14 = mul i32 %10, i32 %13;
    i32 %15 = add i32 %14, i32 7;
    i32* %16 = getelementptr &(i32* %9)[i64 1];
    store i32* %16 with i32 %15;
    i32 %17 = mul i32 %2, i32 %4;
    i32 %18 = add i32 %17, i32 3;
    i32 %19 = mul i32 %4, i32 %18;
    i32 %20 = add i32 %19, i32 7;
    i32* %21 = getelementptr &(i32* %9)[i64 2];
    store i32* %21 with i32 %20;
    i32 %22 = add i32 %1, i32 5;
    i32 %23 = mul i32 %11, i32 %22;
    i32 %24 = add i32 %23, i32 3;
    i32 %25 = mul i32 %11, i32 %24;
    i32 %26 = add i32 %25, i32 7;
    i32* %27 = getelementptr &(i32* %9)[i64 3];
    store i32* %27 with i32 %26;
    ubr ^super.header;
  ^for.body1:
    i32 %28 = phi [^super.header, i32 %1] [^for.body1, i32 %35];
    i32 %29 = add i32 %28, i32 2;
    i32 %30 = mul i32 %28, i32 %29;
    i32 %31 = add i32 %30, i32 3;
    i32 %32 = mul i32 %28, i32 %31;
    i32 %33 = add i32 %32, i32 7;
    i32* %34 = getelementptr &(i32* %a)[i32 %28];
    store i32* %34 with i32 %33;
    i32 %35 = add i32 %28, i32 1;
    i1 %36 = icmp sgt i32 %n, i32 %35;
    cbr i1 %36(prob = 0.97), ^for.body1, ^b;
}
