func @foo(i32* %a, i32 %n, i32 %k) -> void { NoMemoryRead NoRecurse } {
  ^entry:
    i1 %0 = icmp sgt i32 %n, i32 0;
    cbr i1 %0(prob = 0.984615), ^super.header, ^b;
  ^super.header:
    i32 %1 = add i32 %n, i32 -4;
    i1 %2 = icmp sgt i32 %n, i32 4;
    cbr i1 %2(prob = 0.941176), ^for.body, ^for.body1;
  ^b:
    ret;
  ^for.body:
    i32 %3 = phi [^super.header, i32 0] [^for.body, i32 %15];
    i32* %4 = getelementptr &(i32* %a)[i32 %3];
    i32 %5 = mul i32 %k, i32 %3;
    store i32* %4 with i32 %5;
    i32* %6 = getelementptr &(i32* %4)[i64 1];
    i32 %7 = add i32 %3, i32 1;
    i32 %8 = mul i32 %k, i32 %7;
    store i32* %6 with i32 %8;
    i32* %9 = getelementptr &(i32* %4)[i64 2];
    i32 %10 = add i32 %3, i32 2;
    i32 %11 = mul i32 %k, i32 %10;
    store i32* %9 with i32 %11;
    i32* %12 = getelementptr &(i32* %4)[i64 3];
    i32 %13 = add i32 %3, i32 3;
    i32 %14 = mul i32 %k, i32 %13;
    store i32* %12 with i32 %14;
    i32 %15 = add i32 %3, i32 4;
    i1 %16 = icmp sgt i32 %1, i32 %15;
    cbr i1 %16(prob = 0.941176), ^for.body, ^for.body1;
  ^for.body1 {scalar}:
    i32 %17 = phi [^super.header, i32 0] [^for.body, i32 %15] [^for.body1, i32 %20];
    i32* %18 = getelementptr &(i32* %a)[i32 %17];
    i32 %19 = mul i32 %k, i32 %17;
    store i32* %18 with i32 %19;
    i32 %20 = add i32 %17, i32 1;
    i1 %21 = icmp sgt i32 %n, i32 %20;
    cbr i1 %21(prob = 0.75), ^for.body1, ^b;
}
func @foo2(i32* %a, i32 %n) -> void { NoMemoryRead NoRecurse } {
  ^entry:
    i1 %0 = icmp sgt i32 %n, i32 0;
    cbr i1 %0(prob = 0.984615), ^super.header, ^b;
  ^super.header:
    i32 %1 = add i32 %n, i32 -4;
    i1 %2 = icmp sgt i32 %n, i32 4;
    cbr i1 %2(prob = 0.941176), ^for.body, ^for.body1;
  ^b:
    ret;
  ^for.body:
    i32 %3 = phi [^super.header, i32 30] [^for.body, i32 %36];
    i32 %4 = phi [^super.header, i32 60] [^for.body, i32 %35];
    i32 %5 = phi [^super.header, i32 40] [^for.body, i32 %34];
    i32 %6 = phi [^super.header, i32 0] [^for.body, i32 %31];
    i32 %7 = phi [^super.header, i32 10] [^for.body, i32 %33];
    i32 %8 = phi [^super.header, i32 6] [^for.body, i32 %30];
    i32 %9 = phi [^super.header, i32 0] [^for.body, i32 %28];
    i32* %10 = getelementptr &(i32* %a)[i32 %6];
    i32 %11 = add i32 %9, i32 7;
    store i32* %10 with i32 %11;
    i32 %12 = add i32 %8, i32 7;
    i32 %13 = add i32 %9, i32 %12;
    i32* %14 = getelementptr &(i32* %10)[i64 1];
    store i32* %14 with i32 %13;
    i32 %15 = mul i32 %8, i32 2;
    i32 %16 = add i32 %15, i32 7;
    i32 %17 = add i32 %7, i32 %16;
    i32 %18 = add i32 %9, i32 %17;
    i32* %19 = getelementptr &(i32* %10)[i64 2];
    store i32* %19 with i32 %18;
    i32 %20 = mul i32 %8, i32 3;
    i32 %21 = add i32 %20, i32 13;
    i32 %22 = add i32 %3, i32 %21;
    i32 %23 = add i32 %9, i32 %22;
    i32* %24 = getelementptr &(i32* %10)[i64 3];
    store i32* %24 with i32 %23;
    i32 %25 = mul i32 %8, i32 4;
    i32 %26 = add i32 %25, i32 24;
    i32 %27 = add i32 %4, i32 %26;
    i32 %28 = add i32 %9, i32 %27;
    i32 %29 = add i32 %5, i32 36;
    i32 %30 = add i32 %8, i32 %29;
    i32 %31 = add i32 %6, i32 4;
    i1 %32 = icmp sgt i32 %1, i32 %31;
    i32 %33 = add i32 %7, i32 24;
    i32 %34 = add i32 %5, i32 96;
    i32 %35 = add i32 %4, i32 144;
    i32 %36 = add i32 %3, i32 72;
    cbr i1 %32(prob = 0.941176), ^for.body, ^for.body1;
  ^for.body1 {scalar}:
    i32 %37 = phi [^super.header, i32 0] [^for.body, i32 %28] [^for.body1, i32 %46];
    i32 %38 = phi [^super.header, i32 6] [^for.body, i32 %30] [^for.body1, i32 %45];
    i32 %39 = phi [^super.header, i32 10] [^for.body, i32 %33] [^for.body1, i32 %47];
    i32 %40 = phi [^super.header, i32 0] [^for.body, i32 %31] [^for.body1, i32 %43];
    i32* %41 = getelementptr &(i32* %a)[i32 %40];
    i32 %42 = add i32 %37, i32 7;
    store i32* %41 with i32 %42;
    i32 %43 = add i32 %40, i32 1;
    i1 %44 = icmp sgt i32 %n, i32 %43;
    i32 %45 = add i32 %38, i32 %39;
    i32 %46 = add i32 %37, i32 %38;
    i32 %47 = add i32 %39, i32 6;
    cbr i1 %44(prob = 0.75), ^for.body1, ^b;
}
func @foo3(i32 %x) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ret i32 %x;
}
func @foo4(i32* %a, i32 %n) -> void { NoMemoryRead NoRecurse } {
  ^entry:
    i1 %0 = icmp sgt i32 %n, i32 0;
    cbr i1 %0(prob = 0.984615), ^super.header, ^b;
  ^super.header:
    i32 %1 = add i32 %n, i32 -4;
    i1 %2 = icmp sgt i32 %n, i32 4;
    cbr i1 %2(prob = 0.941176), ^for.body, ^for.body1;
  ^b:
    ret;
  ^for.body:
    i32 %3 = phi [^super.header, i32 0] [^for.body, i32 %12];
    i32 %4 = phi [^super.header, i32 0] [^for.body, i32 %14];
    i32* %5 = getelementptr &(i32* %a)[i32 %3];
    store i32* %5 with i32 %4;
    i32* %6 = getelementptr &(i32* %5)[i64 1];
    i32 %7 = add i32 %4, i32 17;
    store i32* %6 with i32 %7;
    i32* %8 = getelementptr &(i32* %5)[i64 2];
    i32 %9 = add i32 %4, i32 34;
    store i32* %8 with i32 %9;
    i32* %10 = getelementptr &(i32* %5)[i64 3];
    i32 %11 = add i32 %4, i32 51;
    store i32* %10 with i32 %11;
    i32 %12 = add i32 %3, i32 4;
    i1 %13 = icmp sgt i32 %1, i32 %12;
    i32 %14 = add i32 %4, i32 68;
    cbr i1 %13(prob = 0.941176), ^for.body, ^for.body1;
  ^for.body1 {scalar}:
    i32 %15 = phi [^super.header, i32 0] [^for.body, i32 %14] [^for.body1, i32 %20];
    i32 %16 = phi [^super.header, i32 0] [^for.body, i32 %12] [^for.body1, i32 %18];
    i32* %17 = getelementptr &(i32* %a)[i32 %16];
    store i32* %17 with i32 %15;
    i32 %18 = add i32 %16, i32 1;
    i1 %19 = icmp sgt i32 %n, i32 %18;
    i32 %20 = add i32 %15, i32 17;
    cbr i1 %19(prob = 0.75), ^for.body1, ^b;
}
