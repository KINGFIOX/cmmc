func @foo(i32* %a, i32 %n, i32 %k) -> void { NoMemoryRead NoRecurse } {
  ^entry:
    i1 %0 = icmp sgt i32 %n, i32 0;
    cbr i1 %0(prob = 0.984615), ^super.header, ^b;
  ^super.header:
    i1 %1 = icmp sgt i32 %n, i32 4;
    cbr i1 %1(prob = 0.941176), ^super.header1, ^for.body;
  ^b:
    ret;
  ^super.header1:
    i32 %2 = add i32 %n, i32 -4;
    i1 %3 = icmp sgt i32 %2, i32 16;
    i32 %4 = mul i32 %k, i32 2;
    i32 %5 = mul i32 %k, i32 3;
    i32 %6 = mul i32 %k, i32 4;
    cbr i1 %3(prob = 0.941176), ^prebody, ^for.body1;
  ^for.body {scalar}:
    i32 %7 = phi [^super.header, i32 0] [^for.body, i32 %12] [^for.body1, i32 %37];
    i32 %8 = phi [^super.header, i32 0] [^for.body, i32 %10] [^for.body1, i32 %35];
    i32* %9 = getelementptr &(i32* %a)[i32 %8];
    store i32* %9 with i32 %7;
    i32 %10 = add i32 %8, i32 1;
    i1 %11 = icmp sgt i32 %n, i32 %10;
    i32 %12 = add i32 %k, i32 %7;
    cbr i1 %11(prob = 0.75), ^for.body, ^b;
  ^prebody:
    i32 %13 = add i32 %n, i32 -20;
    i32 %14 = mul i32 %k, i32 5;
    i32 %15 = mul i32 %k, i32 6;
    i32 %16 = mul i32 %k, i32 7;
    i32 %17 = mul i32 %k, i32 8;
    i32 %18 = mul i32 %k, i32 9;
    i32 %19 = mul i32 %k, i32 10;
    i32 %20 = mul i32 %k, i32 11;
    i32 %21 = mul i32 %k, i32 12;
    i32 %22 = mul i32 %k, i32 13;
    i32 %23 = mul i32 %k, i32 14;
    i32 %24 = mul i32 %k, i32 15;
    i32 %25 = mul i32 %k, i32 16;
    ubr ^for.body2;
  ^for.body1 {scalar}:
    i32 %26 = phi [^super.header1, i32 0] [^for.body1, i32 %35] [^for.body2, i32 %71];
    i32 %27 = phi [^super.header1, i32 0] [^for.body1, i32 %37] [^for.body2, i32 %73];
    i32* %28 = getelementptr &(i32* %a)[i32 %26];
    store i32* %28 with i32 %27;
    i32* %29 = getelementptr &(i32* %28)[i64 1];
    i32 %30 = add i32 %k, i32 %27;
    store i32* %29 with i32 %30;
    i32* %31 = getelementptr &(i32* %28)[i64 2];
    i32 %32 = add i32 %4, i32 %27;
    store i32* %31 with i32 %32;
    i32* %33 = getelementptr &(i32* %28)[i64 3];
    i32 %34 = add i32 %5, i32 %27;
    store i32* %33 with i32 %34;
    i32 %35 = add i32 %26, i32 4;
    i1 %36 = icmp sgt i32 %2, i32 %35;
    i32 %37 = add i32 %6, i32 %27;
    cbr i1 %36(prob = 0.75), ^for.body1, ^for.body;
  ^for.body2:
    i32 %38 = phi [^prebody, i32 0] [^for.body2, i32 %73];
    i32 %39 = phi [^prebody, i32 0] [^for.body2, i32 %71];
    i32* %40 = getelementptr &(i32* %a)[i32 %39];
    store i32* %40 with i32 %38;
    i32* %41 = getelementptr &(i32* %40)[i64 1];
    i32 %42 = add i32 %k, i32 %38;
    store i32* %41 with i32 %42;
    i32* %43 = getelementptr &(i32* %40)[i64 2];
    i32 %44 = add i32 %4, i32 %38;
    store i32* %43 with i32 %44;
    i32* %45 = getelementptr &(i32* %40)[i64 3];
    i32 %46 = add i32 %5, i32 %38;
    store i32* %45 with i32 %46;
    i32* %47 = getelementptr &(i32* %40)[i64 4];
    i32 %48 = add i32 %6, i32 %38;
    store i32* %47 with i32 %48;
    i32* %49 = getelementptr &(i32* %40)[i64 5];
    i32 %50 = add i32 %14, i32 %38;
    store i32* %49 with i32 %50;
    i32* %51 = getelementptr &(i32* %40)[i64 6];
    i32 %52 = add i32 %15, i32 %38;
    store i32* %51 with i32 %52;
    i32* %53 = getelementptr &(i32* %40)[i64 7];
    i32 %54 = add i32 %16, i32 %38;
    store i32* %53 with i32 %54;
    i32* %55 = getelementptr &(i32* %40)[i64 8];
    i32 %56 = add i32 %17, i32 %38;
    store i32* %55 with i32 %56;
    i32* %57 = getelementptr &(i32* %40)[i64 9];
    i32 %58 = add i32 %18, i32 %38;
    store i32* %57 with i32 %58;
    i32* %59 = getelementptr &(i32* %40)[i64 10];
    i32 %60 = add i32 %19, i32 %38;
    store i32* %59 with i32 %60;
    i32* %61 = getelementptr &(i32* %40)[i64 11];
    i32 %62 = add i32 %20, i32 %38;
    store i32* %61 with i32 %62;
    i32* %63 = getelementptr &(i32* %40)[i64 12];
    i32 %64 = add i32 %21, i32 %38;
    store i32* %63 with i32 %64;
    i32* %65 = getelementptr &(i32* %40)[i64 13];
    i32 %66 = add i32 %22, i32 %38;
    store i32* %65 with i32 %66;
    i32* %67 = getelementptr &(i32* %40)[i64 14];
    i32 %68 = add i32 %23, i32 %38;
    store i32* %67 with i32 %68;
    i32* %69 = getelementptr &(i32* %40)[i64 15];
    i32 %70 = add i32 %24, i32 %38;
    store i32* %69 with i32 %70;
    i32 %71 = add i32 %39, i32 16;
    i1 %72 = icmp sgt i32 %13, i32 %71;
    i32 %73 = add i32 %25, i32 %38;
    cbr i1 %72(prob = 0.941176), ^for.body2, ^for.body1;
}
func @foo2(i32* %a, i32 %n) -> void { NoMemoryRead NoRecurse } {
  ^entry:
    i1 %0 = icmp sgt i32 %n, i32 0;
    cbr i1 %0(prob = 0.984615), ^super.header, ^b;
  ^super.header:
    i1 %1 = icmp sgt i32 %n, i32 4;
    cbr i1 %1(prob = 0.941176), ^super.header1, ^for.body;
  ^b:
    ret;
  ^super.header1:
    i32 %2 = add i32 %n, i32 -4;
    i1 %3 = icmp sgt i32 %2, i32 16;
    i32 %4 = add i32 %n, i32 -20;
    cbr i1 %3(prob = 0.941176), ^for.body1, ^for.body2;
  ^for.body {scalar}:
    i32 %5 = phi [^super.header, i32 0] [^for.body, i32 %14] [^for.body2, i32 %157];
    i32 %6 = phi [^super.header, i32 6] [^for.body, i32 %13] [^for.body2, i32 %160];
    i32 %7 = phi [^super.header, i32 10] [^for.body, i32 %15] [^for.body2, i32 %163];
    i32 %8 = phi [^super.header, i32 0] [^for.body, i32 %11] [^for.body2, i32 %161];
    i32* %9 = getelementptr &(i32* %a)[i32 %8];
    i32 %10 = add i32 %5, i32 7;
    store i32* %9 with i32 %10;
    i32 %11 = add i32 %8, i32 1;
    i1 %12 = icmp sgt i32 %n, i32 %11;
    i32 %13 = add i32 %6, i32 %7;
    i32 %14 = add i32 %5, i32 %6;
    i32 %15 = add i32 %7, i32 6;
    cbr i1 %12(prob = 0.75), ^for.body, ^b;
  ^for.body1:
    i32 %16 = phi [^super.header1, i32 1050] [^for.body1, i32 %132];
    i32 %17 = phi [^super.header1, i32 1200] [^for.body1, i32 %131];
    i32 %18 = phi [^super.header1, i32 160] [^for.body1, i32 %130];
    i32 %19 = phi [^super.header1, i32 910] [^for.body1, i32 %128];
    i32 %20 = phi [^super.header1, i32 780] [^for.body1, i32 %127];
    i32 %21 = phi [^super.header1, i32 660] [^for.body1, i32 %126];
    i32 %22 = phi [^super.header1, i32 550] [^for.body1, i32 %125];
    i32 %23 = phi [^super.header1, i32 450] [^for.body1, i32 %124];
    i32 %24 = phi [^super.header1, i32 360] [^for.body1, i32 %123];
    i32 %25 = phi [^super.header1, i32 280] [^for.body1, i32 %122];
    i32 %26 = phi [^super.header1, i32 210] [^for.body1, i32 %121];
    i32 %27 = phi [^super.header1, i32 150] [^for.body1, i32 %120];
    i32 %28 = phi [^super.header1, i32 100] [^for.body1, i32 %119];
    i32 %29 = phi [^super.header1, i32 60] [^for.body1, i32 %118];
    i32 %30 = phi [^super.header1, i32 30] [^for.body1, i32 %117];
    i32 %31 = phi [^super.header1, i32 0] [^for.body1, i32 %112];
    i32 %32 = phi [^super.header1, i32 6] [^for.body1, i32 %114];
    i32 %33 = phi [^super.header1, i32 10] [^for.body1, i32 %129];
    i32 %34 = phi [^super.header1, i32 0] [^for.body1, i32 %115];
    i32* %35 = getelementptr &(i32* %a)[i32 %34];
    i32 %36 = add i32 %31, i32 7;
    store i32* %35 with i32 %36;
    i32 %37 = add i32 %32, i32 %36;
    i32* %38 = getelementptr &(i32* %35)[i64 1];
    store i32* %38 with i32 %37;
    i32 %39 = mul i32 %32, i32 2;
    i32 %40 = add i32 %39, i32 7;
    i32 %41 = add i32 %31, i32 %40;
    i32 %42 = add i32 %33, i32 %41;
    i32* %43 = getelementptr &(i32* %35)[i64 2];
    store i32* %43 with i32 %42;
    i32 %44 = mul i32 %32, i32 3;
    i32 %45 = add i32 %44, i32 13;
    i32 %46 = add i32 %30, i32 %45;
    i32 %47 = add i32 %31, i32 %46;
    i32* %48 = getelementptr &(i32* %35)[i64 3];
    store i32* %48 with i32 %47;
    i32 %49 = mul i32 %32, i32 4;
    i32 %50 = add i32 %49, i32 31;
    i32 %51 = add i32 %29, i32 %50;
    i32 %52 = add i32 %31, i32 %51;
    i32* %53 = getelementptr &(i32* %35)[i64 4];
    store i32* %53 with i32 %52;
    i32 %54 = mul i32 %32, i32 5;
    i32 %55 = add i32 %54, i32 67;
    i32 %56 = add i32 %28, i32 %55;
    i32 %57 = add i32 %31, i32 %56;
    i32* %58 = getelementptr &(i32* %35)[i64 5];
    store i32* %58 with i32 %57;
    i32 %59 = mul i32 %32, i32 6;
    i32 %60 = add i32 %59, i32 127;
    i32 %61 = add i32 %27, i32 %60;
    i32 %62 = add i32 %31, i32 %61;
    i32* %63 = getelementptr &(i32* %35)[i64 6];
    store i32* %63 with i32 %62;
    i32 %64 = mul i32 %32, i32 7;
    i32 %65 = add i32 %64, i32 217;
    i32 %66 = add i32 %26, i32 %65;
    i32 %67 = add i32 %31, i32 %66;
    i32* %68 = getelementptr &(i32* %35)[i64 7];
    store i32* %68 with i32 %67;
    i32 %69 = mul i32 %32, i32 8;
    i32 %70 = add i32 %69, i32 343;
    i32 %71 = add i32 %25, i32 %70;
    i32 %72 = add i32 %31, i32 %71;
    i32* %73 = getelementptr &(i32* %35)[i64 8];
    store i32* %73 with i32 %72;
    i32 %74 = mul i32 %32, i32 9;
    i32 %75 = add i32 %74, i32 511;
    i32 %76 = add i32 %24, i32 %75;
    i32 %77 = add i32 %31, i32 %76;
    i32* %78 = getelementptr &(i32* %35)[i64 9];
    store i32* %78 with i32 %77;
    i32 %79 = mul i32 %32, i32 10;
    i32 %80 = add i32 %79, i32 727;
    i32 %81 = add i32 %23, i32 %80;
    i32 %82 = add i32 %31, i32 %81;
    i32* %83 = getelementptr &(i32* %35)[i64 10];
    store i32* %83 with i32 %82;
    i32 %84 = mul i32 %32, i32 11;
    i32 %85 = add i32 %84, i32 997;
    i32 %86 = add i32 %22, i32 %85;
    i32 %87 = add i32 %31, i32 %86;
    i32* %88 = getelementptr &(i32* %35)[i64 11];
    store i32* %88 with i32 %87;
    i32 %89 = mul i32 %32, i32 12;
    i32 %90 = add i32 %89, i32 1327;
    i32 %91 = add i32 %21, i32 %90;
    i32 %92 = add i32 %31, i32 %91;
    i32* %93 = getelementptr &(i32* %35)[i64 12];
    store i32* %93 with i32 %92;
    i32 %94 = mul i32 %32, i32 13;
    i32 %95 = add i32 %94, i32 1723;
    i32 %96 = add i32 %20, i32 %95;
    i32 %97 = add i32 %31, i32 %96;
    i32* %98 = getelementptr &(i32* %35)[i64 13];
    store i32* %98 with i32 %97;
    i32 %99 = mul i32 %32, i32 14;
    i32 %100 = add i32 %99, i32 2191;
    i32 %101 = add i32 %19, i32 %100;
    i32 %102 = add i32 %31, i32 %101;
    i32* %103 = getelementptr &(i32* %35)[i64 14];
    store i32* %103 with i32 %102;
    i32 %104 = mul i32 %32, i32 15;
    i32 %105 = add i32 %104, i32 2737;
    i32 %106 = add i32 %16, i32 %105;
    i32 %107 = add i32 %31, i32 %106;
    i32* %108 = getelementptr &(i32* %35)[i64 15];
    store i32* %108 with i32 %107;
    i32 %109 = mul i32 %32, i32 16;
    i32 %110 = add i32 %109, i32 3360;
    i32 %111 = add i32 %17, i32 %110;
    i32 %112 = add i32 %31, i32 %111;
    i32 %113 = add i32 %18, i32 720;
    i32 %114 = add i32 %32, i32 %113;
    i32 %115 = add i32 %34, i32 16;
    i1 %116 = icmp sgt i32 %4, i32 %115;
    i32 %117 = add i32 %30, i32 288;
    i32 %118 = add i32 %29, i32 576;
    i32 %119 = add i32 %28, i32 960;
    i32 %120 = add i32 %27, i32 1440;
    i32 %121 = add i32 %26, i32 2016;
    i32 %122 = add i32 %25, i32 2688;
    i32 %123 = add i32 %24, i32 3456;
    i32 %124 = add i32 %23, i32 4320;
    i32 %125 = add i32 %22, i32 5280;
    i32 %126 = add i32 %21, i32 6336;
    i32 %127 = add i32 %20, i32 7488;
    i32 %128 = add i32 %19, i32 8736;
    i32 %129 = add i32 %33, i32 96;
    i32 %130 = add i32 %18, i32 1536;
    i32 %131 = add i32 %17, i32 11520;
    i32 %132 = add i32 %16, i32 10080;
    cbr i1 %116(prob = 0.941176), ^for.body1, ^for.body2;
  ^for.body2 {scalar}:
    i32 %133 = phi [^super.header1, i32 0] [^for.body1, i32 %115] [^for.body2, i32 %161];
    i32 %134 = phi [^super.header1, i32 10] [^for.body1, i32 %129] [^for.body2, i32 %163];
    i32 %135 = phi [^super.header1, i32 6] [^for.body1, i32 %114] [^for.body2, i32 %160];
    i32 %136 = phi [^super.header1, i32 0] [^for.body1, i32 %112] [^for.body2, i32 %157];
    i32* %137 = getelementptr &(i32* %a)[i32 %133];
    i32 %138 = add i32 %136, i32 7;
    store i32* %137 with i32 %138;
    i32 %139 = add i32 %135, i32 7;
    i32 %140 = add i32 %136, i32 %139;
    i32* %141 = getelementptr &(i32* %137)[i64 1];
    store i32* %141 with i32 %140;
    i32 %142 = mul i32 %135, i32 2;
    i32 %143 = add i32 %142, i32 7;
    i32 %144 = add i32 %134, i32 %143;
    i32 %145 = add i32 %136, i32 %144;
    i32* %146 = getelementptr &(i32* %137)[i64 2];
    store i32* %146 with i32 %145;
    i32 %147 = mul i32 %134, i32 3;
    i32 %148 = add i32 %147, i32 13;
    i32 %149 = mul i32 %135, i32 3;
    i32 %150 = add i32 %148, i32 %149;
    i32 %151 = add i32 %136, i32 %150;
    i32* %152 = getelementptr &(i32* %137)[i64 3];
    store i32* %152 with i32 %151;
    i32 %153 = mul i32 %134, i32 6;
    i32 %154 = add i32 %153, i32 24;
    i32 %155 = mul i32 %135, i32 4;
    i32 %156 = add i32 %154, i32 %155;
    i32 %157 = add i32 %136, i32 %156;
    i32 %158 = mul i32 %134, i32 4;
    i32 %159 = add i32 %158, i32 36;
    i32 %160 = add i32 %135, i32 %159;
    i32 %161 = add i32 %133, i32 4;
    i1 %162 = icmp sgt i32 %2, i32 %161;
    i32 %163 = add i32 %134, i32 24;
    cbr i1 %162(prob = 0.75), ^for.body2, ^for.body;
}
func @foo3(i32 %x) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ret i32 %x;
}
func @foo4(i32* %a, i32 %n) -> void { NoMemoryRead NoRecurse } {
  ^entry:
    i1 %0 = icmp sgt i32 %n, i32 0;
    cbr i1 %0(prob = 0.984615), ^super.header, ^b;
  ^super.header:
    i1 %1 = icmp sgt i32 %n, i32 4;
    cbr i1 %1(prob = 0.941176), ^super.header1, ^for.body;
  ^b:
    ret;
  ^super.header1:
    i32 %2 = add i32 %n, i32 -4;
    i1 %3 = icmp sgt i32 %2, i32 16;
    i32 %4 = add i32 %n, i32 -20;
    cbr i1 %3(prob = 0.941176), ^for.body1, ^for.body2;
  ^for.body {scalar}:
    i32 %5 = phi [^super.header, i32 0] [^for.body, i32 %10] [^for.body2, i32 %58];
    i32 %6 = phi [^super.header, i32 0] [^for.body, i32 %8] [^for.body2, i32 %56];
    i32* %7 = getelementptr &(i32* %a)[i32 %6];
    store i32* %7 with i32 %5;
    i32 %8 = add i32 %6, i32 1;
    i1 %9 = icmp sgt i32 %n, i32 %8;
    i32 %10 = add i32 %5, i32 17;
    cbr i1 %9(prob = 0.75), ^for.body, ^b;
  ^for.body1:
    i32 %11 = phi [^super.header1, i32 0] [^for.body1, i32 %46];
    i32 %12 = phi [^super.header1, i32 0] [^for.body1, i32 %44];
    i32* %13 = getelementptr &(i32* %a)[i32 %12];
    store i32* %13 with i32 %11;
    i32* %14 = getelementptr &(i32* %13)[i64 1];
    i32 %15 = add i32 %11, i32 17;
    store i32* %14 with i32 %15;
    i32* %16 = getelementptr &(i32* %13)[i64 2];
    i32 %17 = add i32 %11, i32 34;
    store i32* %16 with i32 %17;
    i32* %18 = getelementptr &(i32* %13)[i64 3];
    i32 %19 = add i32 %11, i32 51;
    store i32* %18 with i32 %19;
    i32* %20 = getelementptr &(i32* %13)[i64 4];
    i32 %21 = add i32 %11, i32 68;
    store i32* %20 with i32 %21;
    i32* %22 = getelementptr &(i32* %13)[i64 5];
    i32 %23 = add i32 %11, i32 85;
    store i32* %22 with i32 %23;
    i32* %24 = getelementptr &(i32* %13)[i64 6];
    i32 %25 = add i32 %11, i32 102;
    store i32* %24 with i32 %25;
    i32* %26 = getelementptr &(i32* %13)[i64 7];
    i32 %27 = add i32 %11, i32 119;
    store i32* %26 with i32 %27;
    i32* %28 = getelementptr &(i32* %13)[i64 8];
    i32 %29 = add i32 %11, i32 136;
    store i32* %28 with i32 %29;
    i32* %30 = getelementptr &(i32* %13)[i64 9];
    i32 %31 = add i32 %11, i32 153;
    store i32* %30 with i32 %31;
    i32* %32 = getelementptr &(i32* %13)[i64 10];
    i32 %33 = add i32 %11, i32 170;
    store i32* %32 with i32 %33;
    i32* %34 = getelementptr &(i32* %13)[i64 11];
    i32 %35 = add i32 %11, i32 187;
    store i32* %34 with i32 %35;
    i32* %36 = getelementptr &(i32* %13)[i64 12];
    i32 %37 = add i32 %11, i32 204;
    store i32* %36 with i32 %37;
    i32* %38 = getelementptr &(i32* %13)[i64 13];
    i32 %39 = add i32 %11, i32 221;
    store i32* %38 with i32 %39;
    i32* %40 = getelementptr &(i32* %13)[i64 14];
    i32 %41 = add i32 %11, i32 238;
    store i32* %40 with i32 %41;
    i32* %42 = getelementptr &(i32* %13)[i64 15];
    i32 %43 = add i32 %11, i32 255;
    store i32* %42 with i32 %43;
    i32 %44 = add i32 %12, i32 16;
    i1 %45 = icmp sgt i32 %4, i32 %44;
    i32 %46 = add i32 %11, i32 272;
    cbr i1 %45(prob = 0.941176), ^for.body1, ^for.body2;
  ^for.body2 {scalar}:
    i32 %47 = phi [^super.header1, i32 0] [^for.body1, i32 %44] [^for.body2, i32 %56];
    i32 %48 = phi [^super.header1, i32 0] [^for.body1, i32 %46] [^for.body2, i32 %58];
    i32* %49 = getelementptr &(i32* %a)[i32 %47];
    store i32* %49 with i32 %48;
    i32* %50 = getelementptr &(i32* %49)[i64 1];
    i32 %51 = add i32 %48, i32 17;
    store i32* %50 with i32 %51;
    i32* %52 = getelementptr &(i32* %49)[i64 2];
    i32 %53 = add i32 %48, i32 34;
    store i32* %52 with i32 %53;
    i32* %54 = getelementptr &(i32* %49)[i64 3];
    i32 %55 = add i32 %48, i32 51;
    store i32* %54 with i32 %55;
    i32 %56 = add i32 %47, i32 4;
    i1 %57 = icmp sgt i32 %2, i32 %56;
    i32 %58 = add i32 %48, i32 68;
    cbr i1 %57(prob = 0.75), ^for.body2, ^for.body;
}
