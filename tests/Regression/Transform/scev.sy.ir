func @foo(i32* %a, i32 %n, i32 %k) -> void { NoMemoryRead NoRecurse } {
  ^entry:
    i1 %0 = icmp sgt i32 %n, i32 0;
    cbr i1 %0(prob = 0.992248), ^super.header, ^b;
  ^super.header:
    i32 %1 = add i32 %n, i32 -8;
    i1 %2 = icmp sgt i32 %n, i32 8;
    cbr i1 %2(prob = 0.941176), ^for.body, ^for.body1;
  ^b:
    ret;
  ^for.body:
    i32 %3 = phi [^super.header, i32 0] [^for.body, i32 %27];
    i32* %4 = getelementptr &(i32* %a)[i32 %3];
    i32 %5 = mul i32 %k, i32 %3;
    store i32* %4 with i32 %5;
    i32* %6 = getelementptr &(i32* %4)[i64 1];
    i32 %7 = add i32 %3, i32 1;
    i32 %8 = mul i32 %k, i32 %7;
    store i32* %6 with i32 %8;
    i32* %9 = getelementptr &(i32* %4)[i64 2];
    i32 %10 = add i32 %3, i32 2;
    i32 %11 = mul i32 %k, i32 %10;
    store i32* %9 with i32 %11;
    i32* %12 = getelementptr &(i32* %4)[i64 3];
    i32 %13 = add i32 %3, i32 3;
    i32 %14 = mul i32 %k, i32 %13;
    store i32* %12 with i32 %14;
    i32* %15 = getelementptr &(i32* %4)[i64 4];
    i32 %16 = add i32 %3, i32 4;
    i32 %17 = mul i32 %k, i32 %16;
    store i32* %15 with i32 %17;
    i32* %18 = getelementptr &(i32* %4)[i64 5];
    i32 %19 = add i32 %3, i32 5;
    i32 %20 = mul i32 %k, i32 %19;
    store i32* %18 with i32 %20;
    i32* %21 = getelementptr &(i32* %4)[i64 6];
    i32 %22 = add i32 %3, i32 6;
    i32 %23 = mul i32 %k, i32 %22;
    store i32* %21 with i32 %23;
    i32* %24 = getelementptr &(i32* %4)[i64 7];
    i32 %25 = add i32 %3, i32 7;
    i32 %26 = mul i32 %k, i32 %25;
    store i32* %24 with i32 %26;
    i32 %27 = add i32 %3, i32 8;
    i1 %28 = icmp sgt i32 %1, i32 %27;
    cbr i1 %28(prob = 0.941176), ^for.body, ^for.body1;
  ^for.body1 {scalar}:
    i32 %29 = phi [^super.header, i32 0] [^for.body, i32 %27] [^for.body1, i32 %32];
    i32* %30 = getelementptr &(i32* %a)[i32 %29];
    i32 %31 = mul i32 %k, i32 %29;
    store i32* %30 with i32 %31;
    i32 %32 = add i32 %29, i32 1;
    i1 %33 = icmp sgt i32 %n, i32 %32;
    cbr i1 %33(prob = 0.875), ^for.body1, ^b;
}
func @foo2(i32* %a, i32 %n) -> void { NoMemoryRead NoRecurse } {
  ^entry:
    i1 %0 = icmp sgt i32 %n, i32 0;
    cbr i1 %0(prob = 0.992248), ^super.header, ^b;
  ^super.header:
    i32 %1 = add i32 %n, i32 -8;
    i1 %2 = icmp sgt i32 %n, i32 8;
    cbr i1 %2(prob = 0.941176), ^for.body, ^for.body1;
  ^b:
    ret;
  ^for.body:
    i32 %3 = phi [^super.header, i32 210] [^for.body, i32 %64];
    i32 %4 = phi [^super.header, i32 280] [^for.body, i32 %63];
    i32 %5 = phi [^super.header, i32 80] [^for.body, i32 %62];
    i32 %6 = phi [^super.header, i32 150] [^for.body, i32 %60];
    i32 %7 = phi [^super.header, i32 100] [^for.body, i32 %59];
    i32 %8 = phi [^super.header, i32 60] [^for.body, i32 %58];
    i32 %9 = phi [^super.header, i32 30] [^for.body, i32 %57];
    i32 %10 = phi [^super.header, i32 0] [^for.body, i32 %55];
    i32 %11 = phi [^super.header, i32 10] [^for.body, i32 %61];
    i32 %12 = phi [^super.header, i32 6] [^for.body, i32 %54];
    i32 %13 = phi [^super.header, i32 0] [^for.body, i32 %52];
    i32* %14 = getelementptr &(i32* %a)[i32 %10];
    i32 %15 = add i32 %13, i32 7;
    store i32* %14 with i32 %15;
    i32 %16 = add i32 %12, i32 7;
    i32 %17 = add i32 %13, i32 %16;
    i32* %18 = getelementptr &(i32* %14)[i64 1];
    store i32* %18 with i32 %17;
    i32 %19 = mul i32 %12, i32 2;
    i32 %20 = add i32 %19, i32 7;
    i32 %21 = add i32 %11, i32 %20;
    i32 %22 = add i32 %13, i32 %21;
    i32* %23 = getelementptr &(i32* %14)[i64 2];
    store i32* %23 with i32 %22;
    i32 %24 = mul i32 %12, i32 3;
    i32 %25 = add i32 %24, i32 13;
    i32 %26 = add i32 %9, i32 %25;
    i32 %27 = add i32 %13, i32 %26;
    i32* %28 = getelementptr &(i32* %14)[i64 3];
    store i32* %28 with i32 %27;
    i32 %29 = mul i32 %12, i32 4;
    i32 %30 = add i32 %29, i32 31;
    i32 %31 = add i32 %8, i32 %30;
    i32 %32 = add i32 %13, i32 %31;
    i32* %33 = getelementptr &(i32* %14)[i64 4];
    store i32* %33 with i32 %32;
    i32 %34 = mul i32 %12, i32 5;
    i32 %35 = add i32 %34, i32 67;
    i32 %36 = add i32 %7, i32 %35;
    i32 %37 = add i32 %13, i32 %36;
    i32* %38 = getelementptr &(i32* %14)[i64 5];
    store i32* %38 with i32 %37;
    i32 %39 = mul i32 %12, i32 6;
    i32 %40 = add i32 %39, i32 127;
    i32 %41 = add i32 %6, i32 %40;
    i32 %42 = add i32 %13, i32 %41;
    i32* %43 = getelementptr &(i32* %14)[i64 6];
    store i32* %43 with i32 %42;
    i32 %44 = mul i32 %12, i32 7;
    i32 %45 = add i32 %44, i32 217;
    i32 %46 = add i32 %3, i32 %45;
    i32 %47 = add i32 %13, i32 %46;
    i32* %48 = getelementptr &(i32* %14)[i64 7];
    store i32* %48 with i32 %47;
    i32 %49 = mul i32 %12, i32 8;
    i32 %50 = add i32 %49, i32 336;
    i32 %51 = add i32 %4, i32 %50;
    i32 %52 = add i32 %13, i32 %51;
    i32 %53 = add i32 %5, i32 168;
    i32 %54 = add i32 %12, i32 %53;
    i32 %55 = add i32 %10, i32 8;
    i1 %56 = icmp sgt i32 %1, i32 %55;
    i32 %57 = add i32 %9, i32 144;
    i32 %58 = add i32 %8, i32 288;
    i32 %59 = add i32 %7, i32 480;
    i32 %60 = add i32 %6, i32 720;
    i32 %61 = add i32 %11, i32 48;
    i32 %62 = add i32 %5, i32 384;
    i32 %63 = add i32 %4, i32 1344;
    i32 %64 = add i32 %3, i32 1008;
    cbr i1 %56(prob = 0.941176), ^for.body, ^for.body1;
  ^for.body1 {scalar}:
    i32 %65 = phi [^super.header, i32 0] [^for.body, i32 %52] [^for.body1, i32 %74];
    i32 %66 = phi [^super.header, i32 6] [^for.body, i32 %54] [^for.body1, i32 %73];
    i32 %67 = phi [^super.header, i32 10] [^for.body, i32 %61] [^for.body1, i32 %75];
    i32 %68 = phi [^super.header, i32 0] [^for.body, i32 %55] [^for.body1, i32 %71];
    i32* %69 = getelementptr &(i32* %a)[i32 %68];
    i32 %70 = add i32 %65, i32 7;
    store i32* %69 with i32 %70;
    i32 %71 = add i32 %68, i32 1;
    i1 %72 = icmp sgt i32 %n, i32 %71;
    i32 %73 = add i32 %66, i32 %67;
    i32 %74 = add i32 %65, i32 %66;
    i32 %75 = add i32 %67, i32 6;
    cbr i1 %72(prob = 0.875), ^for.body1, ^b;
}
func @foo3(i32 %x) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ret i32 %x;
}
func @foo4(i32* %a, i32 %n) -> void { NoMemoryRead NoRecurse } {
  ^entry:
    i1 %0 = icmp sgt i32 %n, i32 0;
    cbr i1 %0(prob = 0.992248), ^super.header, ^b;
  ^super.header:
    i32 %1 = add i32 %n, i32 -8;
    i1 %2 = icmp sgt i32 %n, i32 8;
    cbr i1 %2(prob = 0.941176), ^for.body, ^for.body1;
  ^b:
    ret;
  ^for.body:
    i32 %3 = phi [^super.header, i32 0] [^for.body, i32 %20];
    i32 %4 = phi [^super.header, i32 0] [^for.body, i32 %22];
    i32* %5 = getelementptr &(i32* %a)[i32 %3];
    store i32* %5 with i32 %4;
    i32* %6 = getelementptr &(i32* %5)[i64 1];
    i32 %7 = add i32 %4, i32 17;
    store i32* %6 with i32 %7;
    i32* %8 = getelementptr &(i32* %5)[i64 2];
    i32 %9 = add i32 %4, i32 34;
    store i32* %8 with i32 %9;
    i32* %10 = getelementptr &(i32* %5)[i64 3];
    i32 %11 = add i32 %4, i32 51;
    store i32* %10 with i32 %11;
    i32* %12 = getelementptr &(i32* %5)[i64 4];
    i32 %13 = add i32 %4, i32 68;
    store i32* %12 with i32 %13;
    i32* %14 = getelementptr &(i32* %5)[i64 5];
    i32 %15 = add i32 %4, i32 85;
    store i32* %14 with i32 %15;
    i32* %16 = getelementptr &(i32* %5)[i64 6];
    i32 %17 = add i32 %4, i32 102;
    store i32* %16 with i32 %17;
    i32* %18 = getelementptr &(i32* %5)[i64 7];
    i32 %19 = add i32 %4, i32 119;
    store i32* %18 with i32 %19;
    i32 %20 = add i32 %3, i32 8;
    i1 %21 = icmp sgt i32 %1, i32 %20;
    i32 %22 = add i32 %4, i32 136;
    cbr i1 %21(prob = 0.941176), ^for.body, ^for.body1;
  ^for.body1 {scalar}:
    i32 %23 = phi [^super.header, i32 0] [^for.body, i32 %22] [^for.body1, i32 %28];
    i32 %24 = phi [^super.header, i32 0] [^for.body, i32 %20] [^for.body1, i32 %26];
    i32* %25 = getelementptr &(i32* %a)[i32 %24];
    store i32* %25 with i32 %23;
    i32 %26 = add i32 %24, i32 1;
    i1 %27 = icmp sgt i32 %n, i32 %26;
    i32 %28 = add i32 %23, i32 17;
    cbr i1 %27(prob = 0.875), ^for.body1, ^b;
}
