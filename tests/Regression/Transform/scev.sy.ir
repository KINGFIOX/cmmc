func @foo(i32* %a, i32 %n, i32 %k) -> void { NoMemoryRead NoRecurse } {
  ^entry:
    i1 %0 = icmp sgt i32 %n, i32 0;
    cbr i1 %0(prob = 0.984615), ^super.header, ^b;
  ^super.header:
    i1 %1 = icmp sgt i32 %n, i32 3;
    cbr i1 %1(prob = 0.941176), ^super.header1, ^scalar.header;
  ^b:
    ret;
  ^super.header1:
    i32 %2 = add i32 %n, i32 -3;
    i1 %3 = icmp sgt i32 %2, i32 15;
    i32 %4 = mul i32 %k, i32 2;
    i32 %5 = mul i32 %k, i32 3;
    i32 %6 = mul i32 %k, i32 4;
    cbr i1 %3(prob = 0.941176), ^prebody, ^scalar.header1;
  ^scalar.header:
    i32 %7 = phi [^super.header, i32 0] [^scalar.header1, i32 %25] [^for.body2, i32 %79];
    i32 %8 = phi [^super.header, i32 0] [^scalar.header1, i32 %26] [^for.body2, i32 %81];
    i1 %9 = icmp sgt i32 %n, i32 %7;
    cbr i1 %9(prob = 0.75), ^for.body, ^b;
  ^prebody:
    i32 %10 = add i32 %n, i32 -18;
    i32 %11 = mul i32 %k, i32 5;
    i32 %12 = mul i32 %k, i32 6;
    i32 %13 = mul i32 %k, i32 7;
    i32 %14 = mul i32 %k, i32 8;
    i32 %15 = mul i32 %k, i32 9;
    i32 %16 = mul i32 %k, i32 10;
    i32 %17 = mul i32 %k, i32 11;
    i32 %18 = mul i32 %k, i32 12;
    i32 %19 = mul i32 %k, i32 13;
    i32 %20 = mul i32 %k, i32 14;
    i32 %21 = mul i32 %k, i32 15;
    i32 %22 = mul i32 %k, i32 16;
    ubr ^for.body1;
  ^scalar.header1:
    i32 %23 = phi [^super.header1, i32 0] [^for.body1, i32 %69];
    i32 %24 = phi [^super.header1, i32 0] [^for.body1, i32 %67];
    i32 %25 = phi [^super.header1, i32 undef] [^for.body1, i32 %67];
    i32 %26 = phi [^super.header1, i32 undef] [^for.body1, i32 %69];
    i1 %27 = icmp sgt i32 %2, i32 %24;
    cbr i1 %27(prob = 0.75), ^for.body2, ^scalar.header;
  ^for.body {scalar}:
    i32 %28 = phi [^scalar.header, i32 %8] [^for.body, i32 %33];
    i32 %29 = phi [^scalar.header, i32 %7] [^for.body, i32 %31];
    i32* %30 = getelementptr &(i32* %a)[i32 %29];
    store i32* %30 with i32 %28;
    i32 %31 = add i32 %29, i32 1;
    i1 %32 = icmp sgt i32 %n, i32 %31;
    i32 %33 = add i32 %k, i32 %28;
    cbr i1 %32(prob = 0.75), ^for.body, ^b;
  ^for.body1:
    i32 %34 = phi [^prebody, i32 0] [^for.body1, i32 %69];
    i32 %35 = phi [^prebody, i32 0] [^for.body1, i32 %67];
    i32* %36 = getelementptr &(i32* %a)[i32 %35];
    store i32* %36 with i32 %34;
    i32* %37 = getelementptr &(i32* %36)[i64 1];
    i32 %38 = add i32 %k, i32 %34;
    store i32* %37 with i32 %38;
    i32* %39 = getelementptr &(i32* %36)[i64 2];
    i32 %40 = add i32 %4, i32 %34;
    store i32* %39 with i32 %40;
    i32* %41 = getelementptr &(i32* %36)[i64 3];
    i32 %42 = add i32 %5, i32 %34;
    store i32* %41 with i32 %42;
    i32* %43 = getelementptr &(i32* %36)[i64 4];
    i32 %44 = add i32 %6, i32 %34;
    store i32* %43 with i32 %44;
    i32* %45 = getelementptr &(i32* %36)[i64 5];
    i32 %46 = add i32 %11, i32 %34;
    store i32* %45 with i32 %46;
    i32* %47 = getelementptr &(i32* %36)[i64 6];
    i32 %48 = add i32 %12, i32 %34;
    store i32* %47 with i32 %48;
    i32* %49 = getelementptr &(i32* %36)[i64 7];
    i32 %50 = add i32 %13, i32 %34;
    store i32* %49 with i32 %50;
    i32* %51 = getelementptr &(i32* %36)[i64 8];
    i32 %52 = add i32 %14, i32 %34;
    store i32* %51 with i32 %52;
    i32* %53 = getelementptr &(i32* %36)[i64 9];
    i32 %54 = add i32 %15, i32 %34;
    store i32* %53 with i32 %54;
    i32* %55 = getelementptr &(i32* %36)[i64 10];
    i32 %56 = add i32 %16, i32 %34;
    store i32* %55 with i32 %56;
    i32* %57 = getelementptr &(i32* %36)[i64 11];
    i32 %58 = add i32 %17, i32 %34;
    store i32* %57 with i32 %58;
    i32* %59 = getelementptr &(i32* %36)[i64 12];
    i32 %60 = add i32 %18, i32 %34;
    store i32* %59 with i32 %60;
    i32* %61 = getelementptr &(i32* %36)[i64 13];
    i32 %62 = add i32 %19, i32 %34;
    store i32* %61 with i32 %62;
    i32* %63 = getelementptr &(i32* %36)[i64 14];
    i32 %64 = add i32 %20, i32 %34;
    store i32* %63 with i32 %64;
    i32* %65 = getelementptr &(i32* %36)[i64 15];
    i32 %66 = add i32 %21, i32 %34;
    store i32* %65 with i32 %66;
    i32 %67 = add i32 %35, i32 16;
    i1 %68 = icmp sgt i32 %10, i32 %67;
    i32 %69 = add i32 %22, i32 %34;
    cbr i1 %68(prob = 0.941176), ^for.body1, ^scalar.header1;
  ^for.body2 {scalar}:
    i32 %70 = phi [^scalar.header1, i32 %24] [^for.body2, i32 %79];
    i32 %71 = phi [^scalar.header1, i32 %23] [^for.body2, i32 %81];
    i32* %72 = getelementptr &(i32* %a)[i32 %70];
    store i32* %72 with i32 %71;
    i32* %73 = getelementptr &(i32* %72)[i64 1];
    i32 %74 = add i32 %k, i32 %71;
    store i32* %73 with i32 %74;
    i32* %75 = getelementptr &(i32* %72)[i64 2];
    i32 %76 = add i32 %4, i32 %71;
    store i32* %75 with i32 %76;
    i32* %77 = getelementptr &(i32* %72)[i64 3];
    i32 %78 = add i32 %5, i32 %71;
    store i32* %77 with i32 %78;
    i32 %79 = add i32 %70, i32 4;
    i1 %80 = icmp sgt i32 %2, i32 %79;
    i32 %81 = add i32 %6, i32 %71;
    cbr i1 %80(prob = 0.75), ^for.body2, ^scalar.header;
}
func @foo2(i32* %a, i32 %n) -> void { NoMemoryRead NoRecurse } {
  ^entry:
    i1 %0 = icmp sgt i32 %n, i32 0;
    cbr i1 %0(prob = 0.984615), ^super.header, ^b;
  ^super.header:
    i1 %1 = icmp sgt i32 %n, i32 3;
    cbr i1 %1(prob = 0.941176), ^super.header1, ^scalar.header;
  ^b:
    ret;
  ^super.header1:
    i32 %2 = add i32 %n, i32 -3;
    i1 %3 = icmp sgt i32 %2, i32 15;
    i32 %4 = add i32 %n, i32 -18;
    cbr i1 %3(prob = 0.941176), ^for.body, ^scalar.header1;
  ^scalar.header:
    i32 %5 = phi [^super.header, i32 0] [^scalar.header1, i32 %134] [^for.body2, i32 %175];
    i32 %6 = phi [^super.header, i32 10] [^scalar.header1, i32 %131] [^for.body2, i32 %177];
    i32 %7 = phi [^super.header, i32 6] [^scalar.header1, i32 %132] [^for.body2, i32 %174];
    i32 %8 = phi [^super.header, i32 0] [^scalar.header1, i32 %133] [^for.body2, i32 %171];
    i1 %9 = icmp sgt i32 %n, i32 %5;
    cbr i1 %9(prob = 0.75), ^for.body1, ^b;
  ^for.body:
    i32 %10 = phi [^super.header1, i32 1050] [^for.body, i32 %126];
    i32 %11 = phi [^super.header1, i32 1200] [^for.body, i32 %125];
    i32 %12 = phi [^super.header1, i32 160] [^for.body, i32 %124];
    i32 %13 = phi [^super.header1, i32 910] [^for.body, i32 %122];
    i32 %14 = phi [^super.header1, i32 780] [^for.body, i32 %121];
    i32 %15 = phi [^super.header1, i32 660] [^for.body, i32 %120];
    i32 %16 = phi [^super.header1, i32 550] [^for.body, i32 %119];
    i32 %17 = phi [^super.header1, i32 450] [^for.body, i32 %118];
    i32 %18 = phi [^super.header1, i32 360] [^for.body, i32 %117];
    i32 %19 = phi [^super.header1, i32 280] [^for.body, i32 %116];
    i32 %20 = phi [^super.header1, i32 210] [^for.body, i32 %115];
    i32 %21 = phi [^super.header1, i32 150] [^for.body, i32 %114];
    i32 %22 = phi [^super.header1, i32 100] [^for.body, i32 %113];
    i32 %23 = phi [^super.header1, i32 60] [^for.body, i32 %112];
    i32 %24 = phi [^super.header1, i32 30] [^for.body, i32 %111];
    i32 %25 = phi [^super.header1, i32 0] [^for.body, i32 %106];
    i32 %26 = phi [^super.header1, i32 6] [^for.body, i32 %108];
    i32 %27 = phi [^super.header1, i32 10] [^for.body, i32 %123];
    i32 %28 = phi [^super.header1, i32 0] [^for.body, i32 %109];
    i32* %29 = getelementptr &(i32* %a)[i32 %28];
    i32 %30 = add i32 %25, i32 7;
    store i32* %29 with i32 %30;
    i32 %31 = add i32 %26, i32 %30;
    i32* %32 = getelementptr &(i32* %29)[i64 1];
    store i32* %32 with i32 %31;
    i32 %33 = mul i32 %26, i32 2;
    i32 %34 = add i32 %33, i32 7;
    i32 %35 = add i32 %25, i32 %34;
    i32 %36 = add i32 %27, i32 %35;
    i32* %37 = getelementptr &(i32* %29)[i64 2];
    store i32* %37 with i32 %36;
    i32 %38 = mul i32 %26, i32 3;
    i32 %39 = add i32 %38, i32 13;
    i32 %40 = add i32 %24, i32 %39;
    i32 %41 = add i32 %25, i32 %40;
    i32* %42 = getelementptr &(i32* %29)[i64 3];
    store i32* %42 with i32 %41;
    i32 %43 = mul i32 %26, i32 4;
    i32 %44 = add i32 %43, i32 31;
    i32 %45 = add i32 %23, i32 %44;
    i32 %46 = add i32 %25, i32 %45;
    i32* %47 = getelementptr &(i32* %29)[i64 4];
    store i32* %47 with i32 %46;
    i32 %48 = mul i32 %26, i32 5;
    i32 %49 = add i32 %48, i32 67;
    i32 %50 = add i32 %22, i32 %49;
    i32 %51 = add i32 %25, i32 %50;
    i32* %52 = getelementptr &(i32* %29)[i64 5];
    store i32* %52 with i32 %51;
    i32 %53 = mul i32 %26, i32 6;
    i32 %54 = add i32 %53, i32 127;
    i32 %55 = add i32 %21, i32 %54;
    i32 %56 = add i32 %25, i32 %55;
    i32* %57 = getelementptr &(i32* %29)[i64 6];
    store i32* %57 with i32 %56;
    i32 %58 = mul i32 %26, i32 7;
    i32 %59 = add i32 %58, i32 217;
    i32 %60 = add i32 %20, i32 %59;
    i32 %61 = add i32 %25, i32 %60;
    i32* %62 = getelementptr &(i32* %29)[i64 7];
    store i32* %62 with i32 %61;
    i32 %63 = mul i32 %26, i32 8;
    i32 %64 = add i32 %63, i32 343;
    i32 %65 = add i32 %19, i32 %64;
    i32 %66 = add i32 %25, i32 %65;
    i32* %67 = getelementptr &(i32* %29)[i64 8];
    store i32* %67 with i32 %66;
    i32 %68 = mul i32 %26, i32 9;
    i32 %69 = add i32 %68, i32 511;
    i32 %70 = add i32 %18, i32 %69;
    i32 %71 = add i32 %25, i32 %70;
    i32* %72 = getelementptr &(i32* %29)[i64 9];
    store i32* %72 with i32 %71;
    i32 %73 = mul i32 %26, i32 10;
    i32 %74 = add i32 %73, i32 727;
    i32 %75 = add i32 %17, i32 %74;
    i32 %76 = add i32 %25, i32 %75;
    i32* %77 = getelementptr &(i32* %29)[i64 10];
    store i32* %77 with i32 %76;
    i32 %78 = mul i32 %26, i32 11;
    i32 %79 = add i32 %78, i32 997;
    i32 %80 = add i32 %16, i32 %79;
    i32 %81 = add i32 %25, i32 %80;
    i32* %82 = getelementptr &(i32* %29)[i64 11];
    store i32* %82 with i32 %81;
    i32 %83 = mul i32 %26, i32 12;
    i32 %84 = add i32 %83, i32 1327;
    i32 %85 = add i32 %15, i32 %84;
    i32 %86 = add i32 %25, i32 %85;
    i32* %87 = getelementptr &(i32* %29)[i64 12];
    store i32* %87 with i32 %86;
    i32 %88 = mul i32 %26, i32 13;
    i32 %89 = add i32 %88, i32 1723;
    i32 %90 = add i32 %14, i32 %89;
    i32 %91 = add i32 %25, i32 %90;
    i32* %92 = getelementptr &(i32* %29)[i64 13];
    store i32* %92 with i32 %91;
    i32 %93 = mul i32 %26, i32 14;
    i32 %94 = add i32 %93, i32 2191;
    i32 %95 = add i32 %13, i32 %94;
    i32 %96 = add i32 %25, i32 %95;
    i32* %97 = getelementptr &(i32* %29)[i64 14];
    store i32* %97 with i32 %96;
    i32 %98 = mul i32 %26, i32 15;
    i32 %99 = add i32 %98, i32 2737;
    i32 %100 = add i32 %10, i32 %99;
    i32 %101 = add i32 %25, i32 %100;
    i32* %102 = getelementptr &(i32* %29)[i64 15];
    store i32* %102 with i32 %101;
    i32 %103 = mul i32 %26, i32 16;
    i32 %104 = add i32 %103, i32 3360;
    i32 %105 = add i32 %11, i32 %104;
    i32 %106 = add i32 %25, i32 %105;
    i32 %107 = add i32 %12, i32 720;
    i32 %108 = add i32 %26, i32 %107;
    i32 %109 = add i32 %28, i32 16;
    i1 %110 = icmp sgt i32 %4, i32 %109;
    i32 %111 = add i32 %24, i32 288;
    i32 %112 = add i32 %23, i32 576;
    i32 %113 = add i32 %22, i32 960;
    i32 %114 = add i32 %21, i32 1440;
    i32 %115 = add i32 %20, i32 2016;
    i32 %116 = add i32 %19, i32 2688;
    i32 %117 = add i32 %18, i32 3456;
    i32 %118 = add i32 %17, i32 4320;
    i32 %119 = add i32 %16, i32 5280;
    i32 %120 = add i32 %15, i32 6336;
    i32 %121 = add i32 %14, i32 7488;
    i32 %122 = add i32 %13, i32 8736;
    i32 %123 = add i32 %27, i32 96;
    i32 %124 = add i32 %12, i32 1536;
    i32 %125 = add i32 %11, i32 11520;
    i32 %126 = add i32 %10, i32 10080;
    cbr i1 %110(prob = 0.941176), ^for.body, ^scalar.header1;
  ^scalar.header1:
    i32 %127 = phi [^super.header1, i32 0] [^for.body, i32 %106];
    i32 %128 = phi [^super.header1, i32 6] [^for.body, i32 %108];
    i32 %129 = phi [^super.header1, i32 10] [^for.body, i32 %123];
    i32 %130 = phi [^super.header1, i32 0] [^for.body, i32 %109];
    i32 %131 = phi [^super.header1, i32 undef] [^for.body, i32 %123];
    i32 %132 = phi [^super.header1, i32 undef] [^for.body, i32 %108];
    i32 %133 = phi [^super.header1, i32 undef] [^for.body, i32 %106];
    i32 %134 = phi [^super.header1, i32 undef] [^for.body, i32 %109];
    i1 %135 = icmp sgt i32 %2, i32 %130;
    cbr i1 %135(prob = 0.75), ^for.body2, ^scalar.header;
  ^for.body1 {scalar}:
    i32 %136 = phi [^scalar.header, i32 %8] [^for.body1, i32 %145];
    i32 %137 = phi [^scalar.header, i32 %7] [^for.body1, i32 %144];
    i32 %138 = phi [^scalar.header, i32 %6] [^for.body1, i32 %146];
    i32 %139 = phi [^scalar.header, i32 %5] [^for.body1, i32 %142];
    i32* %140 = getelementptr &(i32* %a)[i32 %139];
    i32 %141 = add i32 %136, i32 7;
    store i32* %140 with i32 %141;
    i32 %142 = add i32 %139, i32 1;
    i1 %143 = icmp sgt i32 %n, i32 %142;
    i32 %144 = add i32 %137, i32 %138;
    i32 %145 = add i32 %136, i32 %137;
    i32 %146 = add i32 %138, i32 6;
    cbr i1 %143(prob = 0.75), ^for.body1, ^b;
  ^for.body2 {scalar}:
    i32 %147 = phi [^scalar.header1, i32 %130] [^for.body2, i32 %175];
    i32 %148 = phi [^scalar.header1, i32 %129] [^for.body2, i32 %177];
    i32 %149 = phi [^scalar.header1, i32 %128] [^for.body2, i32 %174];
    i32 %150 = phi [^scalar.header1, i32 %127] [^for.body2, i32 %171];
    i32* %151 = getelementptr &(i32* %a)[i32 %147];
    i32 %152 = add i32 %150, i32 7;
    store i32* %151 with i32 %152;
    i32 %153 = add i32 %149, i32 7;
    i32 %154 = add i32 %150, i32 %153;
    i32* %155 = getelementptr &(i32* %151)[i64 1];
    store i32* %155 with i32 %154;
    i32 %156 = mul i32 %149, i32 2;
    i32 %157 = add i32 %156, i32 7;
    i32 %158 = add i32 %148, i32 %157;
    i32 %159 = add i32 %150, i32 %158;
    i32* %160 = getelementptr &(i32* %151)[i64 2];
    store i32* %160 with i32 %159;
    i32 %161 = mul i32 %148, i32 3;
    i32 %162 = add i32 %161, i32 13;
    i32 %163 = mul i32 %149, i32 3;
    i32 %164 = add i32 %162, i32 %163;
    i32 %165 = add i32 %150, i32 %164;
    i32* %166 = getelementptr &(i32* %151)[i64 3];
    store i32* %166 with i32 %165;
    i32 %167 = mul i32 %148, i32 6;
    i32 %168 = add i32 %167, i32 24;
    i32 %169 = mul i32 %149, i32 4;
    i32 %170 = add i32 %168, i32 %169;
    i32 %171 = add i32 %150, i32 %170;
    i32 %172 = mul i32 %148, i32 4;
    i32 %173 = add i32 %172, i32 36;
    i32 %174 = add i32 %149, i32 %173;
    i32 %175 = add i32 %147, i32 4;
    i1 %176 = icmp sgt i32 %2, i32 %175;
    i32 %177 = add i32 %148, i32 24;
    cbr i1 %176(prob = 0.75), ^for.body2, ^scalar.header;
}
func @foo3(i32 %x) -> i32 { NoMemoryRead NoMemoryWrite NoSideEffect Stateless NoRecurse } {
  ^entry:
    ret i32 %x;
}
func @foo4(i32* %a, i32 %n) -> void { NoMemoryRead NoRecurse } {
  ^entry:
    i1 %0 = icmp sgt i32 %n, i32 0;
    cbr i1 %0(prob = 0.984615), ^super.header, ^b;
  ^super.header:
    i1 %1 = icmp sgt i32 %n, i32 3;
    cbr i1 %1(prob = 0.941176), ^super.header1, ^scalar.header;
  ^b:
    ret;
  ^super.header1:
    i32 %2 = add i32 %n, i32 -3;
    i1 %3 = icmp sgt i32 %2, i32 15;
    i32 %4 = add i32 %n, i32 -18;
    cbr i1 %3(prob = 0.941176), ^for.body, ^scalar.header1;
  ^scalar.header:
    i32 %5 = phi [^super.header, i32 0] [^scalar.header1, i32 %47] [^for.body2, i32 %64];
    i32 %6 = phi [^super.header, i32 0] [^scalar.header1, i32 %46] [^for.body2, i32 %66];
    i1 %7 = icmp sgt i32 %n, i32 %5;
    cbr i1 %7(prob = 0.75), ^for.body1, ^b;
  ^for.body:
    i32 %8 = phi [^super.header1, i32 0] [^for.body, i32 %43];
    i32 %9 = phi [^super.header1, i32 0] [^for.body, i32 %41];
    i32* %10 = getelementptr &(i32* %a)[i32 %9];
    store i32* %10 with i32 %8;
    i32* %11 = getelementptr &(i32* %10)[i64 1];
    i32 %12 = add i32 %8, i32 17;
    store i32* %11 with i32 %12;
    i32* %13 = getelementptr &(i32* %10)[i64 2];
    i32 %14 = add i32 %8, i32 34;
    store i32* %13 with i32 %14;
    i32* %15 = getelementptr &(i32* %10)[i64 3];
    i32 %16 = add i32 %8, i32 51;
    store i32* %15 with i32 %16;
    i32* %17 = getelementptr &(i32* %10)[i64 4];
    i32 %18 = add i32 %8, i32 68;
    store i32* %17 with i32 %18;
    i32* %19 = getelementptr &(i32* %10)[i64 5];
    i32 %20 = add i32 %8, i32 85;
    store i32* %19 with i32 %20;
    i32* %21 = getelementptr &(i32* %10)[i64 6];
    i32 %22 = add i32 %8, i32 102;
    store i32* %21 with i32 %22;
    i32* %23 = getelementptr &(i32* %10)[i64 7];
    i32 %24 = add i32 %8, i32 119;
    store i32* %23 with i32 %24;
    i32* %25 = getelementptr &(i32* %10)[i64 8];
    i32 %26 = add i32 %8, i32 136;
    store i32* %25 with i32 %26;
    i32* %27 = getelementptr &(i32* %10)[i64 9];
    i32 %28 = add i32 %8, i32 153;
    store i32* %27 with i32 %28;
    i32* %29 = getelementptr &(i32* %10)[i64 10];
    i32 %30 = add i32 %8, i32 170;
    store i32* %29 with i32 %30;
    i32* %31 = getelementptr &(i32* %10)[i64 11];
    i32 %32 = add i32 %8, i32 187;
    store i32* %31 with i32 %32;
    i32* %33 = getelementptr &(i32* %10)[i64 12];
    i32 %34 = add i32 %8, i32 204;
    store i32* %33 with i32 %34;
    i32* %35 = getelementptr &(i32* %10)[i64 13];
    i32 %36 = add i32 %8, i32 221;
    store i32* %35 with i32 %36;
    i32* %37 = getelementptr &(i32* %10)[i64 14];
    i32 %38 = add i32 %8, i32 238;
    store i32* %37 with i32 %38;
    i32* %39 = getelementptr &(i32* %10)[i64 15];
    i32 %40 = add i32 %8, i32 255;
    store i32* %39 with i32 %40;
    i32 %41 = add i32 %9, i32 16;
    i1 %42 = icmp sgt i32 %4, i32 %41;
    i32 %43 = add i32 %8, i32 272;
    cbr i1 %42(prob = 0.941176), ^for.body, ^scalar.header1;
  ^scalar.header1:
    i32 %44 = phi [^super.header1, i32 0] [^for.body, i32 %43];
    i32 %45 = phi [^super.header1, i32 0] [^for.body, i32 %41];
    i32 %46 = phi [^super.header1, i32 undef] [^for.body, i32 %43];
    i32 %47 = phi [^super.header1, i32 undef] [^for.body, i32 %41];
    i1 %48 = icmp sgt i32 %2, i32 %45;
    cbr i1 %48(prob = 0.75), ^for.body2, ^scalar.header;
  ^for.body1 {scalar}:
    i32 %49 = phi [^scalar.header, i32 %6] [^for.body1, i32 %54];
    i32 %50 = phi [^scalar.header, i32 %5] [^for.body1, i32 %52];
    i32* %51 = getelementptr &(i32* %a)[i32 %50];
    store i32* %51 with i32 %49;
    i32 %52 = add i32 %50, i32 1;
    i1 %53 = icmp sgt i32 %n, i32 %52;
    i32 %54 = add i32 %49, i32 17;
    cbr i1 %53(prob = 0.75), ^for.body1, ^b;
  ^for.body2 {scalar}:
    i32 %55 = phi [^scalar.header1, i32 %45] [^for.body2, i32 %64];
    i32 %56 = phi [^scalar.header1, i32 %44] [^for.body2, i32 %66];
    i32* %57 = getelementptr &(i32* %a)[i32 %55];
    store i32* %57 with i32 %56;
    i32* %58 = getelementptr &(i32* %57)[i64 1];
    i32 %59 = add i32 %56, i32 17;
    store i32* %58 with i32 %59;
    i32* %60 = getelementptr &(i32* %57)[i64 2];
    i32 %61 = add i32 %56, i32 34;
    store i32* %60 with i32 %61;
    i32* %62 = getelementptr &(i32* %57)[i64 3];
    i32 %63 = add i32 %56, i32 51;
    store i32* %62 with i32 %63;
    i32 %64 = add i32 %55, i32 4;
    i1 %65 = icmp sgt i32 %2, i32 %64;
    i32 %66 = add i32 %56, i32 68;
    cbr i1 %65(prob = 0.75), ^for.body2, ^scalar.header;
}
