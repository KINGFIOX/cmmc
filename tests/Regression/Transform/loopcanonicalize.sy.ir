internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    ubr ^for.body;
  ^for.body:
    i32 %0 = phi [^entry, i32 0] [^for.body, i32 %51];
    i32 %1 = phi [^entry, i32 149590] [^for.body, i32 %50];
    i32 %2 = add i32 %0, i32 32;
    i32 %3 = mul i32 %2, i32 16;
    i32 %4 = mul i32 %0, i32 16;
    i32 %5 = add i32 %4, i32 912;
    i32 %6 = add i32 %3, i32 %5;
    i32 %7 = add i32 %0, i32 64;
    i32 %8 = mul i32 %7, i32 16;
    i32 %9 = add i32 %6, i32 %8;
    i32 %10 = add i32 %0, i32 96;
    i32 %11 = mul i32 %10, i32 16;
    i32 %12 = add i32 %9, i32 %11;
    i32 %13 = add i32 %0, i32 128;
    i32 %14 = mul i32 %13, i32 16;
    i32 %15 = add i32 %12, i32 %14;
    i32 %16 = add i32 %0, i32 160;
    i32 %17 = mul i32 %16, i32 16;
    i32 %18 = add i32 %15, i32 %17;
    i32 %19 = add i32 %0, i32 192;
    i32 %20 = mul i32 %19, i32 16;
    i32 %21 = add i32 %18, i32 %20;
    i32 %22 = add i32 %0, i32 224;
    i32 %23 = mul i32 %22, i32 16;
    i32 %24 = add i32 %21, i32 %23;
    i32 %25 = add i32 %1, i32 %24;
    i32 %26 = add i32 %0, i32 16;
    i32 %27 = mul i32 %26, i32 16;
    i32 %28 = add i32 %27, i32 1008;
    i32 %29 = add i32 %0, i32 48;
    i32 %30 = mul i32 %29, i32 16;
    i32 %31 = add i32 %28, i32 %30;
    i32 %32 = add i32 %0, i32 80;
    i32 %33 = mul i32 %32, i32 16;
    i32 %34 = add i32 %31, i32 %33;
    i32 %35 = add i32 %0, i32 112;
    i32 %36 = mul i32 %35, i32 16;
    i32 %37 = add i32 %34, i32 %36;
    i32 %38 = add i32 %0, i32 144;
    i32 %39 = mul i32 %38, i32 16;
    i32 %40 = add i32 %37, i32 %39;
    i32 %41 = add i32 %0, i32 176;
    i32 %42 = mul i32 %41, i32 16;
    i32 %43 = add i32 %40, i32 %42;
    i32 %44 = add i32 %0, i32 208;
    i32 %45 = mul i32 %44, i32 16;
    i32 %46 = add i32 %43, i32 %45;
    i32 %47 = add i32 %0, i32 240;
    i32 %48 = mul i32 %47, i32 16;
    i32 %49 = add i32 %46, i32 %48;
    i32 %50 = add i32 %25, i32 %49;
    i32 %51 = add i32 %0, i32 256;
    i1 %52 = icmp neq i32 %51, i32 768;
    cbr i1 %52(prob = 0.67), ^for.body, ^for.body1;
  ^for.body1:
    i32 %53 = mul i32 %51, i32 16;
    i32 %54 = add i32 %0, i32 1358;
    i32 %55 = add i32 %53, i32 %54;
    i32 %56 = add i32 %0, i32 288;
    i32 %57 = mul i32 %56, i32 16;
    i32 %58 = add i32 %55, i32 %57;
    i32 %59 = add i32 %0, i32 320;
    i32 %60 = mul i32 %59, i32 16;
    i32 %61 = add i32 %58, i32 %60;
    i32 %62 = add i32 %0, i32 352;
    i32 %63 = mul i32 %62, i32 16;
    i32 %64 = add i32 %61, i32 %63;
    i32 %65 = add i32 %0, i32 384;
    i32 %66 = mul i32 %65, i32 16;
    i32 %67 = add i32 %64, i32 %66;
    i32 %68 = add i32 %0, i32 416;
    i32 %69 = mul i32 %68, i32 16;
    i32 %70 = add i32 %67, i32 %69;
    i32 %71 = add i32 %0, i32 448;
    i32 %72 = mul i32 %71, i32 16;
    i32 %73 = add i32 %70, i32 %72;
    i32 %74 = add i32 %0, i32 464;
    i32 %75 = mul i32 %74, i32 7;
    i32 %76 = add i32 %73, i32 %75;
    i32 %77 = add i32 %0, i32 272;
    i32 %78 = mul i32 %77, i32 16;
    i32 %79 = add i32 %50, i32 942;
    i32 %80 = add i32 %78, i32 %79;
    i32 %81 = add i32 %0, i32 304;
    i32 %82 = mul i32 %81, i32 16;
    i32 %83 = add i32 %80, i32 %82;
    i32 %84 = add i32 %0, i32 336;
    i32 %85 = mul i32 %84, i32 16;
    i32 %86 = add i32 %83, i32 %85;
    i32 %87 = add i32 %0, i32 368;
    i32 %88 = mul i32 %87, i32 16;
    i32 %89 = add i32 %86, i32 %88;
    i32 %90 = add i32 %0, i32 400;
    i32 %91 = mul i32 %90, i32 16;
    i32 %92 = add i32 %89, i32 %91;
    i32 %93 = add i32 %0, i32 432;
    i32 %94 = mul i32 %93, i32 16;
    i32 %95 = add i32 %92, i32 %94;
    i32 %96 = mul i32 %74, i32 16;
    i32 %97 = add i32 %95, i32 %96;
    i32 %98 = add i32 %76, i32 %97;
    ubr ^for.body2;
  ^for.body2:
    i32 %99 = phi [^for.body1, i32 0] [^for.body2, i32 %150];
    i32 %100 = phi [^for.body1, i32 %98] [^for.body2, i32 %149];
    i32 %101 = add i32 %99, i32 32;
    i32 %102 = mul i32 %101, i32 16;
    i32 %103 = mul i32 %99, i32 16;
    i32 %104 = add i32 %103, i32 912;
    i32 %105 = add i32 %102, i32 %104;
    i32 %106 = add i32 %99, i32 64;
    i32 %107 = mul i32 %106, i32 16;
    i32 %108 = add i32 %105, i32 %107;
    i32 %109 = add i32 %99, i32 96;
    i32 %110 = mul i32 %109, i32 16;
    i32 %111 = add i32 %108, i32 %110;
    i32 %112 = add i32 %99, i32 128;
    i32 %113 = mul i32 %112, i32 16;
    i32 %114 = add i32 %111, i32 %113;
    i32 %115 = add i32 %99, i32 160;
    i32 %116 = mul i32 %115, i32 16;
    i32 %117 = add i32 %114, i32 %116;
    i32 %118 = add i32 %99, i32 192;
    i32 %119 = mul i32 %118, i32 16;
    i32 %120 = add i32 %117, i32 %119;
    i32 %121 = add i32 %99, i32 224;
    i32 %122 = mul i32 %121, i32 16;
    i32 %123 = add i32 %120, i32 %122;
    i32 %124 = add i32 %100, i32 %123;
    i32 %125 = add i32 %99, i32 16;
    i32 %126 = mul i32 %125, i32 16;
    i32 %127 = add i32 %126, i32 1008;
    i32 %128 = add i32 %99, i32 48;
    i32 %129 = mul i32 %128, i32 16;
    i32 %130 = add i32 %127, i32 %129;
    i32 %131 = add i32 %99, i32 80;
    i32 %132 = mul i32 %131, i32 16;
    i32 %133 = add i32 %130, i32 %132;
    i32 %134 = add i32 %99, i32 112;
    i32 %135 = mul i32 %134, i32 16;
    i32 %136 = add i32 %133, i32 %135;
    i32 %137 = add i32 %99, i32 144;
    i32 %138 = mul i32 %137, i32 16;
    i32 %139 = add i32 %136, i32 %138;
    i32 %140 = add i32 %99, i32 176;
    i32 %141 = mul i32 %140, i32 16;
    i32 %142 = add i32 %139, i32 %141;
    i32 %143 = add i32 %99, i32 208;
    i32 %144 = mul i32 %143, i32 16;
    i32 %145 = add i32 %142, i32 %144;
    i32 %146 = add i32 %99, i32 240;
    i32 %147 = mul i32 %146, i32 16;
    i32 %148 = add i32 %145, i32 %147;
    i32 %149 = add i32 %124, i32 %148;
    i32 %150 = add i32 %99, i32 256;
    i1 %151 = icmp slt i32 %150, i32 768;
    cbr i1 %151(prob = 0.67), ^for.body2, ^for.body3;
  ^for.body3:
    i32 %152 = call () -> i32 @getint();
    i1 %153 = icmp sgt i32 %152, i32 0;
    i32 %154 = mul i32 %150, i32 16;
    i32 %155 = add i32 %99, i32 1362;
    i32 %156 = add i32 %154, i32 %155;
    i32 %157 = add i32 %99, i32 288;
    i32 %158 = mul i32 %157, i32 16;
    i32 %159 = add i32 %156, i32 %158;
    i32 %160 = add i32 %99, i32 320;
    i32 %161 = mul i32 %160, i32 16;
    i32 %162 = add i32 %159, i32 %161;
    i32 %163 = add i32 %99, i32 352;
    i32 %164 = mul i32 %163, i32 16;
    i32 %165 = add i32 %162, i32 %164;
    i32 %166 = add i32 %99, i32 384;
    i32 %167 = mul i32 %166, i32 16;
    i32 %168 = add i32 %165, i32 %167;
    i32 %169 = add i32 %99, i32 416;
    i32 %170 = mul i32 %169, i32 16;
    i32 %171 = add i32 %168, i32 %170;
    i32 %172 = add i32 %99, i32 448;
    i32 %173 = mul i32 %172, i32 16;
    i32 %174 = add i32 %171, i32 %173;
    i32 %175 = add i32 %99, i32 464;
    i32 %176 = mul i32 %175, i32 8;
    i32 %177 = add i32 %174, i32 %176;
    i32 %178 = add i32 %99, i32 272;
    i32 %179 = mul i32 %178, i32 16;
    i32 %180 = add i32 %149, i32 962;
    i32 %181 = add i32 %179, i32 %180;
    i32 %182 = add i32 %99, i32 304;
    i32 %183 = mul i32 %182, i32 16;
    i32 %184 = add i32 %181, i32 %183;
    i32 %185 = add i32 %99, i32 336;
    i32 %186 = mul i32 %185, i32 16;
    i32 %187 = add i32 %184, i32 %186;
    i32 %188 = add i32 %99, i32 368;
    i32 %189 = mul i32 %188, i32 16;
    i32 %190 = add i32 %187, i32 %189;
    i32 %191 = add i32 %99, i32 400;
    i32 %192 = mul i32 %191, i32 16;
    i32 %193 = add i32 %190, i32 %192;
    i32 %194 = add i32 %99, i32 432;
    i32 %195 = mul i32 %194, i32 16;
    i32 %196 = add i32 %193, i32 %195;
    i32 %197 = mul i32 %175, i32 16;
    i32 %198 = add i32 %196, i32 %197;
    i32 %199 = add i32 %177, i32 %198;
    cbr i1 %153(prob = 0.97), ^super.header, ^b;
  ^super.header:
    i32 %200 = phi [^for.body3, i32 0] [^for.body4, i32 %202];
    i32 %201 = phi [^for.body3, i32 %199] [^for.body4, i32 %208];
    i32 %202 = add i32 %200, i32 4;
    i1 %203 = icmp sgt i32 %152, i32 %202;
    cbr i1 %203(prob = 0.89), ^for.body4, ^for.body5;
  ^b:
    i32 %204 = phi [^for.body3, i32 %199] [^for.body5, i32 %213];
    ret i32 %204;
  ^for.body4:
    i32 %205 = mul i32 %200, i32 4;
    i32 %206 = add i32 %205, i32 2;
    i32 %207 = add i32 %201, i32 4;
    i32 %208 = add i32 %206, i32 %207;
    ubr ^super.header;
  ^for.body5:
    i32 %209 = phi [^super.header, i32 %200] [^for.body5, i32 %211];
    i32 %210 = phi [^super.header, i32 %201] [^for.body5, i32 %213];
    i32 %211 = add i32 %209, i32 1;
    i1 %212 = icmp sgt i32 %152, i32 %211;
    i32 %213 = add i32 %209, i32 %210;
    cbr i1 %212(prob = 0.75), ^for.body5, ^b;
}
