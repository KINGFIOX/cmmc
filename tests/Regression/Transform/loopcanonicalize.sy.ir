internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    cbr i1 %1(prob = 0.97), ^super.header, ^b;
  ^super.header:
    i1 %2 = icmp sgt i32 %0, i32 4;
    cbr i1 %2(prob = 0.89), ^super.header1, ^for.body;
  ^b:
    i32 %3 = phi [^entry, i32 1149590] [^for.body, i32 %10];
    ret i32 %3;
  ^super.header1:
    i32 %4 = add i32 %0, i32 -4;
    i1 %5 = icmp sgt i32 %4, i32 16;
    cbr i1 %5(prob = 0.89), ^super.header2, ^for.body1;
  ^for.body {scalar}:
    i32 %6 = phi [^super.header, i32 0] [^for.body, i32 %8] [^for.body1, i32 %18];
    i32 %7 = phi [^super.header, i32 1149590] [^for.body, i32 %10] [^for.body1, i32 %17];
    i32 %8 = add i32 %6, i32 1;
    i1 %9 = icmp sgt i32 %0, i32 %8;
    i32 %10 = add i32 %6, i32 %7;
    cbr i1 %9(prob = 0.75), ^for.body, ^b;
  ^super.header2:
    i32 %11 = add i32 %0, i32 -20;
    i1 %12 = icmp sgt i32 %11, i32 64;
    cbr i1 %12(prob = 0.89), ^super.header3, ^for.body2;
  ^for.body1 {scalar}:
    i32 %13 = phi [^super.header1, i32 1149590] [^for.body1, i32 %17] [^for.body2, i32 %26];
    i32 %14 = phi [^super.header1, i32 0] [^for.body1, i32 %18] [^for.body2, i32 %27];
    i32 %15 = mul i32 %14, i32 4;
    i32 %16 = add i32 %15, i32 6;
    i32 %17 = add i32 %13, i32 %16;
    i32 %18 = add i32 %14, i32 4;
    i1 %19 = icmp sgt i32 %4, i32 %18;
    cbr i1 %19(prob = 0.75), ^for.body1, ^for.body;
  ^super.header3:
    i32 %20 = add i32 %0, i32 -84;
    i1 %21 = icmp sgt i32 %20, i32 256;
    cbr i1 %21(prob = 0.89), ^super.header4, ^for.body3;
  ^for.body2 {scalar}:
    i32 %22 = phi [^super.header2, i32 0] [^for.body2, i32 %27] [^for.body3, i32 %37];
    i32 %23 = phi [^super.header2, i32 1149590] [^for.body2, i32 %26] [^for.body3, i32 %36];
    i32 %24 = mul i32 %22, i32 16;
    i32 %25 = add i32 %24, i32 120;
    i32 %26 = add i32 %23, i32 %25;
    i32 %27 = add i32 %22, i32 16;
    i1 %28 = icmp sgt i32 %11, i32 %27;
    cbr i1 %28(prob = 0.75), ^for.body2, ^for.body1;
  ^super.header4:
    i32 %29 = add i32 %0, i32 -340;
    i1 %30 = icmp sgt i32 %29, i32 1024;
    i32 %31 = add i32 %0, i32 -1364;
    cbr i1 %30(prob = 0.89), ^for.body4, ^for.body5;
  ^for.body3 {scalar}:
    i32 %32 = phi [^super.header3, i32 0] [^for.body3, i32 %39] [^for.body5, i32 %91];
    i32 %33 = phi [^super.header3, i32 1149590] [^for.body3, i32 %36] [^for.body5, i32 %88];
    i32 %34 = phi [^super.header3, i32 0] [^for.body3, i32 %37] [^for.body5, i32 %89];
    i32 %35 = add i32 %32, i32 2016;
    i32 %36 = add i32 %33, i32 %35;
    i32 %37 = add i32 %34, i32 64;
    i1 %38 = icmp sgt i32 %20, i32 %37;
    i32 %39 = add i32 %32, i32 4096;
    cbr i1 %38(prob = 0.75), ^for.body3, ^for.body2;
  ^for.body4:
    i32 %40 = phi [^super.header4, i32 0] [^for.body4, i32 %77];
    i32 %41 = phi [^super.header4, i32 1149590] [^for.body4, i32 %74];
    i32 %42 = phi [^super.header4, i32 0] [^for.body4, i32 %75];
    i32 %43 = add i32 %40, i32 2016;
    i32 %44 = add i32 %41, i32 %43;
    i32 %45 = add i32 %40, i32 6112;
    i32 %46 = add i32 %44, i32 %45;
    i32 %47 = add i32 %40, i32 10208;
    i32 %48 = add i32 %46, i32 %47;
    i32 %49 = add i32 %40, i32 14304;
    i32 %50 = add i32 %48, i32 %49;
    i32 %51 = add i32 %40, i32 18400;
    i32 %52 = add i32 %50, i32 %51;
    i32 %53 = add i32 %40, i32 22496;
    i32 %54 = add i32 %52, i32 %53;
    i32 %55 = add i32 %40, i32 26592;
    i32 %56 = add i32 %54, i32 %55;
    i32 %57 = add i32 %40, i32 30688;
    i32 %58 = add i32 %56, i32 %57;
    i32 %59 = add i32 %40, i32 34784;
    i32 %60 = add i32 %58, i32 %59;
    i32 %61 = add i32 %40, i32 38880;
    i32 %62 = add i32 %60, i32 %61;
    i32 %63 = add i32 %40, i32 42976;
    i32 %64 = add i32 %62, i32 %63;
    i32 %65 = add i32 %40, i32 47072;
    i32 %66 = add i32 %64, i32 %65;
    i32 %67 = add i32 %40, i32 51168;
    i32 %68 = add i32 %66, i32 %67;
    i32 %69 = add i32 %40, i32 55264;
    i32 %70 = add i32 %68, i32 %69;
    i32 %71 = add i32 %40, i32 59360;
    i32 %72 = add i32 %70, i32 %71;
    i32 %73 = add i32 %40, i32 63456;
    i32 %74 = add i32 %72, i32 %73;
    i32 %75 = add i32 %42, i32 1024;
    i1 %76 = icmp sgt i32 %31, i32 %75;
    i32 %77 = add i32 %40, i32 65536;
    cbr i1 %76(prob = 0.89), ^for.body4, ^for.body5;
  ^for.body5 {scalar}:
    i32 %78 = phi [^super.header4, i32 0] [^for.body4, i32 %75] [^for.body5, i32 %89];
    i32 %79 = phi [^super.header4, i32 1149590] [^for.body4, i32 %74] [^for.body5, i32 %88];
    i32 %80 = phi [^super.header4, i32 0] [^for.body4, i32 %77] [^for.body5, i32 %91];
    i32 %81 = add i32 %80, i32 2016;
    i32 %82 = add i32 %79, i32 %81;
    i32 %83 = add i32 %80, i32 6112;
    i32 %84 = add i32 %82, i32 %83;
    i32 %85 = add i32 %80, i32 10208;
    i32 %86 = add i32 %84, i32 %85;
    i32 %87 = add i32 %80, i32 14304;
    i32 %88 = add i32 %86, i32 %87;
    i32 %89 = add i32 %78, i32 256;
    i1 %90 = icmp sgt i32 %29, i32 %89;
    i32 %91 = add i32 %80, i32 16384;
    cbr i1 %90(prob = 0.75), ^for.body5, ^for.body3;
}
