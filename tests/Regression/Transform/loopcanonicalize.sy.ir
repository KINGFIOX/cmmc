internal func @getint() -> i32 { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    i32 %0 = call () -> i32 @getint();
    i1 %1 = icmp sgt i32 %0, i32 0;
    cbr i1 %1(prob = 0.984615), ^super.header, ^b;
  ^super.header:
    i1 %2 = icmp sgt i32 %0, i32 3;
    cbr i1 %2(prob = 0.941176), ^super.header1, ^scalar.header;
  ^b:
    i32 %3 = phi [^entry, i32 1149590] [^scalar.header, i32 %8] [^for.body, i32 %22];
    ret i32 %3;
  ^super.header1:
    i32 %4 = add i32 %0, i32 -3;
    i1 %5 = icmp sgt i32 %4, i32 15;
    cbr i1 %5(prob = 0.941176), ^super.header2, ^scalar.header1;
  ^scalar.header:
    i32 %6 = phi [^super.header, i32 1149590] [^scalar.final, i32 %30];
    i32 %7 = phi [^super.header, i32 0] [^scalar.final, i32 %31];
    i32 %8 = phi [^super.header, i32 undef] [^scalar.final, i32 %30];
    i1 %9 = icmp sgt i32 %0, i32 %7;
    cbr i1 %9(prob = 0.75), ^for.body, ^b;
  ^super.header2:
    i32 %10 = add i32 %0, i32 -18;
    i1 %11 = icmp sgt i32 %10, i32 63;
    i32 %12 = add i32 %0, i32 -81;
    cbr i1 %11(prob = 0.941176), ^for.body1, ^scalar.header2;
  ^scalar.header1:
    i32 %13 = phi [^super.header1, i32 0] [^scalar.final1, i32 %45];
    i32 %14 = phi [^super.header1, i32 1149590] [^scalar.final1, i32 %44];
    i32 %15 = phi [^super.header1, i32 undef] [^scalar.final1, i32 %44];
    i32 %16 = phi [^super.header1, i32 undef] [^scalar.final1, i32 %45];
    i1 %17 = icmp sgt i32 %4, i32 %13;
    cbr i1 %17(prob = 0.75), ^for.body2, ^scalar.final;
  ^for.body {scalar}:
    i32 %18 = phi [^scalar.header, i32 %7] [^for.body, i32 %20];
    i32 %19 = phi [^scalar.header, i32 %6] [^for.body, i32 %22];
    i32 %20 = add i32 %18, i32 1;
    i1 %21 = icmp sgt i32 %0, i32 %20;
    i32 %22 = add i32 %18, i32 %19;
    cbr i1 %21(prob = 0.75), ^for.body, ^b;
  ^for.body1:
    i32 %23 = phi [^super.header2, i32 1149590] [^for.body1, i32 %27];
    i32 %24 = phi [^super.header2, i32 0] [^for.body1, i32 %28];
    i32 %25 = mul i32 %24, i32 64;
    i32 %26 = add i32 %25, i32 2016;
    i32 %27 = add i32 %23, i32 %26;
    i32 %28 = add i32 %24, i32 64;
    i1 %29 = icmp sgt i32 %12, i32 %28;
    cbr i1 %29(prob = 0.941176), ^for.body1, ^scalar.header2;
  ^scalar.final:
    i32 %30 = phi [^scalar.header1, i32 %15] [^for.body2, i32 %41];
    i32 %31 = phi [^scalar.header1, i32 %16] [^for.body2, i32 %42];
    ubr ^scalar.header;
  ^scalar.header2:
    i32 %32 = phi [^super.header2, i32 1149590] [^for.body1, i32 %27];
    i32 %33 = phi [^super.header2, i32 0] [^for.body1, i32 %28];
    i32 %34 = phi [^super.header2, i32 undef] [^for.body1, i32 %27];
    i32 %35 = phi [^super.header2, i32 undef] [^for.body1, i32 %28];
    i1 %36 = icmp sgt i32 %10, i32 %33;
    cbr i1 %36(prob = 0.75), ^for.body3, ^scalar.final1;
  ^for.body2 {scalar}:
    i32 %37 = phi [^scalar.header1, i32 %14] [^for.body2, i32 %41];
    i32 %38 = phi [^scalar.header1, i32 %13] [^for.body2, i32 %42];
    i32 %39 = mul i32 %38, i32 4;
    i32 %40 = add i32 %39, i32 6;
    i32 %41 = add i32 %37, i32 %40;
    i32 %42 = add i32 %38, i32 4;
    i1 %43 = icmp sgt i32 %4, i32 %42;
    cbr i1 %43(prob = 0.75), ^for.body2, ^scalar.final;
  ^scalar.final1:
    i32 %44 = phi [^scalar.header2, i32 %34] [^for.body3, i32 %50];
    i32 %45 = phi [^scalar.header2, i32 %35] [^for.body3, i32 %51];
    ubr ^scalar.header1;
  ^for.body3 {scalar}:
    i32 %46 = phi [^scalar.header2, i32 %33] [^for.body3, i32 %51];
    i32 %47 = phi [^scalar.header2, i32 %32] [^for.body3, i32 %50];
    i32 %48 = mul i32 %46, i32 16;
    i32 %49 = add i32 %48, i32 120;
    i32 %50 = add i32 %47, i32 %49;
    i32 %51 = add i32 %46, i32 16;
    i1 %52 = icmp sgt i32 %10, i32 %51;
    cbr i1 %52(prob = 0.75), ^for.body3, ^scalar.final1;
}
