func @reduce_sum2d([1024 * [1024 * i32]]* %A, i32 %n, i32 %m) -> i32 { NoMemoryWrite NoSideEffect NoRecurse } {
  ^entry:
    i32 %0 = add i32 %m, i32 -3;
    i1 %1 = icmp sgt i32 %0, i32 15;
    i1 %2 = icmp sgt i32 %n, i32 0;
    i1 %3 = icmp sgt i32 %m, i32 0;
    i1 %4 = icmp sgt i32 %m, i32 3;
    i32 %5 = add i32 %m, i32 -18;
    cbr i1 %2(prob = 0.984615), ^for.body, ^b;
  ^for.body:
    i32 %6 = phi [^entry, i32 0] [^for.iteration, i32 %11];
    i32 %7 = phi [^entry, i32 0] [^for.iteration, i32 %10];
    cbr i1 %3(prob = 0.984615), ^prebody, ^for.iteration;
  ^b:
    i32 %8 = phi [^entry, i32 0] [^for.iteration, i32 %10];
    ret i32 %8;
  ^prebody:
    [1024 * i32]* %9 = getelementptr &([1024 * [1024 * i32]]* %A)[i64 0][i32 %6];
    cbr i1 %4(prob = 0.941176), ^super.header, ^scalar.header;
  ^for.iteration:
    i32 %10 = phi [^for.body, i32 %7] [^scalar.header, i32 %15] [^for.body2, i32 %78];
    i32 %11 = add i32 %6, i32 1;
    i1 %12 = icmp sgt i32 %n, i32 %11;
    cbr i1 %12(prob = 0.984615), ^for.body, ^b;
  ^super.header:
    cbr i1 %1(prob = 0.941176), ^for.body1, ^scalar.header1;
  ^scalar.header:
    i32 %13 = phi [^prebody, i32 %7] [^scalar.final, i32 %81];
    i32 %14 = phi [^prebody, i32 0] [^scalar.final, i32 %82];
    i32 %15 = phi [^prebody, i32 undef] [^scalar.final, i32 %81];
    i1 %16 = icmp sgt i32 %m, i32 %14;
    cbr i1 %16(prob = 0.75), ^for.body2, ^for.iteration;
  ^for.body1:
    i32 %17 = phi [^super.header, i32 0] [^for.body1, i32 %67];
    i32 %18 = phi [^super.header, i32 %7] [^for.body1, i32 %66];
    i32* %19 = getelementptr &([1024 * i32]* %9)[i64 0][i32 %17];
    i32 %20 = load i32* %19;
    i32 %21 = add i32 %18, i32 %20;
    i32* %22 = getelementptr &(i32* %19)[i64 1];
    i32 %23 = load i32* %22;
    i32 %24 = add i32 %21, i32 %23;
    i32* %25 = getelementptr &(i32* %19)[i64 2];
    i32 %26 = load i32* %25;
    i32 %27 = add i32 %24, i32 %26;
    i32* %28 = getelementptr &(i32* %19)[i64 3];
    i32 %29 = load i32* %28;
    i32 %30 = add i32 %27, i32 %29;
    i32* %31 = getelementptr &(i32* %19)[i64 4];
    i32 %32 = load i32* %31;
    i32 %33 = add i32 %30, i32 %32;
    i32* %34 = getelementptr &(i32* %19)[i64 5];
    i32 %35 = load i32* %34;
    i32 %36 = add i32 %33, i32 %35;
    i32* %37 = getelementptr &(i32* %19)[i64 6];
    i32 %38 = load i32* %37;
    i32 %39 = add i32 %36, i32 %38;
    i32* %40 = getelementptr &(i32* %19)[i64 7];
    i32 %41 = load i32* %40;
    i32 %42 = add i32 %39, i32 %41;
    i32* %43 = getelementptr &(i32* %19)[i64 8];
    i32 %44 = load i32* %43;
    i32 %45 = add i32 %42, i32 %44;
    i32* %46 = getelementptr &(i32* %19)[i64 9];
    i32 %47 = load i32* %46;
    i32 %48 = add i32 %45, i32 %47;
    i32* %49 = getelementptr &(i32* %19)[i64 10];
    i32 %50 = load i32* %49;
    i32 %51 = add i32 %48, i32 %50;
    i32* %52 = getelementptr &(i32* %19)[i64 11];
    i32 %53 = load i32* %52;
    i32 %54 = add i32 %51, i32 %53;
    i32* %55 = getelementptr &(i32* %19)[i64 12];
    i32 %56 = load i32* %55;
    i32 %57 = add i32 %54, i32 %56;
    i32* %58 = getelementptr &(i32* %19)[i64 13];
    i32 %59 = load i32* %58;
    i32 %60 = add i32 %57, i32 %59;
    i32* %61 = getelementptr &(i32* %19)[i64 14];
    i32 %62 = load i32* %61;
    i32 %63 = add i32 %60, i32 %62;
    i32* %64 = getelementptr &(i32* %19)[i64 15];
    i32 %65 = load i32* %64;
    i32 %66 = add i32 %63, i32 %65;
    i32 %67 = add i32 %17, i32 16;
    i1 %68 = icmp sgt i32 %5, i32 %67;
    cbr i1 %68(prob = 0.941176), ^for.body1, ^scalar.header1;
  ^scalar.header1:
    i32 %69 = phi [^super.header, i32 0] [^for.body1, i32 %67];
    i32 %70 = phi [^super.header, i32 %7] [^for.body1, i32 %66];
    i32 %71 = phi [^super.header, i32 undef] [^for.body1, i32 %66];
    i32 %72 = phi [^super.header, i32 undef] [^for.body1, i32 %67];
    i1 %73 = icmp sgt i32 %0, i32 %69;
    cbr i1 %73(prob = 0.75), ^for.body3, ^scalar.final;
  ^for.body2 {scalar}:
    i32 %74 = phi [^scalar.header, i32 %14] [^for.body2, i32 %79];
    i32 %75 = phi [^scalar.header, i32 %13] [^for.body2, i32 %78];
    i32* %76 = getelementptr &([1024 * i32]* %9)[i64 0][i32 %74];
    i32 %77 = load i32* %76;
    i32 %78 = add i32 %75, i32 %77;
    i32 %79 = add i32 %74, i32 1;
    i1 %80 = icmp sgt i32 %m, i32 %79;
    cbr i1 %80(prob = 0.75), ^for.body2, ^for.iteration;
  ^scalar.final:
    i32 %81 = phi [^scalar.header1, i32 %71] [^for.body3, i32 %96];
    i32 %82 = phi [^scalar.header1, i32 %72] [^for.body3, i32 %97];
    ubr ^scalar.header;
  ^for.body3 {scalar}:
    i32 %83 = phi [^scalar.header1, i32 %70] [^for.body3, i32 %96];
    i32 %84 = phi [^scalar.header1, i32 %69] [^for.body3, i32 %97];
    i32* %85 = getelementptr &([1024 * i32]* %9)[i64 0][i32 %84];
    i32 %86 = load i32* %85;
    i32 %87 = add i32 %83, i32 %86;
    i32* %88 = getelementptr &(i32* %85)[i64 1];
    i32 %89 = load i32* %88;
    i32 %90 = add i32 %87, i32 %89;
    i32* %91 = getelementptr &(i32* %85)[i64 2];
    i32 %92 = load i32* %91;
    i32 %93 = add i32 %90, i32 %92;
    i32* %94 = getelementptr &(i32* %85)[i64 3];
    i32 %95 = load i32* %94;
    i32 %96 = add i32 %93, i32 %95;
    i32 %97 = add i32 %84, i32 4;
    i1 %98 = icmp sgt i32 %0, i32 %97;
    cbr i1 %98(prob = 0.75), ^for.body3, ^scalar.final;
}
func @memset_2d([1024 * [1024 * i32]]* %A, i32 %n, i32 %m) -> void { NoMemoryRead NoRecurse } {
  ^entry:
    i32 %0 = add i32 %m, i32 -3;
    i1 %1 = icmp sgt i32 %0, i32 15;
    i1 %2 = icmp sgt i32 %n, i32 0;
    i1 %3 = icmp sgt i32 %m, i32 0;
    i1 %4 = icmp sgt i32 %m, i32 3;
    i32 %5 = add i32 %m, i32 -18;
    cbr i1 %2(prob = 0.984615), ^for.body, ^b;
  ^for.body:
    i32 %6 = phi [^entry, i32 0] [^for.iteration, i32 %8];
    cbr i1 %3(prob = 0.984615), ^prebody, ^for.iteration;
  ^b:
    ret;
  ^prebody:
    [1024 * i32]* %7 = getelementptr &([1024 * [1024 * i32]]* %A)[i64 0][i32 %6];
    cbr i1 %4(prob = 0.941176), ^super.header, ^scalar.header;
  ^for.iteration:
    i32 %8 = add i32 %6, i32 1;
    i1 %9 = icmp sgt i32 %n, i32 %8;
    cbr i1 %9(prob = 0.984615), ^for.body, ^b;
  ^super.header:
    cbr i1 %1(prob = 0.941176), ^for.body1, ^scalar.header1;
  ^scalar.header:
    i32 %10 = phi [^prebody, i32 0] [^scalar.header1, i32 %32] [^for.body3, i32 %43];
    i1 %11 = icmp sgt i32 %m, i32 %10;
    cbr i1 %11(prob = 0.75), ^for.body2, ^for.iteration;
  ^for.body1:
    i32 %12 = phi [^super.header, i32 0] [^for.body1, i32 %29];
    i32* %13 = getelementptr &([1024 * i32]* %7)[i64 0][i32 %12];
    store i32* %13 with i32 0;
    i32* %14 = getelementptr &(i32* %13)[i64 1];
    store i32* %14 with i32 0;
    i32* %15 = getelementptr &(i32* %13)[i64 2];
    store i32* %15 with i32 0;
    i32* %16 = getelementptr &(i32* %13)[i64 3];
    store i32* %16 with i32 0;
    i32* %17 = getelementptr &(i32* %13)[i64 4];
    store i32* %17 with i32 0;
    i32* %18 = getelementptr &(i32* %13)[i64 5];
    store i32* %18 with i32 0;
    i32* %19 = getelementptr &(i32* %13)[i64 6];
    store i32* %19 with i32 0;
    i32* %20 = getelementptr &(i32* %13)[i64 7];
    store i32* %20 with i32 0;
    i32* %21 = getelementptr &(i32* %13)[i64 8];
    store i32* %21 with i32 0;
    i32* %22 = getelementptr &(i32* %13)[i64 9];
    store i32* %22 with i32 0;
    i32* %23 = getelementptr &(i32* %13)[i64 10];
    store i32* %23 with i32 0;
    i32* %24 = getelementptr &(i32* %13)[i64 11];
    store i32* %24 with i32 0;
    i32* %25 = getelementptr &(i32* %13)[i64 12];
    store i32* %25 with i32 0;
    i32* %26 = getelementptr &(i32* %13)[i64 13];
    store i32* %26 with i32 0;
    i32* %27 = getelementptr &(i32* %13)[i64 14];
    store i32* %27 with i32 0;
    i32* %28 = getelementptr &(i32* %13)[i64 15];
    store i32* %28 with i32 0;
    i32 %29 = add i32 %12, i32 16;
    i1 %30 = icmp sgt i32 %5, i32 %29;
    cbr i1 %30(prob = 0.941176), ^for.body1, ^scalar.header1;
  ^scalar.header1:
    i32 %31 = phi [^super.header, i32 0] [^for.body1, i32 %29];
    i32 %32 = phi [^super.header, i32 undef] [^for.body1, i32 %29];
    i1 %33 = icmp sgt i32 %0, i32 %31;
    cbr i1 %33(prob = 0.75), ^for.body3, ^scalar.header;
  ^for.body2 {scalar}:
    i32 %34 = phi [^scalar.header, i32 %10] [^for.body2, i32 %36];
    i32* %35 = getelementptr &([1024 * i32]* %7)[i64 0][i32 %34];
    store i32* %35 with i32 0;
    i32 %36 = add i32 %34, i32 1;
    i1 %37 = icmp sgt i32 %m, i32 %36;
    cbr i1 %37(prob = 0.75), ^for.body2, ^for.iteration;
  ^for.body3 {scalar}:
    i32 %38 = phi [^scalar.header1, i32 %31] [^for.body3, i32 %43];
    i32* %39 = getelementptr &([1024 * i32]* %7)[i64 0][i32 %38];
    store i32* %39 with i32 0;
    i32* %40 = getelementptr &(i32* %39)[i64 1];
    store i32* %40 with i32 0;
    i32* %41 = getelementptr &(i32* %39)[i64 2];
    store i32* %41 with i32 0;
    i32* %42 = getelementptr &(i32* %39)[i64 3];
    store i32* %42 with i32 0;
    i32 %43 = add i32 %38, i32 4;
    i1 %44 = icmp sgt i32 %0, i32 %43;
    cbr i1 %44(prob = 0.75), ^for.body3, ^scalar.header;
}
func @reduce_sum1d_static(i32* %a) -> i32 { NoMemoryWrite NoSideEffect NoRecurse } {
  ^entry:
    ubr ^for.body;
  ^for.body:
    i32 %0 = phi [^entry, i32 0] [^for.body, i32 %194];
    i32 %1 = phi [^entry, i32 0] [^for.body, i32 %193];
    i32* %2 = getelementptr &(i32* %a)[i32 %0];
    i32 %3 = load i32* %2;
    i32 %4 = add i32 %1, i32 %3;
    i32* %5 = getelementptr &(i32* %2)[i64 1];
    i32 %6 = load i32* %5;
    i32 %7 = add i32 %4, i32 %6;
    i32* %8 = getelementptr &(i32* %2)[i64 2];
    i32 %9 = load i32* %8;
    i32 %10 = add i32 %7, i32 %9;
    i32* %11 = getelementptr &(i32* %2)[i64 3];
    i32 %12 = load i32* %11;
    i32 %13 = add i32 %10, i32 %12;
    i32* %14 = getelementptr &(i32* %2)[i64 4];
    i32 %15 = load i32* %14;
    i32 %16 = add i32 %13, i32 %15;
    i32* %17 = getelementptr &(i32* %2)[i64 5];
    i32 %18 = load i32* %17;
    i32 %19 = add i32 %16, i32 %18;
    i32* %20 = getelementptr &(i32* %2)[i64 6];
    i32 %21 = load i32* %20;
    i32 %22 = add i32 %19, i32 %21;
    i32* %23 = getelementptr &(i32* %2)[i64 7];
    i32 %24 = load i32* %23;
    i32 %25 = add i32 %22, i32 %24;
    i32* %26 = getelementptr &(i32* %2)[i64 8];
    i32 %27 = load i32* %26;
    i32 %28 = add i32 %25, i32 %27;
    i32* %29 = getelementptr &(i32* %2)[i64 9];
    i32 %30 = load i32* %29;
    i32 %31 = add i32 %28, i32 %30;
    i32* %32 = getelementptr &(i32* %2)[i64 10];
    i32 %33 = load i32* %32;
    i32 %34 = add i32 %31, i32 %33;
    i32* %35 = getelementptr &(i32* %2)[i64 11];
    i32 %36 = load i32* %35;
    i32 %37 = add i32 %34, i32 %36;
    i32* %38 = getelementptr &(i32* %2)[i64 12];
    i32 %39 = load i32* %38;
    i32 %40 = add i32 %37, i32 %39;
    i32* %41 = getelementptr &(i32* %2)[i64 13];
    i32 %42 = load i32* %41;
    i32 %43 = add i32 %40, i32 %42;
    i32* %44 = getelementptr &(i32* %2)[i64 14];
    i32 %45 = load i32* %44;
    i32 %46 = add i32 %43, i32 %45;
    i32* %47 = getelementptr &(i32* %2)[i64 15];
    i32 %48 = load i32* %47;
    i32 %49 = add i32 %46, i32 %48;
    i32* %50 = getelementptr &(i32* %2)[i64 16];
    i32 %51 = load i32* %50;
    i32 %52 = add i32 %49, i32 %51;
    i32* %53 = getelementptr &(i32* %2)[i64 17];
    i32 %54 = load i32* %53;
    i32 %55 = add i32 %52, i32 %54;
    i32* %56 = getelementptr &(i32* %2)[i64 18];
    i32 %57 = load i32* %56;
    i32 %58 = add i32 %55, i32 %57;
    i32* %59 = getelementptr &(i32* %2)[i64 19];
    i32 %60 = load i32* %59;
    i32 %61 = add i32 %58, i32 %60;
    i32* %62 = getelementptr &(i32* %2)[i64 20];
    i32 %63 = load i32* %62;
    i32 %64 = add i32 %61, i32 %63;
    i32* %65 = getelementptr &(i32* %2)[i64 21];
    i32 %66 = load i32* %65;
    i32 %67 = add i32 %64, i32 %66;
    i32* %68 = getelementptr &(i32* %2)[i64 22];
    i32 %69 = load i32* %68;
    i32 %70 = add i32 %67, i32 %69;
    i32* %71 = getelementptr &(i32* %2)[i64 23];
    i32 %72 = load i32* %71;
    i32 %73 = add i32 %70, i32 %72;
    i32* %74 = getelementptr &(i32* %2)[i64 24];
    i32 %75 = load i32* %74;
    i32 %76 = add i32 %73, i32 %75;
    i32* %77 = getelementptr &(i32* %2)[i64 25];
    i32 %78 = load i32* %77;
    i32 %79 = add i32 %76, i32 %78;
    i32* %80 = getelementptr &(i32* %2)[i64 26];
    i32 %81 = load i32* %80;
    i32 %82 = add i32 %79, i32 %81;
    i32* %83 = getelementptr &(i32* %2)[i64 27];
    i32 %84 = load i32* %83;
    i32 %85 = add i32 %82, i32 %84;
    i32* %86 = getelementptr &(i32* %2)[i64 28];
    i32 %87 = load i32* %86;
    i32 %88 = add i32 %85, i32 %87;
    i32* %89 = getelementptr &(i32* %2)[i64 29];
    i32 %90 = load i32* %89;
    i32 %91 = add i32 %88, i32 %90;
    i32* %92 = getelementptr &(i32* %2)[i64 30];
    i32 %93 = load i32* %92;
    i32 %94 = add i32 %91, i32 %93;
    i32* %95 = getelementptr &(i32* %2)[i64 31];
    i32 %96 = load i32* %95;
    i32 %97 = add i32 %94, i32 %96;
    i32* %98 = getelementptr &(i32* %2)[i64 32];
    i32 %99 = load i32* %98;
    i32 %100 = add i32 %97, i32 %99;
    i32* %101 = getelementptr &(i32* %2)[i64 33];
    i32 %102 = load i32* %101;
    i32 %103 = add i32 %100, i32 %102;
    i32* %104 = getelementptr &(i32* %2)[i64 34];
    i32 %105 = load i32* %104;
    i32 %106 = add i32 %103, i32 %105;
    i32* %107 = getelementptr &(i32* %2)[i64 35];
    i32 %108 = load i32* %107;
    i32 %109 = add i32 %106, i32 %108;
    i32* %110 = getelementptr &(i32* %2)[i64 36];
    i32 %111 = load i32* %110;
    i32 %112 = add i32 %109, i32 %111;
    i32* %113 = getelementptr &(i32* %2)[i64 37];
    i32 %114 = load i32* %113;
    i32 %115 = add i32 %112, i32 %114;
    i32* %116 = getelementptr &(i32* %2)[i64 38];
    i32 %117 = load i32* %116;
    i32 %118 = add i32 %115, i32 %117;
    i32* %119 = getelementptr &(i32* %2)[i64 39];
    i32 %120 = load i32* %119;
    i32 %121 = add i32 %118, i32 %120;
    i32* %122 = getelementptr &(i32* %2)[i64 40];
    i32 %123 = load i32* %122;
    i32 %124 = add i32 %121, i32 %123;
    i32* %125 = getelementptr &(i32* %2)[i64 41];
    i32 %126 = load i32* %125;
    i32 %127 = add i32 %124, i32 %126;
    i32* %128 = getelementptr &(i32* %2)[i64 42];
    i32 %129 = load i32* %128;
    i32 %130 = add i32 %127, i32 %129;
    i32* %131 = getelementptr &(i32* %2)[i64 43];
    i32 %132 = load i32* %131;
    i32 %133 = add i32 %130, i32 %132;
    i32* %134 = getelementptr &(i32* %2)[i64 44];
    i32 %135 = load i32* %134;
    i32 %136 = add i32 %133, i32 %135;
    i32* %137 = getelementptr &(i32* %2)[i64 45];
    i32 %138 = load i32* %137;
    i32 %139 = add i32 %136, i32 %138;
    i32* %140 = getelementptr &(i32* %2)[i64 46];
    i32 %141 = load i32* %140;
    i32 %142 = add i32 %139, i32 %141;
    i32* %143 = getelementptr &(i32* %2)[i64 47];
    i32 %144 = load i32* %143;
    i32 %145 = add i32 %142, i32 %144;
    i32* %146 = getelementptr &(i32* %2)[i64 48];
    i32 %147 = load i32* %146;
    i32 %148 = add i32 %145, i32 %147;
    i32* %149 = getelementptr &(i32* %2)[i64 49];
    i32 %150 = load i32* %149;
    i32 %151 = add i32 %148, i32 %150;
    i32* %152 = getelementptr &(i32* %2)[i64 50];
    i32 %153 = load i32* %152;
    i32 %154 = add i32 %151, i32 %153;
    i32* %155 = getelementptr &(i32* %2)[i64 51];
    i32 %156 = load i32* %155;
    i32 %157 = add i32 %154, i32 %156;
    i32* %158 = getelementptr &(i32* %2)[i64 52];
    i32 %159 = load i32* %158;
    i32 %160 = add i32 %157, i32 %159;
    i32* %161 = getelementptr &(i32* %2)[i64 53];
    i32 %162 = load i32* %161;
    i32 %163 = add i32 %160, i32 %162;
    i32* %164 = getelementptr &(i32* %2)[i64 54];
    i32 %165 = load i32* %164;
    i32 %166 = add i32 %163, i32 %165;
    i32* %167 = getelementptr &(i32* %2)[i64 55];
    i32 %168 = load i32* %167;
    i32 %169 = add i32 %166, i32 %168;
    i32* %170 = getelementptr &(i32* %2)[i64 56];
    i32 %171 = load i32* %170;
    i32 %172 = add i32 %169, i32 %171;
    i32* %173 = getelementptr &(i32* %2)[i64 57];
    i32 %174 = load i32* %173;
    i32 %175 = add i32 %172, i32 %174;
    i32* %176 = getelementptr &(i32* %2)[i64 58];
    i32 %177 = load i32* %176;
    i32 %178 = add i32 %175, i32 %177;
    i32* %179 = getelementptr &(i32* %2)[i64 59];
    i32 %180 = load i32* %179;
    i32 %181 = add i32 %178, i32 %180;
    i32* %182 = getelementptr &(i32* %2)[i64 60];
    i32 %183 = load i32* %182;
    i32 %184 = add i32 %181, i32 %183;
    i32* %185 = getelementptr &(i32* %2)[i64 61];
    i32 %186 = load i32* %185;
    i32 %187 = add i32 %184, i32 %186;
    i32* %188 = getelementptr &(i32* %2)[i64 62];
    i32 %189 = load i32* %188;
    i32 %190 = add i32 %187, i32 %189;
    i32* %191 = getelementptr &(i32* %2)[i64 63];
    i32 %192 = load i32* %191;
    i32 %193 = add i32 %190, i32 %192;
    i32 %194 = add i32 %0, i32 64;
    i1 %195 = icmp slt i32 %194, i32 1024;
    cbr i1 %195(prob = 0.9375), ^for.body, ^b;
  ^b:
    ret i32 %193;
}
func @reduce_sum1d_dynamic(i32* %a, i32 %n) -> i32 { NoMemoryWrite NoSideEffect NoRecurse } {
  ^entry:
    i1 %0 = icmp sgt i32 %n, i32 0;
    cbr i1 %0(prob = 0.984615), ^super.header, ^b;
  ^super.header:
    i1 %1 = icmp sgt i32 %n, i32 3;
    cbr i1 %1(prob = 0.941176), ^super.header1, ^scalar.header;
  ^b:
    i32 %2 = phi [^entry, i32 0] [^scalar.header, i32 %8] [^for.body1, i32 %71];
    ret i32 %2;
  ^super.header1:
    i32 %3 = add i32 %n, i32 -3;
    i1 %4 = icmp sgt i32 %3, i32 15;
    i32 %5 = add i32 %n, i32 -18;
    cbr i1 %4(prob = 0.941176), ^for.body, ^scalar.header1;
  ^scalar.header:
    i32 %6 = phi [^super.header, i32 0] [^scalar.final, i32 %74];
    i32 %7 = phi [^super.header, i32 0] [^scalar.final, i32 %75];
    i32 %8 = phi [^super.header, i32 undef] [^scalar.final, i32 %74];
    i1 %9 = icmp sgt i32 %n, i32 %7;
    cbr i1 %9(prob = 0.75), ^for.body1, ^b;
  ^for.body:
    i32 %10 = phi [^super.header1, i32 0] [^for.body, i32 %60];
    i32 %11 = phi [^super.header1, i32 0] [^for.body, i32 %59];
    i32* %12 = getelementptr &(i32* %a)[i32 %10];
    i32 %13 = load i32* %12;
    i32 %14 = add i32 %11, i32 %13;
    i32* %15 = getelementptr &(i32* %12)[i64 1];
    i32 %16 = load i32* %15;
    i32 %17 = add i32 %14, i32 %16;
    i32* %18 = getelementptr &(i32* %12)[i64 2];
    i32 %19 = load i32* %18;
    i32 %20 = add i32 %17, i32 %19;
    i32* %21 = getelementptr &(i32* %12)[i64 3];
    i32 %22 = load i32* %21;
    i32 %23 = add i32 %20, i32 %22;
    i32* %24 = getelementptr &(i32* %12)[i64 4];
    i32 %25 = load i32* %24;
    i32 %26 = add i32 %23, i32 %25;
    i32* %27 = getelementptr &(i32* %12)[i64 5];
    i32 %28 = load i32* %27;
    i32 %29 = add i32 %26, i32 %28;
    i32* %30 = getelementptr &(i32* %12)[i64 6];
    i32 %31 = load i32* %30;
    i32 %32 = add i32 %29, i32 %31;
    i32* %33 = getelementptr &(i32* %12)[i64 7];
    i32 %34 = load i32* %33;
    i32 %35 = add i32 %32, i32 %34;
    i32* %36 = getelementptr &(i32* %12)[i64 8];
    i32 %37 = load i32* %36;
    i32 %38 = add i32 %35, i32 %37;
    i32* %39 = getelementptr &(i32* %12)[i64 9];
    i32 %40 = load i32* %39;
    i32 %41 = add i32 %38, i32 %40;
    i32* %42 = getelementptr &(i32* %12)[i64 10];
    i32 %43 = load i32* %42;
    i32 %44 = add i32 %41, i32 %43;
    i32* %45 = getelementptr &(i32* %12)[i64 11];
    i32 %46 = load i32* %45;
    i32 %47 = add i32 %44, i32 %46;
    i32* %48 = getelementptr &(i32* %12)[i64 12];
    i32 %49 = load i32* %48;
    i32 %50 = add i32 %47, i32 %49;
    i32* %51 = getelementptr &(i32* %12)[i64 13];
    i32 %52 = load i32* %51;
    i32 %53 = add i32 %50, i32 %52;
    i32* %54 = getelementptr &(i32* %12)[i64 14];
    i32 %55 = load i32* %54;
    i32 %56 = add i32 %53, i32 %55;
    i32* %57 = getelementptr &(i32* %12)[i64 15];
    i32 %58 = load i32* %57;
    i32 %59 = add i32 %56, i32 %58;
    i32 %60 = add i32 %10, i32 16;
    i1 %61 = icmp sgt i32 %5, i32 %60;
    cbr i1 %61(prob = 0.941176), ^for.body, ^scalar.header1;
  ^scalar.header1:
    i32 %62 = phi [^super.header1, i32 0] [^for.body, i32 %60];
    i32 %63 = phi [^super.header1, i32 0] [^for.body, i32 %59];
    i32 %64 = phi [^super.header1, i32 undef] [^for.body, i32 %59];
    i32 %65 = phi [^super.header1, i32 undef] [^for.body, i32 %60];
    i1 %66 = icmp sgt i32 %3, i32 %62;
    cbr i1 %66(prob = 0.75), ^for.body2, ^scalar.final;
  ^for.body1 {scalar}:
    i32 %67 = phi [^scalar.header, i32 %7] [^for.body1, i32 %72];
    i32 %68 = phi [^scalar.header, i32 %6] [^for.body1, i32 %71];
    i32* %69 = getelementptr &(i32* %a)[i32 %67];
    i32 %70 = load i32* %69;
    i32 %71 = add i32 %68, i32 %70;
    i32 %72 = add i32 %67, i32 1;
    i1 %73 = icmp sgt i32 %n, i32 %72;
    cbr i1 %73(prob = 0.75), ^for.body1, ^b;
  ^scalar.final:
    i32 %74 = phi [^scalar.header1, i32 %64] [^for.body2, i32 %89];
    i32 %75 = phi [^scalar.header1, i32 %65] [^for.body2, i32 %90];
    ubr ^scalar.header;
  ^for.body2 {scalar}:
    i32 %76 = phi [^scalar.header1, i32 %63] [^for.body2, i32 %89];
    i32 %77 = phi [^scalar.header1, i32 %62] [^for.body2, i32 %90];
    i32* %78 = getelementptr &(i32* %a)[i32 %77];
    i32 %79 = load i32* %78;
    i32 %80 = add i32 %76, i32 %79;
    i32* %81 = getelementptr &(i32* %78)[i64 1];
    i32 %82 = load i32* %81;
    i32 %83 = add i32 %80, i32 %82;
    i32* %84 = getelementptr &(i32* %78)[i64 2];
    i32 %85 = load i32* %84;
    i32 %86 = add i32 %83, i32 %85;
    i32* %87 = getelementptr &(i32* %78)[i64 3];
    i32 %88 = load i32* %87;
    i32 %89 = add i32 %86, i32 %88;
    i32 %90 = add i32 %77, i32 4;
    i1 %91 = icmp sgt i32 %3, i32 %90;
    cbr i1 %91(prob = 0.75), ^for.body2, ^scalar.final;
}
