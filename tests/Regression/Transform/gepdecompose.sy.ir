func @test(i32* %x, i32 %n, i32 %m) -> i32 { NoMemoryWrite NoSideEffect NoRecurse } {
  ^entry:
    i32 %0 = add i32 %m, i32 -3;
    i1 %1 = icmp sgt i32 %0, i32 15;
    i1 %2 = icmp sgt i32 %m, i32 0;
    i1 %3 = icmp sgt i32 %m, i32 3;
    i32 %4 = add i32 %m, i32 -18;
    ubr ^for.header;
  ^for.header:
    i32 %5 = phi [^entry, i32 0] [^for.iteration, i32 %8];
    i32 %6 = phi [^entry, i32 0] [^for.iteration, i32 %9];
    i1 %7 = icmp sgt i32 %n, i32 %6;
    cbr i1 %7(prob = 0.984615), ^for.body, ^b;
  ^for.body:
    cbr i1 %2(prob = 0.984615), ^prebody, ^for.iteration;
  ^b:
    ret i32 %5;
  ^for.iteration:
    i32 %8 = phi [^for.body, i32 %5] [^scalar.header, i32 %14] [^for.body2, i32 %77];
    i32 %9 = add i32 %6, i32 1;
    ubr ^for.header;
  ^prebody:
    i32 %10 = mul i32 %m, i32 %6;
    i32* %11 = getelementptr &(i32* %x)[i32 %10];
    cbr i1 %3(prob = 0.941176), ^super.header, ^scalar.header;
  ^super.header:
    cbr i1 %1(prob = 0.941176), ^for.body1, ^scalar.header1;
  ^scalar.header:
    i32 %12 = phi [^prebody, i32 %5] [^scalar.final, i32 %80];
    i32 %13 = phi [^prebody, i32 0] [^scalar.final, i32 %81];
    i32 %14 = phi [^prebody, i32 undef] [^scalar.final, i32 %80];
    i1 %15 = icmp sgt i32 %m, i32 %13;
    cbr i1 %15(prob = 0.75), ^for.body2, ^for.iteration;
  ^for.body1:
    i32 %16 = phi [^super.header, i32 0] [^for.body1, i32 %66];
    i32 %17 = phi [^super.header, i32 %5] [^for.body1, i32 %65];
    i32* %18 = getelementptr &(i32* %11)[i32 %16];
    i32 %19 = load i32* %18;
    i32 %20 = add i32 %17, i32 %19;
    i32* %21 = getelementptr &(i32* %18)[i64 1];
    i32 %22 = load i32* %21;
    i32 %23 = add i32 %20, i32 %22;
    i32* %24 = getelementptr &(i32* %18)[i64 2];
    i32 %25 = load i32* %24;
    i32 %26 = add i32 %23, i32 %25;
    i32* %27 = getelementptr &(i32* %18)[i64 3];
    i32 %28 = load i32* %27;
    i32 %29 = add i32 %26, i32 %28;
    i32* %30 = getelementptr &(i32* %18)[i64 4];
    i32 %31 = load i32* %30;
    i32 %32 = add i32 %29, i32 %31;
    i32* %33 = getelementptr &(i32* %18)[i64 5];
    i32 %34 = load i32* %33;
    i32 %35 = add i32 %32, i32 %34;
    i32* %36 = getelementptr &(i32* %18)[i64 6];
    i32 %37 = load i32* %36;
    i32 %38 = add i32 %35, i32 %37;
    i32* %39 = getelementptr &(i32* %18)[i64 7];
    i32 %40 = load i32* %39;
    i32 %41 = add i32 %38, i32 %40;
    i32* %42 = getelementptr &(i32* %18)[i64 8];
    i32 %43 = load i32* %42;
    i32 %44 = add i32 %41, i32 %43;
    i32* %45 = getelementptr &(i32* %18)[i64 9];
    i32 %46 = load i32* %45;
    i32 %47 = add i32 %44, i32 %46;
    i32* %48 = getelementptr &(i32* %18)[i64 10];
    i32 %49 = load i32* %48;
    i32 %50 = add i32 %47, i32 %49;
    i32* %51 = getelementptr &(i32* %18)[i64 11];
    i32 %52 = load i32* %51;
    i32 %53 = add i32 %50, i32 %52;
    i32* %54 = getelementptr &(i32* %18)[i64 12];
    i32 %55 = load i32* %54;
    i32 %56 = add i32 %53, i32 %55;
    i32* %57 = getelementptr &(i32* %18)[i64 13];
    i32 %58 = load i32* %57;
    i32 %59 = add i32 %56, i32 %58;
    i32* %60 = getelementptr &(i32* %18)[i64 14];
    i32 %61 = load i32* %60;
    i32 %62 = add i32 %59, i32 %61;
    i32* %63 = getelementptr &(i32* %18)[i64 15];
    i32 %64 = load i32* %63;
    i32 %65 = add i32 %62, i32 %64;
    i32 %66 = add i32 %16, i32 16;
    i1 %67 = icmp sgt i32 %4, i32 %66;
    cbr i1 %67(prob = 0.941176), ^for.body1, ^scalar.header1;
  ^scalar.header1:
    i32 %68 = phi [^super.header, i32 0] [^for.body1, i32 %66];
    i32 %69 = phi [^super.header, i32 %5] [^for.body1, i32 %65];
    i32 %70 = phi [^super.header, i32 undef] [^for.body1, i32 %65];
    i32 %71 = phi [^super.header, i32 undef] [^for.body1, i32 %66];
    i1 %72 = icmp sgt i32 %0, i32 %68;
    cbr i1 %72(prob = 0.75), ^for.body3, ^scalar.final;
  ^for.body2 {scalar}:
    i32 %73 = phi [^scalar.header, i32 %13] [^for.body2, i32 %78];
    i32 %74 = phi [^scalar.header, i32 %12] [^for.body2, i32 %77];
    i32* %75 = getelementptr &(i32* %11)[i32 %73];
    i32 %76 = load i32* %75;
    i32 %77 = add i32 %74, i32 %76;
    i32 %78 = add i32 %73, i32 1;
    i1 %79 = icmp sgt i32 %m, i32 %78;
    cbr i1 %79(prob = 0.75), ^for.body2, ^for.iteration;
  ^scalar.final:
    i32 %80 = phi [^scalar.header1, i32 %70] [^for.body3, i32 %95];
    i32 %81 = phi [^scalar.header1, i32 %71] [^for.body3, i32 %96];
    ubr ^scalar.header;
  ^for.body3 {scalar}:
    i32 %82 = phi [^scalar.header1, i32 %69] [^for.body3, i32 %95];
    i32 %83 = phi [^scalar.header1, i32 %68] [^for.body3, i32 %96];
    i32* %84 = getelementptr &(i32* %11)[i32 %83];
    i32 %85 = load i32* %84;
    i32 %86 = add i32 %82, i32 %85;
    i32* %87 = getelementptr &(i32* %84)[i64 1];
    i32 %88 = load i32* %87;
    i32 %89 = add i32 %86, i32 %88;
    i32* %90 = getelementptr &(i32* %84)[i64 2];
    i32 %91 = load i32* %90;
    i32 %92 = add i32 %89, i32 %91;
    i32* %93 = getelementptr &(i32* %84)[i64 3];
    i32 %94 = load i32* %93;
    i32 %95 = add i32 %92, i32 %94;
    i32 %96 = add i32 %83, i32 4;
    i1 %97 = icmp sgt i32 %0, i32 %96;
    cbr i1 %97(prob = 0.75), ^for.body3, ^scalar.final;
}
func @getvalue(i32* %a, i32 %n, i32 %i, i32 %j) -> i32 { NoMemoryWrite NoSideEffect NoRecurse } {
  ^entry:
    i1 %0 = icmp sle i32 %n, i32 %i;
    i1 %1 = icmp slt i32 %i, i32 0;
    i1 %2 = or i1 %0, i1 %1;
    i1 %3 = icmp sle i32 %n, i32 %j;
    i1 %4 = icmp slt i32 %j, i32 0;
    i1 %5 = or i1 %3, i1 %4;
    i1 %6 = or i1 %2, i1 %5;
    cbr i1 %6(prob = 0.5), ^b1, ^b;
  ^b:
    i32 %7 = mul i32 %n, i32 %i;
    i32 %8 = add i32 %j, i32 %7;
    i32* %9 = getelementptr &(i32* %a)[i32 %8];
    i32 %10 = load i32* %9;
    ubr ^b1;
  ^b1:
    i32 %11 = phi [^entry, i32 -1] [^b, i32 %10];
    ret i32 %11;
}
func @assign2d(i32* %w, i32* %out, i32 %n) -> void { NoRecurse } {
  ^entry:
    i1 %0 = icmp sgt i32 %n, i32 3;
    i32 %1 = add i32 %n, i32 -3;
    i32 %2 = mul i32 %n, i32 2;
    i32 %3 = mul i32 %n, i32 3;
    i32 %4 = mul i32 %n, i32 4;
    ubr ^while.header;
  ^while.header:
    i32 %5 = phi [^entry, i32 0] [^scalar.final, i32 %38];
    i1 %6 = icmp sgt i32 %n, i32 %5;
    cbr i1 %6(prob = 0.984615), ^prebody, ^b;
  ^prebody:
    i32* %7 = getelementptr &(i32* %w)[i32 %5];
    i32* %8 = getelementptr &(i32* %out)[i32 %5];
    cbr i1 %0(prob = 0.941176), ^prebody1, ^scalar.header;
  ^b:
    ret;
  ^prebody1:
    i32* %9 = getelementptr &(i32* %8)[i32 %2];
    i32* %10 = getelementptr &(i32* %7)[i32 %2];
    i32* %11 = getelementptr &(i32* %8)[i32 %3];
    i32* %12 = getelementptr &(i32* %7)[i32 %3];
    ubr ^while.body;
  ^scalar.header:
    i32 %13 = phi [^prebody, i32 0] [^while.body, i32 %34];
    i32 %14 = phi [^prebody, i32 0] [^while.body, i32 %36];
    i32 %15 = phi [^prebody, i32 0] [^while.body, i32 %37];
    i1 %16 = icmp sgt i32 %n, i32 %13;
    cbr i1 %16(prob = 0.75), ^while.body1, ^scalar.final;
  ^while.body:
    i32 %17 = phi [^prebody1, i32 0] [^while.body, i32 %34];
    i32 %18 = phi [^prebody1, i32 0] [^while.body, i32 %36];
    i32 %19 = phi [^prebody1, i32 0] [^while.body, i32 %37];
    i32* %20 = getelementptr &(i32* %7)[i32 %19];
    i32 %21 = load i32* %20;
    i32* %22 = getelementptr &(i32* %8)[i32 %18];
    store i32* %22 with i32 %21;
    i32 %23 = add i32 %n, i32 %19;
    i32* %24 = getelementptr &(i32* %7)[i32 %23];
    i32 %25 = load i32* %24;
    i32 %26 = add i32 %n, i32 %18;
    i32* %27 = getelementptr &(i32* %8)[i32 %26];
    store i32* %27 with i32 %25;
    i32* %28 = getelementptr &(i32* %10)[i32 %19];
    i32 %29 = load i32* %28;
    i32* %30 = getelementptr &(i32* %9)[i32 %18];
    store i32* %30 with i32 %29;
    i32* %31 = getelementptr &(i32* %12)[i32 %19];
    i32 %32 = load i32* %31;
    i32* %33 = getelementptr &(i32* %11)[i32 %18];
    store i32* %33 with i32 %32;
    i32 %34 = add i32 %17, i32 4;
    i1 %35 = icmp sgt i32 %1, i32 %34;
    i32 %36 = add i32 %4, i32 %18;
    i32 %37 = add i32 %4, i32 %19;
    cbr i1 %35(prob = 0.941176), ^while.body, ^scalar.header;
  ^scalar.final:
    i32 %38 = add i32 %5, i32 1;
    ubr ^while.header;
  ^while.body1 {scalar}:
    i32 %39 = phi [^scalar.header, i32 %15] [^while.body1, i32 %48];
    i32 %40 = phi [^scalar.header, i32 %14] [^while.body1, i32 %47];
    i32 %41 = phi [^scalar.header, i32 %13] [^while.body1, i32 %45];
    i32* %42 = getelementptr &(i32* %7)[i32 %39];
    i32 %43 = load i32* %42;
    i32* %44 = getelementptr &(i32* %8)[i32 %40];
    store i32* %44 with i32 %43;
    i32 %45 = add i32 %41, i32 1;
    i1 %46 = icmp sgt i32 %n, i32 %45;
    i32 %47 = add i32 %n, i32 %40;
    i32 %48 = add i32 %n, i32 %39;
    cbr i1 %46(prob = 0.75), ^while.body1, ^scalar.final;
}
