func @test(i32* %x, i32 %n, i32 %m) -> i32 { NoMemoryWrite NoSideEffect NoRecurse } {
  ^entry:
    i32 %0 = add i32 %m, i32 -3;
    i1 %1 = icmp sgt i32 %0, i32 15;
    i1 %2 = icmp sgt i32 %n, i32 0;
    i1 %3 = icmp sgt i32 %m, i32 0;
    i1 %4 = icmp sgt i32 %m, i32 3;
    i32 %5 = add i32 %m, i32 -18;
    cbr i1 %2(prob = 0.984615), ^for.body, ^b;
  ^for.body:
    i32 %6 = phi [^entry, i32 0] [^for.iteration, i32 %12];
    i32 %7 = phi [^entry, i32 0] [^for.iteration, i32 %11];
    cbr i1 %3(prob = 0.984615), ^prebody, ^for.iteration;
  ^b:
    i32 %8 = phi [^entry, i32 0] [^for.iteration, i32 %11];
    ret i32 %8;
  ^prebody:
    i32 %9 = mul i32 %m, i32 %6;
    i32* %10 = getelementptr &(i32* %x)[i32 %9];
    cbr i1 %4(prob = 0.941176), ^super.header, ^scalar.header;
  ^for.iteration:
    i32 %11 = phi [^for.body, i32 %7] [^scalar.header, i32 %16] [^for.body2, i32 %79];
    i32 %12 = add i32 %6, i32 1;
    i1 %13 = icmp sgt i32 %n, i32 %12;
    cbr i1 %13(prob = 0.984615), ^for.body, ^b;
  ^super.header:
    cbr i1 %1(prob = 0.941176), ^for.body1, ^scalar.header1;
  ^scalar.header:
    i32 %14 = phi [^prebody, i32 %7] [^scalar.final, i32 %82];
    i32 %15 = phi [^prebody, i32 0] [^scalar.final, i32 %83];
    i32 %16 = phi [^prebody, i32 undef] [^scalar.final, i32 %82];
    i1 %17 = icmp sgt i32 %m, i32 %15;
    cbr i1 %17(prob = 0.75), ^for.body2, ^for.iteration;
  ^for.body1:
    i32 %18 = phi [^super.header, i32 0] [^for.body1, i32 %68];
    i32 %19 = phi [^super.header, i32 %7] [^for.body1, i32 %67];
    i32* %20 = getelementptr &(i32* %10)[i32 %18];
    i32 %21 = load i32* %20;
    i32 %22 = add i32 %19, i32 %21;
    i32* %23 = getelementptr &(i32* %20)[i64 1];
    i32 %24 = load i32* %23;
    i32 %25 = add i32 %22, i32 %24;
    i32* %26 = getelementptr &(i32* %20)[i64 2];
    i32 %27 = load i32* %26;
    i32 %28 = add i32 %25, i32 %27;
    i32* %29 = getelementptr &(i32* %20)[i64 3];
    i32 %30 = load i32* %29;
    i32 %31 = add i32 %28, i32 %30;
    i32* %32 = getelementptr &(i32* %20)[i64 4];
    i32 %33 = load i32* %32;
    i32 %34 = add i32 %31, i32 %33;
    i32* %35 = getelementptr &(i32* %20)[i64 5];
    i32 %36 = load i32* %35;
    i32 %37 = add i32 %34, i32 %36;
    i32* %38 = getelementptr &(i32* %20)[i64 6];
    i32 %39 = load i32* %38;
    i32 %40 = add i32 %37, i32 %39;
    i32* %41 = getelementptr &(i32* %20)[i64 7];
    i32 %42 = load i32* %41;
    i32 %43 = add i32 %40, i32 %42;
    i32* %44 = getelementptr &(i32* %20)[i64 8];
    i32 %45 = load i32* %44;
    i32 %46 = add i32 %43, i32 %45;
    i32* %47 = getelementptr &(i32* %20)[i64 9];
    i32 %48 = load i32* %47;
    i32 %49 = add i32 %46, i32 %48;
    i32* %50 = getelementptr &(i32* %20)[i64 10];
    i32 %51 = load i32* %50;
    i32 %52 = add i32 %49, i32 %51;
    i32* %53 = getelementptr &(i32* %20)[i64 11];
    i32 %54 = load i32* %53;
    i32 %55 = add i32 %52, i32 %54;
    i32* %56 = getelementptr &(i32* %20)[i64 12];
    i32 %57 = load i32* %56;
    i32 %58 = add i32 %55, i32 %57;
    i32* %59 = getelementptr &(i32* %20)[i64 13];
    i32 %60 = load i32* %59;
    i32 %61 = add i32 %58, i32 %60;
    i32* %62 = getelementptr &(i32* %20)[i64 14];
    i32 %63 = load i32* %62;
    i32 %64 = add i32 %61, i32 %63;
    i32* %65 = getelementptr &(i32* %20)[i64 15];
    i32 %66 = load i32* %65;
    i32 %67 = add i32 %64, i32 %66;
    i32 %68 = add i32 %18, i32 16;
    i1 %69 = icmp sgt i32 %5, i32 %68;
    cbr i1 %69(prob = 0.941176), ^for.body1, ^scalar.header1;
  ^scalar.header1:
    i32 %70 = phi [^super.header, i32 0] [^for.body1, i32 %68];
    i32 %71 = phi [^super.header, i32 %7] [^for.body1, i32 %67];
    i32 %72 = phi [^super.header, i32 undef] [^for.body1, i32 %67];
    i32 %73 = phi [^super.header, i32 undef] [^for.body1, i32 %68];
    i1 %74 = icmp sgt i32 %0, i32 %70;
    cbr i1 %74(prob = 0.75), ^for.body3, ^scalar.final;
  ^for.body2 {scalar}:
    i32 %75 = phi [^scalar.header, i32 %15] [^for.body2, i32 %80];
    i32 %76 = phi [^scalar.header, i32 %14] [^for.body2, i32 %79];
    i32* %77 = getelementptr &(i32* %10)[i32 %75];
    i32 %78 = load i32* %77;
    i32 %79 = add i32 %76, i32 %78;
    i32 %80 = add i32 %75, i32 1;
    i1 %81 = icmp sgt i32 %m, i32 %80;
    cbr i1 %81(prob = 0.75), ^for.body2, ^for.iteration;
  ^scalar.final:
    i32 %82 = phi [^scalar.header1, i32 %72] [^for.body3, i32 %97];
    i32 %83 = phi [^scalar.header1, i32 %73] [^for.body3, i32 %98];
    ubr ^scalar.header;
  ^for.body3 {scalar}:
    i32 %84 = phi [^scalar.header1, i32 %71] [^for.body3, i32 %97];
    i32 %85 = phi [^scalar.header1, i32 %70] [^for.body3, i32 %98];
    i32* %86 = getelementptr &(i32* %10)[i32 %85];
    i32 %87 = load i32* %86;
    i32 %88 = add i32 %84, i32 %87;
    i32* %89 = getelementptr &(i32* %86)[i64 1];
    i32 %90 = load i32* %89;
    i32 %91 = add i32 %88, i32 %90;
    i32* %92 = getelementptr &(i32* %86)[i64 2];
    i32 %93 = load i32* %92;
    i32 %94 = add i32 %91, i32 %93;
    i32* %95 = getelementptr &(i32* %86)[i64 3];
    i32 %96 = load i32* %95;
    i32 %97 = add i32 %94, i32 %96;
    i32 %98 = add i32 %85, i32 4;
    i1 %99 = icmp sgt i32 %0, i32 %98;
    cbr i1 %99(prob = 0.75), ^for.body3, ^scalar.final;
}
func @getvalue(i32* %a, i32 %n, i32 %i, i32 %j) -> i32 { NoMemoryWrite NoSideEffect NoRecurse } {
  ^entry:
    i1 %0 = icmp sle i32 %n, i32 %i;
    i1 %1 = icmp slt i32 %i, i32 0;
    i1 %2 = or i1 %0, i1 %1;
    i1 %3 = icmp sle i32 %n, i32 %j;
    i1 %4 = icmp slt i32 %j, i32 0;
    i1 %5 = or i1 %3, i1 %4;
    i1 %6 = or i1 %2, i1 %5;
    cbr i1 %6(prob = 0.5), ^b1, ^b;
  ^b:
    i32 %7 = mul i32 %n, i32 %i;
    i32 %8 = add i32 %j, i32 %7;
    i32* %9 = getelementptr &(i32* %a)[i32 %8];
    i32 %10 = load i32* %9;
    ubr ^b1;
  ^b1:
    i32 %11 = phi [^entry, i32 -1] [^b, i32 %10];
    ret i32 %11;
}
func @assign2d(i32* %w, i32* %out, i32 %n) -> void { NoRecurse } {
  ^entry:
    i1 %0 = icmp sgt i32 %n, i32 0;
    i1 %1 = icmp sgt i32 %n, i32 3;
    i32 %2 = add i32 %n, i32 -3;
    i32 %3 = mul i32 %n, i32 2;
    i32 %4 = mul i32 %n, i32 3;
    i32 %5 = mul i32 %n, i32 4;
    cbr i1 %0(prob = 0.984615), ^while.body, ^b;
  ^while.body:
    i32 %6 = phi [^entry, i32 0] [^scalar.final, i32 %48];
    i32* %7 = getelementptr &(i32* %w)[i32 %6];
    i32* %8 = getelementptr &(i32* %out)[i32 %6];
    cbr i1 %1(prob = 0.941176), ^prebody, ^scalar.header;
  ^b:
    ret;
  ^prebody:
    i32* %9 = getelementptr &(i32* %8)[i32 %3];
    i32* %10 = getelementptr &(i32* %7)[i32 %3];
    i32* %11 = getelementptr &(i32* %8)[i32 %4];
    i32* %12 = getelementptr &(i32* %7)[i32 %4];
    ubr ^while.body1;
  ^scalar.header:
    i32 %13 = phi [^while.body, i32 0] [^while.body1, i32 %34];
    i32 %14 = phi [^while.body, i32 0] [^while.body1, i32 %36];
    i32 %15 = phi [^while.body, i32 0] [^while.body1, i32 %37];
    i1 %16 = icmp sgt i32 %n, i32 %13;
    cbr i1 %16(prob = 0.75), ^while.body2, ^scalar.final;
  ^while.body1:
    i32 %17 = phi [^prebody, i32 0] [^while.body1, i32 %34];
    i32 %18 = phi [^prebody, i32 0] [^while.body1, i32 %36];
    i32 %19 = phi [^prebody, i32 0] [^while.body1, i32 %37];
    i32* %20 = getelementptr &(i32* %7)[i32 %19];
    i32 %21 = load i32* %20;
    i32* %22 = getelementptr &(i32* %8)[i32 %18];
    store i32* %22 with i32 %21;
    i32 %23 = add i32 %n, i32 %19;
    i32* %24 = getelementptr &(i32* %7)[i32 %23];
    i32 %25 = load i32* %24;
    i32 %26 = add i32 %n, i32 %18;
    i32* %27 = getelementptr &(i32* %8)[i32 %26];
    store i32* %27 with i32 %25;
    i32* %28 = getelementptr &(i32* %10)[i32 %19];
    i32 %29 = load i32* %28;
    i32* %30 = getelementptr &(i32* %9)[i32 %18];
    store i32* %30 with i32 %29;
    i32* %31 = getelementptr &(i32* %12)[i32 %19];
    i32 %32 = load i32* %31;
    i32* %33 = getelementptr &(i32* %11)[i32 %18];
    store i32* %33 with i32 %32;
    i32 %34 = add i32 %17, i32 4;
    i1 %35 = icmp sgt i32 %2, i32 %34;
    i32 %36 = add i32 %5, i32 %18;
    i32 %37 = add i32 %5, i32 %19;
    cbr i1 %35(prob = 0.941176), ^while.body1, ^scalar.header;
  ^while.body2 {scalar}:
    i32 %38 = phi [^scalar.header, i32 %15] [^while.body2, i32 %47];
    i32 %39 = phi [^scalar.header, i32 %14] [^while.body2, i32 %46];
    i32 %40 = phi [^scalar.header, i32 %13] [^while.body2, i32 %44];
    i32* %41 = getelementptr &(i32* %7)[i32 %38];
    i32 %42 = load i32* %41;
    i32* %43 = getelementptr &(i32* %8)[i32 %39];
    store i32* %43 with i32 %42;
    i32 %44 = add i32 %40, i32 1;
    i1 %45 = icmp sgt i32 %n, i32 %44;
    i32 %46 = add i32 %n, i32 %39;
    i32 %47 = add i32 %n, i32 %38;
    cbr i1 %45(prob = 0.75), ^while.body2, ^scalar.final;
  ^scalar.final:
    i32 %48 = add i32 %6, i32 1;
    i1 %49 = icmp sgt i32 %n, i32 %48;
    cbr i1 %49(prob = 0.984615), ^while.body, ^b;
}
