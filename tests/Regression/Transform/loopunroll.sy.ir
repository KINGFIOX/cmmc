internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
func @large() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 1999000);
    ret i32 1999000;
}
func @large_with_epilogue() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 5050);
    ret i32 5050;
}
func @small() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 10);
    ret i32 10;
}
func @small2() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 0);
    ret i32 0;
}
func @noop1() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 0);
    ret i32 0;
}
func @noop2() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 0);
    ret i32 0;
}
func @while1() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 105);
    ret i32 105;
}
func @while2() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 1240);
    ret i32 1240;
}
func @while3() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 528);
    ret i32 528;
}
func @while4() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 4032);
    ret i32 4032;
}
func @while5() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 6240);
    ret i32 6240;
}
func @while6() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 4888521);
    ret i32 4888521;
}
func @multi_loop() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    ubr ^for.body;
  ^for.body:
    i32 %0 = phi [^entry, i32 57120] [^for.body, i32 %58];
    i32 %1 = phi [^entry, i32 16320] [^for.body, i32 %56];
    i32 %2 = phi [^entry, i32 14280] [^for.body, i32 %54];
    i32 %3 = phi [^entry, i32 12240] [^for.body, i32 %53];
    i32 %4 = phi [^entry, i32 10200] [^for.body, i32 %52];
    i32 %5 = phi [^entry, i32 8160] [^for.body, i32 %51];
    i32 %6 = phi [^entry, i32 6120] [^for.body, i32 %50];
    i32 %7 = phi [^entry, i32 4080] [^for.body, i32 %49];
    i32 %8 = phi [^entry, i32 7140] [^for.body, i32 %57];
    i32 %9 = phi [^entry, i32 2040] [^for.body, i32 %55];
    i32 %10 = phi [^entry, i32 16129] [^for.body, i32 %46];
    i32 %11 = phi [^entry, i32 127] [^for.body, i32 %47];
    i32 %12 = phi [^entry, i32 0] [^for.body, i32 %44];
    i32 %13 = add i32 %9, i32 56;
    i32 %14 = add i32 %10, i32 %13;
    i32 %15 = mul i32 %14, i32 8;
    i32 %16 = mul i32 %10, i32 8;
    i32 %17 = add i32 %16, i32 13440;
    i32 %18 = add i32 %15, i32 %17;
    i32 %19 = add i32 %7, i32 240;
    i32 %20 = add i32 %10, i32 %19;
    i32 %21 = mul i32 %20, i32 8;
    i32 %22 = add i32 %18, i32 %21;
    i32 %23 = add i32 %6, i32 552;
    i32 %24 = add i32 %10, i32 %23;
    i32 %25 = mul i32 %24, i32 8;
    i32 %26 = add i32 %22, i32 %25;
    i32 %27 = add i32 %5, i32 992;
    i32 %28 = add i32 %10, i32 %27;
    i32 %29 = mul i32 %28, i32 8;
    i32 %30 = add i32 %26, i32 %29;
    i32 %31 = add i32 %4, i32 1560;
    i32 %32 = add i32 %10, i32 %31;
    i32 %33 = mul i32 %32, i32 8;
    i32 %34 = add i32 %30, i32 %33;
    i32 %35 = add i32 %3, i32 2256;
    i32 %36 = add i32 %10, i32 %35;
    i32 %37 = mul i32 %36, i32 8;
    i32 %38 = add i32 %34, i32 %37;
    i32 %39 = add i32 %2, i32 3080;
    i32 %40 = add i32 %10, i32 %39;
    i32 %41 = mul i32 %40, i32 8;
    i32 %42 = add i32 %38, i32 %41;
    i32 %43 = add i32 %0, i32 %42;
    i32 %44 = add i32 %12, i32 %43;
    i32 %45 = add i32 %1, i32 4032;
    i32 %46 = add i32 %10, i32 %45;
    i32 %47 = add i32 %11, i32 64;
    i1 %48 = icmp slt i32 %47, i32 959;
    i32 %49 = add i32 %7, i32 2048;
    i32 %50 = add i32 %6, i32 3072;
    i32 %51 = add i32 %5, i32 4096;
    i32 %52 = add i32 %4, i32 5120;
    i32 %53 = add i32 %3, i32 6144;
    i32 %54 = add i32 %2, i32 7168;
    i32 %55 = add i32 %9, i32 1024;
    i32 %56 = add i32 %1, i32 8192;
    i32 %57 = add i32 %8, i32 3584;
    i32 %58 = add i32 %0, i32 28672;
    cbr i1 %48(prob = 0.923077), ^for.body, ^for.body1;
  ^for.body1:
    i32 %59 = add i32 %9, i32 526556;
    i32 %60 = add i32 %46, i32 %59;
    i32 %61 = add i32 %57, i32 %60;
    i32 %62 = add i32 %44, i32 %61;
    i32 %63 = mul i32 %46, i32 8;
    i32 %64 = add i32 %62, i32 %63;
    i32 %65 = add i32 %9, i32 1080;
    i32 %66 = add i32 %46, i32 %65;
    i32 %67 = mul i32 %66, i32 8;
    i32 %68 = add i32 %64, i32 %67;
    i32 %69 = add i32 %9, i32 1264;
    i32 %70 = add i32 %55, i32 %69;
    i32 %71 = add i32 %46, i32 %70;
    i32 %72 = mul i32 %71, i32 8;
    i32 %73 = add i32 %68, i32 %72;
    i32 %74 = add i32 %9, i32 3624;
    i32 %75 = add i32 %46, i32 %74;
    i32 %76 = mul i32 %9, i32 2;
    i32 %77 = add i32 %75, i32 %76;
    i32 %78 = mul i32 %77, i32 8;
    i32 %79 = add i32 %73, i32 %78;
    i32 %80 = add i32 %9, i32 5088;
    i32 %81 = add i32 %46, i32 %80;
    i32 %82 = mul i32 %9, i32 3;
    i32 %83 = add i32 %81, i32 %82;
    i32 %84 = mul i32 %83, i32 8;
    i32 %85 = add i32 %79, i32 %84;
    i32 %86 = mul i32 %8, i32 4;
    i32 %87 = add i32 %85, i32 %86;
    i32 %88 = mul i32 %9, i32 4;
    i32 %89 = add i32 %87, i32 %88;
    call (i32) -> void @putint(i32 %89);
    ret i32 %89;
}
