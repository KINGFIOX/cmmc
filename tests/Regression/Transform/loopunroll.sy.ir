internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
func @large() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    ubr ^for.body;
  ^for.body:
    i32 %0 = phi [^entry, i32 0] [^for.body, i32 %50];
    i32 %1 = phi [^entry, i32 0] [^for.body, i32 %49];
    i32 %2 = add i32 %0, i32 16;
    i32 %3 = mul i32 %2, i32 16;
    i32 %4 = mul i32 %0, i32 16;
    i32 %5 = add i32 %4, i32 1920;
    i32 %6 = add i32 %3, i32 %5;
    i32 %7 = add i32 %0, i32 32;
    i32 %8 = mul i32 %7, i32 16;
    i32 %9 = add i32 %6, i32 %8;
    i32 %10 = add i32 %0, i32 48;
    i32 %11 = mul i32 %10, i32 16;
    i32 %12 = add i32 %9, i32 %11;
    i32 %13 = add i32 %0, i32 64;
    i32 %14 = mul i32 %13, i32 16;
    i32 %15 = add i32 %12, i32 %14;
    i32 %16 = add i32 %0, i32 80;
    i32 %17 = mul i32 %16, i32 16;
    i32 %18 = add i32 %15, i32 %17;
    i32 %19 = add i32 %0, i32 96;
    i32 %20 = mul i32 %19, i32 16;
    i32 %21 = add i32 %18, i32 %20;
    i32 %22 = add i32 %0, i32 112;
    i32 %23 = mul i32 %22, i32 16;
    i32 %24 = add i32 %21, i32 %23;
    i32 %25 = add i32 %0, i32 128;
    i32 %26 = mul i32 %25, i32 16;
    i32 %27 = add i32 %24, i32 %26;
    i32 %28 = add i32 %0, i32 144;
    i32 %29 = mul i32 %28, i32 16;
    i32 %30 = add i32 %27, i32 %29;
    i32 %31 = add i32 %0, i32 160;
    i32 %32 = mul i32 %31, i32 16;
    i32 %33 = add i32 %30, i32 %32;
    i32 %34 = add i32 %0, i32 176;
    i32 %35 = mul i32 %34, i32 16;
    i32 %36 = add i32 %33, i32 %35;
    i32 %37 = add i32 %0, i32 192;
    i32 %38 = mul i32 %37, i32 16;
    i32 %39 = add i32 %36, i32 %38;
    i32 %40 = add i32 %0, i32 208;
    i32 %41 = mul i32 %40, i32 16;
    i32 %42 = add i32 %39, i32 %41;
    i32 %43 = add i32 %0, i32 224;
    i32 %44 = mul i32 %43, i32 16;
    i32 %45 = add i32 %42, i32 %44;
    i32 %46 = add i32 %0, i32 240;
    i32 %47 = mul i32 %46, i32 16;
    i32 %48 = add i32 %45, i32 %47;
    i32 %49 = add i32 %1, i32 %48;
    i32 %50 = add i32 %0, i32 256;
    i1 %51 = icmp slt i32 %50, i32 1792;
    cbr i1 %51(prob = 0.86), ^for.body, ^for.body1;
  ^for.body1:
    i32 %52 = mul i32 %50, i32 16;
    i32 %53 = add i32 %49, i32 1560;
    i32 %54 = add i32 %52, i32 %53;
    i32 %55 = add i32 %0, i32 272;
    i32 %56 = mul i32 %55, i32 16;
    i32 %57 = add i32 %54, i32 %56;
    i32 %58 = add i32 %0, i32 288;
    i32 %59 = mul i32 %58, i32 16;
    i32 %60 = add i32 %57, i32 %59;
    i32 %61 = add i32 %0, i32 304;
    i32 %62 = mul i32 %61, i32 16;
    i32 %63 = add i32 %60, i32 %62;
    i32 %64 = add i32 %0, i32 320;
    i32 %65 = mul i32 %64, i32 16;
    i32 %66 = add i32 %63, i32 %65;
    i32 %67 = add i32 %0, i32 336;
    i32 %68 = mul i32 %67, i32 16;
    i32 %69 = add i32 %66, i32 %68;
    i32 %70 = add i32 %0, i32 352;
    i32 %71 = mul i32 %70, i32 16;
    i32 %72 = add i32 %69, i32 %71;
    i32 %73 = add i32 %0, i32 368;
    i32 %74 = mul i32 %73, i32 16;
    i32 %75 = add i32 %72, i32 %74;
    i32 %76 = add i32 %0, i32 384;
    i32 %77 = mul i32 %76, i32 16;
    i32 %78 = add i32 %75, i32 %77;
    i32 %79 = add i32 %0, i32 400;
    i32 %80 = mul i32 %79, i32 16;
    i32 %81 = add i32 %78, i32 %80;
    i32 %82 = add i32 %0, i32 416;
    i32 %83 = mul i32 %82, i32 16;
    i32 %84 = add i32 %81, i32 %83;
    i32 %85 = add i32 %0, i32 432;
    i32 %86 = mul i32 %85, i32 16;
    i32 %87 = add i32 %84, i32 %86;
    i32 %88 = add i32 %0, i32 448;
    i32 %89 = mul i32 %88, i32 16;
    i32 %90 = add i32 %87, i32 %89;
    call (i32) -> void @putint(i32 %90);
    ret i32 %90;
}
func @large_with_epilogue() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 5050);
    ret i32 5050;
}
func @small() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 10);
    ret i32 10;
}
func @small2() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 0);
    ret i32 0;
}
func @noop1() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 0);
    ret i32 0;
}
func @noop2() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 0);
    ret i32 0;
}
func @while1() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 105);
    ret i32 105;
}
func @while2() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 1240);
    ret i32 1240;
}
func @while3() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 528);
    ret i32 528;
}
func @while4() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 4032);
    ret i32 4032;
}
func @while5() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 6240);
    ret i32 6240;
}
func @while6() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    ubr ^while.body;
  ^while.body:
    i32 %0 = phi [^entry, i32 0] [^while.body, i32 %65];
    i32 %1 = phi [^entry, i32 0] [^while.body, i32 %64];
    i32 %2 = add i32 %0, i32 1;
    i32 %3 = mul i32 %2, i32 %2;
    i32 %4 = mul i32 %2, i32 %3;
    i32 %5 = mul i32 %0, i32 %0;
    i32 %6 = mul i32 %0, i32 %5;
    i32 %7 = add i32 %4, i32 %6;
    i32 %8 = add i32 %0, i32 2;
    i32 %9 = mul i32 %8, i32 %8;
    i32 %10 = mul i32 %8, i32 %9;
    i32 %11 = add i32 %7, i32 %10;
    i32 %12 = add i32 %0, i32 3;
    i32 %13 = mul i32 %12, i32 %12;
    i32 %14 = mul i32 %12, i32 %13;
    i32 %15 = add i32 %11, i32 %14;
    i32 %16 = add i32 %0, i32 4;
    i32 %17 = mul i32 %16, i32 %16;
    i32 %18 = mul i32 %16, i32 %17;
    i32 %19 = add i32 %15, i32 %18;
    i32 %20 = add i32 %0, i32 5;
    i32 %21 = mul i32 %20, i32 %20;
    i32 %22 = mul i32 %20, i32 %21;
    i32 %23 = add i32 %19, i32 %22;
    i32 %24 = add i32 %0, i32 6;
    i32 %25 = mul i32 %24, i32 %24;
    i32 %26 = mul i32 %24, i32 %25;
    i32 %27 = add i32 %23, i32 %26;
    i32 %28 = add i32 %0, i32 7;
    i32 %29 = mul i32 %28, i32 %28;
    i32 %30 = mul i32 %28, i32 %29;
    i32 %31 = add i32 %27, i32 %30;
    i32 %32 = add i32 %0, i32 8;
    i32 %33 = mul i32 %32, i32 %32;
    i32 %34 = mul i32 %32, i32 %33;
    i32 %35 = add i32 %31, i32 %34;
    i32 %36 = add i32 %0, i32 9;
    i32 %37 = mul i32 %36, i32 %36;
    i32 %38 = mul i32 %36, i32 %37;
    i32 %39 = add i32 %35, i32 %38;
    i32 %40 = add i32 %0, i32 10;
    i32 %41 = mul i32 %40, i32 %40;
    i32 %42 = mul i32 %40, i32 %41;
    i32 %43 = add i32 %39, i32 %42;
    i32 %44 = add i32 %0, i32 11;
    i32 %45 = mul i32 %44, i32 %44;
    i32 %46 = mul i32 %44, i32 %45;
    i32 %47 = add i32 %43, i32 %46;
    i32 %48 = add i32 %0, i32 12;
    i32 %49 = mul i32 %48, i32 %48;
    i32 %50 = mul i32 %48, i32 %49;
    i32 %51 = add i32 %47, i32 %50;
    i32 %52 = add i32 %0, i32 13;
    i32 %53 = mul i32 %52, i32 %52;
    i32 %54 = mul i32 %52, i32 %53;
    i32 %55 = add i32 %51, i32 %54;
    i32 %56 = add i32 %0, i32 14;
    i32 %57 = mul i32 %56, i32 %56;
    i32 %58 = mul i32 %56, i32 %57;
    i32 %59 = add i32 %55, i32 %58;
    i32 %60 = add i32 %0, i32 15;
    i32 %61 = mul i32 %60, i32 %60;
    i32 %62 = mul i32 %60, i32 %61;
    i32 %63 = add i32 %59, i32 %62;
    i32 %64 = add i32 %1, i32 %63;
    i32 %65 = add i32 %0, i32 16;
    i1 %66 = icmp slt i32 %65, i32 64;
    cbr i1 %66(prob = 0.75), ^while.body, ^while.body1;
  ^while.body1:
    i32 %67 = add i32 %0, i32 17;
    i32 %68 = mul i32 %67, i32 %67;
    i32 %69 = mul i32 %67, i32 %68;
    i32 %70 = mul i32 %65, i32 %65;
    i32 %71 = mul i32 %65, i32 %70;
    i32 %72 = add i32 %64, i32 %71;
    i32 %73 = add i32 %69, i32 %72;
    i32 %74 = add i32 %0, i32 18;
    i32 %75 = mul i32 %74, i32 %74;
    i32 %76 = mul i32 %74, i32 %75;
    i32 %77 = add i32 %73, i32 %76;
    call (i32) -> void @putint(i32 %77);
    ret i32 %77;
}
func @multi_loop() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    ubr ^for.body;
  ^for.body:
    i32 %0 = phi [^entry, i32 127] [^for.body, i32 %49];
    i32 %1 = phi [^entry, i32 0] [^for.body, i32 %48];
    i32 %2 = add i32 %0, i32 1;
    i32 %3 = mul i32 %2, i32 %2;
    i32 %4 = mul i32 %0, i32 %0;
    i32 %5 = add i32 %3, i32 %4;
    i32 %6 = add i32 %0, i32 2;
    i32 %7 = mul i32 %6, i32 %6;
    i32 %8 = add i32 %5, i32 %7;
    i32 %9 = add i32 %0, i32 3;
    i32 %10 = mul i32 %9, i32 %9;
    i32 %11 = add i32 %8, i32 %10;
    i32 %12 = add i32 %0, i32 4;
    i32 %13 = mul i32 %12, i32 %12;
    i32 %14 = add i32 %11, i32 %13;
    i32 %15 = add i32 %0, i32 5;
    i32 %16 = mul i32 %15, i32 %15;
    i32 %17 = add i32 %14, i32 %16;
    i32 %18 = add i32 %0, i32 6;
    i32 %19 = mul i32 %18, i32 %18;
    i32 %20 = add i32 %17, i32 %19;
    i32 %21 = add i32 %0, i32 7;
    i32 %22 = mul i32 %21, i32 %21;
    i32 %23 = add i32 %20, i32 %22;
    i32 %24 = add i32 %0, i32 8;
    i32 %25 = mul i32 %24, i32 %24;
    i32 %26 = add i32 %23, i32 %25;
    i32 %27 = add i32 %0, i32 9;
    i32 %28 = mul i32 %27, i32 %27;
    i32 %29 = add i32 %26, i32 %28;
    i32 %30 = add i32 %0, i32 10;
    i32 %31 = mul i32 %30, i32 %30;
    i32 %32 = add i32 %29, i32 %31;
    i32 %33 = add i32 %0, i32 11;
    i32 %34 = mul i32 %33, i32 %33;
    i32 %35 = add i32 %32, i32 %34;
    i32 %36 = add i32 %0, i32 12;
    i32 %37 = mul i32 %36, i32 %36;
    i32 %38 = add i32 %35, i32 %37;
    i32 %39 = add i32 %0, i32 13;
    i32 %40 = mul i32 %39, i32 %39;
    i32 %41 = add i32 %38, i32 %40;
    i32 %42 = add i32 %0, i32 14;
    i32 %43 = mul i32 %42, i32 %42;
    i32 %44 = add i32 %41, i32 %43;
    i32 %45 = add i32 %0, i32 15;
    i32 %46 = mul i32 %45, i32 %45;
    i32 %47 = add i32 %44, i32 %46;
    i32 %48 = add i32 %1, i32 %47;
    i32 %49 = add i32 %0, i32 16;
    i1 %50 = icmp slt i32 %49, i32 991;
    cbr i1 %50(prob = 0.98), ^for.body, ^for.body1;
  ^for.body1:
    i32 %51 = mul i32 %49, i32 %49;
    i32 %52 = add i32 %48, i32 %51;
    i32 %53 = add i32 %0, i32 17;
    i32 %54 = mul i32 %53, i32 %53;
    i32 %55 = add i32 %52, i32 %54;
    i32 %56 = add i32 %0, i32 18;
    i32 %57 = mul i32 %56, i32 %56;
    i32 %58 = add i32 %55, i32 %57;
    i32 %59 = add i32 %0, i32 19;
    i32 %60 = mul i32 %59, i32 %59;
    i32 %61 = add i32 %58, i32 %60;
    i32 %62 = add i32 %0, i32 20;
    i32 %63 = mul i32 %62, i32 %62;
    i32 %64 = add i32 %61, i32 %63;
    i32 %65 = add i32 %0, i32 21;
    i32 %66 = mul i32 %65, i32 %65;
    i32 %67 = add i32 %64, i32 %66;
    i32 %68 = add i32 %0, i32 22;
    i32 %69 = mul i32 %68, i32 %68;
    i32 %70 = add i32 %67, i32 %69;
    i32 %71 = add i32 %0, i32 23;
    i32 %72 = mul i32 %71, i32 %71;
    i32 %73 = add i32 %70, i32 %72;
    i32 %74 = add i32 %0, i32 24;
    i32 %75 = mul i32 %74, i32 %74;
    i32 %76 = add i32 %73, i32 %75;
    ubr ^for.body2;
  ^for.body2:
    i32 %77 = phi [^for.body1, i32 1000] [^for.body2, i32 %127];
    i32 %78 = phi [^for.body1, i32 %76] [^for.body2, i32 %126];
    i32 %79 = add i32 %77, i32 -16;
    i32 %80 = mul i32 %79, i32 16;
    i32 %81 = mul i32 %77, i32 16;
    i32 %82 = add i32 %81, i32 -1920;
    i32 %83 = add i32 %80, i32 %82;
    i32 %84 = add i32 %77, i32 -32;
    i32 %85 = mul i32 %84, i32 16;
    i32 %86 = add i32 %83, i32 %85;
    i32 %87 = add i32 %77, i32 -48;
    i32 %88 = mul i32 %87, i32 16;
    i32 %89 = add i32 %86, i32 %88;
    i32 %90 = add i32 %77, i32 -64;
    i32 %91 = mul i32 %90, i32 16;
    i32 %92 = add i32 %89, i32 %91;
    i32 %93 = add i32 %77, i32 -80;
    i32 %94 = mul i32 %93, i32 16;
    i32 %95 = add i32 %92, i32 %94;
    i32 %96 = add i32 %77, i32 -96;
    i32 %97 = mul i32 %96, i32 16;
    i32 %98 = add i32 %95, i32 %97;
    i32 %99 = add i32 %77, i32 -112;
    i32 %100 = mul i32 %99, i32 16;
    i32 %101 = add i32 %98, i32 %100;
    i32 %102 = add i32 %77, i32 -128;
    i32 %103 = mul i32 %102, i32 16;
    i32 %104 = add i32 %101, i32 %103;
    i32 %105 = add i32 %77, i32 -144;
    i32 %106 = mul i32 %105, i32 16;
    i32 %107 = add i32 %104, i32 %106;
    i32 %108 = add i32 %77, i32 -160;
    i32 %109 = mul i32 %108, i32 16;
    i32 %110 = add i32 %107, i32 %109;
    i32 %111 = add i32 %77, i32 -176;
    i32 %112 = mul i32 %111, i32 16;
    i32 %113 = add i32 %110, i32 %112;
    i32 %114 = add i32 %77, i32 -192;
    i32 %115 = mul i32 %114, i32 16;
    i32 %116 = add i32 %113, i32 %115;
    i32 %117 = add i32 %77, i32 -208;
    i32 %118 = mul i32 %117, i32 16;
    i32 %119 = add i32 %116, i32 %118;
    i32 %120 = add i32 %77, i32 -224;
    i32 %121 = mul i32 %120, i32 16;
    i32 %122 = add i32 %119, i32 %121;
    i32 %123 = add i32 %77, i32 -240;
    i32 %124 = mul i32 %123, i32 16;
    i32 %125 = add i32 %122, i32 %124;
    i32 %126 = add i32 %78, i32 %125;
    i32 %127 = add i32 %77, i32 -256;
    i1 %128 = icmp sgt i32 %127, i32 232;
    cbr i1 %128(prob = 0.67), ^for.body2, ^for.body3;
  ^for.body3:
    i32 %129 = add i32 %77, i32 -2300;
    i32 %130 = add i32 %126, i32 %129;
    i32 %131 = mul i32 %127, i32 16;
    i32 %132 = add i32 %130, i32 %131;
    i32 %133 = add i32 %77, i32 -272;
    i32 %134 = mul i32 %133, i32 16;
    i32 %135 = add i32 %132, i32 %134;
    i32 %136 = add i32 %77, i32 -288;
    i32 %137 = mul i32 %136, i32 16;
    i32 %138 = add i32 %135, i32 %137;
    i32 %139 = add i32 %77, i32 -304;
    i32 %140 = mul i32 %139, i32 16;
    i32 %141 = add i32 %138, i32 %140;
    i32 %142 = add i32 %77, i32 -320;
    i32 %143 = mul i32 %142, i32 16;
    i32 %144 = add i32 %141, i32 %143;
    i32 %145 = add i32 %77, i32 -336;
    i32 %146 = mul i32 %145, i32 16;
    i32 %147 = add i32 %144, i32 %146;
    i32 %148 = add i32 %77, i32 -352;
    i32 %149 = mul i32 %148, i32 16;
    i32 %150 = add i32 %147, i32 %149;
    i32 %151 = add i32 %77, i32 -368;
    i32 %152 = mul i32 %151, i32 16;
    i32 %153 = add i32 %150, i32 %152;
    i32 %154 = add i32 %77, i32 -384;
    i32 %155 = mul i32 %154, i32 16;
    i32 %156 = add i32 %153, i32 %155;
    i32 %157 = add i32 %77, i32 -400;
    i32 %158 = mul i32 %157, i32 16;
    i32 %159 = add i32 %156, i32 %158;
    i32 %160 = add i32 %77, i32 -416;
    i32 %161 = mul i32 %160, i32 16;
    i32 %162 = add i32 %159, i32 %161;
    i32 %163 = add i32 %77, i32 -432;
    i32 %164 = mul i32 %163, i32 16;
    i32 %165 = add i32 %162, i32 %164;
    i32 %166 = add i32 %77, i32 -448;
    i32 %167 = mul i32 %166, i32 16;
    i32 %168 = add i32 %165, i32 %167;
    i32 %169 = add i32 %77, i32 -464;
    i32 %170 = mul i32 %169, i32 16;
    i32 %171 = add i32 %168, i32 %170;
    i32 %172 = mul i32 %169, i32 7;
    i32 %173 = add i32 %171, i32 %172;
    call (i32) -> void @putint(i32 %173);
    ret i32 %173;
}
