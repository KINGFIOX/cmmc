internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
func @large() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 1999000);
    ret i32 1999000;
}
func @large_with_epilogue() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 5050);
    ret i32 5050;
}
func @small() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 10);
    ret i32 10;
}
func @small2() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 0);
    ret i32 0;
}
func @noop1() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 0);
    ret i32 0;
}
func @noop2() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 0);
    ret i32 0;
}
func @while1() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 105);
    ret i32 105;
}
func @while2() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 1240);
    ret i32 1240;
}
func @while3() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 528);
    ret i32 528;
}
func @while4() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 4032);
    ret i32 4032;
}
func @while5() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 6240);
    ret i32 6240;
}
func @while6() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 4888521);
    ret i32 4888521;
}
func @multi_loop() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    ubr ^for.body;
  ^for.body:
    i32 %0 = phi [^entry, i32 489600] [^for.body, i32 %101];
    i32 %1 = phi [^entry, i32 65280] [^for.body, i32 %98];
    i32 %2 = phi [^entry, i32 48960] [^for.body, i32 %92];
    i32 %3 = phi [^entry, i32 32640] [^for.body, i32 %91];
    i32 %4 = phi [^entry, i32 122400] [^for.body, i32 %100];
    i32 %5 = phi [^entry, i32 16320] [^for.body, i32 %97];
    i32 %6 = phi [^entry, i32 12240] [^for.body, i32 %94];
    i32 %7 = phi [^entry, i32 8160] [^for.body, i32 %93];
    i32 %8 = phi [^entry, i32 30600] [^for.body, i32 %99];
    i32 %9 = phi [^entry, i32 4080] [^for.body, i32 %96];
    i32 %10 = phi [^entry, i32 16129] [^for.body, i32 %88];
    i32 %11 = phi [^entry, i32 255] [^for.body, i32 %95];
    i32 %12 = phi [^entry, i32 127] [^for.body, i32 %89];
    i32 %13 = phi [^entry, i32 0] [^for.body, i32 %86];
    i32 %14 = add i32 %9, i32 240;
    i32 %15 = add i32 %10, i32 %14;
    i32 %16 = mul i32 %15, i32 16;
    i32 %17 = mul i32 %10, i32 16;
    i32 %18 = add i32 %17, i32 478720;
    i32 %19 = add i32 %16, i32 %18;
    i32 %20 = add i32 %7, i32 992;
    i32 %21 = add i32 %10, i32 %20;
    i32 %22 = mul i32 %21, i32 16;
    i32 %23 = add i32 %19, i32 %22;
    i32 %24 = add i32 %6, i32 2256;
    i32 %25 = add i32 %10, i32 %24;
    i32 %26 = mul i32 %25, i32 16;
    i32 %27 = add i32 %23, i32 %26;
    i32 %28 = add i32 %5, i32 4032;
    i32 %29 = add i32 %10, i32 %28;
    i32 %30 = mul i32 %29, i32 16;
    i32 %31 = add i32 %27, i32 %30;
    i32 %32 = add i32 %5, i32 6320;
    i32 %33 = add i32 %9, i32 %32;
    i32 %34 = add i32 %10, i32 %33;
    i32 %35 = mul i32 %34, i32 16;
    i32 %36 = add i32 %31, i32 %35;
    i32 %37 = add i32 %5, i32 9120;
    i32 %38 = add i32 %7, i32 %37;
    i32 %39 = add i32 %10, i32 %38;
    i32 %40 = mul i32 %39, i32 16;
    i32 %41 = add i32 %36, i32 %40;
    i32 %42 = add i32 %5, i32 12432;
    i32 %43 = add i32 %6, i32 %42;
    i32 %44 = add i32 %10, i32 %43;
    i32 %45 = mul i32 %44, i32 16;
    i32 %46 = add i32 %41, i32 %45;
    i32 %47 = add i32 %3, i32 16256;
    i32 %48 = add i32 %10, i32 %47;
    i32 %49 = mul i32 %48, i32 16;
    i32 %50 = add i32 %46, i32 %49;
    i32 %51 = add i32 %3, i32 20592;
    i32 %52 = add i32 %9, i32 %51;
    i32 %53 = add i32 %10, i32 %52;
    i32 %54 = mul i32 %53, i32 16;
    i32 %55 = add i32 %50, i32 %54;
    i32 %56 = add i32 %3, i32 25440;
    i32 %57 = add i32 %7, i32 %56;
    i32 %58 = add i32 %10, i32 %57;
    i32 %59 = mul i32 %58, i32 16;
    i32 %60 = add i32 %55, i32 %59;
    i32 %61 = add i32 %3, i32 30800;
    i32 %62 = add i32 %6, i32 %61;
    i32 %63 = add i32 %10, i32 %62;
    i32 %64 = mul i32 %63, i32 16;
    i32 %65 = add i32 %60, i32 %64;
    i32 %66 = add i32 %2, i32 36672;
    i32 %67 = add i32 %10, i32 %66;
    i32 %68 = mul i32 %67, i32 16;
    i32 %69 = add i32 %65, i32 %68;
    i32 %70 = add i32 %2, i32 43056;
    i32 %71 = add i32 %9, i32 %70;
    i32 %72 = add i32 %10, i32 %71;
    i32 %73 = mul i32 %72, i32 16;
    i32 %74 = add i32 %69, i32 %73;
    i32 %75 = add i32 %2, i32 49952;
    i32 %76 = add i32 %7, i32 %75;
    i32 %77 = add i32 %10, i32 %76;
    i32 %78 = mul i32 %77, i32 16;
    i32 %79 = add i32 %74, i32 %78;
    i32 %80 = add i32 %2, i32 57360;
    i32 %81 = add i32 %6, i32 %80;
    i32 %82 = add i32 %10, i32 %81;
    i32 %83 = mul i32 %82, i32 16;
    i32 %84 = add i32 %79, i32 %83;
    i32 %85 = add i32 %0, i32 %84;
    i32 %86 = add i32 %13, i32 %85;
    i32 %87 = add i32 %1, i32 65280;
    i32 %88 = add i32 %10, i32 %87;
    i32 %89 = add i32 %12, i32 256;
    i1 %90 = icmp slt i32 %89, i32 895;
    i32 %91 = add i32 %3, i32 65536;
    i32 %92 = add i32 %2, i32 98304;
    i32 %93 = add i32 %7, i32 16384;
    i32 %94 = add i32 %6, i32 24576;
    i32 %95 = add i32 %11, i32 512;
    i32 %96 = add i32 %9, i32 8192;
    i32 %97 = add i32 %5, i32 32768;
    i32 %98 = add i32 %1, i32 131072;
    i32 %99 = add i32 %8, i32 61440;
    i32 %100 = add i32 %4, i32 245760;
    i32 %101 = add i32 %0, i32 983040;
    cbr i1 %90(prob = 0.666667), ^for.body, ^for.body1;
  ^for.body1:
    i32 %102 = add i32 %4, i32 934524;
    i32 %103 = add i32 %86, i32 %102;
    i32 %104 = mul i32 %88, i32 16;
    i32 %105 = add i32 %103, i32 %104;
    i32 %106 = add i32 %9, i32 8432;
    i32 %107 = add i32 %88, i32 %106;
    i32 %108 = mul i32 %107, i32 16;
    i32 %109 = add i32 %105, i32 %108;
    i32 %110 = add i32 %7, i32 17376;
    i32 %111 = add i32 %88, i32 %110;
    i32 %112 = mul i32 %111, i32 16;
    i32 %113 = add i32 %109, i32 %112;
    i32 %114 = add i32 %6, i32 26832;
    i32 %115 = add i32 %88, i32 %114;
    i32 %116 = mul i32 %115, i32 16;
    i32 %117 = add i32 %113, i32 %116;
    i32 %118 = add i32 %5, i32 36800;
    i32 %119 = add i32 %88, i32 %118;
    i32 %120 = mul i32 %119, i32 16;
    i32 %121 = add i32 %117, i32 %120;
    i32 %122 = add i32 %5, i32 47280;
    i32 %123 = add i32 %9, i32 %122;
    i32 %124 = add i32 %88, i32 %123;
    i32 %125 = mul i32 %124, i32 16;
    i32 %126 = add i32 %121, i32 %125;
    i32 %127 = add i32 %11, i32 672;
    i32 %128 = mul i32 %127, i32 28;
    i32 %129 = add i32 %126, i32 %128;
    i32 %130 = add i32 %11, i32 704;
    i32 %131 = mul i32 %130, i32 8;
    i32 %132 = add i32 %129, i32 %131;
    i32 %133 = add i32 %5, i32 58272;
    i32 %134 = add i32 %88, i32 %133;
    i32 %135 = mul i32 %9, i32 2;
    i32 %136 = add i32 %134, i32 %135;
    i32 %137 = mul i32 %136, i32 9;
    i32 %138 = add i32 %132, i32 %137;
    i32 %139 = mul i32 %8, i32 2;
    i32 %140 = add i32 %138, i32 %139;
    call (i32) -> void @putint(i32 %140);
    ret i32 %140;
}
