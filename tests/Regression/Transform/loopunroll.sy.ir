internal func @putint(i32) -> void { NoMemoryRead NoMemoryWrite };
func @large() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 1999000);
    ret i32 1999000;
}
func @large_with_epilogue() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 5050);
    ret i32 5050;
}
func @small() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 10);
    ret i32 10;
}
func @small2() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 0);
    ret i32 0;
}
func @noop1() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 0);
    ret i32 0;
}
func @noop2() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 0);
    ret i32 0;
}
func @while1() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 105);
    ret i32 105;
}
func @while2() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 1240);
    ret i32 1240;
}
func @while3() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 528);
    ret i32 528;
}
func @while4() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 4032);
    ret i32 4032;
}
func @while5() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 6240);
    ret i32 6240;
}
func @while6() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    call (i32) -> void @putint(i32 4888521);
    ret i32 4888521;
}
func @multi_loop() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
  ^entry:
    ubr ^for.body;
  ^for.body:
    i32 %0 = phi [^entry, i32 30600] [^for.body, i32 %40];
    i32 %1 = phi [^entry, i32 16129] [^for.body, i32 %36];
    i32 %2 = phi [^entry, i32 255] [^for.body, i32 %39];
    i32 %3 = phi [^entry, i32 127] [^for.body, i32 %37];
    i32 %4 = phi [^entry, i32 0] [^for.body, i32 %29];
    i32 %5 = add i32 %2, i32 32;
    i32 %6 = mul i32 %5, i32 16;
    i32 %7 = mul i32 %2, i32 16;
    i32 %8 = add i32 %7, i32 480;
    i32 %9 = add i32 %6, i32 %8;
    i32 %10 = add i32 %1, i32 %9;
    i32 %11 = mul i32 %10, i32 16;
    i32 %12 = add i32 %7, i32 240;
    i32 %13 = add i32 %1, i32 %12;
    i32 %14 = mul i32 %13, i32 16;
    i32 %15 = mul i32 %1, i32 16;
    i32 %16 = add i32 %15, i32 27520;
    i32 %17 = add i32 %14, i32 %16;
    i32 %18 = add i32 %11, i32 %17;
    i32 %19 = add i32 %7, i32 720;
    i32 %20 = add i32 %6, i32 %19;
    i32 %21 = add i32 %2, i32 64;
    i32 %22 = mul i32 %21, i32 16;
    i32 %23 = add i32 %20, i32 %22;
    i32 %24 = add i32 %1, i32 %23;
    i32 %25 = mul i32 %24, i32 16;
    i32 %26 = add i32 %18, i32 %25;
    i32 %27 = mul i32 %0, i32 4;
    i32 %28 = add i32 %26, i32 %27;
    i32 %29 = add i32 %4, i32 %28;
    i32 %30 = add i32 %7, i32 960;
    i32 %31 = add i32 %6, i32 %30;
    i32 %32 = add i32 %22, i32 %31;
    i32 %33 = add i32 %2, i32 96;
    i32 %34 = mul i32 %33, i32 16;
    i32 %35 = add i32 %32, i32 %34;
    i32 %36 = add i32 %1, i32 %35;
    i32 %37 = add i32 %3, i32 64;
    i1 %38 = icmp slt i32 %37, i32 959;
    i32 %39 = add i32 %2, i32 128;
    i32 %40 = add i32 %0, i32 15360;
    cbr i1 %38(prob = 0.923077), ^for.body, ^for.body1;
  ^for.body1:
    i32 %41 = add i32 %0, i32 523004;
    i32 %42 = add i32 %40, i32 %41;
    i32 %43 = add i32 %29, i32 %42;
    i32 %44 = mul i32 %36, i32 16;
    i32 %45 = add i32 %43, i32 %44;
    i32 %46 = mul i32 %39, i32 16;
    i32 %47 = add i32 %36, i32 240;
    i32 %48 = add i32 %46, i32 %47;
    i32 %49 = mul i32 %48, i32 16;
    i32 %50 = add i32 %45, i32 %49;
    i32 %51 = add i32 %2, i32 160;
    i32 %52 = mul i32 %51, i32 28;
    i32 %53 = add i32 %50, i32 %52;
    i32 %54 = add i32 %2, i32 192;
    i32 %55 = mul i32 %54, i32 8;
    i32 %56 = add i32 %53, i32 %55;
    i32 %57 = add i32 %36, i32 480;
    i32 %58 = add i32 %46, i32 %57;
    i32 %59 = mul i32 %51, i32 16;
    i32 %60 = add i32 %58, i32 %59;
    i32 %61 = mul i32 %60, i32 9;
    i32 %62 = add i32 %56, i32 %61;
    call (i32) -> void @putint(i32 %62);
    ret i32 %62;
}
