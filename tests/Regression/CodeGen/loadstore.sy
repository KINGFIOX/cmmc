int load(int x[], int idx) {
    return x[idx];
}
int8_t load_byte(int8_t x[], int idx) {
    return x[idx];
}
float load_float(float x[], int idx) {
    return x[idx];
}
void store(int x[], int idx, int y) {
    x[idx] = y;
}
void store_float(float x[], int idx, float y) {
    x[idx] = y;
}
void store_float_constant(float x[], int idx) {
    x[idx] = 1.0;
}
int gep_const(int x[]) {
    return x[3];
}
int gep1(int x[], int y) {
    return x[y];
}
int gep2(int x[], int y) {
    return x[y + 3];
}
int gepseq(int x[], int y) {
    return x[y] + x[y + 1] + x[y + 2] + x[y + 3];
}
int lb(char x[]) {
    return x[1];
}
void sb(char x[], int y) {
    x[1] = y;
}
int y;
int arr[100];
int global_addressing_scalar() {
    return y;
}
int global_addressing_array(int x) {
    return arr[x];
}
void memset_impl(int n) {
    for(int i = 0; i < n; ++i) {
        arr[i] = 0;
    }
}
void fused_store() {
    for(int i = 0; i < 16; ++i)
        arr[i] = i;
}
int x[2];
void merge_store(int y, int z) {
    x[0] = y;
    x[1] = z;
}
int src[4], dst[2];
void copy1() {
    src[0] = dst[0];
    src[1] = dst[1];
}
void copy2() {
    src[2] = src[0];
    src[3] = src[1];
}
