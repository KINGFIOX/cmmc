//This file is automatically generated by llvm2c from llvm/test/CodeGen/RISCV/float-select-icmp

// function declarations
float select_icmp_eq(uint32_t var0, uint32_t var1, float var2, float var3);
float select_icmp_ne(uint32_t var0, uint32_t var1, float var2, float var3);
float select_icmp_sge(uint32_t var0, uint32_t var1, float var2, float var3);
float select_icmp_sgt(uint32_t var0, uint32_t var1, float var2, float var3);
float select_icmp_sgt_zero(uint32_t var0);
float select_icmp_sle(uint32_t var0, uint32_t var1, float var2, float var3);
float select_icmp_slt(uint32_t var0, uint32_t var1, float var2, float var3);
float select_icmp_slt_one(uint32_t var0);
float select_icmp_uge(uint32_t var0, uint32_t var1, float var2, float var3);
float select_icmp_ugt(uint32_t var0, uint32_t var1, float var2, float var3);
float select_icmp_ule(uint32_t var0, uint32_t var1, float var2, float var3);
float select_icmp_ult(uint32_t var0, uint32_t var1, float var2, float var3);

float select_icmp_eq(uint32_t var0, uint32_t var1, float var2, float var3){
    block0:
    return (var0 == var1) ? var2 : var3;
}

float select_icmp_ne(uint32_t var0, uint32_t var1, float var2, float var3){
    block0:
    return (var0 != var1) ? var2 : var3;
}

float select_icmp_sge(uint32_t var0, uint32_t var1, float var2, float var3){
    block0:
    return (((int)var0) >= ((int)var1)) ? var2 : var3;
}

float select_icmp_sgt(uint32_t var0, uint32_t var1, float var2, float var3){
    block0:
    return (((int)var0) > ((int)var1)) ? var2 : var3;
}

float select_icmp_sgt_zero(uint32_t var0){
    block0:
    return (((int)var0) > ((int)0)) ? 0.0E+0 : 1.0E+0;
}

float select_icmp_sle(uint32_t var0, uint32_t var1, float var2, float var3){
    block0:
    return (((int)var0) <= ((int)var1)) ? var2 : var3;
}

float select_icmp_slt(uint32_t var0, uint32_t var1, float var2, float var3){
    block0:
    return (((int)var0) < ((int)var1)) ? var2 : var3;
}

float select_icmp_slt_one(uint32_t var0){
    block0:
    return (((int)var0) < ((int)1)) ? 1.0E+0 : 0.0E+0;
}

float select_icmp_uge(uint32_t var0, uint32_t var1, float var2, float var3){
    block0:
    return (var0 >= var1) ? var2 : var3;
}

float select_icmp_ugt(uint32_t var0, uint32_t var1, float var2, float var3){
    block0:
    return (var0 > var1) ? var2 : var3;
}

float select_icmp_ule(uint32_t var0, uint32_t var1, float var2, float var3){
    block0:
    return (var0 <= var1) ? var2 : var3;
}

float select_icmp_ult(uint32_t var0, uint32_t var1, float var2, float var3){
    block0:
    return (var0 < var1) ? var2 : var3;
}

