//This file is automatically generated by llvm2c from llvm/test/CodeGen/ARM/sat-to-bitop

// function declarations
uint32_t no_sat0_incorrect_constant(uint32_t var0);
uint32_t no_sat0_incorrect_variable(uint32_t var0, uint32_t var1);
uint16_t sat0_base_16bit(uint16_t var0);
uint32_t sat0_base_32bit(uint32_t var0);
uint8_t sat0_base_8bit(uint8_t var0);
uint32_t sat0_lower_1(uint32_t var0);
uint16_t sat1_base_16bit(uint16_t var0);
uint32_t sat1_base_32bit(uint32_t var0);
uint8_t sat1_base_8bit(uint8_t var0);
uint32_t sat1_lower_1(uint32_t var0);

uint32_t no_sat0_incorrect_constant(uint32_t var0){
    block0:
    return (((int)var0) < ((int)0)) ? -1 : var0;
}

uint32_t no_sat0_incorrect_variable(uint32_t var0, uint32_t var1){
    block0:
    return (((int)var0) < ((int)0)) ? 0 : var1;
}

uint16_t sat0_base_16bit(uint16_t var0){
    block0:
    return (((int16_t)var0) < ((int16_t)0)) ? 0 : var0;
}

uint32_t sat0_base_32bit(uint32_t var0){
    block0:
    return (((int)var0) < ((int)0)) ? 0 : var0;
}

uint8_t sat0_base_8bit(uint8_t var0){
    block0:
    return (((char)var0) < ((char)0)) ? 0 : var0;
}

uint32_t sat0_lower_1(uint32_t var0){
    block0:
    return (((int)var0) > ((int)0)) ? var0 : 0;
}

uint16_t sat1_base_16bit(uint16_t var0){
    block0:
    return (((int16_t)var0) < ((int16_t)-1)) ? -1 : var0;
}

uint32_t sat1_base_32bit(uint32_t var0){
    block0:
    return (((int)var0) < ((int)-1)) ? -1 : var0;
}

uint8_t sat1_base_8bit(uint8_t var0){
    block0:
    return (((char)var0) < ((char)-1)) ? -1 : var0;
}

uint32_t sat1_lower_1(uint32_t var0){
    block0:
    return (((int)var0) > ((int)-1)) ? var0 : -1;
}

