//This file is automatically generated by llvm2c from llvm/test/CodeGen/X86/lea-opt-cse3

// function declarations
uint32_t foo(uint32_t var0, uint32_t var1);
uint32_t foo1(uint32_t var0, uint32_t var1);
uint32_t foo1_mult_basic_blocks(uint32_t var0, uint32_t var1);
uint32_t foo1_mult_basic_blocks_illegal_scale(uint32_t var0, uint32_t var1);

uint32_t foo(uint32_t var0, uint32_t var1){
    uint32_t var2;
    block0:
    var2 = (var0 + 4);
    return ((int)(var2 + (var1 << ((uint32_t)1)))) * ((int)(var2 + (var1 << ((uint32_t)2))));
}

uint32_t foo1(uint32_t var0, uint32_t var1){
    uint32_t var2;
    block0:
    var2 = (var0 + 4);
    return ((int)(var2 + (var1 << ((uint32_t)2)))) * ((int)(var2 + (var1 << ((uint32_t)3))));
}

uint32_t foo1_mult_basic_blocks(uint32_t var0, uint32_t var1){
    uint32_t var2;
    uint32_t var4_phi;
    int var3;
    block0:
    var2 = ((var0 + 4) + (var1 << ((uint32_t)2)));
    if (var2 != 10) {
        var3 = (((int)var2) * ((int)((var0 + 4) + (var1 << ((uint32_t)3)))));
        var4_phi = var3;
        return var4_phi;
    } else {
        var4_phi = 0;
        return var4_phi;
    }
}

uint32_t foo1_mult_basic_blocks_illegal_scale(uint32_t var0, uint32_t var1){
    uint32_t var2;
    uint32_t var4_phi;
    int var3;
    block0:
    var2 = ((var0 + 4) + (var1 << ((uint32_t)1)));
    if (var2 != 10) {
        var3 = (((int)var2) * ((int)((var0 + 4) + (var1 << ((uint32_t)3)))));
        var4_phi = var3;
        return var4_phi;
    } else {
        var4_phi = 0;
        return var4_phi;
    }
}

