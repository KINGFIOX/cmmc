//This file is automatically generated by llvm2c from llvm/test/CodeGen/X86/8bit_cmov_of_trunc_promotion

// function declarations
uint8_t neg_only_one_truncation(uint32_t var0, uint8_t var1, uint32_t var2);
uint8_t neg_type_mismatch(uint32_t var0, uint16_t var1, uint32_t var2);
uint8_t negative_CopyFromReg(uint32_t var0, uint32_t var1, uint32_t var2);
uint8_t negative_CopyFromRegs(uint32_t var0, uint32_t var1);
uint8_t t0(uint32_t var0, uint32_t var1, uint32_t var2);

uint8_t neg_only_one_truncation(uint32_t var0, uint8_t var1, uint32_t var2){
    uint8_t var3;
    uint8_t var4;
    block0:
    var3 = (var1 + ((uint8_t)var2));
    var4 = ((uint8_t)(var0 + var2));
    return (((char)var4) > ((char)var3)) ? var4 : var3;
}

uint8_t neg_type_mismatch(uint32_t var0, uint16_t var1, uint32_t var2){
    uint8_t var3;
    uint8_t var4;
    block0:
    var3 = ((uint8_t)(var0 + var2));
    var4 = ((uint8_t)(var1 + ((uint16_t)var2)));
    return (((char)var3) > ((char)var4)) ? var3 : var4;
}

uint8_t negative_CopyFromReg(uint32_t var0, uint32_t var1, uint32_t var2){
    uint8_t var3;
    uint8_t var4;
    block0:
    var3 = ((uint8_t)var0);
    var4 = ((uint8_t)(var1 + var2));
    return (((char)var3) > ((char)var4)) ? var3 : var4;
}

uint8_t negative_CopyFromRegs(uint32_t var0, uint32_t var1){
    uint8_t var2;
    uint8_t var3;
    block0:
    var2 = ((uint8_t)var0);
    var3 = ((uint8_t)var1);
    return (((char)var2) > ((char)var3)) ? var2 : var3;
}

uint8_t t0(uint32_t var0, uint32_t var1, uint32_t var2){
    uint8_t var3;
    uint8_t var4;
    block0:
    var3 = ((uint8_t)(var0 + var2));
    var4 = ((uint8_t)(var1 + var2));
    return (((char)var3) > ((char)var4)) ? var3 : var4;
}

