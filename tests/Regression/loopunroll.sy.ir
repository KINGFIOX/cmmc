internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse Entry } {
^entry:
    ubr ^for.header;
^for.header:
    i32 %0 = phi [^entry, i32 0] [^for.body, i32 %4];
    i32 %1 = phi [^entry, i32 0] [^for.body, i32 %3];
    i1 %2 = scmp lt i32 %0, i32 2000;
    cbr i1 %2(prob = 0.97), ^for.body, ^for.header1;
^for.body:
    i32 %3 = add i32 %1, i32 %0;
    i32 %4 = add i32 %0, i32 1;
    ubr ^for.header;
^for.header1:
    i32 %5 = phi [^for.header, i32 0] [^for.body1, i32 %9];
    i32 %6 = phi [^for.header, i32 %1] [^for.body1, i32 %8];
    i1 %7 = scmp lt i32 %5, i32 101;
    cbr i1 %7(prob = 0.97), ^for.body1, ^for.header2;
^for.body1:
    i32 %8 = add i32 %6, i32 %5;
    i32 %9 = add i32 %5, i32 1;
    ubr ^for.header1;
^for.header2:
    i32 %10 = phi [^for.header1, i32 0] [^for.body2, i32 %14];
    i32 %11 = phi [^for.header1, i32 %6] [^for.body2, i32 %13];
    i1 %12 = scmp lt i32 %10, i32 5;
    cbr i1 %12(prob = 0.97), ^for.body2, ^for.header3;
^for.body2:
    i32 %13 = add i32 %11, i32 %10;
    i32 %14 = add i32 %10, i32 1;
    ubr ^for.header2;
^for.header3:
    i32 %15 = phi [^for.header2, i32 0] [^for.body3, i32 %19];
    i32 %16 = phi [^for.header2, i32 %11] [^for.body3, i32 %18];
    i1 %17 = scmp lt i32 %15, i32 1;
    cbr i1 %17(prob = 0.97), ^for.body3, ^for.header4;
^for.body3:
    i32 %18 = add i32 %16, i32 %15;
    i32 %19 = add i32 %15, i32 1;
    ubr ^for.header3;
^for.header4:
    i32 %20 = phi [^for.header3, i32 0] [^for.body4, i32 %24];
    i32 %21 = phi [^for.header3, i32 %16] [^for.body4, i32 %23];
    i1 %22 = scmp lt i32 %20, i32 0;
    cbr i1 %22(prob = 0.97), ^for.body4, ^for.header5;
^for.body4:
    i32 %23 = add i32 %21, i32 %20;
    i32 %24 = add i32 %20, i32 1;
    ubr ^for.header4;
^for.header5:
    i32 %25 = phi [^for.header4, i32 0] [^for.body5, i32 %29];
    i32 %26 = phi [^for.header4, i32 %21] [^for.body5, i32 %28];
    i1 %27 = scmp lt i32 %25, i32 -1;
    cbr i1 %27(prob = 0.97), ^for.body5, ^b;
^for.body5:
    i32 %28 = add i32 %26, i32 %25;
    i32 %29 = add i32 %25, i32 1;
    ubr ^for.header5;
^b:
    i32 %30 = add i32 %26, i32 1873;
    ubr ^while.body;
^while.body:
    i32 %31 = phi [^b, i32 %30] [^while.body, i32 %79];
    i32 %32 = phi [^b, i32 0] [^while.body, i32 %80];
    i32 %33 = mul i32 %32, i32 2;
    i32 %34 = add i32 %32, i32 1;
    i32 %35 = mul i32 %34, i32 2;
    i32 %36 = add i32 %32, i32 2;
    i32 %37 = mul i32 %36, i32 2;
    i32 %38 = add i32 %32, i32 3;
    i32 %39 = mul i32 %38, i32 2;
    i32 %40 = add i32 %32, i32 4;
    i32 %41 = mul i32 %40, i32 2;
    i32 %42 = add i32 %32, i32 5;
    i32 %43 = mul i32 %42, i32 2;
    i32 %44 = add i32 %32, i32 6;
    i32 %45 = mul i32 %44, i32 2;
    i32 %46 = add i32 %32, i32 7;
    i32 %47 = mul i32 %46, i32 2;
    i32 %48 = add i32 %32, i32 8;
    i32 %49 = mul i32 %48, i32 2;
    i32 %50 = add i32 %32, i32 9;
    i32 %51 = mul i32 %50, i32 2;
    i32 %52 = add i32 %32, i32 10;
    i32 %53 = mul i32 %52, i32 2;
    i32 %54 = add i32 %32, i32 11;
    i32 %55 = mul i32 %54, i32 2;
    i32 %56 = add i32 %32, i32 12;
    i32 %57 = mul i32 %56, i32 2;
    i32 %58 = add i32 %32, i32 13;
    i32 %59 = mul i32 %58, i32 2;
    i32 %60 = add i32 %32, i32 14;
    i32 %61 = mul i32 %60, i32 2;
    i32 %62 = add i32 %32, i32 15;
    i32 %63 = mul i32 %62, i32 2;
    i32 %64 = add i32 %31, i32 %33;
    i32 %65 = add i32 %64, i32 %35;
    i32 %66 = add i32 %65, i32 %37;
    i32 %67 = add i32 %66, i32 %39;
    i32 %68 = add i32 %67, i32 %41;
    i32 %69 = add i32 %68, i32 %43;
    i32 %70 = add i32 %69, i32 %45;
    i32 %71 = add i32 %70, i32 %47;
    i32 %72 = add i32 %71, i32 %49;
    i32 %73 = add i32 %72, i32 %51;
    i32 %74 = add i32 %73, i32 %53;
    i32 %75 = add i32 %74, i32 %55;
    i32 %76 = add i32 %75, i32 %57;
    i32 %77 = add i32 %76, i32 %59;
    i32 %78 = add i32 %77, i32 %61;
    i32 %79 = add i32 %78, i32 %63;
    i32 %80 = add i32 %32, i32 16;
    i1 %81 = scmp lt i32 %80, i32 64;
    cbr i1 %81(prob = 0.75), ^while.body, ^while.guard;
^while.guard:
    i1 %82 = scmp lt i32 %80, i32 65;
    cbr i1 %82(prob = 0.97), ^super.header, ^while.guard1;
^super.header:
    i32 %83 = phi [^while.guard, i32 %79] [^while.body1, i32 %136];
    i32 %84 = phi [^while.guard, i32 %80] [^while.body1, i32 %85];
    i32 %85 = add i32 %84, i32 16;
    i1 %86 = scmp lt i32 %85, i32 65;
    cbr i1 %86(prob = 0.67), ^while.body1, ^while.body2;
^while.guard1:
    i32 %87 = phi [^while.guard, i32 %80] [^while.body2, i32 %141];
    i32 %88 = phi [^while.guard, i32 %79] [^while.body2, i32 %140];
    i1 %89 = scmp lt i32 %87, i32 67;
    cbr i1 %89(prob = 0.97), ^super.header1, ^b1;
^while.body1:
    i32 %90 = mul i32 %84, i32 3;
    i32 %91 = add i32 %84, i32 1;
    i32 %92 = mul i32 %91, i32 3;
    i32 %93 = add i32 %84, i32 2;
    i32 %94 = mul i32 %93, i32 3;
    i32 %95 = add i32 %84, i32 3;
    i32 %96 = mul i32 %95, i32 3;
    i32 %97 = add i32 %84, i32 4;
    i32 %98 = mul i32 %97, i32 3;
    i32 %99 = add i32 %84, i32 5;
    i32 %100 = mul i32 %99, i32 3;
    i32 %101 = add i32 %84, i32 6;
    i32 %102 = mul i32 %101, i32 3;
    i32 %103 = add i32 %84, i32 7;
    i32 %104 = mul i32 %103, i32 3;
    i32 %105 = add i32 %84, i32 8;
    i32 %106 = mul i32 %105, i32 3;
    i32 %107 = add i32 %84, i32 9;
    i32 %108 = mul i32 %107, i32 3;
    i32 %109 = add i32 %84, i32 10;
    i32 %110 = mul i32 %109, i32 3;
    i32 %111 = add i32 %84, i32 11;
    i32 %112 = mul i32 %111, i32 3;
    i32 %113 = add i32 %84, i32 12;
    i32 %114 = mul i32 %113, i32 3;
    i32 %115 = add i32 %84, i32 13;
    i32 %116 = mul i32 %115, i32 3;
    i32 %117 = add i32 %84, i32 14;
    i32 %118 = mul i32 %117, i32 3;
    i32 %119 = add i32 %84, i32 15;
    i32 %120 = mul i32 %119, i32 3;
    i32 %121 = add i32 %83, i32 %90;
    i32 %122 = add i32 %121, i32 %92;
    i32 %123 = add i32 %122, i32 %94;
    i32 %124 = add i32 %123, i32 %96;
    i32 %125 = add i32 %124, i32 %98;
    i32 %126 = add i32 %125, i32 %100;
    i32 %127 = add i32 %126, i32 %102;
    i32 %128 = add i32 %127, i32 %104;
    i32 %129 = add i32 %128, i32 %106;
    i32 %130 = add i32 %129, i32 %108;
    i32 %131 = add i32 %130, i32 %110;
    i32 %132 = add i32 %131, i32 %112;
    i32 %133 = add i32 %132, i32 %114;
    i32 %134 = add i32 %133, i32 %116;
    i32 %135 = add i32 %134, i32 %118;
    i32 %136 = add i32 %135, i32 %120;
    ubr ^super.header;
^while.body2:
    i32 %137 = phi [^super.header, i32 %83] [^while.body2, i32 %140];
    i32 %138 = phi [^super.header, i32 %84] [^while.body2, i32 %141];
    i32 %139 = mul i32 %138, i32 3;
    i32 %140 = add i32 %137, i32 %139;
    i32 %141 = add i32 %138, i32 1;
    i1 %142 = scmp lt i32 %141, i32 65;
    cbr i1 %142(prob = 0.97), ^while.body2, ^while.guard1;
^super.header1:
    i32 %143 = phi [^while.guard1, i32 %88] [^while.body3, i32 %210];
    i32 %144 = phi [^while.guard1, i32 %87] [^while.body3, i32 %145];
    i32 %145 = add i32 %144, i32 16;
    i1 %146 = scmp lt i32 %145, i32 67;
    cbr i1 %146(prob = 0.67), ^while.body3, ^while.body4;
^b1:
    i32 %147 = phi [^while.guard1, i32 %88] [^while.body4, i32 %215];
    call (i32) -> void @putint(i32 %147);
    ret i32 %147;
^while.body3:
    i32 %148 = mul i32 %144, i32 %144;
    i32 %149 = mul i32 %144, i32 %148;
    i32 %150 = add i32 %144, i32 1;
    i32 %151 = mul i32 %150, i32 %150;
    i32 %152 = mul i32 %150, i32 %151;
    i32 %153 = add i32 %144, i32 2;
    i32 %154 = mul i32 %153, i32 %153;
    i32 %155 = mul i32 %153, i32 %154;
    i32 %156 = add i32 %144, i32 3;
    i32 %157 = mul i32 %156, i32 %156;
    i32 %158 = mul i32 %156, i32 %157;
    i32 %159 = add i32 %144, i32 4;
    i32 %160 = mul i32 %159, i32 %159;
    i32 %161 = mul i32 %159, i32 %160;
    i32 %162 = add i32 %144, i32 5;
    i32 %163 = mul i32 %162, i32 %162;
    i32 %164 = mul i32 %162, i32 %163;
    i32 %165 = add i32 %144, i32 6;
    i32 %166 = mul i32 %165, i32 %165;
    i32 %167 = mul i32 %165, i32 %166;
    i32 %168 = add i32 %144, i32 7;
    i32 %169 = mul i32 %168, i32 %168;
    i32 %170 = mul i32 %168, i32 %169;
    i32 %171 = add i32 %144, i32 8;
    i32 %172 = mul i32 %171, i32 %171;
    i32 %173 = mul i32 %171, i32 %172;
    i32 %174 = add i32 %144, i32 9;
    i32 %175 = mul i32 %174, i32 %174;
    i32 %176 = mul i32 %174, i32 %175;
    i32 %177 = add i32 %144, i32 10;
    i32 %178 = mul i32 %177, i32 %177;
    i32 %179 = mul i32 %177, i32 %178;
    i32 %180 = add i32 %144, i32 11;
    i32 %181 = mul i32 %180, i32 %180;
    i32 %182 = mul i32 %180, i32 %181;
    i32 %183 = add i32 %144, i32 12;
    i32 %184 = mul i32 %183, i32 %183;
    i32 %185 = mul i32 %183, i32 %184;
    i32 %186 = add i32 %144, i32 13;
    i32 %187 = mul i32 %186, i32 %186;
    i32 %188 = mul i32 %186, i32 %187;
    i32 %189 = add i32 %144, i32 14;
    i32 %190 = mul i32 %189, i32 %189;
    i32 %191 = mul i32 %189, i32 %190;
    i32 %192 = add i32 %144, i32 15;
    i32 %193 = mul i32 %192, i32 %192;
    i32 %194 = mul i32 %192, i32 %193;
    i32 %195 = add i32 %143, i32 %149;
    i32 %196 = add i32 %195, i32 %152;
    i32 %197 = add i32 %196, i32 %155;
    i32 %198 = add i32 %197, i32 %158;
    i32 %199 = add i32 %198, i32 %161;
    i32 %200 = add i32 %199, i32 %164;
    i32 %201 = add i32 %200, i32 %167;
    i32 %202 = add i32 %201, i32 %170;
    i32 %203 = add i32 %202, i32 %173;
    i32 %204 = add i32 %203, i32 %176;
    i32 %205 = add i32 %204, i32 %179;
    i32 %206 = add i32 %205, i32 %182;
    i32 %207 = add i32 %206, i32 %185;
    i32 %208 = add i32 %207, i32 %188;
    i32 %209 = add i32 %208, i32 %191;
    i32 %210 = add i32 %209, i32 %194;
    ubr ^super.header1;
^while.body4:
    i32 %211 = phi [^super.header1, i32 %143] [^while.body4, i32 %215];
    i32 %212 = phi [^super.header1, i32 %144] [^while.body4, i32 %216];
    i32 %213 = mul i32 %212, i32 %212;
    i32 %214 = mul i32 %212, i32 %213;
    i32 %215 = add i32 %211, i32 %214;
    i32 %216 = add i32 %212, i32 1;
    i1 %217 = scmp lt i32 %216, i32 67;
    cbr i1 %217(prob = 0.97), ^while.body4, ^b1;
}
