internal func @putint() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
^entry:
    ubr ^for.body;
^for.body:
    i32 %0 = phi [^entry, i32 0] [^for.body, i32 %49];
    i32 %1 = phi [^entry, i32 0] [^for.body, i32 %50];
    i32 %2 = mul i32 %1, i32 16;
    i32 %3 = add i32 %1, i32 16;
    i32 %4 = mul i32 %3, i32 16;
    i32 %5 = add i32 %1, i32 32;
    i32 %6 = mul i32 %5, i32 16;
    i32 %7 = add i32 %1, i32 48;
    i32 %8 = mul i32 %7, i32 16;
    i32 %9 = add i32 %1, i32 64;
    i32 %10 = mul i32 %9, i32 16;
    i32 %11 = add i32 %1, i32 80;
    i32 %12 = mul i32 %11, i32 16;
    i32 %13 = add i32 %1, i32 96;
    i32 %14 = mul i32 %13, i32 16;
    i32 %15 = add i32 %1, i32 112;
    i32 %16 = mul i32 %15, i32 16;
    i32 %17 = add i32 %1, i32 128;
    i32 %18 = mul i32 %17, i32 16;
    i32 %19 = add i32 %1, i32 144;
    i32 %20 = mul i32 %19, i32 16;
    i32 %21 = add i32 %1, i32 160;
    i32 %22 = mul i32 %21, i32 16;
    i32 %23 = add i32 %1, i32 176;
    i32 %24 = mul i32 %23, i32 16;
    i32 %25 = add i32 %1, i32 192;
    i32 %26 = mul i32 %25, i32 16;
    i32 %27 = add i32 %1, i32 208;
    i32 %28 = mul i32 %27, i32 16;
    i32 %29 = add i32 %1, i32 224;
    i32 %30 = mul i32 %29, i32 16;
    i32 %31 = add i32 %1, i32 240;
    i32 %32 = mul i32 %31, i32 16;
    i32 %33 = add i32 %0, i32 1920;
    i32 %34 = add i32 %33, i32 %2;
    i32 %35 = add i32 %34, i32 %4;
    i32 %36 = add i32 %35, i32 %6;
    i32 %37 = add i32 %36, i32 %8;
    i32 %38 = add i32 %37, i32 %10;
    i32 %39 = add i32 %38, i32 %12;
    i32 %40 = add i32 %39, i32 %14;
    i32 %41 = add i32 %40, i32 %16;
    i32 %42 = add i32 %41, i32 %18;
    i32 %43 = add i32 %42, i32 %20;
    i32 %44 = add i32 %43, i32 %22;
    i32 %45 = add i32 %44, i32 %24;
    i32 %46 = add i32 %45, i32 %26;
    i32 %47 = add i32 %46, i32 %28;
    i32 %48 = add i32 %47, i32 %30;
    i32 %49 = add i32 %48, i32 %32;
    i32 %50 = add i32 %1, i32 256;
    i1 %51 = scmp lt i32 %50, i32 1792;
    cbr i1 %51(prob = 0.86), ^for.body, ^for.body1;
^for.body1:
    i32 %52 = mul i32 %50, i32 16;
    i32 %53 = add i32 %1, i32 272;
    i32 %54 = mul i32 %53, i32 16;
    i32 %55 = add i32 %1, i32 288;
    i32 %56 = mul i32 %55, i32 16;
    i32 %57 = add i32 %1, i32 304;
    i32 %58 = mul i32 %57, i32 16;
    i32 %59 = add i32 %1, i32 320;
    i32 %60 = mul i32 %59, i32 16;
    i32 %61 = add i32 %1, i32 336;
    i32 %62 = mul i32 %61, i32 16;
    i32 %63 = add i32 %1, i32 352;
    i32 %64 = mul i32 %63, i32 16;
    i32 %65 = add i32 %1, i32 368;
    i32 %66 = mul i32 %65, i32 16;
    i32 %67 = add i32 %1, i32 384;
    i32 %68 = mul i32 %67, i32 16;
    i32 %69 = add i32 %1, i32 400;
    i32 %70 = mul i32 %69, i32 16;
    i32 %71 = add i32 %1, i32 416;
    i32 %72 = mul i32 %71, i32 16;
    i32 %73 = add i32 %1, i32 432;
    i32 %74 = mul i32 %73, i32 16;
    i32 %75 = add i32 %1, i32 448;
    i32 %76 = mul i32 %75, i32 16;
    i32 %77 = add i32 %49, i32 8493;
    i32 %78 = add i32 %77, i32 %52;
    i32 %79 = add i32 %78, i32 %54;
    i32 %80 = add i32 %79, i32 %56;
    i32 %81 = add i32 %80, i32 %58;
    i32 %82 = add i32 %81, i32 %60;
    i32 %83 = add i32 %82, i32 %62;
    i32 %84 = add i32 %83, i32 %64;
    i32 %85 = add i32 %84, i32 %66;
    i32 %86 = add i32 %85, i32 %68;
    i32 %87 = add i32 %86, i32 %70;
    i32 %88 = add i32 %87, i32 %72;
    i32 %89 = add i32 %88, i32 %74;
    i32 %90 = add i32 %89, i32 %76;
    ubr ^while.body;
^while.body:
    i32 %91 = phi [^for.body1, i32 %90] [^while.body, i32 %139];
    i32 %92 = phi [^for.body1, i32 0] [^while.body, i32 %140];
    i32 %93 = mul i32 %92, i32 2;
    i32 %94 = add i32 %92, i32 1;
    i32 %95 = mul i32 %94, i32 2;
    i32 %96 = add i32 %92, i32 2;
    i32 %97 = mul i32 %96, i32 2;
    i32 %98 = add i32 %92, i32 3;
    i32 %99 = mul i32 %98, i32 2;
    i32 %100 = add i32 %92, i32 4;
    i32 %101 = mul i32 %100, i32 2;
    i32 %102 = add i32 %92, i32 5;
    i32 %103 = mul i32 %102, i32 2;
    i32 %104 = add i32 %92, i32 6;
    i32 %105 = mul i32 %104, i32 2;
    i32 %106 = add i32 %92, i32 7;
    i32 %107 = mul i32 %106, i32 2;
    i32 %108 = add i32 %92, i32 8;
    i32 %109 = mul i32 %108, i32 2;
    i32 %110 = add i32 %92, i32 9;
    i32 %111 = mul i32 %110, i32 2;
    i32 %112 = add i32 %92, i32 10;
    i32 %113 = mul i32 %112, i32 2;
    i32 %114 = add i32 %92, i32 11;
    i32 %115 = mul i32 %114, i32 2;
    i32 %116 = add i32 %92, i32 12;
    i32 %117 = mul i32 %116, i32 2;
    i32 %118 = add i32 %92, i32 13;
    i32 %119 = mul i32 %118, i32 2;
    i32 %120 = add i32 %92, i32 14;
    i32 %121 = mul i32 %120, i32 2;
    i32 %122 = add i32 %92, i32 15;
    i32 %123 = mul i32 %122, i32 2;
    i32 %124 = add i32 %91, i32 %93;
    i32 %125 = add i32 %124, i32 %95;
    i32 %126 = add i32 %125, i32 %97;
    i32 %127 = add i32 %126, i32 %99;
    i32 %128 = add i32 %127, i32 %101;
    i32 %129 = add i32 %128, i32 %103;
    i32 %130 = add i32 %129, i32 %105;
    i32 %131 = add i32 %130, i32 %107;
    i32 %132 = add i32 %131, i32 %109;
    i32 %133 = add i32 %132, i32 %111;
    i32 %134 = add i32 %133, i32 %113;
    i32 %135 = add i32 %134, i32 %115;
    i32 %136 = add i32 %135, i32 %117;
    i32 %137 = add i32 %136, i32 %119;
    i32 %138 = add i32 %137, i32 %121;
    i32 %139 = add i32 %138, i32 %123;
    i32 %140 = add i32 %92, i32 16;
    i1 %141 = scmp lt i32 %140, i32 64;
    cbr i1 %141(prob = 0.75), ^while.body, ^while.header;
^while.header:
    i1 %142 = scmp lt i32 %140, i32 65;
    cbr i1 %142(prob = 0.97), ^super.header, ^indirect;
^super.header:
    i32 %143 = phi [^while.header, i32 %139] [^while.body1, i32 %196];
    i32 %144 = phi [^while.header, i32 %140] [^while.body1, i32 %145];
    i32 %145 = add i32 %144, i32 16;
    i1 %146 = scmp lt i32 %145, i32 65;
    cbr i1 %146(prob = 0.67), ^while.body1, ^while.body2;
^indirect:
    i32 %147 = phi [^while.header, i32 %140] [^while.body2, i32 %201];
    i32 %148 = phi [^while.header, i32 %139] [^while.body2, i32 %200];
    i1 %149 = scmp lt i32 %147, i32 67;
    cbr i1 %149(prob = 0.97), ^super.header1, ^b;
^while.body1:
    i32 %150 = mul i32 %144, i32 3;
    i32 %151 = add i32 %144, i32 1;
    i32 %152 = mul i32 %151, i32 3;
    i32 %153 = add i32 %144, i32 2;
    i32 %154 = mul i32 %153, i32 3;
    i32 %155 = add i32 %144, i32 3;
    i32 %156 = mul i32 %155, i32 3;
    i32 %157 = add i32 %144, i32 4;
    i32 %158 = mul i32 %157, i32 3;
    i32 %159 = add i32 %144, i32 5;
    i32 %160 = mul i32 %159, i32 3;
    i32 %161 = add i32 %144, i32 6;
    i32 %162 = mul i32 %161, i32 3;
    i32 %163 = add i32 %144, i32 7;
    i32 %164 = mul i32 %163, i32 3;
    i32 %165 = add i32 %144, i32 8;
    i32 %166 = mul i32 %165, i32 3;
    i32 %167 = add i32 %144, i32 9;
    i32 %168 = mul i32 %167, i32 3;
    i32 %169 = add i32 %144, i32 10;
    i32 %170 = mul i32 %169, i32 3;
    i32 %171 = add i32 %144, i32 11;
    i32 %172 = mul i32 %171, i32 3;
    i32 %173 = add i32 %144, i32 12;
    i32 %174 = mul i32 %173, i32 3;
    i32 %175 = add i32 %144, i32 13;
    i32 %176 = mul i32 %175, i32 3;
    i32 %177 = add i32 %144, i32 14;
    i32 %178 = mul i32 %177, i32 3;
    i32 %179 = add i32 %144, i32 15;
    i32 %180 = mul i32 %179, i32 3;
    i32 %181 = add i32 %143, i32 %150;
    i32 %182 = add i32 %181, i32 %152;
    i32 %183 = add i32 %182, i32 %154;
    i32 %184 = add i32 %183, i32 %156;
    i32 %185 = add i32 %184, i32 %158;
    i32 %186 = add i32 %185, i32 %160;
    i32 %187 = add i32 %186, i32 %162;
    i32 %188 = add i32 %187, i32 %164;
    i32 %189 = add i32 %188, i32 %166;
    i32 %190 = add i32 %189, i32 %168;
    i32 %191 = add i32 %190, i32 %170;
    i32 %192 = add i32 %191, i32 %172;
    i32 %193 = add i32 %192, i32 %174;
    i32 %194 = add i32 %193, i32 %176;
    i32 %195 = add i32 %194, i32 %178;
    i32 %196 = add i32 %195, i32 %180;
    ubr ^super.header;
^while.body2:
    i32 %197 = phi [^super.header, i32 %143] [^while.body2, i32 %200];
    i32 %198 = phi [^super.header, i32 %144] [^while.body2, i32 %201];
    i32 %199 = mul i32 %198, i32 3;
    i32 %200 = add i32 %197, i32 %199;
    i32 %201 = add i32 %198, i32 1;
    i1 %202 = scmp lt i32 %201, i32 65;
    cbr i1 %202(prob = 0.97), ^while.body2, ^indirect;
^super.header1:
    i32 %203 = phi [^indirect, i32 %148] [^while.body3, i32 %270];
    i32 %204 = phi [^indirect, i32 %147] [^while.body3, i32 %205];
    i32 %205 = add i32 %204, i32 16;
    i1 %206 = scmp lt i32 %205, i32 67;
    cbr i1 %206(prob = 0.67), ^while.body3, ^while.body4;
^b:
    i32 %207 = phi [^indirect, i32 %148] [^while.body4, i32 %275];
    call (i32) -> void @putint(i32 %207);
    ret i32 %207;
^while.body3:
    i32 %208 = mul i32 %204, i32 %204;
    i32 %209 = mul i32 %204, i32 %208;
    i32 %210 = add i32 %204, i32 1;
    i32 %211 = mul i32 %210, i32 %210;
    i32 %212 = mul i32 %210, i32 %211;
    i32 %213 = add i32 %204, i32 2;
    i32 %214 = mul i32 %213, i32 %213;
    i32 %215 = mul i32 %213, i32 %214;
    i32 %216 = add i32 %204, i32 3;
    i32 %217 = mul i32 %216, i32 %216;
    i32 %218 = mul i32 %216, i32 %217;
    i32 %219 = add i32 %204, i32 4;
    i32 %220 = mul i32 %219, i32 %219;
    i32 %221 = mul i32 %219, i32 %220;
    i32 %222 = add i32 %204, i32 5;
    i32 %223 = mul i32 %222, i32 %222;
    i32 %224 = mul i32 %222, i32 %223;
    i32 %225 = add i32 %204, i32 6;
    i32 %226 = mul i32 %225, i32 %225;
    i32 %227 = mul i32 %225, i32 %226;
    i32 %228 = add i32 %204, i32 7;
    i32 %229 = mul i32 %228, i32 %228;
    i32 %230 = mul i32 %228, i32 %229;
    i32 %231 = add i32 %204, i32 8;
    i32 %232 = mul i32 %231, i32 %231;
    i32 %233 = mul i32 %231, i32 %232;
    i32 %234 = add i32 %204, i32 9;
    i32 %235 = mul i32 %234, i32 %234;
    i32 %236 = mul i32 %234, i32 %235;
    i32 %237 = add i32 %204, i32 10;
    i32 %238 = mul i32 %237, i32 %237;
    i32 %239 = mul i32 %237, i32 %238;
    i32 %240 = add i32 %204, i32 11;
    i32 %241 = mul i32 %240, i32 %240;
    i32 %242 = mul i32 %240, i32 %241;
    i32 %243 = add i32 %204, i32 12;
    i32 %244 = mul i32 %243, i32 %243;
    i32 %245 = mul i32 %243, i32 %244;
    i32 %246 = add i32 %204, i32 13;
    i32 %247 = mul i32 %246, i32 %246;
    i32 %248 = mul i32 %246, i32 %247;
    i32 %249 = add i32 %204, i32 14;
    i32 %250 = mul i32 %249, i32 %249;
    i32 %251 = mul i32 %249, i32 %250;
    i32 %252 = add i32 %204, i32 15;
    i32 %253 = mul i32 %252, i32 %252;
    i32 %254 = mul i32 %252, i32 %253;
    i32 %255 = add i32 %203, i32 %209;
    i32 %256 = add i32 %255, i32 %212;
    i32 %257 = add i32 %256, i32 %215;
    i32 %258 = add i32 %257, i32 %218;
    i32 %259 = add i32 %258, i32 %221;
    i32 %260 = add i32 %259, i32 %224;
    i32 %261 = add i32 %260, i32 %227;
    i32 %262 = add i32 %261, i32 %230;
    i32 %263 = add i32 %262, i32 %233;
    i32 %264 = add i32 %263, i32 %236;
    i32 %265 = add i32 %264, i32 %239;
    i32 %266 = add i32 %265, i32 %242;
    i32 %267 = add i32 %266, i32 %245;
    i32 %268 = add i32 %267, i32 %248;
    i32 %269 = add i32 %268, i32 %251;
    i32 %270 = add i32 %269, i32 %254;
    ubr ^super.header1;
^while.body4:
    i32 %271 = phi [^super.header1, i32 %203] [^while.body4, i32 %275];
    i32 %272 = phi [^super.header1, i32 %204] [^while.body4, i32 %276];
    i32 %273 = mul i32 %272, i32 %272;
    i32 %274 = mul i32 %272, i32 %273;
    i32 %275 = add i32 %271, i32 %274;
    i32 %276 = add i32 %272, i32 1;
    i1 %277 = scmp lt i32 %276, i32 67;
    cbr i1 %277(prob = 0.97), ^while.body4, ^b;
}
