internal func @read() -> i32 { NoMemoryRead NoMemoryWrite };
internal func @write() -> void { NoMemoryRead NoMemoryWrite };
func @main() -> i32 { NoMemoryRead NoMemoryWrite NoRecurse } {
^entry:
    ubr ^while.body;
^while.body:
    i32 %0 = phi [^entry, i32 14] [^while.body, i32 %3];
    i32 %1 = phi [^entry, i32 0] [^while.body, i32 %2];
    i32 %2 = add i32 %1, i32 %0;
    i32 %3 = add i32 %0, i32 -1;
    i1 %4 = scmp neq i32 %0, i32 0;
    cbr i1 %4(prob = 0.97), ^while.body, ^b;
^b:
    call (i32) -> void @write(i32 %2);
    i32 %5 = call () -> i32 @read();
    i32 %6 = call () -> i32 @read();
    i32 %7 = call () -> i32 @read();
    i1 %8 = scmp lt i32 %5, i32 %6;
    i32 %9 = zext i1 %8 to i32;
    call (i32) -> void @write(i32 %9);
    cbr i1 %8(prob = 0.5), ^b1, ^b2;
^b1:
    i1 %10 = scmp lt i32 %6, i32 %7;
    cbr i1 %10(prob = 0.5), ^if.then, ^b2;
^b2:
    ret i32 0;
^if.then:
    i1 %11 = scmp lt i32 %5, i32 %6;
    i32 %12 = zext i1 %11 to i32;
    call (i32) -> void @write(i32 %12);
    ubr ^b2;
}
