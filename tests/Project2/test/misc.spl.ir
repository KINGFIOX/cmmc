struct foo3 {};
struct foo2 {i32 x, i32 y};
struct foo {i32 c, [10 * i32] d, struct foo2 w, struct foo3 a, [2 * struct foo3] b};
struct looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooogstruct {i32 looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooogfield};

func @read() -> i32 { NoMemoryRead NoMemoryWrite };
func @write() -> void { NoMemoryRead NoMemoryWrite };
func @test([2 * i32]* %x) -> i32 {
^entry:
    i32* %0 = getelementptr &([2 * i32]* %x)[i32 0][i32 1];
    i32 %1 = load i32* %0;
    ret i32 %1;
}
func @test1([3 * struct foo]* %x, struct foo* %0) -> void {
^entry:
    struct foo* %1 = getelementptr &([3 * struct foo]* %x)[i32 0][i32 0];
    i32* %2 = getelementptr &(struct foo* %0)[i32 0].c;
    i32* %3 = getelementptr &(struct foo* %1)[i32 0].c;
    i32 %4 = load i32* %3;
    store i32* %2 with i32 %4;
    [10 * i32]* %5 = getelementptr &(struct foo* %0)[i32 0].d;
    [10 * i32]* %6 = getelementptr &(struct foo* %1)[i32 0].d;
    i32* %7 = getelementptr &([10 * i32]* %5)[i32 0][i32 0];
    i32* %8 = getelementptr &([10 * i32]* %6)[i32 0][i32 0];
    i32 %9 = load i32* %8;
    store i32* %7 with i32 %9;
    i32* %10 = getelementptr &([10 * i32]* %5)[i32 0][i32 1];
    i32* %11 = getelementptr &([10 * i32]* %6)[i32 0][i32 1];
    i32 %12 = load i32* %11;
    store i32* %10 with i32 %12;
    i32* %13 = getelementptr &([10 * i32]* %5)[i32 0][i32 2];
    i32* %14 = getelementptr &([10 * i32]* %6)[i32 0][i32 2];
    i32 %15 = load i32* %14;
    store i32* %13 with i32 %15;
    i32* %16 = getelementptr &([10 * i32]* %5)[i32 0][i32 3];
    i32* %17 = getelementptr &([10 * i32]* %6)[i32 0][i32 3];
    i32 %18 = load i32* %17;
    store i32* %16 with i32 %18;
    i32* %19 = getelementptr &([10 * i32]* %5)[i32 0][i32 4];
    i32* %20 = getelementptr &([10 * i32]* %6)[i32 0][i32 4];
    i32 %21 = load i32* %20;
    store i32* %19 with i32 %21;
    i32* %22 = getelementptr &([10 * i32]* %5)[i32 0][i32 5];
    i32* %23 = getelementptr &([10 * i32]* %6)[i32 0][i32 5];
    i32 %24 = load i32* %23;
    store i32* %22 with i32 %24;
    i32* %25 = getelementptr &([10 * i32]* %5)[i32 0][i32 6];
    i32* %26 = getelementptr &([10 * i32]* %6)[i32 0][i32 6];
    i32 %27 = load i32* %26;
    store i32* %25 with i32 %27;
    i32* %28 = getelementptr &([10 * i32]* %5)[i32 0][i32 7];
    i32* %29 = getelementptr &([10 * i32]* %6)[i32 0][i32 7];
    i32 %30 = load i32* %29;
    store i32* %28 with i32 %30;
    i32* %31 = getelementptr &([10 * i32]* %5)[i32 0][i32 8];
    i32* %32 = getelementptr &([10 * i32]* %6)[i32 0][i32 8];
    i32 %33 = load i32* %32;
    store i32* %31 with i32 %33;
    i32* %34 = getelementptr &([10 * i32]* %5)[i32 0][i32 9];
    i32* %35 = getelementptr &([10 * i32]* %6)[i32 0][i32 9];
    i32 %36 = load i32* %35;
    store i32* %34 with i32 %36;
    struct foo2* %37 = getelementptr &(struct foo* %0)[i32 0].w;
    struct foo2* %38 = getelementptr &(struct foo* %1)[i32 0].w;
    i32* %39 = getelementptr &(struct foo2* %37)[i32 0].x;
    i32* %40 = getelementptr &(struct foo2* %38)[i32 0].x;
    i32 %41 = load i32* %40;
    store i32* %39 with i32 %41;
    i32* %42 = getelementptr &(struct foo2* %37)[i32 0].y;
    i32* %43 = getelementptr &(struct foo2* %38)[i32 0].y;
    i32 %44 = load i32* %43;
    store i32* %42 with i32 %44;
    struct foo3* %45 = getelementptr &(struct foo* %0)[i32 0].a;
    struct foo3* %46 = getelementptr &(struct foo* %1)[i32 0].a;
    [2 * struct foo3]* %47 = getelementptr &(struct foo* %0)[i32 0].b;
    [2 * struct foo3]* %48 = getelementptr &(struct foo* %1)[i32 0].b;
    struct foo3* %49 = getelementptr &([2 * struct foo3]* %47)[i32 0][i32 0];
    struct foo3* %50 = getelementptr &([2 * struct foo3]* %48)[i32 0][i32 0];
    struct foo3* %51 = getelementptr &([2 * struct foo3]* %47)[i32 0][i32 1];
    struct foo3* %52 = getelementptr &([2 * struct foo3]* %48)[i32 0][i32 1];
    ret;
}
func @test2(i32 %x) -> i32 {
^entry:
    i32* %x1 = alloc i32;
    store i32* %x1 with i32 %x;
    i32 %0 = load i32* %x1;
    i32 %1 = sub i32 %0, i32 1;
    ret i32 %1;
}
func @test3(struct foo2* %x) -> i32 {
^entry:
    struct foo2* %x1 = alloc struct foo2;
    i32* %0 = getelementptr &(struct foo2* %x1)[i32 0].x;
    i32* %1 = getelementptr &(struct foo2* %x)[i32 0].x;
    i32 %2 = load i32* %1;
    store i32* %0 with i32 %2;
    i32* %3 = getelementptr &(struct foo2* %x1)[i32 0].y;
    i32* %4 = getelementptr &(struct foo2* %x)[i32 0].y;
    i32 %5 = load i32* %4;
    store i32* %3 with i32 %5;
    i32* %6 = getelementptr &(struct foo2* %x1)[i32 0].x;
    i32 %7 = load i32* %6;
    ret i32 %7;
}
[10 * struct foo]* @www;
func @loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooogfunc(i32 %loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooogparam) -> i32 {
^entry:
    i32* %loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooogparam1 = alloc i32;
    store i32* %loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooogparam1 with i32 %loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooogparam;
    unreachable;
}
func @main() -> i32 {
^entry:
    struct foo* %0 = alloc struct foo;
    i32* %looooooo = alloc i32;
    [3 * struct foo]* %c = alloc [3 * struct foo];
    struct foo* %w = alloc struct foo;
    [2 * i32]* %z = alloc [2 * i32];
    i32* %y = alloc i32;
    i32* %x = alloc i32;
    store i32* %x with i32 0;
    store i32* %y with i32 0;
    store i32* %looooooo with i32 0;
    i32 %1 = call ([2 * i32]*) -> i32 @test([2 * i32]* %z);
    store i32* %x with i32 %1;
    i32* %2 = getelementptr &(struct foo* %w)[i32 0].c;
    i32* %3 = getelementptr &([2 * i32]* %z)[i32 0][i32 0];
    i32 %4 = call ([2 * i32]*) -> i32 @test([2 * i32]* %z);
    i32 %5 = call (i32) -> i32 @test2(i32 %4);
    i32 %6 = call (i32) -> i32 @test2(i32 %5);
    store i32* %x with i32 %6;
    store i32* %3 with i32 %6;
    store i32* %2 with i32 %6;
    i32 %7 = load i32* %x;
    i32* %8 = getelementptr &([2 * i32]* %z)[i32 0][i32 0];
    i32 %9 = load i32* %8;
    i32 %10 = add i32 %7, i32 %9;
    struct foo* %11 = getelementptr &([3 * struct foo]* %c)[i32 0][i32 %10];
    call ([3 * struct foo]*, struct foo*) -> void @test1([3 * struct foo]* %c, struct foo* %0);
    i32* %12 = getelementptr &(struct foo* %11)[i32 0].c;
    i32* %13 = getelementptr &(struct foo* %0)[i32 0].c;
    i32 %14 = load i32* %13;
    store i32* %12 with i32 %14;
    [10 * i32]* %15 = getelementptr &(struct foo* %11)[i32 0].d;
    [10 * i32]* %16 = getelementptr &(struct foo* %0)[i32 0].d;
    i32* %17 = getelementptr &([10 * i32]* %15)[i32 0][i32 0];
    i32* %18 = getelementptr &([10 * i32]* %16)[i32 0][i32 0];
    i32 %19 = load i32* %18;
    store i32* %17 with i32 %19;
    i32* %20 = getelementptr &([10 * i32]* %15)[i32 0][i32 1];
    i32* %21 = getelementptr &([10 * i32]* %16)[i32 0][i32 1];
    i32 %22 = load i32* %21;
    store i32* %20 with i32 %22;
    i32* %23 = getelementptr &([10 * i32]* %15)[i32 0][i32 2];
    i32* %24 = getelementptr &([10 * i32]* %16)[i32 0][i32 2];
    i32 %25 = load i32* %24;
    store i32* %23 with i32 %25;
    i32* %26 = getelementptr &([10 * i32]* %15)[i32 0][i32 3];
    i32* %27 = getelementptr &([10 * i32]* %16)[i32 0][i32 3];
    i32 %28 = load i32* %27;
    store i32* %26 with i32 %28;
    i32* %29 = getelementptr &([10 * i32]* %15)[i32 0][i32 4];
    i32* %30 = getelementptr &([10 * i32]* %16)[i32 0][i32 4];
    i32 %31 = load i32* %30;
    store i32* %29 with i32 %31;
    i32* %32 = getelementptr &([10 * i32]* %15)[i32 0][i32 5];
    i32* %33 = getelementptr &([10 * i32]* %16)[i32 0][i32 5];
    i32 %34 = load i32* %33;
    store i32* %32 with i32 %34;
    i32* %35 = getelementptr &([10 * i32]* %15)[i32 0][i32 6];
    i32* %36 = getelementptr &([10 * i32]* %16)[i32 0][i32 6];
    i32 %37 = load i32* %36;
    store i32* %35 with i32 %37;
    i32* %38 = getelementptr &([10 * i32]* %15)[i32 0][i32 7];
    i32* %39 = getelementptr &([10 * i32]* %16)[i32 0][i32 7];
    i32 %40 = load i32* %39;
    store i32* %38 with i32 %40;
    i32* %41 = getelementptr &([10 * i32]* %15)[i32 0][i32 8];
    i32* %42 = getelementptr &([10 * i32]* %16)[i32 0][i32 8];
    i32 %43 = load i32* %42;
    store i32* %41 with i32 %43;
    i32* %44 = getelementptr &([10 * i32]* %15)[i32 0][i32 9];
    i32* %45 = getelementptr &([10 * i32]* %16)[i32 0][i32 9];
    i32 %46 = load i32* %45;
    store i32* %44 with i32 %46;
    struct foo2* %47 = getelementptr &(struct foo* %11)[i32 0].w;
    struct foo2* %48 = getelementptr &(struct foo* %0)[i32 0].w;
    i32* %49 = getelementptr &(struct foo2* %47)[i32 0].x;
    i32* %50 = getelementptr &(struct foo2* %48)[i32 0].x;
    i32 %51 = load i32* %50;
    store i32* %49 with i32 %51;
    i32* %52 = getelementptr &(struct foo2* %47)[i32 0].y;
    i32* %53 = getelementptr &(struct foo2* %48)[i32 0].y;
    i32 %54 = load i32* %53;
    store i32* %52 with i32 %54;
    struct foo3* %55 = getelementptr &(struct foo* %11)[i32 0].a;
    struct foo3* %56 = getelementptr &(struct foo* %0)[i32 0].a;
    [2 * struct foo3]* %57 = getelementptr &(struct foo* %11)[i32 0].b;
    [2 * struct foo3]* %58 = getelementptr &(struct foo* %0)[i32 0].b;
    struct foo3* %59 = getelementptr &([2 * struct foo3]* %57)[i32 0][i32 0];
    struct foo3* %60 = getelementptr &([2 * struct foo3]* %58)[i32 0][i32 0];
    struct foo3* %61 = getelementptr &([2 * struct foo3]* %57)[i32 0][i32 1];
    struct foo3* %62 = getelementptr &([2 * struct foo3]* %58)[i32 0][i32 1];
    struct foo* %63 = getelementptr &([3 * struct foo]* %c)[i32 0][i32 0];
    [10 * i32]* %64 = getelementptr &(struct foo* %63)[i32 0].d;
    i32* %65 = getelementptr &([10 * i32]* %64)[i32 0][i32 0];
    i32 %66 = load i32* %65;
    struct foo* %67 = getelementptr &([3 * struct foo]* %c)[i32 0][i32 %66];
    struct foo2* %68 = getelementptr &(struct foo* %67)[i32 0].w;
    i32* %69 = getelementptr &(struct foo2* %68)[i32 0].x;
    store i32* %69 with i32 10;
    i32* %70 = getelementptr &([2 * i32]* %z)[i32 0][i32 0];
    i32* %71 = getelementptr &([2 * i32]* %z)[i32 0][i32 1];
    i32 %72 = load i32* %71;
    store i32* %70 with i32 %72;
    store i32* %y with i32 %72;
    i32 %73 = load i32* %y;
    store i32* %y with i32 %73;
    store i32* %y with i32 %73;
    struct foo* %74 = getelementptr &([3 * struct foo]* %c)[i32 0][i32 0];
    struct foo2* %75 = getelementptr &(struct foo* %74)[i32 0].w;
    i32 %76 = call (struct foo2*) -> i32 @test3(struct foo2* %75);
    store i32* %y with i32 %76;
    store i32* %y with i32 0;
    i1 %77 = scmp neq i32 0, i32 0;
    cbr i1 %77(prob = 0.5), ^if.then, ^b;
^if.then:
    store i32* %y with i32 0;
    ubr ^b;
^b:
    i1 %78 = fcmp eq f32 0, f32 0;
    i32 %79 = zext i1 %78 to i32;
    i1 %80 = scmp neq i32 %79, i32 0;
    i1 %81 = xor i1 %80, i1 true;
    i32 %82 = zext i1 %81 to i32;
    i1 %83 = scmp neq i32 %82, i32 0;
    cbr i1 %83(prob = 0.5), ^if.then1, ^b1;
^if.then1:
    i32* %84 = getelementptr &([2 * i32]* %z)[i32 0][i32 0];
    store i32* %84 with i32 0;
    ubr ^b1;
^b1:
    ret i32 0;
}
