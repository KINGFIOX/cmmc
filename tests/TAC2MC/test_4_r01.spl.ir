func @read() -> i32 { NoMemoryRead NoMemoryWrite };
func @write() -> void { NoMemoryRead NoMemoryWrite };
func @hanoi(i32 %n, i32 %p1, i32 %p2, i32 %p3) -> i32 {
^entry:
    i32* %p31 = alloc i32;
    i32* %p21 = alloc i32;
    i32* %p11 = alloc i32;
    i32* %n1 = alloc i32;
    store i32* %n1 with i32 %n;
    store i32* %p11 with i32 %p1;
    store i32* %p21 with i32 %p2;
    store i32* %p31 with i32 %p3;
    i32 %0 = load i32* %n1;
    i1 %1 = scmp eq i32 %0, i32 1;
    i32 %2 = zext i1 %1 to i32;
    i1 %3 = scmp neq i32 %2, i32 0;
    cbr i1 %3(prob = 0.5), ^if.then, ^if.else;
^if.then:
    i32 %4 = load i32* %p11;
    i32 %5 = mul i32 %4, i32 10000;
    i32 %6 = load i32* %p31;
    i32 %7 = add i32 %5, i32 %6;
    call (i32) -> void @write(i32 %7);
    ubr ^b;
^if.else:
    i32 %8 = load i32* %n1;
    i32 %9 = sub i32 %8, i32 1;
    i32 %10 = load i32* %p11;
    i32 %11 = load i32* %p31;
    i32 %12 = load i32* %p21;
    i32 %13 = call (i32, i32, i32, i32) -> i32 @hanoi(i32 %9, i32 %10, i32 %11, i32 %12);
    i32 %14 = load i32* %p11;
    i32 %15 = mul i32 %14, i32 10000;
    i32 %16 = load i32* %p31;
    i32 %17 = add i32 %15, i32 %16;
    call (i32) -> void @write(i32 %17);
    i32 %18 = load i32* %n1;
    i32 %19 = sub i32 %18, i32 1;
    i32 %20 = load i32* %p21;
    i32 %21 = load i32* %p11;
    i32 %22 = load i32* %p31;
    i32 %23 = call (i32, i32, i32, i32) -> i32 @hanoi(i32 %19, i32 %20, i32 %21, i32 %22);
    ubr ^b;
^b:
    ret i32 0;
}
func @main() -> i32 {
^entry:
    i32* %sum = alloc i32;
    store i32* %sum with i32 3;
    i32 %0 = load i32* %sum;
    i32 %1 = call (i32, i32, i32, i32) -> i32 @hanoi(i32 %0, i32 1, i32 2, i32 3);
    ret i32 0;
}
